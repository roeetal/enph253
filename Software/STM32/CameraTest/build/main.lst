ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB128:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 2


  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE BEGIN Includes */
  44:Src/main.c    **** #include "ssd1306.h"
  45:Src/main.c    **** #include "fonts.h"
  46:Src/main.c    **** /* USER CODE END Includes */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** ADC_HandleTypeDef hadc1;
  50:Src/main.c    **** 
  51:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  52:Src/main.c    **** 
  53:Src/main.c    **** TIM_HandleTypeDef htim1;
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN PV */
  56:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  57:Src/main.c    **** #define MOTOR_SPEED 1000
  58:Src/main.c    **** /* USER CODE END PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  61:Src/main.c    **** void SystemClock_Config(void);
  62:Src/main.c    **** static void MX_GPIO_Init(void);
  63:Src/main.c    **** static void MX_ADC1_Init(void);
  64:Src/main.c    **** static void MX_TIM1_Init(void);
  65:Src/main.c    **** static void MX_I2C1_Init(void);
  66:Src/main.c    **** 
  67:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
  68:Src/main.c    ****                                 
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE BEGIN PFP */
  71:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  72:Src/main.c    **** void print(char msg[], int row);
  73:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]);
  74:Src/main.c    **** /* USER CODE END PFP */
  75:Src/main.c    **** 
  76:Src/main.c    **** /* USER CODE BEGIN 0 */
  77:Src/main.c    **** /* USER CODE END 0 */
  78:Src/main.c    **** 
  79:Src/main.c    **** /**
  80:Src/main.c    ****   * @brief  The application entry point.
  81:Src/main.c    ****   *
  82:Src/main.c    ****   * @retval None
  83:Src/main.c    ****   */
  84:Src/main.c    **** int main(void)
  85:Src/main.c    **** {
  86:Src/main.c    ****   /* USER CODE BEGIN 1 */
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* USER CODE END 1 */
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 3


  89:Src/main.c    **** 
  90:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  91:Src/main.c    **** 
  92:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  93:Src/main.c    ****   HAL_Init();
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE BEGIN Init */
  96:Src/main.c    ****   /* USER CODE END Init */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* Configure the system clock */
  99:Src/main.c    ****   SystemClock_Config();
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE END SysInit */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* Initialize all configured peripherals */
 106:Src/main.c    ****   MX_GPIO_Init();
 107:Src/main.c    ****   MX_ADC1_Init();
 108:Src/main.c    ****   MX_TIM1_Init();
 109:Src/main.c    ****   MX_I2C1_Init();
 110:Src/main.c    ****   /* USER CODE BEGIN 2 */
 111:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 112:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 113:Src/main.c    ****   ssd1306_Init();
 114:Src/main.c    **** 
 115:Src/main.c    ****   HAL_ADC_Start(&hadc1);
 116:Src/main.c    ****   print("Starting", 0);
 117:Src/main.c    ****   /* USER CODE END 2 */
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* Infinite loop */
 120:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 121:Src/main.c    ****   while (1)
 122:Src/main.c    ****   {
 123:Src/main.c    ****     if (HAL_ADC_PollForConversion(&hadc1, 10000) == HAL_OK){
 124:Src/main.c    ****       int err = HAL_ADC_GetValue(&hadc1);
 125:Src/main.c    ****       char err_string[20]="";
 126:Src/main.c    ****       sprintf(err_string, "Err: %d", err);
 127:Src/main.c    ****       print(err_string, 0);
 128:Src/main.c    ****       // TODO: Move motors
 129:Src/main.c    ****       uint32_t speed[] = {1,1};
 130:Src/main.c    ****       update_motor_speed(1, speed);
 131:Src/main.c    ****     }
 132:Src/main.c    ****   /* USER CODE END WHILE */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* USER CODE BEGIN 3 */
 135:Src/main.c    **** 
 136:Src/main.c    ****   }
 137:Src/main.c    ****   /* USER CODE END 3 */
 138:Src/main.c    **** 
 139:Src/main.c    **** }
 140:Src/main.c    **** 
 141:Src/main.c    **** /**
 142:Src/main.c    ****   * @brief System Clock Configuration
 143:Src/main.c    ****   * @retval None
 144:Src/main.c    ****   */
 145:Src/main.c    **** void SystemClock_Config(void)
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 4


 146:Src/main.c    **** {
 147:Src/main.c    **** 
 148:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 149:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 150:Src/main.c    **** 
 151:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 152:Src/main.c    ****     */
 153:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 154:Src/main.c    **** 
 155:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 156:Src/main.c    **** 
 157:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 158:Src/main.c    ****     */
 159:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 160:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 161:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 162:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 163:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 164:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 165:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 166:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 167:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 168:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 169:Src/main.c    ****   {
 170:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 171:Src/main.c    ****   }
 172:Src/main.c    **** 
 173:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 174:Src/main.c    ****     */
 175:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 176:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 177:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 178:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 179:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 180:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 181:Src/main.c    **** 
 182:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 183:Src/main.c    ****   {
 184:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 185:Src/main.c    ****   }
 186:Src/main.c    **** 
 187:Src/main.c    ****     /**Configure the Systick interrupt time 
 188:Src/main.c    ****     */
 189:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 190:Src/main.c    **** 
 191:Src/main.c    ****     /**Configure the Systick 
 192:Src/main.c    ****     */
 193:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 196:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 197:Src/main.c    **** }
 198:Src/main.c    **** 
 199:Src/main.c    **** /* ADC1 init function */
 200:Src/main.c    **** static void MX_ADC1_Init(void)
 201:Src/main.c    **** {
 202:Src/main.c    **** 
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 5


 203:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 204:Src/main.c    **** 
 205:Src/main.c    ****     /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of co
 206:Src/main.c    ****     */
 207:Src/main.c    ****   hadc1.Instance = ADC1;
 208:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 209:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 210:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 211:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 212:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 213:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 214:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 215:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 216:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 217:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 218:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 219:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 220:Src/main.c    ****   {
 221:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 222:Src/main.c    ****   }
 223:Src/main.c    **** 
 224:Src/main.c    ****     /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and i
 225:Src/main.c    ****     */
 226:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 227:Src/main.c    ****   sConfig.Rank = 1;
 228:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 229:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 230:Src/main.c    ****   {
 231:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 232:Src/main.c    ****   }
 233:Src/main.c    **** 
 234:Src/main.c    **** }
 235:Src/main.c    **** 
 236:Src/main.c    **** /* I2C1 init function */
 237:Src/main.c    **** static void MX_I2C1_Init(void)
 238:Src/main.c    **** {
 239:Src/main.c    **** 
 240:Src/main.c    ****   hi2c1.Instance = I2C1;
 241:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 242:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 243:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 244:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 245:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 246:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 247:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 248:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 249:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 250:Src/main.c    ****   {
 251:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 252:Src/main.c    ****   }
 253:Src/main.c    **** 
 254:Src/main.c    **** }
 255:Src/main.c    **** 
 256:Src/main.c    **** /* TIM1 init function */
 257:Src/main.c    **** static void MX_TIM1_Init(void)
 258:Src/main.c    **** {
 259:Src/main.c    **** 
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 6


 260:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 261:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 262:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 263:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 264:Src/main.c    **** 
 265:Src/main.c    ****   htim1.Instance = TIM1;
 266:Src/main.c    ****   htim1.Init.Prescaler = 0;
 267:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 268:Src/main.c    ****   htim1.Init.Period = 1000;
 269:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 270:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 271:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 272:Src/main.c    ****   {
 273:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 274:Src/main.c    ****   }
 275:Src/main.c    **** 
 276:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 277:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 278:Src/main.c    ****   {
 279:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 280:Src/main.c    ****   }
 281:Src/main.c    **** 
 282:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 283:Src/main.c    ****   {
 284:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 285:Src/main.c    ****   }
 286:Src/main.c    **** 
 287:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 288:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 289:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 290:Src/main.c    ****   {
 291:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 292:Src/main.c    ****   }
 293:Src/main.c    **** 
 294:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 295:Src/main.c    ****   sConfigOC.Pulse = 0;
 296:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 297:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 298:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 299:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 300:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 301:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 302:Src/main.c    ****   {
 303:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 304:Src/main.c    ****   }
 305:Src/main.c    **** 
 306:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 307:Src/main.c    ****   {
 308:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 309:Src/main.c    ****   }
 310:Src/main.c    **** 
 311:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 312:Src/main.c    ****   {
 313:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 314:Src/main.c    ****   }
 315:Src/main.c    **** 
 316:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 7


 317:Src/main.c    ****   {
 318:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 319:Src/main.c    ****   }
 320:Src/main.c    **** 
 321:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 322:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 323:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 324:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 325:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 326:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 327:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 328:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 329:Src/main.c    ****   {
 330:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 331:Src/main.c    ****   }
 332:Src/main.c    **** 
 333:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 334:Src/main.c    **** 
 335:Src/main.c    **** }
 336:Src/main.c    **** 
 337:Src/main.c    **** /** Pinout Configuration
 338:Src/main.c    **** */
 339:Src/main.c    **** static void MX_GPIO_Init(void)
 340:Src/main.c    **** {
  28              		.loc 1 340 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 82B0     		sub	sp, sp, #8
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              	.LBB2:
 341:Src/main.c    **** 
 342:Src/main.c    ****   /* GPIO Ports Clock Enable */
 343:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  37              		.loc 1 343 0
  38 0002 0021     		movs	r1, #0
  39 0004 0091     		str	r1, [sp]
  40 0006 0B4B     		ldr	r3, .L3
  41 0008 1A6B     		ldr	r2, [r3, #48]
  42 000a 42F00102 		orr	r2, r2, #1
  43 000e 1A63     		str	r2, [r3, #48]
  44 0010 1A6B     		ldr	r2, [r3, #48]
  45 0012 02F00102 		and	r2, r2, #1
  46 0016 0092     		str	r2, [sp]
  47 0018 009A     		ldr	r2, [sp]
  48              	.LBE2:
  49              	.LBB3:
 344:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  50              		.loc 1 344 0
  51 001a 0191     		str	r1, [sp, #4]
  52 001c 1A6B     		ldr	r2, [r3, #48]
  53 001e 42F00202 		orr	r2, r2, #2
  54 0022 1A63     		str	r2, [r3, #48]
  55 0024 1B6B     		ldr	r3, [r3, #48]
  56 0026 03F00203 		and	r3, r3, #2
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 8


  57 002a 0193     		str	r3, [sp, #4]
  58 002c 019B     		ldr	r3, [sp, #4]
  59              	.LBE3:
 345:Src/main.c    **** 
 346:Src/main.c    **** }
  60              		.loc 1 346 0
  61 002e 02B0     		add	sp, sp, #8
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 0
  64              		@ sp needed
  65 0030 7047     		bx	lr
  66              	.L4:
  67 0032 00BF     		.align	2
  68              	.L3:
  69 0034 00380240 		.word	1073887232
  70              		.cfi_endproc
  71              	.LFE128:
  73              		.global	__aeabi_ui2d
  74              		.global	__aeabi_ddiv
  75              		.global	__aeabi_dmul
  76              		.global	__aeabi_d2uiz
  77              		.section	.text.update_motor_speed,"ax",%progbits
  78              		.align	2
  79              		.global	update_motor_speed
  80              		.thumb
  81              		.thumb_func
  83              	update_motor_speed:
  84              	.LFB129:
 347:Src/main.c    **** 
 348:Src/main.c    **** /* USER CODE BEGIN 4 */
 349:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]){
  85              		.loc 1 349 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              	.LVL0:
  90 0000 38B5     		push	{r3, r4, r5, lr}
  91              	.LCFI2:
  92              		.cfi_def_cfa_offset 16
  93              		.cfi_offset 3, -16
  94              		.cfi_offset 4, -12
  95              		.cfi_offset 5, -8
  96              		.cfi_offset 14, -4
  97 0002 0D46     		mov	r5, r1
 350:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[0]/100.0*MOTOR_SPEED);
  98              		.loc 1 350 0
  99 0004 0F4B     		ldr	r3, .L7
 100 0006 1C68     		ldr	r4, [r3]
 101 0008 0868     		ldr	r0, [r1]
 102              	.LVL1:
 103 000a FFF7FEFF 		bl	__aeabi_ui2d
 104              	.LVL2:
 105 000e 0022     		movs	r2, #0
 106 0010 0D4B     		ldr	r3, .L7+4
 107 0012 FFF7FEFF 		bl	__aeabi_ddiv
 108              	.LVL3:
 109 0016 0022     		movs	r2, #0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 9


 110 0018 0C4B     		ldr	r3, .L7+8
 111 001a FFF7FEFF 		bl	__aeabi_dmul
 112              	.LVL4:
 113 001e FFF7FEFF 		bl	__aeabi_d2uiz
 114              	.LVL5:
 115 0022 6063     		str	r0, [r4, #52]
 351:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[1]/100.0*MOTOR_SPEED);
 116              		.loc 1 351 0
 117 0024 6868     		ldr	r0, [r5, #4]
 118 0026 FFF7FEFF 		bl	__aeabi_ui2d
 119              	.LVL6:
 120 002a 0022     		movs	r2, #0
 121 002c 064B     		ldr	r3, .L7+4
 122 002e FFF7FEFF 		bl	__aeabi_ddiv
 123              	.LVL7:
 124 0032 0022     		movs	r2, #0
 125 0034 054B     		ldr	r3, .L7+8
 126 0036 FFF7FEFF 		bl	__aeabi_dmul
 127              	.LVL8:
 128 003a FFF7FEFF 		bl	__aeabi_d2uiz
 129              	.LVL9:
 130 003e E063     		str	r0, [r4, #60]
 131 0040 38BD     		pop	{r3, r4, r5, pc}
 132              	.LVL10:
 133              	.L8:
 134 0042 00BF     		.align	2
 135              	.L7:
 136 0044 00000000 		.word	htim1
 137 0048 00005940 		.word	1079574528
 138 004c 00408F40 		.word	1083129856
 139              		.cfi_endproc
 140              	.LFE129:
 142              		.section	.text.print,"ax",%progbits
 143              		.align	2
 144              		.global	print
 145              		.thumb
 146              		.thumb_func
 148              	print:
 149              	.LFB130:
 352:Src/main.c    **** }
 353:Src/main.c    **** 
 354:Src/main.c    **** void print(char msg[], int row){
 150              		.loc 1 354 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              	.LVL11:
 155 0000 38B5     		push	{r3, r4, r5, lr}
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 3, -16
 159              		.cfi_offset 4, -12
 160              		.cfi_offset 5, -8
 161              		.cfi_offset 14, -4
 162 0002 0546     		mov	r5, r0
 355:Src/main.c    ****     if(row==0){
 163              		.loc 1 355 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 10


 164 0004 0C46     		mov	r4, r1
 165 0006 11B9     		cbnz	r1, .L10
 356:Src/main.c    ****         ssd1306_Fill(Black);
 166              		.loc 1 356 0
 167 0008 0020     		movs	r0, #0
 168              	.LVL12:
 169 000a FFF7FEFF 		bl	ssd1306_Fill
 170              	.LVL13:
 171              	.L10:
 357:Src/main.c    ****     }
 358:Src/main.c    ****     ssd1306_SetCursor(0,row*10);
 172              		.loc 1 358 0
 173 000e 04EB8404 		add	r4, r4, r4, lsl #2
 174              	.LVL14:
 175 0012 6100     		lsls	r1, r4, #1
 176 0014 0020     		movs	r0, #0
 177 0016 01F0FE01 		and	r1, r1, #254
 178 001a FFF7FEFF 		bl	ssd1306_SetCursor
 179              	.LVL15:
 359:Src/main.c    ****     ssd1306_WriteString(msg,Font_7x10,White);
 180              		.loc 1 359 0
 181 001e 054B     		ldr	r3, .L12
 182 0020 2846     		mov	r0, r5
 183 0022 93E80600 		ldmia	r3, {r1, r2}
 184 0026 0123     		movs	r3, #1
 185 0028 FFF7FEFF 		bl	ssd1306_WriteString
 186              	.LVL16:
 360:Src/main.c    ****     ssd1306_UpdateScreen();
 187              		.loc 1 360 0
 188 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 189              	.LVL17:
 190 0030 38BD     		pop	{r3, r4, r5, pc}
 191              	.LVL18:
 192              	.L13:
 193 0032 00BF     		.align	2
 194              	.L12:
 195 0034 00000000 		.word	Font_7x10
 196              		.cfi_endproc
 197              	.LFE130:
 199              		.section	.text._Error_Handler,"ax",%progbits
 200              		.align	2
 201              		.global	_Error_Handler
 202              		.thumb
 203              		.thumb_func
 205              	_Error_Handler:
 206              	.LFB131:
 361:Src/main.c    **** }
 362:Src/main.c    **** /* USER CODE END 4 */
 363:Src/main.c    **** 
 364:Src/main.c    **** /**
 365:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 366:Src/main.c    ****   * @param  file: The file name as string.
 367:Src/main.c    ****   * @param  line: The line in file as a number.
 368:Src/main.c    ****   * @retval None
 369:Src/main.c    ****   */
 370:Src/main.c    **** void _Error_Handler(char *file, int line)
 371:Src/main.c    **** {
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 11


 207              		.loc 1 371 0
 208              		.cfi_startproc
 209              		@ Volatile: function does not return.
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213              	.LVL19:
 214              	.L15:
 372:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 373:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 374:Src/main.c    ****   while(1)
 375:Src/main.c    ****   {
 376:Src/main.c    ****   }
 215              		.loc 1 376 0 discriminator 1
 216 0000 FEE7     		b	.L15
 217              		.cfi_endproc
 218              	.LFE131:
 220 0002 00BF     		.section	.text.MX_ADC1_Init,"ax",%progbits
 221              		.align	2
 222              		.thumb
 223              		.thumb_func
 225              	MX_ADC1_Init:
 226              	.LFB125:
 201:Src/main.c    **** 
 227              		.loc 1 201 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 16
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231 0000 00B5     		push	{lr}
 232              	.LCFI4:
 233              		.cfi_def_cfa_offset 4
 234              		.cfi_offset 14, -4
 235 0002 85B0     		sub	sp, sp, #20
 236              	.LCFI5:
 237              		.cfi_def_cfa_offset 24
 207:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 238              		.loc 1 207 0
 239 0004 1448     		ldr	r0, .L20
 240 0006 154B     		ldr	r3, .L20+4
 241 0008 0360     		str	r3, [r0]
 208:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 242              		.loc 1 208 0
 243 000a 0023     		movs	r3, #0
 244 000c 4360     		str	r3, [r0, #4]
 209:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 245              		.loc 1 209 0
 246 000e 8360     		str	r3, [r0, #8]
 210:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 247              		.loc 1 210 0
 248 0010 0361     		str	r3, [r0, #16]
 211:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 249              		.loc 1 211 0
 250 0012 0122     		movs	r2, #1
 251 0014 8261     		str	r2, [r0, #24]
 212:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 252              		.loc 1 212 0
 253 0016 0362     		str	r3, [r0, #32]
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 12


 213:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 254              		.loc 1 213 0
 255 0018 C362     		str	r3, [r0, #44]
 214:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 256              		.loc 1 214 0
 257 001a 1149     		ldr	r1, .L20+8
 258 001c 8162     		str	r1, [r0, #40]
 215:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 259              		.loc 1 215 0
 260 001e C360     		str	r3, [r0, #12]
 216:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 261              		.loc 1 216 0
 262 0020 C261     		str	r2, [r0, #28]
 217:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 263              		.loc 1 217 0
 264 0022 0363     		str	r3, [r0, #48]
 218:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 265              		.loc 1 218 0
 266 0024 4361     		str	r3, [r0, #20]
 219:Src/main.c    ****   {
 267              		.loc 1 219 0
 268 0026 FFF7FEFF 		bl	HAL_ADC_Init
 269              	.LVL20:
 270 002a 18B1     		cbz	r0, .L17
 221:Src/main.c    ****   }
 271              		.loc 1 221 0
 272 002c 0D48     		ldr	r0, .L20+12
 273 002e DD21     		movs	r1, #221
 274 0030 FFF7FEFF 		bl	_Error_Handler
 275              	.LVL21:
 276              	.L17:
 226:Src/main.c    ****   sConfig.Rank = 1;
 277              		.loc 1 226 0
 278 0034 0023     		movs	r3, #0
 279 0036 0093     		str	r3, [sp]
 227:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 280              		.loc 1 227 0
 281 0038 0122     		movs	r2, #1
 282 003a 0192     		str	r2, [sp, #4]
 228:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 283              		.loc 1 228 0
 284 003c 0293     		str	r3, [sp, #8]
 229:Src/main.c    ****   {
 285              		.loc 1 229 0
 286 003e 0648     		ldr	r0, .L20
 287 0040 6946     		mov	r1, sp
 288 0042 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 289              	.LVL22:
 290 0046 18B1     		cbz	r0, .L16
 231:Src/main.c    ****   }
 291              		.loc 1 231 0
 292 0048 0648     		ldr	r0, .L20+12
 293 004a E721     		movs	r1, #231
 294 004c FFF7FEFF 		bl	_Error_Handler
 295              	.LVL23:
 296              	.L16:
 234:Src/main.c    **** 
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 13


 297              		.loc 1 234 0
 298 0050 05B0     		add	sp, sp, #20
 299              	.LCFI6:
 300              		.cfi_def_cfa_offset 4
 301              		@ sp needed
 302 0052 5DF804FB 		ldr	pc, [sp], #4
 303              	.L21:
 304 0056 00BF     		.align	2
 305              	.L20:
 306 0058 00000000 		.word	hadc1
 307 005c 00200140 		.word	1073815552
 308 0060 0100000F 		.word	251658241
 309 0064 00000000 		.word	.LC1
 310              		.cfi_endproc
 311              	.LFE125:
 313              		.section	.text.MX_TIM1_Init,"ax",%progbits
 314              		.align	2
 315              		.thumb
 316              		.thumb_func
 318              	MX_TIM1_Init:
 319              	.LFB127:
 258:Src/main.c    **** 
 320              		.loc 1 258 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 80
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324 0000 00B5     		push	{lr}
 325              	.LCFI7:
 326              		.cfi_def_cfa_offset 4
 327              		.cfi_offset 14, -4
 328 0002 95B0     		sub	sp, sp, #84
 329              	.LCFI8:
 330              		.cfi_def_cfa_offset 88
 265:Src/main.c    ****   htim1.Init.Prescaler = 0;
 331              		.loc 1 265 0
 332 0004 4248     		ldr	r0, .L33
 333 0006 434B     		ldr	r3, .L33+4
 334 0008 0360     		str	r3, [r0]
 266:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 335              		.loc 1 266 0
 336 000a 0023     		movs	r3, #0
 337 000c 4360     		str	r3, [r0, #4]
 267:Src/main.c    ****   htim1.Init.Period = 1000;
 338              		.loc 1 267 0
 339 000e 8360     		str	r3, [r0, #8]
 268:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 340              		.loc 1 268 0
 341 0010 4FF47A72 		mov	r2, #1000
 342 0014 C260     		str	r2, [r0, #12]
 269:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 343              		.loc 1 269 0
 344 0016 0361     		str	r3, [r0, #16]
 270:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 345              		.loc 1 270 0
 346 0018 4361     		str	r3, [r0, #20]
 271:Src/main.c    ****   {
 347              		.loc 1 271 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 14


 348 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 349              	.LVL24:
 350 001e 20B1     		cbz	r0, .L23
 273:Src/main.c    ****   }
 351              		.loc 1 273 0
 352 0020 3D48     		ldr	r0, .L33+8
 353 0022 40F21111 		movw	r1, #273
 354 0026 FFF7FEFF 		bl	_Error_Handler
 355              	.LVL25:
 356              	.L23:
 276:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 357              		.loc 1 276 0
 358 002a 14A9     		add	r1, sp, #80
 359 002c 4FF48053 		mov	r3, #4096
 360 0030 41F8103D 		str	r3, [r1, #-16]!
 277:Src/main.c    ****   {
 361              		.loc 1 277 0
 362 0034 3648     		ldr	r0, .L33
 363 0036 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 364              	.LVL26:
 365 003a 20B1     		cbz	r0, .L24
 279:Src/main.c    ****   }
 366              		.loc 1 279 0
 367 003c 3648     		ldr	r0, .L33+8
 368 003e 40F21711 		movw	r1, #279
 369 0042 FFF7FEFF 		bl	_Error_Handler
 370              	.LVL27:
 371              	.L24:
 282:Src/main.c    ****   {
 372              		.loc 1 282 0
 373 0046 3248     		ldr	r0, .L33
 374 0048 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 375              	.LVL28:
 376 004c 20B1     		cbz	r0, .L25
 284:Src/main.c    ****   }
 377              		.loc 1 284 0
 378 004e 3248     		ldr	r0, .L33+8
 379 0050 4FF48E71 		mov	r1, #284
 380 0054 FFF7FEFF 		bl	_Error_Handler
 381              	.LVL29:
 382              	.L25:
 287:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 383              		.loc 1 287 0
 384 0058 0023     		movs	r3, #0
 385 005a 0E93     		str	r3, [sp, #56]
 288:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 386              		.loc 1 288 0
 387 005c 0F93     		str	r3, [sp, #60]
 289:Src/main.c    ****   {
 388              		.loc 1 289 0
 389 005e 2C48     		ldr	r0, .L33
 390 0060 0EA9     		add	r1, sp, #56
 391 0062 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 392              	.LVL30:
 393 0066 20B1     		cbz	r0, .L26
 291:Src/main.c    ****   }
 394              		.loc 1 291 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 15


 395 0068 2B48     		ldr	r0, .L33+8
 396 006a 40F22311 		movw	r1, #291
 397 006e FFF7FEFF 		bl	_Error_Handler
 398              	.LVL31:
 399              	.L26:
 294:Src/main.c    ****   sConfigOC.Pulse = 0;
 400              		.loc 1 294 0
 401 0072 6023     		movs	r3, #96
 402 0074 0793     		str	r3, [sp, #28]
 295:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 403              		.loc 1 295 0
 404 0076 0022     		movs	r2, #0
 405 0078 0892     		str	r2, [sp, #32]
 296:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 406              		.loc 1 296 0
 407 007a 0992     		str	r2, [sp, #36]
 297:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 408              		.loc 1 297 0
 409 007c 0A92     		str	r2, [sp, #40]
 298:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 410              		.loc 1 298 0
 411 007e 0B92     		str	r2, [sp, #44]
 299:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 412              		.loc 1 299 0
 413 0080 0C92     		str	r2, [sp, #48]
 300:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 414              		.loc 1 300 0
 415 0082 0D92     		str	r2, [sp, #52]
 301:Src/main.c    ****   {
 416              		.loc 1 301 0
 417 0084 2248     		ldr	r0, .L33
 418 0086 07A9     		add	r1, sp, #28
 419 0088 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 420              	.LVL32:
 421 008c 20B1     		cbz	r0, .L27
 303:Src/main.c    ****   }
 422              		.loc 1 303 0
 423 008e 2248     		ldr	r0, .L33+8
 424 0090 40F22F11 		movw	r1, #303
 425 0094 FFF7FEFF 		bl	_Error_Handler
 426              	.LVL33:
 427              	.L27:
 306:Src/main.c    ****   {
 428              		.loc 1 306 0
 429 0098 1D48     		ldr	r0, .L33
 430 009a 07A9     		add	r1, sp, #28
 431 009c 0422     		movs	r2, #4
 432 009e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 433              	.LVL34:
 434 00a2 20B1     		cbz	r0, .L28
 308:Src/main.c    ****   }
 435              		.loc 1 308 0
 436 00a4 1C48     		ldr	r0, .L33+8
 437 00a6 4FF49A71 		mov	r1, #308
 438 00aa FFF7FEFF 		bl	_Error_Handler
 439              	.LVL35:
 440              	.L28:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 16


 311:Src/main.c    ****   {
 441              		.loc 1 311 0
 442 00ae 1848     		ldr	r0, .L33
 443 00b0 07A9     		add	r1, sp, #28
 444 00b2 0822     		movs	r2, #8
 445 00b4 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 446              	.LVL36:
 447 00b8 20B1     		cbz	r0, .L29
 313:Src/main.c    ****   }
 448              		.loc 1 313 0
 449 00ba 1748     		ldr	r0, .L33+8
 450 00bc 40F23911 		movw	r1, #313
 451 00c0 FFF7FEFF 		bl	_Error_Handler
 452              	.LVL37:
 453              	.L29:
 316:Src/main.c    ****   {
 454              		.loc 1 316 0
 455 00c4 1248     		ldr	r0, .L33
 456 00c6 07A9     		add	r1, sp, #28
 457 00c8 0C22     		movs	r2, #12
 458 00ca FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 459              	.LVL38:
 460 00ce 20B1     		cbz	r0, .L30
 318:Src/main.c    ****   }
 461              		.loc 1 318 0
 462 00d0 1148     		ldr	r0, .L33+8
 463 00d2 4FF49F71 		mov	r1, #318
 464 00d6 FFF7FEFF 		bl	_Error_Handler
 465              	.LVL39:
 466              	.L30:
 321:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 467              		.loc 1 321 0
 468 00da 0023     		movs	r3, #0
 469 00dc 0093     		str	r3, [sp]
 322:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 470              		.loc 1 322 0
 471 00de 0193     		str	r3, [sp, #4]
 323:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 472              		.loc 1 323 0
 473 00e0 0293     		str	r3, [sp, #8]
 324:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 474              		.loc 1 324 0
 475 00e2 0393     		str	r3, [sp, #12]
 325:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 476              		.loc 1 325 0
 477 00e4 0493     		str	r3, [sp, #16]
 326:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 478              		.loc 1 326 0
 479 00e6 4FF40052 		mov	r2, #8192
 480 00ea 0592     		str	r2, [sp, #20]
 327:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 481              		.loc 1 327 0
 482 00ec 0693     		str	r3, [sp, #24]
 328:Src/main.c    ****   {
 483              		.loc 1 328 0
 484 00ee 0848     		ldr	r0, .L33
 485 00f0 6946     		mov	r1, sp
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 17


 486 00f2 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 487              	.LVL40:
 488 00f6 20B1     		cbz	r0, .L31
 330:Src/main.c    ****   }
 489              		.loc 1 330 0
 490 00f8 0748     		ldr	r0, .L33+8
 491 00fa 4FF4A571 		mov	r1, #330
 492 00fe FFF7FEFF 		bl	_Error_Handler
 493              	.LVL41:
 494              	.L31:
 333:Src/main.c    **** 
 495              		.loc 1 333 0
 496 0102 0348     		ldr	r0, .L33
 497 0104 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 498              	.LVL42:
 335:Src/main.c    **** 
 499              		.loc 1 335 0
 500 0108 15B0     		add	sp, sp, #84
 501              	.LCFI9:
 502              		.cfi_def_cfa_offset 4
 503              		@ sp needed
 504 010a 5DF804FB 		ldr	pc, [sp], #4
 505              	.L34:
 506 010e 00BF     		.align	2
 507              	.L33:
 508 0110 00000000 		.word	htim1
 509 0114 00000140 		.word	1073807360
 510 0118 00000000 		.word	.LC1
 511              		.cfi_endproc
 512              	.LFE127:
 514              		.section	.text.MX_I2C1_Init,"ax",%progbits
 515              		.align	2
 516              		.thumb
 517              		.thumb_func
 519              	MX_I2C1_Init:
 520              	.LFB126:
 238:Src/main.c    **** 
 521              		.loc 1 238 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525 0000 08B5     		push	{r3, lr}
 526              	.LCFI10:
 527              		.cfi_def_cfa_offset 8
 528              		.cfi_offset 3, -8
 529              		.cfi_offset 14, -4
 240:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 530              		.loc 1 240 0
 531 0002 0B48     		ldr	r0, .L38
 532 0004 0B4B     		ldr	r3, .L38+4
 533 0006 0360     		str	r3, [r0]
 241:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 534              		.loc 1 241 0
 535 0008 0B4B     		ldr	r3, .L38+8
 536 000a 4360     		str	r3, [r0, #4]
 242:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 537              		.loc 1 242 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 18


 538 000c 0023     		movs	r3, #0
 539 000e 8360     		str	r3, [r0, #8]
 243:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 540              		.loc 1 243 0
 541 0010 C360     		str	r3, [r0, #12]
 244:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 542              		.loc 1 244 0
 543 0012 4FF48042 		mov	r2, #16384
 544 0016 0261     		str	r2, [r0, #16]
 245:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 545              		.loc 1 245 0
 546 0018 4361     		str	r3, [r0, #20]
 246:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 547              		.loc 1 246 0
 548 001a 8361     		str	r3, [r0, #24]
 247:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 549              		.loc 1 247 0
 550 001c C361     		str	r3, [r0, #28]
 248:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 551              		.loc 1 248 0
 552 001e 0362     		str	r3, [r0, #32]
 249:Src/main.c    ****   {
 553              		.loc 1 249 0
 554 0020 FFF7FEFF 		bl	HAL_I2C_Init
 555              	.LVL43:
 556 0024 18B1     		cbz	r0, .L35
 251:Src/main.c    ****   }
 557              		.loc 1 251 0
 558 0026 0548     		ldr	r0, .L38+12
 559 0028 FB21     		movs	r1, #251
 560 002a FFF7FEFF 		bl	_Error_Handler
 561              	.LVL44:
 562              	.L35:
 563 002e 08BD     		pop	{r3, pc}
 564              	.L39:
 565              		.align	2
 566              	.L38:
 567 0030 00000000 		.word	hi2c1
 568 0034 00540040 		.word	1073763328
 569 0038 A0860100 		.word	100000
 570 003c 00000000 		.word	.LC1
 571              		.cfi_endproc
 572              	.LFE126:
 574              		.section	.text.SystemClock_Config,"ax",%progbits
 575              		.align	2
 576              		.global	SystemClock_Config
 577              		.thumb
 578              		.thumb_func
 580              	SystemClock_Config:
 581              	.LFB124:
 146:Src/main.c    **** 
 582              		.loc 1 146 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 80
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586 0000 00B5     		push	{lr}
 587              	.LCFI11:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 19


 588              		.cfi_def_cfa_offset 4
 589              		.cfi_offset 14, -4
 590 0002 95B0     		sub	sp, sp, #84
 591              	.LCFI12:
 592              		.cfi_def_cfa_offset 88
 593              	.LBB4:
 153:Src/main.c    **** 
 594              		.loc 1 153 0
 595 0004 0022     		movs	r2, #0
 596 0006 0192     		str	r2, [sp, #4]
 597 0008 294B     		ldr	r3, .L44
 598 000a 196C     		ldr	r1, [r3, #64]
 599 000c 41F08051 		orr	r1, r1, #268435456
 600 0010 1964     		str	r1, [r3, #64]
 601 0012 1B6C     		ldr	r3, [r3, #64]
 602 0014 03F08053 		and	r3, r3, #268435456
 603 0018 0193     		str	r3, [sp, #4]
 604 001a 019B     		ldr	r3, [sp, #4]
 605              	.LBE4:
 606              	.LBB5:
 155:Src/main.c    **** 
 607              		.loc 1 155 0
 608 001c 0292     		str	r2, [sp, #8]
 609 001e 2549     		ldr	r1, .L44+4
 610 0020 0B68     		ldr	r3, [r1]
 611 0022 23F44043 		bic	r3, r3, #49152
 612 0026 43F40043 		orr	r3, r3, #32768
 613 002a 0B60     		str	r3, [r1]
 614 002c 0B68     		ldr	r3, [r1]
 615 002e 03F44043 		and	r3, r3, #49152
 616 0032 0293     		str	r3, [sp, #8]
 617 0034 029B     		ldr	r3, [sp, #8]
 618              	.LBE5:
 159:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 619              		.loc 1 159 0
 620 0036 0223     		movs	r3, #2
 621 0038 0893     		str	r3, [sp, #32]
 160:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 622              		.loc 1 160 0
 623 003a 0121     		movs	r1, #1
 624 003c 0B91     		str	r1, [sp, #44]
 161:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 625              		.loc 1 161 0
 626 003e 1021     		movs	r1, #16
 627 0040 0C91     		str	r1, [sp, #48]
 162:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 628              		.loc 1 162 0
 629 0042 0E93     		str	r3, [sp, #56]
 163:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 630              		.loc 1 163 0
 631 0044 0F92     		str	r2, [sp, #60]
 164:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 632              		.loc 1 164 0
 633 0046 0822     		movs	r2, #8
 634 0048 1092     		str	r2, [sp, #64]
 165:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 635              		.loc 1 165 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 20


 636 004a 4822     		movs	r2, #72
 637 004c 1192     		str	r2, [sp, #68]
 166:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 638              		.loc 1 166 0
 639 004e 1293     		str	r3, [sp, #72]
 167:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 640              		.loc 1 167 0
 641 0050 0423     		movs	r3, #4
 642 0052 1393     		str	r3, [sp, #76]
 168:Src/main.c    ****   {
 643              		.loc 1 168 0
 644 0054 08A8     		add	r0, sp, #32
 645 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 646              	.LVL45:
 647 005a 18B1     		cbz	r0, .L41
 170:Src/main.c    ****   }
 648              		.loc 1 170 0
 649 005c 1648     		ldr	r0, .L44+8
 650 005e AA21     		movs	r1, #170
 651 0060 FFF7FEFF 		bl	_Error_Handler
 652              	.LVL46:
 653              	.L41:
 175:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 654              		.loc 1 175 0
 655 0064 0F23     		movs	r3, #15
 656 0066 0393     		str	r3, [sp, #12]
 177:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 657              		.loc 1 177 0
 658 0068 0221     		movs	r1, #2
 659 006a 0491     		str	r1, [sp, #16]
 178:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 660              		.loc 1 178 0
 661 006c 0023     		movs	r3, #0
 662 006e 0593     		str	r3, [sp, #20]
 179:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 663              		.loc 1 179 0
 664 0070 4FF48052 		mov	r2, #4096
 665 0074 0692     		str	r2, [sp, #24]
 180:Src/main.c    **** 
 666              		.loc 1 180 0
 667 0076 0793     		str	r3, [sp, #28]
 182:Src/main.c    ****   {
 668              		.loc 1 182 0
 669 0078 03A8     		add	r0, sp, #12
 670 007a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 671              	.LVL47:
 672 007e 18B1     		cbz	r0, .L42
 184:Src/main.c    ****   }
 673              		.loc 1 184 0
 674 0080 0D48     		ldr	r0, .L44+8
 675 0082 B821     		movs	r1, #184
 676 0084 FFF7FEFF 		bl	_Error_Handler
 677              	.LVL48:
 678              	.L42:
 189:Src/main.c    **** 
 679              		.loc 1 189 0
 680 0088 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 21


 681              	.LVL49:
 682 008c 0B4B     		ldr	r3, .L44+12
 683 008e A3FB0030 		umull	r3, r0, r3, r0
 684 0092 8009     		lsrs	r0, r0, #6
 685 0094 FFF7FEFF 		bl	HAL_SYSTICK_Config
 686              	.LVL50:
 193:Src/main.c    **** 
 687              		.loc 1 193 0
 688 0098 0420     		movs	r0, #4
 689 009a FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 690              	.LVL51:
 196:Src/main.c    **** }
 691              		.loc 1 196 0
 692 009e 4FF0FF30 		mov	r0, #-1
 693 00a2 0021     		movs	r1, #0
 694 00a4 0A46     		mov	r2, r1
 695 00a6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 696              	.LVL52:
 197:Src/main.c    **** 
 697              		.loc 1 197 0
 698 00aa 15B0     		add	sp, sp, #84
 699              	.LCFI13:
 700              		.cfi_def_cfa_offset 4
 701              		@ sp needed
 702 00ac 5DF804FB 		ldr	pc, [sp], #4
 703              	.L45:
 704              		.align	2
 705              	.L44:
 706 00b0 00380240 		.word	1073887232
 707 00b4 00700040 		.word	1073770496
 708 00b8 00000000 		.word	.LC1
 709 00bc D34D6210 		.word	274877907
 710              		.cfi_endproc
 711              	.LFE124:
 713              		.section	.text.main,"ax",%progbits
 714              		.align	2
 715              		.global	main
 716              		.thumb
 717              		.thumb_func
 719              	main:
 720              	.LFB123:
  85:Src/main.c    ****   /* USER CODE BEGIN 1 */
 721              		.loc 1 85 0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 32
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725 0000 10B5     		push	{r4, lr}
 726              	.LCFI14:
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 4, -8
 729              		.cfi_offset 14, -4
 730 0002 88B0     		sub	sp, sp, #32
 731              	.LCFI15:
 732              		.cfi_def_cfa_offset 40
  93:Src/main.c    **** 
 733              		.loc 1 93 0
 734 0004 FFF7FEFF 		bl	HAL_Init
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 22


 735              	.LVL53:
  99:Src/main.c    **** 
 736              		.loc 1 99 0
 737 0008 FFF7FEFF 		bl	SystemClock_Config
 738              	.LVL54:
 106:Src/main.c    ****   MX_ADC1_Init();
 739              		.loc 1 106 0
 740 000c FFF7FEFF 		bl	MX_GPIO_Init
 741              	.LVL55:
 107:Src/main.c    ****   MX_TIM1_Init();
 742              		.loc 1 107 0
 743 0010 FFF7FEFF 		bl	MX_ADC1_Init
 744              	.LVL56:
 108:Src/main.c    ****   MX_I2C1_Init();
 745              		.loc 1 108 0
 746 0014 FFF7FEFF 		bl	MX_TIM1_Init
 747              	.LVL57:
 109:Src/main.c    ****   /* USER CODE BEGIN 2 */
 748              		.loc 1 109 0
 749 0018 FFF7FEFF 		bl	MX_I2C1_Init
 750              	.LVL58:
 111:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 751              		.loc 1 111 0
 752 001c 1A4C     		ldr	r4, .L50
 753 001e 2046     		mov	r0, r4
 754 0020 0021     		movs	r1, #0
 755 0022 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 756              	.LVL59:
 112:Src/main.c    ****   ssd1306_Init();
 757              		.loc 1 112 0
 758 0026 2046     		mov	r0, r4
 759 0028 0821     		movs	r1, #8
 760 002a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 761              	.LVL60:
 113:Src/main.c    **** 
 762              		.loc 1 113 0
 763 002e FFF7FEFF 		bl	ssd1306_Init
 764              	.LVL61:
 115:Src/main.c    ****   print("Starting", 0);
 765              		.loc 1 115 0
 766 0032 1648     		ldr	r0, .L50+4
 767 0034 FFF7FEFF 		bl	HAL_ADC_Start
 768              	.LVL62:
 116:Src/main.c    ****   /* USER CODE END 2 */
 769              		.loc 1 116 0
 770 0038 1548     		ldr	r0, .L50+8
 771 003a 0021     		movs	r1, #0
 772 003c FFF7FEFF 		bl	print
 773              	.LVL63:
 774              	.L47:
 123:Src/main.c    ****       int err = HAL_ADC_GetValue(&hadc1);
 775              		.loc 1 123 0
 776 0040 1248     		ldr	r0, .L50+4
 777 0042 42F21071 		movw	r1, #10000
 778 0046 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 779              	.LVL64:
 780 004a 0028     		cmp	r0, #0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 23


 781 004c F8D1     		bne	.L47
 782              	.LBB6:
 124:Src/main.c    ****       char err_string[20]="";
 783              		.loc 1 124 0
 784 004e 0F48     		ldr	r0, .L50+4
 785 0050 FFF7FEFF 		bl	HAL_ADC_GetValue
 786              	.LVL65:
 787 0054 0246     		mov	r2, r0
 788              	.LVL66:
 125:Src/main.c    ****       sprintf(err_string, "Err: %d", err);
 789              		.loc 1 125 0
 790 0056 0024     		movs	r4, #0
 791 0058 0394     		str	r4, [sp, #12]
 792 005a 0494     		str	r4, [sp, #16]
 793 005c 0594     		str	r4, [sp, #20]
 794 005e 0694     		str	r4, [sp, #24]
 795 0060 0794     		str	r4, [sp, #28]
 126:Src/main.c    ****       print(err_string, 0);
 796              		.loc 1 126 0
 797 0062 03A8     		add	r0, sp, #12
 798              	.LVL67:
 799 0064 0B49     		ldr	r1, .L50+12
 800 0066 FFF7FEFF 		bl	sprintf
 801              	.LVL68:
 127:Src/main.c    ****       // TODO: Move motors
 802              		.loc 1 127 0
 803 006a 03A8     		add	r0, sp, #12
 804 006c 2146     		mov	r1, r4
 805 006e FFF7FEFF 		bl	print
 806              	.LVL69:
 129:Src/main.c    ****       update_motor_speed(1, speed);
 807              		.loc 1 129 0
 808 0072 094A     		ldr	r2, .L50+16
 809 0074 01AB     		add	r3, sp, #4
 810 0076 92E80300 		ldmia	r2, {r0, r1}
 811 007a 83E80300 		stmia	r3, {r0, r1}
 130:Src/main.c    ****     }
 812              		.loc 1 130 0
 813 007e 0120     		movs	r0, #1
 814 0080 1946     		mov	r1, r3
 815 0082 FFF7FEFF 		bl	update_motor_speed
 816              	.LVL70:
 817 0086 DBE7     		b	.L47
 818              	.L51:
 819              		.align	2
 820              	.L50:
 821 0088 00000000 		.word	htim1
 822 008c 00000000 		.word	hadc1
 823 0090 0C000000 		.word	.LC2
 824 0094 18000000 		.word	.LC3
 825 0098 00000000 		.word	.LANCHOR0
 826              	.LBE6:
 827              		.cfi_endproc
 828              	.LFE123:
 830              		.comm	htim1,60,4
 831              		.comm	hi2c1,84,4
 832              		.comm	hadc1,72,4
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 24


 833              		.section	.rodata
 834              		.align	2
 835              		.set	.LANCHOR0,. + 0
 836              	.LC0:
 837 0000 01000000 		.word	1
 838 0004 01000000 		.word	1
 839              		.section	.rodata.str1.4,"aMS",%progbits,1
 840              		.align	2
 841              	.LC1:
 842 0000 5372632F 		.ascii	"Src/main.c\000"
 842      6D61696E 
 842      2E6300
 843 000b 00       		.space	1
 844              	.LC2:
 845 000c 53746172 		.ascii	"Starting\000"
 845      74696E67 
 845      00
 846 0015 000000   		.space	3
 847              	.LC3:
 848 0018 4572723A 		.ascii	"Err: %d\000"
 848      20256400 
 849              		.text
 850              	.Letext0:
 851              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 852              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 853              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 854              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 855              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 856              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 857              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 858              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 859              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 860              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 861              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 862              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 863              		.file 14 "Inc/fonts.h"
 864              		.file 15 "Inc/ssd1306.h"
 865              		.file 16 "Drivers/CMSIS/Include/core_cm4.h"
 866              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 867              		.file 18 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 868              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:21     .text.MX_GPIO_Init:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:69     .text.MX_GPIO_Init:0000000000000034 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:78     .text.update_motor_speed:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:83     .text.update_motor_speed:0000000000000000 update_motor_speed
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:136    .text.update_motor_speed:0000000000000044 $d
                            *COM*:000000000000003c htim1
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:143    .text.print:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:148    .text.print:0000000000000000 print
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:195    .text.print:0000000000000034 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:200    .text._Error_Handler:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:205    .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:221    .text.MX_ADC1_Init:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:225    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:306    .text.MX_ADC1_Init:0000000000000058 $d
                            *COM*:0000000000000048 hadc1
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:314    .text.MX_TIM1_Init:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:318    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:508    .text.MX_TIM1_Init:0000000000000110 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:515    .text.MX_I2C1_Init:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:519    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:567    .text.MX_I2C1_Init:0000000000000030 $d
                            *COM*:0000000000000054 hi2c1
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:575    .text.SystemClock_Config:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:580    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:706    .text.SystemClock_Config:00000000000000b0 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:714    .text.main:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:719    .text.main:0000000000000000 main
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:821    .text.main:0000000000000088 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:834    .rodata:0000000000000000 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s:840    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_I2C_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//cczE0B39.s 			page 26


HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
HAL_TIM_PWM_Start
ssd1306_Init
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
sprintf
