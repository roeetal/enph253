ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "gpio.h"
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** #include "fonts.h"
  50:Src/main.c    **** #include "ssd1306.h"
  51:Src/main.c    **** #include "encoder.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "filter.h"
  54:Src/main.c    **** #include "extern_vars.h"
  55:Src/main.c    **** #include <String.h>
  56:Src/main.c    **** #include "claw.h"
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END Includes */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED;
  65:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  66:Src/main.c    **** uint32_t dma_buffer[2048];
  67:Src/main.c    **** uint32_t adc_values[2048];
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END PV */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  72:Src/main.c    **** void SystemClock_Config(void);
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE BEGIN PFP */
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void print(char msg[], int row);
  77:Src/main.c    **** PID_t menu();
  78:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  79:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  80:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  81:Src/main.c    **** void turn();
  82:Src/main.c    **** void turn_deg(uint8_t);
  83:Src/main.c    **** void alarm_detect();
  84:Src/main.c    **** void drive_straight(PID_t *enc_pid);
  85:Src/main.c    **** void square_edge(PID_t *enc_pid);
  86:Src/main.c    **** void test_All();
  87:Src/main.c    **** void test_PWM_htim1();
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 3


  88:Src/main.c    **** void test_PWM_htim3();
  89:Src/main.c    **** 
  90:Src/main.c    **** /* USER CODE END PFP */
  91:Src/main.c    **** 
  92:Src/main.c    **** /* USER CODE BEGIN 0 */
  93:Src/main.c    **** /**
  94:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
  95:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
  96:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
  97:Src/main.c    ****  */
  98:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
  99:Src/main.c    **** {
  29              		.loc 1 99 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 100:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 100 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF40052 		mov	r2, #8192
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB130:
 101:Src/main.c    **** }
 102:Src/main.c    **** /* USER CODE END 0 */
 103:Src/main.c    **** 
 104:Src/main.c    **** /**
 105:Src/main.c    ****   * @brief  The application entry point.
 106:Src/main.c    ****   *
 107:Src/main.c    ****   * @retval None
 108:Src/main.c    ****   */
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 4


 109:Src/main.c    **** int main(void)
 110:Src/main.c    **** {
 111:Src/main.c    ****     /* USER CODE BEGIN 1 */
 112:Src/main.c    **** 
 113:Src/main.c    ****     /* USER CODE END 1 */
 114:Src/main.c    **** 
 115:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 116:Src/main.c    **** 
 117:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 118:Src/main.c    ****     HAL_Init();
 119:Src/main.c    **** 
 120:Src/main.c    ****     /* USER CODE BEGIN Init */
 121:Src/main.c    **** 
 122:Src/main.c    ****     /* USER CODE END Init */
 123:Src/main.c    **** 
 124:Src/main.c    ****     /* Configure the system clock */
 125:Src/main.c    ****     SystemClock_Config();
 126:Src/main.c    **** 
 127:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 128:Src/main.c    **** 
 129:Src/main.c    ****     /* USER CODE END SysInit */
 130:Src/main.c    **** 
 131:Src/main.c    ****     /* Initialize all configured peripherals */
 132:Src/main.c    ****     MX_GPIO_Init();
 133:Src/main.c    ****     MX_DMA_Init();
 134:Src/main.c    ****     MX_TIM3_Init();
 135:Src/main.c    ****     MX_TIM1_Init();
 136:Src/main.c    ****     MX_TIM2_Init();
 137:Src/main.c    ****     MX_ADC1_Init();
 138:Src/main.c    ****     MX_I2C1_Init();
 139:Src/main.c    ****     MX_TIM4_Init();
 140:Src/main.c    ****     MX_TIM9_Init();
 141:Src/main.c    ****     MX_TIM5_Init();
 142:Src/main.c    ****     /* USER CODE BEGIN 2 */
 143:Src/main.c    **** 
 144:Src/main.c    ****     /* Initialize peripherals */
 145:Src/main.c    ****     /* 
 146:Src/main.c    ****      * Claw jaw: TIM3 CH1
 147:Src/main.c    ****      * Claw arm: TIM3 CH2
 148:Src/main.c    ****      * Basket: TIM3 CH3
 149:Src/main.c    ****      * left forward: TIM1 CH1
 150:Src/main.c    ****      * left backward: TIM1 CH2
 151:Src/main.c    ****      * right forward: TIM1 CH3
 152:Src/main.c    ****      * right backward: TIM1 CH4
 153:Src/main.c    ****      * left encoder: TIM4
 154:Src/main.c    ****      * right encoderL TIM5
 155:Src/main.c    ****      * spare clocks: TIM2, TIM9
 156:Src/main.c    ****      */
 157:Src/main.c    **** 
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 159:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 5


 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 167:Src/main.c    **** 
 168:Src/main.c    ****     /* Initialize other stuffs */
 169:Src/main.c    ****     ssd1306_Init();
 170:Src/main.c    ****     print("Starting", 0);
 171:Src/main.c    ****     claw_init(&htim3);
 172:Src/main.c    ****     ///basket_init(&htim3);
 173:Src/main.c    **** 
 174:Src/main.c    ****     uint8_t ewok_cnt = 0;
 175:Src/main.c    ****     PID_t enc_pid = pid_Init(1, 0, 0, 1, 1);
 176:Src/main.c    **** 
 177:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 178:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 179:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 180:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < 4000)
 181:Src/main.c    ****     {
 182:Src/main.c    ****         drive_straight(&enc_pid);
 183:Src/main.c    ****     }
 184:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 185:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 186:Src/main.c    **** 
 187:Src/main.c    ****     /* Initially disabled interrupts and ADC */
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 189:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 190:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 191:Src/main.c    ****     /* USER CODE END 2 */
 192:Src/main.c    **** 
 193:Src/main.c    ****     /* Infinite loop */
 194:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 195:Src/main.c    **** 
 196:Src/main.c    ****     while (1)
 197:Src/main.c    ****     {
 198:Src/main.c    ****         /*
 199:Src/main.c    ****          * Pi Turning
 200:Src/main.c    ****          */
 201:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 202:Src/main.c    ****         {
 203:Src/main.c    ****             HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_RESET);
 204:Src/main.c    ****             print("in pi int", 0);
 205:Src/main.c    ****             turn();
 206:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 207:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 208:Src/main.c    ****             uint32_t start = HAL_GetTick();
 209:Src/main.c    ****             HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 210:Src/main.c    ****             while ((HAL_GetTick() - start) < 4000)
 211:Src/main.c    ****             {
 212:Src/main.c    ****                 drive_straight(&enc_pid);
 213:Src/main.c    ****                 if (CLAW_INT_STATE == FLAGGED)
 214:Src/main.c    ****                 {
 215:Src/main.c    ****                     HAL_Delay(200);
 216:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 217:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 218:Src/main.c    ****                     close_claw(&htim3);
 219:Src/main.c    ****                     arm_up(&htim3);
 220:Src/main.c    ****                     HAL_NVIC_DisableIRQ(CLAW_INT_EXTI_IRQn);
 221:Src/main.c    ****                     CLAW_INT_STATE = NOT_FLAGGED;
 222:Src/main.c    ****                     ++ewok_cnt;
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 6


 223:Src/main.c    ****                     char msg[18] = "";
 224:Src/main.c    ****                     sprintf(msg, "wok_cnt: %d", ewok_cnt);
 225:Src/main.c    ****                     print(msg, 0);
 226:Src/main.c    ****                     if (ewok_cnt == 1)
 227:Src/main.c    ****                     {
 228:Src/main.c    ****                         turn_deg(-120);
 229:Src/main.c    ****                         open_claw(&htim3);
 230:Src/main.c    ****                         square_edge(&enc_pid);
 231:Src/main.c    ****                         start = HAL_GetTick();
 232:Src/main.c    ****                         while ((HAL_GetTick() - start) < 2000)
 233:Src/main.c    ****                         {
 234:Src/main.c    ****                             drive_straight(&enc_pid);
 235:Src/main.c    ****                         }
 236:Src/main.c    ****                         arm_down(&htim3);
 237:Src/main.c    ****                     }
 238:Src/main.c    ****                     break;
 239:Src/main.c    ****                 }
 240:Src/main.c    ****             }
 241:Src/main.c    ****             // char pic_plz = "1";
 242:Src/main.c    ****             // HAL_UART_Transmit(&huart2, pic_plz, sizeof(pic_plz), 10000);
 243:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 244:Src/main.c    ****             HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_SET);
 245:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 246:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 247:Src/main.c    ****         }
 248:Src/main.c    ****         else
 249:Src/main.c    ****         {
 250:Src/main.c    ****         /*
 251:Src/main.c    ****          * Look for Ewok
 252:Src/main.c    ****          */
 253:Src/main.c    ****             temp_time = HAL_GetTick();
 254:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 255:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 256:Src/main.c    ****             while ((HAL_GetTick() - temp_time) < 200)
 257:Src/main.c    ****             {
 258:Src/main.c    ****                 drive_straight(&enc_pid);
 259:Src/main.c    ****             }
 260:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 261:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 262:Src/main.c    **** 
 263:Src/main.c    ****             temp_time = HAL_GetTick();
 264:Src/main.c    ****             while ((HAL_GetTick() - temp_time) < 200 && PI_INT_STATE == NOT_FLAGGED)
 265:Src/main.c    ****                 ;
 266:Src/main.c    ****         }
 267:Src/main.c    **** 
 268:Src/main.c    ****         /*
 269:Src/main.c    ****          * IR DETECTION
 270:Src/main.c    ****          *
 271:Src/main.c    ****          if (IR_INT_STATE == FLAGGED)
 272:Src/main.c    ****          {
 273:Src/main.c    ****          alarm_detect();
 274:Src/main.c    ****         //drive past sensor, enough so as to not trigger interrupt again
 275:Src/main.c    ****         HAL_Delay(2000);
 276:Src/main.c    ****         }*/
 277:Src/main.c    **** 
 278:Src/main.c    ****         /* USER CODE END WHILE */
 279:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 7


 280:Src/main.c    ****         /* USER CODE BEGIN 3 */
 281:Src/main.c    ****     }
 282:Src/main.c    ****     /* USER CODE END 3 */
 283:Src/main.c    **** }
 284:Src/main.c    **** 
 285:Src/main.c    **** /**
 286:Src/main.c    ****   * @brief System Clock Configuration
 287:Src/main.c    ****   * @retval None
 288:Src/main.c    ****   */
 289:Src/main.c    **** void SystemClock_Config(void)
 290:Src/main.c    **** {
 291:Src/main.c    **** 
 292:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 293:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 294:Src/main.c    **** 
 295:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 296:Src/main.c    ****     */
 297:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 298:Src/main.c    **** 
 299:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 300:Src/main.c    **** 
 301:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 302:Src/main.c    ****     */
 303:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 304:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 305:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 306:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 307:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 308:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 309:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 310:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 311:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 312:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 313:Src/main.c    ****     {
 314:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 315:Src/main.c    ****     }
 316:Src/main.c    **** 
 317:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 318:Src/main.c    ****     */
 319:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 320:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 321:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 322:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 323:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 324:Src/main.c    **** 
 325:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 326:Src/main.c    ****     {
 327:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 328:Src/main.c    ****     }
 329:Src/main.c    **** 
 330:Src/main.c    ****     /**Configure the Systick interrupt time 
 331:Src/main.c    ****     */
 332:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 333:Src/main.c    **** 
 334:Src/main.c    ****     /**Configure the Systick 
 335:Src/main.c    ****     */
 336:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 8


 337:Src/main.c    **** 
 338:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 339:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 340:Src/main.c    **** }
 341:Src/main.c    **** 
 342:Src/main.c    **** /* USER CODE BEGIN 4 */
 343:Src/main.c    **** 
 344:Src/main.c    **** void square_edge(PID_t *enc_pid)
 345:Src/main.c    **** {
 346:Src/main.c    ****     while (1)
 347:Src/main.c    ****     {
 348:Src/main.c    ****         drive_straight(enc_pid);
 349:Src/main.c    ****         if (EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED)
 350:Src/main.c    ****         {
 351:Src/main.c    ****             if (EDGE_LEFT_STATE == FLAGGED)
 352:Src/main.c    ****             {
 353:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 354:Src/main.c    ****             }
 355:Src/main.c    ****             if (EDGE_RIGHT_STATE == FLAGGED)
 356:Src/main.c    ****             {
 357:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 358:Src/main.c    ****             }
 359:Src/main.c    ****         }
 360:Src/main.c    ****         else if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 361:Src/main.c    ****         {
 362:Src/main.c    ****             break;
 363:Src/main.c    ****         }
 364:Src/main.c    ****     }
 365:Src/main.c    **** }
 366:Src/main.c    **** 
 367:Src/main.c    **** void drive_straight(PID_t *enc_pid)
 368:Src/main.c    **** {
 369:Src/main.c    ****     encoder_pid(enc_pid);
 370:Src/main.c    ****     HAL_Delay(10);
 371:Src/main.c    **** }
 372:Src/main.c    **** 
 373:Src/main.c    **** /*
 374:Src/main.c    ****  * Assume motors are not on.
 375:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 376:Src/main.c    ****  */
 377:Src/main.c    **** void turn()
 378:Src/main.c    **** {
 379:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 380:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 381:Src/main.c    ****     HAL_Delay(50);
 382:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 383:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 384:Src/main.c    ****     TIM4->CNT = 0;
 385:Src/main.c    ****     TIM5->CNT = 0;
 386:Src/main.c    **** 
 387:Src/main.c    ****     char msg[18] = "";
 388:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 389:Src/main.c    ****     print(msg, 0);
 390:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 391:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 392:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 393:Src/main.c    ****     print(msg, 2);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 9


 394:Src/main.c    **** 
 395:Src/main.c    ****     if (volts < -TURN_TOLERANCE) // FIXME: Ben changed this
 396:Src/main.c    ****     {
 397:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 398:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 399:Src/main.c    ****         while (TIM5->CNT < counts)
 400:Src/main.c    ****         {
 401:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 402:Src/main.c    ****             print(msg, 4);
 403:Src/main.c    ****         }
 404:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 405:Src/main.c    ****         print(msg, 4);
 406:Src/main.c    ****         TIM5->CNT = 0;
 407:Src/main.c    ****     }
 408:Src/main.c    ****     else if (volts > TURN_TOLERANCE) // FIXME: Ben changed this
 409:Src/main.c    ****     {
 410:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 411:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 412:Src/main.c    ****         while (TIM4->CNT < counts)
 413:Src/main.c    ****         {
 414:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 415:Src/main.c    ****             print(msg, 4);
 416:Src/main.c    ****         }
 417:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 418:Src/main.c    ****         print(msg, 4);
 419:Src/main.c    ****         TIM4->CNT = 0;
 420:Src/main.c    ****     }
 421:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 422:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 423:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 424:Src/main.c    **** }
 425:Src/main.c    **** 
 426:Src/main.c    **** /*
 427:Src/main.c    ****  * Assume motors are not on.
 428:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 429:Src/main.c    ****  */
 430:Src/main.c    **** void turn_deg(uint8_t deg)
 431:Src/main.c    **** {
 432:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 433:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 434:Src/main.c    ****     TIM4->CNT = 0;
 435:Src/main.c    ****     TIM5->CNT = 0;
 436:Src/main.c    **** 
 437:Src/main.c    ****     char msg[18] = "";
 438:Src/main.c    **** 
 439:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 440:Src/main.c    ****     {
 441:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 442:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 443:Src/main.c    ****         while (TIM5->CNT < counts)
 444:Src/main.c    ****         {
 445:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 446:Src/main.c    ****             print(msg, 4);
 447:Src/main.c    ****         }
 448:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 449:Src/main.c    ****         print(msg, 4);
 450:Src/main.c    ****         TIM5->CNT = 0;
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 10


 451:Src/main.c    ****     }
 452:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 453:Src/main.c    ****     {
 454:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 30000);
 455:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 456:Src/main.c    ****         while (TIM4->CNT < counts)
 457:Src/main.c    ****         {
 458:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 459:Src/main.c    ****             print(msg, 4);
 460:Src/main.c    ****         }
 461:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 462:Src/main.c    ****         print(msg, 4);
 463:Src/main.c    ****         TIM4->CNT = 0;
 464:Src/main.c    ****     }
 465:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 466:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 467:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 468:Src/main.c    **** }
 469:Src/main.c    **** 
 470:Src/main.c    **** /**
 471:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 472:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 473:Src/main.c    ****  *
 474:Src/main.c    ****  * @param adc_val, value read from ADC.
 475:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 476:Src/main.c    ****  **/
 477:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 478:Src/main.c    **** {
  67              		.loc 1 478 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 479:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 479 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 480:Src/main.c    **** }
  90              		.loc 1 480 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 11


  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE130:
 101              		.global	__aeabi_dcmplt
 102              		.global	__aeabi_dcmpgt
 103              		.section	.text.alarm_detect,"ax",%progbits
 104              		.align	2
 105              		.global	alarm_detect
 106              		.thumb
 107              		.thumb_func
 109              	alarm_detect:
 110              	.LFB131:
 481:Src/main.c    **** 
 482:Src/main.c    **** // Sampling frequency: 72e6/2/(495*3)
 483:Src/main.c    **** void alarm_detect()
 484:Src/main.c    **** {
 111              		.loc 1 484 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115 0000 00B5     		push	{lr}
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 14, -4
 119 0002 83B0     		sub	sp, sp, #12
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 16
 485:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 122              		.loc 1 485 0
 123 0004 1C48     		ldr	r0, .L13
 124 0006 1D49     		ldr	r1, .L13+4
 125 0008 4FF40062 		mov	r2, #2048
 126 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 127              	.LVL8:
 486:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 487:Src/main.c    ****     HAL_Delay(500);
 128              		.loc 1 487 0
 129 0010 4FF4FA70 		mov	r0, #500
 130 0014 FFF7FEFF 		bl	HAL_Delay
 131              	.LVL9:
 132              	.L10:
 488:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 100)
 133              		.loc 1 488 0 discriminator 1
 134 0018 0023     		movs	r3, #0
 135 001a 0093     		str	r3, [sp]
 136 001c 1848     		ldr	r0, .L13+8
 137 001e 45F6B261 		movw	r1, #24242
 138 0022 4FF47A72 		mov	r2, #1000
 139 0026 4FF40063 		mov	r3, #2048
 140 002a FFF7FEFF 		bl	goertzel
 141              	.LVL10:
 142 002e 51EC100B 		fmrrd	r0, r1, d0
 143 0032 0022     		movs	r2, #0
 144 0034 134B     		ldr	r3, .L13+12
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 12


 145 0036 FFF7FEFF 		bl	__aeabi_dcmplt
 146              	.LVL11:
 147 003a 0028     		cmp	r0, #0
 148 003c ECD1     		bne	.L10
 149              	.L11:
 489:Src/main.c    ****         ;
 490:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 100)
 150              		.loc 1 490 0 discriminator 1
 151 003e 0023     		movs	r3, #0
 152 0040 0093     		str	r3, [sp]
 153 0042 0F48     		ldr	r0, .L13+8
 154 0044 45F6B261 		movw	r1, #24242
 155 0048 4FF47A72 		mov	r2, #1000
 156 004c 4FF40063 		mov	r3, #2048
 157 0050 FFF7FEFF 		bl	goertzel
 158              	.LVL12:
 159 0054 51EC100B 		fmrrd	r0, r1, d0
 160 0058 0022     		movs	r2, #0
 161 005a 0A4B     		ldr	r3, .L13+12
 162 005c FFF7FEFF 		bl	__aeabi_dcmpgt
 163              	.LVL13:
 164 0060 0028     		cmp	r0, #0
 165 0062 ECD1     		bne	.L11
 491:Src/main.c    ****         ;
 492:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 166              		.loc 1 492 0
 167 0064 0448     		ldr	r0, .L13
 168 0066 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 169              	.LVL14:
 493:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 170              		.loc 1 493 0
 171 006a 0022     		movs	r2, #0
 172 006c 064B     		ldr	r3, .L13+16
 173 006e 1A70     		strb	r2, [r3]
 494:Src/main.c    **** }
 174              		.loc 1 494 0
 175 0070 03B0     		add	sp, sp, #12
 176              	.LCFI4:
 177              		.cfi_def_cfa_offset 4
 178              		@ sp needed
 179 0072 5DF804FB 		ldr	pc, [sp], #4
 180              	.L14:
 181 0076 00BF     		.align	2
 182              	.L13:
 183 0078 00000000 		.word	hadc1
 184 007c 00000000 		.word	dma_buffer
 185 0080 00000000 		.word	adc_values
 186 0084 00005940 		.word	1079574528
 187 0088 00000000 		.word	IR_INT_STATE
 188              		.cfi_endproc
 189              	.LFE131:
 191              		.section	.text.print,"ax",%progbits
 192              		.align	2
 193              		.global	print
 194              		.thumb
 195              		.thumb_func
 197              	print:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 13


 198              	.LFB132:
 495:Src/main.c    **** 
 496:Src/main.c    **** /**
 497:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 498:Src/main.c    ****  * @param msg, string to print
 499:Src/main.c    ****  * @param row, row to print msg to
 500:Src/main.c    ****  */
 501:Src/main.c    **** void print(char *msg, int row)
 502:Src/main.c    **** {
 199              		.loc 1 502 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL15:
 204 0000 38B5     		push	{r3, r4, r5, lr}
 205              	.LCFI5:
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 3, -16
 208              		.cfi_offset 4, -12
 209              		.cfi_offset 5, -8
 210              		.cfi_offset 14, -4
 211 0002 0546     		mov	r5, r0
 503:Src/main.c    ****     if (row == 0)
 212              		.loc 1 503 0
 213 0004 0C46     		mov	r4, r1
 214 0006 11B9     		cbnz	r1, .L16
 504:Src/main.c    ****     {
 505:Src/main.c    ****         ssd1306_Fill(Black);
 215              		.loc 1 505 0
 216 0008 0020     		movs	r0, #0
 217              	.LVL16:
 218 000a FFF7FEFF 		bl	ssd1306_Fill
 219              	.LVL17:
 220              	.L16:
 506:Src/main.c    ****     }
 507:Src/main.c    ****     ssd1306_SetCursor(0, row * 10);
 221              		.loc 1 507 0
 222 000e 04EB8404 		add	r4, r4, r4, lsl #2
 223              	.LVL18:
 224 0012 6100     		lsls	r1, r4, #1
 225 0014 0020     		movs	r0, #0
 226 0016 01F0FE01 		and	r1, r1, #254
 227 001a FFF7FEFF 		bl	ssd1306_SetCursor
 228              	.LVL19:
 508:Src/main.c    ****     ssd1306_WriteString(msg, Font_7x10, White);
 229              		.loc 1 508 0
 230 001e 054B     		ldr	r3, .L18
 231 0020 2846     		mov	r0, r5
 232 0022 93E80600 		ldmia	r3, {r1, r2}
 233 0026 0123     		movs	r3, #1
 234 0028 FFF7FEFF 		bl	ssd1306_WriteString
 235              	.LVL20:
 509:Src/main.c    ****     ssd1306_UpdateScreen();
 236              		.loc 1 509 0
 237 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 238              	.LVL21:
 239 0030 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 14


 240              	.LVL22:
 241              	.L19:
 242 0032 00BF     		.align	2
 243              	.L18:
 244 0034 00000000 		.word	Font_7x10
 245              		.cfi_endproc
 246              	.LFE132:
 248              		.section	.text.menu,"ax",%progbits
 249              		.align	2
 250              		.global	menu
 251              		.thumb
 252              		.thumb_func
 254              	menu:
 255              	.LFB133:
 510:Src/main.c    **** }
 511:Src/main.c    **** 
 512:Src/main.c    **** PID_t menu()
 513:Src/main.c    **** {
 256              		.loc 1 513 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 32
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL23:
 261 0000 30B5     		push	{r4, r5, lr}
 262              	.LCFI6:
 263              		.cfi_def_cfa_offset 12
 264              		.cfi_offset 4, -12
 265              		.cfi_offset 5, -8
 266              		.cfi_offset 14, -4
 267 0002 8BB0     		sub	sp, sp, #44
 268              	.LCFI7:
 269              		.cfi_def_cfa_offset 56
 270 0004 0546     		mov	r5, r0
 514:Src/main.c    ****     print("Starting", 0);
 271              		.loc 1 514 0
 272 0006 2548     		ldr	r0, .L26
 273              	.LVL24:
 274 0008 0021     		movs	r1, #0
 275 000a FFF7FEFF 		bl	print
 276              	.LVL25:
 515:Src/main.c    ****     char msg[20] = "";
 277              		.loc 1 515 0
 278 000e 0024     		movs	r4, #0
 279 0010 0594     		str	r4, [sp, #20]
 280 0012 0694     		str	r4, [sp, #24]
 281 0014 0794     		str	r4, [sp, #28]
 282 0016 0894     		str	r4, [sp, #32]
 283 0018 0994     		str	r4, [sp, #36]
 284              	.LVL26:
 516:Src/main.c    ****     int pid_select = 0;
 517:Src/main.c    ****     uint32_t values[2] = {0, 0};
 285              		.loc 1 517 0
 286 001a 0394     		str	r4, [sp, #12]
 287 001c 0494     		str	r4, [sp, #16]
 288              	.LVL27:
 289              	.L24:
 518:Src/main.c    ****     while (1)
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 15


 519:Src/main.c    ****     {
 520:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 290              		.loc 1 520 0
 291 001e 2048     		ldr	r0, .L26+4
 292 0020 4FF40051 		mov	r1, #8192
 293 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 294              	.LVL28:
 295 0028 48BB     		cbnz	r0, .L21
 521:Src/main.c    ****         {
 522:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 296              		.loc 1 522 0
 297 002a 05A8     		add	r0, sp, #20
 298 002c 1D49     		ldr	r1, .L26+8
 299 002e 0AAB     		add	r3, sp, #40
 300 0030 03EB8403 		add	r3, r3, r4, lsl #2
 301 0034 53F81C2C 		ldr	r2, [r3, #-28]
 302 0038 FFF7FEFF 		bl	sprintf
 303              	.LVL29:
 523:Src/main.c    ****             print(msg, 0);
 304              		.loc 1 523 0
 305 003c 05A8     		add	r0, sp, #20
 306 003e 0021     		movs	r1, #0
 307 0040 FFF7FEFF 		bl	print
 308              	.LVL30:
 524:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 309              		.loc 1 524 0
 310 0044 13E0     		b	.L22
 311              	.L23:
 525:Src/main.c    ****             {
 526:Src/main.c    ****                 values[pid_select]++;
 312              		.loc 1 526 0
 313 0046 0AAB     		add	r3, sp, #40
 314 0048 03EB8403 		add	r3, r3, r4, lsl #2
 315 004c 53F81C2C 		ldr	r2, [r3, #-28]
 316 0050 0132     		adds	r2, r2, #1
 317 0052 43F81C2C 		str	r2, [r3, #-28]
 527:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 318              		.loc 1 527 0
 319 0056 05A8     		add	r0, sp, #20
 320 0058 1249     		ldr	r1, .L26+8
 321 005a FFF7FEFF 		bl	sprintf
 322              	.LVL31:
 528:Src/main.c    ****                 print(msg, 0);
 323              		.loc 1 528 0
 324 005e 05A8     		add	r0, sp, #20
 325 0060 0021     		movs	r1, #0
 326 0062 FFF7FEFF 		bl	print
 327              	.LVL32:
 529:Src/main.c    ****                 HAL_Delay(500);
 328              		.loc 1 529 0
 329 0066 4FF4FA70 		mov	r0, #500
 330 006a FFF7FEFF 		bl	HAL_Delay
 331              	.LVL33:
 332              	.L22:
 524:Src/main.c    ****             {
 333              		.loc 1 524 0
 334 006e 0C48     		ldr	r0, .L26+4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 16


 335 0070 4FF40051 		mov	r1, #8192
 336 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 337              	.LVL34:
 338 0078 0028     		cmp	r0, #0
 339 007a E4D0     		beq	.L23
 530:Src/main.c    ****             }
 531:Src/main.c    ****             ++pid_select;
 340              		.loc 1 531 0
 341 007c 0134     		adds	r4, r4, #1
 342              	.LVL35:
 343              	.L21:
 532:Src/main.c    ****         }
 533:Src/main.c    ****         if (pid_select == 2)
 344              		.loc 1 533 0
 345 007e 022C     		cmp	r4, #2
 346 0080 CDD1     		bne	.L24
 534:Src/main.c    ****             break;
 535:Src/main.c    ****     }
 536:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 347              		.loc 1 536 0
 348 0082 BDF80C10 		ldrh	r1, [sp, #12]
 349 0086 BDF81020 		ldrh	r2, [sp, #16]
 350 008a 0123     		movs	r3, #1
 351 008c 0093     		str	r3, [sp]
 352 008e 0193     		str	r3, [sp, #4]
 353 0090 2846     		mov	r0, r5
 354 0092 FFF7FEFF 		bl	pid_Init
 355              	.LVL36:
 537:Src/main.c    **** }
 356              		.loc 1 537 0
 357 0096 2846     		mov	r0, r5
 358 0098 0BB0     		add	sp, sp, #44
 359              	.LCFI8:
 360              		.cfi_def_cfa_offset 12
 361              		@ sp needed
 362 009a 30BD     		pop	{r4, r5, pc}
 363              	.LVL37:
 364              	.L27:
 365              		.align	2
 366              	.L26:
 367 009c 00000000 		.word	.LC0
 368 00a0 00080240 		.word	1073874944
 369 00a4 0C000000 		.word	.LC1
 370              		.cfi_endproc
 371              	.LFE133:
 373              		.section	.text.set_motor_speed,"ax",%progbits
 374              		.align	2
 375              		.global	set_motor_speed
 376              		.thumb
 377              		.thumb_func
 379              	set_motor_speed:
 380              	.LFB134:
 538:Src/main.c    **** 
 539:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 540:Src/main.c    **** {
 381              		.loc 1 540 0
 382              		.cfi_startproc
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 17


 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 386              	.LVL38:
 541:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 387              		.loc 1 541 0
 388 0000 0346     		mov	r3, r0
 389 0002 18B9     		cbnz	r0, .L29
 542:Src/main.c    ****     {
 543:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 390              		.loc 1 543 0
 391 0004 114A     		ldr	r2, .L33
 392 0006 1268     		ldr	r2, [r2]
 393 0008 9063     		str	r0, [r2, #56]
 394 000a 13E0     		b	.L30
 395              	.L29:
 544:Src/main.c    ****     }
 545:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 396              		.loc 1 545 0
 397 000c 0428     		cmp	r0, #4
 398 000e 04D1     		bne	.L31
 546:Src/main.c    ****     {
 547:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 399              		.loc 1 547 0
 400 0010 0E4A     		ldr	r2, .L33
 401 0012 1268     		ldr	r2, [r2]
 402 0014 0020     		movs	r0, #0
 403              	.LVL39:
 404 0016 5063     		str	r0, [r2, #52]
 405 0018 0CE0     		b	.L30
 406              	.LVL40:
 407              	.L31:
 548:Src/main.c    ****     }
 549:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 408              		.loc 1 549 0
 409 001a 0828     		cmp	r0, #8
 410 001c 04D1     		bne	.L32
 550:Src/main.c    ****     {
 551:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 411              		.loc 1 551 0
 412 001e 0B4A     		ldr	r2, .L33
 413 0020 1268     		ldr	r2, [r2]
 414 0022 0020     		movs	r0, #0
 415              	.LVL41:
 416 0024 1064     		str	r0, [r2, #64]
 417 0026 05E0     		b	.L30
 418              	.LVL42:
 419              	.L32:
 552:Src/main.c    ****     }
 553:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 420              		.loc 1 553 0
 421 0028 0C28     		cmp	r0, #12
 422 002a 03D1     		bne	.L30
 554:Src/main.c    ****     {
 555:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 423              		.loc 1 555 0
 424 002c 074A     		ldr	r2, .L33
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 18


 425 002e 1268     		ldr	r2, [r2]
 426 0030 0020     		movs	r0, #0
 427              	.LVL43:
 428 0032 D063     		str	r0, [r2, #60]
 429              	.L30:
 556:Src/main.c    ****     }
 557:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed > 1000 ? 1000 : speed);
 430              		.loc 1 557 0
 431 0034 054A     		ldr	r2, .L33
 432 0036 1268     		ldr	r2, [r2]
 433 0038 3432     		adds	r2, r2, #52
 434 003a 9B08     		lsrs	r3, r3, #2
 435              	.LVL44:
 436 003c B1F57A7F 		cmp	r1, #1000
 437 0040 28BF     		it	cs
 438 0042 4FF47A71 		movcs	r1, #1000
 439              	.LVL45:
 440 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 441 004a 7047     		bx	lr
 442              	.L34:
 443              		.align	2
 444              	.L33:
 445 004c 00000000 		.word	htim1
 446              		.cfi_endproc
 447              	.LFE134:
 449              		.global	__aeabi_f2d
 450              		.global	__aeabi_d2uiz
 451              		.section	.text.turn,"ax",%progbits
 452              		.align	2
 453              		.global	turn
 454              		.thumb
 455              		.thumb_func
 457              	turn:
 458              	.LFB128:
 378:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 459              		.loc 1 378 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 24
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 464              	.LCFI9:
 465              		.cfi_def_cfa_offset 20
 466              		.cfi_offset 4, -20
 467              		.cfi_offset 5, -16
 468              		.cfi_offset 6, -12
 469              		.cfi_offset 7, -8
 470              		.cfi_offset 14, -4
 471 0002 2DED028B 		fstmfdd	sp!, {d8}
 472              	.LCFI10:
 473              		.cfi_def_cfa_offset 28
 474              		.cfi_offset 80, -28
 475              		.cfi_offset 81, -24
 476 0006 87B0     		sub	sp, sp, #28
 477              	.LCFI11:
 478              		.cfi_def_cfa_offset 56
 379:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 479              		.loc 1 379 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 19


 480 0008 5F48     		ldr	r0, .L48+16
 481 000a 6049     		ldr	r1, .L48+20
 482 000c 4FF40062 		mov	r2, #2048
 483 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 484              	.LVL46:
 381:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 485              		.loc 1 381 0
 486 0014 3220     		movs	r0, #50
 487 0016 FFF7FEFF 		bl	HAL_Delay
 488              	.LVL47:
 382:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 489              		.loc 1 382 0
 490 001a 5D4B     		ldr	r3, .L48+24
 491 001c 5869     		ldr	r0, [r3, #20]
 492 001e 4000     		lsls	r0, r0, #1
 493 0020 FFF7FEFF 		bl	calculate_heading
 494              	.LVL48:
 495 0024 B0EE408A 		fcpys	s16, s0
 496              	.LVL49:
 383:Src/main.c    ****     TIM4->CNT = 0;
 497              		.loc 1 383 0
 498 0028 F0EEC07A 		fabss	s15, s0
 499 002c 17EE900A 		fmrs	r0, s15
 500 0030 FFF7FEFF 		bl	__aeabi_f2d
 501              	.LVL50:
 502 0034 0022     		movs	r2, #0
 503 0036 574B     		ldr	r3, .L48+28
 504 0038 FFF7FEFF 		bl	__aeabi_dmul
 505              	.LVL51:
 506 003c FFF7FEFF 		bl	__aeabi_d2uiz
 507              	.LVL52:
 508 0040 85B2     		uxth	r5, r0
 509              	.LVL53:
 384:Src/main.c    ****     TIM5->CNT = 0;
 510              		.loc 1 384 0
 511 0042 0024     		movs	r4, #0
 512 0044 544B     		ldr	r3, .L48+32
 513 0046 5C62     		str	r4, [r3, #36]
 385:Src/main.c    **** 
 514              		.loc 1 385 0
 515 0048 03F58063 		add	r3, r3, #1024
 516 004c 5C62     		str	r4, [r3, #36]
 387:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 517              		.loc 1 387 0
 518 004e 0194     		str	r4, [sp, #4]
 519 0050 0294     		str	r4, [sp, #8]
 520 0052 0394     		str	r4, [sp, #12]
 521 0054 0494     		str	r4, [sp, #16]
 522 0056 ADF81440 		strh	r4, [sp, #20]	@ movhi
 388:Src/main.c    ****     print(msg, 0);
 523              		.loc 1 388 0
 524 005a 01A8     		add	r0, sp, #4
 525 005c 4F49     		ldr	r1, .L48+36
 526 005e 2A46     		mov	r2, r5
 527 0060 FFF7FEFF 		bl	sprintf
 528              	.LVL54:
 389:Src/main.c    ****     int pre_dec = (int)(volts / 1);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 20


 529              		.loc 1 389 0
 530 0064 01A8     		add	r0, sp, #4
 531 0066 2146     		mov	r1, r4
 532 0068 FFF7FEFF 		bl	print
 533              	.LVL55:
 390:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 534              		.loc 1 390 0
 535 006c BDEEC87A 		ftosizs	s14, s16
 536              	.LVL56:
 391:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 537              		.loc 1 391 0
 538 0070 F8EEC77A 		fsitos	s15, s14
 539 0074 78EE677A 		fsubs	s15, s16, s15
 540 0078 DFED496A 		flds	s13, .L48+40
 541 007c 67EEA67A 		fmuls	s15, s15, s13
 542              	.LVL57:
 392:Src/main.c    ****     print(msg, 2);
 543              		.loc 1 392 0
 544 0080 01A8     		add	r0, sp, #4
 545 0082 4849     		ldr	r1, .L48+44
 546 0084 17EE102A 		fmrs	r2, s14	@ int
 547 0088 FDEEE77A 		ftosizs	s15, s15
 548              	.LVL58:
 549 008c 17EE903A 		fmrs	r3, s15	@ int
 550 0090 FFF7FEFF 		bl	sprintf
 551              	.LVL59:
 393:Src/main.c    **** 
 552              		.loc 1 393 0
 553 0094 01A8     		add	r0, sp, #4
 554 0096 0221     		movs	r1, #2
 555 0098 FFF7FEFF 		bl	print
 556              	.LVL60:
 395:Src/main.c    ****     {
 557              		.loc 1 395 0
 558 009c 18EE100A 		fmrs	r0, s16
 559 00a0 FFF7FEFF 		bl	__aeabi_f2d
 560              	.LVL61:
 561 00a4 0646     		mov	r6, r0
 562 00a6 0F46     		mov	r7, r1
 563 00a8 33A3     		adr	r3, .L48
 564 00aa D3E90023 		ldrd	r2, [r3]
 565 00ae FFF7FEFF 		bl	__aeabi_dcmplt
 566              	.LVL62:
 567 00b2 20B3     		cbz	r0, .L46
 397:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 568              		.loc 1 397 0
 569 00b4 2046     		mov	r0, r4
 570 00b6 2146     		mov	r1, r4
 571 00b8 FFF7FEFF 		bl	set_motor_speed
 572              	.LVL63:
 398:Src/main.c    ****         while (TIM5->CNT < counts)
 573              		.loc 1 398 0
 574 00bc 0820     		movs	r0, #8
 575 00be 3A4B     		ldr	r3, .L48+48
 576 00c0 1988     		ldrh	r1, [r3]
 577 00c2 FFF7FEFF 		bl	set_motor_speed
 578              	.LVL64:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 21


 399:Src/main.c    ****         {
 579              		.loc 1 399 0
 580 00c6 09E0     		b	.L38
 581              	.L39:
 401:Src/main.c    ****             print(msg, 4);
 582              		.loc 1 401 0
 583 00c8 384B     		ldr	r3, .L48+52
 584 00ca 5A6A     		ldr	r2, [r3, #36]
 585 00cc 01A8     		add	r0, sp, #4
 586 00ce 3849     		ldr	r1, .L48+56
 587 00d0 FFF7FEFF 		bl	sprintf
 588              	.LVL65:
 402:Src/main.c    ****         }
 589              		.loc 1 402 0
 590 00d4 01A8     		add	r0, sp, #4
 591 00d6 0421     		movs	r1, #4
 592 00d8 FFF7FEFF 		bl	print
 593              	.LVL66:
 594              	.L38:
 399:Src/main.c    ****         {
 595              		.loc 1 399 0
 596 00dc 334B     		ldr	r3, .L48+52
 597 00de 5B6A     		ldr	r3, [r3, #36]
 598 00e0 AB42     		cmp	r3, r5
 599 00e2 F1D3     		bcc	.L39
 404:Src/main.c    ****         print(msg, 4);
 600              		.loc 1 404 0
 601 00e4 314C     		ldr	r4, .L48+52
 602 00e6 626A     		ldr	r2, [r4, #36]
 603 00e8 01A8     		add	r0, sp, #4
 604 00ea 3149     		ldr	r1, .L48+56
 605 00ec FFF7FEFF 		bl	sprintf
 606              	.LVL67:
 405:Src/main.c    ****         TIM5->CNT = 0;
 607              		.loc 1 405 0
 608 00f0 01A8     		add	r0, sp, #4
 609 00f2 0421     		movs	r1, #4
 610 00f4 FFF7FEFF 		bl	print
 611              	.LVL68:
 406:Src/main.c    ****     }
 612              		.loc 1 406 0
 613 00f8 0023     		movs	r3, #0
 614 00fa 6362     		str	r3, [r4, #36]
 615 00fc 2BE0     		b	.L40
 616              	.L46:
 408:Src/main.c    ****     {
 617              		.loc 1 408 0
 618 00fe 3046     		mov	r0, r6
 619 0100 3946     		mov	r1, r7
 620 0102 1FA3     		adr	r3, .L48+8
 621 0104 D3E90023 		ldrd	r2, [r3]
 622 0108 FFF7FEFF 		bl	__aeabi_dcmpgt
 623              	.LVL69:
 624 010c 18B3     		cbz	r0, .L40
 410:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 625              		.loc 1 410 0
 626 010e 0020     		movs	r0, #0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 22


 627 0110 284B     		ldr	r3, .L48+60
 628 0112 1988     		ldrh	r1, [r3]
 629 0114 FFF7FEFF 		bl	set_motor_speed
 630              	.LVL70:
 411:Src/main.c    ****         while (TIM4->CNT < counts)
 631              		.loc 1 411 0
 632 0118 0820     		movs	r0, #8
 633 011a 0021     		movs	r1, #0
 634 011c FFF7FEFF 		bl	set_motor_speed
 635              	.LVL71:
 412:Src/main.c    ****         {
 636              		.loc 1 412 0
 637 0120 09E0     		b	.L42
 638              	.L43:
 414:Src/main.c    ****             print(msg, 4);
 639              		.loc 1 414 0
 640 0122 1D4B     		ldr	r3, .L48+32
 641 0124 5A6A     		ldr	r2, [r3, #36]
 642 0126 01A8     		add	r0, sp, #4
 643 0128 2349     		ldr	r1, .L48+64
 644 012a FFF7FEFF 		bl	sprintf
 645              	.LVL72:
 415:Src/main.c    ****         }
 646              		.loc 1 415 0
 647 012e 01A8     		add	r0, sp, #4
 648 0130 0421     		movs	r1, #4
 649 0132 FFF7FEFF 		bl	print
 650              	.LVL73:
 651              	.L42:
 412:Src/main.c    ****         {
 652              		.loc 1 412 0
 653 0136 184B     		ldr	r3, .L48+32
 654 0138 5B6A     		ldr	r3, [r3, #36]
 655 013a AB42     		cmp	r3, r5
 656 013c F1D3     		bcc	.L43
 417:Src/main.c    ****         print(msg, 4);
 657              		.loc 1 417 0
 658 013e 164C     		ldr	r4, .L48+32
 659 0140 626A     		ldr	r2, [r4, #36]
 660 0142 01A8     		add	r0, sp, #4
 661 0144 1C49     		ldr	r1, .L48+64
 662 0146 FFF7FEFF 		bl	sprintf
 663              	.LVL74:
 418:Src/main.c    ****         TIM4->CNT = 0;
 664              		.loc 1 418 0
 665 014a 01A8     		add	r0, sp, #4
 666 014c 0421     		movs	r1, #4
 667 014e FFF7FEFF 		bl	print
 668              	.LVL75:
 419:Src/main.c    ****     }
 669              		.loc 1 419 0
 670 0152 0023     		movs	r3, #0
 671 0154 6362     		str	r3, [r4, #36]
 672              	.L40:
 421:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 673              		.loc 1 421 0
 674 0156 0020     		movs	r0, #0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 23


 675 0158 0146     		mov	r1, r0
 676 015a FFF7FEFF 		bl	set_motor_speed
 677              	.LVL76:
 422:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 678              		.loc 1 422 0
 679 015e 0820     		movs	r0, #8
 680 0160 0021     		movs	r1, #0
 681 0162 FFF7FEFF 		bl	set_motor_speed
 682              	.LVL77:
 423:Src/main.c    **** }
 683              		.loc 1 423 0
 684 0166 0848     		ldr	r0, .L48+16
 685 0168 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 686              	.LVL78:
 424:Src/main.c    **** 
 687              		.loc 1 424 0
 688 016c 07B0     		add	sp, sp, #28
 689              	.LCFI12:
 690              		.cfi_def_cfa_offset 28
 691              		@ sp needed
 692 016e BDEC028B 		fldmfdd	sp!, {d8}
 693              	.LCFI13:
 694              		.cfi_restore 80
 695              		.cfi_restore 81
 696              		.cfi_def_cfa_offset 20
 697              	.LVL79:
 698 0172 F0BD     		pop	{r4, r5, r6, r7, pc}
 699              	.LVL80:
 700              	.L49:
 701 0174 AFF30080 		.align	3
 702              	.L48:
 703 0178 7B14AE47 		.word	1202590843
 704 017c E17AA4BF 		.word	-1079739679
 705 0180 7B14AE47 		.word	1202590843
 706 0184 E17AA43F 		.word	1067743969
 707 0188 00000000 		.word	hadc1
 708 018c 00000000 		.word	dma_buffer
 709 0190 00000000 		.word	adc_values
 710 0194 00005940 		.word	1079574528
 711 0198 00080040 		.word	1073743872
 712 019c 10000000 		.word	.LC2
 713 01a0 00007A44 		.word	1148846080
 714 01a4 1C000000 		.word	.LC3
 715 01a8 00000000 		.word	.LANCHOR0
 716 01ac 000C0040 		.word	1073744896
 717 01b0 28000000 		.word	.LC4
 718 01b4 00000000 		.word	.LANCHOR1
 719 01b8 38000000 		.word	.LC5
 720              		.cfi_endproc
 721              	.LFE128:
 723              		.global	__aeabi_i2d
 724              		.global	__aeabi_dadd
 725              		.section	.text.turn_deg,"ax",%progbits
 726              		.align	2
 727              		.global	turn_deg
 728              		.thumb
 729              		.thumb_func
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 24


 731              	turn_deg:
 732              	.LFB129:
 431:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 733              		.loc 1 431 0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 24
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737              	.LVL81:
 738 0000 30B5     		push	{r4, r5, lr}
 739              	.LCFI14:
 740              		.cfi_def_cfa_offset 12
 741              		.cfi_offset 4, -12
 742              		.cfi_offset 5, -8
 743              		.cfi_offset 14, -4
 744 0002 87B0     		sub	sp, sp, #28
 745              	.LCFI15:
 746              		.cfi_def_cfa_offset 40
 747 0004 0546     		mov	r5, r0
 432:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 748              		.loc 1 432 0
 749 0006 2C48     		ldr	r0, .L55+8
 750              	.LVL82:
 751 0008 2C49     		ldr	r1, .L55+12
 752 000a 4FF40062 		mov	r2, #2048
 753 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 754              	.LVL83:
 433:Src/main.c    ****     TIM4->CNT = 0;
 755              		.loc 1 433 0
 756 0012 A5F15A00 		sub	r0, r5, #90
 757 0016 FFF7FEFF 		bl	__aeabi_i2d
 758              	.LVL84:
 759 001a 25A3     		adr	r3, .L55
 760 001c D3E90023 		ldrd	r2, [r3]
 761 0020 FFF7FEFF 		bl	__aeabi_dmul
 762              	.LVL85:
 763 0024 0022     		movs	r2, #0
 764 0026 264B     		ldr	r3, .L55+16
 765 0028 FFF7FEFF 		bl	__aeabi_dadd
 766              	.LVL86:
 767 002c FFF7FEFF 		bl	__aeabi_d2uiz
 768              	.LVL87:
 769 0030 84B2     		uxth	r4, r0
 770              	.LVL88:
 434:Src/main.c    ****     TIM5->CNT = 0;
 771              		.loc 1 434 0
 772 0032 0023     		movs	r3, #0
 773 0034 234A     		ldr	r2, .L55+20
 774 0036 5362     		str	r3, [r2, #36]
 435:Src/main.c    **** 
 775              		.loc 1 435 0
 776 0038 02F58062 		add	r2, r2, #1024
 777 003c 5362     		str	r3, [r2, #36]
 437:Src/main.c    **** 
 778              		.loc 1 437 0
 779 003e 0193     		str	r3, [sp, #4]
 780 0040 0293     		str	r3, [sp, #8]
 781 0042 0393     		str	r3, [sp, #12]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 25


 782 0044 0493     		str	r3, [sp, #16]
 783 0046 ADF81430 		strh	r3, [sp, #20]	@ movhi
 439:Src/main.c    ****     {
 784              		.loc 1 439 0
 785 004a 1DB3     		cbz	r5, .L51
 441:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 786              		.loc 1 441 0
 787 004c 1846     		mov	r0, r3
 788 004e 1946     		mov	r1, r3
 789 0050 FFF7FEFF 		bl	set_motor_speed
 790              	.LVL89:
 442:Src/main.c    ****         while (TIM5->CNT < counts)
 791              		.loc 1 442 0
 792 0054 0820     		movs	r0, #8
 793 0056 47F23051 		movw	r1, #30000
 794 005a FFF7FEFF 		bl	set_motor_speed
 795              	.LVL90:
 443:Src/main.c    ****         {
 796              		.loc 1 443 0
 797 005e 09E0     		b	.L52
 798              	.L53:
 445:Src/main.c    ****             print(msg, 4);
 799              		.loc 1 445 0
 800 0060 194B     		ldr	r3, .L55+24
 801 0062 5A6A     		ldr	r2, [r3, #36]
 802 0064 01A8     		add	r0, sp, #4
 803 0066 1949     		ldr	r1, .L55+28
 804 0068 FFF7FEFF 		bl	sprintf
 805              	.LVL91:
 446:Src/main.c    ****         }
 806              		.loc 1 446 0
 807 006c 01A8     		add	r0, sp, #4
 808 006e 0421     		movs	r1, #4
 809 0070 FFF7FEFF 		bl	print
 810              	.LVL92:
 811              	.L52:
 443:Src/main.c    ****         {
 812              		.loc 1 443 0
 813 0074 144B     		ldr	r3, .L55+24
 814 0076 5B6A     		ldr	r3, [r3, #36]
 815 0078 A342     		cmp	r3, r4
 816 007a F1D3     		bcc	.L53
 448:Src/main.c    ****         print(msg, 4);
 817              		.loc 1 448 0
 818 007c 124C     		ldr	r4, .L55+24
 819              	.LVL93:
 820 007e 626A     		ldr	r2, [r4, #36]
 821 0080 01A8     		add	r0, sp, #4
 822 0082 1249     		ldr	r1, .L55+28
 823 0084 FFF7FEFF 		bl	sprintf
 824              	.LVL94:
 449:Src/main.c    ****         TIM5->CNT = 0;
 825              		.loc 1 449 0
 826 0088 01A8     		add	r0, sp, #4
 827 008a 0421     		movs	r1, #4
 828 008c FFF7FEFF 		bl	print
 829              	.LVL95:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 26


 450:Src/main.c    ****     }
 830              		.loc 1 450 0
 831 0090 0023     		movs	r3, #0
 832 0092 6362     		str	r3, [r4, #36]
 833              	.L51:
 465:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 834              		.loc 1 465 0
 835 0094 0020     		movs	r0, #0
 836 0096 0146     		mov	r1, r0
 837 0098 FFF7FEFF 		bl	set_motor_speed
 838              	.LVL96:
 466:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 839              		.loc 1 466 0
 840 009c 0820     		movs	r0, #8
 841 009e 0021     		movs	r1, #0
 842 00a0 FFF7FEFF 		bl	set_motor_speed
 843              	.LVL97:
 467:Src/main.c    **** }
 844              		.loc 1 467 0
 845 00a4 0448     		ldr	r0, .L55+8
 846 00a6 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 847              	.LVL98:
 468:Src/main.c    **** 
 848              		.loc 1 468 0
 849 00aa 07B0     		add	sp, sp, #28
 850              	.LCFI16:
 851              		.cfi_def_cfa_offset 12
 852              		@ sp needed
 853 00ac 30BD     		pop	{r4, r5, pc}
 854              	.L56:
 855 00ae 00BF     		.align	3
 856              	.L55:
 857 00b0 721CC771 		.word	1908874354
 858 00b4 1CC7E13F 		.word	1071761180
 859 00b8 00000000 		.word	hadc1
 860 00bc 00000000 		.word	dma_buffer
 861 00c0 00004940 		.word	1078525952
 862 00c4 00080040 		.word	1073743872
 863 00c8 000C0040 		.word	1073744896
 864 00cc 28000000 		.word	.LC4
 865              		.cfi_endproc
 866              	.LFE129:
 868              		.section	.text.encoder_pid,"ax",%progbits
 869              		.align	2
 870              		.global	encoder_pid
 871              		.thumb
 872              		.thumb_func
 874              	encoder_pid:
 875              	.LFB135:
 558:Src/main.c    **** }
 559:Src/main.c    **** 
 560:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 561:Src/main.c    **** {
 876              		.loc 1 561 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 24
 879              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 27


 880              	.LVL99:
 881 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 882              	.LCFI17:
 883              		.cfi_def_cfa_offset 24
 884              		.cfi_offset 4, -24
 885              		.cfi_offset 5, -20
 886              		.cfi_offset 6, -16
 887              		.cfi_offset 7, -12
 888              		.cfi_offset 8, -8
 889              		.cfi_offset 14, -4
 890 0004 86B0     		sub	sp, sp, #24
 891              	.LCFI18:
 892              		.cfi_def_cfa_offset 48
 562:Src/main.c    ****     /* Get error */
 563:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
 893              		.loc 1 563 0
 894 0006 264B     		ldr	r3, .L63
 895 0008 5F6A     		ldr	r7, [r3, #36]
 896              	.LVL100:
 564:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
 897              		.loc 1 564 0
 898 000a 03F58063 		add	r3, r3, #1024
 899 000e D3F82480 		ldr	r8, [r3, #36]
 900              	.LVL101:
 565:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
 901              		.loc 1 565 0
 902 0012 C8EB0703 		rsb	r3, r8, r7
 903 0016 0361     		str	r3, [r0, #16]
 566:Src/main.c    **** 
 567:Src/main.c    ****     /* Get gain */
 568:Src/main.c    ****     // Gain <0 for ride side faster
 569:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
 904              		.loc 1 569 0
 905 0018 FFF7FEFF 		bl	pid_GetGain
 906              	.LVL102:
 570:Src/main.c    **** 
 571:Src/main.c    ****     /* Set Motor Speeds*/
 572:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 907              		.loc 1 572 0
 908 001c 214B     		ldr	r3, .L63+4
 909 001e 1E88     		ldrh	r6, [r3]
 910              	.LVL103:
 573:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 911              		.loc 1 573 0
 912 0020 214B     		ldr	r3, .L63+8
 913 0022 1D88     		ldrh	r5, [r3]
 914              	.LVL104:
 574:Src/main.c    ****     if (gain < 0)
 915              		.loc 1 574 0
 916 0024 0028     		cmp	r0, #0
 917 0026 01DA     		bge	.L58
 575:Src/main.c    ****     {
 576:Src/main.c    ****         lspeed -= gain;
 918              		.loc 1 576 0
 919 0028 361A     		subs	r6, r6, r0
 920              	.LVL105:
 921 002a 02E0     		b	.L59
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 28


 922              	.L58:
 577:Src/main.c    ****     }
 578:Src/main.c    ****     else if (gain > 0)
 923              		.loc 1 578 0
 924 002c 0028     		cmp	r0, #0
 925 002e 00DD     		ble	.L59
 579:Src/main.c    ****     {
 580:Src/main.c    ****         rspeed += gain;
 926              		.loc 1 580 0
 927 0030 0544     		add	r5, r5, r0
 928              	.LVL106:
 929              	.L59:
 581:Src/main.c    ****     }
 582:Src/main.c    **** 
 583:Src/main.c    ****     char msg[18] = "";
 930              		.loc 1 583 0
 931 0032 0024     		movs	r4, #0
 932 0034 0194     		str	r4, [sp, #4]
 933 0036 0294     		str	r4, [sp, #8]
 934 0038 0394     		str	r4, [sp, #12]
 935 003a 0494     		str	r4, [sp, #16]
 936 003c ADF81440 		strh	r4, [sp, #20]	@ movhi
 584:Src/main.c    ****     sprintf(msg, "LS: %lu", lspeed);
 937              		.loc 1 584 0
 938 0040 01A8     		add	r0, sp, #4
 939              	.LVL107:
 940 0042 1A49     		ldr	r1, .L63+12
 941 0044 3246     		mov	r2, r6
 942 0046 FFF7FEFF 		bl	sprintf
 943              	.LVL108:
 585:Src/main.c    ****     print(msg, 0);
 944              		.loc 1 585 0
 945 004a 01A8     		add	r0, sp, #4
 946 004c 2146     		mov	r1, r4
 947 004e FFF7FEFF 		bl	print
 948              	.LVL109:
 586:Src/main.c    ****     sprintf(msg, "RS: %lu", rspeed);
 949              		.loc 1 586 0
 950 0052 01A8     		add	r0, sp, #4
 951 0054 1649     		ldr	r1, .L63+16
 952 0056 2A46     		mov	r2, r5
 953 0058 FFF7FEFF 		bl	sprintf
 954              	.LVL110:
 587:Src/main.c    ****     print(msg, 1);
 955              		.loc 1 587 0
 956 005c 01A8     		add	r0, sp, #4
 957 005e 0121     		movs	r1, #1
 958 0060 FFF7FEFF 		bl	print
 959              	.LVL111:
 588:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 960              		.loc 1 588 0
 961 0064 2046     		mov	r0, r4
 962 0066 3146     		mov	r1, r6
 963 0068 FFF7FEFF 		bl	set_motor_speed
 964              	.LVL112:
 589:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 965              		.loc 1 589 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 29


 966 006c 0820     		movs	r0, #8
 967 006e 2946     		mov	r1, r5
 968 0070 FFF7FEFF 		bl	set_motor_speed
 969              	.LVL113:
 590:Src/main.c    **** 
 591:Src/main.c    ****     /* Prevent weird overflow shit */
 592:Src/main.c    ****     if (lcnt > 60000 || rcnt > 60000)
 970              		.loc 1 592 0
 971 0074 4EF66023 		movw	r3, #60000
 972 0078 9F42     		cmp	r7, r3
 973 007a 01D8     		bhi	.L60
 974              		.loc 1 592 0 is_stmt 0 discriminator 1
 975 007c 9845     		cmp	r8, r3
 976 007e 0CD9     		bls	.L57
 977              	.L60:
 593:Src/main.c    ****     {
 594:Src/main.c    ****         TIM4->CNT -= 50000;
 978              		.loc 1 594 0 is_stmt 1
 979 0080 074A     		ldr	r2, .L63
 980 0082 536A     		ldr	r3, [r2, #36]
 981 0084 A3F54343 		sub	r3, r3, #49920
 982 0088 503B     		subs	r3, r3, #80
 983 008a 5362     		str	r3, [r2, #36]
 595:Src/main.c    ****         TIM5->CNT -= 50000;
 984              		.loc 1 595 0
 985 008c 02F58062 		add	r2, r2, #1024
 986 0090 536A     		ldr	r3, [r2, #36]
 987 0092 A3F54343 		sub	r3, r3, #49920
 988 0096 503B     		subs	r3, r3, #80
 989 0098 5362     		str	r3, [r2, #36]
 990              	.L57:
 596:Src/main.c    ****     }
 597:Src/main.c    **** }
 991              		.loc 1 597 0
 992 009a 06B0     		add	sp, sp, #24
 993              	.LCFI19:
 994              		.cfi_def_cfa_offset 24
 995              		@ sp needed
 996 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 997              	.LVL114:
 998              	.L64:
 999              		.align	2
 1000              	.L63:
 1001 00a0 00080040 		.word	1073743872
 1002 00a4 00000000 		.word	.LANCHOR1
 1003 00a8 00000000 		.word	.LANCHOR0
 1004 00ac 48000000 		.word	.LC6
 1005 00b0 50000000 		.word	.LC7
 1006              		.cfi_endproc
 1007              	.LFE135:
 1009              		.section	.text.drive_straight,"ax",%progbits
 1010              		.align	2
 1011              		.global	drive_straight
 1012              		.thumb
 1013              		.thumb_func
 1015              	drive_straight:
 1016              	.LFB127:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 30


 368:Src/main.c    ****     encoder_pid(enc_pid);
 1017              		.loc 1 368 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              	.LVL115:
 1022 0000 08B5     		push	{r3, lr}
 1023              	.LCFI20:
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 3, -8
 1026              		.cfi_offset 14, -4
 369:Src/main.c    ****     HAL_Delay(10);
 1027              		.loc 1 369 0
 1028 0002 FFF7FEFF 		bl	encoder_pid
 1029              	.LVL116:
 370:Src/main.c    **** }
 1030              		.loc 1 370 0
 1031 0006 0A20     		movs	r0, #10
 1032 0008 FFF7FEFF 		bl	HAL_Delay
 1033              	.LVL117:
 1034 000c 08BD     		pop	{r3, pc}
 1035              		.cfi_endproc
 1036              	.LFE127:
 1038 000e 00BF     		.section	.text.square_edge,"ax",%progbits
 1039              		.align	2
 1040              		.global	square_edge
 1041              		.thumb
 1042              		.thumb_func
 1044              	square_edge:
 1045              	.LFB126:
 345:Src/main.c    ****     while (1)
 1046              		.loc 1 345 0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 0
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 1050              	.LVL118:
 1051 0000 10B5     		push	{r4, lr}
 1052              	.LCFI21:
 1053              		.cfi_def_cfa_offset 8
 1054              		.cfi_offset 4, -8
 1055              		.cfi_offset 14, -4
 1056 0002 0446     		mov	r4, r0
 1057              	.LVL119:
 1058              	.L68:
 348:Src/main.c    ****         if (EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED)
 1059              		.loc 1 348 0
 1060 0004 2046     		mov	r0, r4
 1061 0006 FFF7FEFF 		bl	drive_straight
 1062              	.LVL120:
 349:Src/main.c    ****         {
 1063              		.loc 1 349 0
 1064 000a 0E4B     		ldr	r3, .L74
 1065 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1066 000e 012B     		cmp	r3, #1
 1067 0010 03D0     		beq	.L69
 349:Src/main.c    ****         {
 1068              		.loc 1 349 0 is_stmt 0 discriminator 1
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 31


 1069 0012 0D4A     		ldr	r2, .L74+4
 1070 0014 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1071 0016 012A     		cmp	r2, #1
 1072 0018 0ED1     		bne	.L70
 1073              	.L69:
 351:Src/main.c    ****             {
 1074              		.loc 1 351 0 is_stmt 1
 1075 001a 012B     		cmp	r3, #1
 1076 001c 03D1     		bne	.L71
 353:Src/main.c    ****             }
 1077              		.loc 1 353 0
 1078 001e 0020     		movs	r0, #0
 1079 0020 0146     		mov	r1, r0
 1080 0022 FFF7FEFF 		bl	set_motor_speed
 1081              	.LVL121:
 1082              	.L71:
 355:Src/main.c    ****             {
 1083              		.loc 1 355 0
 1084 0026 084B     		ldr	r3, .L74+4
 1085 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1086 002a 012B     		cmp	r3, #1
 1087 002c EAD1     		bne	.L68
 357:Src/main.c    ****             }
 1088              		.loc 1 357 0
 1089 002e 0820     		movs	r0, #8
 1090 0030 0021     		movs	r1, #0
 1091 0032 FFF7FEFF 		bl	set_motor_speed
 1092              	.LVL122:
 1093 0036 E5E7     		b	.L68
 1094              	.L70:
 360:Src/main.c    ****         {
 1095              		.loc 1 360 0
 1096 0038 012B     		cmp	r3, #1
 1097 003a E3D1     		bne	.L68
 360:Src/main.c    ****         {
 1098              		.loc 1 360 0 is_stmt 0 discriminator 1
 1099 003c 012A     		cmp	r2, #1
 1100 003e E1D1     		bne	.L68
 365:Src/main.c    **** 
 1101              		.loc 1 365 0 is_stmt 1
 1102 0040 10BD     		pop	{r4, pc}
 1103              	.LVL123:
 1104              	.L75:
 1105 0042 00BF     		.align	2
 1106              	.L74:
 1107 0044 00000000 		.word	EDGE_LEFT_STATE
 1108 0048 00000000 		.word	EDGE_RIGHT_STATE
 1109              		.cfi_endproc
 1110              	.LFE126:
 1112              		.section	.text.test_PWM_htim1,"ax",%progbits
 1113              		.align	2
 1114              		.global	test_PWM_htim1
 1115              		.thumb
 1116              		.thumb_func
 1118              	test_PWM_htim1:
 1119              	.LFB136:
 598:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 32


 599:Src/main.c    **** // ******
 600:Src/main.c    **** // TESTS
 601:Src/main.c    **** // ******
 602:Src/main.c    **** 
 603:Src/main.c    **** /*
 604:Src/main.c    ****  * Instructions:
 605:Src/main.c    ****  *      Run test_All() before the main while loop
 606:Src/main.c    ****  *      - Put a pull up resistor on htim3 PWM waves, measure voltage on pin
 607:Src/main.c    ****  *      - Measure voltage on pin of htim1
 608:Src/main.c    ****  *      - Give ADC pins values and read off of screen
 609:Src/main.c    ****  */
 610:Src/main.c    **** 
 611:Src/main.c    **** /*
 612:Src/main.c    ****  * Test PWM
 613:Src/main.c    ****  * Output: htim1 channel 1 through 4, PWM wave. Confirm these
 614:Src/main.c    ****  *         PWM waves via an oscilliscope.
 615:Src/main.c    ****  */
 616:Src/main.c    **** void test_PWM_htim1()
 617:Src/main.c    **** {
 1120              		.loc 1 617 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124 0000 10B5     		push	{r4, lr}
 1125              	.LCFI22:
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 4, -8
 1128              		.cfi_offset 14, -4
 618:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1129              		.loc 1 618 0
 1130 0002 0C4C     		ldr	r4, .L80
 1131 0004 2046     		mov	r0, r4
 1132 0006 0021     		movs	r1, #0
 1133 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1134              	.LVL124:
 619:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 620:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1135              		.loc 1 620 0
 1136 000c 2046     		mov	r0, r4
 1137 000e 0821     		movs	r1, #8
 1138 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1139              	.LVL125:
 621:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 622:Src/main.c    ****     int s = 0;
 1140              		.loc 1 622 0
 1141 0014 0024     		movs	r4, #0
 623:Src/main.c    ****     while (s < 1000)
 1142              		.loc 1 623 0
 1143 0016 08E0     		b	.L77
 1144              	.LVL126:
 1145              	.L78:
 624:Src/main.c    ****     {
 625:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, s);
 1146              		.loc 1 625 0
 1147 0018 064B     		ldr	r3, .L80
 1148 001a 1B68     		ldr	r3, [r3]
 1149 001c 5C63     		str	r4, [r3, #52]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 33


 626:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 627:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, s);
 1150              		.loc 1 627 0
 1151 001e DC63     		str	r4, [r3, #60]
 628:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 629:Src/main.c    ****         s += 100;
 1152              		.loc 1 629 0
 1153 0020 6434     		adds	r4, r4, #100
 1154              	.LVL127:
 630:Src/main.c    ****         HAL_Delay(1000);
 1155              		.loc 1 630 0
 1156 0022 4FF47A70 		mov	r0, #1000
 1157 0026 FFF7FEFF 		bl	HAL_Delay
 1158              	.LVL128:
 1159              	.L77:
 623:Src/main.c    ****     {
 1160              		.loc 1 623 0
 1161 002a B4F57A7F 		cmp	r4, #1000
 1162 002e F3DB     		blt	.L78
 631:Src/main.c    ****     }
 632:Src/main.c    **** }
 1163              		.loc 1 632 0
 1164 0030 10BD     		pop	{r4, pc}
 1165              	.LVL129:
 1166              	.L81:
 1167 0032 00BF     		.align	2
 1168              	.L80:
 1169 0034 00000000 		.word	htim1
 1170              		.cfi_endproc
 1171              	.LFE136:
 1173              		.section	.text.test_PWM_htim3,"ax",%progbits
 1174              		.align	2
 1175              		.global	test_PWM_htim3
 1176              		.thumb
 1177              		.thumb_func
 1179              	test_PWM_htim3:
 1180              	.LFB137:
 633:Src/main.c    **** 
 634:Src/main.c    **** /*
 635:Src/main.c    ****  * Test PWM
 636:Src/main.c    ****  * Output: htim3 channel 1 through 3, PWM wave. Confirm these
 637:Src/main.c    ****  *         PWM waves via an oscilliscope.
 638:Src/main.c    ****  */
 639:Src/main.c    **** void test_PWM_htim3()
 640:Src/main.c    **** {
 1181              		.loc 1 640 0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 0, uses_anonymous_args = 0
 1185 0000 10B5     		push	{r4, lr}
 1186              	.LCFI23:
 1187              		.cfi_def_cfa_offset 8
 1188              		.cfi_offset 4, -8
 1189              		.cfi_offset 14, -4
 641:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1190              		.loc 1 641 0
 1191 0002 0F4C     		ldr	r4, .L86
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 34


 1192 0004 2046     		mov	r0, r4
 1193 0006 0021     		movs	r1, #0
 1194 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1195              	.LVL130:
 642:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1196              		.loc 1 642 0
 1197 000c 2046     		mov	r0, r4
 1198 000e 0421     		movs	r1, #4
 1199 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1200              	.LVL131:
 643:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1201              		.loc 1 643 0
 1202 0014 2046     		mov	r0, r4
 1203 0016 0821     		movs	r1, #8
 1204 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1205              	.LVL132:
 644:Src/main.c    **** 
 645:Src/main.c    ****     int s = 500;
 1206              		.loc 1 645 0
 1207 001c 4FF4FA74 		mov	r4, #500
 646:Src/main.c    ****     while (s < 2400)
 1208              		.loc 1 646 0
 1209 0020 09E0     		b	.L83
 1210              	.LVL133:
 1211              	.L84:
 647:Src/main.c    ****     {
 648:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s);
 1212              		.loc 1 648 0
 1213 0022 074B     		ldr	r3, .L86
 1214 0024 1B68     		ldr	r3, [r3]
 1215 0026 5C63     		str	r4, [r3, #52]
 649:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s);
 1216              		.loc 1 649 0
 1217 0028 9C63     		str	r4, [r3, #56]
 650:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, s);
 1218              		.loc 1 650 0
 1219 002a DC63     		str	r4, [r3, #60]
 651:Src/main.c    ****         s += 100;
 1220              		.loc 1 651 0
 1221 002c 6434     		adds	r4, r4, #100
 1222              	.LVL134:
 652:Src/main.c    ****         HAL_Delay(500);
 1223              		.loc 1 652 0
 1224 002e 4FF4FA70 		mov	r0, #500
 1225 0032 FFF7FEFF 		bl	HAL_Delay
 1226              	.LVL135:
 1227              	.L83:
 646:Src/main.c    ****     {
 1228              		.loc 1 646 0
 1229 0036 B4F5166F 		cmp	r4, #2400
 1230 003a F2DB     		blt	.L84
 653:Src/main.c    ****     }
 654:Src/main.c    **** }
 1231              		.loc 1 654 0
 1232 003c 10BD     		pop	{r4, pc}
 1233              	.LVL136:
 1234              	.L87:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 35


 1235 003e 00BF     		.align	2
 1236              	.L86:
 1237 0040 00000000 		.word	htim3
 1238              		.cfi_endproc
 1239              	.LFE137:
 1241              		.section	.text.test_ADC,"ax",%progbits
 1242              		.align	2
 1243              		.global	test_ADC
 1244              		.thumb
 1245              		.thumb_func
 1247              	test_ADC:
 1248              	.LFB138:
 655:Src/main.c    **** 
 656:Src/main.c    **** void test_ADC()
 657:Src/main.c    **** {
 1249              		.loc 1 657 0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 24
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 1253 0000 10B5     		push	{r4, lr}
 1254              	.LCFI24:
 1255              		.cfi_def_cfa_offset 8
 1256              		.cfi_offset 4, -8
 1257              		.cfi_offset 14, -4
 1258 0002 86B0     		sub	sp, sp, #24
 1259              	.LCFI25:
 1260              		.cfi_def_cfa_offset 32
 658:Src/main.c    ****     char msg[18] = "";
 1261              		.loc 1 658 0
 1262 0004 0023     		movs	r3, #0
 1263 0006 0193     		str	r3, [sp, #4]
 1264 0008 0293     		str	r3, [sp, #8]
 1265 000a 0393     		str	r3, [sp, #12]
 1266 000c 0493     		str	r3, [sp, #16]
 1267 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
 659:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1268              		.loc 1 659 0
 1269 0012 0F48     		ldr	r0, .L91
 1270 0014 0F49     		ldr	r1, .L91+4
 1271 0016 4FF40062 		mov	r2, #2048
 1272 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1273              	.LVL137:
 1274              	.L89:
 1275              	.LBB2:
 660:Src/main.c    **** 
 661:Src/main.c    ****     while (1)
 662:Src/main.c    ****     {
 663:Src/main.c    ****         int ch_5 = adc_values[0];
 1276              		.loc 1 663 0 discriminator 1
 1277 001e 0E4B     		ldr	r3, .L91+8
 1278              	.LVL138:
 664:Src/main.c    ****         int ch_4 = adc_values[1];
 1279              		.loc 1 664 0 discriminator 1
 1280 0020 5C68     		ldr	r4, [r3, #4]
 1281              	.LVL139:
 665:Src/main.c    **** 
 666:Src/main.c    ****         sprintf(msg, "ch_5: %d", ch_5);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 36


 1282              		.loc 1 666 0 discriminator 1
 1283 0022 01A8     		add	r0, sp, #4
 1284 0024 0D49     		ldr	r1, .L91+12
 1285 0026 1A68     		ldr	r2, [r3]
 1286 0028 FFF7FEFF 		bl	sprintf
 1287              	.LVL140:
 667:Src/main.c    ****         print(msg, 0);
 1288              		.loc 1 667 0 discriminator 1
 1289 002c 01A8     		add	r0, sp, #4
 1290 002e 0021     		movs	r1, #0
 1291 0030 FFF7FEFF 		bl	print
 1292              	.LVL141:
 668:Src/main.c    **** 
 669:Src/main.c    ****         sprintf(msg, "ch_4: %d", ch_4);
 1293              		.loc 1 669 0 discriminator 1
 1294 0034 01A8     		add	r0, sp, #4
 1295 0036 0A49     		ldr	r1, .L91+16
 1296 0038 2246     		mov	r2, r4
 1297 003a FFF7FEFF 		bl	sprintf
 1298              	.LVL142:
 670:Src/main.c    ****         print(msg, 2);
 1299              		.loc 1 670 0 discriminator 1
 1300 003e 01A8     		add	r0, sp, #4
 1301 0040 0221     		movs	r1, #2
 1302 0042 FFF7FEFF 		bl	print
 1303              	.LVL143:
 671:Src/main.c    **** 
 672:Src/main.c    ****         HAL_Delay(100);
 1304              		.loc 1 672 0 discriminator 1
 1305 0046 6420     		movs	r0, #100
 1306 0048 FFF7FEFF 		bl	HAL_Delay
 1307              	.LVL144:
 1308              	.LBE2:
 673:Src/main.c    ****     }
 1309              		.loc 1 673 0 discriminator 1
 1310 004c E7E7     		b	.L89
 1311              	.L92:
 1312 004e 00BF     		.align	2
 1313              	.L91:
 1314 0050 00000000 		.word	hadc1
 1315 0054 00000000 		.word	dma_buffer
 1316 0058 00000000 		.word	adc_values
 1317 005c 58000000 		.word	.LC8
 1318 0060 64000000 		.word	.LC9
 1319              		.cfi_endproc
 1320              	.LFE138:
 1322              		.section	.text.test_All,"ax",%progbits
 1323              		.align	2
 1324              		.global	test_All
 1325              		.thumb
 1326              		.thumb_func
 1328              	test_All:
 1329              	.LFB139:
 674:Src/main.c    **** }
 675:Src/main.c    **** 
 676:Src/main.c    **** /**
 677:Src/main.c    ****  * Test all PWM and ADC - Read PWM waves, input ADC voltages 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 37


 678:Src/main.c    ****  * and read values on OLED
 679:Src/main.c    ****  *      htim1 -> CH1, CH2, CH3, CH4
 680:Src/main.c    ****  *      htim3 -> CH1, CH2, CH3
 681:Src/main.c    ****  *      ADC   -> CH5, CH4
 682:Src/main.c    ****  */
 683:Src/main.c    **** void test_All()
 684:Src/main.c    **** {
 1330              		.loc 1 684 0
 1331              		.cfi_startproc
 1332              		@ Volatile: function does not return.
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335 0000 08B5     		push	{r3, lr}
 1336              	.LCFI26:
 1337              		.cfi_def_cfa_offset 8
 1338              		.cfi_offset 3, -8
 1339              		.cfi_offset 14, -4
 685:Src/main.c    ****     test_PWM_htim1();
 1340              		.loc 1 685 0
 1341 0002 FFF7FEFF 		bl	test_PWM_htim1
 1342              	.LVL145:
 686:Src/main.c    ****     test_PWM_htim3();
 1343              		.loc 1 686 0
 1344 0006 FFF7FEFF 		bl	test_PWM_htim3
 1345              	.LVL146:
 687:Src/main.c    ****     test_ADC();
 1346              		.loc 1 687 0
 1347 000a FFF7FEFF 		bl	test_ADC
 1348              	.LVL147:
 1349              		.cfi_endproc
 1350              	.LFE139:
 1352 000e 00BF     		.section	.text._Error_Handler,"ax",%progbits
 1353              		.align	2
 1354              		.global	_Error_Handler
 1355              		.thumb
 1356              		.thumb_func
 1358              	_Error_Handler:
 1359              	.LFB140:
 688:Src/main.c    **** }
 689:Src/main.c    **** // ******
 690:Src/main.c    **** // END TESTS
 691:Src/main.c    **** // ******
 692:Src/main.c    **** 
 693:Src/main.c    **** /* USER CODE END 4 */
 694:Src/main.c    **** 
 695:Src/main.c    **** /**
 696:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 697:Src/main.c    ****   * @param  file: The file name as string.
 698:Src/main.c    ****   * @param  line: The line in file as a number.
 699:Src/main.c    ****   * @retval None
 700:Src/main.c    ****   */
 701:Src/main.c    **** void _Error_Handler(char *file, int line)
 702:Src/main.c    **** {
 1360              		.loc 1 702 0
 1361              		.cfi_startproc
 1362              		@ Volatile: function does not return.
 1363              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 38


 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365              		@ link register save eliminated.
 1366              	.LVL148:
 1367              	.L96:
 703:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 704:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 705:Src/main.c    ****     while (1)
 706:Src/main.c    ****     {
 707:Src/main.c    ****     }
 1368              		.loc 1 707 0 discriminator 1
 1369 0000 FEE7     		b	.L96
 1370              		.cfi_endproc
 1371              	.LFE140:
 1373 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1374              		.align	2
 1375              		.global	SystemClock_Config
 1376              		.thumb
 1377              		.thumb_func
 1379              	SystemClock_Config:
 1380              	.LFB125:
 290:Src/main.c    **** 
 1381              		.loc 1 290 0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 80
 1384              		@ frame_needed = 0, uses_anonymous_args = 0
 1385 0000 00B5     		push	{lr}
 1386              	.LCFI27:
 1387              		.cfi_def_cfa_offset 4
 1388              		.cfi_offset 14, -4
 1389 0002 95B0     		sub	sp, sp, #84
 1390              	.LCFI28:
 1391              		.cfi_def_cfa_offset 88
 1392              	.LBB3:
 297:Src/main.c    **** 
 1393              		.loc 1 297 0
 1394 0004 0022     		movs	r2, #0
 1395 0006 0192     		str	r2, [sp, #4]
 1396 0008 2A4B     		ldr	r3, .L101
 1397 000a 196C     		ldr	r1, [r3, #64]
 1398 000c 41F08051 		orr	r1, r1, #268435456
 1399 0010 1964     		str	r1, [r3, #64]
 1400 0012 1B6C     		ldr	r3, [r3, #64]
 1401 0014 03F08053 		and	r3, r3, #268435456
 1402 0018 0193     		str	r3, [sp, #4]
 1403 001a 019B     		ldr	r3, [sp, #4]
 1404              	.LBE3:
 1405              	.LBB4:
 299:Src/main.c    **** 
 1406              		.loc 1 299 0
 1407 001c 0292     		str	r2, [sp, #8]
 1408 001e 2649     		ldr	r1, .L101+4
 1409 0020 0B68     		ldr	r3, [r1]
 1410 0022 23F44043 		bic	r3, r3, #49152
 1411 0026 43F40043 		orr	r3, r3, #32768
 1412 002a 0B60     		str	r3, [r1]
 1413 002c 0B68     		ldr	r3, [r1]
 1414 002e 03F44043 		and	r3, r3, #49152
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 39


 1415 0032 0293     		str	r3, [sp, #8]
 1416 0034 029B     		ldr	r3, [sp, #8]
 1417              	.LBE4:
 303:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1418              		.loc 1 303 0
 1419 0036 0223     		movs	r3, #2
 1420 0038 0893     		str	r3, [sp, #32]
 304:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 1421              		.loc 1 304 0
 1422 003a 0121     		movs	r1, #1
 1423 003c 0B91     		str	r1, [sp, #44]
 305:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1424              		.loc 1 305 0
 1425 003e 1021     		movs	r1, #16
 1426 0040 0C91     		str	r1, [sp, #48]
 306:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1427              		.loc 1 306 0
 1428 0042 0E93     		str	r3, [sp, #56]
 307:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 1429              		.loc 1 307 0
 1430 0044 0F92     		str	r2, [sp, #60]
 308:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 1431              		.loc 1 308 0
 1432 0046 0822     		movs	r2, #8
 1433 0048 1092     		str	r2, [sp, #64]
 309:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1434              		.loc 1 309 0
 1435 004a 4822     		movs	r2, #72
 1436 004c 1192     		str	r2, [sp, #68]
 310:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 1437              		.loc 1 310 0
 1438 004e 1293     		str	r3, [sp, #72]
 311:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1439              		.loc 1 311 0
 1440 0050 0423     		movs	r3, #4
 1441 0052 1393     		str	r3, [sp, #76]
 312:Src/main.c    ****     {
 1442              		.loc 1 312 0
 1443 0054 08A8     		add	r0, sp, #32
 1444 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1445              	.LVL149:
 1446 005a 20B1     		cbz	r0, .L98
 314:Src/main.c    ****     }
 1447              		.loc 1 314 0
 1448 005c 1748     		ldr	r0, .L101+8
 1449 005e 4FF49D71 		mov	r1, #314
 1450 0062 FFF7FEFF 		bl	_Error_Handler
 1451              	.LVL150:
 1452              	.L98:
 319:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1453              		.loc 1 319 0
 1454 0066 0F23     		movs	r3, #15
 1455 0068 0393     		str	r3, [sp, #12]
 320:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1456              		.loc 1 320 0
 1457 006a 0221     		movs	r1, #2
 1458 006c 0491     		str	r1, [sp, #16]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 40


 321:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1459              		.loc 1 321 0
 1460 006e 0023     		movs	r3, #0
 1461 0070 0593     		str	r3, [sp, #20]
 322:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1462              		.loc 1 322 0
 1463 0072 4FF48052 		mov	r2, #4096
 1464 0076 0692     		str	r2, [sp, #24]
 323:Src/main.c    **** 
 1465              		.loc 1 323 0
 1466 0078 0793     		str	r3, [sp, #28]
 325:Src/main.c    ****     {
 1467              		.loc 1 325 0
 1468 007a 03A8     		add	r0, sp, #12
 1469 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1470              	.LVL151:
 1471 0080 20B1     		cbz	r0, .L99
 327:Src/main.c    ****     }
 1472              		.loc 1 327 0
 1473 0082 0E48     		ldr	r0, .L101+8
 1474 0084 40F24711 		movw	r1, #327
 1475 0088 FFF7FEFF 		bl	_Error_Handler
 1476              	.LVL152:
 1477              	.L99:
 332:Src/main.c    **** 
 1478              		.loc 1 332 0
 1479 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1480              	.LVL153:
 1481 0090 0B4B     		ldr	r3, .L101+12
 1482 0092 A3FB0030 		umull	r3, r0, r3, r0
 1483 0096 8009     		lsrs	r0, r0, #6
 1484 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1485              	.LVL154:
 336:Src/main.c    **** 
 1486              		.loc 1 336 0
 1487 009c 0420     		movs	r0, #4
 1488 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1489              	.LVL155:
 339:Src/main.c    **** }
 1490              		.loc 1 339 0
 1491 00a2 4FF0FF30 		mov	r0, #-1
 1492 00a6 0021     		movs	r1, #0
 1493 00a8 0A46     		mov	r2, r1
 1494 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1495              	.LVL156:
 340:Src/main.c    **** 
 1496              		.loc 1 340 0
 1497 00ae 15B0     		add	sp, sp, #84
 1498              	.LCFI29:
 1499              		.cfi_def_cfa_offset 4
 1500              		@ sp needed
 1501 00b0 5DF804FB 		ldr	pc, [sp], #4
 1502              	.L102:
 1503              		.align	2
 1504              	.L101:
 1505 00b4 00380240 		.word	1073887232
 1506 00b8 00700040 		.word	1073770496
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 41


 1507 00bc 70000000 		.word	.LC10
 1508 00c0 D34D6210 		.word	274877907
 1509              		.cfi_endproc
 1510              	.LFE125:
 1512              		.section	.text.main,"ax",%progbits
 1513              		.align	2
 1514              		.global	main
 1515              		.thumb
 1516              		.thumb_func
 1518              	main:
 1519              	.LFB124:
 110:Src/main.c    ****     /* USER CODE BEGIN 1 */
 1520              		.loc 1 110 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 48
 1523              		@ frame_needed = 0, uses_anonymous_args = 0
 1524 0000 30B5     		push	{r4, r5, lr}
 1525              	.LCFI30:
 1526              		.cfi_def_cfa_offset 12
 1527              		.cfi_offset 4, -12
 1528              		.cfi_offset 5, -8
 1529              		.cfi_offset 14, -4
 1530 0002 8FB0     		sub	sp, sp, #60
 1531              	.LCFI31:
 1532              		.cfi_def_cfa_offset 72
 118:Src/main.c    **** 
 1533              		.loc 1 118 0
 1534 0004 FFF7FEFF 		bl	HAL_Init
 1535              	.LVL157:
 125:Src/main.c    **** 
 1536              		.loc 1 125 0
 1537 0008 FFF7FEFF 		bl	SystemClock_Config
 1538              	.LVL158:
 132:Src/main.c    ****     MX_DMA_Init();
 1539              		.loc 1 132 0
 1540 000c FFF7FEFF 		bl	MX_GPIO_Init
 1541              	.LVL159:
 133:Src/main.c    ****     MX_TIM3_Init();
 1542              		.loc 1 133 0
 1543 0010 FFF7FEFF 		bl	MX_DMA_Init
 1544              	.LVL160:
 134:Src/main.c    ****     MX_TIM1_Init();
 1545              		.loc 1 134 0
 1546 0014 FFF7FEFF 		bl	MX_TIM3_Init
 1547              	.LVL161:
 135:Src/main.c    ****     MX_TIM2_Init();
 1548              		.loc 1 135 0
 1549 0018 FFF7FEFF 		bl	MX_TIM1_Init
 1550              	.LVL162:
 136:Src/main.c    ****     MX_ADC1_Init();
 1551              		.loc 1 136 0
 1552 001c FFF7FEFF 		bl	MX_TIM2_Init
 1553              	.LVL163:
 137:Src/main.c    ****     MX_I2C1_Init();
 1554              		.loc 1 137 0
 1555 0020 FFF7FEFF 		bl	MX_ADC1_Init
 1556              	.LVL164:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 42


 138:Src/main.c    ****     MX_TIM4_Init();
 1557              		.loc 1 138 0
 1558 0024 FFF7FEFF 		bl	MX_I2C1_Init
 1559              	.LVL165:
 139:Src/main.c    ****     MX_TIM9_Init();
 1560              		.loc 1 139 0
 1561 0028 FFF7FEFF 		bl	MX_TIM4_Init
 1562              	.LVL166:
 140:Src/main.c    ****     MX_TIM5_Init();
 1563              		.loc 1 140 0
 1564 002c FFF7FEFF 		bl	MX_TIM9_Init
 1565              	.LVL167:
 141:Src/main.c    ****     /* USER CODE BEGIN 2 */
 1566              		.loc 1 141 0
 1567 0030 FFF7FEFF 		bl	MX_TIM5_Init
 1568              	.LVL168:
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1569              		.loc 1 158 0
 1570 0034 8848     		ldr	r0, .L119
 1571 0036 1821     		movs	r1, #24
 1572 0038 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1573              	.LVL169:
 159:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1574              		.loc 1 159 0
 1575 003c 8748     		ldr	r0, .L119+4
 1576 003e 1821     		movs	r1, #24
 1577 0040 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1578              	.LVL170:
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 1579              		.loc 1 160 0
 1580 0044 864C     		ldr	r4, .L119+8
 1581 0046 2046     		mov	r0, r4
 1582 0048 0021     		movs	r1, #0
 1583 004a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1584              	.LVL171:
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1585              		.loc 1 161 0
 1586 004e 2046     		mov	r0, r4
 1587 0050 0421     		movs	r1, #4
 1588 0052 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1589              	.LVL172:
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 1590              		.loc 1 162 0
 1591 0056 2046     		mov	r0, r4
 1592 0058 0821     		movs	r1, #8
 1593 005a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1594              	.LVL173:
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1595              		.loc 1 163 0
 1596 005e 2046     		mov	r0, r4
 1597 0060 0C21     		movs	r1, #12
 1598 0062 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1599              	.LVL174:
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1600              		.loc 1 164 0
 1601 0066 7F4C     		ldr	r4, .L119+12
 1602 0068 2046     		mov	r0, r4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 43


 1603 006a 0021     		movs	r1, #0
 1604 006c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1605              	.LVL175:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1606              		.loc 1 165 0
 1607 0070 2046     		mov	r0, r4
 1608 0072 0421     		movs	r1, #4
 1609 0074 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1610              	.LVL176:
 166:Src/main.c    **** 
 1611              		.loc 1 166 0
 1612 0078 2046     		mov	r0, r4
 1613 007a 0821     		movs	r1, #8
 1614 007c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1615              	.LVL177:
 169:Src/main.c    ****     print("Starting", 0);
 1616              		.loc 1 169 0
 1617 0080 FFF7FEFF 		bl	ssd1306_Init
 1618              	.LVL178:
 170:Src/main.c    ****     claw_init(&htim3);
 1619              		.loc 1 170 0
 1620 0084 7848     		ldr	r0, .L119+16
 1621 0086 0021     		movs	r1, #0
 1622 0088 FFF7FEFF 		bl	print
 1623              	.LVL179:
 171:Src/main.c    ****     ///basket_init(&htim3);
 1624              		.loc 1 171 0
 1625 008c 2046     		mov	r0, r4
 1626 008e FFF7FEFF 		bl	claw_init
 1627              	.LVL180:
 175:Src/main.c    **** 
 1628              		.loc 1 175 0
 1629 0092 0121     		movs	r1, #1
 1630 0094 0091     		str	r1, [sp]
 1631 0096 0191     		str	r1, [sp, #4]
 1632 0098 08A8     		add	r0, sp, #32
 1633 009a 0022     		movs	r2, #0
 1634 009c 1346     		mov	r3, r2
 1635 009e FFF7FEFF 		bl	pid_Init
 1636              	.LVL181:
 177:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1637              		.loc 1 177 0
 1638 00a2 0020     		movs	r0, #0
 1639 00a4 714B     		ldr	r3, .L119+20
 1640 00a6 1988     		ldrh	r1, [r3]
 1641 00a8 FFF7FEFF 		bl	set_motor_speed
 1642              	.LVL182:
 178:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 1643              		.loc 1 178 0
 1644 00ac 0820     		movs	r0, #8
 1645 00ae 704B     		ldr	r3, .L119+24
 1646 00b0 1988     		ldrh	r1, [r3]
 1647 00b2 FFF7FEFF 		bl	set_motor_speed
 1648              	.LVL183:
 179:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < 4000)
 1649              		.loc 1 179 0
 1650 00b6 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 44


 1651              	.LVL184:
 1652 00ba 0446     		mov	r4, r0
 1653              	.LVL185:
 180:Src/main.c    ****     {
 1654              		.loc 1 180 0
 1655 00bc 02E0     		b	.L104
 1656              	.LVL186:
 1657              	.L105:
 182:Src/main.c    ****     }
 1658              		.loc 1 182 0
 1659 00be 08A8     		add	r0, sp, #32
 1660 00c0 FFF7FEFF 		bl	drive_straight
 1661              	.LVL187:
 1662              	.L104:
 180:Src/main.c    ****     {
 1663              		.loc 1 180 0
 1664 00c4 FFF7FEFF 		bl	HAL_GetTick
 1665              	.LVL188:
 1666 00c8 001B     		subs	r0, r0, r4
 1667 00ca B0F57A6F 		cmp	r0, #4000
 1668 00ce F6D3     		bcc	.L105
 184:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1669              		.loc 1 184 0
 1670 00d0 0020     		movs	r0, #0
 1671 00d2 0146     		mov	r1, r0
 1672 00d4 FFF7FEFF 		bl	set_motor_speed
 1673              	.LVL189:
 185:Src/main.c    **** 
 1674              		.loc 1 185 0
 1675 00d8 0820     		movs	r0, #8
 1676 00da 0021     		movs	r1, #0
 1677 00dc FFF7FEFF 		bl	set_motor_speed
 1678              	.LVL190:
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 1679              		.loc 1 188 0
 1680 00e0 0620     		movs	r0, #6
 1681 00e2 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1682              	.LVL191:
 189:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1683              		.loc 1 189 0
 1684 00e6 0A20     		movs	r0, #10
 1685 00e8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1686              	.LVL192:
 190:Src/main.c    ****     /* USER CODE END 2 */
 1687              		.loc 1 190 0
 1688 00ec 6148     		ldr	r0, .L119+28
 1689 00ee 6249     		ldr	r1, .L119+32
 1690 00f0 4FF40062 		mov	r2, #2048
 1691 00f4 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1692              	.LVL193:
 174:Src/main.c    ****     PID_t enc_pid = pid_Init(1, 0, 0, 1, 1);
 1693              		.loc 1 174 0
 1694 00f8 0025     		movs	r5, #0
 1695              	.LVL194:
 1696              	.L106:
 201:Src/main.c    ****         {
 1697              		.loc 1 201 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 45


 1698 00fa 604B     		ldr	r3, .L119+36
 1699 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1700 00fe 012B     		cmp	r3, #1
 1701 0100 7ED1     		bne	.L107
 1702              	.LBB5:
 203:Src/main.c    ****             print("in pi int", 0);
 1703              		.loc 1 203 0
 1704 0102 5F48     		ldr	r0, .L119+40
 1705 0104 4021     		movs	r1, #64
 1706 0106 0022     		movs	r2, #0
 1707 0108 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1708              	.LVL195:
 204:Src/main.c    ****             turn();
 1709              		.loc 1 204 0
 1710 010c 5D48     		ldr	r0, .L119+44
 1711 010e 0021     		movs	r1, #0
 1712 0110 FFF7FEFF 		bl	print
 1713              	.LVL196:
 205:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1714              		.loc 1 205 0
 1715 0114 FFF7FEFF 		bl	turn
 1716              	.LVL197:
 206:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1717              		.loc 1 206 0
 1718 0118 0020     		movs	r0, #0
 1719 011a 544B     		ldr	r3, .L119+20
 1720 011c 1988     		ldrh	r1, [r3]
 1721 011e FFF7FEFF 		bl	set_motor_speed
 1722              	.LVL198:
 207:Src/main.c    ****             uint32_t start = HAL_GetTick();
 1723              		.loc 1 207 0
 1724 0122 0820     		movs	r0, #8
 1725 0124 524B     		ldr	r3, .L119+24
 1726 0126 1988     		ldrh	r1, [r3]
 1727 0128 FFF7FEFF 		bl	set_motor_speed
 1728              	.LVL199:
 208:Src/main.c    ****             HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 1729              		.loc 1 208 0
 1730 012c FFF7FEFF 		bl	HAL_GetTick
 1731              	.LVL200:
 1732 0130 0446     		mov	r4, r0
 1733              	.LVL201:
 209:Src/main.c    ****             while ((HAL_GetTick() - start) < 4000)
 1734              		.loc 1 209 0
 1735 0132 0A20     		movs	r0, #10
 1736              	.LVL202:
 1737 0134 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1738              	.LVL203:
 210:Src/main.c    ****             {
 1739              		.loc 1 210 0
 1740 0138 4BE0     		b	.L108
 1741              	.L113:
 212:Src/main.c    ****                 if (CLAW_INT_STATE == FLAGGED)
 1742              		.loc 1 212 0
 1743 013a 08A8     		add	r0, sp, #32
 1744 013c FFF7FEFF 		bl	drive_straight
 1745              	.LVL204:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 46


 213:Src/main.c    ****                 {
 1746              		.loc 1 213 0
 1747 0140 514B     		ldr	r3, .L119+48
 1748 0142 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1749 0144 012B     		cmp	r3, #1
 1750 0146 44D1     		bne	.L108
 1751              	.LBB6:
 215:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 1752              		.loc 1 215 0
 1753 0148 C820     		movs	r0, #200
 1754 014a FFF7FEFF 		bl	HAL_Delay
 1755              	.LVL205:
 216:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 1756              		.loc 1 216 0
 1757 014e 0020     		movs	r0, #0
 1758 0150 0146     		mov	r1, r0
 1759 0152 FFF7FEFF 		bl	set_motor_speed
 1760              	.LVL206:
 217:Src/main.c    ****                     close_claw(&htim3);
 1761              		.loc 1 217 0
 1762 0156 0820     		movs	r0, #8
 1763 0158 0021     		movs	r1, #0
 1764 015a FFF7FEFF 		bl	set_motor_speed
 1765              	.LVL207:
 218:Src/main.c    ****                     arm_up(&htim3);
 1766              		.loc 1 218 0
 1767 015e 414C     		ldr	r4, .L119+12
 1768              	.LVL208:
 1769 0160 2046     		mov	r0, r4
 1770 0162 FFF7FEFF 		bl	close_claw
 1771              	.LVL209:
 219:Src/main.c    ****                     HAL_NVIC_DisableIRQ(CLAW_INT_EXTI_IRQn);
 1772              		.loc 1 219 0
 1773 0166 2046     		mov	r0, r4
 1774 0168 FFF7FEFF 		bl	arm_up
 1775              	.LVL210:
 220:Src/main.c    ****                     CLAW_INT_STATE = NOT_FLAGGED;
 1776              		.loc 1 220 0
 1777 016c 0A20     		movs	r0, #10
 1778 016e FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1779              	.LVL211:
 221:Src/main.c    ****                     ++ewok_cnt;
 1780              		.loc 1 221 0
 1781 0172 0024     		movs	r4, #0
 1782 0174 444B     		ldr	r3, .L119+48
 1783 0176 1C70     		strb	r4, [r3]
 222:Src/main.c    ****                     char msg[18] = "";
 1784              		.loc 1 222 0
 1785 0178 0135     		adds	r5, r5, #1
 1786              	.LVL212:
 1787 017a EDB2     		uxtb	r5, r5
 1788              	.LVL213:
 223:Src/main.c    ****                     sprintf(msg, "wok_cnt: %d", ewok_cnt);
 1789              		.loc 1 223 0
 1790 017c 0394     		str	r4, [sp, #12]
 1791 017e 0494     		str	r4, [sp, #16]
 1792 0180 0594     		str	r4, [sp, #20]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 47


 1793 0182 0694     		str	r4, [sp, #24]
 1794 0184 ADF81C40 		strh	r4, [sp, #28]	@ movhi
 224:Src/main.c    ****                     print(msg, 0);
 1795              		.loc 1 224 0
 1796 0188 03A8     		add	r0, sp, #12
 1797 018a 4049     		ldr	r1, .L119+52
 1798 018c 2A46     		mov	r2, r5
 1799 018e FFF7FEFF 		bl	sprintf
 1800              	.LVL214:
 225:Src/main.c    ****                     if (ewok_cnt == 1)
 1801              		.loc 1 225 0
 1802 0192 03A8     		add	r0, sp, #12
 1803 0194 2146     		mov	r1, r4
 1804 0196 FFF7FEFF 		bl	print
 1805              	.LVL215:
 226:Src/main.c    ****                     {
 1806              		.loc 1 226 0
 1807 019a 012D     		cmp	r5, #1
 1808 019c 1FD1     		bne	.L112
 228:Src/main.c    ****                         open_claw(&htim3);
 1809              		.loc 1 228 0
 1810 019e 8820     		movs	r0, #136
 1811 01a0 FFF7FEFF 		bl	turn_deg
 1812              	.LVL216:
 229:Src/main.c    ****                         square_edge(&enc_pid);
 1813              		.loc 1 229 0
 1814 01a4 2F48     		ldr	r0, .L119+12
 1815 01a6 FFF7FEFF 		bl	open_claw
 1816              	.LVL217:
 230:Src/main.c    ****                         start = HAL_GetTick();
 1817              		.loc 1 230 0
 1818 01aa 08A8     		add	r0, sp, #32
 1819 01ac FFF7FEFF 		bl	square_edge
 1820              	.LVL218:
 231:Src/main.c    ****                         while ((HAL_GetTick() - start) < 2000)
 1821              		.loc 1 231 0
 1822 01b0 FFF7FEFF 		bl	HAL_GetTick
 1823              	.LVL219:
 1824 01b4 0446     		mov	r4, r0
 1825              	.LVL220:
 232:Src/main.c    ****                         {
 1826              		.loc 1 232 0
 1827 01b6 02E0     		b	.L110
 1828              	.LVL221:
 1829              	.L111:
 234:Src/main.c    ****                         }
 1830              		.loc 1 234 0
 1831 01b8 08A8     		add	r0, sp, #32
 1832 01ba FFF7FEFF 		bl	drive_straight
 1833              	.LVL222:
 1834              	.L110:
 232:Src/main.c    ****                         {
 1835              		.loc 1 232 0
 1836 01be FFF7FEFF 		bl	HAL_GetTick
 1837              	.LVL223:
 1838 01c2 001B     		subs	r0, r0, r4
 1839 01c4 B0F5FA6F 		cmp	r0, #2000
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 48


 1840 01c8 F6D3     		bcc	.L111
 236:Src/main.c    ****                     }
 1841              		.loc 1 236 0
 1842 01ca 2648     		ldr	r0, .L119+12
 1843 01cc FFF7FEFF 		bl	arm_down
 1844              	.LVL224:
 1845 01d0 05E0     		b	.L112
 1846              	.L108:
 1847              	.LBE6:
 210:Src/main.c    ****             {
 1848              		.loc 1 210 0
 1849 01d2 FFF7FEFF 		bl	HAL_GetTick
 1850              	.LVL225:
 1851 01d6 001B     		subs	r0, r0, r4
 1852 01d8 B0F57A6F 		cmp	r0, #4000
 1853 01dc ADD3     		bcc	.L113
 1854              	.LVL226:
 1855              	.L112:
 243:Src/main.c    ****             HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_SET);
 1856              		.loc 1 243 0
 1857 01de 0024     		movs	r4, #0
 1858 01e0 264B     		ldr	r3, .L119+36
 1859 01e2 1C70     		strb	r4, [r3]
 244:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 1860              		.loc 1 244 0
 1861 01e4 2648     		ldr	r0, .L119+40
 1862 01e6 4021     		movs	r1, #64
 1863 01e8 0122     		movs	r2, #1
 1864 01ea FFF7FEFF 		bl	HAL_GPIO_WritePin
 1865              	.LVL227:
 245:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 1866              		.loc 1 245 0
 1867 01ee 2046     		mov	r0, r4
 1868 01f0 2146     		mov	r1, r4
 1869 01f2 FFF7FEFF 		bl	set_motor_speed
 1870              	.LVL228:
 246:Src/main.c    ****         }
 1871              		.loc 1 246 0
 1872 01f6 0820     		movs	r0, #8
 1873 01f8 2146     		mov	r1, r4
 1874 01fa FFF7FEFF 		bl	set_motor_speed
 1875              	.LVL229:
 1876              	.LBE5:
 1877 01fe 7CE7     		b	.L106
 1878              	.L107:
 253:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1879              		.loc 1 253 0
 1880 0200 FFF7FEFF 		bl	HAL_GetTick
 1881              	.LVL230:
 1882 0204 0446     		mov	r4, r0
 1883              	.LVL231:
 254:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1884              		.loc 1 254 0
 1885 0206 0020     		movs	r0, #0
 1886              	.LVL232:
 1887 0208 184B     		ldr	r3, .L119+20
 1888 020a 1988     		ldrh	r1, [r3]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 49


 1889 020c FFF7FEFF 		bl	set_motor_speed
 1890              	.LVL233:
 255:Src/main.c    ****             while ((HAL_GetTick() - temp_time) < 200)
 1891              		.loc 1 255 0
 1892 0210 0820     		movs	r0, #8
 1893 0212 174B     		ldr	r3, .L119+24
 1894 0214 1988     		ldrh	r1, [r3]
 1895 0216 FFF7FEFF 		bl	set_motor_speed
 1896              	.LVL234:
 256:Src/main.c    ****             {
 1897              		.loc 1 256 0
 1898 021a 02E0     		b	.L115
 1899              	.L116:
 258:Src/main.c    ****             }
 1900              		.loc 1 258 0
 1901 021c 08A8     		add	r0, sp, #32
 1902 021e FFF7FEFF 		bl	drive_straight
 1903              	.LVL235:
 1904              	.L115:
 256:Src/main.c    ****             {
 1905              		.loc 1 256 0
 1906 0222 FFF7FEFF 		bl	HAL_GetTick
 1907              	.LVL236:
 1908 0226 001B     		subs	r0, r0, r4
 1909 0228 C728     		cmp	r0, #199
 1910 022a F7D9     		bls	.L116
 260:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 1911              		.loc 1 260 0
 1912 022c 0020     		movs	r0, #0
 1913 022e 0146     		mov	r1, r0
 1914 0230 FFF7FEFF 		bl	set_motor_speed
 1915              	.LVL237:
 261:Src/main.c    **** 
 1916              		.loc 1 261 0
 1917 0234 0820     		movs	r0, #8
 1918 0236 0021     		movs	r1, #0
 1919 0238 FFF7FEFF 		bl	set_motor_speed
 1920              	.LVL238:
 263:Src/main.c    ****             while ((HAL_GetTick() - temp_time) < 200 && PI_INT_STATE == NOT_FLAGGED)
 1921              		.loc 1 263 0
 1922 023c FFF7FEFF 		bl	HAL_GetTick
 1923              	.LVL239:
 1924 0240 0446     		mov	r4, r0
 1925              	.LVL240:
 1926              	.L117:
 264:Src/main.c    ****                 ;
 1927              		.loc 1 264 0 discriminator 2
 1928 0242 FFF7FEFF 		bl	HAL_GetTick
 1929              	.LVL241:
 1930 0246 001B     		subs	r0, r0, r4
 1931 0248 C728     		cmp	r0, #199
 1932 024a 3FF656AF 		bhi	.L106
 264:Src/main.c    ****                 ;
 1933              		.loc 1 264 0 is_stmt 0 discriminator 1
 1934 024e 0B4B     		ldr	r3, .L119+36
 1935 0250 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1936 0252 002B     		cmp	r3, #0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 50


 1937 0254 F5D0     		beq	.L117
 1938 0256 50E7     		b	.L106
 1939              	.L120:
 1940              		.align	2
 1941              	.L119:
 1942 0258 00000000 		.word	htim4
 1943 025c 00000000 		.word	htim5
 1944 0260 00000000 		.word	htim1
 1945 0264 00000000 		.word	htim3
 1946 0268 00000000 		.word	.LC0
 1947 026c 00000000 		.word	.LANCHOR1
 1948 0270 00000000 		.word	.LANCHOR0
 1949 0274 00000000 		.word	hadc1
 1950 0278 00000000 		.word	dma_buffer
 1951 027c 00000000 		.word	PI_INT_STATE
 1952 0280 00080240 		.word	1073874944
 1953 0284 7C000000 		.word	.LC11
 1954 0288 00000000 		.word	CLAW_INT_STATE
 1955 028c 88000000 		.word	.LC12
 1956              		.cfi_endproc
 1957              	.LFE124:
 1959              		.comm	adc_values,8192,4
 1960              		.comm	dma_buffer,8192,4
 1961              		.global	RIGHT_SPEED
 1962              		.global	LEFT_SPEED
 1963              		.section	.data.RIGHT_SPEED,"aw",%progbits
 1964              		.align	1
 1965              		.set	.LANCHOR0,. + 0
 1968              	RIGHT_SPEED:
 1969 0000 5802     		.short	600
 1970              		.section	.data.LEFT_SPEED,"aw",%progbits
 1971              		.align	1
 1972              		.set	.LANCHOR1,. + 0
 1975              	LEFT_SPEED:
 1976 0000 5802     		.short	600
 1977              		.section	.rodata.str1.4,"aMS",%progbits,1
 1978              		.align	2
 1979              	.LC0:
 1980 0000 53746172 		.ascii	"Starting\000"
 1980      74696E67 
 1980      00
 1981 0009 000000   		.space	3
 1982              	.LC1:
 1983 000c 256C7500 		.ascii	"%lu\000"
 1984              	.LC2:
 1985 0010 636E7473 		.ascii	"cnts: %d\000"
 1985      3A202564 
 1985      00
 1986 0019 000000   		.space	3
 1987              	.LC3:
 1988 001c 766C7473 		.ascii	"vlts: %d.%d\000"
 1988      3A202564 
 1988      2E256400 
 1989              	.LC4:
 1990 0028 54494D35 		.ascii	"TIM5->CNT: %lu\000"
 1990      2D3E434E 
 1990      543A2025 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 51


 1990      6C7500
 1991 0037 00       		.space	1
 1992              	.LC5:
 1993 0038 54494D34 		.ascii	"TIM4->CNT: %lu\000"
 1993      2D3E434E 
 1993      543A2025 
 1993      6C7500
 1994 0047 00       		.space	1
 1995              	.LC6:
 1996 0048 4C533A20 		.ascii	"LS: %lu\000"
 1996      256C7500 
 1997              	.LC7:
 1998 0050 52533A20 		.ascii	"RS: %lu\000"
 1998      256C7500 
 1999              	.LC8:
 2000 0058 63685F35 		.ascii	"ch_5: %d\000"
 2000      3A202564 
 2000      00
 2001 0061 000000   		.space	3
 2002              	.LC9:
 2003 0064 63685F34 		.ascii	"ch_4: %d\000"
 2003      3A202564 
 2003      00
 2004 006d 000000   		.space	3
 2005              	.LC10:
 2006 0070 5372632F 		.ascii	"Src/main.c\000"
 2006      6D61696E 
 2006      2E6300
 2007 007b 00       		.space	1
 2008              	.LC11:
 2009 007c 696E2070 		.ascii	"in pi int\000"
 2009      6920696E 
 2009      7400
 2010 0086 0000     		.space	2
 2011              	.LC12:
 2012 0088 776F6B5F 		.ascii	"wok_cnt: %d\000"
 2012      636E743A 
 2012      20256400 
 2013              		.text
 2014              	.Letext0:
 2015              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2016              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2017              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2018              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2019              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2020              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2021              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2022              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2023              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2024              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2025              		.file 12 "Inc/fonts.h"
 2026              		.file 13 "Inc/ssd1306.h"
 2027              		.file 14 "Inc/pid.h"
 2028              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 2029              		.file 16 "Inc/adc.h"
 2030              		.file 17 "Inc/tim.h"
 2031              		.file 18 "Inc/extern_vars.h"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 52


 2032              		.file 19 "Inc/filter.h"
 2033              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2034              		.file 21 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2035              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2036              		.file 23 "Inc/claw.h"
 2037              		.file 24 "Inc/gpio.h"
 2038              		.file 25 "Inc/dma.h"
 2039              		.file 26 "Inc/i2c.h"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 53


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:104    .text.alarm_detect:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:109    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:183    .text.alarm_detect:0000000000000078 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:192    .text.print:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:197    .text.print:0000000000000000 print
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:244    .text.print:0000000000000034 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:249    .text.menu:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:254    .text.menu:0000000000000000 menu
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:367    .text.menu:000000000000009c $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:374    .text.set_motor_speed:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:379    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:445    .text.set_motor_speed:000000000000004c $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:452    .text.turn:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:457    .text.turn:0000000000000000 turn
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:703    .text.turn:0000000000000178 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:726    .text.turn_deg:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:731    .text.turn_deg:0000000000000000 turn_deg
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:857    .text.turn_deg:00000000000000b0 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:869    .text.encoder_pid:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:874    .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1001   .text.encoder_pid:00000000000000a0 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1010   .text.drive_straight:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1015   .text.drive_straight:0000000000000000 drive_straight
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1039   .text.square_edge:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1044   .text.square_edge:0000000000000000 square_edge
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1107   .text.square_edge:0000000000000044 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1113   .text.test_PWM_htim1:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1118   .text.test_PWM_htim1:0000000000000000 test_PWM_htim1
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1169   .text.test_PWM_htim1:0000000000000034 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1174   .text.test_PWM_htim3:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1179   .text.test_PWM_htim3:0000000000000000 test_PWM_htim3
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1237   .text.test_PWM_htim3:0000000000000040 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1242   .text.test_ADC:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1247   .text.test_ADC:0000000000000000 test_ADC
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1314   .text.test_ADC:0000000000000050 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1323   .text.test_All:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1328   .text.test_All:0000000000000000 test_All
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1353   .text._Error_Handler:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1358   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1374   .text.SystemClock_Config:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1379   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1505   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1513   .text.main:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1518   .text.main:0000000000000000 main
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1942   .text.main:0000000000000258 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1968   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1975   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 54


/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1964   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1971   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s:1978   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
HAL_GPIO_ReadPin
sprintf
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dadd
pid_GetGain
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
HAL_TIM_PWM_Start
htim3
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccugAt4r.s 			page 55


HAL_GetTick
HAL_NVIC_EnableIRQ
HAL_GPIO_WritePin
close_claw
arm_up
HAL_NVIC_DisableIRQ
open_claw
arm_down
htim4
htim5
PI_INT_STATE
CLAW_INT_STATE
