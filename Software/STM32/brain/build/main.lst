ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "filter.h"
  54:Src/main.c    **** #include "encoder.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** // #include <String.h>
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END Includes */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** uint8_t LEFT_SPEED;
  65:Src/main.c    **** uint8_t RIGHT_SPEED;
  66:Src/main.c    **** uint32_t adc_buffer[3072];
  67:Src/main.c    **** uint32_t read_value[3072];
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END PV */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  72:Src/main.c    **** void SystemClock_Config(void);
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE BEGIN PFP */
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void print(char msg[], int row);
  77:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]);
  78:Src/main.c    **** void do_pid(PID_t *pid_struct);
  79:Src/main.c    **** PID_t menu();
  80:Src/main.c    **** void frequency_detection(uint16_t freq1, uint16_t freq2);
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE END PFP */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE BEGIN 0 */
  85:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
  86:Src/main.c    **** {
  29              		.loc 1 86 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 3


  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  87:Src/main.c    ****   memcpy(read_value, adc_buffer, sizeof(adc_buffer));
  39              		.loc 1 87 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF44052 		mov	r2, #12288
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	read_value
  51 0014 00000000 		.word	adc_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.section	.text.print,"ax",%progbits
  56              		.align	2
  57              		.global	print
  58              		.thumb
  59              		.thumb_func
  61              	print:
  62              	.LFB126:
  88:Src/main.c    ****   // IR_INT_STATE = FLAGGED;
  89:Src/main.c    **** }
  90:Src/main.c    **** /* USER CODE END 0 */
  91:Src/main.c    **** 
  92:Src/main.c    **** /**
  93:Src/main.c    ****   * @brief  The application entry point.
  94:Src/main.c    ****   *
  95:Src/main.c    ****   * @retval None
  96:Src/main.c    ****   */
  97:Src/main.c    **** int main(void)
  98:Src/main.c    **** {
  99:Src/main.c    ****   /* USER CODE BEGIN 1 */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE END 1 */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 106:Src/main.c    ****   HAL_Init();
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE BEGIN Init */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE END Init */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* Configure the system clock */
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 4


 113:Src/main.c    ****   SystemClock_Config();
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* USER CODE END SysInit */
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* Initialize all configured peripherals */
 120:Src/main.c    ****   MX_GPIO_Init();
 121:Src/main.c    ****   MX_DMA_Init();
 122:Src/main.c    ****   MX_TIM3_Init();
 123:Src/main.c    ****   MX_TIM1_Init();
 124:Src/main.c    ****   MX_TIM2_Init();
 125:Src/main.c    ****   MX_USART6_UART_Init();
 126:Src/main.c    ****   MX_ADC1_Init();
 127:Src/main.c    ****   MX_I2C1_Init();
 128:Src/main.c    ****   MX_TIM4_Init();
 129:Src/main.c    ****   MX_TIM9_Init();
 130:Src/main.c    ****   MX_TIM5_Init();
 131:Src/main.c    ****   /* USER CODE BEGIN 2 */
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* Initialize all timer related stuffs*/
 134:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 135:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 136:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 137:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 138:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 139:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 140:Src/main.c    ****   HAL_TIM_Base_Start(&htim9);
 141:Src/main.c    ****   ssd1306_Init();
 142:Src/main.c    **** 
 143:Src/main.c    ****   /* Initialize other stuffs*/
 144:Src/main.c    ****   PID_t pid_s = menu();
 145:Src/main.c    ****   ENCODER_t LEFT_ENCODER = encoder_Init();
 146:Src/main.c    ****   // HAL_ADC_Start_DMA(&hadc1, adc_buffer, 3072);
 147:Src/main.c    **** 
 148:Src/main.c    ****   /* USER CODE END 2 */
 149:Src/main.c    **** 
 150:Src/main.c    ****   /* Infinite loop */
 151:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 152:Src/main.c    ****   while (1)
 153:Src/main.c    ****   {
 154:Src/main.c    ****     do_pid(&pid_s);
 155:Src/main.c    ****     // char msg[20] = "";
 156:Src/main.c    ****     // double val = goertzel(read_value, 24242, 1000, 3072, 1);
 157:Src/main.c    ****     // int predec = (int)(val / 1);
 158:Src/main.c    ****     // int postdec = (int)((val - predec) * 1000);
 159:Src/main.c    ****     // sprintf(msg, "%d.%d\n", predec, postdec);
 160:Src/main.c    ****     // HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 161:Src/main.c    **** 
 162:Src/main.c    ****   /* USER CODE END WHILE */
 163:Src/main.c    **** 
 164:Src/main.c    ****   /* USER CODE BEGIN 3 */
 165:Src/main.c    ****   }
 166:Src/main.c    ****   /* USER CODE END 3 */
 167:Src/main.c    **** 
 168:Src/main.c    **** }
 169:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 5


 170:Src/main.c    **** /**
 171:Src/main.c    ****   * @brief System Clock Configuration
 172:Src/main.c    ****   * @retval None
 173:Src/main.c    ****   */
 174:Src/main.c    **** void SystemClock_Config(void)
 175:Src/main.c    **** {
 176:Src/main.c    **** 
 177:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 178:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 179:Src/main.c    **** 
 180:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 181:Src/main.c    ****     */
 182:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 183:Src/main.c    **** 
 184:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 185:Src/main.c    **** 
 186:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 187:Src/main.c    ****     */
 188:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 189:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 190:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 191:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 197:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 198:Src/main.c    ****   {
 199:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 200:Src/main.c    ****   }
 201:Src/main.c    **** 
 202:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 203:Src/main.c    ****     */
 204:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 205:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 206:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 207:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 208:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 209:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 210:Src/main.c    **** 
 211:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 212:Src/main.c    ****   {
 213:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 214:Src/main.c    ****   }
 215:Src/main.c    **** 
 216:Src/main.c    ****     /**Configure the Systick interrupt time 
 217:Src/main.c    ****     */
 218:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 219:Src/main.c    **** 
 220:Src/main.c    ****     /**Configure the Systick 
 221:Src/main.c    ****     */
 222:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 223:Src/main.c    **** 
 224:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 225:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 226:Src/main.c    **** }
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 6


 227:Src/main.c    **** 
 228:Src/main.c    **** /* USER CODE BEGIN 4 */
 229:Src/main.c    **** 
 230:Src/main.c    **** // void frequency_detection(uint16_t freq1, uint16_t freq2)
 231:Src/main.c    **** // {
 232:Src/main.c    **** //   // HAL_ADC_Start_DMA(&hadc1, adc_buffer, 3072);
 233:Src/main.c    **** //   // HAL_ADC_Stop_DMA(&hadc1);
 234:Src/main.c    **** //   // IR_INT_STATE = NOT_FLAGGED;
 235:Src/main.c    **** //   // HAL_Delay(3 * (14 + 10));
 236:Src/main.c    **** //   // HAL_ADC_Stop_DMA(&hadc1);
 237:Src/main.c    **** //   char msg[20] = "";
 238:Src/main.c    **** //   double val = goertzel(read_value, 12121, freq1, 3072, 0);
 239:Src/main.c    **** //   int predec = (int)(val / 1);
 240:Src/main.c    **** //   int postdec = (int)((val - predec) * 1000);
 241:Src/main.c    **** //   sprintf(msg, "%d.%d", predec, postdec);
 242:Src/main.c    **** //   print(msg, 0);
 243:Src/main.c    **** 
 244:Src/main.c    **** //   // val = goertzel(read_value, 24242, freq2, 3072);
 245:Src/main.c    **** //   // predec = (int)(val / 1);
 246:Src/main.c    **** //   // postdec = (int)((val - predec) * 1000);
 247:Src/main.c    **** //   // sprintf(msg, "%d.%d", predec, postdec);
 248:Src/main.c    **** //   // print(msg, 1);
 249:Src/main.c    **** //   // HAL_ADC_Start_DMA(&hadc1, adc_buffer, 3072);
 250:Src/main.c    **** // }
 251:Src/main.c    **** 
 252:Src/main.c    **** /*
 253:Src/main.c    ****  * Rows from 0 - 6
 254:Src/main.c    ****  * Reset screen when printing from row 0
 255:Src/main.c    ****  */
 256:Src/main.c    **** void print(char *msg, int row)
 257:Src/main.c    **** {
  63              		.loc 1 257 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              	.LVL3:
  68 0000 38B5     		push	{r3, r4, r5, lr}
  69              	.LCFI1:
  70              		.cfi_def_cfa_offset 16
  71              		.cfi_offset 3, -16
  72              		.cfi_offset 4, -12
  73              		.cfi_offset 5, -8
  74              		.cfi_offset 14, -4
  75 0002 0546     		mov	r5, r0
 258:Src/main.c    ****   if (row == 0)
  76              		.loc 1 258 0
  77 0004 0C46     		mov	r4, r1
  78 0006 11B9     		cbnz	r1, .L6
 259:Src/main.c    ****   {
 260:Src/main.c    ****     ssd1306_Fill(Black);
  79              		.loc 1 260 0
  80 0008 0020     		movs	r0, #0
  81              	.LVL4:
  82 000a FFF7FEFF 		bl	ssd1306_Fill
  83              	.LVL5:
  84              	.L6:
 261:Src/main.c    ****   }
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 7


 262:Src/main.c    ****   ssd1306_SetCursor(0, row * 10);
  85              		.loc 1 262 0
  86 000e 04EB8404 		add	r4, r4, r4, lsl #2
  87              	.LVL6:
  88 0012 6100     		lsls	r1, r4, #1
  89 0014 0020     		movs	r0, #0
  90 0016 01F0FE01 		and	r1, r1, #254
  91 001a FFF7FEFF 		bl	ssd1306_SetCursor
  92              	.LVL7:
 263:Src/main.c    ****   ssd1306_WriteString(msg, Font_7x10, White);
  93              		.loc 1 263 0
  94 001e 054B     		ldr	r3, .L8
  95 0020 2846     		mov	r0, r5
  96 0022 93E80600 		ldmia	r3, {r1, r2}
  97 0026 0123     		movs	r3, #1
  98 0028 FFF7FEFF 		bl	ssd1306_WriteString
  99              	.LVL8:
 264:Src/main.c    ****   ssd1306_UpdateScreen();
 100              		.loc 1 264 0
 101 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 102              	.LVL9:
 103 0030 38BD     		pop	{r3, r4, r5, pc}
 104              	.LVL10:
 105              	.L9:
 106 0032 00BF     		.align	2
 107              	.L8:
 108 0034 00000000 		.word	Font_7x10
 109              		.cfi_endproc
 110              	.LFE126:
 112              		.section	.text.menu,"ax",%progbits
 113              		.align	2
 114              		.global	menu
 115              		.thumb
 116              		.thumb_func
 118              	menu:
 119              	.LFB127:
 265:Src/main.c    **** }
 266:Src/main.c    **** 
 267:Src/main.c    **** PID_t menu()
 268:Src/main.c    **** {
 120              		.loc 1 268 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 32
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              	.LVL11:
 125 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 24
 128              		.cfi_offset 4, -24
 129              		.cfi_offset 5, -20
 130              		.cfi_offset 6, -16
 131              		.cfi_offset 7, -12
 132              		.cfi_offset 8, -8
 133              		.cfi_offset 14, -4
 134 0004 8AB0     		sub	sp, sp, #40
 135              	.LCFI3:
 136              		.cfi_def_cfa_offset 64
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 8


 137 0006 0646     		mov	r6, r0
 269:Src/main.c    ****   print("Starting", 0);
 138              		.loc 1 269 0
 139 0008 6F48     		ldr	r0, .L24
 140              	.LVL12:
 141 000a 0021     		movs	r1, #0
 142 000c FFF7FEFF 		bl	print
 143              	.LVL13:
 270:Src/main.c    ****   char msg[20] = "";
 144              		.loc 1 270 0
 145 0010 0025     		movs	r5, #0
 146 0012 0595     		str	r5, [sp, #20]
 147 0014 0695     		str	r5, [sp, #24]
 148 0016 0795     		str	r5, [sp, #28]
 149 0018 0895     		str	r5, [sp, #32]
 150 001a 0995     		str	r5, [sp, #36]
 151              	.LVL14:
 271:Src/main.c    ****   int pid_select = 0;
 272:Src/main.c    ****   uint32_t values[3] = {0, 0, 0};
 152              		.loc 1 272 0
 153 001c 0295     		str	r5, [sp, #8]
 154 001e 0395     		str	r5, [sp, #12]
 155 0020 0495     		str	r5, [sp, #16]
 156              	.LVL15:
 157              	.L14:
 273:Src/main.c    ****   while (1)
 274:Src/main.c    ****   {
 275:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 158              		.loc 1 275 0
 159 0022 6A48     		ldr	r0, .L24+4
 160 0024 4FF40051 		mov	r1, #8192
 161 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 162              	.LVL16:
 163 002c 38BB     		cbnz	r0, .L11
 276:Src/main.c    ****     {
 277:Src/main.c    ****       sprintf(msg, "%lu", values[pid_select]);
 164              		.loc 1 277 0
 165 002e 0AAB     		add	r3, sp, #40
 166 0030 03EB8503 		add	r3, r3, r5, lsl #2
 167 0034 53F8204C 		ldr	r4, [r3, #-32]
 168 0038 05A8     		add	r0, sp, #20
 169 003a 6549     		ldr	r1, .L24+8
 170 003c 2246     		mov	r2, r4
 171 003e FFF7FEFF 		bl	sprintf
 172              	.LVL17:
 278:Src/main.c    ****       print(msg, 0);
 173              		.loc 1 278 0
 174 0042 05A8     		add	r0, sp, #20
 175 0044 0021     		movs	r1, #0
 176 0046 FFF7FEFF 		bl	print
 177              	.LVL18:
 279:Src/main.c    ****       TIM4->CNT = values[pid_select];
 178              		.loc 1 279 0
 179 004a 624B     		ldr	r3, .L24+12
 180 004c 5C62     		str	r4, [r3, #36]
 280:Src/main.c    ****       while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 181              		.loc 1 280 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 9


 182 004e 0EE0     		b	.L12
 183              	.L13:
 281:Src/main.c    ****       {
 282:Src/main.c    ****         values[pid_select] = TIM4->CNT;
 184              		.loc 1 282 0
 185 0050 604B     		ldr	r3, .L24+12
 186 0052 5A6A     		ldr	r2, [r3, #36]
 187 0054 0AAB     		add	r3, sp, #40
 188 0056 03EB8503 		add	r3, r3, r5, lsl #2
 189 005a 43F8202C 		str	r2, [r3, #-32]
 283:Src/main.c    ****         sprintf(msg, "%lu", values[pid_select]);
 190              		.loc 1 283 0
 191 005e 05A8     		add	r0, sp, #20
 192 0060 5B49     		ldr	r1, .L24+8
 193 0062 FFF7FEFF 		bl	sprintf
 194              	.LVL19:
 284:Src/main.c    ****         print(msg, 0);
 195              		.loc 1 284 0
 196 0066 05A8     		add	r0, sp, #20
 197 0068 0021     		movs	r1, #0
 198 006a FFF7FEFF 		bl	print
 199              	.LVL20:
 200              	.L12:
 280:Src/main.c    ****       {
 201              		.loc 1 280 0
 202 006e 5748     		ldr	r0, .L24+4
 203 0070 4FF40051 		mov	r1, #8192
 204 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 205              	.LVL21:
 206 0078 0028     		cmp	r0, #0
 207 007a E9D0     		beq	.L13
 285:Src/main.c    ****       }
 286:Src/main.c    ****       ++pid_select;
 208              		.loc 1 286 0
 209 007c 0135     		adds	r5, r5, #1
 210              	.LVL22:
 211              	.L11:
 287:Src/main.c    ****     }
 288:Src/main.c    ****     if (pid_select == 3)
 212              		.loc 1 288 0
 213 007e 032D     		cmp	r5, #3
 214 0080 CFD1     		bne	.L14
 215              	.L22:
 216              	.LVL23:
 217              	.LBB2:
 289:Src/main.c    ****       break;
 290:Src/main.c    ****   }
 291:Src/main.c    ****   while (1)
 292:Src/main.c    ****   {
 293:Src/main.c    ****     int speed = 400;
 294:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 218              		.loc 1 294 0
 219 0082 5248     		ldr	r0, .L24+4
 220 0084 4FF40051 		mov	r1, #8192
 221 0088 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 222              	.LVL24:
 223 008c 0028     		cmp	r0, #0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 10


 224 008e 43D1     		bne	.L15
 295:Src/main.c    ****     {
 296:Src/main.c    ****       if (pid_select == 3)
 225              		.loc 1 296 0
 226 0090 032D     		cmp	r5, #3
 227 0092 09D1     		bne	.L16
 297:Src/main.c    ****       {
 298:Src/main.c    ****         HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 228              		.loc 1 298 0
 229 0094 504C     		ldr	r4, .L24+16
 230 0096 2046     		mov	r0, r4
 231 0098 0021     		movs	r1, #0
 232 009a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 233              	.LVL25:
 299:Src/main.c    ****         HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 234              		.loc 1 299 0
 235 009e 2046     		mov	r0, r4
 236 00a0 0821     		movs	r1, #8
 237 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 238              	.LVL26:
 239 00a6 08E0     		b	.L17
 240              	.L16:
 300:Src/main.c    ****       }
 301:Src/main.c    ****       else
 302:Src/main.c    ****       {
 303:Src/main.c    ****         HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 241              		.loc 1 303 0
 242 00a8 4B4C     		ldr	r4, .L24+16
 243 00aa 2046     		mov	r0, r4
 244 00ac 0021     		movs	r1, #0
 245 00ae FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 246              	.LVL27:
 304:Src/main.c    ****         HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 247              		.loc 1 304 0
 248 00b2 2046     		mov	r0, r4
 249 00b4 0821     		movs	r1, #8
 250 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 251              	.LVL28:
 252              	.L17:
 305:Src/main.c    ****       }
 306:Src/main.c    ****       sprintf(msg, "%d", speed);
 253              		.loc 1 306 0
 254 00ba 05A8     		add	r0, sp, #20
 255 00bc 4749     		ldr	r1, .L24+20
 256 00be 4FF4C872 		mov	r2, #400
 257 00c2 FFF7FEFF 		bl	sprintf
 258              	.LVL29:
 307:Src/main.c    ****       print(msg, 0);
 259              		.loc 1 307 0
 260 00c6 05A8     		add	r0, sp, #20
 261 00c8 0021     		movs	r1, #0
 262 00ca FFF7FEFF 		bl	print
 263              	.LVL30:
 308:Src/main.c    ****       TIM4->CNT = speed;
 264              		.loc 1 308 0
 265 00ce 4FF4C872 		mov	r2, #400
 266 00d2 404B     		ldr	r3, .L24+12
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 11


 267 00d4 5A62     		str	r2, [r3, #36]
 309:Src/main.c    ****       while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 268              		.loc 1 309 0
 269 00d6 17E0     		b	.L18
 270              	.LVL31:
 271              	.L21:
 310:Src/main.c    ****       {
 311:Src/main.c    ****         speed = TIM4->CNT;
 272              		.loc 1 311 0
 273 00d8 3E4B     		ldr	r3, .L24+12
 274 00da 5C6A     		ldr	r4, [r3, #36]
 275              	.LVL32:
 312:Src/main.c    ****         sprintf(msg, "%d", speed);
 276              		.loc 1 312 0
 277 00dc 05A8     		add	r0, sp, #20
 278 00de 3F49     		ldr	r1, .L24+20
 279 00e0 2246     		mov	r2, r4
 280 00e2 FFF7FEFF 		bl	sprintf
 281              	.LVL33:
 313:Src/main.c    ****         print(msg, 0);
 282              		.loc 1 313 0
 283 00e6 05A8     		add	r0, sp, #20
 284 00e8 0021     		movs	r1, #0
 285 00ea FFF7FEFF 		bl	print
 286              	.LVL34:
 314:Src/main.c    ****         if (pid_select == 3)
 287              		.loc 1 314 0
 288 00ee 032D     		cmp	r5, #3
 289 00f0 05D1     		bne	.L19
 315:Src/main.c    ****         {
 316:Src/main.c    ****           __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 290              		.loc 1 316 0
 291 00f2 394B     		ldr	r3, .L24+16
 292 00f4 1B68     		ldr	r3, [r3]
 293 00f6 5C63     		str	r4, [r3, #52]
 317:Src/main.c    ****           LEFT_SPEED = speed;
 294              		.loc 1 317 0
 295 00f8 394B     		ldr	r3, .L24+24
 296 00fa 1C70     		strb	r4, [r3]
 297 00fc 04E0     		b	.L18
 298              	.L19:
 318:Src/main.c    ****         }
 319:Src/main.c    ****         else
 320:Src/main.c    ****         {
 321:Src/main.c    ****           __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 299              		.loc 1 321 0
 300 00fe 364B     		ldr	r3, .L24+16
 301 0100 1B68     		ldr	r3, [r3]
 302 0102 DC63     		str	r4, [r3, #60]
 322:Src/main.c    ****           RIGHT_SPEED = speed;
 303              		.loc 1 322 0
 304 0104 374B     		ldr	r3, .L24+28
 305 0106 1C70     		strb	r4, [r3]
 306              	.LVL35:
 307              	.L18:
 309:Src/main.c    ****       {
 308              		.loc 1 309 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 12


 309 0108 3048     		ldr	r0, .L24+4
 310 010a 4FF40051 		mov	r1, #8192
 311 010e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 312              	.LVL36:
 313 0112 0028     		cmp	r0, #0
 314 0114 E0D0     		beq	.L21
 323:Src/main.c    ****         }
 324:Src/main.c    ****       }
 325:Src/main.c    ****       ++pid_select;
 315              		.loc 1 325 0
 316 0116 0135     		adds	r5, r5, #1
 317              	.LVL37:
 318              	.L15:
 326:Src/main.c    ****     }
 327:Src/main.c    ****     if (pid_select == 5)
 319              		.loc 1 327 0
 320 0118 052D     		cmp	r5, #5
 321 011a B2D1     		bne	.L22
 322              	.LBE2:
 328:Src/main.c    ****     {
 329:Src/main.c    ****       break;
 330:Src/main.c    ****     }
 331:Src/main.c    ****   }
 332:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 323              		.loc 1 332 0
 324 011c 2E4C     		ldr	r4, .L24+16
 325 011e 2046     		mov	r0, r4
 326 0120 0021     		movs	r1, #0
 327 0122 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 328              	.LVL38:
 333:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 329              		.loc 1 333 0
 330 0126 2046     		mov	r0, r4
 331 0128 0821     		movs	r1, #8
 332 012a FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 333              	.LVL39:
 334:Src/main.c    ****   sprintf(msg, "P %lu", values[0]);
 334              		.loc 1 334 0
 335 012e DDF80880 		ldr	r8, [sp, #8]
 336 0132 05A8     		add	r0, sp, #20
 337 0134 2C49     		ldr	r1, .L24+32
 338 0136 4246     		mov	r2, r8
 339 0138 FFF7FEFF 		bl	sprintf
 340              	.LVL40:
 335:Src/main.c    ****   print(msg, 0);
 341              		.loc 1 335 0
 342 013c 05A8     		add	r0, sp, #20
 343 013e 0021     		movs	r1, #0
 344 0140 FFF7FEFF 		bl	print
 345              	.LVL41:
 336:Src/main.c    ****   sprintf(msg, "D %lu", values[1]);
 346              		.loc 1 336 0
 347 0144 039F     		ldr	r7, [sp, #12]
 348 0146 05A8     		add	r0, sp, #20
 349 0148 2849     		ldr	r1, .L24+36
 350 014a 3A46     		mov	r2, r7
 351 014c FFF7FEFF 		bl	sprintf
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 13


 352              	.LVL42:
 337:Src/main.c    ****   print(msg, 1);
 353              		.loc 1 337 0
 354 0150 05A8     		add	r0, sp, #20
 355 0152 0121     		movs	r1, #1
 356 0154 FFF7FEFF 		bl	print
 357              	.LVL43:
 338:Src/main.c    ****   sprintf(msg, "I %lu", values[2]);
 358              		.loc 1 338 0
 359 0158 049D     		ldr	r5, [sp, #16]
 360              	.LVL44:
 361 015a 05A8     		add	r0, sp, #20
 362 015c 2449     		ldr	r1, .L24+40
 363 015e 2A46     		mov	r2, r5
 364 0160 FFF7FEFF 		bl	sprintf
 365              	.LVL45:
 339:Src/main.c    ****   print(msg, 2);
 366              		.loc 1 339 0
 367 0164 05A8     		add	r0, sp, #20
 368 0166 0221     		movs	r1, #2
 369 0168 FFF7FEFF 		bl	print
 370              	.LVL46:
 340:Src/main.c    ****   sprintf(msg, "L %u", LEFT_SPEED);
 371              		.loc 1 340 0
 372 016c 05A8     		add	r0, sp, #20
 373 016e 2149     		ldr	r1, .L24+44
 374 0170 1B4B     		ldr	r3, .L24+24
 375 0172 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 376 0174 FFF7FEFF 		bl	sprintf
 377              	.LVL47:
 341:Src/main.c    ****   print(msg, 3);
 378              		.loc 1 341 0
 379 0178 05A8     		add	r0, sp, #20
 380 017a 0321     		movs	r1, #3
 381 017c FFF7FEFF 		bl	print
 382              	.LVL48:
 342:Src/main.c    ****   sprintf(msg, "R %u", RIGHT_SPEED);
 383              		.loc 1 342 0
 384 0180 05A8     		add	r0, sp, #20
 385 0182 1D49     		ldr	r1, .L24+48
 386 0184 174B     		ldr	r3, .L24+28
 387 0186 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 388 0188 FFF7FEFF 		bl	sprintf
 389              	.LVL49:
 343:Src/main.c    ****   print(msg, 4);
 390              		.loc 1 343 0
 391 018c 05A8     		add	r0, sp, #20
 392 018e 0421     		movs	r1, #4
 393 0190 FFF7FEFF 		bl	print
 394              	.LVL50:
 344:Src/main.c    ****   HAL_Delay(500);
 395              		.loc 1 344 0
 396 0194 4FF4FA70 		mov	r0, #500
 397 0198 FFF7FEFF 		bl	HAL_Delay
 398              	.LVL51:
 345:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 399              		.loc 1 345 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 14


 400 019c 2046     		mov	r0, r4
 401 019e 0021     		movs	r1, #0
 402 01a0 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 403              	.LVL52:
 346:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 404              		.loc 1 346 0
 405 01a4 2046     		mov	r0, r4
 406 01a6 0821     		movs	r1, #8
 407 01a8 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 408              	.LVL53:
 347:Src/main.c    ****   return pid_Init(values[0], values[1], values[2], 5, 1);
 409              		.loc 1 347 0
 410 01ac 0523     		movs	r3, #5
 411 01ae 0093     		str	r3, [sp]
 412 01b0 0123     		movs	r3, #1
 413 01b2 0193     		str	r3, [sp, #4]
 414 01b4 3046     		mov	r0, r6
 415 01b6 4146     		mov	r1, r8
 416 01b8 3A46     		mov	r2, r7
 417 01ba 2B46     		mov	r3, r5
 418 01bc FFF7FEFF 		bl	pid_Init
 419              	.LVL54:
 348:Src/main.c    **** }
 420              		.loc 1 348 0
 421 01c0 3046     		mov	r0, r6
 422 01c2 0AB0     		add	sp, sp, #40
 423              	.LCFI4:
 424              		.cfi_def_cfa_offset 24
 425              		@ sp needed
 426 01c4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 427              	.LVL55:
 428              	.L25:
 429              		.align	2
 430              	.L24:
 431 01c8 00000000 		.word	.LC0
 432 01cc 00080240 		.word	1073874944
 433 01d0 0C000000 		.word	.LC1
 434 01d4 00080040 		.word	1073743872
 435 01d8 00000000 		.word	htim1
 436 01dc 10000000 		.word	.LC2
 437 01e0 00000000 		.word	LEFT_SPEED
 438 01e4 00000000 		.word	RIGHT_SPEED
 439 01e8 14000000 		.word	.LC3
 440 01ec 1C000000 		.word	.LC4
 441 01f0 24000000 		.word	.LC5
 442 01f4 2C000000 		.word	.LC6
 443 01f8 34000000 		.word	.LC7
 444              		.cfi_endproc
 445              	.LFE127:
 447              		.global	__aeabi_d2iz
 448              		.section	.text.do_pid,"ax",%progbits
 449              		.align	2
 450              		.global	do_pid
 451              		.thumb
 452              		.thumb_func
 454              	do_pid:
 455              	.LFB128:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 15


 349:Src/main.c    **** 
 350:Src/main.c    **** void do_pid(PID_t *pid_struct)
 351:Src/main.c    **** {
 456              		.loc 1 351 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 24
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              	.LVL56:
 461 0000 70B5     		push	{r4, r5, r6, lr}
 462              	.LCFI5:
 463              		.cfi_def_cfa_offset 16
 464              		.cfi_offset 4, -16
 465              		.cfi_offset 5, -12
 466              		.cfi_offset 6, -8
 467              		.cfi_offset 14, -4
 468 0002 86B0     		sub	sp, sp, #24
 469              	.LCFI6:
 470              		.cfi_def_cfa_offset 40
 471 0004 0646     		mov	r6, r0
 352:Src/main.c    ****   /* Read sensors */
 353:Src/main.c    ****   uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) ? 0 : 1;
 472              		.loc 1 353 0
 473 0006 2D4D     		ldr	r5, .L35
 474 0008 2846     		mov	r0, r5
 475              	.LVL57:
 476 000a 4FF48041 		mov	r1, #16384
 477 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 478              	.LVL58:
 479 0012 B0FA80F4 		clz	r4, r0
 480 0016 6409     		lsrs	r4, r4, #5
 481              	.LVL59:
 354:Src/main.c    ****   uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 482              		.loc 1 354 0
 483 0018 2846     		mov	r0, r5
 484 001a 4FF40041 		mov	r1, #32768
 485 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 486              	.LVL60:
 487 0022 B0FA80F0 		clz	r0, r0
 488 0026 4009     		lsrs	r0, r0, #5
 489              	.LVL61:
 355:Src/main.c    **** 
 356:Src/main.c    ****   /* Get error */
 357:Src/main.c    ****   if (left && right)
 490              		.loc 1 357 0
 491 0028 1CB1     		cbz	r4, .L27
 492              		.loc 1 357 0 is_stmt 0 discriminator 1
 493 002a 10B1     		cbz	r0, .L27
 358:Src/main.c    ****   {
 359:Src/main.c    ****     pid_struct->err = 0;
 494              		.loc 1 359 0 is_stmt 1
 495 002c 0023     		movs	r3, #0
 496 002e 3362     		str	r3, [r6, #32]
 497 0030 1AE0     		b	.L28
 498              	.L27:
 360:Src/main.c    ****   }
 361:Src/main.c    ****   else if (left && !right)
 499              		.loc 1 361 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 16


 500 0032 1CB1     		cbz	r4, .L29
 501              		.loc 1 361 0 is_stmt 0 discriminator 1
 502 0034 10B9     		cbnz	r0, .L29
 362:Src/main.c    ****   {
 363:Src/main.c    ****     pid_struct->err = 1;
 503              		.loc 1 363 0 is_stmt 1
 504 0036 0123     		movs	r3, #1
 505 0038 3362     		str	r3, [r6, #32]
 506 003a 15E0     		b	.L28
 507              	.L29:
 364:Src/main.c    ****   }
 365:Src/main.c    ****   else if (!left && right)
 508              		.loc 1 365 0
 509 003c 24B9     		cbnz	r4, .L30
 510              		.loc 1 365 0 is_stmt 0 discriminator 1
 511 003e 18B1     		cbz	r0, .L30
 366:Src/main.c    ****   {
 367:Src/main.c    ****     pid_struct->err = -1;
 512              		.loc 1 367 0 is_stmt 1
 513 0040 4FF0FF33 		mov	r3, #-1
 514 0044 3362     		str	r3, [r6, #32]
 515 0046 0FE0     		b	.L28
 516              	.L30:
 368:Src/main.c    ****   }
 369:Src/main.c    ****   else if (!left && !right && (pid_struct->err < 0))
 517              		.loc 1 369 0
 518 0048 3CB9     		cbnz	r4, .L31
 519              		.loc 1 369 0 is_stmt 0 discriminator 1
 520 004a 30B9     		cbnz	r0, .L31
 521              		.loc 1 369 0 discriminator 2
 522 004c 336A     		ldr	r3, [r6, #32]
 523 004e 002B     		cmp	r3, #0
 524 0050 03DA     		bge	.L31
 370:Src/main.c    ****   {
 371:Src/main.c    ****     pid_struct->err = -5;
 525              		.loc 1 371 0 is_stmt 1
 526 0052 6FF00403 		mvn	r3, #4
 527 0056 3362     		str	r3, [r6, #32]
 528 0058 06E0     		b	.L28
 529              	.L31:
 372:Src/main.c    ****   }
 373:Src/main.c    ****   else if (!left && !right && (pid_struct->err > 0))
 530              		.loc 1 373 0
 531 005a 2CB9     		cbnz	r4, .L28
 532              		.loc 1 373 0 is_stmt 0 discriminator 1
 533 005c 20B9     		cbnz	r0, .L28
 534              		.loc 1 373 0 discriminator 2
 535 005e 336A     		ldr	r3, [r6, #32]
 536 0060 002B     		cmp	r3, #0
 537 0062 01DD     		ble	.L28
 374:Src/main.c    ****   {
 375:Src/main.c    ****     pid_struct->err = 5;
 538              		.loc 1 375 0 is_stmt 1
 539 0064 0523     		movs	r3, #5
 540 0066 3362     		str	r3, [r6, #32]
 541              	.L28:
 376:Src/main.c    ****   }
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 17


 377:Src/main.c    **** 
 378:Src/main.c    ****   /* Get gain */
 379:Src/main.c    ****   double gain = pid_GetGain(pid_struct, &htim9);
 542              		.loc 1 379 0
 543 0068 3046     		mov	r0, r6
 544              	.LVL62:
 545 006a 1549     		ldr	r1, .L35+4
 546 006c FFF7FEFF 		bl	pid_GetGain
 547              	.LVL63:
 380:Src/main.c    ****   int g = (int)gain;
 548              		.loc 1 380 0
 549 0070 51EC100B 		fmrrd	r0, r1, d0
 550 0074 FFF7FEFF 		bl	__aeabi_d2iz
 551              	.LVL64:
 552 0078 0546     		mov	r5, r0
 553              	.LVL65:
 381:Src/main.c    ****   char msg[20]="";
 554              		.loc 1 381 0
 555 007a 0024     		movs	r4, #0
 556              	.LVL66:
 557 007c 0194     		str	r4, [sp, #4]
 558 007e 0294     		str	r4, [sp, #8]
 559 0080 0394     		str	r4, [sp, #12]
 560 0082 0494     		str	r4, [sp, #16]
 561 0084 0594     		str	r4, [sp, #20]
 382:Src/main.c    ****   sprintf(msg, "%d", g);
 562              		.loc 1 382 0
 563 0086 01A8     		add	r0, sp, #4
 564              	.LVL67:
 565 0088 0E49     		ldr	r1, .L35+8
 566 008a 2A46     		mov	r2, r5
 567 008c FFF7FEFF 		bl	sprintf
 568              	.LVL68:
 383:Src/main.c    ****   print(msg, 0);
 569              		.loc 1 383 0
 570 0090 01A8     		add	r0, sp, #4
 571 0092 2146     		mov	r1, r4
 572 0094 FFF7FEFF 		bl	print
 573              	.LVL69:
 384:Src/main.c    **** 
 385:Src/main.c    ****   /* Set Motor Speeds*/
 386:Src/main.c    ****   int lspeed = LEFT_SPEED;
 574              		.loc 1 386 0
 575 0098 0B4B     		ldr	r3, .L35+12
 576 009a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 577              	.LVL70:
 387:Src/main.c    ****   int rspeed = RIGHT_SPEED;
 578              		.loc 1 387 0
 579 009c 0B4B     		ldr	r3, .L35+16
 580 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 581              	.LVL71:
 388:Src/main.c    ****   if (g < 0)
 582              		.loc 1 388 0
 583 00a0 A542     		cmp	r5, r4
 584 00a2 01DA     		bge	.L32
 389:Src/main.c    ****   {
 390:Src/main.c    ****     lspeed = LEFT_SPEED - g;
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 18


 585              		.loc 1 390 0
 586 00a4 491B     		subs	r1, r1, r5
 587              	.LVL72:
 588 00a6 02E0     		b	.L33
 589              	.L32:
 391:Src/main.c    ****   }
 392:Src/main.c    ****   else if (g > 0)
 590              		.loc 1 392 0
 591 00a8 002D     		cmp	r5, #0
 592 00aa 00DD     		ble	.L33
 393:Src/main.c    ****   {
 394:Src/main.c    ****     rspeed = RIGHT_SPEED + g;
 593              		.loc 1 394 0
 594 00ac 2B44     		add	r3, r3, r5
 595              	.LVL73:
 596              	.L33:
 395:Src/main.c    ****   }
 396:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, lspeed);
 597              		.loc 1 396 0
 598 00ae 084A     		ldr	r2, .L35+20
 599 00b0 1268     		ldr	r2, [r2]
 600 00b2 5163     		str	r1, [r2, #52]
 397:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, rspeed);
 601              		.loc 1 397 0
 602 00b4 D363     		str	r3, [r2, #60]
 398:Src/main.c    **** }
 603              		.loc 1 398 0
 604 00b6 06B0     		add	sp, sp, #24
 605              	.LCFI7:
 606              		.cfi_def_cfa_offset 16
 607              		@ sp needed
 608 00b8 70BD     		pop	{r4, r5, r6, pc}
 609              	.LVL74:
 610              	.L36:
 611 00ba 00BF     		.align	2
 612              	.L35:
 613 00bc 00040240 		.word	1073873920
 614 00c0 00000000 		.word	htim9
 615 00c4 10000000 		.word	.LC2
 616 00c8 00000000 		.word	LEFT_SPEED
 617 00cc 00000000 		.word	RIGHT_SPEED
 618 00d0 00000000 		.word	htim1
 619              		.cfi_endproc
 620              	.LFE128:
 622              		.global	__aeabi_ui2d
 623              		.global	__aeabi_ddiv
 624              		.global	__aeabi_dmul
 625              		.global	__aeabi_d2uiz
 626              		.section	.text.update_motor_speed,"ax",%progbits
 627              		.align	2
 628              		.global	update_motor_speed
 629              		.thumb
 630              		.thumb_func
 632              	update_motor_speed:
 633              	.LFB129:
 399:Src/main.c    **** 
 400:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[])
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 19


 401:Src/main.c    **** {
 634              		.loc 1 401 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 24
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638              	.LVL75:
 639 0000 30B5     		push	{r4, r5, lr}
 640              	.LCFI8:
 641              		.cfi_def_cfa_offset 12
 642              		.cfi_offset 4, -12
 643              		.cfi_offset 5, -8
 644              		.cfi_offset 14, -4
 645 0002 87B0     		sub	sp, sp, #28
 646              	.LCFI9:
 647              		.cfi_def_cfa_offset 40
 648 0004 0D46     		mov	r5, r1
 402:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[0] / 100.0 * MOTOR_SPEED);
 649              		.loc 1 402 0
 650 0006 1C4B     		ldr	r3, .L39
 651 0008 1C68     		ldr	r4, [r3]
 652 000a 0868     		ldr	r0, [r1]
 653              	.LVL76:
 654 000c FFF7FEFF 		bl	__aeabi_ui2d
 655              	.LVL77:
 656 0010 0022     		movs	r2, #0
 657 0012 1A4B     		ldr	r3, .L39+4
 658 0014 FFF7FEFF 		bl	__aeabi_ddiv
 659              	.LVL78:
 660 0018 0022     		movs	r2, #0
 661 001a 194B     		ldr	r3, .L39+8
 662 001c FFF7FEFF 		bl	__aeabi_dmul
 663              	.LVL79:
 664 0020 FFF7FEFF 		bl	__aeabi_d2uiz
 665              	.LVL80:
 666 0024 6063     		str	r0, [r4, #52]
 403:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[1] / 100.0 * MOTOR_SPEED);
 667              		.loc 1 403 0
 668 0026 6868     		ldr	r0, [r5, #4]
 669 0028 FFF7FEFF 		bl	__aeabi_ui2d
 670              	.LVL81:
 671 002c 0022     		movs	r2, #0
 672 002e 134B     		ldr	r3, .L39+4
 673 0030 FFF7FEFF 		bl	__aeabi_ddiv
 674              	.LVL82:
 675 0034 0022     		movs	r2, #0
 676 0036 124B     		ldr	r3, .L39+8
 677 0038 FFF7FEFF 		bl	__aeabi_dmul
 678              	.LVL83:
 679 003c FFF7FEFF 		bl	__aeabi_d2uiz
 680              	.LVL84:
 681 0040 E063     		str	r0, [r4, #60]
 404:Src/main.c    ****   char msg[20] = "";
 682              		.loc 1 404 0
 683 0042 0024     		movs	r4, #0
 684 0044 0194     		str	r4, [sp, #4]
 685 0046 0294     		str	r4, [sp, #8]
 686 0048 0394     		str	r4, [sp, #12]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 20


 687 004a 0494     		str	r4, [sp, #16]
 688 004c 0594     		str	r4, [sp, #20]
 405:Src/main.c    ****   sprintf(msg, "L: %lu", speed[0]);
 689              		.loc 1 405 0
 690 004e 01A8     		add	r0, sp, #4
 691 0050 0C49     		ldr	r1, .L39+12
 692 0052 2A68     		ldr	r2, [r5]
 693 0054 FFF7FEFF 		bl	sprintf
 694              	.LVL85:
 406:Src/main.c    ****   print(msg, 0);
 695              		.loc 1 406 0
 696 0058 01A8     		add	r0, sp, #4
 697 005a 2146     		mov	r1, r4
 698 005c FFF7FEFF 		bl	print
 699              	.LVL86:
 407:Src/main.c    ****   sprintf(msg, "R: %lu", speed[1]);
 700              		.loc 1 407 0
 701 0060 01A8     		add	r0, sp, #4
 702 0062 0949     		ldr	r1, .L39+16
 703 0064 6A68     		ldr	r2, [r5, #4]
 704 0066 FFF7FEFF 		bl	sprintf
 705              	.LVL87:
 408:Src/main.c    ****   print(msg, 1);
 706              		.loc 1 408 0
 707 006a 01A8     		add	r0, sp, #4
 708 006c 0121     		movs	r1, #1
 709 006e FFF7FEFF 		bl	print
 710              	.LVL88:
 409:Src/main.c    **** }
 711              		.loc 1 409 0
 712 0072 07B0     		add	sp, sp, #28
 713              	.LCFI10:
 714              		.cfi_def_cfa_offset 12
 715              		@ sp needed
 716 0074 30BD     		pop	{r4, r5, pc}
 717              	.LVL89:
 718              	.L40:
 719 0076 00BF     		.align	2
 720              	.L39:
 721 0078 00000000 		.word	htim1
 722 007c 00005940 		.word	1079574528
 723 0080 00408F40 		.word	1083129856
 724 0084 3C000000 		.word	.LC8
 725 0088 44000000 		.word	.LC9
 726              		.cfi_endproc
 727              	.LFE129:
 729              		.section	.text._Error_Handler,"ax",%progbits
 730              		.align	2
 731              		.global	_Error_Handler
 732              		.thumb
 733              		.thumb_func
 735              	_Error_Handler:
 736              	.LFB130:
 410:Src/main.c    **** /* USER CODE END 4 */
 411:Src/main.c    **** 
 412:Src/main.c    **** /**
 413:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 21


 414:Src/main.c    ****   * @param  file: The file name as string.
 415:Src/main.c    ****   * @param  line: The line in file as a number.
 416:Src/main.c    ****   * @retval None
 417:Src/main.c    ****   */
 418:Src/main.c    **** void _Error_Handler(char *file, int line)
 419:Src/main.c    **** {
 737              		.loc 1 419 0
 738              		.cfi_startproc
 739              		@ Volatile: function does not return.
 740              		@ args = 0, pretend = 0, frame = 0
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              		@ link register save eliminated.
 743              	.LVL90:
 744              	.L42:
 420:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 421:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 422:Src/main.c    ****   while (1)
 423:Src/main.c    ****   {
 424:Src/main.c    ****   }
 745              		.loc 1 424 0 discriminator 1
 746 0000 FEE7     		b	.L42
 747              		.cfi_endproc
 748              	.LFE130:
 750 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 751              		.align	2
 752              		.global	SystemClock_Config
 753              		.thumb
 754              		.thumb_func
 756              	SystemClock_Config:
 757              	.LFB125:
 175:Src/main.c    **** 
 758              		.loc 1 175 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 80
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 762 0000 00B5     		push	{lr}
 763              	.LCFI11:
 764              		.cfi_def_cfa_offset 4
 765              		.cfi_offset 14, -4
 766 0002 95B0     		sub	sp, sp, #84
 767              	.LCFI12:
 768              		.cfi_def_cfa_offset 88
 769              	.LBB3:
 182:Src/main.c    **** 
 770              		.loc 1 182 0
 771 0004 0022     		movs	r2, #0
 772 0006 0192     		str	r2, [sp, #4]
 773 0008 294B     		ldr	r3, .L47
 774 000a 196C     		ldr	r1, [r3, #64]
 775 000c 41F08051 		orr	r1, r1, #268435456
 776 0010 1964     		str	r1, [r3, #64]
 777 0012 1B6C     		ldr	r3, [r3, #64]
 778 0014 03F08053 		and	r3, r3, #268435456
 779 0018 0193     		str	r3, [sp, #4]
 780 001a 019B     		ldr	r3, [sp, #4]
 781              	.LBE3:
 782              	.LBB4:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 22


 184:Src/main.c    **** 
 783              		.loc 1 184 0
 784 001c 0292     		str	r2, [sp, #8]
 785 001e 2549     		ldr	r1, .L47+4
 786 0020 0B68     		ldr	r3, [r1]
 787 0022 23F44043 		bic	r3, r3, #49152
 788 0026 43F40043 		orr	r3, r3, #32768
 789 002a 0B60     		str	r3, [r1]
 790 002c 0B68     		ldr	r3, [r1]
 791 002e 03F44043 		and	r3, r3, #49152
 792 0032 0293     		str	r3, [sp, #8]
 793 0034 029B     		ldr	r3, [sp, #8]
 794              	.LBE4:
 188:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 795              		.loc 1 188 0
 796 0036 0223     		movs	r3, #2
 797 0038 0893     		str	r3, [sp, #32]
 189:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 798              		.loc 1 189 0
 799 003a 0121     		movs	r1, #1
 800 003c 0B91     		str	r1, [sp, #44]
 190:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801              		.loc 1 190 0
 802 003e 1021     		movs	r1, #16
 803 0040 0C91     		str	r1, [sp, #48]
 191:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 804              		.loc 1 191 0
 805 0042 0E93     		str	r3, [sp, #56]
 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 806              		.loc 1 192 0
 807 0044 0F92     		str	r2, [sp, #60]
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 808              		.loc 1 193 0
 809 0046 0822     		movs	r2, #8
 810 0048 1092     		str	r2, [sp, #64]
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 811              		.loc 1 194 0
 812 004a 4822     		movs	r2, #72
 813 004c 1192     		str	r2, [sp, #68]
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 814              		.loc 1 195 0
 815 004e 1293     		str	r3, [sp, #72]
 196:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 816              		.loc 1 196 0
 817 0050 0423     		movs	r3, #4
 818 0052 1393     		str	r3, [sp, #76]
 197:Src/main.c    ****   {
 819              		.loc 1 197 0
 820 0054 08A8     		add	r0, sp, #32
 821 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 822              	.LVL91:
 823 005a 18B1     		cbz	r0, .L44
 199:Src/main.c    ****   }
 824              		.loc 1 199 0
 825 005c 1648     		ldr	r0, .L47+8
 826 005e C721     		movs	r1, #199
 827 0060 FFF7FEFF 		bl	_Error_Handler
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 23


 828              	.LVL92:
 829              	.L44:
 204:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 830              		.loc 1 204 0
 831 0064 0F23     		movs	r3, #15
 832 0066 0393     		str	r3, [sp, #12]
 206:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 833              		.loc 1 206 0
 834 0068 0221     		movs	r1, #2
 835 006a 0491     		str	r1, [sp, #16]
 207:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 836              		.loc 1 207 0
 837 006c 0023     		movs	r3, #0
 838 006e 0593     		str	r3, [sp, #20]
 208:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 839              		.loc 1 208 0
 840 0070 4FF48052 		mov	r2, #4096
 841 0074 0692     		str	r2, [sp, #24]
 209:Src/main.c    **** 
 842              		.loc 1 209 0
 843 0076 0793     		str	r3, [sp, #28]
 211:Src/main.c    ****   {
 844              		.loc 1 211 0
 845 0078 03A8     		add	r0, sp, #12
 846 007a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 847              	.LVL93:
 848 007e 18B1     		cbz	r0, .L45
 213:Src/main.c    ****   }
 849              		.loc 1 213 0
 850 0080 0D48     		ldr	r0, .L47+8
 851 0082 D521     		movs	r1, #213
 852 0084 FFF7FEFF 		bl	_Error_Handler
 853              	.LVL94:
 854              	.L45:
 218:Src/main.c    **** 
 855              		.loc 1 218 0
 856 0088 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 857              	.LVL95:
 858 008c 0B4B     		ldr	r3, .L47+12
 859 008e A3FB0030 		umull	r3, r0, r3, r0
 860 0092 8009     		lsrs	r0, r0, #6
 861 0094 FFF7FEFF 		bl	HAL_SYSTICK_Config
 862              	.LVL96:
 222:Src/main.c    **** 
 863              		.loc 1 222 0
 864 0098 0420     		movs	r0, #4
 865 009a FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 866              	.LVL97:
 225:Src/main.c    **** }
 867              		.loc 1 225 0
 868 009e 4FF0FF30 		mov	r0, #-1
 869 00a2 0021     		movs	r1, #0
 870 00a4 0A46     		mov	r2, r1
 871 00a6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 872              	.LVL98:
 226:Src/main.c    **** 
 873              		.loc 1 226 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 24


 874 00aa 15B0     		add	sp, sp, #84
 875              	.LCFI13:
 876              		.cfi_def_cfa_offset 4
 877              		@ sp needed
 878 00ac 5DF804FB 		ldr	pc, [sp], #4
 879              	.L48:
 880              		.align	2
 881              	.L47:
 882 00b0 00380240 		.word	1073887232
 883 00b4 00700040 		.word	1073770496
 884 00b8 4C000000 		.word	.LC10
 885 00bc D34D6210 		.word	274877907
 886              		.cfi_endproc
 887              	.LFE125:
 889              		.section	.text.main,"ax",%progbits
 890              		.align	2
 891              		.global	main
 892              		.thumb
 893              		.thumb_func
 895              	main:
 896              	.LFB124:
  98:Src/main.c    ****   /* USER CODE BEGIN 1 */
 897              		.loc 1 98 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 48
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901 0000 10B5     		push	{r4, lr}
 902              	.LCFI14:
 903              		.cfi_def_cfa_offset 8
 904              		.cfi_offset 4, -8
 905              		.cfi_offset 14, -4
 906 0002 8CB0     		sub	sp, sp, #48
 907              	.LCFI15:
 908              		.cfi_def_cfa_offset 56
 106:Src/main.c    **** 
 909              		.loc 1 106 0
 910 0004 FFF7FEFF 		bl	HAL_Init
 911              	.LVL99:
 113:Src/main.c    **** 
 912              		.loc 1 113 0
 913 0008 FFF7FEFF 		bl	SystemClock_Config
 914              	.LVL100:
 120:Src/main.c    ****   MX_DMA_Init();
 915              		.loc 1 120 0
 916 000c FFF7FEFF 		bl	MX_GPIO_Init
 917              	.LVL101:
 121:Src/main.c    ****   MX_TIM3_Init();
 918              		.loc 1 121 0
 919 0010 FFF7FEFF 		bl	MX_DMA_Init
 920              	.LVL102:
 122:Src/main.c    ****   MX_TIM1_Init();
 921              		.loc 1 122 0
 922 0014 FFF7FEFF 		bl	MX_TIM3_Init
 923              	.LVL103:
 123:Src/main.c    ****   MX_TIM2_Init();
 924              		.loc 1 123 0
 925 0018 FFF7FEFF 		bl	MX_TIM1_Init
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 25


 926              	.LVL104:
 124:Src/main.c    ****   MX_USART6_UART_Init();
 927              		.loc 1 124 0
 928 001c FFF7FEFF 		bl	MX_TIM2_Init
 929              	.LVL105:
 125:Src/main.c    ****   MX_ADC1_Init();
 930              		.loc 1 125 0
 931 0020 FFF7FEFF 		bl	MX_USART6_UART_Init
 932              	.LVL106:
 126:Src/main.c    ****   MX_I2C1_Init();
 933              		.loc 1 126 0
 934 0024 FFF7FEFF 		bl	MX_ADC1_Init
 935              	.LVL107:
 127:Src/main.c    ****   MX_TIM4_Init();
 936              		.loc 1 127 0
 937 0028 FFF7FEFF 		bl	MX_I2C1_Init
 938              	.LVL108:
 128:Src/main.c    ****   MX_TIM9_Init();
 939              		.loc 1 128 0
 940 002c FFF7FEFF 		bl	MX_TIM4_Init
 941              	.LVL109:
 129:Src/main.c    ****   MX_TIM5_Init();
 942              		.loc 1 129 0
 943 0030 FFF7FEFF 		bl	MX_TIM9_Init
 944              	.LVL110:
 130:Src/main.c    ****   /* USER CODE BEGIN 2 */
 945              		.loc 1 130 0
 946 0034 FFF7FEFF 		bl	MX_TIM5_Init
 947              	.LVL111:
 134:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 948              		.loc 1 134 0
 949 0038 1348     		ldr	r0, .L52
 950 003a 1821     		movs	r1, #24
 951 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 952              	.LVL112:
 135:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 953              		.loc 1 135 0
 954 0040 1248     		ldr	r0, .L52+4
 955 0042 1821     		movs	r1, #24
 956 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 957              	.LVL113:
 136:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 958              		.loc 1 136 0
 959 0048 114C     		ldr	r4, .L52+8
 960 004a 2046     		mov	r0, r4
 961 004c 0021     		movs	r1, #0
 962 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 963              	.LVL114:
 137:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 964              		.loc 1 137 0
 965 0052 2046     		mov	r0, r4
 966 0054 0821     		movs	r1, #8
 967 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 968              	.LVL115:
 138:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 969              		.loc 1 138 0
 970 005a 2046     		mov	r0, r4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 26


 971 005c 0021     		movs	r1, #0
 972 005e FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 973              	.LVL116:
 139:Src/main.c    ****   HAL_TIM_Base_Start(&htim9);
 974              		.loc 1 139 0
 975 0062 2046     		mov	r0, r4
 976 0064 0821     		movs	r1, #8
 977 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 978              	.LVL117:
 140:Src/main.c    ****   ssd1306_Init();
 979              		.loc 1 140 0
 980 006a 0A48     		ldr	r0, .L52+12
 981 006c FFF7FEFF 		bl	HAL_TIM_Base_Start
 982              	.LVL118:
 141:Src/main.c    **** 
 983              		.loc 1 141 0
 984 0070 FFF7FEFF 		bl	ssd1306_Init
 985              	.LVL119:
 144:Src/main.c    ****   ENCODER_t LEFT_ENCODER = encoder_Init();
 986              		.loc 1 144 0
 987 0074 02A8     		add	r0, sp, #8
 988 0076 FFF7FEFF 		bl	menu
 989              	.LVL120:
 145:Src/main.c    ****   // HAL_ADC_Start_DMA(&hadc1, adc_buffer, 3072);
 990              		.loc 1 145 0
 991 007a 6846     		mov	r0, sp
 992 007c FFF7FEFF 		bl	encoder_Init
 993              	.LVL121:
 994              	.L50:
 154:Src/main.c    ****     // char msg[20] = "";
 995              		.loc 1 154 0 discriminator 1
 996 0080 02A8     		add	r0, sp, #8
 997 0082 FFF7FEFF 		bl	do_pid
 998              	.LVL122:
 165:Src/main.c    ****   /* USER CODE END 3 */
 999              		.loc 1 165 0 discriminator 1
 1000 0086 FBE7     		b	.L50
 1001              	.L53:
 1002              		.align	2
 1003              	.L52:
 1004 0088 00000000 		.word	htim4
 1005 008c 00000000 		.word	htim5
 1006 0090 00000000 		.word	htim1
 1007 0094 00000000 		.word	htim9
 1008              		.cfi_endproc
 1009              	.LFE124:
 1011              		.comm	read_value,12288,4
 1012              		.comm	adc_buffer,12288,4
 1013              		.comm	RIGHT_SPEED,1,1
 1014              		.comm	LEFT_SPEED,1,1
 1015              		.comm	last_time,4,4
 1016              		.section	.rodata.str1.4,"aMS",%progbits,1
 1017              		.align	2
 1018              	.LC0:
 1019 0000 53746172 		.ascii	"Starting\000"
 1019      74696E67 
 1019      00
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 27


 1020 0009 000000   		.space	3
 1021              	.LC1:
 1022 000c 256C7500 		.ascii	"%lu\000"
 1023              	.LC2:
 1024 0010 256400   		.ascii	"%d\000"
 1025 0013 00       		.space	1
 1026              	.LC3:
 1027 0014 5020256C 		.ascii	"P %lu\000"
 1027      7500
 1028 001a 0000     		.space	2
 1029              	.LC4:
 1030 001c 4420256C 		.ascii	"D %lu\000"
 1030      7500
 1031 0022 0000     		.space	2
 1032              	.LC5:
 1033 0024 4920256C 		.ascii	"I %lu\000"
 1033      7500
 1034 002a 0000     		.space	2
 1035              	.LC6:
 1036 002c 4C202575 		.ascii	"L %u\000"
 1036      00
 1037 0031 000000   		.space	3
 1038              	.LC7:
 1039 0034 52202575 		.ascii	"R %u\000"
 1039      00
 1040 0039 000000   		.space	3
 1041              	.LC8:
 1042 003c 4C3A2025 		.ascii	"L: %lu\000"
 1042      6C7500
 1043 0043 00       		.space	1
 1044              	.LC9:
 1045 0044 523A2025 		.ascii	"R: %lu\000"
 1045      6C7500
 1046 004b 00       		.space	1
 1047              	.LC10:
 1048 004c 5372632F 		.ascii	"Src/main.c\000"
 1048      6D61696E 
 1048      2E6300
 1049              		.text
 1050              	.Letext0:
 1051              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1052              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 1053              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 1054              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1055              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1056              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1057              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1058              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1059              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1060              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1061              		.file 12 "Inc/fonts.h"
 1062              		.file 13 "Inc/ssd1306.h"
 1063              		.file 14 "Inc/pid.h"
 1064              		.file 15 "Inc/encoder.h"
 1065              		.file 16 "Drivers/CMSIS/Include/core_cm4.h"
 1066              		.file 17 "Inc/tim.h"
 1067              		.file 18 "<built-in>"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 28


 1068              		.file 19 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 1069              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1070              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1071              		.file 22 "Inc/gpio.h"
 1072              		.file 23 "Inc/dma.h"
 1073              		.file 24 "Inc/usart.h"
 1074              		.file 25 "Inc/adc.h"
 1075              		.file 26 "Inc/i2c.h"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000003000 read_value
                            *COM*:0000000000003000 adc_buffer
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:56     .text.print:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:61     .text.print:0000000000000000 print
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:108    .text.print:0000000000000034 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:113    .text.menu:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:118    .text.menu:0000000000000000 menu
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:431    .text.menu:00000000000001c8 $d
                            *COM*:0000000000000001 LEFT_SPEED
                            *COM*:0000000000000001 RIGHT_SPEED
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:449    .text.do_pid:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:454    .text.do_pid:0000000000000000 do_pid
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:613    .text.do_pid:00000000000000bc $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:627    .text.update_motor_speed:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:632    .text.update_motor_speed:0000000000000000 update_motor_speed
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:721    .text.update_motor_speed:0000000000000078 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:730    .text._Error_Handler:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:735    .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:751    .text.SystemClock_Config:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:756    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:882    .text.SystemClock_Config:00000000000000b0 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:890    .text.main:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:895    .text.main:0000000000000000 main
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:1004   .text.main:0000000000000088 $d
                            *COM*:0000000000000004 last_time
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s:1017   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
HAL_GPIO_ReadPin
sprintf
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
HAL_Delay
pid_Init
htim1
__aeabi_d2iz
pid_GetGain
htim9
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccBPLL1L.s 			page 30


HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
HAL_TIM_Encoder_Start
HAL_TIM_Base_Start
ssd1306_Init
encoder_Init
htim4
htim5
