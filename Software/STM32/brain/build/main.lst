ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** // uint16_t LEFT_SPEED = BASE_SPEED+SPEED_DIFF;
  66:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED;
  67:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  68:Src/main.c    **** uint32_t dma_buffer[2048];
  69:Src/main.c    **** uint32_t adc_values[2048];
  70:Src/main.c    **** int ewok_cnt = 0;
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  79:Src/main.c    **** void print(char msg[], int row);
  80:Src/main.c    **** PID_t menu();
  81:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  82:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  83:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  84:Src/main.c    **** void turn();
  85:Src/main.c    **** void turn_deg(int16_t);
  86:Src/main.c    **** void alarm_detect();
  87:Src/main.c    **** void drive_straight(PID_t *enc_pid);
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 3


  88:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis);
  89:Src/main.c    **** void square_edge(PID_t *enc_pid);
  90:Src/main.c    **** int debounce_and_grab();
  91:Src/main.c    **** void test_All();
  92:Src/main.c    **** void test_PWM_htim1();
  93:Src/main.c    **** void test_PWM_htim3();
  94:Src/main.c    **** 
  95:Src/main.c    **** /* USER CODE END PFP */
  96:Src/main.c    **** 
  97:Src/main.c    **** /* USER CODE BEGIN 0 */
  98:Src/main.c    **** /**
  99:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
 100:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
 101:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
 102:Src/main.c    ****  */
 103:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 104:Src/main.c    **** {
  29              		.loc 1 104 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 105:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 105 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF40052 		mov	r2, #8192
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB131:
 106:Src/main.c    **** }
 107:Src/main.c    **** /* USER CODE END 0 */
 108:Src/main.c    **** 
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 4


 109:Src/main.c    **** /**
 110:Src/main.c    ****   * @brief  The application entry point.
 111:Src/main.c    ****   *
 112:Src/main.c    ****   * @retval None
 113:Src/main.c    ****   */
 114:Src/main.c    **** int main(void)
 115:Src/main.c    **** {
 116:Src/main.c    ****   /* USER CODE BEGIN 1 */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE END 1 */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 123:Src/main.c    ****   HAL_Init();
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE BEGIN Init */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE END Init */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* Configure the system clock */
 130:Src/main.c    ****   SystemClock_Config();
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* USER CODE END SysInit */
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* Initialize all configured peripherals */
 137:Src/main.c    ****   MX_GPIO_Init();
 138:Src/main.c    ****   MX_DMA_Init();
 139:Src/main.c    ****   MX_TIM3_Init();
 140:Src/main.c    ****   MX_TIM1_Init();
 141:Src/main.c    ****   MX_TIM2_Init();
 142:Src/main.c    ****   MX_ADC1_Init();
 143:Src/main.c    ****   MX_TIM4_Init();
 144:Src/main.c    ****   MX_TIM9_Init();
 145:Src/main.c    ****   MX_TIM5_Init();
 146:Src/main.c    ****   MX_I2C1_Init();
 147:Src/main.c    ****   MX_USART6_UART_Init();
 148:Src/main.c    ****   /* USER CODE BEGIN 2 */
 149:Src/main.c    **** 
 150:Src/main.c    ****     /* Initialize peripherals */
 151:Src/main.c    ****     /* 
 152:Src/main.c    ****      * Claw jaw: TIM3 CH1
 153:Src/main.c    ****      * Claw arm: TIM3 CH2
 154:Src/main.c    ****      * Basket: TIM3 CH3
 155:Src/main.c    ****      * left forward: TIM1 CH1
 156:Src/main.c    ****      * left backward: TIM1 CH2
 157:Src/main.c    ****      * right forward: TIM1 CH3
 158:Src/main.c    ****      * right backward: TIM1 CH4
 159:Src/main.c    ****      * left encoder: TIM4
 160:Src/main.c    ****      * right encoderL TIM5
 161:Src/main.c    ****      * spare clocks: TIM2, TIM9
 162:Src/main.c    ****      */
 163:Src/main.c    **** 
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 165:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 5


 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 172:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 173:Src/main.c    **** 
 174:Src/main.c    ****     /* Initialize other stuffs */
 175:Src/main.c    ****     ssd1306_Init();
 176:Src/main.c    ****     print("Starting\n", 0);
 177:Src/main.c    ****     claw_init(&htim3);
 178:Src/main.c    ****     // basket_init(&htim3);
 179:Src/main.c    **** 
 180:Src/main.c    ****     uint8_t ewok_cnt = 0;
 181:Src/main.c    ****     PID_t enc_pid = pid_Init(10, 0, 0, 2, 1);
 182:Src/main.c    **** 
 183:Src/main.c    ****     EDGE_LEFT_STATE = NOT_FLAGGED;
 184:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 185:Src/main.c    **** 
 186:Src/main.c    ****     // drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 8 * 1000);
 187:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 188:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 189:Src/main.c    ****     // HAL_Delay(8000);
 190:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, 0);
 191:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, 0);
 192:Src/main.c    **** 
 193:Src/main.c    ****     /* Initially disabled interrupts and ADC */
 194:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 195:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 196:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 197:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 198:Src/main.c    **** 
 199:Src/main.c    **** 
 200:Src/main.c    ****     print("ewok\n", 0);
 201:Src/main.c    ****   /* USER CODE END 2 */
 202:Src/main.c    **** 
 203:Src/main.c    ****   /* Infinite loop */
 204:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 205:Src/main.c    **** 
 206:Src/main.c    ****     while(0)
 207:Src/main.c    ****     {
 208:Src/main.c    ****         if(TAPE_LEFT_STATE == FLAGGED)
 209:Src/main.c    ****         {
 210:Src/main.c    ****             print("Tape left\n", 0);
 211:Src/main.c    ****             TAPE_LEFT_STATE = NOT_FLAGGED;
 212:Src/main.c    ****         }
 213:Src/main.c    ****         if(TAPE_RIGHT_STATE == FLAGGED)
 214:Src/main.c    ****         {
 215:Src/main.c    ****             print("Tape right\n", 0);
 216:Src/main.c    ****             TAPE_RIGHT_STATE = NOT_FLAGGED;
 217:Src/main.c    ****         }
 218:Src/main.c    ****         if(EDGE_LEFT_STATE == FLAGGED)
 219:Src/main.c    ****         {
 220:Src/main.c    ****             print("Edge left\n", 0);
 221:Src/main.c    ****             EDGE_LEFT_STATE = NOT_FLAGGED;
 222:Src/main.c    ****         }
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 6


 223:Src/main.c    ****         if(EDGE_RIGHT_STATE == FLAGGED)
 224:Src/main.c    ****         {
 225:Src/main.c    ****             print("Edge right\n", 0);
 226:Src/main.c    ****             EDGE_RIGHT_STATE = NOT_FLAGGED;
 227:Src/main.c    ****         }
 228:Src/main.c    ****         if(EDGE_RIGHT_STATE == FLAGGED)
 229:Src/main.c    ****         {
 230:Src/main.c    ****             print("Edge right\n", 0);
 231:Src/main.c    ****             EDGE_RIGHT_STATE = NOT_FLAGGED;
 232:Src/main.c    ****         }
 233:Src/main.c    ****         if(CLAW_INT_STATE == FLAGGED)
 234:Src/main.c    ****         {
 235:Src/main.c    ****             print("Claw\n", 0);
 236:Src/main.c    ****             int val = HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin);
 237:Src/main.c    ****             char msg[18] = "";
 238:Src/main.c    ****             sprintf(msg, "Claw val: %d", val);
 239:Src/main.c    ****             print(msg, 0);
 240:Src/main.c    ****             CLAW_INT_STATE = NOT_FLAGGED;
 241:Src/main.c    ****         }
 242:Src/main.c    ****         
 243:Src/main.c    **** 
 244:Src/main.c    ****     }
 245:Src/main.c    **** 
 246:Src/main.c    ****     // FIXME: Make dis 1
 247:Src/main.c    ****     while (1)
 248:Src/main.c    ****     {
 249:Src/main.c    ****         // /*
 250:Src/main.c    ****         //  * Pi Turning
 251:Src/main.c    ****         //  */
 252:Src/main.c    ****         if (HAL_GPIO_ReadPin(PI_INT_GPIO_Port, PI_INT_Pin))
 253:Src/main.c    ****         {
 254:Src/main.c    ****             // Stop Requesting Images
 255:Src/main.c    ****             print("Pi interrupt\n", 0);
 256:Src/main.c    ****             // Turn to ewok
 257:Src/main.c    ****             turn();
 258:Src/main.c    ****             // Drive forward w/ PID for 2.5 s, enable claw interrupt
 259:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 260:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 261:Src/main.c    ****             uint32_t start = HAL_GetTick();
 262:Src/main.c    ****         
 263:Src/main.c    ****             // Reset Claw Interrupt before driving forward
 264:Src/main.c    ****             print("MAIN | CLAW_INT UNFLAGGED\n", 0);
 265:Src/main.c    ****             while ((HAL_GetTick() - start) < 2500)
 266:Src/main.c    ****             {
 267:Src/main.c    ****                 drive_straight(&enc_pid);
 268:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 269:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 270:Src/main.c    ****                 {
 271:Src/main.c    ****                     print("Claw interrupt\n", 0);
 272:Src/main.c    ****                     if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 273:Src/main.c    ****                 }
 274:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 275:Src/main.c    ****                 {
 276:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 277:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 278:Src/main.c    ****                     print("Edge left triggered", 0);
 279:Src/main.c    ****                     turn_deg(30);
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 7


 280:Src/main.c    ****                 }
 281:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 282:Src/main.c    ****                     print("Edge right triggered", 0);
 283:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 284:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 285:Src/main.c    ****                     turn_deg(-30);
 286:Src/main.c    ****                 }
 287:Src/main.c    ****             }
 288:Src/main.c    **** 
 289:Src/main.c    ****             print("ewok\n", 0);
 290:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 291:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 292:Src/main.c    ****             HAL_Delay(3000);
 293:Src/main.c    ****         }
 294:Src/main.c    ****         else
 295:Src/main.c    ****         {
 296:Src/main.c    ****             /*
 297:Src/main.c    ****              * Look for Ewok
 298:Src/main.c    ****              */
 299:Src/main.c    ****             // CLAW_INT_STATE = NOT_FLAGGED;
 300:Src/main.c    **** 
 301:Src/main.c    ****             // if (ewok_cnt == 4 || ewok_cnt == 5)
 302:Src/main.c    ****             // {
 303:Src/main.c    ****             //     if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 304:Src/main.c    ****             //     {
 305:Src/main.c    ****             //         drive_straight_time(&enc_pid, 0, RIGHT_SPEED - 100, 400);
 306:Src/main.c    ****             //         uint32_t temp_time = HAL_GetTick();
 307:Src/main.c    ****             //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 308:Src/main.c    ****             //     }
 309:Src/main.c    ****             //     else if (EDGE_LEFT_STATE == NOT_FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 310:Src/main.c    ****             //     {
 311:Src/main.c    ****             //         drive_straight_time(&enc_pid, LEFT_SPEED - 100, 0, 400);
 312:Src/main.c    ****             //         uint32_t temp_time = HAL_GetTick();
 313:Src/main.c    ****             //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 314:Src/main.c    ****             //     }
 315:Src/main.c    ****             // }
 316:Src/main.c    ****             
 317:Src/main.c    ****             drive_straight_time(&enc_pid, LEFT_SPEED - 100, RIGHT_SPEED - 100, 500);
 318:Src/main.c    ****             print("ewok\n", 0);
 319:Src/main.c    ****             if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 320:Src/main.c    ****                 {
 321:Src/main.c    ****                     print("Claw interrupt\n", 0);
 322:Src/main.c    ****                     if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 323:Src/main.c    ****                 }
 324:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 325:Src/main.c    ****                 {
 326:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 327:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 328:Src/main.c    ****                     print("Edge left triggered", 0);
 329:Src/main.c    ****                     turn_deg(30);
 330:Src/main.c    ****                 }
 331:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 332:Src/main.c    ****                     print("Edge right triggered", 0);
 333:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 334:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 335:Src/main.c    ****                     turn_deg(-30);
 336:Src/main.c    ****                 }
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 8


 337:Src/main.c    ****             uint32_t temp_time = HAL_GetTick();
 338:Src/main.c    ****             while ((HAL_GetTick() - temp_time) < 3000 && HAL_GPIO_ReadPin(PI_INT_GPIO_Port, PI_INT_
 339:Src/main.c    ****         }
 340:Src/main.c    **** 
 341:Src/main.c    ****   /* USER CODE END WHILE */
 342:Src/main.c    **** 
 343:Src/main.c    ****   /* USER CODE BEGIN 3 */
 344:Src/main.c    ****     }
 345:Src/main.c    ****   /* USER CODE END 3 */
 346:Src/main.c    **** 
 347:Src/main.c    **** }
 348:Src/main.c    **** 
 349:Src/main.c    **** /**
 350:Src/main.c    ****   * @brief System Clock Configuration
 351:Src/main.c    ****   * @retval None
 352:Src/main.c    ****   */
 353:Src/main.c    **** void SystemClock_Config(void)
 354:Src/main.c    **** {
 355:Src/main.c    **** 
 356:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 357:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 358:Src/main.c    **** 
 359:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 360:Src/main.c    ****     */
 361:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 362:Src/main.c    **** 
 363:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 364:Src/main.c    **** 
 365:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 366:Src/main.c    ****     */
 367:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 368:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 369:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 370:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 371:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 372:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 373:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 374:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 375:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 376:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 377:Src/main.c    ****   {
 378:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 379:Src/main.c    ****   }
 380:Src/main.c    **** 
 381:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 382:Src/main.c    ****     */
 383:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 384:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 385:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 386:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 387:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 388:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 389:Src/main.c    **** 
 390:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 391:Src/main.c    ****   {
 392:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 393:Src/main.c    ****   }
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 9


 394:Src/main.c    **** 
 395:Src/main.c    ****     /**Configure the Systick interrupt time 
 396:Src/main.c    ****     */
 397:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 398:Src/main.c    **** 
 399:Src/main.c    ****     /**Configure the Systick 
 400:Src/main.c    ****     */
 401:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 402:Src/main.c    **** 
 403:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 404:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 405:Src/main.c    **** }
 406:Src/main.c    **** 
 407:Src/main.c    **** /* USER CODE BEGIN 4 */
 408:Src/main.c    **** 
 409:Src/main.c    **** void square_edge(PID_t *enc_pid)
 410:Src/main.c    **** {
 411:Src/main.c    ****     while (1)
 412:Src/main.c    ****     {
 413:Src/main.c    ****         char msg[50] = "";
 414:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | EL: %d\n", EDGE_LEFT_STATE == FLAGGED ? 1 : 0);
 415:Src/main.c    ****         print(msg, 0);
 416:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | ER: %d\n", EDGE_RIGHT_STATE == FLAGGED ? 1 : 0);
 417:Src/main.c    ****         print(msg, 0);
 418:Src/main.c    ****         print("\n", 0);
 419:Src/main.c    ****         drive_straight(enc_pid);
 420:Src/main.c    ****         if (EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED)
 421:Src/main.c    ****         {
 422:Src/main.c    ****             
 423:Src/main.c    ****             if (EDGE_LEFT_STATE == FLAGGED)
 424:Src/main.c    ****             {
 425:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 426:Src/main.c    ****             }
 427:Src/main.c    ****             if (EDGE_RIGHT_STATE == FLAGGED)
 428:Src/main.c    ****             {
 429:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 430:Src/main.c    ****             }
 431:Src/main.c    ****         }
 432:Src/main.c    ****         else if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 433:Src/main.c    ****         {
 434:Src/main.c    ****             break;
 435:Src/main.c    ****         }
 436:Src/main.c    ****     }
 437:Src/main.c    **** }
 438:Src/main.c    **** 
 439:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis)
 440:Src/main.c    **** {
 441:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 442:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 443:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 444:Src/main.c    ****     char msg[50] = "";
 445:Src/main.c    ****     uint8_t count = 0; // FIXME: Remove to speed up
 446:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 447:Src/main.c    ****     {
 448:Src/main.c    ****         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 449:Src/main.c    ****         {
 450:Src/main.c    ****             print("Claw interrupt\n", 0);
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 10


 451:Src/main.c    ****             if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 452:Src/main.c    ****         }
 453:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 454:Src/main.c    ****         {
 455:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 456:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 457:Src/main.c    ****             print("Edge left triggered", 0);
 458:Src/main.c    ****             turn_deg(30);
 459:Src/main.c    ****         }
 460:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 461:Src/main.c    ****             print("Edge right triggered", 0);
 462:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 463:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 464:Src/main.c    ****             turn_deg(-30);
 465:Src/main.c    ****         }
 466:Src/main.c    ****         else 
 467:Src/main.c    ****         {
 468:Src/main.c    ****             drive_straight(enc_pid);
 469:Src/main.c    **** 
 470:Src/main.c    ****         }
 471:Src/main.c    ****     }
 472:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 473:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 474:Src/main.c    **** }
 475:Src/main.c    **** 
 476:Src/main.c    **** void drive_straight(PID_t *enc_pid)
 477:Src/main.c    **** {
 478:Src/main.c    ****     encoder_pid(enc_pid);
 479:Src/main.c    ****     HAL_Delay(10);
 480:Src/main.c    ****     
 481:Src/main.c    **** }
 482:Src/main.c    **** 
 483:Src/main.c    **** /*
 484:Src/main.c    ****  * Assume motors are not on.
 485:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 486:Src/main.c    ****  */
 487:Src/main.c    **** void turn()
 488:Src/main.c    **** {
 489:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 490:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 491:Src/main.c    ****     HAL_Delay(100);
 492:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 493:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 494:Src/main.c    ****     TIM4->CNT = 0;
 495:Src/main.c    ****     TIM5->CNT = 0;
 496:Src/main.c    **** 
 497:Src/main.c    ****     char msg[18] = "";
 498:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", counts);
 499:Src/main.c    ****     print(msg, 0);
 500:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 501:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 502:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 503:Src/main.c    ****     print(msg, 2);
 504:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %d\n", 2 * adc_values[5]);
 505:Src/main.c    ****     print(msg, 0);
 506:Src/main.c    **** 
 507:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 11


 508:Src/main.c    ****     {
 509:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 510:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 511:Src/main.c    ****         while (TIM5->CNT < counts)
 512:Src/main.c    ****         {
 513:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 514:Src/main.c    ****             // print(msg, 4);
 515:Src/main.c    ****         }
 516:Src/main.c    ****         sprintf(msg, "TURN | TIM5->CNT: %lu\n", TIM5->CNT);
 517:Src/main.c    ****         print(msg, 4);
 518:Src/main.c    ****         TIM5->CNT = 0;
 519:Src/main.c    ****     }
 520:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 521:Src/main.c    ****     {
 522:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 523:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 524:Src/main.c    ****         while (TIM4->CNT < counts)
 525:Src/main.c    ****         {
 526:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 527:Src/main.c    ****             // print(msg, 4);
 528:Src/main.c    ****         }
 529:Src/main.c    ****         sprintf(msg, "TURN | TIM4->CNT: %lu\n", TIM4->CNT);
 530:Src/main.c    ****         print(msg, 4);
 531:Src/main.c    ****         TIM4->CNT = 0;
 532:Src/main.c    ****     }
 533:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 534:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 535:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 536:Src/main.c    **** }
 537:Src/main.c    **** 
 538:Src/main.c    **** /*
 539:Src/main.c    ****  * Assume motors are not on.
 540:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 541:Src/main.c    ****  */
 542:Src/main.c    **** void turn_deg(int16_t deg)
 543:Src/main.c    **** {
 544:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 545:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 546:Src/main.c    ****     if (counts < 0) counts = -counts;
 547:Src/main.c    ****     TIM4->CNT = 0;
 548:Src/main.c    ****     TIM5->CNT = 0;
 549:Src/main.c    **** 
 550:Src/main.c    ****     char msg[50] = "";
 551:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 552:Src/main.c    ****     print(msg, 0);
 553:Src/main.c    **** 
 554:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 555:Src/main.c    ****     {
 556:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 557:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 558:Src/main.c    ****         while (TIM4->CNT < counts)
 559:Src/main.c    ****         {
 560:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 561:Src/main.c    ****             // print(msg, 4);
 562:Src/main.c    ****         }
 563:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM5->CNT: %lu\n", TIM5->CNT);
 564:Src/main.c    ****         print(msg, 4);
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 12


 565:Src/main.c    ****         TIM5->CNT = 0;
 566:Src/main.c    ****     }
 567:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 568:Src/main.c    ****     {
 569:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 570:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 571:Src/main.c    ****         while (TIM5->CNT < counts)
 572:Src/main.c    ****         {
 573:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 574:Src/main.c    ****             // print(msg, 4);
 575:Src/main.c    ****         }
 576:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM4->CNT: %lu\n", TIM4->CNT);
 577:Src/main.c    ****         print(msg, 4);
 578:Src/main.c    ****         TIM4->CNT = 0;
 579:Src/main.c    ****     }
 580:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 581:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 582:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 583:Src/main.c    **** }
 584:Src/main.c    **** 
 585:Src/main.c    **** /**
 586:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 587:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 588:Src/main.c    ****  *
 589:Src/main.c    ****  * @param adc_val, value read from ADC.
 590:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 591:Src/main.c    ****  **/
 592:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 593:Src/main.c    **** {
  67              		.loc 1 593 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 594:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 594 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 595:Src/main.c    **** }
  90              		.loc 1 595 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 13


  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE131:
 101              		.global	__aeabi_dcmplt
 102              		.global	__aeabi_dcmpgt
 103              		.section	.text.alarm_detect,"ax",%progbits
 104              		.align	2
 105              		.global	alarm_detect
 106              		.thumb
 107              		.thumb_func
 109              	alarm_detect:
 110              	.LFB132:
 596:Src/main.c    **** 
 597:Src/main.c    **** // Sampling frequency: 72e6/2/(495*3)
 598:Src/main.c    **** void alarm_detect()
 599:Src/main.c    **** {
 111              		.loc 1 599 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115 0000 00B5     		push	{lr}
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 14, -4
 119 0002 83B0     		sub	sp, sp, #12
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 16
 600:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 122              		.loc 1 600 0
 123 0004 1C48     		ldr	r0, .L13
 124 0006 1D49     		ldr	r1, .L13+4
 125 0008 4FF40062 		mov	r2, #2048
 126 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 127              	.LVL8:
 601:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 602:Src/main.c    ****     HAL_Delay(500);
 128              		.loc 1 602 0
 129 0010 4FF4FA70 		mov	r0, #500
 130 0014 FFF7FEFF 		bl	HAL_Delay
 131              	.LVL9:
 132              	.L10:
 603:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 100);
 133              		.loc 1 603 0 discriminator 1
 134 0018 0023     		movs	r3, #0
 135 001a 0093     		str	r3, [sp]
 136 001c 1848     		ldr	r0, .L13+8
 137 001e 45F6B261 		movw	r1, #24242
 138 0022 4FF47A72 		mov	r2, #1000
 139 0026 4FF40063 		mov	r3, #2048
 140 002a FFF7FEFF 		bl	goertzel
 141              	.LVL10:
 142 002e 51EC100B 		fmrrd	r0, r1, d0
 143 0032 0022     		movs	r2, #0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 14


 144 0034 134B     		ldr	r3, .L13+12
 145 0036 FFF7FEFF 		bl	__aeabi_dcmplt
 146              	.LVL11:
 147 003a 0028     		cmp	r0, #0
 148 003c ECD1     		bne	.L10
 149              	.L11:
 604:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 100);
 150              		.loc 1 604 0 discriminator 1
 151 003e 0023     		movs	r3, #0
 152 0040 0093     		str	r3, [sp]
 153 0042 0F48     		ldr	r0, .L13+8
 154 0044 45F6B261 		movw	r1, #24242
 155 0048 4FF47A72 		mov	r2, #1000
 156 004c 4FF40063 		mov	r3, #2048
 157 0050 FFF7FEFF 		bl	goertzel
 158              	.LVL12:
 159 0054 51EC100B 		fmrrd	r0, r1, d0
 160 0058 0022     		movs	r2, #0
 161 005a 0A4B     		ldr	r3, .L13+12
 162 005c FFF7FEFF 		bl	__aeabi_dcmpgt
 163              	.LVL13:
 164 0060 0028     		cmp	r0, #0
 165 0062 ECD1     		bne	.L11
 605:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 166              		.loc 1 605 0
 167 0064 0448     		ldr	r0, .L13
 168 0066 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 169              	.LVL14:
 606:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 170              		.loc 1 606 0
 171 006a 0022     		movs	r2, #0
 172 006c 064B     		ldr	r3, .L13+16
 173 006e 1A70     		strb	r2, [r3]
 607:Src/main.c    **** }
 174              		.loc 1 607 0
 175 0070 03B0     		add	sp, sp, #12
 176              	.LCFI4:
 177              		.cfi_def_cfa_offset 4
 178              		@ sp needed
 179 0072 5DF804FB 		ldr	pc, [sp], #4
 180              	.L14:
 181 0076 00BF     		.align	2
 182              	.L13:
 183 0078 00000000 		.word	hadc1
 184 007c 00000000 		.word	dma_buffer
 185 0080 00000000 		.word	adc_values
 186 0084 00005940 		.word	1079574528
 187 0088 00000000 		.word	IR_INT_STATE
 188              		.cfi_endproc
 189              	.LFE132:
 191              		.section	.text.print,"ax",%progbits
 192              		.align	2
 193              		.global	print
 194              		.thumb
 195              		.thumb_func
 197              	print:
 198              	.LFB133:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 15


 608:Src/main.c    **** 
 609:Src/main.c    **** /**
 610:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 611:Src/main.c    ****  * @param msg, string to print
 612:Src/main.c    ****  * @param row, row to print msg to
 613:Src/main.c    ****  */
 614:Src/main.c    **** void print(char *msg, int row)
 615:Src/main.c    **** {
 199              		.loc 1 615 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL15:
 204 0000 10B5     		push	{r4, lr}
 205              	.LCFI5:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
 209 0002 0446     		mov	r4, r0
 616:Src/main.c    ****     // if (row == 0)
 617:Src/main.c    ****     // {
 618:Src/main.c    ****     //     ssd1306_Fill(Black);
 619:Src/main.c    ****     // }
 620:Src/main.c    ****     // ssd1306_SetCursor(0, row * 10);
 621:Src/main.c    ****     // ssd1306_WriteString(msg, Font_7x10, White);
 622:Src/main.c    ****     // ssd1306_UpdateScreen();
 623:Src/main.c    ****     HAL_UART_Transmit(&huart6, (uint8_t *) msg, strlen(msg), 100);
 210              		.loc 1 623 0
 211 0004 FFF7FEFF 		bl	strlen
 212              	.LVL16:
 213 0008 82B2     		uxth	r2, r0
 214 000a 0348     		ldr	r0, .L17
 215 000c 2146     		mov	r1, r4
 216 000e 6423     		movs	r3, #100
 217 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 218              	.LVL17:
 219 0014 10BD     		pop	{r4, pc}
 220              	.LVL18:
 221              	.L18:
 222 0016 00BF     		.align	2
 223              	.L17:
 224 0018 00000000 		.word	huart6
 225              		.cfi_endproc
 226              	.LFE133:
 228              		.section	.text.menu,"ax",%progbits
 229              		.align	2
 230              		.global	menu
 231              		.thumb
 232              		.thumb_func
 234              	menu:
 235              	.LFB134:
 624:Src/main.c    **** }
 625:Src/main.c    **** 
 626:Src/main.c    **** PID_t menu()
 627:Src/main.c    **** {
 236              		.loc 1 627 0
 237              		.cfi_startproc
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 16


 238              		@ args = 0, pretend = 0, frame = 32
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              	.LVL19:
 241 0000 30B5     		push	{r4, r5, lr}
 242              	.LCFI6:
 243              		.cfi_def_cfa_offset 12
 244              		.cfi_offset 4, -12
 245              		.cfi_offset 5, -8
 246              		.cfi_offset 14, -4
 247 0002 8BB0     		sub	sp, sp, #44
 248              	.LCFI7:
 249              		.cfi_def_cfa_offset 56
 250 0004 0546     		mov	r5, r0
 628:Src/main.c    ****     print("Starting\n", 0);
 251              		.loc 1 628 0
 252 0006 2548     		ldr	r0, .L25
 253              	.LVL20:
 254 0008 0021     		movs	r1, #0
 255 000a FFF7FEFF 		bl	print
 256              	.LVL21:
 629:Src/main.c    ****     char msg[20] = "";
 257              		.loc 1 629 0
 258 000e 0024     		movs	r4, #0
 259 0010 0594     		str	r4, [sp, #20]
 260 0012 0694     		str	r4, [sp, #24]
 261 0014 0794     		str	r4, [sp, #28]
 262 0016 0894     		str	r4, [sp, #32]
 263 0018 0994     		str	r4, [sp, #36]
 264              	.LVL22:
 630:Src/main.c    ****     int pid_select = 0;
 631:Src/main.c    ****     uint32_t values[2] = {0, 0};
 265              		.loc 1 631 0
 266 001a 0394     		str	r4, [sp, #12]
 267 001c 0494     		str	r4, [sp, #16]
 268              	.LVL23:
 269              	.L23:
 632:Src/main.c    ****     while (1)
 633:Src/main.c    ****     {
 634:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 270              		.loc 1 634 0
 271 001e 2048     		ldr	r0, .L25+4
 272 0020 4FF40051 		mov	r1, #8192
 273 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 274              	.LVL24:
 275 0028 48BB     		cbnz	r0, .L20
 635:Src/main.c    ****         {
 636:Src/main.c    ****             sprintf(msg, "%lu\n", values[pid_select]);
 276              		.loc 1 636 0
 277 002a 05A8     		add	r0, sp, #20
 278 002c 1D49     		ldr	r1, .L25+8
 279 002e 0AAB     		add	r3, sp, #40
 280 0030 03EB8403 		add	r3, r3, r4, lsl #2
 281 0034 53F81C2C 		ldr	r2, [r3, #-28]
 282 0038 FFF7FEFF 		bl	sprintf
 283              	.LVL25:
 637:Src/main.c    ****             print(msg, 0);
 284              		.loc 1 637 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 17


 285 003c 05A8     		add	r0, sp, #20
 286 003e 0021     		movs	r1, #0
 287 0040 FFF7FEFF 		bl	print
 288              	.LVL26:
 638:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 289              		.loc 1 638 0
 290 0044 13E0     		b	.L21
 291              	.L22:
 639:Src/main.c    ****             {
 640:Src/main.c    ****                 values[pid_select]++;
 292              		.loc 1 640 0
 293 0046 0AAB     		add	r3, sp, #40
 294 0048 03EB8403 		add	r3, r3, r4, lsl #2
 295 004c 53F81C2C 		ldr	r2, [r3, #-28]
 296 0050 0132     		adds	r2, r2, #1
 297 0052 43F81C2C 		str	r2, [r3, #-28]
 641:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
 298              		.loc 1 641 0
 299 0056 05A8     		add	r0, sp, #20
 300 0058 1249     		ldr	r1, .L25+8
 301 005a FFF7FEFF 		bl	sprintf
 302              	.LVL27:
 642:Src/main.c    ****                 print(msg, 0);
 303              		.loc 1 642 0
 304 005e 05A8     		add	r0, sp, #20
 305 0060 0021     		movs	r1, #0
 306 0062 FFF7FEFF 		bl	print
 307              	.LVL28:
 643:Src/main.c    ****                 HAL_Delay(500);
 308              		.loc 1 643 0
 309 0066 4FF4FA70 		mov	r0, #500
 310 006a FFF7FEFF 		bl	HAL_Delay
 311              	.LVL29:
 312              	.L21:
 638:Src/main.c    ****             {
 313              		.loc 1 638 0
 314 006e 0C48     		ldr	r0, .L25+4
 315 0070 4FF40051 		mov	r1, #8192
 316 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 317              	.LVL30:
 318 0078 0028     		cmp	r0, #0
 319 007a E4D0     		beq	.L22
 644:Src/main.c    ****             }
 645:Src/main.c    ****             ++pid_select;
 320              		.loc 1 645 0
 321 007c 0134     		adds	r4, r4, #1
 322              	.LVL31:
 323              	.L20:
 646:Src/main.c    ****         }
 647:Src/main.c    ****         if (pid_select == 2)
 324              		.loc 1 647 0
 325 007e 022C     		cmp	r4, #2
 326 0080 CDD1     		bne	.L23
 648:Src/main.c    ****             break;
 649:Src/main.c    ****     }
 650:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 327              		.loc 1 650 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 18


 328 0082 BDF80C10 		ldrh	r1, [sp, #12]
 329 0086 BDF81020 		ldrh	r2, [sp, #16]
 330 008a 0123     		movs	r3, #1
 331 008c 0093     		str	r3, [sp]
 332 008e 0193     		str	r3, [sp, #4]
 333 0090 2846     		mov	r0, r5
 334 0092 FFF7FEFF 		bl	pid_Init
 335              	.LVL32:
 651:Src/main.c    **** }
 336              		.loc 1 651 0
 337 0096 2846     		mov	r0, r5
 338 0098 0BB0     		add	sp, sp, #44
 339              	.LCFI8:
 340              		.cfi_def_cfa_offset 12
 341              		@ sp needed
 342 009a 30BD     		pop	{r4, r5, pc}
 343              	.LVL33:
 344              	.L26:
 345              		.align	2
 346              	.L25:
 347 009c 00000000 		.word	.LC0
 348 00a0 00080240 		.word	1073874944
 349 00a4 0C000000 		.word	.LC1
 350              		.cfi_endproc
 351              	.LFE134:
 353              		.section	.text.set_motor_speed,"ax",%progbits
 354              		.align	2
 355              		.global	set_motor_speed
 356              		.thumb
 357              		.thumb_func
 359              	set_motor_speed:
 360              	.LFB135:
 652:Src/main.c    **** 
 653:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 654:Src/main.c    **** {
 361              		.loc 1 654 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              		@ link register save eliminated.
 366              	.LVL34:
 655:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 367              		.loc 1 655 0
 368 0000 0346     		mov	r3, r0
 369 0002 18B9     		cbnz	r0, .L28
 656:Src/main.c    ****     {
 657:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 370              		.loc 1 657 0
 371 0004 114A     		ldr	r2, .L32
 372 0006 1268     		ldr	r2, [r2]
 373 0008 9063     		str	r0, [r2, #56]
 374 000a 13E0     		b	.L29
 375              	.L28:
 658:Src/main.c    ****     }
 659:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 376              		.loc 1 659 0
 377 000c 0428     		cmp	r0, #4
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 19


 378 000e 04D1     		bne	.L30
 660:Src/main.c    ****     {
 661:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 379              		.loc 1 661 0
 380 0010 0E4A     		ldr	r2, .L32
 381 0012 1268     		ldr	r2, [r2]
 382 0014 0020     		movs	r0, #0
 383              	.LVL35:
 384 0016 5063     		str	r0, [r2, #52]
 385 0018 0CE0     		b	.L29
 386              	.LVL36:
 387              	.L30:
 662:Src/main.c    ****     }
 663:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 388              		.loc 1 663 0
 389 001a 0828     		cmp	r0, #8
 390 001c 04D1     		bne	.L31
 664:Src/main.c    ****     {
 665:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 391              		.loc 1 665 0
 392 001e 0B4A     		ldr	r2, .L32
 393 0020 1268     		ldr	r2, [r2]
 394 0022 0020     		movs	r0, #0
 395              	.LVL37:
 396 0024 1064     		str	r0, [r2, #64]
 397 0026 05E0     		b	.L29
 398              	.LVL38:
 399              	.L31:
 666:Src/main.c    ****     }
 667:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 400              		.loc 1 667 0
 401 0028 0C28     		cmp	r0, #12
 402 002a 03D1     		bne	.L29
 668:Src/main.c    ****     {
 669:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 403              		.loc 1 669 0
 404 002c 074A     		ldr	r2, .L32
 405 002e 1268     		ldr	r2, [r2]
 406 0030 0020     		movs	r0, #0
 407              	.LVL39:
 408 0032 D063     		str	r0, [r2, #60]
 409              	.L29:
 670:Src/main.c    ****     }
 671:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed > 1000 ? 1000 : speed);
 410              		.loc 1 671 0
 411 0034 054A     		ldr	r2, .L32
 412 0036 1268     		ldr	r2, [r2]
 413 0038 3432     		adds	r2, r2, #52
 414 003a 9B08     		lsrs	r3, r3, #2
 415              	.LVL40:
 416 003c B1F57A7F 		cmp	r1, #1000
 417 0040 28BF     		it	cs
 418 0042 4FF47A71 		movcs	r1, #1000
 419              	.LVL41:
 420 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 421 004a 7047     		bx	lr
 422              	.L33:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 20


 423              		.align	2
 424              	.L32:
 425 004c 00000000 		.word	htim1
 426              		.cfi_endproc
 427              	.LFE135:
 429              		.global	__aeabi_f2d
 430              		.global	__aeabi_d2uiz
 431              		.section	.text.turn,"ax",%progbits
 432              		.align	2
 433              		.global	turn
 434              		.thumb
 435              		.thumb_func
 437              	turn:
 438              	.LFB129:
 488:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 439              		.loc 1 488 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 24
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 444              	.LCFI9:
 445              		.cfi_def_cfa_offset 20
 446              		.cfi_offset 4, -20
 447              		.cfi_offset 5, -16
 448              		.cfi_offset 6, -12
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 0002 2DED028B 		fstmfdd	sp!, {d8}
 452              	.LCFI10:
 453              		.cfi_def_cfa_offset 28
 454              		.cfi_offset 80, -28
 455              		.cfi_offset 81, -24
 456 0006 87B0     		sub	sp, sp, #28
 457              	.LCFI11:
 458              		.cfi_def_cfa_offset 56
 489:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 459              		.loc 1 489 0
 460 0008 5948     		ldr	r0, .L45+16
 461 000a 5A49     		ldr	r1, .L45+20
 462 000c 4FF40062 		mov	r2, #2048
 463 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 464              	.LVL42:
 491:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 465              		.loc 1 491 0
 466 0014 6420     		movs	r0, #100
 467 0016 FFF7FEFF 		bl	HAL_Delay
 468              	.LVL43:
 492:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 469              		.loc 1 492 0
 470 001a 574E     		ldr	r6, .L45+24
 471 001c 7069     		ldr	r0, [r6, #20]
 472 001e 4000     		lsls	r0, r0, #1
 473 0020 FFF7FEFF 		bl	calculate_heading
 474              	.LVL44:
 475 0024 B0EE408A 		fcpys	s16, s0
 476              	.LVL45:
 493:Src/main.c    ****     TIM4->CNT = 0;
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 21


 477              		.loc 1 493 0
 478 0028 F0EEC07A 		fabss	s15, s0
 479 002c 17EE900A 		fmrs	r0, s15
 480 0030 FFF7FEFF 		bl	__aeabi_f2d
 481              	.LVL46:
 482 0034 0022     		movs	r2, #0
 483 0036 514B     		ldr	r3, .L45+28
 484 0038 FFF7FEFF 		bl	__aeabi_dmul
 485              	.LVL47:
 486 003c FFF7FEFF 		bl	__aeabi_d2uiz
 487              	.LVL48:
 488 0040 85B2     		uxth	r5, r0
 489              	.LVL49:
 494:Src/main.c    ****     TIM5->CNT = 0;
 490              		.loc 1 494 0
 491 0042 0024     		movs	r4, #0
 492 0044 4E4B     		ldr	r3, .L45+32
 493 0046 5C62     		str	r4, [r3, #36]
 495:Src/main.c    **** 
 494              		.loc 1 495 0
 495 0048 03F58063 		add	r3, r3, #1024
 496 004c 5C62     		str	r4, [r3, #36]
 497:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", counts);
 497              		.loc 1 497 0
 498 004e 0194     		str	r4, [sp, #4]
 499 0050 0294     		str	r4, [sp, #8]
 500 0052 0394     		str	r4, [sp, #12]
 501 0054 0494     		str	r4, [sp, #16]
 502 0056 ADF81440 		strh	r4, [sp, #20]	@ movhi
 498:Src/main.c    ****     print(msg, 0);
 503              		.loc 1 498 0
 504 005a 01A8     		add	r0, sp, #4
 505 005c 4949     		ldr	r1, .L45+36
 506 005e 2A46     		mov	r2, r5
 507 0060 FFF7FEFF 		bl	sprintf
 508              	.LVL50:
 499:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 509              		.loc 1 499 0
 510 0064 01A8     		add	r0, sp, #4
 511 0066 2146     		mov	r1, r4
 512 0068 FFF7FEFF 		bl	print
 513              	.LVL51:
 500:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 514              		.loc 1 500 0
 515 006c BDEEC87A 		ftosizs	s14, s16
 516              	.LVL52:
 501:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 517              		.loc 1 501 0
 518 0070 F8EEC77A 		fsitos	s15, s14
 519 0074 78EE677A 		fsubs	s15, s16, s15
 520 0078 DFED436A 		flds	s13, .L45+40
 521 007c 67EEA67A 		fmuls	s15, s15, s13
 522              	.LVL53:
 502:Src/main.c    ****     print(msg, 2);
 523              		.loc 1 502 0
 524 0080 01A8     		add	r0, sp, #4
 525 0082 4249     		ldr	r1, .L45+44
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 22


 526 0084 17EE102A 		fmrs	r2, s14	@ int
 527 0088 FDEEE77A 		ftosizs	s15, s15
 528              	.LVL54:
 529 008c 17EE903A 		fmrs	r3, s15	@ int
 530 0090 FFF7FEFF 		bl	sprintf
 531              	.LVL55:
 503:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %d\n", 2 * adc_values[5]);
 532              		.loc 1 503 0
 533 0094 01A8     		add	r0, sp, #4
 534 0096 0221     		movs	r1, #2
 535 0098 FFF7FEFF 		bl	print
 536              	.LVL56:
 504:Src/main.c    ****     print(msg, 0);
 537              		.loc 1 504 0
 538 009c 7269     		ldr	r2, [r6, #20]
 539 009e 01A8     		add	r0, sp, #4
 540 00a0 3B49     		ldr	r1, .L45+48
 541 00a2 5200     		lsls	r2, r2, #1
 542 00a4 FFF7FEFF 		bl	sprintf
 543              	.LVL57:
 505:Src/main.c    **** 
 544              		.loc 1 505 0
 545 00a8 01A8     		add	r0, sp, #4
 546 00aa 2146     		mov	r1, r4
 547 00ac FFF7FEFF 		bl	print
 548              	.LVL58:
 507:Src/main.c    ****     {
 549              		.loc 1 507 0
 550 00b0 18EE100A 		fmrs	r0, s16
 551 00b4 FFF7FEFF 		bl	__aeabi_f2d
 552              	.LVL59:
 553 00b8 0646     		mov	r6, r0
 554 00ba 0F46     		mov	r7, r1
 555 00bc 28A3     		adr	r3, .L45
 556 00be D3E90023 		ldrd	r2, [r3]
 557 00c2 FFF7FEFF 		bl	__aeabi_dcmplt
 558              	.LVL60:
 559 00c6 C8B1     		cbz	r0, .L43
 509:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 560              		.loc 1 509 0
 561 00c8 2046     		mov	r0, r4
 562 00ca 2146     		mov	r1, r4
 563 00cc FFF7FEFF 		bl	set_motor_speed
 564              	.LVL61:
 510:Src/main.c    ****         while (TIM5->CNT < counts)
 565              		.loc 1 510 0
 566 00d0 0820     		movs	r0, #8
 567 00d2 304B     		ldr	r3, .L45+52
 568 00d4 1988     		ldrh	r1, [r3]
 569 00d6 FFF7FEFF 		bl	set_motor_speed
 570              	.LVL62:
 571              	.L37:
 511:Src/main.c    ****         {
 572              		.loc 1 511 0 discriminator 1
 573 00da 2F4B     		ldr	r3, .L45+56
 574 00dc 5B6A     		ldr	r3, [r3, #36]
 575 00de AB42     		cmp	r3, r5
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 23


 576 00e0 FBD3     		bcc	.L37
 516:Src/main.c    ****         print(msg, 4);
 577              		.loc 1 516 0
 578 00e2 2D4C     		ldr	r4, .L45+56
 579 00e4 626A     		ldr	r2, [r4, #36]
 580 00e6 01A8     		add	r0, sp, #4
 581 00e8 2C49     		ldr	r1, .L45+60
 582 00ea FFF7FEFF 		bl	sprintf
 583              	.LVL63:
 517:Src/main.c    ****         TIM5->CNT = 0;
 584              		.loc 1 517 0
 585 00ee 01A8     		add	r0, sp, #4
 586 00f0 0421     		movs	r1, #4
 587 00f2 FFF7FEFF 		bl	print
 588              	.LVL64:
 518:Src/main.c    ****     }
 589              		.loc 1 518 0
 590 00f6 0023     		movs	r3, #0
 591 00f8 6362     		str	r3, [r4, #36]
 592 00fa 20E0     		b	.L38
 593              	.L43:
 520:Src/main.c    ****     {
 594              		.loc 1 520 0
 595 00fc 3046     		mov	r0, r6
 596 00fe 3946     		mov	r1, r7
 597 0100 19A3     		adr	r3, .L45+8
 598 0102 D3E90023 		ldrd	r2, [r3]
 599 0106 FFF7FEFF 		bl	__aeabi_dcmpgt
 600              	.LVL65:
 601 010a C0B1     		cbz	r0, .L38
 522:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 602              		.loc 1 522 0
 603 010c 0020     		movs	r0, #0
 604 010e 244B     		ldr	r3, .L45+64
 605 0110 1988     		ldrh	r1, [r3]
 606 0112 FFF7FEFF 		bl	set_motor_speed
 607              	.LVL66:
 523:Src/main.c    ****         while (TIM4->CNT < counts)
 608              		.loc 1 523 0
 609 0116 0820     		movs	r0, #8
 610 0118 0021     		movs	r1, #0
 611 011a FFF7FEFF 		bl	set_motor_speed
 612              	.LVL67:
 613              	.L40:
 524:Src/main.c    ****         {
 614              		.loc 1 524 0 discriminator 1
 615 011e 184B     		ldr	r3, .L45+32
 616 0120 5B6A     		ldr	r3, [r3, #36]
 617 0122 AB42     		cmp	r3, r5
 618 0124 FBD3     		bcc	.L40
 529:Src/main.c    ****         print(msg, 4);
 619              		.loc 1 529 0
 620 0126 164C     		ldr	r4, .L45+32
 621 0128 626A     		ldr	r2, [r4, #36]
 622 012a 01A8     		add	r0, sp, #4
 623 012c 1D49     		ldr	r1, .L45+68
 624 012e FFF7FEFF 		bl	sprintf
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 24


 625              	.LVL68:
 530:Src/main.c    ****         TIM4->CNT = 0;
 626              		.loc 1 530 0
 627 0132 01A8     		add	r0, sp, #4
 628 0134 0421     		movs	r1, #4
 629 0136 FFF7FEFF 		bl	print
 630              	.LVL69:
 531:Src/main.c    ****     }
 631              		.loc 1 531 0
 632 013a 0023     		movs	r3, #0
 633 013c 6362     		str	r3, [r4, #36]
 634              	.L38:
 533:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 635              		.loc 1 533 0
 636 013e 0020     		movs	r0, #0
 637 0140 0146     		mov	r1, r0
 638 0142 FFF7FEFF 		bl	set_motor_speed
 639              	.LVL70:
 534:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 640              		.loc 1 534 0
 641 0146 0820     		movs	r0, #8
 642 0148 0021     		movs	r1, #0
 643 014a FFF7FEFF 		bl	set_motor_speed
 644              	.LVL71:
 535:Src/main.c    **** }
 645              		.loc 1 535 0
 646 014e 0848     		ldr	r0, .L45+16
 647 0150 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 648              	.LVL72:
 536:Src/main.c    **** 
 649              		.loc 1 536 0
 650 0154 07B0     		add	sp, sp, #28
 651              	.LCFI12:
 652              		.cfi_def_cfa_offset 28
 653              		@ sp needed
 654 0156 BDEC028B 		fldmfdd	sp!, {d8}
 655              	.LCFI13:
 656              		.cfi_restore 80
 657              		.cfi_restore 81
 658              		.cfi_def_cfa_offset 20
 659              	.LVL73:
 660 015a F0BD     		pop	{r4, r5, r6, r7, pc}
 661              	.LVL74:
 662              	.L46:
 663 015c AFF30080 		.align	3
 664              	.L45:
 665 0160 7B14AE47 		.word	1202590843
 666 0164 E17AA4BF 		.word	-1079739679
 667 0168 7B14AE47 		.word	1202590843
 668 016c E17AA43F 		.word	1067743969
 669 0170 00000000 		.word	hadc1
 670 0174 00000000 		.word	dma_buffer
 671 0178 00000000 		.word	adc_values
 672 017c 00805B40 		.word	1079738368
 673 0180 00080040 		.word	1073743872
 674 0184 14000000 		.word	.LC2
 675 0188 00007A44 		.word	1148846080
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 25


 676 018c 28000000 		.word	.LC3
 677 0190 3C000000 		.word	.LC4
 678 0194 00000000 		.word	.LANCHOR0
 679 0198 000C0040 		.word	1073744896
 680 019c 50000000 		.word	.LC5
 681 01a0 00000000 		.word	.LANCHOR1
 682 01a4 68000000 		.word	.LC6
 683              		.cfi_endproc
 684              	.LFE129:
 686              		.global	__aeabi_i2d
 687              		.global	__aeabi_dadd
 688              		.global	__aeabi_d2iz
 689              		.section	.text.turn_deg,"ax",%progbits
 690              		.align	2
 691              		.global	turn_deg
 692              		.thumb
 693              		.thumb_func
 695              	turn_deg:
 696              	.LFB130:
 543:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 697              		.loc 1 543 0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 56
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701              	.LVL75:
 702 0000 70B5     		push	{r4, r5, r6, lr}
 703              	.LCFI14:
 704              		.cfi_def_cfa_offset 16
 705              		.cfi_offset 4, -16
 706              		.cfi_offset 5, -12
 707              		.cfi_offset 6, -8
 708              		.cfi_offset 14, -4
 709 0002 8EB0     		sub	sp, sp, #56
 710              	.LCFI15:
 711              		.cfi_def_cfa_offset 72
 712 0004 0646     		mov	r6, r0
 544:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 713              		.loc 1 544 0
 714 0006 4248     		ldr	r0, .L54+8
 715              	.LVL76:
 716 0008 4249     		ldr	r1, .L54+12
 717 000a 4FF40062 		mov	r2, #2048
 718 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 719              	.LVL77:
 545:Src/main.c    ****     if (counts < 0) counts = -counts;
 720              		.loc 1 545 0
 721 0012 A6F15A00 		sub	r0, r6, #90
 722 0016 FFF7FEFF 		bl	__aeabi_i2d
 723              	.LVL78:
 724 001a 3BA3     		adr	r3, .L54
 725 001c D3E90023 		ldrd	r2, [r3]
 726 0020 FFF7FEFF 		bl	__aeabi_dmul
 727              	.LVL79:
 728 0024 0022     		movs	r2, #0
 729 0026 3C4B     		ldr	r3, .L54+16
 730 0028 FFF7FEFF 		bl	__aeabi_dadd
 731              	.LVL80:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 26


 732 002c FFF7FEFF 		bl	__aeabi_d2iz
 733              	.LVL81:
 734 0030 85B2     		uxth	r5, r0
 735              	.LVL82:
 546:Src/main.c    ****     TIM4->CNT = 0;
 736              		.loc 1 546 0
 737 0032 15F4004F 		tst	r5, #32768
 738 0036 01D0     		beq	.L48
 546:Src/main.c    ****     TIM4->CNT = 0;
 739              		.loc 1 546 0 is_stmt 0 discriminator 1
 740 0038 6D42     		negs	r5, r5
 741              	.LVL83:
 742 003a ADB2     		uxth	r5, r5
 743              	.LVL84:
 744              	.L48:
 547:Src/main.c    ****     TIM5->CNT = 0;
 745              		.loc 1 547 0 is_stmt 1
 746 003c 0024     		movs	r4, #0
 747 003e 374B     		ldr	r3, .L54+20
 748 0040 5C62     		str	r4, [r3, #36]
 548:Src/main.c    **** 
 749              		.loc 1 548 0
 750 0042 03F58063 		add	r3, r3, #1024
 751 0046 5C62     		str	r4, [r3, #36]
 550:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 752              		.loc 1 550 0
 753 0048 0194     		str	r4, [sp, #4]
 754 004a 0294     		str	r4, [sp, #8]
 755 004c 0394     		str	r4, [sp, #12]
 756 004e 0494     		str	r4, [sp, #16]
 757 0050 0594     		str	r4, [sp, #20]
 758 0052 0694     		str	r4, [sp, #24]
 759 0054 0794     		str	r4, [sp, #28]
 760 0056 0894     		str	r4, [sp, #32]
 761 0058 0994     		str	r4, [sp, #36]
 762 005a 0A94     		str	r4, [sp, #40]
 763 005c 0B94     		str	r4, [sp, #44]
 764 005e 0C94     		str	r4, [sp, #48]
 765 0060 ADF83440 		strh	r4, [sp, #52]	@ movhi
 551:Src/main.c    ****     print(msg, 0);
 766              		.loc 1 551 0
 767 0064 01A8     		add	r0, sp, #4
 768 0066 2E49     		ldr	r1, .L54+24
 769 0068 2AB2     		sxth	r2, r5
 770 006a FFF7FEFF 		bl	sprintf
 771              	.LVL85:
 552:Src/main.c    **** 
 772              		.loc 1 552 0
 773 006e 01A8     		add	r0, sp, #4
 774 0070 2146     		mov	r1, r4
 775 0072 FFF7FEFF 		bl	print
 776              	.LVL86:
 554:Src/main.c    ****     {
 777              		.loc 1 554 0
 778 0076 A642     		cmp	r6, r4
 779 0078 1ADD     		ble	.L49
 556:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 27


 780              		.loc 1 556 0
 781 007a 2046     		mov	r0, r4
 782 007c 294B     		ldr	r3, .L54+28
 783 007e 1988     		ldrh	r1, [r3]
 784 0080 FFF7FEFF 		bl	set_motor_speed
 785              	.LVL87:
 557:Src/main.c    ****         while (TIM4->CNT < counts)
 786              		.loc 1 557 0
 787 0084 0820     		movs	r0, #8
 788 0086 2146     		mov	r1, r4
 789 0088 FFF7FEFF 		bl	set_motor_speed
 790              	.LVL88:
 791              	.L50:
 558:Src/main.c    ****         {
 792              		.loc 1 558 0 discriminator 1
 793 008c 234B     		ldr	r3, .L54+20
 794 008e 5A6A     		ldr	r2, [r3, #36]
 795 0090 2BB2     		sxth	r3, r5
 796 0092 9A42     		cmp	r2, r3
 797 0094 FAD3     		bcc	.L50
 563:Src/main.c    ****         print(msg, 4);
 798              		.loc 1 563 0
 799 0096 244C     		ldr	r4, .L54+32
 800 0098 626A     		ldr	r2, [r4, #36]
 801 009a 01A8     		add	r0, sp, #4
 802 009c 2349     		ldr	r1, .L54+36
 803 009e FFF7FEFF 		bl	sprintf
 804              	.LVL89:
 564:Src/main.c    ****         TIM5->CNT = 0;
 805              		.loc 1 564 0
 806 00a2 01A8     		add	r0, sp, #4
 807 00a4 0421     		movs	r1, #4
 808 00a6 FFF7FEFF 		bl	print
 809              	.LVL90:
 565:Src/main.c    ****     }
 810              		.loc 1 565 0
 811 00aa 0023     		movs	r3, #0
 812 00ac 6362     		str	r3, [r4, #36]
 813 00ae 1BE0     		b	.L51
 814              	.L49:
 567:Src/main.c    ****     {
 815              		.loc 1 567 0
 816 00b0 002E     		cmp	r6, #0
 817 00b2 19DA     		bge	.L51
 569:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 818              		.loc 1 569 0
 819 00b4 0020     		movs	r0, #0
 820 00b6 0146     		mov	r1, r0
 821 00b8 FFF7FEFF 		bl	set_motor_speed
 822              	.LVL91:
 570:Src/main.c    ****         while (TIM5->CNT < counts)
 823              		.loc 1 570 0
 824 00bc 0820     		movs	r0, #8
 825 00be 1C4B     		ldr	r3, .L54+40
 826 00c0 1988     		ldrh	r1, [r3]
 827 00c2 FFF7FEFF 		bl	set_motor_speed
 828              	.LVL92:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 28


 829              	.L52:
 571:Src/main.c    ****         {
 830              		.loc 1 571 0 discriminator 1
 831 00c6 184B     		ldr	r3, .L54+32
 832 00c8 5A6A     		ldr	r2, [r3, #36]
 833 00ca 2BB2     		sxth	r3, r5
 834 00cc 9A42     		cmp	r2, r3
 835 00ce FAD3     		bcc	.L52
 576:Src/main.c    ****         print(msg, 4);
 836              		.loc 1 576 0
 837 00d0 124C     		ldr	r4, .L54+20
 838 00d2 626A     		ldr	r2, [r4, #36]
 839 00d4 01A8     		add	r0, sp, #4
 840 00d6 1749     		ldr	r1, .L54+44
 841 00d8 FFF7FEFF 		bl	sprintf
 842              	.LVL93:
 577:Src/main.c    ****         TIM4->CNT = 0;
 843              		.loc 1 577 0
 844 00dc 01A8     		add	r0, sp, #4
 845 00de 0421     		movs	r1, #4
 846 00e0 FFF7FEFF 		bl	print
 847              	.LVL94:
 578:Src/main.c    ****     }
 848              		.loc 1 578 0
 849 00e4 0023     		movs	r3, #0
 850 00e6 6362     		str	r3, [r4, #36]
 851              	.L51:
 580:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 852              		.loc 1 580 0
 853 00e8 0020     		movs	r0, #0
 854 00ea 0146     		mov	r1, r0
 855 00ec FFF7FEFF 		bl	set_motor_speed
 856              	.LVL95:
 581:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 857              		.loc 1 581 0
 858 00f0 0820     		movs	r0, #8
 859 00f2 0021     		movs	r1, #0
 860 00f4 FFF7FEFF 		bl	set_motor_speed
 861              	.LVL96:
 582:Src/main.c    **** }
 862              		.loc 1 582 0
 863 00f8 0548     		ldr	r0, .L54+8
 864 00fa FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 865              	.LVL97:
 583:Src/main.c    **** 
 866              		.loc 1 583 0
 867 00fe 0EB0     		add	sp, sp, #56
 868              	.LCFI16:
 869              		.cfi_def_cfa_offset 16
 870              		@ sp needed
 871 0100 70BD     		pop	{r4, r5, r6, pc}
 872              	.LVL98:
 873              	.L55:
 874 0102 00BFAFF3 		.align	3
 874      0080
 875              	.L54:
 876 0108 721CC771 		.word	1908874354
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 29


 877 010c 1CC7E13F 		.word	1071761180
 878 0110 00000000 		.word	hadc1
 879 0114 00000000 		.word	dma_buffer
 880 0118 00004940 		.word	1078525952
 881 011c 00080040 		.word	1073743872
 882 0120 80000000 		.word	.LC7
 883 0124 00000000 		.word	.LANCHOR1
 884 0128 000C0040 		.word	1073744896
 885 012c 9C000000 		.word	.LC8
 886 0130 00000000 		.word	.LANCHOR0
 887 0134 B8000000 		.word	.LC9
 888              		.cfi_endproc
 889              	.LFE130:
 891              		.section	.text.encoder_pid,"ax",%progbits
 892              		.align	2
 893              		.global	encoder_pid
 894              		.thumb
 895              		.thumb_func
 897              	encoder_pid:
 898              	.LFB136:
 672:Src/main.c    **** }
 673:Src/main.c    **** 
 674:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 675:Src/main.c    **** {
 899              		.loc 1 675 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903              	.LVL99:
 904 0000 38B5     		push	{r3, r4, r5, lr}
 905              	.LCFI17:
 906              		.cfi_def_cfa_offset 16
 907              		.cfi_offset 3, -16
 908              		.cfi_offset 4, -12
 909              		.cfi_offset 5, -8
 910              		.cfi_offset 14, -4
 676:Src/main.c    ****     /* Get error */
 677:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
 911              		.loc 1 677 0
 912 0002 0E4B     		ldr	r3, .L60
 913 0004 5C6A     		ldr	r4, [r3, #36]
 914              	.LVL100:
 678:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
 915              		.loc 1 678 0
 916 0006 03F58063 		add	r3, r3, #1024
 917 000a 5D6A     		ldr	r5, [r3, #36]
 918              	.LVL101:
 679:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
 919              		.loc 1 679 0
 920 000c 631B     		subs	r3, r4, r5
 921 000e 0361     		str	r3, [r0, #16]
 680:Src/main.c    **** 
 681:Src/main.c    ****     /* Get gain */
 682:Src/main.c    ****     // Gain <0 for ride side faster
 683:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
 922              		.loc 1 683 0
 923 0010 FFF7FEFF 		bl	pid_GetGain
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 30


 924              	.LVL102:
 684:Src/main.c    **** 
 685:Src/main.c    ****     /* Set Motor Speeds*/
 686:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 687:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 688:Src/main.c    ****     if (gain < 0)
 689:Src/main.c    ****     {
 690:Src/main.c    ****         lspeed -= gain;
 691:Src/main.c    ****     }
 692:Src/main.c    ****     else if (gain > 0)
 693:Src/main.c    ****     {
 694:Src/main.c    ****         rspeed += gain;
 695:Src/main.c    ****     }
 696:Src/main.c    **** 
 697:Src/main.c    ****     // char msg[18] = "";
 698:Src/main.c    ****     // sprintf(msg, "LS: %lu", lspeed);
 699:Src/main.c    ****     // print(msg, 0);
 700:Src/main.c    ****     // sprintf(msg, "RS: %lu", rspeed);
 701:Src/main.c    ****     // print(msg, 1);
 702:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, lspeed);
 703:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, rspeed);
 704:Src/main.c    **** 
 705:Src/main.c    ****     /* Prevent weird overflow shit */
 706:Src/main.c    ****     if (lcnt > 60000 || rcnt > 60000)
 925              		.loc 1 706 0
 926 0014 4EF66023 		movw	r3, #60000
 927 0018 9C42     		cmp	r4, r3
 928 001a 01D8     		bhi	.L57
 929              		.loc 1 706 0 is_stmt 0 discriminator 1
 930 001c 9D42     		cmp	r5, r3
 931 001e 0CD9     		bls	.L56
 932              	.L57:
 707:Src/main.c    ****     {
 708:Src/main.c    ****         TIM4->CNT -= 50000;
 933              		.loc 1 708 0 is_stmt 1
 934 0020 064A     		ldr	r2, .L60
 935 0022 536A     		ldr	r3, [r2, #36]
 936 0024 A3F54343 		sub	r3, r3, #49920
 937 0028 503B     		subs	r3, r3, #80
 938 002a 5362     		str	r3, [r2, #36]
 939              	.LVL103:
 709:Src/main.c    ****         TIM5->CNT -= 50000;
 940              		.loc 1 709 0
 941 002c 02F58062 		add	r2, r2, #1024
 942 0030 536A     		ldr	r3, [r2, #36]
 943 0032 A3F54343 		sub	r3, r3, #49920
 944 0036 503B     		subs	r3, r3, #80
 945 0038 5362     		str	r3, [r2, #36]
 946              	.L56:
 947 003a 38BD     		pop	{r3, r4, r5, pc}
 948              	.LVL104:
 949              	.L61:
 950              		.align	2
 951              	.L60:
 952 003c 00080040 		.word	1073743872
 953              		.cfi_endproc
 954              	.LFE136:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 31


 956              		.section	.text.drive_straight,"ax",%progbits
 957              		.align	2
 958              		.global	drive_straight
 959              		.thumb
 960              		.thumb_func
 962              	drive_straight:
 963              	.LFB128:
 477:Src/main.c    ****     encoder_pid(enc_pid);
 964              		.loc 1 477 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 0
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 968              	.LVL105:
 969 0000 08B5     		push	{r3, lr}
 970              	.LCFI18:
 971              		.cfi_def_cfa_offset 8
 972              		.cfi_offset 3, -8
 973              		.cfi_offset 14, -4
 478:Src/main.c    ****     HAL_Delay(10);
 974              		.loc 1 478 0
 975 0002 FFF7FEFF 		bl	encoder_pid
 976              	.LVL106:
 479:Src/main.c    ****     
 977              		.loc 1 479 0
 978 0006 0A20     		movs	r0, #10
 979 0008 FFF7FEFF 		bl	HAL_Delay
 980              	.LVL107:
 981 000c 08BD     		pop	{r3, pc}
 982              		.cfi_endproc
 983              	.LFE128:
 985 000e 00BF     		.section	.text.square_edge,"ax",%progbits
 986              		.align	2
 987              		.global	square_edge
 988              		.thumb
 989              		.thumb_func
 991              	square_edge:
 992              	.LFB126:
 410:Src/main.c    ****     while (1)
 993              		.loc 1 410 0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 56
 996              		@ frame_needed = 0, uses_anonymous_args = 0
 997              	.LVL108:
 998 0000 70B5     		push	{r4, r5, r6, lr}
 999              	.LCFI19:
 1000              		.cfi_def_cfa_offset 16
 1001              		.cfi_offset 4, -16
 1002              		.cfi_offset 5, -12
 1003              		.cfi_offset 6, -8
 1004              		.cfi_offset 14, -4
 1005 0002 8EB0     		sub	sp, sp, #56
 1006              	.LCFI20:
 1007              		.cfi_def_cfa_offset 72
 1008 0004 0646     		mov	r6, r0
 1009              	.LVL109:
 1010              	.L70:
 1011              	.LBB2:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 32


 413:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | EL: %d\n", EDGE_LEFT_STATE == FLAGGED ? 1 : 0);
 1012              		.loc 1 413 0
 1013 0006 0024     		movs	r4, #0
 1014 0008 0194     		str	r4, [sp, #4]
 1015 000a 0294     		str	r4, [sp, #8]
 1016 000c 0394     		str	r4, [sp, #12]
 1017 000e 0494     		str	r4, [sp, #16]
 1018 0010 0594     		str	r4, [sp, #20]
 1019 0012 0694     		str	r4, [sp, #24]
 1020 0014 0794     		str	r4, [sp, #28]
 1021 0016 0894     		str	r4, [sp, #32]
 1022 0018 0994     		str	r4, [sp, #36]
 1023 001a 0A94     		str	r4, [sp, #40]
 1024 001c 0B94     		str	r4, [sp, #44]
 1025 001e 0C94     		str	r4, [sp, #48]
 1026 0020 ADF83440 		strh	r4, [sp, #52]	@ movhi
 414:Src/main.c    ****         print(msg, 0);
 1027              		.loc 1 414 0
 1028 0024 1F4D     		ldr	r5, .L72
 1029 0026 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 1030 0028 01A8     		add	r0, sp, #4
 1031 002a 1F49     		ldr	r1, .L72+4
 1032 002c 012A     		cmp	r2, #1
 1033 002e 14BF     		ite	ne
 1034 0030 0022     		movne	r2, #0
 1035 0032 0122     		moveq	r2, #1
 1036 0034 FFF7FEFF 		bl	sprintf
 1037              	.LVL110:
 415:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | ER: %d\n", EDGE_RIGHT_STATE == FLAGGED ? 1 : 0);
 1038              		.loc 1 415 0
 1039 0038 01A8     		add	r0, sp, #4
 1040 003a 2146     		mov	r1, r4
 1041 003c FFF7FEFF 		bl	print
 1042              	.LVL111:
 416:Src/main.c    ****         print(msg, 0);
 1043              		.loc 1 416 0
 1044 0040 1A4B     		ldr	r3, .L72+8
 1045 0042 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1046 0044 01A8     		add	r0, sp, #4
 1047 0046 1A49     		ldr	r1, .L72+12
 1048 0048 012A     		cmp	r2, #1
 1049 004a 14BF     		ite	ne
 1050 004c 0022     		movne	r2, #0
 1051 004e 0122     		moveq	r2, #1
 1052 0050 FFF7FEFF 		bl	sprintf
 1053              	.LVL112:
 417:Src/main.c    ****         print("\n", 0);
 1054              		.loc 1 417 0
 1055 0054 01A8     		add	r0, sp, #4
 1056 0056 2146     		mov	r1, r4
 1057 0058 FFF7FEFF 		bl	print
 1058              	.LVL113:
 418:Src/main.c    ****         drive_straight(enc_pid);
 1059              		.loc 1 418 0
 1060 005c 1548     		ldr	r0, .L72+16
 1061 005e 2146     		mov	r1, r4
 1062 0060 FFF7FEFF 		bl	print
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 33


 1063              	.LVL114:
 419:Src/main.c    ****         if (EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED)
 1064              		.loc 1 419 0
 1065 0064 3046     		mov	r0, r6
 1066 0066 FFF7FEFF 		bl	drive_straight
 1067              	.LVL115:
 420:Src/main.c    ****         {
 1068              		.loc 1 420 0
 1069 006a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 1070 006c 012B     		cmp	r3, #1
 1071 006e 03D0     		beq	.L65
 420:Src/main.c    ****         {
 1072              		.loc 1 420 0 is_stmt 0 discriminator 1
 1073 0070 0E4A     		ldr	r2, .L72+8
 1074 0072 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1075 0074 012A     		cmp	r2, #1
 1076 0076 0ED1     		bne	.L66
 1077              	.L65:
 423:Src/main.c    ****             {
 1078              		.loc 1 423 0 is_stmt 1
 1079 0078 012B     		cmp	r3, #1
 1080 007a 03D1     		bne	.L67
 425:Src/main.c    ****             }
 1081              		.loc 1 425 0
 1082 007c 0020     		movs	r0, #0
 1083 007e 0146     		mov	r1, r0
 1084 0080 FFF7FEFF 		bl	set_motor_speed
 1085              	.LVL116:
 1086              	.L67:
 427:Src/main.c    ****             {
 1087              		.loc 1 427 0
 1088 0084 094B     		ldr	r3, .L72+8
 1089 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1090 0088 012B     		cmp	r3, #1
 1091 008a BCD1     		bne	.L70
 429:Src/main.c    ****             }
 1092              		.loc 1 429 0
 1093 008c 0820     		movs	r0, #8
 1094 008e 0021     		movs	r1, #0
 1095 0090 FFF7FEFF 		bl	set_motor_speed
 1096              	.LVL117:
 1097 0094 B7E7     		b	.L70
 1098              	.L66:
 432:Src/main.c    ****         {
 1099              		.loc 1 432 0
 1100 0096 012B     		cmp	r3, #1
 1101 0098 B5D1     		bne	.L70
 432:Src/main.c    ****         {
 1102              		.loc 1 432 0 is_stmt 0 discriminator 1
 1103 009a 012A     		cmp	r2, #1
 1104 009c B3D1     		bne	.L70
 1105              	.LBE2:
 437:Src/main.c    **** 
 1106              		.loc 1 437 0 is_stmt 1
 1107 009e 0EB0     		add	sp, sp, #56
 1108              	.LCFI21:
 1109              		.cfi_def_cfa_offset 16
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 34


 1110              		@ sp needed
 1111 00a0 70BD     		pop	{r4, r5, r6, pc}
 1112              	.LVL118:
 1113              	.L73:
 1114 00a2 00BF     		.align	2
 1115              	.L72:
 1116 00a4 00000000 		.word	EDGE_LEFT_STATE
 1117 00a8 D4000000 		.word	.LC10
 1118 00ac 00000000 		.word	EDGE_RIGHT_STATE
 1119 00b0 EC000000 		.word	.LC11
 1120 00b4 04010000 		.word	.LC12
 1121              		.cfi_endproc
 1122              	.LFE126:
 1124              		.section	.text.debounce_and_grab,"ax",%progbits
 1125              		.align	2
 1126              		.global	debounce_and_grab
 1127              		.thumb
 1128              		.thumb_func
 1130              	debounce_and_grab:
 1131              	.LFB137:
 710:Src/main.c    ****     }
 711:Src/main.c    **** }
 712:Src/main.c    **** 
 713:Src/main.c    **** int debounce_and_grab(ewok_cnt, enc_pid)
 714:Src/main.c    **** {
 1132              		.loc 1 714 0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 8
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              	.LVL119:
 1137 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1138              	.LCFI22:
 1139              		.cfi_def_cfa_offset 24
 1140              		.cfi_offset 4, -24
 1141              		.cfi_offset 5, -20
 1142              		.cfi_offset 6, -16
 1143              		.cfi_offset 7, -12
 1144              		.cfi_offset 8, -8
 1145              		.cfi_offset 14, -4
 1146 0004 82B0     		sub	sp, sp, #8
 1147              	.LCFI23:
 1148              		.cfi_def_cfa_offset 32
 1149 0006 0646     		mov	r6, r0
 1150 0008 0191     		str	r1, [sp, #4]
 715:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 1151              		.loc 1 715 0
 1152 000a 0020     		movs	r0, #0
 1153              	.LVL120:
 1154 000c 0146     		mov	r1, r0
 1155              	.LVL121:
 1156 000e FFF7FEFF 		bl	set_motor_speed
 1157              	.LVL122:
 716:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1158              		.loc 1 716 0
 1159 0012 0820     		movs	r0, #8
 1160 0014 0021     		movs	r1, #0
 1161 0016 FFF7FEFF 		bl	set_motor_speed
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 35


 1162              	.LVL123:
 717:Src/main.c    ****     uint32_t timeee = HAL_GetTick();
 1163              		.loc 1 717 0
 1164 001a FFF7FEFF 		bl	HAL_GetTick
 1165              	.LVL124:
 1166 001e 0446     		mov	r4, r0
 1167              	.LVL125:
 718:Src/main.c    ****     // int count = 0;
 719:Src/main.c    ****     int ewok = TRUE;
 720:Src/main.c    ****     // while (HAL_GetTick() - timeee < 50)
 721:Src/main.c    ****     // {
 722:Src/main.c    ****     //     ++count;
 723:Src/main.c    ****     //     HAL_Delay(5);
 724:Src/main.c    ****     //     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_RESET)
 725:Src/main.c    ****     //     {
 726:Src/main.c    ****     //         print("CLAW_GRAB | Claw debounced. No ewok found\n", 0);
 727:Src/main.c    ****     //         ewok = FALSE;
 728:Src/main.c    ****     //         break;
 729:Src/main.c    ****     //     }
 730:Src/main.c    ****     // }
 731:Src/main.c    ****     // char msg[50] = "";
 732:Src/main.c    ****     // sprintf(msg, "CLAW_GRAB | Debounced with %d checks\n", count);
 733:Src/main.c    ****     // print(msg, 0);
 734:Src/main.c    ****     // If claw is still high, we have an ewok. Stop, grab it, continue on
 735:Src/main.c    ****     // hardcoded procedure
 736:Src/main.c    ****     if (ewok)
 737:Src/main.c    ****     {
 738:Src/main.c    ****         print("CLAW_GRAB | grabbing ewok\n", 0);
 1168              		.loc 1 738 0
 1169 0020 A348     		ldr	r0, .L93
 1170              	.LVL126:
 1171 0022 0021     		movs	r1, #0
 1172 0024 FFF7FEFF 		bl	print
 1173              	.LVL127:
 739:Src/main.c    ****         HAL_Delay(400);
 1174              		.loc 1 739 0
 1175 0028 4FF4C870 		mov	r0, #400
 1176 002c FFF7FEFF 		bl	HAL_Delay
 1177              	.LVL128:
 740:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1178              		.loc 1 740 0
 1179 0030 0020     		movs	r0, #0
 1180 0032 0146     		mov	r1, r0
 1181 0034 FFF7FEFF 		bl	set_motor_speed
 1182              	.LVL129:
 741:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1183              		.loc 1 741 0
 1184 0038 0820     		movs	r0, #8
 1185 003a 0021     		movs	r1, #0
 1186 003c FFF7FEFF 		bl	set_motor_speed
 1187              	.LVL130:
 742:Src/main.c    ****         close_claw(&htim3);
 1188              		.loc 1 742 0
 1189 0040 9C4D     		ldr	r5, .L93+4
 1190 0042 2846     		mov	r0, r5
 1191 0044 FFF7FEFF 		bl	close_claw
 1192              	.LVL131:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 36


 743:Src/main.c    ****         arm_up(&htim3);
 1193              		.loc 1 743 0
 1194 0048 2846     		mov	r0, r5
 1195 004a FFF7FEFF 		bl	arm_up
 1196              	.LVL132:
 744:Src/main.c    ****         // TODO: delete next line, there for testing!!!
 745:Src/main.c    ****         HAL_Delay(1000);
 1197              		.loc 1 745 0
 1198 004e 4FF47A70 		mov	r0, #1000
 1199 0052 FFF7FEFF 		bl	HAL_Delay
 1200              	.LVL133:
 746:Src/main.c    ****         ++ewok_cnt;
 747:Src/main.c    ****         // char msg[18] = "";
 748:Src/main.c    ****         // sprintf(msg, "wok_cnt: %d\n", ewok_cnt);
 749:Src/main.c    ****         // print(msg, 0);
 750:Src/main.c    ****         /*
 751:Src/main.c    ****             * Claw is up and closed
 752:Src/main.c    ****             * Ewok Count incremented
 753:Src/main.c    ****             * Motors not powered
 754:Src/main.c    ****             * CLAW_INT_STATE not FLAGGED, interrupt disabled
 755:Src/main.c    ****             */
 756:Src/main.c    **** 
 757:Src/main.c    ****         // For the first ewok, turn left, arm up, square robot w/ edge,
 758:Src/main.c    ****         // drive straight for 3 s, bring arm down
 759:Src/main.c    ****         if (ewok_cnt == 1)
 1201              		.loc 1 759 0
 1202 0056 751C     		adds	r5, r6, #1
 1203              	.LVL134:
 1204 0058 96B9     		cbnz	r6, .L75
 760:Src/main.c    ****         {
 761:Src/main.c    ****             print("First ewok captured\n", 0);
 1205              		.loc 1 761 0
 1206 005a 9748     		ldr	r0, .L93+8
 1207 005c 0021     		movs	r1, #0
 1208 005e FFF7FEFF 		bl	print
 1209              	.LVL135:
 762:Src/main.c    ****             turn_deg(-400);
 1210              		.loc 1 762 0
 1211 0062 9648     		ldr	r0, .L93+12
 1212 0064 FFF7FEFF 		bl	turn_deg
 1213              	.LVL136:
 763:Src/main.c    ****             open_claw(&htim3);
 1214              		.loc 1 763 0
 1215 0068 9248     		ldr	r0, .L93+4
 1216 006a FFF7FEFF 		bl	open_claw
 1217              	.LVL137:
 764:Src/main.c    ****             // TODO: Add edge squaring back in
 765:Src/main.c    ****             // set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 766:Src/main.c    ****             // set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 767:Src/main.c    ****             // square_edge(&enc_pid);
 768:Src/main.c    ****             drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 10000);
 1218              		.loc 1 768 0
 1219 006e 01A8     		add	r0, sp, #4
 1220              	.LVL138:
 1221 0070 934B     		ldr	r3, .L93+16
 1222 0072 1988     		ldrh	r1, [r3]
 1223 0074 934B     		ldr	r3, .L93+20
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 37


 1224 0076 1A88     		ldrh	r2, [r3]
 1225 0078 42F21073 		movw	r3, #10000
 1226 007c FFF7FEFF 		bl	drive_straight_time
 1227              	.LVL139:
 1228              	.L75:
 769:Src/main.c    ****         }
 770:Src/main.c    **** 
 771:Src/main.c    ****         if (ewok_cnt == 2)
 1229              		.loc 1 771 0
 1230 0080 022D     		cmp	r5, #2
 1231 0082 5ED1     		bne	.L76
 772:Src/main.c    ****         {
 773:Src/main.c    ****             print("Second ewok captured\n",0);
 1232              		.loc 1 773 0
 1233 0084 9048     		ldr	r0, .L93+24
 1234 0086 0021     		movs	r1, #0
 1235 0088 FFF7FEFF 		bl	print
 1236              	.LVL140:
 774:Src/main.c    ****             turn_deg(-110); //  Prolly have to change this
 1237              		.loc 1 774 0
 1238 008c 6FF06D00 		mvn	r0, #109
 1239 0090 FFF7FEFF 		bl	turn_deg
 1240              	.LVL141:
 775:Src/main.c    ****             alarm_detect();
 1241              		.loc 1 775 0
 1242 0094 FFF7FEFF 		bl	alarm_detect
 1243              	.LVL142:
 776:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1244              		.loc 1 776 0
 1245 0098 0820     		movs	r0, #8
 1246 009a 8A4B     		ldr	r3, .L93+20
 1247 009c 1988     		ldrh	r1, [r3]
 1248 009e FFF7FEFF 		bl	set_motor_speed
 1249              	.LVL143:
 777:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1250              		.loc 1 777 0
 1251 00a2 0020     		movs	r0, #0
 1252 00a4 864B     		ldr	r3, .L93+16
 1253 00a6 1988     		ldrh	r1, [r3]
 1254 00a8 FFF7FEFF 		bl	set_motor_speed
 1255              	.LVL144:
 778:Src/main.c    ****             open_claw(&htim3);
 1256              		.loc 1 778 0
 1257 00ac 8148     		ldr	r0, .L93+4
 1258 00ae FFF7FEFF 		bl	open_claw
 1259              	.LVL145:
 779:Src/main.c    ****             timeee = HAL_GetTick();
 1260              		.loc 1 779 0
 1261 00b2 FFF7FEFF 		bl	HAL_GetTick
 1262              	.LVL146:
 1263 00b6 0446     		mov	r4, r0
 1264              	.LVL147:
 780:Src/main.c    ****             while (HAL_GetTick() - timeee < 7000)
 1265              		.loc 1 780 0
 1266 00b8 39E0     		b	.L77
 1267              	.LVL148:
 1268              	.L82:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 38


 781:Src/main.c    ****             {
 782:Src/main.c    ****                 if (TAPE_LEFT_STATE == FLAGGED && TAPE_RIGHT_STATE != FLAGGED)
 1269              		.loc 1 782 0
 1270 00ba 844B     		ldr	r3, .L93+28
 1271 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1272 00be 012B     		cmp	r3, #1
 1273 00c0 1AD1     		bne	.L78
 1274              		.loc 1 782 0 is_stmt 0 discriminator 1
 1275 00c2 834A     		ldr	r2, .L93+32
 1276 00c4 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1277 00c6 012A     		cmp	r2, #1
 1278 00c8 16D0     		beq	.L78
 783:Src/main.c    ****                 {
 784:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 1279              		.loc 1 784 0 is_stmt 1
 1280 00ca 0820     		movs	r0, #8
 1281 00cc 0021     		movs	r1, #0
 1282 00ce FFF7FEFF 		bl	set_motor_speed
 1283              	.LVL149:
 1284              	.L79:
 785:Src/main.c    ****                     // Tape detects object when high
 786:Src/main.c    ****                     while (HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) == GPIO_PIN_SET);
 1285              		.loc 1 786 0 discriminator 1
 1286 00d2 8048     		ldr	r0, .L93+36
 1287 00d4 4FF48041 		mov	r1, #16384
 1288 00d8 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1289              	.LVL150:
 1290 00dc 0128     		cmp	r0, #1
 1291 00de F8D0     		beq	.L79
 787:Src/main.c    ****                     HAL_Delay(100);
 1292              		.loc 1 787 0
 1293 00e0 6420     		movs	r0, #100
 1294 00e2 FFF7FEFF 		bl	HAL_Delay
 1295              	.LVL151:
 788:Src/main.c    ****                     TAPE_LEFT_STATE = NOT_FLAGGED;
 1296              		.loc 1 788 0
 1297 00e6 0022     		movs	r2, #0
 1298 00e8 784B     		ldr	r3, .L93+28
 1299 00ea 1A70     		strb	r2, [r3]
 789:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1300              		.loc 1 789 0
 1301 00ec 0820     		movs	r0, #8
 1302 00ee 754B     		ldr	r3, .L93+20
 1303 00f0 1988     		ldrh	r1, [r3]
 1304 00f2 FFF7FEFF 		bl	set_motor_speed
 1305              	.LVL152:
 1306 00f6 1AE0     		b	.L77
 1307              	.L78:
 790:Src/main.c    ****                 }
 791:Src/main.c    ****                 else if (TAPE_RIGHT_STATE == FLAGGED && TAPE_LEFT_STATE != FLAGGED)
 1308              		.loc 1 791 0
 1309 00f8 754A     		ldr	r2, .L93+32
 1310 00fa 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1311 00fc 012A     		cmp	r2, #1
 1312 00fe 16D1     		bne	.L77
 1313              		.loc 1 791 0 is_stmt 0 discriminator 1
 1314 0100 012B     		cmp	r3, #1
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 39


 1315 0102 14D0     		beq	.L77
 792:Src/main.c    ****                 {
 793:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 1316              		.loc 1 793 0 is_stmt 1
 1317 0104 0020     		movs	r0, #0
 1318 0106 0146     		mov	r1, r0
 1319 0108 FFF7FEFF 		bl	set_motor_speed
 1320              	.LVL153:
 1321              	.L81:
 794:Src/main.c    ****                     while (HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) == GPIO_PIN_SET);
 1322              		.loc 1 794 0 discriminator 1
 1323 010c 7148     		ldr	r0, .L93+36
 1324 010e 4FF40041 		mov	r1, #32768
 1325 0112 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1326              	.LVL154:
 1327 0116 0128     		cmp	r0, #1
 1328 0118 F8D0     		beq	.L81
 795:Src/main.c    ****                     HAL_Delay(100);
 1329              		.loc 1 795 0
 1330 011a 6420     		movs	r0, #100
 1331 011c FFF7FEFF 		bl	HAL_Delay
 1332              	.LVL155:
 796:Src/main.c    ****                     TAPE_RIGHT_STATE = NOT_FLAGGED;
 1333              		.loc 1 796 0
 1334 0120 0020     		movs	r0, #0
 1335 0122 6B4B     		ldr	r3, .L93+32
 1336 0124 1870     		strb	r0, [r3]
 797:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1337              		.loc 1 797 0
 1338 0126 664B     		ldr	r3, .L93+16
 1339 0128 1988     		ldrh	r1, [r3]
 1340 012a FFF7FEFF 		bl	set_motor_speed
 1341              	.LVL156:
 1342              	.L77:
 780:Src/main.c    ****             {
 1343              		.loc 1 780 0
 1344 012e FFF7FEFF 		bl	HAL_GetTick
 1345              	.LVL157:
 1346 0132 001B     		subs	r0, r0, r4
 1347 0134 41F65733 		movw	r3, #6999
 1348 0138 9842     		cmp	r0, r3
 1349 013a BED9     		bls	.L82
 798:Src/main.c    ****                 }
 799:Src/main.c    ****             }
 800:Src/main.c    ****             arm_down(&htim3);
 1350              		.loc 1 800 0
 1351 013c 5D48     		ldr	r0, .L93+4
 1352 013e FFF7FEFF 		bl	arm_down
 1353              	.LVL158:
 1354              	.L76:
 801:Src/main.c    ****         }
 802:Src/main.c    **** 
 803:Src/main.c    ****         if (ewok_cnt == 3)
 1355              		.loc 1 803 0
 1356 0142 032D     		cmp	r5, #3
 1357 0144 2FD1     		bne	.L83
 804:Src/main.c    ****         {
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 40


 805:Src/main.c    ****             print("Third ewok captured\n", 0);
 1358              		.loc 1 805 0
 1359 0146 6448     		ldr	r0, .L93+40
 1360 0148 0021     		movs	r1, #0
 1361 014a FFF7FEFF 		bl	print
 1362              	.LVL159:
 806:Src/main.c    ****             turn_deg(110);
 1363              		.loc 1 806 0
 1364 014e 6E20     		movs	r0, #110
 1365 0150 FFF7FEFF 		bl	turn_deg
 1366              	.LVL160:
 807:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1367              		.loc 1 807 0
 1368 0154 5B4F     		ldr	r7, .L93+20
 1369 0156 0820     		movs	r0, #8
 1370 0158 3988     		ldrh	r1, [r7]
 1371 015a FFF7FEFF 		bl	set_motor_speed
 1372              	.LVL161:
 808:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1373              		.loc 1 808 0
 1374 015e 584E     		ldr	r6, .L93+16
 1375 0160 0020     		movs	r0, #0
 1376 0162 3188     		ldrh	r1, [r6]
 1377 0164 FFF7FEFF 		bl	set_motor_speed
 1378              	.LVL162:
 809:Src/main.c    ****             open_claw(&htim3);
 1379              		.loc 1 809 0
 1380 0168 DFF84881 		ldr	r8, .L93+4
 1381 016c 4046     		mov	r0, r8
 1382 016e FFF7FEFF 		bl	open_claw
 1383              	.LVL163:
 810:Src/main.c    ****             drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 1500);
 1384              		.loc 1 810 0
 1385 0172 01A8     		add	r0, sp, #4
 1386              	.LVL164:
 1387 0174 3188     		ldrh	r1, [r6]
 1388 0176 3A88     		ldrh	r2, [r7]
 1389 0178 40F2DC53 		movw	r3, #1500
 1390 017c FFF7FEFF 		bl	drive_straight_time
 1391              	.LVL165:
 811:Src/main.c    ****             drive_straight_time(&enc_pid, 600, 600, 1500);
 1392              		.loc 1 811 0
 1393 0180 01A8     		add	r0, sp, #4
 1394              	.LVL166:
 1395 0182 4FF41671 		mov	r1, #600
 1396 0186 0A46     		mov	r2, r1
 1397 0188 40F2DC53 		movw	r3, #1500
 1398 018c FFF7FEFF 		bl	drive_straight_time
 1399              	.LVL167:
 812:Src/main.c    ****             arm_down(&htim3);
 1400              		.loc 1 812 0
 1401 0190 4046     		mov	r0, r8
 1402 0192 FFF7FEFF 		bl	arm_down
 1403              	.LVL168:
 813:Src/main.c    ****             // todo delete below
 814:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1404              		.loc 1 814 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 41


 1405 0196 0820     		movs	r0, #8
 1406 0198 3988     		ldrh	r1, [r7]
 1407 019a FFF7FEFF 		bl	set_motor_speed
 1408              	.LVL169:
 815:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1409              		.loc 1 815 0
 1410 019e 0020     		movs	r0, #0
 1411 01a0 3188     		ldrh	r1, [r6]
 1412 01a2 FFF7FEFF 		bl	set_motor_speed
 1413              	.LVL170:
 1414              	.L83:
 816:Src/main.c    ****         }
 817:Src/main.c    **** 
 818:Src/main.c    ****         if (ewok_cnt == 4)
 1415              		.loc 1 818 0
 1416 01a6 042D     		cmp	r5, #4
 1417 01a8 51D1     		bne	.L84
 819:Src/main.c    ****         {
 820:Src/main.c    ****             print("Fourth ewok captured\n", 0);
 1418              		.loc 1 820 0
 1419 01aa 4C48     		ldr	r0, .L93+44
 1420 01ac 0021     		movs	r1, #0
 1421 01ae FFF7FEFF 		bl	print
 1422              	.LVL171:
 821:Src/main.c    ****             turn_deg(150);
 1423              		.loc 1 821 0
 1424 01b2 9620     		movs	r0, #150
 1425 01b4 FFF7FEFF 		bl	turn_deg
 1426              	.LVL172:
 822:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1427              		.loc 1 822 0
 1428 01b8 0820     		movs	r0, #8
 1429 01ba 424B     		ldr	r3, .L93+20
 1430 01bc 1988     		ldrh	r1, [r3]
 1431 01be FFF7FEFF 		bl	set_motor_speed
 1432              	.LVL173:
 823:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1433              		.loc 1 823 0
 1434 01c2 0020     		movs	r0, #0
 1435 01c4 3E4B     		ldr	r3, .L93+16
 1436 01c6 1988     		ldrh	r1, [r3]
 1437 01c8 FFF7FEFF 		bl	set_motor_speed
 1438              	.LVL174:
 824:Src/main.c    ****             open_claw(&htim3);
 1439              		.loc 1 824 0
 1440 01cc 3948     		ldr	r0, .L93+4
 1441 01ce FFF7FEFF 		bl	open_claw
 1442              	.LVL175:
 825:Src/main.c    ****             while (HAL_GetTick() - timeee < 8000)
 1443              		.loc 1 825 0
 1444 01d2 33E0     		b	.L88
 1445              	.L90:
 826:Src/main.c    ****             {
 827:Src/main.c    ****                 if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 1446              		.loc 1 827 0
 1447 01d4 424B     		ldr	r3, .L93+48
 1448 01d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 42


 1449 01d8 012B     		cmp	r3, #1
 1450 01da 17D1     		bne	.L86
 1451              		.loc 1 827 0 is_stmt 0 discriminator 1
 1452 01dc 414B     		ldr	r3, .L93+52
 1453 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1454 01e0 A3B9     		cbnz	r3, .L86
 828:Src/main.c    ****                 {
 829:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 1455              		.loc 1 829 0 is_stmt 1
 1456 01e2 0820     		movs	r0, #8
 1457 01e4 0021     		movs	r1, #0
 1458 01e6 FFF7FEFF 		bl	set_motor_speed
 1459              	.LVL176:
 1460              	.L87:
 830:Src/main.c    ****                     // Edge detected when LOW
 831:Src/main.c    ****                     while (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET);
 1461              		.loc 1 831 0 discriminator 1
 1462 01ea 3F48     		ldr	r0, .L93+56
 1463 01ec 0421     		movs	r1, #4
 1464 01ee FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1465              	.LVL177:
 1466 01f2 0028     		cmp	r0, #0
 1467 01f4 F9D0     		beq	.L87
 832:Src/main.c    ****                     HAL_Delay(200);
 1468              		.loc 1 832 0
 1469 01f6 C820     		movs	r0, #200
 1470 01f8 FFF7FEFF 		bl	HAL_Delay
 1471              	.LVL178:
 833:Src/main.c    ****                     EDGE_LEFT_STATE = NOT_FLAGGED;
 1472              		.loc 1 833 0
 1473 01fc 0022     		movs	r2, #0
 1474 01fe 384B     		ldr	r3, .L93+48
 1475 0200 1A70     		strb	r2, [r3]
 834:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1476              		.loc 1 834 0
 1477 0202 0820     		movs	r0, #8
 1478 0204 2F4B     		ldr	r3, .L93+20
 1479 0206 1988     		ldrh	r1, [r3]
 1480 0208 FFF7FEFF 		bl	set_motor_speed
 1481              	.LVL179:
 1482              	.L86:
 835:Src/main.c    ****                 }
 836:Src/main.c    ****                 if (EDGE_RIGHT_STATE == FLAGGED)
 1483              		.loc 1 836 0
 1484 020c 354B     		ldr	r3, .L93+52
 1485 020e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1486 0210 012B     		cmp	r3, #1
 1487 0212 13D1     		bne	.L88
 837:Src/main.c    ****                 {
 838:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 1488              		.loc 1 838 0
 1489 0214 0020     		movs	r0, #0
 1490 0216 0146     		mov	r1, r0
 1491 0218 FFF7FEFF 		bl	set_motor_speed
 1492              	.LVL180:
 1493              	.L89:
 839:Src/main.c    ****                     while (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 43


 1494              		.loc 1 839 0 discriminator 1
 1495 021c 3348     		ldr	r0, .L93+60
 1496 021e 0821     		movs	r1, #8
 1497 0220 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1498              	.LVL181:
 1499 0224 0028     		cmp	r0, #0
 1500 0226 F9D0     		beq	.L89
 840:Src/main.c    ****                     HAL_Delay(200);
 1501              		.loc 1 840 0
 1502 0228 C820     		movs	r0, #200
 1503 022a FFF7FEFF 		bl	HAL_Delay
 1504              	.LVL182:
 841:Src/main.c    ****                     EDGE_RIGHT_STATE = NOT_FLAGGED;
 1505              		.loc 1 841 0
 1506 022e 0020     		movs	r0, #0
 1507 0230 2C4B     		ldr	r3, .L93+52
 1508 0232 1870     		strb	r0, [r3]
 842:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1509              		.loc 1 842 0
 1510 0234 224B     		ldr	r3, .L93+16
 1511 0236 1988     		ldrh	r1, [r3]
 1512 0238 FFF7FEFF 		bl	set_motor_speed
 1513              	.LVL183:
 1514              	.L88:
 825:Src/main.c    ****             {
 1515              		.loc 1 825 0
 1516 023c FFF7FEFF 		bl	HAL_GetTick
 1517              	.LVL184:
 1518 0240 001B     		subs	r0, r0, r4
 1519 0242 B0F5FA5F 		cmp	r0, #8000
 1520 0246 C5D3     		bcc	.L90
 843:Src/main.c    ****                 }
 844:Src/main.c    ****             }
 845:Src/main.c    ****             arm_down(&htim3);
 1521              		.loc 1 845 0
 1522 0248 1A48     		ldr	r0, .L93+4
 1523 024a FFF7FEFF 		bl	arm_down
 1524              	.LVL185:
 1525              	.L84:
 846:Src/main.c    ****         }
 847:Src/main.c    **** 
 848:Src/main.c    ****         if (ewok_cnt == 5)
 1526              		.loc 1 848 0
 1527 024e 052D     		cmp	r5, #5
 1528 0250 26D1     		bne	.L91
 849:Src/main.c    ****         {
 850:Src/main.c    ****             print("Chewie captured\n", 0);
 1529              		.loc 1 850 0
 1530 0252 2748     		ldr	r0, .L93+64
 1531 0254 0021     		movs	r1, #0
 1532 0256 FFF7FEFF 		bl	print
 1533              	.LVL186:
 851:Src/main.c    ****             turn_deg(50);
 1534              		.loc 1 851 0
 1535 025a 3220     		movs	r0, #50
 1536 025c FFF7FEFF 		bl	turn_deg
 1537              	.LVL187:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 44


 852:Src/main.c    ****             open_claw(&htim3);
 1538              		.loc 1 852 0
 1539 0260 144C     		ldr	r4, .L93+4
 1540              	.LVL188:
 1541 0262 2046     		mov	r0, r4
 1542 0264 FFF7FEFF 		bl	open_claw
 1543              	.LVL189:
 853:Src/main.c    ****             HAL_Delay(750);
 1544              		.loc 1 853 0
 1545 0268 40F2EE20 		movw	r0, #750
 1546 026c FFF7FEFF 		bl	HAL_Delay
 1547              	.LVL190:
 854:Src/main.c    ****             arm_down(&htim3);
 1548              		.loc 1 854 0
 1549 0270 2046     		mov	r0, r4
 1550 0272 FFF7FEFF 		bl	arm_down
 1551              	.LVL191:
 855:Src/main.c    ****             slow_actuate(&htim3, BASKET_CH, 10, 180);
 1552              		.loc 1 855 0
 1553 0276 2046     		mov	r0, r4
 1554 0278 0821     		movs	r1, #8
 1555 027a 0A22     		movs	r2, #10
 1556 027c B423     		movs	r3, #180
 1557 027e FFF7FEFF 		bl	slow_actuate
 1558              	.LVL192:
 856:Src/main.c    ****             drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 3000);
 1559              		.loc 1 856 0
 1560 0282 01A8     		add	r0, sp, #4
 1561              	.LVL193:
 1562 0284 0E4B     		ldr	r3, .L93+16
 1563 0286 1988     		ldrh	r1, [r3]
 1564 0288 0E4B     		ldr	r3, .L93+20
 1565 028a 1A88     		ldrh	r2, [r3]
 1566 028c 40F6B833 		movw	r3, #3000
 1567 0290 FFF7FEFF 		bl	drive_straight_time
 1568              	.LVL194:
 857:Src/main.c    ****             slow_actuate(&htim3, BASKET_CH, 180, 20);
 1569              		.loc 1 857 0
 1570 0294 2046     		mov	r0, r4
 1571 0296 0821     		movs	r1, #8
 1572 0298 B422     		movs	r2, #180
 1573 029a 1423     		movs	r3, #20
 1574 029c FFF7FEFF 		bl	slow_actuate
 1575              	.LVL195:
 1576              	.L91:
 858:Src/main.c    ****         }
 859:Src/main.c    ****         CLAW_INT_STATE = NOT_FLAGGED;
 1577              		.loc 1 859 0
 1578 02a0 0022     		movs	r2, #0
 1579 02a2 144B     		ldr	r3, .L93+68
 1580 02a4 1A70     		strb	r2, [r3]
 860:Src/main.c    ****         return TRUE;
 861:Src/main.c    ****     }
 862:Src/main.c    ****     else 
 863:Src/main.c    ****     {
 864:Src/main.c    ****         CLAW_INT_STATE = NOT_FLAGGED;
 865:Src/main.c    ****         return FALSE;
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 45


 866:Src/main.c    ****     }
 867:Src/main.c    ****                 
 868:Src/main.c    **** }
 1581              		.loc 1 868 0
 1582 02a6 0120     		movs	r0, #1
 1583 02a8 02B0     		add	sp, sp, #8
 1584              	.LCFI24:
 1585              		.cfi_def_cfa_offset 24
 1586              		@ sp needed
 1587 02aa BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1588              	.LVL196:
 1589              	.L94:
 1590 02ae 00BF     		.align	2
 1591              	.L93:
 1592 02b0 08010000 		.word	.LC13
 1593 02b4 00000000 		.word	htim3
 1594 02b8 24010000 		.word	.LC14
 1595 02bc 70FEFFFF 		.word	-400
 1596 02c0 00000000 		.word	.LANCHOR1
 1597 02c4 00000000 		.word	.LANCHOR0
 1598 02c8 3C010000 		.word	.LC15
 1599 02cc 00000000 		.word	TAPE_LEFT_STATE
 1600 02d0 00000000 		.word	TAPE_RIGHT_STATE
 1601 02d4 00040240 		.word	1073873920
 1602 02d8 54010000 		.word	.LC16
 1603 02dc 6C010000 		.word	.LC17
 1604 02e0 00000000 		.word	EDGE_LEFT_STATE
 1605 02e4 00000000 		.word	EDGE_RIGHT_STATE
 1606 02e8 000C0240 		.word	1073875968
 1607 02ec 00080240 		.word	1073874944
 1608 02f0 84010000 		.word	.LC18
 1609 02f4 00000000 		.word	CLAW_INT_STATE
 1610              		.cfi_endproc
 1611              	.LFE137:
 1613              		.section	.text.drive_straight_time,"ax",%progbits
 1614              		.align	2
 1615              		.global	drive_straight_time
 1616              		.thumb
 1617              		.thumb_func
 1619              	drive_straight_time:
 1620              	.LFB127:
 440:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 1621              		.loc 1 440 0
 1622              		.cfi_startproc
 1623              		@ args = 0, pretend = 0, frame = 0
 1624              		@ frame_needed = 0, uses_anonymous_args = 0
 1625              	.LVL197:
 1626 0000 70B5     		push	{r4, r5, r6, lr}
 1627              	.LCFI25:
 1628              		.cfi_def_cfa_offset 16
 1629              		.cfi_offset 4, -16
 1630              		.cfi_offset 5, -12
 1631              		.cfi_offset 6, -8
 1632              		.cfi_offset 14, -4
 1633 0002 0646     		mov	r6, r0
 1634 0004 1446     		mov	r4, r2
 1635 0006 1D46     		mov	r5, r3
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 46


 441:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1636              		.loc 1 441 0
 1637 0008 0020     		movs	r0, #0
 1638              	.LVL198:
 1639 000a FFF7FEFF 		bl	set_motor_speed
 1640              	.LVL199:
 442:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 1641              		.loc 1 442 0
 1642 000e 0820     		movs	r0, #8
 1643 0010 2146     		mov	r1, r4
 1644 0012 FFF7FEFF 		bl	set_motor_speed
 1645              	.LVL200:
 443:Src/main.c    ****     char msg[50] = "";
 1646              		.loc 1 443 0
 1647 0016 FFF7FEFF 		bl	HAL_GetTick
 1648              	.LVL201:
 1649 001a 0446     		mov	r4, r0
 1650              	.LVL202:
 446:Src/main.c    ****     {
 1651              		.loc 1 446 0
 1652 001c 3DE0     		b	.L96
 1653              	.LVL203:
 1654              	.L102:
 448:Src/main.c    ****         {
 1655              		.loc 1 448 0
 1656 001e 2648     		ldr	r0, .L104
 1657 0020 1021     		movs	r1, #16
 1658 0022 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1659              	.LVL204:
 1660 0026 0128     		cmp	r0, #1
 1661 0028 0AD1     		bne	.L97
 450:Src/main.c    ****             if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 1662              		.loc 1 450 0
 1663 002a 2448     		ldr	r0, .L104+4
 1664 002c 0021     		movs	r1, #0
 1665 002e FFF7FEFF 		bl	print
 1666              	.LVL205:
 451:Src/main.c    ****         }
 1667              		.loc 1 451 0
 1668 0032 234B     		ldr	r3, .L104+8
 1669 0034 1868     		ldr	r0, [r3]
 1670 0036 3146     		mov	r1, r6
 1671 0038 FFF7FEFF 		bl	debounce_and_grab
 1672              	.LVL206:
 1673 003c 68B3     		cbz	r0, .L96
 1674 003e 31E0     		b	.L98
 1675              	.L97:
 453:Src/main.c    ****         {
 1676              		.loc 1 453 0
 1677 0040 2048     		ldr	r0, .L104+12
 1678 0042 0421     		movs	r1, #4
 1679 0044 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1680              	.LVL207:
 1681 0048 70B9     		cbnz	r0, .L100
 455:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 1682              		.loc 1 455 0
 1683 004a 0146     		mov	r1, r0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 47


 1684 004c FFF7FEFF 		bl	set_motor_speed
 1685              	.LVL208:
 456:Src/main.c    ****             print("Edge left triggered", 0);
 1686              		.loc 1 456 0
 1687 0050 0820     		movs	r0, #8
 1688 0052 0021     		movs	r1, #0
 1689 0054 FFF7FEFF 		bl	set_motor_speed
 1690              	.LVL209:
 457:Src/main.c    ****             turn_deg(30);
 1691              		.loc 1 457 0
 1692 0058 1B48     		ldr	r0, .L104+16
 1693 005a 0021     		movs	r1, #0
 1694 005c FFF7FEFF 		bl	print
 1695              	.LVL210:
 458:Src/main.c    ****         }
 1696              		.loc 1 458 0
 1697 0060 1E20     		movs	r0, #30
 1698 0062 FFF7FEFF 		bl	turn_deg
 1699              	.LVL211:
 1700 0066 18E0     		b	.L96
 1701              	.L100:
 460:Src/main.c    ****             print("Edge right triggered", 0);
 1702              		.loc 1 460 0
 1703 0068 1848     		ldr	r0, .L104+20
 1704 006a 0821     		movs	r1, #8
 1705 006c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1706              	.LVL212:
 1707 0070 80B9     		cbnz	r0, .L101
 461:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 1708              		.loc 1 461 0
 1709 0072 1748     		ldr	r0, .L104+24
 1710 0074 0021     		movs	r1, #0
 1711 0076 FFF7FEFF 		bl	print
 1712              	.LVL213:
 462:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 1713              		.loc 1 462 0
 1714 007a 0020     		movs	r0, #0
 1715 007c 0146     		mov	r1, r0
 1716 007e FFF7FEFF 		bl	set_motor_speed
 1717              	.LVL214:
 463:Src/main.c    ****             turn_deg(-30);
 1718              		.loc 1 463 0
 1719 0082 0820     		movs	r0, #8
 1720 0084 0021     		movs	r1, #0
 1721 0086 FFF7FEFF 		bl	set_motor_speed
 1722              	.LVL215:
 464:Src/main.c    ****         }
 1723              		.loc 1 464 0
 1724 008a 6FF01D00 		mvn	r0, #29
 1725 008e FFF7FEFF 		bl	turn_deg
 1726              	.LVL216:
 1727 0092 02E0     		b	.L96
 1728              	.L101:
 468:Src/main.c    **** 
 1729              		.loc 1 468 0
 1730 0094 3046     		mov	r0, r6
 1731 0096 FFF7FEFF 		bl	drive_straight
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 48


 1732              	.LVL217:
 1733              	.L96:
 446:Src/main.c    ****     {
 1734              		.loc 1 446 0
 1735 009a FFF7FEFF 		bl	HAL_GetTick
 1736              	.LVL218:
 1737 009e 001B     		subs	r0, r0, r4
 1738 00a0 A842     		cmp	r0, r5
 1739 00a2 BCD3     		bcc	.L102
 1740              	.L98:
 472:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1741              		.loc 1 472 0
 1742 00a4 0020     		movs	r0, #0
 1743 00a6 0146     		mov	r1, r0
 1744 00a8 FFF7FEFF 		bl	set_motor_speed
 1745              	.LVL219:
 473:Src/main.c    **** }
 1746              		.loc 1 473 0
 1747 00ac 0820     		movs	r0, #8
 1748 00ae 0021     		movs	r1, #0
 1749 00b0 FFF7FEFF 		bl	set_motor_speed
 1750              	.LVL220:
 1751 00b4 70BD     		pop	{r4, r5, r6, pc}
 1752              	.LVL221:
 1753              	.L105:
 1754 00b6 00BF     		.align	2
 1755              	.L104:
 1756 00b8 00040240 		.word	1073873920
 1757 00bc 98010000 		.word	.LC19
 1758 00c0 00000000 		.word	.LANCHOR2
 1759 00c4 000C0240 		.word	1073875968
 1760 00c8 A8010000 		.word	.LC20
 1761 00cc 00080240 		.word	1073874944
 1762 00d0 BC010000 		.word	.LC21
 1763              		.cfi_endproc
 1764              	.LFE127:
 1766              		.section	.text.test_PWM_htim1,"ax",%progbits
 1767              		.align	2
 1768              		.global	test_PWM_htim1
 1769              		.thumb
 1770              		.thumb_func
 1772              	test_PWM_htim1:
 1773              	.LFB138:
 869:Src/main.c    **** 
 870:Src/main.c    **** // ******
 871:Src/main.c    **** // TESTS
 872:Src/main.c    **** // ******
 873:Src/main.c    **** 
 874:Src/main.c    **** /*
 875:Src/main.c    ****  * Instructions:
 876:Src/main.c    ****  *      Run test_All() before the main while loop
 877:Src/main.c    ****  *      - Put a pull up resistor on htim3 PWM waves, measure voltage on pin
 878:Src/main.c    ****  *      - Measure voltage on pin of htim1
 879:Src/main.c    ****  *      - Give ADC pins values and read off of screen
 880:Src/main.c    ****  */
 881:Src/main.c    **** 
 882:Src/main.c    **** /*
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 49


 883:Src/main.c    ****  * Test PWM
 884:Src/main.c    ****  * Output: htim1 channel 1 through 4, PWM wave. Confirm these
 885:Src/main.c    ****  *         PWM waves via an oscilliscope.
 886:Src/main.c    ****  */
 887:Src/main.c    **** void test_PWM_htim1()
 888:Src/main.c    **** {
 1774              		.loc 1 888 0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 0
 1777              		@ frame_needed = 0, uses_anonymous_args = 0
 1778 0000 10B5     		push	{r4, lr}
 1779              	.LCFI26:
 1780              		.cfi_def_cfa_offset 8
 1781              		.cfi_offset 4, -8
 1782              		.cfi_offset 14, -4
 889:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1783              		.loc 1 889 0
 1784 0002 0C4C     		ldr	r4, .L110
 1785 0004 2046     		mov	r0, r4
 1786 0006 0021     		movs	r1, #0
 1787 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1788              	.LVL222:
 890:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 891:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1789              		.loc 1 891 0
 1790 000c 2046     		mov	r0, r4
 1791 000e 0821     		movs	r1, #8
 1792 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1793              	.LVL223:
 892:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 893:Src/main.c    ****     int s = 0;
 1794              		.loc 1 893 0
 1795 0014 0024     		movs	r4, #0
 894:Src/main.c    ****     while (s < 1000)
 1796              		.loc 1 894 0
 1797 0016 08E0     		b	.L107
 1798              	.LVL224:
 1799              	.L108:
 895:Src/main.c    ****     {
 896:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, s);
 1800              		.loc 1 896 0
 1801 0018 064B     		ldr	r3, .L110
 1802 001a 1B68     		ldr	r3, [r3]
 1803 001c 5C63     		str	r4, [r3, #52]
 897:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 898:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, s);
 1804              		.loc 1 898 0
 1805 001e DC63     		str	r4, [r3, #60]
 899:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 900:Src/main.c    ****         s += 100;
 1806              		.loc 1 900 0
 1807 0020 6434     		adds	r4, r4, #100
 1808              	.LVL225:
 901:Src/main.c    ****         HAL_Delay(1000);
 1809              		.loc 1 901 0
 1810 0022 4FF47A70 		mov	r0, #1000
 1811 0026 FFF7FEFF 		bl	HAL_Delay
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 50


 1812              	.LVL226:
 1813              	.L107:
 894:Src/main.c    ****     {
 1814              		.loc 1 894 0
 1815 002a B4F57A7F 		cmp	r4, #1000
 1816 002e F3DB     		blt	.L108
 902:Src/main.c    ****     }
 903:Src/main.c    **** }
 1817              		.loc 1 903 0
 1818 0030 10BD     		pop	{r4, pc}
 1819              	.LVL227:
 1820              	.L111:
 1821 0032 00BF     		.align	2
 1822              	.L110:
 1823 0034 00000000 		.word	htim1
 1824              		.cfi_endproc
 1825              	.LFE138:
 1827              		.section	.text.test_PWM_htim3,"ax",%progbits
 1828              		.align	2
 1829              		.global	test_PWM_htim3
 1830              		.thumb
 1831              		.thumb_func
 1833              	test_PWM_htim3:
 1834              	.LFB139:
 904:Src/main.c    **** 
 905:Src/main.c    **** /*
 906:Src/main.c    ****  * Test PWM
 907:Src/main.c    ****  * Output: htim3 channel 1 through 3, PWM wave. Confirm these
 908:Src/main.c    ****  *         PWM waves via an oscilliscope.
 909:Src/main.c    ****  */
 910:Src/main.c    **** void test_PWM_htim3()
 911:Src/main.c    **** {
 1835              		.loc 1 911 0
 1836              		.cfi_startproc
 1837              		@ args = 0, pretend = 0, frame = 0
 1838              		@ frame_needed = 0, uses_anonymous_args = 0
 1839 0000 10B5     		push	{r4, lr}
 1840              	.LCFI27:
 1841              		.cfi_def_cfa_offset 8
 1842              		.cfi_offset 4, -8
 1843              		.cfi_offset 14, -4
 912:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1844              		.loc 1 912 0
 1845 0002 0F4C     		ldr	r4, .L116
 1846 0004 2046     		mov	r0, r4
 1847 0006 0021     		movs	r1, #0
 1848 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1849              	.LVL228:
 913:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1850              		.loc 1 913 0
 1851 000c 2046     		mov	r0, r4
 1852 000e 0421     		movs	r1, #4
 1853 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1854              	.LVL229:
 914:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1855              		.loc 1 914 0
 1856 0014 2046     		mov	r0, r4
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 51


 1857 0016 0821     		movs	r1, #8
 1858 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1859              	.LVL230:
 915:Src/main.c    **** 
 916:Src/main.c    ****     int s = 500;
 1860              		.loc 1 916 0
 1861 001c 4FF4FA74 		mov	r4, #500
 917:Src/main.c    ****     while (s < 2400)
 1862              		.loc 1 917 0
 1863 0020 09E0     		b	.L113
 1864              	.LVL231:
 1865              	.L114:
 918:Src/main.c    ****     {
 919:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s);
 1866              		.loc 1 919 0
 1867 0022 074B     		ldr	r3, .L116
 1868 0024 1B68     		ldr	r3, [r3]
 1869 0026 5C63     		str	r4, [r3, #52]
 920:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s);
 1870              		.loc 1 920 0
 1871 0028 9C63     		str	r4, [r3, #56]
 921:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, s);
 1872              		.loc 1 921 0
 1873 002a DC63     		str	r4, [r3, #60]
 922:Src/main.c    ****         s += 100;
 1874              		.loc 1 922 0
 1875 002c 6434     		adds	r4, r4, #100
 1876              	.LVL232:
 923:Src/main.c    ****         HAL_Delay(500);
 1877              		.loc 1 923 0
 1878 002e 4FF4FA70 		mov	r0, #500
 1879 0032 FFF7FEFF 		bl	HAL_Delay
 1880              	.LVL233:
 1881              	.L113:
 917:Src/main.c    ****     {
 1882              		.loc 1 917 0
 1883 0036 B4F5166F 		cmp	r4, #2400
 1884 003a F2DB     		blt	.L114
 924:Src/main.c    ****     }
 925:Src/main.c    **** }
 1885              		.loc 1 925 0
 1886 003c 10BD     		pop	{r4, pc}
 1887              	.LVL234:
 1888              	.L117:
 1889 003e 00BF     		.align	2
 1890              	.L116:
 1891 0040 00000000 		.word	htim3
 1892              		.cfi_endproc
 1893              	.LFE139:
 1895              		.section	.text.test_ADC,"ax",%progbits
 1896              		.align	2
 1897              		.global	test_ADC
 1898              		.thumb
 1899              		.thumb_func
 1901              	test_ADC:
 1902              	.LFB140:
 926:Src/main.c    **** 
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 52


 927:Src/main.c    **** void test_ADC()
 928:Src/main.c    **** {
 1903              		.loc 1 928 0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 24
 1906              		@ frame_needed = 0, uses_anonymous_args = 0
 1907 0000 10B5     		push	{r4, lr}
 1908              	.LCFI28:
 1909              		.cfi_def_cfa_offset 8
 1910              		.cfi_offset 4, -8
 1911              		.cfi_offset 14, -4
 1912 0002 86B0     		sub	sp, sp, #24
 1913              	.LCFI29:
 1914              		.cfi_def_cfa_offset 32
 929:Src/main.c    ****     char msg[18] = "";
 1915              		.loc 1 929 0
 1916 0004 0023     		movs	r3, #0
 1917 0006 0193     		str	r3, [sp, #4]
 1918 0008 0293     		str	r3, [sp, #8]
 1919 000a 0393     		str	r3, [sp, #12]
 1920 000c 0493     		str	r3, [sp, #16]
 1921 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
 930:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1922              		.loc 1 930 0
 1923 0012 0F48     		ldr	r0, .L121
 1924 0014 0F49     		ldr	r1, .L121+4
 1925 0016 4FF40062 		mov	r2, #2048
 1926 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1927              	.LVL235:
 1928              	.L119:
 1929              	.LBB3:
 931:Src/main.c    **** 
 932:Src/main.c    ****     while (1)
 933:Src/main.c    ****     {
 934:Src/main.c    ****         int ch_5 = adc_values[0];
 1930              		.loc 1 934 0 discriminator 1
 1931 001e 0E4B     		ldr	r3, .L121+8
 1932              	.LVL236:
 935:Src/main.c    ****         int ch_4 = adc_values[1];
 1933              		.loc 1 935 0 discriminator 1
 1934 0020 5C68     		ldr	r4, [r3, #4]
 1935              	.LVL237:
 936:Src/main.c    **** 
 937:Src/main.c    ****         sprintf(msg, "ch_5: %d\n", ch_5);
 1936              		.loc 1 937 0 discriminator 1
 1937 0022 01A8     		add	r0, sp, #4
 1938 0024 0D49     		ldr	r1, .L121+12
 1939 0026 1A68     		ldr	r2, [r3]
 1940 0028 FFF7FEFF 		bl	sprintf
 1941              	.LVL238:
 938:Src/main.c    ****         print(msg, 0);
 1942              		.loc 1 938 0 discriminator 1
 1943 002c 01A8     		add	r0, sp, #4
 1944 002e 0021     		movs	r1, #0
 1945 0030 FFF7FEFF 		bl	print
 1946              	.LVL239:
 939:Src/main.c    **** 
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 53


 940:Src/main.c    ****         sprintf(msg, "ch_4: %d\n", ch_4);
 1947              		.loc 1 940 0 discriminator 1
 1948 0034 01A8     		add	r0, sp, #4
 1949 0036 0A49     		ldr	r1, .L121+16
 1950 0038 2246     		mov	r2, r4
 1951 003a FFF7FEFF 		bl	sprintf
 1952              	.LVL240:
 941:Src/main.c    ****         print(msg, 2);
 1953              		.loc 1 941 0 discriminator 1
 1954 003e 01A8     		add	r0, sp, #4
 1955 0040 0221     		movs	r1, #2
 1956 0042 FFF7FEFF 		bl	print
 1957              	.LVL241:
 942:Src/main.c    **** 
 943:Src/main.c    ****         HAL_Delay(100);
 1958              		.loc 1 943 0 discriminator 1
 1959 0046 6420     		movs	r0, #100
 1960 0048 FFF7FEFF 		bl	HAL_Delay
 1961              	.LVL242:
 1962              	.LBE3:
 944:Src/main.c    ****     }
 1963              		.loc 1 944 0 discriminator 1
 1964 004c E7E7     		b	.L119
 1965              	.L122:
 1966 004e 00BF     		.align	2
 1967              	.L121:
 1968 0050 00000000 		.word	hadc1
 1969 0054 00000000 		.word	dma_buffer
 1970 0058 00000000 		.word	adc_values
 1971 005c D4010000 		.word	.LC22
 1972 0060 E0010000 		.word	.LC23
 1973              		.cfi_endproc
 1974              	.LFE140:
 1976              		.section	.text.test_All,"ax",%progbits
 1977              		.align	2
 1978              		.global	test_All
 1979              		.thumb
 1980              		.thumb_func
 1982              	test_All:
 1983              	.LFB141:
 945:Src/main.c    **** }
 946:Src/main.c    **** 
 947:Src/main.c    **** /**
 948:Src/main.c    ****  * Test all PWM and ADC - Read PWM waves, input ADC voltages 
 949:Src/main.c    ****  * and read values on OLED
 950:Src/main.c    ****  *      htim1 -> CH1, CH2, CH3, CH4
 951:Src/main.c    ****  *      htim3 -> CH1, CH2, CH3
 952:Src/main.c    ****  *      ADC   -> CH5, CH4
 953:Src/main.c    ****  */
 954:Src/main.c    **** void test_All()
 955:Src/main.c    **** {
 1984              		.loc 1 955 0
 1985              		.cfi_startproc
 1986              		@ Volatile: function does not return.
 1987              		@ args = 0, pretend = 0, frame = 0
 1988              		@ frame_needed = 0, uses_anonymous_args = 0
 1989 0000 08B5     		push	{r3, lr}
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 54


 1990              	.LCFI30:
 1991              		.cfi_def_cfa_offset 8
 1992              		.cfi_offset 3, -8
 1993              		.cfi_offset 14, -4
 956:Src/main.c    ****     test_PWM_htim1();
 1994              		.loc 1 956 0
 1995 0002 FFF7FEFF 		bl	test_PWM_htim1
 1996              	.LVL243:
 957:Src/main.c    ****     test_PWM_htim3();
 1997              		.loc 1 957 0
 1998 0006 FFF7FEFF 		bl	test_PWM_htim3
 1999              	.LVL244:
 958:Src/main.c    ****     test_ADC();
 2000              		.loc 1 958 0
 2001 000a FFF7FEFF 		bl	test_ADC
 2002              	.LVL245:
 2003              		.cfi_endproc
 2004              	.LFE141:
 2006 000e 00BF     		.section	.text._Error_Handler,"ax",%progbits
 2007              		.align	2
 2008              		.global	_Error_Handler
 2009              		.thumb
 2010              		.thumb_func
 2012              	_Error_Handler:
 2013              	.LFB142:
 959:Src/main.c    **** }
 960:Src/main.c    **** // ******
 961:Src/main.c    **** // END TESTS
 962:Src/main.c    **** // ******
 963:Src/main.c    **** 
 964:Src/main.c    **** /* USER CODE END 4 */
 965:Src/main.c    **** 
 966:Src/main.c    **** /**
 967:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 968:Src/main.c    ****   * @param  file: The file name as string.
 969:Src/main.c    ****   * @param  line: The line in file as a number.
 970:Src/main.c    ****   * @retval None
 971:Src/main.c    ****   */
 972:Src/main.c    **** void _Error_Handler(char *file, int line)
 973:Src/main.c    **** {
 2014              		.loc 1 973 0
 2015              		.cfi_startproc
 2016              		@ Volatile: function does not return.
 2017              		@ args = 0, pretend = 0, frame = 0
 2018              		@ frame_needed = 0, uses_anonymous_args = 0
 2019              		@ link register save eliminated.
 2020              	.LVL246:
 2021              	.L126:
 974:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 975:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 976:Src/main.c    ****     while (1)
 977:Src/main.c    ****     {
 978:Src/main.c    ****     }
 2022              		.loc 1 978 0 discriminator 1
 2023 0000 FEE7     		b	.L126
 2024              		.cfi_endproc
 2025              	.LFE142:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 55


 2027 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 2028              		.align	2
 2029              		.global	SystemClock_Config
 2030              		.thumb
 2031              		.thumb_func
 2033              	SystemClock_Config:
 2034              	.LFB125:
 354:Src/main.c    **** 
 2035              		.loc 1 354 0
 2036              		.cfi_startproc
 2037              		@ args = 0, pretend = 0, frame = 80
 2038              		@ frame_needed = 0, uses_anonymous_args = 0
 2039 0000 00B5     		push	{lr}
 2040              	.LCFI31:
 2041              		.cfi_def_cfa_offset 4
 2042              		.cfi_offset 14, -4
 2043 0002 95B0     		sub	sp, sp, #84
 2044              	.LCFI32:
 2045              		.cfi_def_cfa_offset 88
 2046              	.LBB4:
 361:Src/main.c    **** 
 2047              		.loc 1 361 0
 2048 0004 0022     		movs	r2, #0
 2049 0006 0192     		str	r2, [sp, #4]
 2050 0008 2A4B     		ldr	r3, .L131
 2051 000a 196C     		ldr	r1, [r3, #64]
 2052 000c 41F08051 		orr	r1, r1, #268435456
 2053 0010 1964     		str	r1, [r3, #64]
 2054 0012 1B6C     		ldr	r3, [r3, #64]
 2055 0014 03F08053 		and	r3, r3, #268435456
 2056 0018 0193     		str	r3, [sp, #4]
 2057 001a 019B     		ldr	r3, [sp, #4]
 2058              	.LBE4:
 2059              	.LBB5:
 363:Src/main.c    **** 
 2060              		.loc 1 363 0
 2061 001c 0292     		str	r2, [sp, #8]
 2062 001e 2649     		ldr	r1, .L131+4
 2063 0020 0B68     		ldr	r3, [r1]
 2064 0022 23F44043 		bic	r3, r3, #49152
 2065 0026 43F40043 		orr	r3, r3, #32768
 2066 002a 0B60     		str	r3, [r1]
 2067 002c 0B68     		ldr	r3, [r1]
 2068 002e 03F44043 		and	r3, r3, #49152
 2069 0032 0293     		str	r3, [sp, #8]
 2070 0034 029B     		ldr	r3, [sp, #8]
 2071              	.LBE5:
 367:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2072              		.loc 1 367 0
 2073 0036 0223     		movs	r3, #2
 2074 0038 0893     		str	r3, [sp, #32]
 368:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 2075              		.loc 1 368 0
 2076 003a 0121     		movs	r1, #1
 2077 003c 0B91     		str	r1, [sp, #44]
 369:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2078              		.loc 1 369 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 56


 2079 003e 1021     		movs	r1, #16
 2080 0040 0C91     		str	r1, [sp, #48]
 370:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2081              		.loc 1 370 0
 2082 0042 0E93     		str	r3, [sp, #56]
 371:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 2083              		.loc 1 371 0
 2084 0044 0F92     		str	r2, [sp, #60]
 372:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 2085              		.loc 1 372 0
 2086 0046 0822     		movs	r2, #8
 2087 0048 1092     		str	r2, [sp, #64]
 373:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2088              		.loc 1 373 0
 2089 004a 4822     		movs	r2, #72
 2090 004c 1192     		str	r2, [sp, #68]
 374:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 2091              		.loc 1 374 0
 2092 004e 1293     		str	r3, [sp, #72]
 375:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2093              		.loc 1 375 0
 2094 0050 0423     		movs	r3, #4
 2095 0052 1393     		str	r3, [sp, #76]
 376:Src/main.c    ****   {
 2096              		.loc 1 376 0
 2097 0054 08A8     		add	r0, sp, #32
 2098 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2099              	.LVL247:
 2100 005a 20B1     		cbz	r0, .L128
 378:Src/main.c    ****   }
 2101              		.loc 1 378 0
 2102 005c 1748     		ldr	r0, .L131+8
 2103 005e 4FF4BD71 		mov	r1, #378
 2104 0062 FFF7FEFF 		bl	_Error_Handler
 2105              	.LVL248:
 2106              	.L128:
 383:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2107              		.loc 1 383 0
 2108 0066 0F23     		movs	r3, #15
 2109 0068 0393     		str	r3, [sp, #12]
 385:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2110              		.loc 1 385 0
 2111 006a 0221     		movs	r1, #2
 2112 006c 0491     		str	r1, [sp, #16]
 386:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2113              		.loc 1 386 0
 2114 006e 0023     		movs	r3, #0
 2115 0070 0593     		str	r3, [sp, #20]
 387:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2116              		.loc 1 387 0
 2117 0072 4FF48052 		mov	r2, #4096
 2118 0076 0692     		str	r2, [sp, #24]
 388:Src/main.c    **** 
 2119              		.loc 1 388 0
 2120 0078 0793     		str	r3, [sp, #28]
 390:Src/main.c    ****   {
 2121              		.loc 1 390 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 57


 2122 007a 03A8     		add	r0, sp, #12
 2123 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2124              	.LVL249:
 2125 0080 20B1     		cbz	r0, .L129
 392:Src/main.c    ****   }
 2126              		.loc 1 392 0
 2127 0082 0E48     		ldr	r0, .L131+8
 2128 0084 4FF4C471 		mov	r1, #392
 2129 0088 FFF7FEFF 		bl	_Error_Handler
 2130              	.LVL250:
 2131              	.L129:
 397:Src/main.c    **** 
 2132              		.loc 1 397 0
 2133 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2134              	.LVL251:
 2135 0090 0B4B     		ldr	r3, .L131+12
 2136 0092 A3FB0030 		umull	r3, r0, r3, r0
 2137 0096 8009     		lsrs	r0, r0, #6
 2138 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 2139              	.LVL252:
 401:Src/main.c    **** 
 2140              		.loc 1 401 0
 2141 009c 0420     		movs	r0, #4
 2142 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 2143              	.LVL253:
 404:Src/main.c    **** }
 2144              		.loc 1 404 0
 2145 00a2 4FF0FF30 		mov	r0, #-1
 2146 00a6 0021     		movs	r1, #0
 2147 00a8 0A46     		mov	r2, r1
 2148 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 2149              	.LVL254:
 405:Src/main.c    **** 
 2150              		.loc 1 405 0
 2151 00ae 15B0     		add	sp, sp, #84
 2152              	.LCFI33:
 2153              		.cfi_def_cfa_offset 4
 2154              		@ sp needed
 2155 00b0 5DF804FB 		ldr	pc, [sp], #4
 2156              	.L132:
 2157              		.align	2
 2158              	.L131:
 2159 00b4 00380240 		.word	1073887232
 2160 00b8 00700040 		.word	1073770496
 2161 00bc EC010000 		.word	.LC24
 2162 00c0 D34D6210 		.word	274877907
 2163              		.cfi_endproc
 2164              	.LFE125:
 2166              		.section	.text.main,"ax",%progbits
 2167              		.align	2
 2168              		.global	main
 2169              		.thumb
 2170              		.thumb_func
 2172              	main:
 2173              	.LFB124:
 115:Src/main.c    ****   /* USER CODE BEGIN 1 */
 2174              		.loc 1 115 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 58


 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 24
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178 0000 10B5     		push	{r4, lr}
 2179              	.LCFI34:
 2180              		.cfi_def_cfa_offset 8
 2181              		.cfi_offset 4, -8
 2182              		.cfi_offset 14, -4
 2183 0002 8AB0     		sub	sp, sp, #40
 2184              	.LCFI35:
 2185              		.cfi_def_cfa_offset 48
 123:Src/main.c    **** 
 2186              		.loc 1 123 0
 2187 0004 FFF7FEFF 		bl	HAL_Init
 2188              	.LVL255:
 130:Src/main.c    **** 
 2189              		.loc 1 130 0
 2190 0008 FFF7FEFF 		bl	SystemClock_Config
 2191              	.LVL256:
 137:Src/main.c    ****   MX_DMA_Init();
 2192              		.loc 1 137 0
 2193 000c FFF7FEFF 		bl	MX_GPIO_Init
 2194              	.LVL257:
 138:Src/main.c    ****   MX_TIM3_Init();
 2195              		.loc 1 138 0
 2196 0010 FFF7FEFF 		bl	MX_DMA_Init
 2197              	.LVL258:
 139:Src/main.c    ****   MX_TIM1_Init();
 2198              		.loc 1 139 0
 2199 0014 FFF7FEFF 		bl	MX_TIM3_Init
 2200              	.LVL259:
 140:Src/main.c    ****   MX_TIM2_Init();
 2201              		.loc 1 140 0
 2202 0018 FFF7FEFF 		bl	MX_TIM1_Init
 2203              	.LVL260:
 141:Src/main.c    ****   MX_ADC1_Init();
 2204              		.loc 1 141 0
 2205 001c FFF7FEFF 		bl	MX_TIM2_Init
 2206              	.LVL261:
 142:Src/main.c    ****   MX_TIM4_Init();
 2207              		.loc 1 142 0
 2208 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2209              	.LVL262:
 143:Src/main.c    ****   MX_TIM9_Init();
 2210              		.loc 1 143 0
 2211 0024 FFF7FEFF 		bl	MX_TIM4_Init
 2212              	.LVL263:
 144:Src/main.c    ****   MX_TIM5_Init();
 2213              		.loc 1 144 0
 2214 0028 FFF7FEFF 		bl	MX_TIM9_Init
 2215              	.LVL264:
 145:Src/main.c    ****   MX_I2C1_Init();
 2216              		.loc 1 145 0
 2217 002c FFF7FEFF 		bl	MX_TIM5_Init
 2218              	.LVL265:
 146:Src/main.c    ****   MX_USART6_UART_Init();
 2219              		.loc 1 146 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 59


 2220 0030 FFF7FEFF 		bl	MX_I2C1_Init
 2221              	.LVL266:
 147:Src/main.c    ****   /* USER CODE BEGIN 2 */
 2222              		.loc 1 147 0
 2223 0034 FFF7FEFF 		bl	MX_USART6_UART_Init
 2224              	.LVL267:
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 2225              		.loc 1 164 0
 2226 0038 9248     		ldr	r0, .L149
 2227 003a 1821     		movs	r1, #24
 2228 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2229              	.LVL268:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 2230              		.loc 1 165 0
 2231 0040 9148     		ldr	r0, .L149+4
 2232 0042 1821     		movs	r1, #24
 2233 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2234              	.LVL269:
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 2235              		.loc 1 166 0
 2236 0048 904C     		ldr	r4, .L149+8
 2237 004a 2046     		mov	r0, r4
 2238 004c 0021     		movs	r1, #0
 2239 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2240              	.LVL270:
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 2241              		.loc 1 167 0
 2242 0052 2046     		mov	r0, r4
 2243 0054 0421     		movs	r1, #4
 2244 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2245              	.LVL271:
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 2246              		.loc 1 168 0
 2247 005a 2046     		mov	r0, r4
 2248 005c 0821     		movs	r1, #8
 2249 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2250              	.LVL272:
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2251              		.loc 1 169 0
 2252 0062 2046     		mov	r0, r4
 2253 0064 0C21     		movs	r1, #12
 2254 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2255              	.LVL273:
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 2256              		.loc 1 170 0
 2257 006a 894C     		ldr	r4, .L149+12
 2258 006c 2046     		mov	r0, r4
 2259 006e 0021     		movs	r1, #0
 2260 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2261              	.LVL274:
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 2262              		.loc 1 171 0
 2263 0074 2046     		mov	r0, r4
 2264 0076 0421     		movs	r1, #4
 2265 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2266              	.LVL275:
 172:Src/main.c    **** 
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 60


 2267              		.loc 1 172 0
 2268 007c 2046     		mov	r0, r4
 2269 007e 0821     		movs	r1, #8
 2270 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2271              	.LVL276:
 175:Src/main.c    ****     print("Starting\n", 0);
 2272              		.loc 1 175 0
 2273 0084 FFF7FEFF 		bl	ssd1306_Init
 2274              	.LVL277:
 176:Src/main.c    ****     claw_init(&htim3);
 2275              		.loc 1 176 0
 2276 0088 8248     		ldr	r0, .L149+16
 2277 008a 0021     		movs	r1, #0
 2278 008c FFF7FEFF 		bl	print
 2279              	.LVL278:
 177:Src/main.c    ****     // basket_init(&htim3);
 2280              		.loc 1 177 0
 2281 0090 2046     		mov	r0, r4
 2282 0092 FFF7FEFF 		bl	claw_init
 2283              	.LVL279:
 181:Src/main.c    **** 
 2284              		.loc 1 181 0
 2285 0096 0223     		movs	r3, #2
 2286 0098 0093     		str	r3, [sp]
 2287 009a 0123     		movs	r3, #1
 2288 009c 0193     		str	r3, [sp, #4]
 2289 009e 04A8     		add	r0, sp, #16
 2290 00a0 0A21     		movs	r1, #10
 2291 00a2 0022     		movs	r2, #0
 2292 00a4 1346     		mov	r3, r2
 2293 00a6 FFF7FEFF 		bl	pid_Init
 2294              	.LVL280:
 183:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 2295              		.loc 1 183 0
 2296 00aa 0024     		movs	r4, #0
 2297 00ac 7A4B     		ldr	r3, .L149+20
 2298 00ae 1C70     		strb	r4, [r3]
 184:Src/main.c    **** 
 2299              		.loc 1 184 0
 2300 00b0 7A4B     		ldr	r3, .L149+24
 2301 00b2 1C70     		strb	r4, [r3]
 194:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 2302              		.loc 1 194 0
 2303 00b4 0620     		movs	r0, #6
 2304 00b6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2305              	.LVL281:
 195:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 2306              		.loc 1 195 0
 2307 00ba 0A20     		movs	r0, #10
 2308 00bc FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2309              	.LVL282:
 196:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 2310              		.loc 1 196 0
 2311 00c0 774B     		ldr	r3, .L149+28
 2312 00c2 1C70     		strb	r4, [r3]
 197:Src/main.c    **** 
 2313              		.loc 1 197 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 61


 2314 00c4 774B     		ldr	r3, .L149+32
 2315 00c6 1C70     		strb	r4, [r3]
 200:Src/main.c    ****   /* USER CODE END 2 */
 2316              		.loc 1 200 0
 2317 00c8 7748     		ldr	r0, .L149+36
 2318 00ca 2146     		mov	r1, r4
 2319 00cc FFF7FEFF 		bl	print
 2320              	.LVL283:
 2321              	.L134:
 252:Src/main.c    ****         {
 2322              		.loc 1 252 0
 2323 00d0 7648     		ldr	r0, .L149+40
 2324 00d2 0121     		movs	r1, #1
 2325 00d4 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2326              	.LVL284:
 2327 00d8 0028     		cmp	r0, #0
 2328 00da 71D0     		beq	.L135
 2329              	.LBB6:
 255:Src/main.c    ****             // Turn to ewok
 2330              		.loc 1 255 0
 2331 00dc 7448     		ldr	r0, .L149+44
 2332 00de 0021     		movs	r1, #0
 2333 00e0 FFF7FEFF 		bl	print
 2334              	.LVL285:
 257:Src/main.c    ****             // Drive forward w/ PID for 2.5 s, enable claw interrupt
 2335              		.loc 1 257 0
 2336 00e4 FFF7FEFF 		bl	turn
 2337              	.LVL286:
 259:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2338              		.loc 1 259 0
 2339 00e8 0020     		movs	r0, #0
 2340 00ea 724B     		ldr	r3, .L149+48
 2341 00ec 1988     		ldrh	r1, [r3]
 2342 00ee FFF7FEFF 		bl	set_motor_speed
 2343              	.LVL287:
 260:Src/main.c    ****             uint32_t start = HAL_GetTick();
 2344              		.loc 1 260 0
 2345 00f2 0820     		movs	r0, #8
 2346 00f4 704B     		ldr	r3, .L149+52
 2347 00f6 1988     		ldrh	r1, [r3]
 2348 00f8 FFF7FEFF 		bl	set_motor_speed
 2349              	.LVL288:
 261:Src/main.c    ****         
 2350              		.loc 1 261 0
 2351 00fc FFF7FEFF 		bl	HAL_GetTick
 2352              	.LVL289:
 2353 0100 0446     		mov	r4, r0
 2354              	.LVL290:
 264:Src/main.c    ****             while ((HAL_GetTick() - start) < 2500)
 2355              		.loc 1 264 0
 2356 0102 6E48     		ldr	r0, .L149+56
 2357              	.LVL291:
 2358 0104 0021     		movs	r1, #0
 2359 0106 FFF7FEFF 		bl	print
 2360              	.LVL292:
 265:Src/main.c    ****             {
 2361              		.loc 1 265 0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 62


 2362 010a 41E0     		b	.L136
 2363              	.L141:
 267:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 2364              		.loc 1 267 0
 2365 010c 04A8     		add	r0, sp, #16
 2366 010e FFF7FEFF 		bl	drive_straight
 2367              	.LVL293:
 269:Src/main.c    ****                 {
 2368              		.loc 1 269 0
 2369 0112 6B48     		ldr	r0, .L149+60
 2370 0114 1021     		movs	r1, #16
 2371 0116 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2372              	.LVL294:
 2373 011a 0128     		cmp	r0, #1
 2374 011c 0FD1     		bne	.L137
 271:Src/main.c    ****                     if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 2375              		.loc 1 271 0
 2376 011e 6948     		ldr	r0, .L149+64
 2377 0120 0021     		movs	r1, #0
 2378 0122 FFF7FEFF 		bl	print
 2379              	.LVL295:
 272:Src/main.c    ****                 }
 2380              		.loc 1 272 0
 2381 0126 0AAB     		add	r3, sp, #40
 2382 0128 13E90700 		ldmdb	r3, {r0, r1, r2}
 2383 012c 8DE80700 		stmia	sp, {r0, r1, r2}
 2384 0130 04AB     		add	r3, sp, #16
 2385 0132 0ECB     		ldmia	r3, {r1, r2, r3}
 2386 0134 0020     		movs	r0, #0
 2387 0136 FFF7FEFF 		bl	debounce_and_grab
 2388              	.LVL296:
 2389 013a 48B3     		cbz	r0, .L136
 2390 013c 2FE0     		b	.L138
 2391              	.L137:
 274:Src/main.c    ****                 {
 2392              		.loc 1 274 0
 2393 013e 6248     		ldr	r0, .L149+68
 2394 0140 0421     		movs	r1, #4
 2395 0142 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2396              	.LVL297:
 2397 0146 70B9     		cbnz	r0, .L140
 276:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 2398              		.loc 1 276 0
 2399 0148 0146     		mov	r1, r0
 2400 014a FFF7FEFF 		bl	set_motor_speed
 2401              	.LVL298:
 277:Src/main.c    ****                     print("Edge left triggered", 0);
 2402              		.loc 1 277 0
 2403 014e 0820     		movs	r0, #8
 2404 0150 0021     		movs	r1, #0
 2405 0152 FFF7FEFF 		bl	set_motor_speed
 2406              	.LVL299:
 278:Src/main.c    ****                     turn_deg(30);
 2407              		.loc 1 278 0
 2408 0156 5D48     		ldr	r0, .L149+72
 2409 0158 0021     		movs	r1, #0
 2410 015a FFF7FEFF 		bl	print
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 63


 2411              	.LVL300:
 279:Src/main.c    ****                 }
 2412              		.loc 1 279 0
 2413 015e 1E20     		movs	r0, #30
 2414 0160 FFF7FEFF 		bl	turn_deg
 2415              	.LVL301:
 2416 0164 14E0     		b	.L136
 2417              	.L140:
 281:Src/main.c    ****                     print("Edge right triggered", 0);
 2418              		.loc 1 281 0
 2419 0166 5148     		ldr	r0, .L149+40
 2420 0168 0821     		movs	r1, #8
 2421 016a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2422              	.LVL302:
 2423 016e 78B9     		cbnz	r0, .L136
 282:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 2424              		.loc 1 282 0
 2425 0170 5748     		ldr	r0, .L149+76
 2426 0172 0021     		movs	r1, #0
 2427 0174 FFF7FEFF 		bl	print
 2428              	.LVL303:
 283:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 2429              		.loc 1 283 0
 2430 0178 0020     		movs	r0, #0
 2431 017a 0146     		mov	r1, r0
 2432 017c FFF7FEFF 		bl	set_motor_speed
 2433              	.LVL304:
 284:Src/main.c    ****                     turn_deg(-30);
 2434              		.loc 1 284 0
 2435 0180 0820     		movs	r0, #8
 2436 0182 0021     		movs	r1, #0
 2437 0184 FFF7FEFF 		bl	set_motor_speed
 2438              	.LVL305:
 285:Src/main.c    ****                 }
 2439              		.loc 1 285 0
 2440 0188 6FF01D00 		mvn	r0, #29
 2441 018c FFF7FEFF 		bl	turn_deg
 2442              	.LVL306:
 2443              	.L136:
 265:Src/main.c    ****             {
 2444              		.loc 1 265 0
 2445 0190 FFF7FEFF 		bl	HAL_GetTick
 2446              	.LVL307:
 2447 0194 001B     		subs	r0, r0, r4
 2448 0196 40F6C313 		movw	r3, #2499
 2449 019a 9842     		cmp	r0, r3
 2450 019c B6D9     		bls	.L141
 2451              	.L138:
 289:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 2452              		.loc 1 289 0
 2453 019e 4248     		ldr	r0, .L149+36
 2454 01a0 0021     		movs	r1, #0
 2455 01a2 FFF7FEFF 		bl	print
 2456              	.LVL308:
 290:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 2457              		.loc 1 290 0
 2458 01a6 0020     		movs	r0, #0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 64


 2459 01a8 0146     		mov	r1, r0
 2460 01aa FFF7FEFF 		bl	set_motor_speed
 2461              	.LVL309:
 291:Src/main.c    ****             HAL_Delay(3000);
 2462              		.loc 1 291 0
 2463 01ae 0820     		movs	r0, #8
 2464 01b0 0021     		movs	r1, #0
 2465 01b2 FFF7FEFF 		bl	set_motor_speed
 2466              	.LVL310:
 292:Src/main.c    ****         }
 2467              		.loc 1 292 0
 2468 01b6 40F6B830 		movw	r0, #3000
 2469 01ba FFF7FEFF 		bl	HAL_Delay
 2470              	.LVL311:
 2471              	.LBE6:
 2472 01be 87E7     		b	.L134
 2473              	.LVL312:
 2474              	.L135:
 2475              	.LBB7:
 317:Src/main.c    ****             print("ewok\n", 0);
 2476              		.loc 1 317 0
 2477 01c0 3C4B     		ldr	r3, .L149+48
 2478 01c2 1988     		ldrh	r1, [r3]
 2479 01c4 3C4B     		ldr	r3, .L149+52
 2480 01c6 1A88     		ldrh	r2, [r3]
 2481 01c8 04A8     		add	r0, sp, #16
 2482 01ca 6439     		subs	r1, r1, #100
 2483 01cc 643A     		subs	r2, r2, #100
 2484 01ce 4FF4FA73 		mov	r3, #500
 2485 01d2 FFF7FEFF 		bl	drive_straight_time
 2486              	.LVL313:
 318:Src/main.c    ****             if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 2487              		.loc 1 318 0
 2488 01d6 3448     		ldr	r0, .L149+36
 2489 01d8 0021     		movs	r1, #0
 2490 01da FFF7FEFF 		bl	print
 2491              	.LVL314:
 319:Src/main.c    ****                 {
 2492              		.loc 1 319 0
 2493 01de 3848     		ldr	r0, .L149+60
 2494 01e0 1021     		movs	r1, #16
 2495 01e2 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2496              	.LVL315:
 2497 01e6 0128     		cmp	r0, #1
 2498 01e8 0FD1     		bne	.L143
 321:Src/main.c    ****                     if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 2499              		.loc 1 321 0
 2500 01ea 3648     		ldr	r0, .L149+64
 2501 01ec 0021     		movs	r1, #0
 2502 01ee FFF7FEFF 		bl	print
 2503              	.LVL316:
 322:Src/main.c    ****                 }
 2504              		.loc 1 322 0
 2505 01f2 0AAB     		add	r3, sp, #40
 2506 01f4 13E90700 		ldmdb	r3, {r0, r1, r2}
 2507 01f8 8DE80700 		stmia	sp, {r0, r1, r2}
 2508 01fc 04AB     		add	r3, sp, #16
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 65


 2509 01fe 0ECB     		ldmia	r3, {r1, r2, r3}
 2510 0200 0020     		movs	r0, #0
 2511 0202 FFF7FEFF 		bl	debounce_and_grab
 2512              	.LVL317:
 2513 0206 48B3     		cbz	r0, .L145
 2514              	.LBE7:
 2515 0208 3AE0     		b	.L144
 2516              	.L143:
 2517              	.LBB8:
 324:Src/main.c    ****                 {
 2518              		.loc 1 324 0
 2519 020a 2F48     		ldr	r0, .L149+68
 2520 020c 0421     		movs	r1, #4
 2521 020e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2522              	.LVL318:
 2523 0212 70B9     		cbnz	r0, .L146
 326:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 2524              		.loc 1 326 0
 2525 0214 0146     		mov	r1, r0
 2526 0216 FFF7FEFF 		bl	set_motor_speed
 2527              	.LVL319:
 327:Src/main.c    ****                     print("Edge left triggered", 0);
 2528              		.loc 1 327 0
 2529 021a 0820     		movs	r0, #8
 2530 021c 0021     		movs	r1, #0
 2531 021e FFF7FEFF 		bl	set_motor_speed
 2532              	.LVL320:
 328:Src/main.c    ****                     turn_deg(30);
 2533              		.loc 1 328 0
 2534 0222 2A48     		ldr	r0, .L149+72
 2535 0224 0021     		movs	r1, #0
 2536 0226 FFF7FEFF 		bl	print
 2537              	.LVL321:
 329:Src/main.c    ****                 }
 2538              		.loc 1 329 0
 2539 022a 1E20     		movs	r0, #30
 2540 022c FFF7FEFF 		bl	turn_deg
 2541              	.LVL322:
 2542 0230 14E0     		b	.L145
 2543              	.L146:
 331:Src/main.c    ****                     print("Edge right triggered", 0);
 2544              		.loc 1 331 0
 2545 0232 1E48     		ldr	r0, .L149+40
 2546 0234 0821     		movs	r1, #8
 2547 0236 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2548              	.LVL323:
 2549 023a 78B9     		cbnz	r0, .L145
 332:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 2550              		.loc 1 332 0
 2551 023c 2448     		ldr	r0, .L149+76
 2552 023e 0021     		movs	r1, #0
 2553 0240 FFF7FEFF 		bl	print
 2554              	.LVL324:
 333:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 2555              		.loc 1 333 0
 2556 0244 0020     		movs	r0, #0
 2557 0246 0146     		mov	r1, r0
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 66


 2558 0248 FFF7FEFF 		bl	set_motor_speed
 2559              	.LVL325:
 334:Src/main.c    ****                     turn_deg(-30);
 2560              		.loc 1 334 0
 2561 024c 0820     		movs	r0, #8
 2562 024e 0021     		movs	r1, #0
 2563 0250 FFF7FEFF 		bl	set_motor_speed
 2564              	.LVL326:
 335:Src/main.c    ****                 }
 2565              		.loc 1 335 0
 2566 0254 6FF01D00 		mvn	r0, #29
 2567 0258 FFF7FEFF 		bl	turn_deg
 2568              	.LVL327:
 2569              	.L145:
 337:Src/main.c    ****             while ((HAL_GetTick() - temp_time) < 3000 && HAL_GPIO_ReadPin(PI_INT_GPIO_Port, PI_INT_
 2570              		.loc 1 337 0
 2571 025c FFF7FEFF 		bl	HAL_GetTick
 2572              	.LVL328:
 2573 0260 0446     		mov	r4, r0
 2574              	.LVL329:
 2575              	.L147:
 338:Src/main.c    ****         }
 2576              		.loc 1 338 0 discriminator 2
 2577 0262 FFF7FEFF 		bl	HAL_GetTick
 2578              	.LVL330:
 2579 0266 001B     		subs	r0, r0, r4
 2580 0268 40F6B733 		movw	r3, #2999
 2581 026c 9842     		cmp	r0, r3
 2582 026e 3FF62FAF 		bhi	.L134
 338:Src/main.c    ****         }
 2583              		.loc 1 338 0 is_stmt 0 discriminator 1
 2584 0272 0E48     		ldr	r0, .L149+40
 2585 0274 0121     		movs	r1, #1
 2586 0276 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2587              	.LVL331:
 2588 027a 0028     		cmp	r0, #0
 2589 027c F1D1     		bne	.L147
 2590 027e 27E7     		b	.L134
 2591              	.LVL332:
 2592              	.L144:
 2593              	.LBE8:
 347:Src/main.c    **** 
 2594              		.loc 1 347 0 is_stmt 1
 2595 0280 0AB0     		add	sp, sp, #40
 2596              	.LCFI36:
 2597              		.cfi_def_cfa_offset 8
 2598              		@ sp needed
 2599 0282 10BD     		pop	{r4, pc}
 2600              	.L150:
 2601              		.align	2
 2602              	.L149:
 2603 0284 00000000 		.word	htim4
 2604 0288 00000000 		.word	htim5
 2605 028c 00000000 		.word	htim1
 2606 0290 00000000 		.word	htim3
 2607 0294 00000000 		.word	.LC0
 2608 0298 00000000 		.word	EDGE_LEFT_STATE
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 67


 2609 029c 00000000 		.word	EDGE_RIGHT_STATE
 2610 02a0 00000000 		.word	PI_INT_STATE
 2611 02a4 00000000 		.word	CLAW_INT_STATE
 2612 02a8 F8010000 		.word	.LC25
 2613 02ac 00080240 		.word	1073874944
 2614 02b0 00020000 		.word	.LC26
 2615 02b4 00000000 		.word	.LANCHOR1
 2616 02b8 00000000 		.word	.LANCHOR0
 2617 02bc 10020000 		.word	.LC27
 2618 02c0 00040240 		.word	1073873920
 2619 02c4 98010000 		.word	.LC19
 2620 02c8 000C0240 		.word	1073875968
 2621 02cc A8010000 		.word	.LC20
 2622 02d0 BC010000 		.word	.LC21
 2623              		.cfi_endproc
 2624              	.LFE124:
 2626              		.global	ewok_cnt
 2627              		.comm	adc_values,8192,4
 2628              		.comm	dma_buffer,8192,4
 2629              		.global	RIGHT_SPEED
 2630              		.global	LEFT_SPEED
 2631              		.section	.data.RIGHT_SPEED,"aw",%progbits
 2632              		.align	1
 2633              		.set	.LANCHOR0,. + 0
 2636              	RIGHT_SPEED:
 2637 0000 5802     		.short	600
 2638              		.section	.data.LEFT_SPEED,"aw",%progbits
 2639              		.align	1
 2640              		.set	.LANCHOR1,. + 0
 2643              	LEFT_SPEED:
 2644 0000 5802     		.short	600
 2645              		.section	.rodata.str1.4,"aMS",%progbits,1
 2646              		.align	2
 2647              	.LC0:
 2648 0000 53746172 		.ascii	"Starting\012\000"
 2648      74696E67 
 2648      0A00
 2649 000a 0000     		.space	2
 2650              	.LC1:
 2651 000c 256C750A 		.ascii	"%lu\012\000"
 2651      00
 2652 0011 000000   		.space	3
 2653              	.LC2:
 2654 0014 5455524E 		.ascii	"TURN | cnts: %d\012\000"
 2654      207C2063 
 2654      6E74733A 
 2654      2025640A 
 2654      00
 2655 0025 000000   		.space	3
 2656              	.LC3:
 2657 0028 5455524E 		.ascii	"TURN | vlts: %d.%d\012\000"
 2657      207C2076 
 2657      6C74733A 
 2657      2025642E 
 2657      25640A00 
 2658              	.LC4:
 2659 003c 5455524E 		.ascii	"TURN | ADC_VAL: %d\012\000"
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 68


 2659      207C2041 
 2659      44435F56 
 2659      414C3A20 
 2659      25640A00 
 2660              	.LC5:
 2661 0050 5455524E 		.ascii	"TURN | TIM5->CNT: %lu\012\000"
 2661      207C2054 
 2661      494D352D 
 2661      3E434E54 
 2661      3A20256C 
 2662 0067 00       		.space	1
 2663              	.LC6:
 2664 0068 5455524E 		.ascii	"TURN | TIM4->CNT: %lu\012\000"
 2664      207C2054 
 2664      494D342D 
 2664      3E434E54 
 2664      3A20256C 
 2665 007f 00       		.space	1
 2666              	.LC7:
 2667 0080 5455524E 		.ascii	"TURN_DEG | turn count: %d\012\000"
 2667      5F444547 
 2667      207C2074 
 2667      75726E20 
 2667      636F756E 
 2668 009b 00       		.space	1
 2669              	.LC8:
 2670 009c 5455524E 		.ascii	"TURN_DEG | TIM5->CNT: %lu\012\000"
 2670      5F444547 
 2670      207C2054 
 2670      494D352D 
 2670      3E434E54 
 2671 00b7 00       		.space	1
 2672              	.LC9:
 2673 00b8 5455524E 		.ascii	"TURN_DEG | TIM4->CNT: %lu\012\000"
 2673      5F444547 
 2673      207C2054 
 2673      494D342D 
 2673      3E434E54 
 2674 00d3 00       		.space	1
 2675              	.LC10:
 2676 00d4 53515541 		.ascii	"SQUARE_EDGE | EL: %d\012\000"
 2676      52455F45 
 2676      44474520 
 2676      7C20454C 
 2676      3A202564 
 2677 00ea 0000     		.space	2
 2678              	.LC11:
 2679 00ec 53515541 		.ascii	"SQUARE_EDGE | ER: %d\012\000"
 2679      52455F45 
 2679      44474520 
 2679      7C204552 
 2679      3A202564 
 2680 0102 0000     		.space	2
 2681              	.LC12:
 2682 0104 0A00     		.ascii	"\012\000"
 2683 0106 0000     		.space	2
 2684              	.LC13:
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 69


 2685 0108 434C4157 		.ascii	"CLAW_GRAB | grabbing ewok\012\000"
 2685      5F475241 
 2685      42207C20 
 2685      67726162 
 2685      62696E67 
 2686 0123 00       		.space	1
 2687              	.LC14:
 2688 0124 46697273 		.ascii	"First ewok captured\012\000"
 2688      74206577 
 2688      6F6B2063 
 2688      61707475 
 2688      7265640A 
 2689 0139 000000   		.space	3
 2690              	.LC15:
 2691 013c 5365636F 		.ascii	"Second ewok captured\012\000"
 2691      6E642065 
 2691      776F6B20 
 2691      63617074 
 2691      75726564 
 2692 0152 0000     		.space	2
 2693              	.LC16:
 2694 0154 54686972 		.ascii	"Third ewok captured\012\000"
 2694      64206577 
 2694      6F6B2063 
 2694      61707475 
 2694      7265640A 
 2695 0169 000000   		.space	3
 2696              	.LC17:
 2697 016c 466F7572 		.ascii	"Fourth ewok captured\012\000"
 2697      74682065 
 2697      776F6B20 
 2697      63617074 
 2697      75726564 
 2698 0182 0000     		.space	2
 2699              	.LC18:
 2700 0184 43686577 		.ascii	"Chewie captured\012\000"
 2700      69652063 
 2700      61707475 
 2700      7265640A 
 2700      00
 2701 0195 000000   		.space	3
 2702              	.LC19:
 2703 0198 436C6177 		.ascii	"Claw interrupt\012\000"
 2703      20696E74 
 2703      65727275 
 2703      70740A00 
 2704              	.LC20:
 2705 01a8 45646765 		.ascii	"Edge left triggered\000"
 2705      206C6566 
 2705      74207472 
 2705      69676765 
 2705      72656400 
 2706              	.LC21:
 2707 01bc 45646765 		.ascii	"Edge right triggered\000"
 2707      20726967 
 2707      68742074 
 2707      72696767 
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 70


 2707      65726564 
 2708 01d1 000000   		.space	3
 2709              	.LC22:
 2710 01d4 63685F35 		.ascii	"ch_5: %d\012\000"
 2710      3A202564 
 2710      0A00
 2711 01de 0000     		.space	2
 2712              	.LC23:
 2713 01e0 63685F34 		.ascii	"ch_4: %d\012\000"
 2713      3A202564 
 2713      0A00
 2714 01ea 0000     		.space	2
 2715              	.LC24:
 2716 01ec 5372632F 		.ascii	"Src/main.c\000"
 2716      6D61696E 
 2716      2E6300
 2717 01f7 00       		.space	1
 2718              	.LC25:
 2719 01f8 65776F6B 		.ascii	"ewok\012\000"
 2719      0A00
 2720 01fe 0000     		.space	2
 2721              	.LC26:
 2722 0200 50692069 		.ascii	"Pi interrupt\012\000"
 2722      6E746572 
 2722      72757074 
 2722      0A00
 2723 020e 0000     		.space	2
 2724              	.LC27:
 2725 0210 4D41494E 		.ascii	"MAIN | CLAW_INT UNFLAGGED\012\000"
 2725      207C2043 
 2725      4C41575F 
 2725      494E5420 
 2725      554E464C 
 2726              		.section	.bss.ewok_cnt,"aw",%nobits
 2727              		.align	2
 2728              		.set	.LANCHOR2,. + 0
 2731              	ewok_cnt:
 2732 0000 00000000 		.space	4
 2733              		.text
 2734              	.Letext0:
 2735              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2736              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2737              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2738              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2739              		.file 6 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 2740              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2741              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2742              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2743              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2744              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2745              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2746              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2747              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2748              		.file 15 "Inc/pid.h"
 2749              		.file 16 "Drivers/CMSIS/Include/core_cm4.h"
 2750              		.file 17 "Inc/adc.h"
 2751              		.file 18 "Inc/tim.h"
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 71


 2752              		.file 19 "Inc/usart.h"
 2753              		.file 20 "Inc/extern_vars.h"
 2754              		.file 21 "Inc/filter.h"
 2755              		.file 22 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 2756              		.file 23 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2757              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2758              		.file 25 "Inc/claw.h"
 2759              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2760              		.file 27 "Inc/gpio.h"
 2761              		.file 28 "Inc/dma.h"
 2762              		.file 29 "Inc/i2c.h"
 2763              		.file 30 "Inc/ssd1306.h"
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 72


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:104    .text.alarm_detect:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:109    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:183    .text.alarm_detect:0000000000000078 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:192    .text.print:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:197    .text.print:0000000000000000 print
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:224    .text.print:0000000000000018 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:229    .text.menu:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:234    .text.menu:0000000000000000 menu
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:347    .text.menu:000000000000009c $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:354    .text.set_motor_speed:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:359    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:425    .text.set_motor_speed:000000000000004c $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:432    .text.turn:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:437    .text.turn:0000000000000000 turn
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:665    .text.turn:0000000000000160 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:690    .text.turn_deg:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:695    .text.turn_deg:0000000000000000 turn_deg
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:876    .text.turn_deg:0000000000000108 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:892    .text.encoder_pid:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:897    .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:952    .text.encoder_pid:000000000000003c $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:957    .text.drive_straight:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:962    .text.drive_straight:0000000000000000 drive_straight
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:986    .text.square_edge:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:991    .text.square_edge:0000000000000000 square_edge
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1116   .text.square_edge:00000000000000a4 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1125   .text.debounce_and_grab:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1130   .text.debounce_and_grab:0000000000000000 debounce_and_grab
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1619   .text.drive_straight_time:0000000000000000 drive_straight_time
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1592   .text.debounce_and_grab:00000000000002b0 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1614   .text.drive_straight_time:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1756   .text.drive_straight_time:00000000000000b8 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1767   .text.test_PWM_htim1:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1772   .text.test_PWM_htim1:0000000000000000 test_PWM_htim1
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1823   .text.test_PWM_htim1:0000000000000034 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1828   .text.test_PWM_htim3:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1833   .text.test_PWM_htim3:0000000000000000 test_PWM_htim3
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1891   .text.test_PWM_htim3:0000000000000040 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1896   .text.test_ADC:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1901   .text.test_ADC:0000000000000000 test_ADC
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1968   .text.test_ADC:0000000000000050 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1977   .text.test_All:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:1982   .text.test_All:0000000000000000 test_All
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2007   .text._Error_Handler:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2012   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2028   .text.SystemClock_Config:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2033   .text.SystemClock_Config:0000000000000000 SystemClock_Config
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 73


/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2159   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2167   .text.main:0000000000000000 $t
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2172   .text.main:0000000000000000 main
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2603   .text.main:0000000000000284 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2731   .bss.ewok_cnt:0000000000000000 ewok_cnt
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2636   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2643   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2632   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2639   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2646   .rodata.str1.4:0000000000000000 $d
/var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s:2727   .bss.ewok_cnt:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
strlen
HAL_UART_Transmit
huart6
HAL_GPIO_ReadPin
sprintf
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dadd
__aeabi_d2iz
pid_GetGain
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
HAL_GetTick
close_claw
arm_up
open_claw
arm_down
slow_actuate
htim3
TAPE_LEFT_STATE
TAPE_RIGHT_STATE
CLAW_INT_STATE
HAL_TIM_PWM_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
ARM GAS  /var/folders/1t/b_pdlv_14gngm6ztkcy5zjlw0000gn/T//ccyzbC0Q.s 			page 74


HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_ADC1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
MX_I2C1_Init
MX_USART6_UART_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
HAL_NVIC_EnableIRQ
htim4
htim5
PI_INT_STATE
