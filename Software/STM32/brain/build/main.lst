ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	__aeabi_d2iz
  21              		.section	.text.do_pid,"ax",%progbits
  22              		.align	2
  23              		.global	do_pid
  24              		.thumb
  25              		.thumb_func
  27              	do_pid:
  28              	.LFB124:
  29              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  ** This notice applies to any and all portions of this file
   8:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****  * inserted by the user or by software development tools
  11:Src/main.c    ****  * are owned by their respective copyright owners.
  12:Src/main.c    ****  *
  13:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****  *
  15:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****  * are permitted provided that the following conditions are met:
  17:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****  *      and/or other materials provided with the distribution.
  22:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****  *      without specific prior written permission.
  25:Src/main.c    ****  *
  26:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 2


  30:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****  *
  37:Src/main.c    ****  ******************************************************************************
  38:Src/main.c    ****  */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "stm32f4xx_it.h"
  43:Src/main.c    **** #include "adc.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "encoder.h"
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE BEGIN GV */
  58:Src/main.c    **** /* Global variables ---------------------------------------------------------*/
  59:Src/main.c    **** uint8_t PUSH_BUTTON_STATE = 0;
  60:Src/main.c    **** /* USER CODE END GV */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE END PV */
  66:Src/main.c    **** 
  67:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  68:Src/main.c    **** void SystemClock_Config(void);
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE BEGIN PFP */
  71:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  72:Src/main.c    **** void print(char msg[], int row);
  73:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]);
  74:Src/main.c    **** void do_pid(PID_t *pid_struct);
  75:Src/main.c    **** 
  76:Src/main.c    **** /* USER CODE END PFP */
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE BEGIN 0 */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE END 0 */
  81:Src/main.c    **** 
  82:Src/main.c    **** /**
  83:Src/main.c    ****  * @brief  The application entry point.
  84:Src/main.c    ****  *
  85:Src/main.c    ****  * @retval None
  86:Src/main.c    ****  */
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 3


  87:Src/main.c    **** int main(void)
  88:Src/main.c    **** {
  89:Src/main.c    ****     /* USER CODE BEGIN 1 */
  90:Src/main.c    **** 
  91:Src/main.c    ****     /* USER CODE END 1 */
  92:Src/main.c    **** 
  93:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
  94:Src/main.c    **** 
  95:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  96:Src/main.c    ****     HAL_Init();
  97:Src/main.c    **** 
  98:Src/main.c    ****     /* USER CODE BEGIN Init */
  99:Src/main.c    **** 
 100:Src/main.c    ****     /* USER CODE END Init */
 101:Src/main.c    **** 
 102:Src/main.c    ****     /* Configure the system clock */
 103:Src/main.c    ****     SystemClock_Config();
 104:Src/main.c    **** 
 105:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 106:Src/main.c    **** 
 107:Src/main.c    ****     /* USER CODE END SysInit */
 108:Src/main.c    **** 
 109:Src/main.c    ****     /* Initialize all configured peripherals */
 110:Src/main.c    ****     MX_GPIO_Init();
 111:Src/main.c    ****     MX_TIM3_Init();
 112:Src/main.c    ****     MX_TIM5_Init();
 113:Src/main.c    ****     MX_TIM1_Init();
 114:Src/main.c    ****     MX_TIM2_Init();
 115:Src/main.c    ****     MX_USART6_UART_Init();
 116:Src/main.c    ****     MX_ADC1_Init();
 117:Src/main.c    ****     MX_I2C1_Init();
 118:Src/main.c    ****     MX_TIM4_Init();
 119:Src/main.c    ****     MX_TIM9_Init();
 120:Src/main.c    ****     ssd1306_Init();
 121:Src/main.c    ****     /* USER CODE BEGIN 2 */
 122:Src/main.c    **** 
 123:Src/main.c    ****     /* Initialize all timer related stuffs*/
 124:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 125:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 126:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 127:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 128:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 129:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 130:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 131:Src/main.c    **** 
 132:Src/main.c    **** 
 133:Src/main.c    ****     /* Initialize struct stuffs*/
 134:Src/main.c    ****     ENCODER_t left_encoder = encoder_Init();
 135:Src/main.c    **** 
 136:Src/main.c    ****     /* declare external variables for use with interrupts*/
 137:Src/main.c    **** 
 138:Src/main.c    **** 
 139:Src/main.c    ****     //PID_t pid_s = menu();
 140:Src/main.c    ****     /* USER CODE END 2 */
 141:Src/main.c    ****     print("Starting", 0);
 142:Src/main.c    ****     /*char msg[20] = "";
 143:Src/main.c    ****     int pid_select = 0;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 4


 144:Src/main.c    ****     uint32_t values[3] = {0,0,0};
 145:Src/main.c    ****     while(1){
 146:Src/main.c    ****         if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 147:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 148:Src/main.c    ****             print(msg, 0);
 149:Src/main.c    ****             TIM4->CNT = values[pid_select];
 150:Src/main.c    ****             while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 151:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 152:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 153:Src/main.c    ****                 print(msg, 0);
 154:Src/main.c    ****             }
 155:Src/main.c    ****             ++pid_select;
 156:Src/main.c    ****         }
 157:Src/main.c    ****         if(pid_select==3) break;
 158:Src/main.c    ****     }
 159:Src/main.c    ****     PID_t pid_s = pid_Init(values[0],values[1],values[2],5,2);
 160:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 161:Src/main.c    ****     print(msg, 0);
 162:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 163:Src/main.c    ****     print(msg, 1);
 164:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 165:Src/main.c    ****     print(msg, 2);
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 168:Src/main.c    ****     */
 169:Src/main.c    ****     /* Infinite loop */
 170:Src/main.c    ****     char msg[20] = "";
 171:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 172:Src/main.c    ****     while (1)
 173:Src/main.c    ****     {
 174:Src/main.c    ****                 double speed = update_encoder(&left_encoder);
 175:Src/main.c    ****                 sprintf(msg, "%d", (int)speed);
 176:Src/main.c    ****                 print(msg, 0);
 177:Src/main.c    ****                 HAL_Delay(1);
 178:Src/main.c    ****         //do_pid(&pid_s);
 179:Src/main.c    **** 
 180:Src/main.c    ****         /* USER CODE END WHILE */
 181:Src/main.c    **** 
 182:Src/main.c    ****         /* USER CODE BEGIN 3 */
 183:Src/main.c    **** 
 184:Src/main.c    ****     }
 185:Src/main.c    ****     /* USER CODE END 3 */
 186:Src/main.c    **** 
 187:Src/main.c    **** }
 188:Src/main.c    **** 
 189:Src/main.c    **** void do_pid(PID_t *pid_struct){
  30              		.loc 1 189 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 70B5     		push	{r4, r5, r6, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 4, -16
  39              		.cfi_offset 5, -12
  40              		.cfi_offset 6, -8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 5


  41              		.cfi_offset 14, -4
  42 0002 0646     		mov	r6, r0
 190:Src/main.c    ****     /* Read sensors */
 191:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin)? 0 : 1;
  43              		.loc 1 191 0
  44 0004 274D     		ldr	r5, .L11
  45 0006 2846     		mov	r0, r5
  46              	.LVL1:
  47 0008 4FF48041 		mov	r1, #16384
  48 000c FFF7FEFF 		bl	HAL_GPIO_ReadPin
  49              	.LVL2:
  50 0010 B0FA80F4 		clz	r4, r0
  51 0014 6409     		lsrs	r4, r4, #5
  52              	.LVL3:
 192:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin)? 0 : 1;
  53              		.loc 1 192 0
  54 0016 2846     		mov	r0, r5
  55 0018 4FF40041 		mov	r1, #32768
  56 001c FFF7FEFF 		bl	HAL_GPIO_ReadPin
  57              	.LVL4:
  58 0020 B0FA80F0 		clz	r0, r0
  59 0024 4009     		lsrs	r0, r0, #5
  60              	.LVL5:
 193:Src/main.c    **** 
 194:Src/main.c    ****     /* Get error */
 195:Src/main.c    ****     if(left && right){ pid_struct->err = 0; }
  61              		.loc 1 195 0
  62 0026 1CB1     		cbz	r4, .L2
  63              		.loc 1 195 0 is_stmt 0 discriminator 1
  64 0028 10B1     		cbz	r0, .L2
  65              		.loc 1 195 0 discriminator 2
  66 002a 0023     		movs	r3, #0
  67 002c 3362     		str	r3, [r6, #32]
  68 002e 1AE0     		b	.L3
  69              	.L2:
 196:Src/main.c    ****     else if(left && !right){ pid_struct->err = 1; }
  70              		.loc 1 196 0 is_stmt 1
  71 0030 1CB1     		cbz	r4, .L4
  72              		.loc 1 196 0 is_stmt 0 discriminator 1
  73 0032 10B9     		cbnz	r0, .L4
  74              		.loc 1 196 0 discriminator 2
  75 0034 0123     		movs	r3, #1
  76 0036 3362     		str	r3, [r6, #32]
  77 0038 15E0     		b	.L3
  78              	.L4:
 197:Src/main.c    ****     else if(!left && right){ pid_struct->err = -1; }
  79              		.loc 1 197 0 is_stmt 1
  80 003a 24B9     		cbnz	r4, .L5
  81              		.loc 1 197 0 is_stmt 0 discriminator 1
  82 003c 18B1     		cbz	r0, .L5
  83              		.loc 1 197 0 discriminator 2
  84 003e 4FF0FF33 		mov	r3, #-1
  85 0042 3362     		str	r3, [r6, #32]
  86 0044 0FE0     		b	.L3
  87              	.L5:
 198:Src/main.c    ****     else if(!left && !right && (pid_struct->err < 0)){ pid_struct->err = -5; }
  88              		.loc 1 198 0 is_stmt 1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 6


  89 0046 3CB9     		cbnz	r4, .L6
  90              		.loc 1 198 0 is_stmt 0 discriminator 1
  91 0048 30B9     		cbnz	r0, .L6
  92              		.loc 1 198 0 discriminator 2
  93 004a 336A     		ldr	r3, [r6, #32]
  94 004c 002B     		cmp	r3, #0
  95 004e 03DA     		bge	.L6
  96              		.loc 1 198 0 discriminator 3
  97 0050 6FF00403 		mvn	r3, #4
  98 0054 3362     		str	r3, [r6, #32]
  99 0056 06E0     		b	.L3
 100              	.L6:
 199:Src/main.c    ****     else if(!left && !right && (pid_struct->err > 0)){ pid_struct->err = 5; }
 101              		.loc 1 199 0 is_stmt 1
 102 0058 2CB9     		cbnz	r4, .L3
 103              		.loc 1 199 0 is_stmt 0 discriminator 1
 104 005a 20B9     		cbnz	r0, .L3
 105              		.loc 1 199 0 discriminator 2
 106 005c 336A     		ldr	r3, [r6, #32]
 107 005e 002B     		cmp	r3, #0
 108 0060 01DD     		ble	.L3
 109              		.loc 1 199 0 discriminator 3
 110 0062 0523     		movs	r3, #5
 111 0064 3362     		str	r3, [r6, #32]
 112              	.L3:
 200:Src/main.c    **** 
 201:Src/main.c    ****     /* Get gain */
 202:Src/main.c    ****     double gain = pid_GetGain(pid_struct, &htim9);
 113              		.loc 1 202 0 is_stmt 1
 114 0066 3046     		mov	r0, r6
 115              	.LVL6:
 116 0068 0F49     		ldr	r1, .L11+4
 117 006a FFF7FEFF 		bl	pid_GetGain
 118              	.LVL7:
 203:Src/main.c    ****     int g = (int) gain;
 119              		.loc 1 203 0
 120 006e 51EC100B 		fmrrd	r0, r1, d0
 121 0072 FFF7FEFF 		bl	__aeabi_d2iz
 122              	.LVL8:
 204:Src/main.c    **** 
 205:Src/main.c    ****     /* Set Motor Speeds*/
 206:Src/main.c    ****     int left_speed = 840;
 207:Src/main.c    ****     int right_speed = 840;
 208:Src/main.c    ****     if(g<0){
 123              		.loc 1 208 0
 124 0076 0028     		cmp	r0, #0
 125 0078 04DA     		bge	.L7
 209:Src/main.c    ****         left_speed -= g;
 126              		.loc 1 209 0
 127 007a C0F55272 		rsb	r2, r0, #840
 128              	.LVL9:
 207:Src/main.c    ****     if(g<0){
 129              		.loc 1 207 0
 130 007e 4FF45270 		mov	r0, #840
 131              	.LVL10:
 132 0082 09E0     		b	.L8
 133              	.LVL11:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 7


 134              	.L7:
 210:Src/main.c    ****     }else if(g>0){
 135              		.loc 1 210 0
 136 0084 0028     		cmp	r0, #0
 137 0086 04DD     		ble	.L9
 211:Src/main.c    ****         right_speed += g;
 138              		.loc 1 211 0
 139 0088 00F55270 		add	r0, r0, #840
 140              	.LVL12:
 206:Src/main.c    ****     int right_speed = 840;
 141              		.loc 1 206 0
 142 008c 4FF45272 		mov	r2, #840
 143 0090 02E0     		b	.L8
 144              	.LVL13:
 145              	.L9:
 207:Src/main.c    ****     if(g<0){
 146              		.loc 1 207 0
 147 0092 4FF45270 		mov	r0, #840
 148              	.LVL14:
 206:Src/main.c    ****     int right_speed = 840;
 149              		.loc 1 206 0
 150 0096 0246     		mov	r2, r0
 151              	.LVL15:
 152              	.L8:
 212:Src/main.c    ****     }
 213:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_speed);
 153              		.loc 1 213 0
 154 0098 044B     		ldr	r3, .L11+8
 155 009a 1B68     		ldr	r3, [r3]
 156 009c 5A63     		str	r2, [r3, #52]
 214:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, right_speed);
 157              		.loc 1 214 0
 158 009e D863     		str	r0, [r3, #60]
 159 00a0 70BD     		pop	{r4, r5, r6, pc}
 160              	.LVL16:
 161              	.L12:
 162 00a2 00BF     		.align	2
 163              	.L11:
 164 00a4 00040240 		.word	1073873920
 165 00a8 00000000 		.word	htim9
 166 00ac 00000000 		.word	htim1
 167              		.cfi_endproc
 168              	.LFE124:
 170              		.section	.text.print,"ax",%progbits
 171              		.align	2
 172              		.global	print
 173              		.thumb
 174              		.thumb_func
 176              	print:
 177              	.LFB127:
 215:Src/main.c    **** }
 216:Src/main.c    **** 
 217:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]){
 218:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[0]/100.0*MOTOR_SPEED);
 219:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[1]/100.0*MOTOR_SPEED);
 220:Src/main.c    ****     char msg[20] = "";
 221:Src/main.c    ****     sprintf(msg, "L: %lu", speed[0]);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 8


 222:Src/main.c    ****     print(msg, 0);
 223:Src/main.c    ****     sprintf(msg, "R: %lu", speed[1]);
 224:Src/main.c    ****     print(msg, 1);
 225:Src/main.c    **** }
 226:Src/main.c    **** 
 227:Src/main.c    **** /**
 228:Src/main.c    ****  * @brief System Clock Configuration
 229:Src/main.c    ****  * @retval None
 230:Src/main.c    ****  */
 231:Src/main.c    **** void SystemClock_Config(void)
 232:Src/main.c    **** {
 233:Src/main.c    **** 
 234:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 235:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 236:Src/main.c    **** 
 237:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 238:Src/main.c    ****     */
 239:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 240:Src/main.c    **** 
 241:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 242:Src/main.c    **** 
 243:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 244:Src/main.c    ****     */
 245:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 246:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 247:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 248:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 249:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 250:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 251:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 252:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 253:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 254:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 255:Src/main.c    ****     {
 256:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 257:Src/main.c    ****     }
 258:Src/main.c    **** 
 259:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 260:Src/main.c    ****     */
 261:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 262:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 263:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 264:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 265:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 266:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 267:Src/main.c    **** 
 268:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 269:Src/main.c    ****     {
 270:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 271:Src/main.c    ****     }
 272:Src/main.c    **** 
 273:Src/main.c    ****     /**Configure the Systick interrupt time 
 274:Src/main.c    ****     */
 275:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 276:Src/main.c    **** 
 277:Src/main.c    ****     /**Configure the Systick 
 278:Src/main.c    ****     */
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 9


 279:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 280:Src/main.c    **** 
 281:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 282:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 283:Src/main.c    **** }
 284:Src/main.c    **** 
 285:Src/main.c    **** /* USER CODE BEGIN 4 */
 286:Src/main.c    **** /*
 287:Src/main.c    ****  * Rows from 0 - 6
 288:Src/main.c    ****  * Reset screen when printing from row 0
 289:Src/main.c    ****  */
 290:Src/main.c    **** void print(char* msg, int row){
 178              		.loc 1 290 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              	.LVL17:
 183 0000 38B5     		push	{r3, r4, r5, lr}
 184              	.LCFI1:
 185              		.cfi_def_cfa_offset 16
 186              		.cfi_offset 3, -16
 187              		.cfi_offset 4, -12
 188              		.cfi_offset 5, -8
 189              		.cfi_offset 14, -4
 190 0002 0546     		mov	r5, r0
 291:Src/main.c    ****     if(row==0){
 191              		.loc 1 291 0
 192 0004 0C46     		mov	r4, r1
 193 0006 11B9     		cbnz	r1, .L14
 292:Src/main.c    ****         ssd1306_Fill(Black);
 194              		.loc 1 292 0
 195 0008 0020     		movs	r0, #0
 196              	.LVL18:
 197 000a FFF7FEFF 		bl	ssd1306_Fill
 198              	.LVL19:
 199              	.L14:
 293:Src/main.c    ****     }
 294:Src/main.c    ****     ssd1306_SetCursor(0,row*10);
 200              		.loc 1 294 0
 201 000e 04EB8404 		add	r4, r4, r4, lsl #2
 202              	.LVL20:
 203 0012 6100     		lsls	r1, r4, #1
 204 0014 0020     		movs	r0, #0
 205 0016 01F0FE01 		and	r1, r1, #254
 206 001a FFF7FEFF 		bl	ssd1306_SetCursor
 207              	.LVL21:
 295:Src/main.c    ****     ssd1306_WriteString(msg,Font_7x10,White);
 208              		.loc 1 295 0
 209 001e 054B     		ldr	r3, .L16
 210 0020 2846     		mov	r0, r5
 211 0022 93E80600 		ldmia	r3, {r1, r2}
 212 0026 0123     		movs	r3, #1
 213 0028 FFF7FEFF 		bl	ssd1306_WriteString
 214              	.LVL22:
 296:Src/main.c    ****     ssd1306_UpdateScreen();
 215              		.loc 1 296 0
 216 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 10


 217              	.LVL23:
 218 0030 38BD     		pop	{r3, r4, r5, pc}
 219              	.LVL24:
 220              	.L17:
 221 0032 00BF     		.align	2
 222              	.L16:
 223 0034 00000000 		.word	Font_7x10
 224              		.cfi_endproc
 225              	.LFE127:
 227              		.global	__aeabi_ui2d
 228              		.global	__aeabi_ddiv
 229              		.global	__aeabi_dmul
 230              		.global	__aeabi_d2uiz
 231              		.section	.text.update_motor_speed,"ax",%progbits
 232              		.align	2
 233              		.global	update_motor_speed
 234              		.thumb
 235              		.thumb_func
 237              	update_motor_speed:
 238              	.LFB125:
 217:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[0]/100.0*MOTOR_SPEED);
 239              		.loc 1 217 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 24
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              	.LVL25:
 244 0000 30B5     		push	{r4, r5, lr}
 245              	.LCFI2:
 246              		.cfi_def_cfa_offset 12
 247              		.cfi_offset 4, -12
 248              		.cfi_offset 5, -8
 249              		.cfi_offset 14, -4
 250 0002 87B0     		sub	sp, sp, #28
 251              	.LCFI3:
 252              		.cfi_def_cfa_offset 40
 253 0004 0D46     		mov	r5, r1
 218:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[1]/100.0*MOTOR_SPEED);
 254              		.loc 1 218 0
 255 0006 1C4B     		ldr	r3, .L20
 256 0008 1C68     		ldr	r4, [r3]
 257 000a 0868     		ldr	r0, [r1]
 258              	.LVL26:
 259 000c FFF7FEFF 		bl	__aeabi_ui2d
 260              	.LVL27:
 261 0010 0022     		movs	r2, #0
 262 0012 1A4B     		ldr	r3, .L20+4
 263 0014 FFF7FEFF 		bl	__aeabi_ddiv
 264              	.LVL28:
 265 0018 0022     		movs	r2, #0
 266 001a 194B     		ldr	r3, .L20+8
 267 001c FFF7FEFF 		bl	__aeabi_dmul
 268              	.LVL29:
 269 0020 FFF7FEFF 		bl	__aeabi_d2uiz
 270              	.LVL30:
 271 0024 6063     		str	r0, [r4, #52]
 219:Src/main.c    ****     char msg[20] = "";
 272              		.loc 1 219 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 11


 273 0026 6868     		ldr	r0, [r5, #4]
 274 0028 FFF7FEFF 		bl	__aeabi_ui2d
 275              	.LVL31:
 276 002c 0022     		movs	r2, #0
 277 002e 134B     		ldr	r3, .L20+4
 278 0030 FFF7FEFF 		bl	__aeabi_ddiv
 279              	.LVL32:
 280 0034 0022     		movs	r2, #0
 281 0036 124B     		ldr	r3, .L20+8
 282 0038 FFF7FEFF 		bl	__aeabi_dmul
 283              	.LVL33:
 284 003c FFF7FEFF 		bl	__aeabi_d2uiz
 285              	.LVL34:
 286 0040 E063     		str	r0, [r4, #60]
 220:Src/main.c    ****     sprintf(msg, "L: %lu", speed[0]);
 287              		.loc 1 220 0
 288 0042 0024     		movs	r4, #0
 289 0044 0194     		str	r4, [sp, #4]
 290 0046 0294     		str	r4, [sp, #8]
 291 0048 0394     		str	r4, [sp, #12]
 292 004a 0494     		str	r4, [sp, #16]
 293 004c 0594     		str	r4, [sp, #20]
 221:Src/main.c    ****     print(msg, 0);
 294              		.loc 1 221 0
 295 004e 01A8     		add	r0, sp, #4
 296 0050 0C49     		ldr	r1, .L20+12
 297 0052 2A68     		ldr	r2, [r5]
 298 0054 FFF7FEFF 		bl	sprintf
 299              	.LVL35:
 222:Src/main.c    ****     sprintf(msg, "R: %lu", speed[1]);
 300              		.loc 1 222 0
 301 0058 01A8     		add	r0, sp, #4
 302 005a 2146     		mov	r1, r4
 303 005c FFF7FEFF 		bl	print
 304              	.LVL36:
 223:Src/main.c    ****     print(msg, 1);
 305              		.loc 1 223 0
 306 0060 01A8     		add	r0, sp, #4
 307 0062 0949     		ldr	r1, .L20+16
 308 0064 6A68     		ldr	r2, [r5, #4]
 309 0066 FFF7FEFF 		bl	sprintf
 310              	.LVL37:
 224:Src/main.c    **** }
 311              		.loc 1 224 0
 312 006a 01A8     		add	r0, sp, #4
 313 006c 0121     		movs	r1, #1
 314 006e FFF7FEFF 		bl	print
 315              	.LVL38:
 225:Src/main.c    **** 
 316              		.loc 1 225 0
 317 0072 07B0     		add	sp, sp, #28
 318              	.LCFI4:
 319              		.cfi_def_cfa_offset 12
 320              		@ sp needed
 321 0074 30BD     		pop	{r4, r5, pc}
 322              	.LVL39:
 323              	.L21:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 12


 324 0076 00BF     		.align	2
 325              	.L20:
 326 0078 00000000 		.word	htim1
 327 007c 00005940 		.word	1079574528
 328 0080 00408F40 		.word	1083129856
 329 0084 00000000 		.word	.LC0
 330 0088 08000000 		.word	.LC1
 331              		.cfi_endproc
 332              	.LFE125:
 334              		.section	.text._Error_Handler,"ax",%progbits
 335              		.align	2
 336              		.global	_Error_Handler
 337              		.thumb
 338              		.thumb_func
 340              	_Error_Handler:
 341              	.LFB128:
 297:Src/main.c    **** }
 298:Src/main.c    **** 
 299:Src/main.c    **** /* USER CODE END 4 */
 300:Src/main.c    **** 
 301:Src/main.c    **** /**
 302:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 303:Src/main.c    ****  * @param  file: The file name as string.
 304:Src/main.c    ****  * @param  line: The line in file as a number.
 305:Src/main.c    ****  * @retval None
 306:Src/main.c    ****  */
 307:Src/main.c    **** void _Error_Handler(char *file, int line)
 308:Src/main.c    **** {
 342              		.loc 1 308 0
 343              		.cfi_startproc
 344              		@ Volatile: function does not return.
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347              		@ link register save eliminated.
 348              	.LVL40:
 349              	.L23:
 309:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 310:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 311:Src/main.c    ****     while(1)
 312:Src/main.c    ****     {
 313:Src/main.c    ****     }
 350              		.loc 1 313 0 discriminator 1
 351 0000 FEE7     		b	.L23
 352              		.cfi_endproc
 353              	.LFE128:
 355 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 356              		.align	2
 357              		.global	SystemClock_Config
 358              		.thumb
 359              		.thumb_func
 361              	SystemClock_Config:
 362              	.LFB126:
 232:Src/main.c    **** 
 363              		.loc 1 232 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 80
 366              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 13


 367 0000 00B5     		push	{lr}
 368              	.LCFI5:
 369              		.cfi_def_cfa_offset 4
 370              		.cfi_offset 14, -4
 371 0002 95B0     		sub	sp, sp, #84
 372              	.LCFI6:
 373              		.cfi_def_cfa_offset 88
 374              	.LBB2:
 239:Src/main.c    **** 
 375              		.loc 1 239 0
 376 0004 0022     		movs	r2, #0
 377 0006 0192     		str	r2, [sp, #4]
 378 0008 2A4B     		ldr	r3, .L28
 379 000a 196C     		ldr	r1, [r3, #64]
 380 000c 41F08051 		orr	r1, r1, #268435456
 381 0010 1964     		str	r1, [r3, #64]
 382 0012 1B6C     		ldr	r3, [r3, #64]
 383 0014 03F08053 		and	r3, r3, #268435456
 384 0018 0193     		str	r3, [sp, #4]
 385 001a 019B     		ldr	r3, [sp, #4]
 386              	.LBE2:
 387              	.LBB3:
 241:Src/main.c    **** 
 388              		.loc 1 241 0
 389 001c 0292     		str	r2, [sp, #8]
 390 001e 2649     		ldr	r1, .L28+4
 391 0020 0B68     		ldr	r3, [r1]
 392 0022 23F44043 		bic	r3, r3, #49152
 393 0026 43F40043 		orr	r3, r3, #32768
 394 002a 0B60     		str	r3, [r1]
 395 002c 0B68     		ldr	r3, [r1]
 396 002e 03F44043 		and	r3, r3, #49152
 397 0032 0293     		str	r3, [sp, #8]
 398 0034 029B     		ldr	r3, [sp, #8]
 399              	.LBE3:
 245:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 400              		.loc 1 245 0
 401 0036 0223     		movs	r3, #2
 402 0038 0893     		str	r3, [sp, #32]
 246:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 403              		.loc 1 246 0
 404 003a 0121     		movs	r1, #1
 405 003c 0B91     		str	r1, [sp, #44]
 247:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 406              		.loc 1 247 0
 407 003e 1021     		movs	r1, #16
 408 0040 0C91     		str	r1, [sp, #48]
 248:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 409              		.loc 1 248 0
 410 0042 0E93     		str	r3, [sp, #56]
 249:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 411              		.loc 1 249 0
 412 0044 0F92     		str	r2, [sp, #60]
 250:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 413              		.loc 1 250 0
 414 0046 0822     		movs	r2, #8
 415 0048 1092     		str	r2, [sp, #64]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 14


 251:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 416              		.loc 1 251 0
 417 004a 4822     		movs	r2, #72
 418 004c 1192     		str	r2, [sp, #68]
 252:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 419              		.loc 1 252 0
 420 004e 1293     		str	r3, [sp, #72]
 253:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 421              		.loc 1 253 0
 422 0050 0423     		movs	r3, #4
 423 0052 1393     		str	r3, [sp, #76]
 254:Src/main.c    ****     {
 424              		.loc 1 254 0
 425 0054 08A8     		add	r0, sp, #32
 426 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 427              	.LVL41:
 428 005a 20B1     		cbz	r0, .L25
 256:Src/main.c    ****     }
 429              		.loc 1 256 0
 430 005c 1748     		ldr	r0, .L28+8
 431 005e 4FF48071 		mov	r1, #256
 432 0062 FFF7FEFF 		bl	_Error_Handler
 433              	.LVL42:
 434              	.L25:
 261:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 435              		.loc 1 261 0
 436 0066 0F23     		movs	r3, #15
 437 0068 0393     		str	r3, [sp, #12]
 263:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 438              		.loc 1 263 0
 439 006a 0221     		movs	r1, #2
 440 006c 0491     		str	r1, [sp, #16]
 264:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 441              		.loc 1 264 0
 442 006e 0023     		movs	r3, #0
 443 0070 0593     		str	r3, [sp, #20]
 265:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 444              		.loc 1 265 0
 445 0072 4FF48052 		mov	r2, #4096
 446 0076 0692     		str	r2, [sp, #24]
 266:Src/main.c    **** 
 447              		.loc 1 266 0
 448 0078 0793     		str	r3, [sp, #28]
 268:Src/main.c    ****     {
 449              		.loc 1 268 0
 450 007a 03A8     		add	r0, sp, #12
 451 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 452              	.LVL43:
 453 0080 20B1     		cbz	r0, .L26
 270:Src/main.c    ****     }
 454              		.loc 1 270 0
 455 0082 0E48     		ldr	r0, .L28+8
 456 0084 4FF48771 		mov	r1, #270
 457 0088 FFF7FEFF 		bl	_Error_Handler
 458              	.LVL44:
 459              	.L26:
 275:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 15


 460              		.loc 1 275 0
 461 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 462              	.LVL45:
 463 0090 0B4B     		ldr	r3, .L28+12
 464 0092 A3FB0030 		umull	r3, r0, r3, r0
 465 0096 8009     		lsrs	r0, r0, #6
 466 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 467              	.LVL46:
 279:Src/main.c    **** 
 468              		.loc 1 279 0
 469 009c 0420     		movs	r0, #4
 470 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 471              	.LVL47:
 282:Src/main.c    **** }
 472              		.loc 1 282 0
 473 00a2 4FF0FF30 		mov	r0, #-1
 474 00a6 0021     		movs	r1, #0
 475 00a8 0A46     		mov	r2, r1
 476 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 477              	.LVL48:
 283:Src/main.c    **** 
 478              		.loc 1 283 0
 479 00ae 15B0     		add	sp, sp, #84
 480              	.LCFI7:
 481              		.cfi_def_cfa_offset 4
 482              		@ sp needed
 483 00b0 5DF804FB 		ldr	pc, [sp], #4
 484              	.L29:
 485              		.align	2
 486              	.L28:
 487 00b4 00380240 		.word	1073887232
 488 00b8 00700040 		.word	1073770496
 489 00bc 10000000 		.word	.LC2
 490 00c0 D34D6210 		.word	274877907
 491              		.cfi_endproc
 492              	.LFE126:
 494              		.section	.text.main,"ax",%progbits
 495              		.align	2
 496              		.global	main
 497              		.thumb
 498              		.thumb_func
 500              	main:
 501              	.LFB123:
  88:Src/main.c    ****     /* USER CODE BEGIN 1 */
 502              		.loc 1 88 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 40
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506 0000 10B5     		push	{r4, lr}
 507              	.LCFI8:
 508              		.cfi_def_cfa_offset 8
 509              		.cfi_offset 4, -8
 510              		.cfi_offset 14, -4
 511 0002 8AB0     		sub	sp, sp, #40
 512              	.LCFI9:
 513              		.cfi_def_cfa_offset 48
  96:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 16


 514              		.loc 1 96 0
 515 0004 FFF7FEFF 		bl	HAL_Init
 516              	.LVL49:
 103:Src/main.c    **** 
 517              		.loc 1 103 0
 518 0008 FFF7FEFF 		bl	SystemClock_Config
 519              	.LVL50:
 110:Src/main.c    ****     MX_TIM3_Init();
 520              		.loc 1 110 0
 521 000c FFF7FEFF 		bl	MX_GPIO_Init
 522              	.LVL51:
 111:Src/main.c    ****     MX_TIM5_Init();
 523              		.loc 1 111 0
 524 0010 FFF7FEFF 		bl	MX_TIM3_Init
 525              	.LVL52:
 112:Src/main.c    ****     MX_TIM1_Init();
 526              		.loc 1 112 0
 527 0014 FFF7FEFF 		bl	MX_TIM5_Init
 528              	.LVL53:
 113:Src/main.c    ****     MX_TIM2_Init();
 529              		.loc 1 113 0
 530 0018 FFF7FEFF 		bl	MX_TIM1_Init
 531              	.LVL54:
 114:Src/main.c    ****     MX_USART6_UART_Init();
 532              		.loc 1 114 0
 533 001c FFF7FEFF 		bl	MX_TIM2_Init
 534              	.LVL55:
 115:Src/main.c    ****     MX_ADC1_Init();
 535              		.loc 1 115 0
 536 0020 FFF7FEFF 		bl	MX_USART6_UART_Init
 537              	.LVL56:
 116:Src/main.c    ****     MX_I2C1_Init();
 538              		.loc 1 116 0
 539 0024 FFF7FEFF 		bl	MX_ADC1_Init
 540              	.LVL57:
 117:Src/main.c    ****     MX_TIM4_Init();
 541              		.loc 1 117 0
 542 0028 FFF7FEFF 		bl	MX_I2C1_Init
 543              	.LVL58:
 118:Src/main.c    ****     MX_TIM9_Init();
 544              		.loc 1 118 0
 545 002c FFF7FEFF 		bl	MX_TIM4_Init
 546              	.LVL59:
 119:Src/main.c    ****     ssd1306_Init();
 547              		.loc 1 119 0
 548 0030 FFF7FEFF 		bl	MX_TIM9_Init
 549              	.LVL60:
 120:Src/main.c    ****     /* USER CODE BEGIN 2 */
 550              		.loc 1 120 0
 551 0034 FFF7FEFF 		bl	ssd1306_Init
 552              	.LVL61:
 124:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 553              		.loc 1 124 0
 554 0038 1E48     		ldr	r0, .L33
 555 003a 1821     		movs	r1, #24
 556 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 557              	.LVL62:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 17


 125:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 558              		.loc 1 125 0
 559 0040 1D48     		ldr	r0, .L33+4
 560 0042 1821     		movs	r1, #24
 561 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 562              	.LVL63:
 126:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 563              		.loc 1 126 0
 564 0048 1C4C     		ldr	r4, .L33+8
 565 004a 2046     		mov	r0, r4
 566 004c 0021     		movs	r1, #0
 567 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 568              	.LVL64:
 127:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 569              		.loc 1 127 0
 570 0052 2046     		mov	r0, r4
 571 0054 0821     		movs	r1, #8
 572 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 573              	.LVL65:
 128:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 574              		.loc 1 128 0
 575 005a 2046     		mov	r0, r4
 576 005c 0021     		movs	r1, #0
 577 005e FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 578              	.LVL66:
 129:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 579              		.loc 1 129 0
 580 0062 2046     		mov	r0, r4
 581 0064 0821     		movs	r1, #8
 582 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 583              	.LVL67:
 130:Src/main.c    **** 
 584              		.loc 1 130 0
 585 006a 1548     		ldr	r0, .L33+12
 586 006c FFF7FEFF 		bl	HAL_TIM_Base_Start
 587              	.LVL68:
 134:Src/main.c    **** 
 588              		.loc 1 134 0
 589 0070 06A8     		add	r0, sp, #24
 590 0072 FFF7FEFF 		bl	encoder_Init
 591              	.LVL69:
 141:Src/main.c    ****     /*char msg[20] = "";
 592              		.loc 1 141 0
 593 0076 1348     		ldr	r0, .L33+16
 594 0078 0021     		movs	r1, #0
 595 007a FFF7FEFF 		bl	print
 596              	.LVL70:
 170:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 597              		.loc 1 170 0
 598 007e 0023     		movs	r3, #0
 599 0080 0193     		str	r3, [sp, #4]
 600 0082 0293     		str	r3, [sp, #8]
 601 0084 0393     		str	r3, [sp, #12]
 602 0086 0493     		str	r3, [sp, #16]
 603 0088 0593     		str	r3, [sp, #20]
 604              	.L31:
 605              	.LBB4:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 18


 174:Src/main.c    ****                 sprintf(msg, "%d", (int)speed);
 606              		.loc 1 174 0 discriminator 1
 607 008a 06A8     		add	r0, sp, #24
 608 008c FFF7FEFF 		bl	update_encoder
 609              	.LVL71:
 175:Src/main.c    ****                 print(msg, 0);
 610              		.loc 1 175 0 discriminator 1
 611 0090 51EC100B 		fmrrd	r0, r1, d0
 612 0094 FFF7FEFF 		bl	__aeabi_d2iz
 613              	.LVL72:
 614 0098 0246     		mov	r2, r0
 615 009a 01A8     		add	r0, sp, #4
 616 009c 0A49     		ldr	r1, .L33+20
 617 009e FFF7FEFF 		bl	sprintf
 618              	.LVL73:
 176:Src/main.c    ****                 HAL_Delay(1);
 619              		.loc 1 176 0 discriminator 1
 620 00a2 01A8     		add	r0, sp, #4
 621 00a4 0021     		movs	r1, #0
 622 00a6 FFF7FEFF 		bl	print
 623              	.LVL74:
 177:Src/main.c    ****         //do_pid(&pid_s);
 624              		.loc 1 177 0 discriminator 1
 625 00aa 0120     		movs	r0, #1
 626 00ac FFF7FEFF 		bl	HAL_Delay
 627              	.LVL75:
 628              	.LBE4:
 184:Src/main.c    ****     /* USER CODE END 3 */
 629              		.loc 1 184 0 discriminator 1
 630 00b0 EBE7     		b	.L31
 631              	.L34:
 632 00b2 00BF     		.align	2
 633              	.L33:
 634 00b4 00000000 		.word	htim4
 635 00b8 00000000 		.word	htim5
 636 00bc 00000000 		.word	htim1
 637 00c0 00000000 		.word	htim9
 638 00c4 1C000000 		.word	.LC3
 639 00c8 28000000 		.word	.LC4
 640              		.cfi_endproc
 641              	.LFE123:
 643              		.global	PUSH_BUTTON_STATE
 644              		.comm	last_time,4,4
 645              		.section	.rodata.str1.4,"aMS",%progbits,1
 646              		.align	2
 647              	.LC0:
 648 0000 4C3A2025 		.ascii	"L: %lu\000"
 648      6C7500
 649 0007 00       		.space	1
 650              	.LC1:
 651 0008 523A2025 		.ascii	"R: %lu\000"
 651      6C7500
 652 000f 00       		.space	1
 653              	.LC2:
 654 0010 5372632F 		.ascii	"Src/main.c\000"
 654      6D61696E 
 654      2E6300
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 19


 655 001b 00       		.space	1
 656              	.LC3:
 657 001c 53746172 		.ascii	"Starting\000"
 657      74696E67 
 657      00
 658 0025 000000   		.space	3
 659              	.LC4:
 660 0028 256400   		.ascii	"%d\000"
 661              		.section	.bss.PUSH_BUTTON_STATE,"aw",%nobits
 664              	PUSH_BUTTON_STATE:
 665 0000 00       		.space	1
 666              		.text
 667              	.Letext0:
 668              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 669              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 670              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 671              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 672              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 673              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 674              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 675              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 676              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 677              		.file 11 "Inc/fonts.h"
 678              		.file 12 "Inc/ssd1306.h"
 679              		.file 13 "Inc/pid.h"
 680              		.file 14 "Inc/encoder.h"
 681              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 682              		.file 16 "Inc/tim.h"
 683              		.file 17 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 684              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 685              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 686              		.file 20 "Inc/gpio.h"
 687              		.file 21 "Inc/usart.h"
 688              		.file 22 "Inc/adc.h"
 689              		.file 23 "Inc/i2c.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:22     .text.do_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:27     .text.do_pid:0000000000000000 do_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:164    .text.do_pid:00000000000000a4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:171    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:176    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:223    .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:232    .text.update_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:237    .text.update_motor_speed:0000000000000000 update_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:326    .text.update_motor_speed:0000000000000078 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:335    .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:340    .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:356    .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:361    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:487    .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:495    .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:500    .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:634    .text.main:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:664    .bss.PUSH_BUTTON_STATE:0000000000000000 PUSH_BUTTON_STATE
                            *COM*:0000000000000004 last_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:646    .rodata.str1.4:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s:665    .bss.PUSH_BUTTON_STATE:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_d2iz
HAL_GPIO_ReadPin
pid_GetGain
htim9
htim1
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
sprintf
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_TIM3_Init
MX_TIM5_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccLo3ac8.s 			page 21


MX_TIM9_Init
ssd1306_Init
HAL_TIM_Encoder_Start
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
HAL_TIM_Base_Start
encoder_Init
update_encoder
HAL_Delay
htim4
htim5
