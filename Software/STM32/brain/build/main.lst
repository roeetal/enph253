ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.encoder_pid,"ax",%progbits
  21              		.align	2
  22              		.global	encoder_pid
  23              		.thumb
  24              		.thumb_func
  26              	encoder_pid:
  27              	.LFB136:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  ** This notice applies to any and all portions of this file
   8:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****  * inserted by the user or by software development tools
  11:Src/main.c    ****  * are owned by their respective copyright owners.
  12:Src/main.c    ****  *
  13:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****  *
  15:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****  * are permitted provided that the following conditions are met:
  17:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****  *      and/or other materials provided with the distribution.
  22:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****  *      without specific prior written permission.
  25:Src/main.c    ****  *
  26:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 2


  31:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****  *
  37:Src/main.c    ****  ******************************************************************************
  38:Src/main.c    ****  */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** // uint16_t LEFT_SPEED = BASE_SPEED+SPEED_DIFF;
  66:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED;
  67:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  68:Src/main.c    **** uint32_t dma_buffer[2048];
  69:Src/main.c    **** uint32_t adc_values[2048];
  70:Src/main.c    **** int ewok_cnt = 0;
  71:Src/main.c    **** int searches = 0;
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END PV */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void SystemClock_Config(void);
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE BEGIN PFP */
  79:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  80:Src/main.c    **** void print(char msg[], int row);
  81:Src/main.c    **** PID_t menu();
  82:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  83:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  84:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  85:Src/main.c    **** void turn();
  86:Src/main.c    **** void turn_deg(int16_t);
  87:Src/main.c    **** void alarm_detect();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 3


  88:Src/main.c    **** void drive_straight(PID_t *enc_pid);
  89:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis);
  90:Src/main.c    **** void square_edge(PID_t *enc_pid);
  91:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid);
  92:Src/main.c    **** void test_All();
  93:Src/main.c    **** void test_PWM_htim1();
  94:Src/main.c    **** void test_PWM_htim3();
  95:Src/main.c    **** 
  96:Src/main.c    **** /* USER CODE END PFP */
  97:Src/main.c    **** 
  98:Src/main.c    **** /* USER CODE BEGIN 0 */
  99:Src/main.c    **** /**
 100:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
 101:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
 102:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
 103:Src/main.c    ****  */
 104:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 105:Src/main.c    **** {
 106:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
 107:Src/main.c    **** }
 108:Src/main.c    **** /* USER CODE END 0 */
 109:Src/main.c    **** 
 110:Src/main.c    **** /**
 111:Src/main.c    ****  * @brief  The application entry point.
 112:Src/main.c    ****  *
 113:Src/main.c    ****  * @retval None
 114:Src/main.c    ****  */
 115:Src/main.c    **** int main(void)
 116:Src/main.c    **** {
 117:Src/main.c    ****     /* USER CODE BEGIN 1 */
 118:Src/main.c    **** 
 119:Src/main.c    ****     /* USER CODE END 1 */
 120:Src/main.c    **** 
 121:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 122:Src/main.c    **** 
 123:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 124:Src/main.c    ****     HAL_Init();
 125:Src/main.c    **** 
 126:Src/main.c    ****     /* USER CODE BEGIN Init */
 127:Src/main.c    **** 
 128:Src/main.c    ****     /* USER CODE END Init */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* Configure the system clock */
 131:Src/main.c    ****     SystemClock_Config();
 132:Src/main.c    **** 
 133:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 134:Src/main.c    **** 
 135:Src/main.c    ****     /* USER CODE END SysInit */
 136:Src/main.c    **** 
 137:Src/main.c    ****     /* Initialize all configured peripherals */
 138:Src/main.c    ****     MX_GPIO_Init();
 139:Src/main.c    ****     MX_DMA_Init();
 140:Src/main.c    ****     MX_TIM3_Init();
 141:Src/main.c    ****     MX_TIM1_Init();
 142:Src/main.c    ****     MX_TIM2_Init();
 143:Src/main.c    ****     MX_ADC1_Init();
 144:Src/main.c    ****     MX_TIM4_Init();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 4


 145:Src/main.c    ****     MX_TIM9_Init();
 146:Src/main.c    ****     MX_TIM5_Init();
 147:Src/main.c    ****     MX_I2C1_Init();
 148:Src/main.c    ****     MX_USART6_UART_Init();
 149:Src/main.c    ****     /* USER CODE BEGIN 2 */
 150:Src/main.c    **** 
 151:Src/main.c    ****     /* Initialize peripherals */
 152:Src/main.c    ****     /* 
 153:Src/main.c    ****      * Claw jaw: TIM3 CH1
 154:Src/main.c    ****      * Claw arm: TIM3 CH2
 155:Src/main.c    ****      * Basket: TIM3 CH3
 156:Src/main.c    ****      * left forward: TIM1 CH1
 157:Src/main.c    ****      * left backward: TIM1 CH2
 158:Src/main.c    ****      * right forward: TIM1 CH3
 159:Src/main.c    ****      * right backward: TIM1 CH4
 160:Src/main.c    ****      * left encoder: TIM4
 161:Src/main.c    ****      * right encoderL TIM5
 162:Src/main.c    ****      * spare clocks: TIM2, TIM9
 163:Src/main.c    ****      */
 164:Src/main.c    **** 
 165:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 166:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 172:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 173:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 174:Src/main.c    **** 
 175:Src/main.c    ****     /* Initialize other stuffs */
 176:Src/main.c    ****     ssd1306_Init();
 177:Src/main.c    ****     print("Starting\n", 0);
 178:Src/main.c    ****     claw_init(&htim3);
 179:Src/main.c    ****     // basket_init(&htim3);
 180:Src/main.c    **** 
 181:Src/main.c    ****     PID_t enc_pid = pid_Init(2, 0, 0, 2, 1);
 182:Src/main.c    **** 
 183:Src/main.c    ****     EDGE_LEFT_STATE = NOT_FLAGGED;
 184:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 185:Src/main.c    **** 
 186:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED+80, RIGHT_SPEED, 2000);
 187:Src/main.c    **** 
 188:Src/main.c    ****     /* Initially disabled interrupts and ADC */
 189:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 190:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 191:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 192:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 193:Src/main.c    **** 
 194:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED+10, 5000);
 195:Src/main.c    ****     print("ewok\n", 0);
 196:Src/main.c    **** 
 197:Src/main.c    ****     /* USER CODE END 2 */
 198:Src/main.c    **** 
 199:Src/main.c    ****     /* Infinite loop */
 200:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 201:Src/main.c    ****     while (1)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 5


 202:Src/main.c    ****     {
 203:Src/main.c    ****         // /*
 204:Src/main.c    ****         //  * Pi Turning
 205:Src/main.c    ****         //  */
 206:Src/main.c    **** 
 207:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 208:Src/main.c    ****         {
 209:Src/main.c    ****             // Stop Requesting Images
 210:Src/main.c    ****             print("Pi interrupt\n", 0);
 211:Src/main.c    ****             // Turn to ewok
 212:Src/main.c    ****             turn();
 213:Src/main.c    **** 
 214:Src/main.c    ****             // Drive forward w/ PID for 2.5 s, enable claw interrupt
 215:Src/main.c    ****             //    uint32_t start = HAL_GetTick();
 216:Src/main.c    ****             uint32_t time = HAL_GetTick();
 217:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 218:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 219:Src/main.c    ****             while(HAL_GetTick()-time<2800){
 220:Src/main.c    ****                 drive_straight(&enc_pid);
 221:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 222:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 223:Src/main.c    ****                 {
 224:Src/main.c    ****                     print("Claw interrupt\n", 0);
 225:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 226:Src/main.c    ****                     break;
 227:Src/main.c    ****                 }
 228:Src/main.c    ****             }
 229:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 230:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 231:Src/main.c    ****             print("ewok\n", 0);
 232:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 233:Src/main.c    **** 
 234:Src/main.c    ****         }else{
 235:Src/main.c    **** 
 236:Src/main.c    ****             ++searches;
 237:Src/main.c    ****             if(searches == 4 && ewok_cnt == 0){
 238:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 239:Src/main.c    ****             }
 240:Src/main.c    ****             else if(searches == 3 && ewok_cnt == 1){
 241:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 242:Src/main.c    ****             }
 243:Src/main.c    ****             else if(searches == 8 && ewok_cnt == 2){
 244:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 245:Src/main.c    ****             }else{
 246:Src/main.c    ****             uint32_t time = HAL_GetTick();
 247:Src/main.c    ****             while(HAL_GetTick()-time<2800 && PI_INT_STATE == NOT_FLAGGED);
 248:Src/main.c    ****             int thresh = ewok_cnt==1? 500:750;
 249:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 250:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 251:Src/main.c    ****             time = HAL_GetTick();
 252:Src/main.c    ****             while(HAL_GetTick()-time<thresh){
 253:Src/main.c    ****                 drive_straight(&enc_pid);
 254:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 255:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 256:Src/main.c    ****                 {
 257:Src/main.c    ****                     print("Claw interrupt\n", 0);
 258:Src/main.c    ****                     debounce_and_grab(&enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 6


 259:Src/main.c    ****                     break;
 260:Src/main.c    ****                 }
 261:Src/main.c    ****             }
 262:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 263:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 264:Src/main.c    ****             print("ewok\n", 0);
 265:Src/main.c    ****             }
 266:Src/main.c    ****         }
 267:Src/main.c    ****         /* 
 268:Src/main.c    ****         // Reset Claw Interrupt before driving forward
 269:Src/main.c    ****         print("MAIN | CLAW_INT UNFLAGGED\n", 0);
 270:Src/main.c    ****         while (HAL_GetTick()-start<3000)
 271:Src/main.c    ****         {
 272:Src/main.c    ****         drive_straight(&enc_pid);
 273:Src/main.c    ****         // If we trip claw interrupt, debounce and grab it
 274:Src/main.c    ****         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 275:Src/main.c    ****         {
 276:Src/main.c    ****         print("Claw interrupt\n", 0);
 277:Src/main.c    ****         if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 278:Src/main.c    ****         }
 279:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 280:Src/main.c    ****         {
 281:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 282:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 283:Src/main.c    ****         print("Edge left triggered", 0);
 284:Src/main.c    ****         turn_deg(30);
 285:Src/main.c    ****         }
 286:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 287:Src/main.c    ****         print("Edge right triggered", 0);
 288:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 289:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 290:Src/main.c    ****         turn_deg(-30);
 291:Src/main.c    ****         }
 292:Src/main.c    ****         }
 293:Src/main.c    **** 
 294:Src/main.c    ****         }
 295:Src/main.c    ****         else
 296:Src/main.c    ****         {
 297:Src/main.c    **** 
 298:Src/main.c    **** */
 299:Src/main.c    ****         /*
 300:Src/main.c    ****          * Look for Ewok
 301:Src/main.c    ****          */
 302:Src/main.c    ****         // CLAW_INT_STATE = NOT_FLAGGED;
 303:Src/main.c    **** 
 304:Src/main.c    ****         // if (ewok_cnt == 4 || ewok_cnt == 5)
 305:Src/main.c    ****         // {
 306:Src/main.c    ****         //     if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 307:Src/main.c    ****         //     {
 308:Src/main.c    ****         //         drive_straight_time(&enc_pid, 0, RIGHT_SPEED - 100, 400);
 309:Src/main.c    ****         //         uint32_t temp_time = HAL_GetTick();
 310:Src/main.c    ****         //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 311:Src/main.c    ****         //     }
 312:Src/main.c    ****         //     else if (EDGE_LEFT_STATE == NOT_FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 313:Src/main.c    ****         //     {
 314:Src/main.c    ****         //         drive_straight_time(&enc_pid, LEFT_SPEED - 100, 0, 400);
 315:Src/main.c    ****         //         uint32_t temp_time = HAL_GetTick();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 7


 316:Src/main.c    ****         //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 317:Src/main.c    ****         //     }
 318:Src/main.c    ****         // }
 319:Src/main.c    ****         /*
 320:Src/main.c    **** 
 321:Src/main.c    ****            drive_straight_time(&enc_pid, LEFT_SPEED - 100, RIGHT_SPEED - 100, 500);
 322:Src/main.c    ****            print("ewok\n", 0);
 323:Src/main.c    ****            if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 324:Src/main.c    ****            {
 325:Src/main.c    ****            print("Claw interrupt\n", 0);
 326:Src/main.c    ****            if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 327:Src/main.c    ****            }
 328:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 329:Src/main.c    ****            {
 330:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 331:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 332:Src/main.c    ****            print("Edge left triggered", 0);
 333:Src/main.c    ****            turn_deg(30);
 334:Src/main.c    ****            }
 335:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 336:Src/main.c    ****            print("Edge right triggered", 0);
 337:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 338:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 339:Src/main.c    ****            turn_deg(-30);
 340:Src/main.c    ****            }
 341:Src/main.c    ****            uint32_t temp_time = HAL_GetTick();
 342:Src/main.c    ****            */
 343:Src/main.c    ****         /*
 344:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 345:Src/main.c    ****            {
 346:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 347:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 348:Src/main.c    ****            print("Edge left triggered", 0);
 349:Src/main.c    ****            turn_deg(30);
 350:Src/main.c    ****            }
 351:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 352:Src/main.c    ****            print("Edge right triggered", 0);
 353:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 354:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 355:Src/main.c    ****            turn_deg(-30);
 356:Src/main.c    ****            }
 357:Src/main.c    ****            */
 358:Src/main.c    **** 
 359:Src/main.c    ****         /* USER CODE END WHILE */
 360:Src/main.c    **** 
 361:Src/main.c    ****         /* USER CODE BEGIN 3 */
 362:Src/main.c    ****     }
 363:Src/main.c    ****     /* USER CODE END 3 */
 364:Src/main.c    **** 
 365:Src/main.c    **** }
 366:Src/main.c    **** 
 367:Src/main.c    **** /**
 368:Src/main.c    ****  * @brief System Clock Configuration
 369:Src/main.c    ****  * @retval None
 370:Src/main.c    ****  */
 371:Src/main.c    **** void SystemClock_Config(void)
 372:Src/main.c    **** {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 8


 373:Src/main.c    **** 
 374:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 375:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 376:Src/main.c    **** 
 377:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 378:Src/main.c    ****     */
 379:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 380:Src/main.c    **** 
 381:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 382:Src/main.c    **** 
 383:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 384:Src/main.c    ****     */
 385:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 386:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 387:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 388:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 389:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 390:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 391:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 392:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 393:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 394:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 395:Src/main.c    ****     {
 396:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 397:Src/main.c    ****     }
 398:Src/main.c    **** 
 399:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 400:Src/main.c    ****     */
 401:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 402:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 403:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 404:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 405:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 406:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 407:Src/main.c    **** 
 408:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 409:Src/main.c    ****     {
 410:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 411:Src/main.c    ****     }
 412:Src/main.c    **** 
 413:Src/main.c    ****     /**Configure the Systick interrupt time 
 414:Src/main.c    ****     */
 415:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 416:Src/main.c    **** 
 417:Src/main.c    ****     /**Configure the Systick 
 418:Src/main.c    ****     */
 419:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 420:Src/main.c    **** 
 421:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 422:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 423:Src/main.c    **** }
 424:Src/main.c    **** 
 425:Src/main.c    **** /* USER CODE BEGIN 4 */
 426:Src/main.c    **** 
 427:Src/main.c    **** void square_edge(PID_t *enc_pid)
 428:Src/main.c    **** {
 429:Src/main.c    ****     while (1)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 9


 430:Src/main.c    ****     {
 431:Src/main.c    ****         drive_straight(enc_pid);
 432:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_Read
 433:Src/main.c    ****         {
 434:Src/main.c    ****             break;
 435:Src/main.c    ****         }
 436:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET || HAL_GPIO
 437:Src/main.c    ****         {
 438:Src/main.c    **** 
 439:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 440:Src/main.c    ****             {
 441:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 442:Src/main.c    ****             }
 443:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET)
 444:Src/main.c    ****             {
 445:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 446:Src/main.c    ****             }
 447:Src/main.c    ****         }
 448:Src/main.c    ****     }
 449:Src/main.c    **** }
 450:Src/main.c    **** 
 451:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis)
 452:Src/main.c    **** {
 453:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 454:Src/main.c    ****     char msg[50] = "";
 455:Src/main.c    ****     uint8_t count = 0; // FIXME: Remove to speed up
 456:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 457:Src/main.c    ****     {
 458:Src/main.c    ****         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 459:Src/main.c    ****         {
 460:Src/main.c    ****             print("Claw interrupt\n", 0);
 461:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 462:Src/main.c    ****         }
 463:Src/main.c    ****         /*
 464:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 465:Src/main.c    ****            {
 466:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 467:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 468:Src/main.c    ****            print("Edge left triggered", 0);
 469:Src/main.c    ****            turn_deg(30);
 470:Src/main.c    ****            }
 471:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 472:Src/main.c    ****            print("Edge right triggered", 0);
 473:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 474:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 475:Src/main.c    ****            turn_deg(-30);
 476:Src/main.c    ****            }
 477:Src/main.c    ****            */
 478:Src/main.c    ****         else 
 479:Src/main.c    ****         {
 480:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, lspeed);
 481:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 482:Src/main.c    ****             drive_straight(enc_pid);
 483:Src/main.c    **** 
 484:Src/main.c    ****         }
 485:Src/main.c    ****     }
 486:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 10


 487:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 488:Src/main.c    **** }
 489:Src/main.c    **** 
 490:Src/main.c    **** void drive_straight(PID_t *enc_pid)
 491:Src/main.c    **** {
 492:Src/main.c    ****     encoder_pid(enc_pid);
 493:Src/main.c    ****     HAL_Delay(10);
 494:Src/main.c    **** 
 495:Src/main.c    **** }
 496:Src/main.c    **** 
 497:Src/main.c    **** /*
 498:Src/main.c    ****  * Assume motors are not on.
 499:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 500:Src/main.c    ****  */
 501:Src/main.c    **** void turn()
 502:Src/main.c    **** {
 503:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 504:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 505:Src/main.c    ****     HAL_Delay(100);
 506:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 507:Src/main.c    ****     //double r = atan(1.57*tan()/())
 508:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 509:Src/main.c    ****     TIM4->CNT = 0;
 510:Src/main.c    ****     TIM5->CNT = 0;
 511:Src/main.c    **** 
 512:Src/main.c    ****     char msg[18] = "";
 513:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", counts);
 514:Src/main.c    ****     print(msg, 0);
 515:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 516:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 517:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 518:Src/main.c    ****     print(msg, 2);
 519:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %d\n", 2 * adc_values[5]);
 520:Src/main.c    ****     print(msg, 0);
 521:Src/main.c    **** 
 522:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
 523:Src/main.c    ****     {
 524:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 525:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 526:Src/main.c    ****         while (TIM5->CNT < counts)
 527:Src/main.c    ****         {
 528:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 529:Src/main.c    ****             // print(msg, 4);
 530:Src/main.c    ****         }
 531:Src/main.c    ****         sprintf(msg, "TURN | TIM5->CNT: %lu\n", TIM5->CNT);
 532:Src/main.c    ****         print(msg, 4);
 533:Src/main.c    ****         TIM5->CNT = 0;
 534:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 535:Src/main.c    ****     }
 536:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 537:Src/main.c    ****     {
 538:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 539:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 540:Src/main.c    ****         while (TIM4->CNT < counts)
 541:Src/main.c    ****         {
 542:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 543:Src/main.c    ****             // print(msg, 4);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 11


 544:Src/main.c    ****         }
 545:Src/main.c    ****         sprintf(msg, "TURN | TIM4->CNT: %lu\n", TIM4->CNT);
 546:Src/main.c    ****         print(msg, 4);
 547:Src/main.c    ****         TIM4->CNT = 0;
 548:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 549:Src/main.c    ****     }
 550:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 551:Src/main.c    **** }
 552:Src/main.c    **** 
 553:Src/main.c    **** /*
 554:Src/main.c    ****  * Assume motors are not on.
 555:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 556:Src/main.c    ****  */
 557:Src/main.c    **** void turn_deg(int16_t deg)
 558:Src/main.c    **** {
 559:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 560:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 561:Src/main.c    ****     if (counts < 0) counts = -counts;
 562:Src/main.c    ****     TIM4->CNT = 0;
 563:Src/main.c    ****     TIM5->CNT = 0;
 564:Src/main.c    **** 
 565:Src/main.c    ****     char msg[50] = "";
 566:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 567:Src/main.c    ****     print(msg, 0);
 568:Src/main.c    **** 
 569:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 570:Src/main.c    ****     {
 571:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 572:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 573:Src/main.c    ****         while (TIM4->CNT < counts)
 574:Src/main.c    ****         {
 575:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 576:Src/main.c    ****             // print(msg, 4);
 577:Src/main.c    ****         }
 578:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM5->CNT: %lu\n", TIM5->CNT);
 579:Src/main.c    ****         print(msg, 4);
 580:Src/main.c    ****         TIM5->CNT = 0;
 581:Src/main.c    ****     }
 582:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 583:Src/main.c    ****     {
 584:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 585:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 586:Src/main.c    ****         while (TIM5->CNT < counts)
 587:Src/main.c    ****         {
 588:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 589:Src/main.c    ****             // print(msg, 4);
 590:Src/main.c    ****         }
 591:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM4->CNT: %lu\n", TIM4->CNT);
 592:Src/main.c    ****         print(msg, 4);
 593:Src/main.c    ****         TIM4->CNT = 0;
 594:Src/main.c    ****     }
 595:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 596:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 597:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 598:Src/main.c    **** }
 599:Src/main.c    **** 
 600:Src/main.c    **** /**
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 12


 601:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 602:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 603:Src/main.c    ****  *
 604:Src/main.c    ****  * @param adc_val, value read from ADC.
 605:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 606:Src/main.c    ****  **/
 607:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 608:Src/main.c    **** {
 609:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
 610:Src/main.c    **** }
 611:Src/main.c    **** 
 612:Src/main.c    **** // Sampling frequency: 72e6/2/(495*2)
 613:Src/main.c    **** void alarm_detect() {
 614:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 615:Src/main.c    ****     HAL_Delay(500);
 616:Src/main.c    ****     char msg[20]="";
 617:Src/main.c    ****     int count = 0;
 618:Src/main.c    ****     while(1){
 619:Src/main.c    ****         if(count%50==0){
 620:Src/main.c    ****         sprintf(msg, "A %d\n", (int) goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(
 621:Src/main.c    ****         print(msg, 0);
 622:Src/main.c    ****         }
 623:Src/main.c    ****         ++count;
 624:Src/main.c    ****     }
 625:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 50){
 626:Src/main.c    ****         if(count%50==0){
 627:Src/main.c    ****         sprintf(msg, "A %d\n", (int) goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(
 628:Src/main.c    ****         print(msg, 0);
 629:Src/main.c    ****         }
 630:Src/main.c    ****         ++count;
 631:Src/main.c    ****     }
 632:Src/main.c    ****     HAL_Delay(100);
 633:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 50){
 634:Src/main.c    ****         if(count%100==0){
 635:Src/main.c    ****         sprintf(msg, "B %d\n", (int) goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(
 636:Src/main.c    ****         print(msg, 0);
 637:Src/main.c    ****         }
 638:Src/main.c    ****         ++count;
 639:Src/main.c    ****     }
 640:Src/main.c    ****     HAL_Delay(100);
 641:Src/main.c    ****     print("worcs", 0);
 642:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 643:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 644:Src/main.c    **** }
 645:Src/main.c    **** 
 646:Src/main.c    **** /**
 647:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 648:Src/main.c    ****  * @param msg, string to print
 649:Src/main.c    ****  * @param row, row to print msg to
 650:Src/main.c    ****  */
 651:Src/main.c    **** void print(char *msg, int row)
 652:Src/main.c    **** {
 653:Src/main.c    ****     // if (row == 0)
 654:Src/main.c    ****     // {
 655:Src/main.c    ****     //     ssd1306_Fill(Black);
 656:Src/main.c    ****     // }
 657:Src/main.c    ****     // ssd1306_SetCursor(0, row * 10);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 13


 658:Src/main.c    ****     // ssd1306_WriteString(msg, Font_7x10, White);
 659:Src/main.c    ****     // ssd1306_UpdateScreen();
 660:Src/main.c    ****     HAL_UART_Transmit(&huart6, (uint8_t *) msg, strlen(msg), 100);
 661:Src/main.c    **** }
 662:Src/main.c    **** 
 663:Src/main.c    **** PID_t menu()
 664:Src/main.c    **** {
 665:Src/main.c    ****     print("Starting\n", 0);
 666:Src/main.c    ****     char msg[20] = "";
 667:Src/main.c    ****     int pid_select = 0;
 668:Src/main.c    ****     uint32_t values[2] = {0, 0};
 669:Src/main.c    ****     while (1)
 670:Src/main.c    ****     {
 671:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 672:Src/main.c    ****         {
 673:Src/main.c    ****             sprintf(msg, "%lu\n", values[pid_select]);
 674:Src/main.c    ****             print(msg, 0);
 675:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 676:Src/main.c    ****             {
 677:Src/main.c    ****                 values[pid_select]++;
 678:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
 679:Src/main.c    ****                 print(msg, 0);
 680:Src/main.c    ****                 HAL_Delay(500);
 681:Src/main.c    ****             }
 682:Src/main.c    ****             ++pid_select;
 683:Src/main.c    ****         }
 684:Src/main.c    ****         if (pid_select == 2)
 685:Src/main.c    ****             break;
 686:Src/main.c    ****     }
 687:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 688:Src/main.c    **** }
 689:Src/main.c    **** 
 690:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 691:Src/main.c    **** {
 692:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 693:Src/main.c    ****     {
 694:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 695:Src/main.c    ****     }
 696:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 697:Src/main.c    ****     {
 698:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 699:Src/main.c    ****     }
 700:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 701:Src/main.c    ****     {
 702:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 703:Src/main.c    ****     }
 704:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 705:Src/main.c    ****     {
 706:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 707:Src/main.c    ****     }
 708:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed > 1000 ? 1000 : speed);
 709:Src/main.c    **** }
 710:Src/main.c    **** 
 711:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 712:Src/main.c    **** {
  29              		.loc 1 712 0
  30              		.cfi_startproc
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 14


  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 38B5     		push	{r3, r4, r5, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 3, -16
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 14, -4
 713:Src/main.c    ****     /* Get error */
 714:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
  41              		.loc 1 714 0
  42 0002 0E4B     		ldr	r3, .L5
  43 0004 5C6A     		ldr	r4, [r3, #36]
  44              	.LVL1:
 715:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
  45              		.loc 1 715 0
  46 0006 03F58063 		add	r3, r3, #1024
  47 000a 5D6A     		ldr	r5, [r3, #36]
  48              	.LVL2:
 716:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
  49              		.loc 1 716 0
  50 000c 631B     		subs	r3, r4, r5
  51 000e 0361     		str	r3, [r0, #16]
 717:Src/main.c    **** 
 718:Src/main.c    ****     /* Get gain */
 719:Src/main.c    ****     // Gain <0 for ride side faster
 720:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
  52              		.loc 1 720 0
  53 0010 FFF7FEFF 		bl	pid_GetGain
  54              	.LVL3:
 721:Src/main.c    **** 
 722:Src/main.c    ****     /* Set Motor Speeds*/
 723:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 724:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 725:Src/main.c    ****     if (gain < 0)
 726:Src/main.c    ****     {
 727:Src/main.c    ****         lspeed -= gain;
 728:Src/main.c    ****     }
 729:Src/main.c    ****     else if (gain > 0)
 730:Src/main.c    ****     {
 731:Src/main.c    ****         rspeed += gain;
 732:Src/main.c    ****     }
 733:Src/main.c    **** 
 734:Src/main.c    ****     // char msg[18] = "";
 735:Src/main.c    ****     // sprintf(msg, "LS: %lu", lspeed);
 736:Src/main.c    ****     // print(msg, 0);
 737:Src/main.c    ****     // sprintf(msg, "RS: %lu", rspeed);
 738:Src/main.c    ****     // print(msg, 1);
 739:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, lspeed);
 740:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, rspeed);
 741:Src/main.c    **** 
 742:Src/main.c    ****     /* Prevent weird overflow shit */
 743:Src/main.c    ****     if (lcnt > 60000 || rcnt > 60000)
  55              		.loc 1 743 0
  56 0014 4EF66023 		movw	r3, #60000
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 15


  57 0018 9C42     		cmp	r4, r3
  58 001a 01D8     		bhi	.L2
  59              		.loc 1 743 0 is_stmt 0 discriminator 1
  60 001c 9D42     		cmp	r5, r3
  61 001e 0CD9     		bls	.L1
  62              	.L2:
 744:Src/main.c    ****     {
 745:Src/main.c    ****         TIM4->CNT -= 50000;
  63              		.loc 1 745 0 is_stmt 1
  64 0020 064A     		ldr	r2, .L5
  65 0022 536A     		ldr	r3, [r2, #36]
  66 0024 A3F54343 		sub	r3, r3, #49920
  67 0028 503B     		subs	r3, r3, #80
  68 002a 5362     		str	r3, [r2, #36]
  69              	.LVL4:
 746:Src/main.c    ****         TIM5->CNT -= 50000;
  70              		.loc 1 746 0
  71 002c 02F58062 		add	r2, r2, #1024
  72 0030 536A     		ldr	r3, [r2, #36]
  73 0032 A3F54343 		sub	r3, r3, #49920
  74 0036 503B     		subs	r3, r3, #80
  75 0038 5362     		str	r3, [r2, #36]
  76              	.L1:
  77 003a 38BD     		pop	{r3, r4, r5, pc}
  78              	.LVL5:
  79              	.L6:
  80              		.align	2
  81              	.L5:
  82 003c 00080040 		.word	1073743872
  83              		.cfi_endproc
  84              	.LFE136:
  86              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  87              		.align	2
  88              		.global	HAL_ADC_ConvCpltCallback
  89              		.thumb
  90              		.thumb_func
  92              	HAL_ADC_ConvCpltCallback:
  93              	.LFB123:
 105:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  94              		.loc 1 105 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL6:
  99 0000 08B5     		push	{r3, lr}
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 3, -8
 103              		.cfi_offset 14, -4
 106:Src/main.c    **** }
 104              		.loc 1 106 0
 105 0002 0348     		ldr	r0, .L9
 106              	.LVL7:
 107 0004 0349     		ldr	r1, .L9+4
 108 0006 4FF40052 		mov	r2, #8192
 109 000a FFF7FEFF 		bl	memcpy
 110              	.LVL8:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 16


 111 000e 08BD     		pop	{r3, pc}
 112              	.L10:
 113              		.align	2
 114              	.L9:
 115 0010 00000000 		.word	adc_values
 116 0014 00000000 		.word	dma_buffer
 117              		.cfi_endproc
 118              	.LFE123:
 120              		.section	.text.drive_straight,"ax",%progbits
 121              		.align	2
 122              		.global	drive_straight
 123              		.thumb
 124              		.thumb_func
 126              	drive_straight:
 127              	.LFB128:
 491:Src/main.c    ****     encoder_pid(enc_pid);
 128              		.loc 1 491 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              	.LVL9:
 133 0000 08B5     		push	{r3, lr}
 134              	.LCFI2:
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 3, -8
 137              		.cfi_offset 14, -4
 492:Src/main.c    ****     HAL_Delay(10);
 138              		.loc 1 492 0
 139 0002 FFF7FEFF 		bl	encoder_pid
 140              	.LVL10:
 493:Src/main.c    **** 
 141              		.loc 1 493 0
 142 0006 0A20     		movs	r0, #10
 143 0008 FFF7FEFF 		bl	HAL_Delay
 144              	.LVL11:
 145 000c 08BD     		pop	{r3, pc}
 146              		.cfi_endproc
 147              	.LFE128:
 149              		.global	__aeabi_ui2d
 150              		.global	__aeabi_dmul
 151              		.global	__aeabi_dsub
 152              		.global	__aeabi_d2f
 153 000e 00BF     		.section	.text.calculate_heading,"ax",%progbits
 154              		.align	2
 155              		.global	calculate_heading
 156              		.thumb
 157              		.thumb_func
 159              	calculate_heading:
 160              	.LFB131:
 608:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
 161              		.loc 1 608 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL12:
 166 0000 08B5     		push	{r3, lr}
 167              	.LCFI3:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 17


 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 3, -8
 170              		.cfi_offset 14, -4
 609:Src/main.c    **** }
 171              		.loc 1 609 0
 172 0002 FFF7FEFF 		bl	__aeabi_ui2d
 173              	.LVL13:
 174 0006 0022     		movs	r2, #0
 175 0008 054B     		ldr	r3, .L15
 176 000a FFF7FEFF 		bl	__aeabi_dmul
 177              	.LVL14:
 178 000e 0022     		movs	r2, #0
 179 0010 044B     		ldr	r3, .L15+4
 180 0012 FFF7FEFF 		bl	__aeabi_dsub
 181              	.LVL15:
 182 0016 FFF7FEFF 		bl	__aeabi_d2f
 183              	.LVL16:
 610:Src/main.c    **** 
 184              		.loc 1 610 0
 185 001a 00EE100A 		fmsr	s0, r0
 186 001e 08BD     		pop	{r3, pc}
 187              	.L16:
 188              		.align	2
 189              	.L15:
 190 0020 0000303F 		.word	1060110336
 191 0024 0000E03F 		.word	1071644672
 192              		.cfi_endproc
 193              	.LFE131:
 195              		.section	.text.print,"ax",%progbits
 196              		.align	2
 197              		.global	print
 198              		.thumb
 199              		.thumb_func
 201              	print:
 202              	.LFB133:
 652:Src/main.c    ****     // if (row == 0)
 203              		.loc 1 652 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              	.LVL17:
 208 0000 10B5     		push	{r4, lr}
 209              	.LCFI4:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 4, -8
 212              		.cfi_offset 14, -4
 213 0002 0446     		mov	r4, r0
 660:Src/main.c    **** }
 214              		.loc 1 660 0
 215 0004 FFF7FEFF 		bl	strlen
 216              	.LVL18:
 217 0008 82B2     		uxth	r2, r0
 218 000a 0348     		ldr	r0, .L19
 219 000c 2146     		mov	r1, r4
 220 000e 6423     		movs	r3, #100
 221 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 222              	.LVL19:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 18


 223 0014 10BD     		pop	{r4, pc}
 224              	.LVL20:
 225              	.L20:
 226 0016 00BF     		.align	2
 227              	.L19:
 228 0018 00000000 		.word	huart6
 229              		.cfi_endproc
 230              	.LFE133:
 232              		.global	__aeabi_d2iz
 233              		.section	.text.alarm_detect,"ax",%progbits
 234              		.align	2
 235              		.global	alarm_detect
 236              		.thumb
 237              		.thumb_func
 239              	alarm_detect:
 240              	.LFB132:
 613:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 241              		.loc 1 613 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 24
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245 0000 30B5     		push	{r4, r5, lr}
 246              	.LCFI5:
 247              		.cfi_def_cfa_offset 12
 248              		.cfi_offset 4, -12
 249              		.cfi_offset 5, -8
 250              		.cfi_offset 14, -4
 251 0002 89B0     		sub	sp, sp, #36
 252              	.LCFI6:
 253              		.cfi_def_cfa_offset 48
 614:Src/main.c    ****     HAL_Delay(500);
 254              		.loc 1 614 0
 255 0004 1948     		ldr	r0, .L25
 256 0006 1A49     		ldr	r1, .L25+4
 257 0008 4FF40062 		mov	r2, #2048
 258 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 259              	.LVL21:
 615:Src/main.c    ****     char msg[20]="";
 260              		.loc 1 615 0
 261 0010 4FF4FA70 		mov	r0, #500
 262 0014 FFF7FEFF 		bl	HAL_Delay
 263              	.LVL22:
 616:Src/main.c    ****     int count = 0;
 264              		.loc 1 616 0
 265 0018 0024     		movs	r4, #0
 266 001a 0394     		str	r4, [sp, #12]
 267 001c 0494     		str	r4, [sp, #16]
 268 001e 0594     		str	r4, [sp, #20]
 269 0020 0694     		str	r4, [sp, #24]
 270 0022 0794     		str	r4, [sp, #28]
 271              	.LVL23:
 272              	.L23:
 619:Src/main.c    ****         sprintf(msg, "A %d\n", (int) goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(
 273              		.loc 1 619 0
 274 0024 134B     		ldr	r3, .L25+8
 275 0026 83FB0432 		smull	r3, r2, r3, r4
 276 002a E317     		asrs	r3, r4, #31
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 19


 277 002c C3EB2213 		rsb	r3, r3, r2, asr #4
 278 0030 3222     		movs	r2, #50
 279 0032 02FB1343 		mls	r3, r2, r3, r4
 280 0036 BBB9     		cbnz	r3, .L22
 620:Src/main.c    ****         print(msg, 0);
 281              		.loc 1 620 0
 282 0038 0025     		movs	r5, #0
 283 003a 0095     		str	r5, [sp]
 284 003c 0E48     		ldr	r0, .L25+12
 285 003e 48F60B61 		movw	r1, #36363
 286 0042 4FF47A72 		mov	r2, #1000
 287 0046 4FF40063 		mov	r3, #2048
 288 004a FFF7FEFF 		bl	goertzel
 289              	.LVL24:
 290 004e 51EC100B 		fmrrd	r0, r1, d0
 291 0052 FFF7FEFF 		bl	__aeabi_d2iz
 292              	.LVL25:
 293 0056 0246     		mov	r2, r0
 294 0058 03A8     		add	r0, sp, #12
 295 005a 0849     		ldr	r1, .L25+16
 296 005c FFF7FEFF 		bl	sprintf
 297              	.LVL26:
 621:Src/main.c    ****         }
 298              		.loc 1 621 0
 299 0060 03A8     		add	r0, sp, #12
 300 0062 2946     		mov	r1, r5
 301 0064 FFF7FEFF 		bl	print
 302              	.LVL27:
 303              	.L22:
 623:Src/main.c    ****     }
 304              		.loc 1 623 0
 305 0068 0134     		adds	r4, r4, #1
 306              	.LVL28:
 624:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 50){
 307              		.loc 1 624 0
 308 006a DBE7     		b	.L23
 309              	.L26:
 310              		.align	2
 311              	.L25:
 312 006c 00000000 		.word	hadc1
 313 0070 00000000 		.word	dma_buffer
 314 0074 1F85EB51 		.word	1374389535
 315 0078 00000000 		.word	adc_values
 316 007c 00000000 		.word	.LC0
 317              		.cfi_endproc
 318              	.LFE132:
 320              		.section	.text.menu,"ax",%progbits
 321              		.align	2
 322              		.global	menu
 323              		.thumb
 324              		.thumb_func
 326              	menu:
 327              	.LFB134:
 664:Src/main.c    ****     print("Starting\n", 0);
 328              		.loc 1 664 0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 20


 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              	.LVL29:
 333 0000 30B5     		push	{r4, r5, lr}
 334              	.LCFI7:
 335              		.cfi_def_cfa_offset 12
 336              		.cfi_offset 4, -12
 337              		.cfi_offset 5, -8
 338              		.cfi_offset 14, -4
 339 0002 8BB0     		sub	sp, sp, #44
 340              	.LCFI8:
 341              		.cfi_def_cfa_offset 56
 342 0004 0546     		mov	r5, r0
 665:Src/main.c    ****     char msg[20] = "";
 343              		.loc 1 665 0
 344 0006 2548     		ldr	r0, .L33
 345              	.LVL30:
 346 0008 0021     		movs	r1, #0
 347 000a FFF7FEFF 		bl	print
 348              	.LVL31:
 666:Src/main.c    ****     int pid_select = 0;
 349              		.loc 1 666 0
 350 000e 0024     		movs	r4, #0
 351 0010 0594     		str	r4, [sp, #20]
 352 0012 0694     		str	r4, [sp, #24]
 353 0014 0794     		str	r4, [sp, #28]
 354 0016 0894     		str	r4, [sp, #32]
 355 0018 0994     		str	r4, [sp, #36]
 356              	.LVL32:
 668:Src/main.c    ****     while (1)
 357              		.loc 1 668 0
 358 001a 0394     		str	r4, [sp, #12]
 359 001c 0494     		str	r4, [sp, #16]
 360              	.LVL33:
 361              	.L31:
 671:Src/main.c    ****         {
 362              		.loc 1 671 0
 363 001e 2048     		ldr	r0, .L33+4
 364 0020 4FF40051 		mov	r1, #8192
 365 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 366              	.LVL34:
 367 0028 48BB     		cbnz	r0, .L28
 673:Src/main.c    ****             print(msg, 0);
 368              		.loc 1 673 0
 369 002a 05A8     		add	r0, sp, #20
 370 002c 1D49     		ldr	r1, .L33+8
 371 002e 0AAB     		add	r3, sp, #40
 372 0030 03EB8403 		add	r3, r3, r4, lsl #2
 373 0034 53F81C2C 		ldr	r2, [r3, #-28]
 374 0038 FFF7FEFF 		bl	sprintf
 375              	.LVL35:
 674:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 376              		.loc 1 674 0
 377 003c 05A8     		add	r0, sp, #20
 378 003e 0021     		movs	r1, #0
 379 0040 FFF7FEFF 		bl	print
 380              	.LVL36:
 675:Src/main.c    ****             {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 21


 381              		.loc 1 675 0
 382 0044 13E0     		b	.L29
 383              	.L30:
 677:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
 384              		.loc 1 677 0
 385 0046 0AAB     		add	r3, sp, #40
 386 0048 03EB8403 		add	r3, r3, r4, lsl #2
 387 004c 53F81C2C 		ldr	r2, [r3, #-28]
 388 0050 0132     		adds	r2, r2, #1
 389 0052 43F81C2C 		str	r2, [r3, #-28]
 678:Src/main.c    ****                 print(msg, 0);
 390              		.loc 1 678 0
 391 0056 05A8     		add	r0, sp, #20
 392 0058 1249     		ldr	r1, .L33+8
 393 005a FFF7FEFF 		bl	sprintf
 394              	.LVL37:
 679:Src/main.c    ****                 HAL_Delay(500);
 395              		.loc 1 679 0
 396 005e 05A8     		add	r0, sp, #20
 397 0060 0021     		movs	r1, #0
 398 0062 FFF7FEFF 		bl	print
 399              	.LVL38:
 680:Src/main.c    ****             }
 400              		.loc 1 680 0
 401 0066 4FF4FA70 		mov	r0, #500
 402 006a FFF7FEFF 		bl	HAL_Delay
 403              	.LVL39:
 404              	.L29:
 675:Src/main.c    ****             {
 405              		.loc 1 675 0
 406 006e 0C48     		ldr	r0, .L33+4
 407 0070 4FF40051 		mov	r1, #8192
 408 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 409              	.LVL40:
 410 0078 0028     		cmp	r0, #0
 411 007a E4D0     		beq	.L30
 682:Src/main.c    ****         }
 412              		.loc 1 682 0
 413 007c 0134     		adds	r4, r4, #1
 414              	.LVL41:
 415              	.L28:
 684:Src/main.c    ****             break;
 416              		.loc 1 684 0
 417 007e 022C     		cmp	r4, #2
 418 0080 CDD1     		bne	.L31
 687:Src/main.c    **** }
 419              		.loc 1 687 0
 420 0082 BDF80C10 		ldrh	r1, [sp, #12]
 421 0086 BDF81020 		ldrh	r2, [sp, #16]
 422 008a 0123     		movs	r3, #1
 423 008c 0093     		str	r3, [sp]
 424 008e 0193     		str	r3, [sp, #4]
 425 0090 2846     		mov	r0, r5
 426 0092 FFF7FEFF 		bl	pid_Init
 427              	.LVL42:
 688:Src/main.c    **** 
 428              		.loc 1 688 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 22


 429 0096 2846     		mov	r0, r5
 430 0098 0BB0     		add	sp, sp, #44
 431              	.LCFI9:
 432              		.cfi_def_cfa_offset 12
 433              		@ sp needed
 434 009a 30BD     		pop	{r4, r5, pc}
 435              	.LVL43:
 436              	.L34:
 437              		.align	2
 438              	.L33:
 439 009c 08000000 		.word	.LC1
 440 00a0 00080240 		.word	1073874944
 441 00a4 14000000 		.word	.LC2
 442              		.cfi_endproc
 443              	.LFE134:
 445              		.section	.text.set_motor_speed,"ax",%progbits
 446              		.align	2
 447              		.global	set_motor_speed
 448              		.thumb
 449              		.thumb_func
 451              	set_motor_speed:
 452              	.LFB135:
 691:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 453              		.loc 1 691 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              		@ link register save eliminated.
 458              	.LVL44:
 692:Src/main.c    ****     {
 459              		.loc 1 692 0
 460 0000 0346     		mov	r3, r0
 461 0002 18B9     		cbnz	r0, .L36
 694:Src/main.c    ****     }
 462              		.loc 1 694 0
 463 0004 114A     		ldr	r2, .L40
 464 0006 1268     		ldr	r2, [r2]
 465 0008 9063     		str	r0, [r2, #56]
 466 000a 13E0     		b	.L37
 467              	.L36:
 696:Src/main.c    ****     {
 468              		.loc 1 696 0
 469 000c 0428     		cmp	r0, #4
 470 000e 04D1     		bne	.L38
 698:Src/main.c    ****     }
 471              		.loc 1 698 0
 472 0010 0E4A     		ldr	r2, .L40
 473 0012 1268     		ldr	r2, [r2]
 474 0014 0020     		movs	r0, #0
 475              	.LVL45:
 476 0016 5063     		str	r0, [r2, #52]
 477 0018 0CE0     		b	.L37
 478              	.LVL46:
 479              	.L38:
 700:Src/main.c    ****     {
 480              		.loc 1 700 0
 481 001a 0828     		cmp	r0, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 23


 482 001c 04D1     		bne	.L39
 702:Src/main.c    ****     }
 483              		.loc 1 702 0
 484 001e 0B4A     		ldr	r2, .L40
 485 0020 1268     		ldr	r2, [r2]
 486 0022 0020     		movs	r0, #0
 487              	.LVL47:
 488 0024 1064     		str	r0, [r2, #64]
 489 0026 05E0     		b	.L37
 490              	.LVL48:
 491              	.L39:
 704:Src/main.c    ****     {
 492              		.loc 1 704 0
 493 0028 0C28     		cmp	r0, #12
 494 002a 03D1     		bne	.L37
 706:Src/main.c    ****     }
 495              		.loc 1 706 0
 496 002c 074A     		ldr	r2, .L40
 497 002e 1268     		ldr	r2, [r2]
 498 0030 0020     		movs	r0, #0
 499              	.LVL49:
 500 0032 D063     		str	r0, [r2, #60]
 501              	.L37:
 708:Src/main.c    **** }
 502              		.loc 1 708 0
 503 0034 054A     		ldr	r2, .L40
 504 0036 1268     		ldr	r2, [r2]
 505 0038 3432     		adds	r2, r2, #52
 506 003a 9B08     		lsrs	r3, r3, #2
 507              	.LVL50:
 508 003c B1F57A7F 		cmp	r1, #1000
 509 0040 28BF     		it	cs
 510 0042 4FF47A71 		movcs	r1, #1000
 511              	.LVL51:
 512 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 513 004a 7047     		bx	lr
 514              	.L41:
 515              		.align	2
 516              	.L40:
 517 004c 00000000 		.word	htim1
 518              		.cfi_endproc
 519              	.LFE135:
 521              		.section	.text.square_edge,"ax",%progbits
 522              		.align	2
 523              		.global	square_edge
 524              		.thumb
 525              		.thumb_func
 527              	square_edge:
 528              	.LFB126:
 428:Src/main.c    ****     while (1)
 529              		.loc 1 428 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533              	.LVL52:
 534 0000 10B5     		push	{r4, lr}
 535              	.LCFI10:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 24


 536              		.cfi_def_cfa_offset 8
 537              		.cfi_offset 4, -8
 538              		.cfi_offset 14, -4
 539 0002 0446     		mov	r4, r0
 540              	.LVL53:
 541              	.L43:
 431:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_Read
 542              		.loc 1 431 0
 543 0004 2046     		mov	r0, r4
 544 0006 FFF7FEFF 		bl	drive_straight
 545              	.LVL54:
 432:Src/main.c    ****         {
 546              		.loc 1 432 0
 547 000a 1648     		ldr	r0, .L50
 548 000c 0421     		movs	r1, #4
 549 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 550              	.LVL55:
 551 0012 38B9     		cbnz	r0, .L44
 432:Src/main.c    ****         {
 552              		.loc 1 432 0 is_stmt 0 discriminator 1
 553 0014 00F18040 		add	r0, r0, #1073741824
 554 0018 00F50230 		add	r0, r0, #133120
 555 001c 0821     		movs	r1, #8
 556 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 557              	.LVL56:
 558 0022 E8B1     		cbz	r0, .L42
 559              	.L44:
 436:Src/main.c    ****         {
 560              		.loc 1 436 0 is_stmt 1
 561 0024 0F48     		ldr	r0, .L50
 562 0026 0421     		movs	r1, #4
 563 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 564              	.LVL57:
 565 002c 28B1     		cbz	r0, .L46
 436:Src/main.c    ****         {
 566              		.loc 1 436 0 is_stmt 0 discriminator 1
 567 002e 0E48     		ldr	r0, .L50+4
 568 0030 0821     		movs	r1, #8
 569 0032 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 570              	.LVL58:
 571 0036 0028     		cmp	r0, #0
 572 0038 E4D1     		bne	.L43
 573              	.L46:
 439:Src/main.c    ****             {
 574              		.loc 1 439 0 is_stmt 1
 575 003a 0A48     		ldr	r0, .L50
 576 003c 0421     		movs	r1, #4
 577 003e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 578              	.LVL59:
 579 0042 10B9     		cbnz	r0, .L48
 441:Src/main.c    ****             }
 580              		.loc 1 441 0
 581 0044 0146     		mov	r1, r0
 582 0046 FFF7FEFF 		bl	set_motor_speed
 583              	.LVL60:
 584              	.L48:
 443:Src/main.c    ****             {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 25


 585              		.loc 1 443 0
 586 004a 0748     		ldr	r0, .L50+4
 587 004c 0821     		movs	r1, #8
 588 004e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 589              	.LVL61:
 590 0052 0028     		cmp	r0, #0
 591 0054 D6D1     		bne	.L43
 445:Src/main.c    ****             }
 592              		.loc 1 445 0
 593 0056 0820     		movs	r0, #8
 594 0058 0021     		movs	r1, #0
 595 005a FFF7FEFF 		bl	set_motor_speed
 596              	.LVL62:
 597 005e D1E7     		b	.L43
 598              	.L42:
 599 0060 10BD     		pop	{r4, pc}
 600              	.LVL63:
 601              	.L51:
 602 0062 00BF     		.align	2
 603              	.L50:
 604 0064 000C0240 		.word	1073875968
 605 0068 00080240 		.word	1073874944
 606              		.cfi_endproc
 607              	.LFE126:
 609              		.global	__aeabi_f2d
 610              		.global	__aeabi_d2uiz
 611              		.global	__aeabi_dcmplt
 612              		.global	__aeabi_dcmpgt
 613              		.section	.text.turn,"ax",%progbits
 614              		.align	2
 615              		.global	turn
 616              		.thumb
 617              		.thumb_func
 619              	turn:
 620              	.LFB129:
 502:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 621              		.loc 1 502 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 24
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 626              	.LCFI11:
 627              		.cfi_def_cfa_offset 20
 628              		.cfi_offset 4, -20
 629              		.cfi_offset 5, -16
 630              		.cfi_offset 6, -12
 631              		.cfi_offset 7, -8
 632              		.cfi_offset 14, -4
 633 0002 2DED028B 		fstmfdd	sp!, {d8}
 634              	.LCFI12:
 635              		.cfi_def_cfa_offset 28
 636              		.cfi_offset 80, -28
 637              		.cfi_offset 81, -24
 638 0006 87B0     		sub	sp, sp, #28
 639              	.LCFI13:
 640              		.cfi_def_cfa_offset 56
 503:Src/main.c    ****     //TODO calculate time needed to fill first buffer
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 26


 641              		.loc 1 503 0
 642 0008 5948     		ldr	r0, .L63+16
 643 000a 5A49     		ldr	r1, .L63+20
 644 000c 4FF40062 		mov	r2, #2048
 645 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 646              	.LVL64:
 505:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 647              		.loc 1 505 0
 648 0014 6420     		movs	r0, #100
 649 0016 FFF7FEFF 		bl	HAL_Delay
 650              	.LVL65:
 506:Src/main.c    ****     //double r = atan(1.57*tan()/())
 651              		.loc 1 506 0
 652 001a 574E     		ldr	r6, .L63+24
 653 001c 7069     		ldr	r0, [r6, #20]
 654 001e 4000     		lsls	r0, r0, #1
 655 0020 FFF7FEFF 		bl	calculate_heading
 656              	.LVL66:
 657 0024 B0EE408A 		fcpys	s16, s0
 658              	.LVL67:
 508:Src/main.c    ****     TIM4->CNT = 0;
 659              		.loc 1 508 0
 660 0028 F0EEC07A 		fabss	s15, s0
 661 002c 17EE900A 		fmrs	r0, s15
 662 0030 FFF7FEFF 		bl	__aeabi_f2d
 663              	.LVL68:
 664 0034 0022     		movs	r2, #0
 665 0036 514B     		ldr	r3, .L63+28
 666 0038 FFF7FEFF 		bl	__aeabi_dmul
 667              	.LVL69:
 668 003c FFF7FEFF 		bl	__aeabi_d2uiz
 669              	.LVL70:
 670 0040 85B2     		uxth	r5, r0
 671              	.LVL71:
 509:Src/main.c    ****     TIM5->CNT = 0;
 672              		.loc 1 509 0
 673 0042 0024     		movs	r4, #0
 674 0044 4E4B     		ldr	r3, .L63+32
 675 0046 5C62     		str	r4, [r3, #36]
 510:Src/main.c    **** 
 676              		.loc 1 510 0
 677 0048 03F58063 		add	r3, r3, #1024
 678 004c 5C62     		str	r4, [r3, #36]
 512:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", counts);
 679              		.loc 1 512 0
 680 004e 0194     		str	r4, [sp, #4]
 681 0050 0294     		str	r4, [sp, #8]
 682 0052 0394     		str	r4, [sp, #12]
 683 0054 0494     		str	r4, [sp, #16]
 684 0056 ADF81440 		strh	r4, [sp, #20]	@ movhi
 513:Src/main.c    ****     print(msg, 0);
 685              		.loc 1 513 0
 686 005a 01A8     		add	r0, sp, #4
 687 005c 4949     		ldr	r1, .L63+36
 688 005e 2A46     		mov	r2, r5
 689 0060 FFF7FEFF 		bl	sprintf
 690              	.LVL72:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 27


 514:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 691              		.loc 1 514 0
 692 0064 01A8     		add	r0, sp, #4
 693 0066 2146     		mov	r1, r4
 694 0068 FFF7FEFF 		bl	print
 695              	.LVL73:
 515:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 696              		.loc 1 515 0
 697 006c BDEEC87A 		ftosizs	s14, s16
 698              	.LVL74:
 516:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 699              		.loc 1 516 0
 700 0070 F8EEC77A 		fsitos	s15, s14
 701 0074 78EE677A 		fsubs	s15, s16, s15
 702 0078 DFED436A 		flds	s13, .L63+40
 703 007c 67EEA67A 		fmuls	s15, s15, s13
 704              	.LVL75:
 517:Src/main.c    ****     print(msg, 2);
 705              		.loc 1 517 0
 706 0080 01A8     		add	r0, sp, #4
 707 0082 4249     		ldr	r1, .L63+44
 708 0084 17EE102A 		fmrs	r2, s14	@ int
 709 0088 FDEEE77A 		ftosizs	s15, s15
 710              	.LVL76:
 711 008c 17EE903A 		fmrs	r3, s15	@ int
 712 0090 FFF7FEFF 		bl	sprintf
 713              	.LVL77:
 518:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %d\n", 2 * adc_values[5]);
 714              		.loc 1 518 0
 715 0094 01A8     		add	r0, sp, #4
 716 0096 0221     		movs	r1, #2
 717 0098 FFF7FEFF 		bl	print
 718              	.LVL78:
 519:Src/main.c    ****     print(msg, 0);
 719              		.loc 1 519 0
 720 009c 7269     		ldr	r2, [r6, #20]
 721 009e 01A8     		add	r0, sp, #4
 722 00a0 3B49     		ldr	r1, .L63+48
 723 00a2 5200     		lsls	r2, r2, #1
 724 00a4 FFF7FEFF 		bl	sprintf
 725              	.LVL79:
 520:Src/main.c    **** 
 726              		.loc 1 520 0
 727 00a8 01A8     		add	r0, sp, #4
 728 00aa 2146     		mov	r1, r4
 729 00ac FFF7FEFF 		bl	print
 730              	.LVL80:
 522:Src/main.c    ****     {
 731              		.loc 1 522 0
 732 00b0 18EE100A 		fmrs	r0, s16
 733 00b4 FFF7FEFF 		bl	__aeabi_f2d
 734              	.LVL81:
 735 00b8 0646     		mov	r6, r0
 736 00ba 0F46     		mov	r7, r1
 737 00bc 28A3     		adr	r3, .L63
 738 00be D3E90023 		ldrd	r2, [r3]
 739 00c2 FFF7FEFF 		bl	__aeabi_dcmplt
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 28


 740              	.LVL82:
 741 00c6 E8B1     		cbz	r0, .L61
 524:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 742              		.loc 1 524 0
 743 00c8 2046     		mov	r0, r4
 744 00ca 2146     		mov	r1, r4
 745 00cc FFF7FEFF 		bl	set_motor_speed
 746              	.LVL83:
 525:Src/main.c    ****         while (TIM5->CNT < counts)
 747              		.loc 1 525 0
 748 00d0 0820     		movs	r0, #8
 749 00d2 304B     		ldr	r3, .L63+52
 750 00d4 1988     		ldrh	r1, [r3]
 751 00d6 FFF7FEFF 		bl	set_motor_speed
 752              	.LVL84:
 753              	.L55:
 526:Src/main.c    ****         {
 754              		.loc 1 526 0 discriminator 1
 755 00da 2F4B     		ldr	r3, .L63+56
 756 00dc 5B6A     		ldr	r3, [r3, #36]
 757 00de AB42     		cmp	r3, r5
 758 00e0 FBD3     		bcc	.L55
 531:Src/main.c    ****         print(msg, 4);
 759              		.loc 1 531 0
 760 00e2 2D4C     		ldr	r4, .L63+56
 761 00e4 626A     		ldr	r2, [r4, #36]
 762 00e6 01A8     		add	r0, sp, #4
 763 00e8 2C49     		ldr	r1, .L63+60
 764 00ea FFF7FEFF 		bl	sprintf
 765              	.LVL85:
 532:Src/main.c    ****         TIM5->CNT = 0;
 766              		.loc 1 532 0
 767 00ee 01A8     		add	r0, sp, #4
 768 00f0 0421     		movs	r1, #4
 769 00f2 FFF7FEFF 		bl	print
 770              	.LVL86:
 533:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 771              		.loc 1 533 0
 772 00f6 0020     		movs	r0, #0
 773 00f8 6062     		str	r0, [r4, #36]
 534:Src/main.c    ****     }
 774              		.loc 1 534 0
 775 00fa 294B     		ldr	r3, .L63+64
 776 00fc 1988     		ldrh	r1, [r3]
 777 00fe FFF7FEFF 		bl	set_motor_speed
 778              	.LVL87:
 779 0102 25E0     		b	.L56
 780              	.L61:
 536:Src/main.c    ****     {
 781              		.loc 1 536 0
 782 0104 3046     		mov	r0, r6
 783 0106 3946     		mov	r1, r7
 784 0108 17A3     		adr	r3, .L63+8
 785 010a D3E90023 		ldrd	r2, [r3]
 786 010e FFF7FEFF 		bl	__aeabi_dcmpgt
 787              	.LVL88:
 788 0112 E8B1     		cbz	r0, .L56
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 29


 538:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 789              		.loc 1 538 0
 790 0114 0020     		movs	r0, #0
 791 0116 224B     		ldr	r3, .L63+64
 792 0118 1988     		ldrh	r1, [r3]
 793 011a FFF7FEFF 		bl	set_motor_speed
 794              	.LVL89:
 539:Src/main.c    ****         while (TIM4->CNT < counts)
 795              		.loc 1 539 0
 796 011e 0820     		movs	r0, #8
 797 0120 0021     		movs	r1, #0
 798 0122 FFF7FEFF 		bl	set_motor_speed
 799              	.LVL90:
 800              	.L58:
 540:Src/main.c    ****         {
 801              		.loc 1 540 0 discriminator 1
 802 0126 164B     		ldr	r3, .L63+32
 803 0128 5B6A     		ldr	r3, [r3, #36]
 804 012a AB42     		cmp	r3, r5
 805 012c FBD3     		bcc	.L58
 545:Src/main.c    ****         print(msg, 4);
 806              		.loc 1 545 0
 807 012e 144C     		ldr	r4, .L63+32
 808 0130 626A     		ldr	r2, [r4, #36]
 809 0132 01A8     		add	r0, sp, #4
 810 0134 1B49     		ldr	r1, .L63+68
 811 0136 FFF7FEFF 		bl	sprintf
 812              	.LVL91:
 546:Src/main.c    ****         TIM4->CNT = 0;
 813              		.loc 1 546 0
 814 013a 01A8     		add	r0, sp, #4
 815 013c 0421     		movs	r1, #4
 816 013e FFF7FEFF 		bl	print
 817              	.LVL92:
 547:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 818              		.loc 1 547 0
 819 0142 0023     		movs	r3, #0
 820 0144 6362     		str	r3, [r4, #36]
 548:Src/main.c    ****     }
 821              		.loc 1 548 0
 822 0146 0820     		movs	r0, #8
 823 0148 124B     		ldr	r3, .L63+52
 824 014a 1988     		ldrh	r1, [r3]
 825 014c FFF7FEFF 		bl	set_motor_speed
 826              	.LVL93:
 827              	.L56:
 550:Src/main.c    **** }
 828              		.loc 1 550 0
 829 0150 0748     		ldr	r0, .L63+16
 830 0152 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 831              	.LVL94:
 551:Src/main.c    **** 
 832              		.loc 1 551 0
 833 0156 07B0     		add	sp, sp, #28
 834              	.LCFI14:
 835              		.cfi_def_cfa_offset 28
 836              		@ sp needed
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 30


 837 0158 BDEC028B 		fldmfdd	sp!, {d8}
 838              	.LCFI15:
 839              		.cfi_restore 80
 840              		.cfi_restore 81
 841              		.cfi_def_cfa_offset 20
 842              	.LVL95:
 843 015c F0BD     		pop	{r4, r5, r6, r7, pc}
 844              	.LVL96:
 845              	.L64:
 846 015e 00BF     		.align	3
 847              	.L63:
 848 0160 7B14AE47 		.word	1202590843
 849 0164 E17AA4BF 		.word	-1079739679
 850 0168 7B14AE47 		.word	1202590843
 851 016c E17AA43F 		.word	1067743969
 852 0170 00000000 		.word	hadc1
 853 0174 00000000 		.word	dma_buffer
 854 0178 00000000 		.word	adc_values
 855 017c 00406040 		.word	1080049664
 856 0180 00080040 		.word	1073743872
 857 0184 1C000000 		.word	.LC3
 858 0188 00007A44 		.word	1148846080
 859 018c 30000000 		.word	.LC4
 860 0190 44000000 		.word	.LC5
 861 0194 00000000 		.word	.LANCHOR0
 862 0198 000C0040 		.word	1073744896
 863 019c 58000000 		.word	.LC6
 864 01a0 00000000 		.word	.LANCHOR1
 865 01a4 70000000 		.word	.LC7
 866              		.cfi_endproc
 867              	.LFE129:
 869              		.global	__aeabi_i2d
 870              		.global	__aeabi_dadd
 871              		.section	.text.turn_deg,"ax",%progbits
 872              		.align	2
 873              		.global	turn_deg
 874              		.thumb
 875              		.thumb_func
 877              	turn_deg:
 878              	.LFB130:
 558:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 879              		.loc 1 558 0
 880              		.cfi_startproc
 881              		@ args = 0, pretend = 0, frame = 56
 882              		@ frame_needed = 0, uses_anonymous_args = 0
 883              	.LVL97:
 884 0000 70B5     		push	{r4, r5, r6, lr}
 885              	.LCFI16:
 886              		.cfi_def_cfa_offset 16
 887              		.cfi_offset 4, -16
 888              		.cfi_offset 5, -12
 889              		.cfi_offset 6, -8
 890              		.cfi_offset 14, -4
 891 0002 8EB0     		sub	sp, sp, #56
 892              	.LCFI17:
 893              		.cfi_def_cfa_offset 72
 894 0004 0646     		mov	r6, r0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 31


 559:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 895              		.loc 1 559 0
 896 0006 4248     		ldr	r0, .L72+8
 897              	.LVL98:
 898 0008 4249     		ldr	r1, .L72+12
 899 000a 4FF40062 		mov	r2, #2048
 900 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 901              	.LVL99:
 560:Src/main.c    ****     if (counts < 0) counts = -counts;
 902              		.loc 1 560 0
 903 0012 A6F15A00 		sub	r0, r6, #90
 904 0016 FFF7FEFF 		bl	__aeabi_i2d
 905              	.LVL100:
 906 001a 3BA3     		adr	r3, .L72
 907 001c D3E90023 		ldrd	r2, [r3]
 908 0020 FFF7FEFF 		bl	__aeabi_dmul
 909              	.LVL101:
 910 0024 0022     		movs	r2, #0
 911 0026 3C4B     		ldr	r3, .L72+16
 912 0028 FFF7FEFF 		bl	__aeabi_dadd
 913              	.LVL102:
 914 002c FFF7FEFF 		bl	__aeabi_d2iz
 915              	.LVL103:
 916 0030 85B2     		uxth	r5, r0
 917              	.LVL104:
 561:Src/main.c    ****     TIM4->CNT = 0;
 918              		.loc 1 561 0
 919 0032 15F4004F 		tst	r5, #32768
 920 0036 01D0     		beq	.L66
 561:Src/main.c    ****     TIM4->CNT = 0;
 921              		.loc 1 561 0 is_stmt 0 discriminator 1
 922 0038 6D42     		negs	r5, r5
 923              	.LVL105:
 924 003a ADB2     		uxth	r5, r5
 925              	.LVL106:
 926              	.L66:
 562:Src/main.c    ****     TIM5->CNT = 0;
 927              		.loc 1 562 0 is_stmt 1
 928 003c 0024     		movs	r4, #0
 929 003e 374B     		ldr	r3, .L72+20
 930 0040 5C62     		str	r4, [r3, #36]
 563:Src/main.c    **** 
 931              		.loc 1 563 0
 932 0042 03F58063 		add	r3, r3, #1024
 933 0046 5C62     		str	r4, [r3, #36]
 565:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 934              		.loc 1 565 0
 935 0048 0194     		str	r4, [sp, #4]
 936 004a 0294     		str	r4, [sp, #8]
 937 004c 0394     		str	r4, [sp, #12]
 938 004e 0494     		str	r4, [sp, #16]
 939 0050 0594     		str	r4, [sp, #20]
 940 0052 0694     		str	r4, [sp, #24]
 941 0054 0794     		str	r4, [sp, #28]
 942 0056 0894     		str	r4, [sp, #32]
 943 0058 0994     		str	r4, [sp, #36]
 944 005a 0A94     		str	r4, [sp, #40]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 32


 945 005c 0B94     		str	r4, [sp, #44]
 946 005e 0C94     		str	r4, [sp, #48]
 947 0060 ADF83440 		strh	r4, [sp, #52]	@ movhi
 566:Src/main.c    ****     print(msg, 0);
 948              		.loc 1 566 0
 949 0064 01A8     		add	r0, sp, #4
 950 0066 2E49     		ldr	r1, .L72+24
 951 0068 2AB2     		sxth	r2, r5
 952 006a FFF7FEFF 		bl	sprintf
 953              	.LVL107:
 567:Src/main.c    **** 
 954              		.loc 1 567 0
 955 006e 01A8     		add	r0, sp, #4
 956 0070 2146     		mov	r1, r4
 957 0072 FFF7FEFF 		bl	print
 958              	.LVL108:
 569:Src/main.c    ****     {
 959              		.loc 1 569 0
 960 0076 A642     		cmp	r6, r4
 961 0078 1ADD     		ble	.L67
 571:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 962              		.loc 1 571 0
 963 007a 2046     		mov	r0, r4
 964 007c 294B     		ldr	r3, .L72+28
 965 007e 1988     		ldrh	r1, [r3]
 966 0080 FFF7FEFF 		bl	set_motor_speed
 967              	.LVL109:
 572:Src/main.c    ****         while (TIM4->CNT < counts)
 968              		.loc 1 572 0
 969 0084 0820     		movs	r0, #8
 970 0086 2146     		mov	r1, r4
 971 0088 FFF7FEFF 		bl	set_motor_speed
 972              	.LVL110:
 973              	.L68:
 573:Src/main.c    ****         {
 974              		.loc 1 573 0 discriminator 1
 975 008c 234B     		ldr	r3, .L72+20
 976 008e 5A6A     		ldr	r2, [r3, #36]
 977 0090 2BB2     		sxth	r3, r5
 978 0092 9A42     		cmp	r2, r3
 979 0094 FAD3     		bcc	.L68
 578:Src/main.c    ****         print(msg, 4);
 980              		.loc 1 578 0
 981 0096 244C     		ldr	r4, .L72+32
 982 0098 626A     		ldr	r2, [r4, #36]
 983 009a 01A8     		add	r0, sp, #4
 984 009c 2349     		ldr	r1, .L72+36
 985 009e FFF7FEFF 		bl	sprintf
 986              	.LVL111:
 579:Src/main.c    ****         TIM5->CNT = 0;
 987              		.loc 1 579 0
 988 00a2 01A8     		add	r0, sp, #4
 989 00a4 0421     		movs	r1, #4
 990 00a6 FFF7FEFF 		bl	print
 991              	.LVL112:
 580:Src/main.c    ****     }
 992              		.loc 1 580 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 33


 993 00aa 0023     		movs	r3, #0
 994 00ac 6362     		str	r3, [r4, #36]
 995 00ae 1BE0     		b	.L69
 996              	.L67:
 582:Src/main.c    ****     {
 997              		.loc 1 582 0
 998 00b0 002E     		cmp	r6, #0
 999 00b2 19DA     		bge	.L69
 584:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1000              		.loc 1 584 0
 1001 00b4 0020     		movs	r0, #0
 1002 00b6 0146     		mov	r1, r0
 1003 00b8 FFF7FEFF 		bl	set_motor_speed
 1004              	.LVL113:
 585:Src/main.c    ****         while (TIM5->CNT < counts)
 1005              		.loc 1 585 0
 1006 00bc 0820     		movs	r0, #8
 1007 00be 1C4B     		ldr	r3, .L72+40
 1008 00c0 1988     		ldrh	r1, [r3]
 1009 00c2 FFF7FEFF 		bl	set_motor_speed
 1010              	.LVL114:
 1011              	.L70:
 586:Src/main.c    ****         {
 1012              		.loc 1 586 0 discriminator 1
 1013 00c6 184B     		ldr	r3, .L72+32
 1014 00c8 5A6A     		ldr	r2, [r3, #36]
 1015 00ca 2BB2     		sxth	r3, r5
 1016 00cc 9A42     		cmp	r2, r3
 1017 00ce FAD3     		bcc	.L70
 591:Src/main.c    ****         print(msg, 4);
 1018              		.loc 1 591 0
 1019 00d0 124C     		ldr	r4, .L72+20
 1020 00d2 626A     		ldr	r2, [r4, #36]
 1021 00d4 01A8     		add	r0, sp, #4
 1022 00d6 1749     		ldr	r1, .L72+44
 1023 00d8 FFF7FEFF 		bl	sprintf
 1024              	.LVL115:
 592:Src/main.c    ****         TIM4->CNT = 0;
 1025              		.loc 1 592 0
 1026 00dc 01A8     		add	r0, sp, #4
 1027 00de 0421     		movs	r1, #4
 1028 00e0 FFF7FEFF 		bl	print
 1029              	.LVL116:
 593:Src/main.c    ****     }
 1030              		.loc 1 593 0
 1031 00e4 0023     		movs	r3, #0
 1032 00e6 6362     		str	r3, [r4, #36]
 1033              	.L69:
 595:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1034              		.loc 1 595 0
 1035 00e8 0020     		movs	r0, #0
 1036 00ea 0146     		mov	r1, r0
 1037 00ec FFF7FEFF 		bl	set_motor_speed
 1038              	.LVL117:
 596:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 1039              		.loc 1 596 0
 1040 00f0 0820     		movs	r0, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 34


 1041 00f2 0021     		movs	r1, #0
 1042 00f4 FFF7FEFF 		bl	set_motor_speed
 1043              	.LVL118:
 597:Src/main.c    **** }
 1044              		.loc 1 597 0
 1045 00f8 0548     		ldr	r0, .L72+8
 1046 00fa FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1047              	.LVL119:
 598:Src/main.c    **** 
 1048              		.loc 1 598 0
 1049 00fe 0EB0     		add	sp, sp, #56
 1050              	.LCFI18:
 1051              		.cfi_def_cfa_offset 16
 1052              		@ sp needed
 1053 0100 70BD     		pop	{r4, r5, r6, pc}
 1054              	.LVL120:
 1055              	.L73:
 1056 0102 00BFAFF3 		.align	3
 1056      0080
 1057              	.L72:
 1058 0108 721CC771 		.word	1908874354
 1059 010c 1CC7E13F 		.word	1071761180
 1060 0110 00000000 		.word	hadc1
 1061 0114 00000000 		.word	dma_buffer
 1062 0118 00004940 		.word	1078525952
 1063 011c 00080040 		.word	1073743872
 1064 0120 88000000 		.word	.LC8
 1065 0124 00000000 		.word	.LANCHOR1
 1066 0128 000C0040 		.word	1073744896
 1067 012c A4000000 		.word	.LC9
 1068 0130 00000000 		.word	.LANCHOR0
 1069 0134 C0000000 		.word	.LC10
 1070              		.cfi_endproc
 1071              	.LFE130:
 1073              		.section	.text.debounce_and_grab,"ax",%progbits
 1074              		.align	2
 1075              		.global	debounce_and_grab
 1076              		.thumb
 1077              		.thumb_func
 1079              	debounce_and_grab:
 1080              	.LFB137:
 747:Src/main.c    ****     }
 748:Src/main.c    **** }
 749:Src/main.c    **** 
 750:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid)
 751:Src/main.c    **** {
 1081              		.loc 1 751 0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 24
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
 1085              	.LVL121:
 1086 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1087              	.LCFI19:
 1088              		.cfi_def_cfa_offset 24
 1089              		.cfi_offset 4, -24
 1090              		.cfi_offset 5, -20
 1091              		.cfi_offset 6, -16
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 35


 1092              		.cfi_offset 7, -12
 1093              		.cfi_offset 8, -8
 1094              		.cfi_offset 14, -4
 1095 0004 86B0     		sub	sp, sp, #24
 1096              	.LCFI20:
 1097              		.cfi_def_cfa_offset 48
 1098 0006 0546     		mov	r5, r0
 752:Src/main.c    ****     uint32_t timeee = HAL_GetTick();
 1099              		.loc 1 752 0
 1100 0008 FFF7FEFF 		bl	HAL_GetTick
 1101              	.LVL122:
 1102 000c 0646     		mov	r6, r0
 1103              	.LVL123:
 753:Src/main.c    ****     // int count = 0;
 754:Src/main.c    ****     // while (HAL_GetTick() - timeee < 50)
 755:Src/main.c    ****     // {
 756:Src/main.c    ****     //     ++count;
 757:Src/main.c    ****     //     HAL_Delay(5);
 758:Src/main.c    ****     //     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_RESET)
 759:Src/main.c    ****     //     {
 760:Src/main.c    ****     //         print("CLAW_GRAB | Claw debounced. No ewok found\n", 0);
 761:Src/main.c    ****     //         ewok = FALSE;
 762:Src/main.c    ****     //         break;
 763:Src/main.c    ****     //     }
 764:Src/main.c    ****     // }
 765:Src/main.c    ****     // char msg[50] = "";
 766:Src/main.c    ****     // sprintf(msg, "CLAW_GRAB | Debounced with %d checks\n", count);
 767:Src/main.c    ****     // print(msg, 0);
 768:Src/main.c    ****     // If claw is still high, we have an ewok. Stop, grab it, continue on
 769:Src/main.c    ****     // hardcoded procedure
 770:Src/main.c    ****     print("CLAW_GRAB | grabbing ewok\n", 0);
 1104              		.loc 1 770 0
 1105 000e BB48     		ldr	r0, .L101
 1106              	.LVL124:
 1107 0010 0021     		movs	r1, #0
 1108 0012 FFF7FEFF 		bl	print
 1109              	.LVL125:
 771:Src/main.c    ****     HAL_Delay(700);
 1110              		.loc 1 771 0
 1111 0016 4FF42F70 		mov	r0, #700
 1112 001a FFF7FEFF 		bl	HAL_Delay
 1113              	.LVL126:
 772:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 1114              		.loc 1 772 0
 1115 001e 0020     		movs	r0, #0
 1116 0020 0146     		mov	r1, r0
 1117 0022 FFF7FEFF 		bl	set_motor_speed
 1118              	.LVL127:
 773:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1119              		.loc 1 773 0
 1120 0026 0820     		movs	r0, #8
 1121 0028 0021     		movs	r1, #0
 1122 002a FFF7FEFF 		bl	set_motor_speed
 1123              	.LVL128:
 774:Src/main.c    ****     close_claw(&htim3);
 1124              		.loc 1 774 0
 1125 002e B44C     		ldr	r4, .L101+4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 36


 1126 0030 2046     		mov	r0, r4
 1127 0032 FFF7FEFF 		bl	close_claw
 1128              	.LVL129:
 775:Src/main.c    ****     arm_up(&htim3);
 1129              		.loc 1 775 0
 1130 0036 2046     		mov	r0, r4
 1131 0038 FFF7FEFF 		bl	arm_up
 1132              	.LVL130:
 776:Src/main.c    ****     // TODO: delete next line, there for testing!!!
 777:Src/main.c    ****     HAL_Delay(100);
 1133              		.loc 1 777 0
 1134 003c 6420     		movs	r0, #100
 1135 003e FFF7FEFF 		bl	HAL_Delay
 1136              	.LVL131:
 778:Src/main.c    ****     ++ewok_cnt;
 1137              		.loc 1 778 0
 1138 0042 B04A     		ldr	r2, .L101+8
 1139 0044 1368     		ldr	r3, [r2]
 1140 0046 0133     		adds	r3, r3, #1
 1141 0048 1360     		str	r3, [r2]
 779:Src/main.c    ****     // char msg[18] = "";
 780:Src/main.c    ****     // sprintf(msg, "wok_cnt: %d\n", ewok_cnt);
 781:Src/main.c    ****     // print(msg, 0);
 782:Src/main.c    ****     /*
 783:Src/main.c    ****      * Claw is up and closed
 784:Src/main.c    ****      * Ewok Count incremented
 785:Src/main.c    ****      * Motors not powered
 786:Src/main.c    ****      * CLAW_INT_STATE not FLAGGED, interrupt disabled
 787:Src/main.c    ****      */
 788:Src/main.c    **** 
 789:Src/main.c    ****     // For the first ewok, turn left, arm up, square robot w/ edge,
 790:Src/main.c    ****     // drive straight for 3 s, bring arm down
 791:Src/main.c    ****     if (ewok_cnt == 1)
 1142              		.loc 1 791 0
 1143 004a 012B     		cmp	r3, #1
 1144 004c 54D1     		bne	.L75
 1145              	.LBB2:
 792:Src/main.c    ****     {
 793:Src/main.c    ****         print("First ewok captured\n", 0);
 1146              		.loc 1 793 0
 1147 004e AE48     		ldr	r0, .L101+12
 1148 0050 0021     		movs	r1, #0
 1149 0052 FFF7FEFF 		bl	print
 1150              	.LVL132:
 794:Src/main.c    ****         turn_deg(-160);
 1151              		.loc 1 794 0
 1152 0056 6FF09F00 		mvn	r0, #159
 1153 005a FFF7FEFF 		bl	turn_deg
 1154              	.LVL133:
 795:Src/main.c    ****         open_claw(&htim3);
 1155              		.loc 1 795 0
 1156 005e 2046     		mov	r0, r4
 1157 0060 FFF7FEFF 		bl	open_claw
 1158              	.LVL134:
 796:Src/main.c    ****         LEFT_SPEED+=100;
 1159              		.loc 1 796 0
 1160 0064 A94F     		ldr	r7, .L101+16
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 37


 1161 0066 3B88     		ldrh	r3, [r7]
 1162 0068 6433     		adds	r3, r3, #100
 1163 006a 3B80     		strh	r3, [r7]	@ movhi
 797:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1164              		.loc 1 797 0
 1165 006c DFF8A082 		ldr	r8, .L101+20
 1166 0070 0820     		movs	r0, #8
 1167 0072 B8F80010 		ldrh	r1, [r8]
 1168 0076 FFF7FEFF 		bl	set_motor_speed
 1169              	.LVL135:
 798:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1170              		.loc 1 798 0
 1171 007a 0020     		movs	r0, #0
 1172 007c 3988     		ldrh	r1, [r7]
 1173 007e FFF7FEFF 		bl	set_motor_speed
 1174              	.LVL136:
 799:Src/main.c    ****         square_edge(enc_pid);
 1175              		.loc 1 799 0
 1176 0082 2846     		mov	r0, r5
 1177 0084 FFF7FEFF 		bl	square_edge
 1178              	.LVL137:
 800:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1179              		.loc 1 800 0
 1180 0088 FFF7FEFF 		bl	HAL_GetTick
 1181              	.LVL138:
 1182 008c 0446     		mov	r4, r0
 1183              	.LVL139:
 801:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1184              		.loc 1 801 0
 1185 008e 0820     		movs	r0, #8
 1186              	.LVL140:
 1187 0090 B8F80010 		ldrh	r1, [r8]
 1188 0094 FFF7FEFF 		bl	set_motor_speed
 1189              	.LVL141:
 802:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1190              		.loc 1 802 0
 1191 0098 0020     		movs	r0, #0
 1192 009a 3988     		ldrh	r1, [r7]
 1193 009c FFF7FEFF 		bl	set_motor_speed
 1194              	.LVL142:
 803:Src/main.c    ****         while(HAL_GetTick()-time < 2000){
 1195              		.loc 1 803 0
 1196 00a0 02E0     		b	.L76
 1197              	.L77:
 804:Src/main.c    ****             drive_straight(enc_pid);
 1198              		.loc 1 804 0
 1199 00a2 2846     		mov	r0, r5
 1200 00a4 FFF7FEFF 		bl	drive_straight
 1201              	.LVL143:
 1202              	.L76:
 803:Src/main.c    ****         while(HAL_GetTick()-time < 2000){
 1203              		.loc 1 803 0
 1204 00a8 FFF7FEFF 		bl	HAL_GetTick
 1205              	.LVL144:
 1206 00ac 001B     		subs	r0, r0, r4
 1207 00ae B0F5FA6F 		cmp	r0, #2000
 1208 00b2 F6D3     		bcc	.L77
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 38


 805:Src/main.c    ****         }
 806:Src/main.c    ****         arm_down(&htim3);
 1209              		.loc 1 806 0
 1210 00b4 9248     		ldr	r0, .L101+4
 1211 00b6 FFF7FEFF 		bl	arm_down
 1212              	.LVL145:
 807:Src/main.c    ****         time = HAL_GetTick();
 1213              		.loc 1 807 0
 1214 00ba FFF7FEFF 		bl	HAL_GetTick
 1215              	.LVL146:
 1216 00be 0446     		mov	r4, r0
 1217              	.LVL147:
 808:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1218              		.loc 1 808 0
 1219 00c0 0820     		movs	r0, #8
 1220              	.LVL148:
 1221 00c2 934B     		ldr	r3, .L101+20
 1222 00c4 1988     		ldrh	r1, [r3]
 1223 00c6 FFF7FEFF 		bl	set_motor_speed
 1224              	.LVL149:
 809:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1225              		.loc 1 809 0
 1226 00ca 0020     		movs	r0, #0
 1227 00cc 8F4B     		ldr	r3, .L101+16
 1228 00ce 1988     		ldrh	r1, [r3]
 1229 00d0 FFF7FEFF 		bl	set_motor_speed
 1230              	.LVL150:
 810:Src/main.c    ****         while(HAL_GetTick()-time < 1000){
 1231              		.loc 1 810 0
 1232 00d4 02E0     		b	.L78
 1233              	.L79:
 811:Src/main.c    ****             drive_straight(enc_pid);
 1234              		.loc 1 811 0
 1235 00d6 2846     		mov	r0, r5
 1236 00d8 FFF7FEFF 		bl	drive_straight
 1237              	.LVL151:
 1238              	.L78:
 810:Src/main.c    ****         while(HAL_GetTick()-time < 1000){
 1239              		.loc 1 810 0
 1240 00dc FFF7FEFF 		bl	HAL_GetTick
 1241              	.LVL152:
 1242 00e0 001B     		subs	r0, r0, r4
 1243 00e2 B0F57A7F 		cmp	r0, #1000
 1244 00e6 F6D3     		bcc	.L79
 812:Src/main.c    ****         }
 813:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1245              		.loc 1 813 0
 1246 00e8 0820     		movs	r0, #8
 1247 00ea 0021     		movs	r1, #0
 1248 00ec FFF7FEFF 		bl	set_motor_speed
 1249              	.LVL153:
 814:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1250              		.loc 1 814 0
 1251 00f0 0020     		movs	r0, #0
 1252 00f2 0146     		mov	r1, r0
 1253 00f4 FFF7FEFF 		bl	set_motor_speed
 1254              	.LVL154:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 39


 1255              	.L75:
 1256              	.LBE2:
 815:Src/main.c    ****         // square_edge(&enc_pid);
 816:Src/main.c    ****         //        drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 10000);
 817:Src/main.c    ****     }
 818:Src/main.c    **** 
 819:Src/main.c    ****     if (ewok_cnt == 2)
 1257              		.loc 1 819 0
 1258 00f8 824B     		ldr	r3, .L101+8
 1259 00fa 1B68     		ldr	r3, [r3]
 1260 00fc 022B     		cmp	r3, #2
 1261 00fe 40F09980 		bne	.L80
 1262              	.LBB3:
 820:Src/main.c    ****     {
 821:Src/main.c    ****         print("Second ewok captured\n",0);
 1263              		.loc 1 821 0
 1264 0102 8448     		ldr	r0, .L101+24
 1265 0104 0021     		movs	r1, #0
 1266 0106 FFF7FEFF 		bl	print
 1267              	.LVL155:
 822:Src/main.c    ****         if(ewok_cnt==2 && searches == 3){
 1268              		.loc 1 822 0
 1269 010a 7E4B     		ldr	r3, .L101+8
 1270 010c 1B68     		ldr	r3, [r3]
 1271 010e 022B     		cmp	r3, #2
 1272 0110 07D1     		bne	.L81
 1273              		.loc 1 822 0 is_stmt 0 discriminator 1
 1274 0112 814B     		ldr	r3, .L101+28
 1275 0114 1B68     		ldr	r3, [r3]
 1276 0116 032B     		cmp	r3, #3
 1277 0118 03D1     		bne	.L81
 823:Src/main.c    ****         turn_deg(-200); //  Prolly have to change this
 1278              		.loc 1 823 0 is_stmt 1
 1279 011a 6FF0C700 		mvn	r0, #199
 1280 011e FFF7FEFF 		bl	turn_deg
 1281              	.LVL156:
 1282              	.L81:
 824:Src/main.c    ****         }
 825:Src/main.c    ****         turn_deg(-190); //  Prolly have to change this
 1283              		.loc 1 825 0
 1284 0122 6FF0BD00 		mvn	r0, #189
 1285 0126 FFF7FEFF 		bl	turn_deg
 1286              	.LVL157:
 826:Src/main.c    ****         //alarm_detect();
 827:Src/main.c    ****         open_claw(&htim3);
 1287              		.loc 1 827 0
 1288 012a 7548     		ldr	r0, .L101+4
 1289 012c FFF7FEFF 		bl	open_claw
 1290              	.LVL158:
 828:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1291              		.loc 1 828 0
 1292 0130 FFF7FEFF 		bl	HAL_GetTick
 1293              	.LVL159:
 1294 0134 8046     		mov	r8, r0
 1295              	.LVL160:
 829:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1296              		.loc 1 829 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 40


 1297 0136 0820     		movs	r0, #8
 1298              	.LVL161:
 1299 0138 754B     		ldr	r3, .L101+20
 1300 013a 1988     		ldrh	r1, [r3]
 1301 013c FFF7FEFF 		bl	set_motor_speed
 1302              	.LVL162:
 830:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1303              		.loc 1 830 0
 1304 0140 0020     		movs	r0, #0
 1305 0142 724B     		ldr	r3, .L101+16
 1306 0144 1988     		ldrh	r1, [r3]
 1307 0146 FFF7FEFF 		bl	set_motor_speed
 1308              	.LVL163:
 831:Src/main.c    ****         while(HAL_GetTick()-time < 1500){
 1309              		.loc 1 831 0
 1310 014a 25E0     		b	.L82
 1311              	.L83:
 1312              	.LBB4:
 832:Src/main.c    ****             drive_straight(enc_pid);
 1313              		.loc 1 832 0
 1314 014c 2846     		mov	r0, r5
 1315 014e FFF7FEFF 		bl	drive_straight
 1316              	.LVL164:
 833:Src/main.c    ****             char msg[20] = "";
 1317              		.loc 1 833 0
 1318 0152 0024     		movs	r4, #0
 1319 0154 0194     		str	r4, [sp, #4]
 1320 0156 0294     		str	r4, [sp, #8]
 1321 0158 0394     		str	r4, [sp, #12]
 1322 015a 0494     		str	r4, [sp, #16]
 1323 015c 0594     		str	r4, [sp, #20]
 834:Src/main.c    ****             sprintf(msg, "TL %d", HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin));
 1324              		.loc 1 834 0
 1325 015e 6F4F     		ldr	r7, .L101+32
 1326 0160 3846     		mov	r0, r7
 1327 0162 4FF48041 		mov	r1, #16384
 1328 0166 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1329              	.LVL165:
 1330 016a 0246     		mov	r2, r0
 1331 016c 01A8     		add	r0, sp, #4
 1332 016e 6C49     		ldr	r1, .L101+36
 1333 0170 FFF7FEFF 		bl	sprintf
 1334              	.LVL166:
 835:Src/main.c    ****             print(msg, 0);
 1335              		.loc 1 835 0
 1336 0174 01A8     		add	r0, sp, #4
 1337 0176 2146     		mov	r1, r4
 1338 0178 FFF7FEFF 		bl	print
 1339              	.LVL167:
 836:Src/main.c    ****             sprintf(msg, "TR %d", HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin));
 1340              		.loc 1 836 0
 1341 017c 3846     		mov	r0, r7
 1342 017e 4FF40041 		mov	r1, #32768
 1343 0182 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1344              	.LVL168:
 1345 0186 0246     		mov	r2, r0
 1346 0188 01A8     		add	r0, sp, #4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 41


 1347 018a 6649     		ldr	r1, .L101+40
 1348 018c FFF7FEFF 		bl	sprintf
 1349              	.LVL169:
 837:Src/main.c    ****             print(msg, 0);
 1350              		.loc 1 837 0
 1351 0190 01A8     		add	r0, sp, #4
 1352 0192 2146     		mov	r1, r4
 1353 0194 FFF7FEFF 		bl	print
 1354              	.LVL170:
 1355              	.L82:
 1356              	.LBE4:
 831:Src/main.c    ****             drive_straight(enc_pid);
 1357              		.loc 1 831 0
 1358 0198 FFF7FEFF 		bl	HAL_GetTick
 1359              	.LVL171:
 1360 019c C8EB0000 		rsb	r0, r8, r0
 1361 01a0 40F2DB53 		movw	r3, #1499
 1362 01a4 9842     		cmp	r0, r3
 1363 01a6 D1D9     		bls	.L83
 838:Src/main.c    ****         }
 839:Src/main.c    ****         time = HAL_GetTick();
 1364              		.loc 1 839 0
 1365 01a8 FFF7FEFF 		bl	HAL_GetTick
 1366              	.LVL172:
 1367 01ac 8046     		mov	r8, r0
 1368              	.LVL173:
 840:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 800);
 1369              		.loc 1 840 0
 1370 01ae 0820     		movs	r0, #8
 1371              	.LVL174:
 1372 01b0 4FF44871 		mov	r1, #800
 1373 01b4 FFF7FEFF 		bl	set_motor_speed
 1374              	.LVL175:
 841:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 900);
 1375              		.loc 1 841 0
 1376 01b8 0020     		movs	r0, #0
 1377 01ba 4FF46171 		mov	r1, #900
 1378 01be FFF7FEFF 		bl	set_motor_speed
 1379              	.LVL176:
 842:Src/main.c    ****         while(HAL_GetTick()-time < 2000){
 1380              		.loc 1 842 0
 1381 01c2 25E0     		b	.L84
 1382              	.L85:
 1383              	.LBB5:
 843:Src/main.c    ****             drive_straight(enc_pid);
 1384              		.loc 1 843 0
 1385 01c4 2846     		mov	r0, r5
 1386 01c6 FFF7FEFF 		bl	drive_straight
 1387              	.LVL177:
 844:Src/main.c    ****             char msg[20] = "";
 1388              		.loc 1 844 0
 1389 01ca 0024     		movs	r4, #0
 1390 01cc 0194     		str	r4, [sp, #4]
 1391 01ce 0294     		str	r4, [sp, #8]
 1392 01d0 0394     		str	r4, [sp, #12]
 1393 01d2 0494     		str	r4, [sp, #16]
 1394 01d4 0594     		str	r4, [sp, #20]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 42


 845:Src/main.c    ****             sprintf(msg, "TL %d", HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin));
 1395              		.loc 1 845 0
 1396 01d6 514F     		ldr	r7, .L101+32
 1397 01d8 3846     		mov	r0, r7
 1398 01da 4FF48041 		mov	r1, #16384
 1399 01de FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1400              	.LVL178:
 1401 01e2 0246     		mov	r2, r0
 1402 01e4 01A8     		add	r0, sp, #4
 1403 01e6 4E49     		ldr	r1, .L101+36
 1404 01e8 FFF7FEFF 		bl	sprintf
 1405              	.LVL179:
 846:Src/main.c    ****             print(msg, 0);
 1406              		.loc 1 846 0
 1407 01ec 01A8     		add	r0, sp, #4
 1408 01ee 2146     		mov	r1, r4
 1409 01f0 FFF7FEFF 		bl	print
 1410              	.LVL180:
 847:Src/main.c    ****             sprintf(msg, "TR %d", HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin));
 1411              		.loc 1 847 0
 1412 01f4 3846     		mov	r0, r7
 1413 01f6 4FF40041 		mov	r1, #32768
 1414 01fa FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1415              	.LVL181:
 1416 01fe 0246     		mov	r2, r0
 1417 0200 01A8     		add	r0, sp, #4
 1418 0202 4849     		ldr	r1, .L101+40
 1419 0204 FFF7FEFF 		bl	sprintf
 1420              	.LVL182:
 848:Src/main.c    ****             print(msg, 0);
 1421              		.loc 1 848 0
 1422 0208 01A8     		add	r0, sp, #4
 1423 020a 2146     		mov	r1, r4
 1424 020c FFF7FEFF 		bl	print
 1425              	.LVL183:
 1426              	.L84:
 1427              	.LBE5:
 842:Src/main.c    ****             drive_straight(enc_pid);
 1428              		.loc 1 842 0
 1429 0210 FFF7FEFF 		bl	HAL_GetTick
 1430              	.LVL184:
 1431 0214 C8EB0000 		rsb	r0, r8, r0
 1432 0218 B0F5FA6F 		cmp	r0, #2000
 1433 021c D2D3     		bcc	.L85
 849:Src/main.c    ****         }
 850:Src/main.c    ****         arm_down(&htim3);
 1434              		.loc 1 850 0
 1435 021e 3848     		ldr	r0, .L101+4
 1436 0220 FFF7FEFF 		bl	arm_down
 1437              	.LVL185:
 851:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1438              		.loc 1 851 0
 1439 0224 0820     		movs	r0, #8
 1440 0226 0021     		movs	r1, #0
 1441 0228 FFF7FEFF 		bl	set_motor_speed
 1442              	.LVL186:
 852:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 43


 1443              		.loc 1 852 0
 1444 022c 0020     		movs	r0, #0
 1445 022e 0146     		mov	r1, r0
 1446 0230 FFF7FEFF 		bl	set_motor_speed
 1447              	.LVL187:
 1448              	.L80:
 1449              	.LBE3:
 853:Src/main.c    ****         /*
 854:Src/main.c    ****            timeee = HAL_GetTick();
 855:Src/main.c    ****            while (HAL_GetTick() - timeee < 7000)
 856:Src/main.c    ****            {
 857:Src/main.c    ****            if (TAPE_LEFT_STATE == FLAGGED && TAPE_RIGHT_STATE != FLAGGED)
 858:Src/main.c    ****            {
 859:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 860:Src/main.c    ****         // Tape detects object when high
 861:Src/main.c    ****         while (HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) == GPIO_PIN_SET);
 862:Src/main.c    ****         HAL_Delay(100);
 863:Src/main.c    ****         TAPE_LEFT_STATE = NOT_FLAGGED;
 864:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 865:Src/main.c    ****         }
 866:Src/main.c    ****         else if (TAPE_RIGHT_STATE == FLAGGED && TAPE_LEFT_STATE != FLAGGED)
 867:Src/main.c    ****         {
 868:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 869:Src/main.c    ****         while (HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) == GPIO_PIN_SET);
 870:Src/main.c    ****         HAL_Delay(100);
 871:Src/main.c    ****         TAPE_RIGHT_STATE = NOT_FLAGGED;
 872:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 873:Src/main.c    ****         }
 874:Src/main.c    ****         }
 875:Src/main.c    ****         */
 876:Src/main.c    ****     }
 877:Src/main.c    **** 
 878:Src/main.c    ****     if (ewok_cnt == 3)
 1450              		.loc 1 878 0
 1451 0234 334B     		ldr	r3, .L101+8
 1452 0236 1B68     		ldr	r3, [r3]
 1453 0238 032B     		cmp	r3, #3
 1454 023a 46D1     		bne	.L86
 1455              	.LBB6:
 879:Src/main.c    ****     {
 880:Src/main.c    ****         print("Third ewok captured\n", 0);
 1456              		.loc 1 880 0
 1457 023c 3A48     		ldr	r0, .L101+44
 1458 023e 0021     		movs	r1, #0
 1459 0240 FFF7FEFF 		bl	print
 1460              	.LVL188:
 881:Src/main.c    ****         turn_deg(170);
 1461              		.loc 1 881 0
 1462 0244 AA20     		movs	r0, #170
 1463 0246 FFF7FEFF 		bl	turn_deg
 1464              	.LVL189:
 882:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1465              		.loc 1 882 0
 1466 024a 314F     		ldr	r7, .L101+20
 1467 024c 0820     		movs	r0, #8
 1468 024e 3988     		ldrh	r1, [r7]
 1469 0250 FFF7FEFF 		bl	set_motor_speed
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 44


 1470              	.LVL190:
 883:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1471              		.loc 1 883 0
 1472 0254 DFF8B480 		ldr	r8, .L101+16
 1473 0258 0020     		movs	r0, #0
 1474 025a B8F80010 		ldrh	r1, [r8]
 1475 025e FFF7FEFF 		bl	set_motor_speed
 1476              	.LVL191:
 884:Src/main.c    ****         square_edge(enc_pid);
 1477              		.loc 1 884 0
 1478 0262 2846     		mov	r0, r5
 1479 0264 FFF7FEFF 		bl	square_edge
 1480              	.LVL192:
 885:Src/main.c    ****         open_claw(&htim3);
 1481              		.loc 1 885 0
 1482 0268 254C     		ldr	r4, .L101+4
 1483 026a 2046     		mov	r0, r4
 1484 026c FFF7FEFF 		bl	open_claw
 1485              	.LVL193:
 886:Src/main.c    ****         drive_straight_time(enc_pid, LEFT_SPEED+150, RIGHT_SPEED+150, 2000);
 1486              		.loc 1 886 0
 1487 0270 B8F80010 		ldrh	r1, [r8]
 1488 0274 3A88     		ldrh	r2, [r7]
 1489 0276 2846     		mov	r0, r5
 1490 0278 9631     		adds	r1, r1, #150
 1491 027a 9632     		adds	r2, r2, #150
 1492 027c 4FF4FA63 		mov	r3, #2000
 1493 0280 FFF7FEFF 		bl	drive_straight_time
 1494              	.LVL194:
 887:Src/main.c    ****         arm_down(&htim3);
 1495              		.loc 1 887 0
 1496 0284 2046     		mov	r0, r4
 1497 0286 FFF7FEFF 		bl	arm_down
 1498              	.LVL195:
 888:Src/main.c    ****         uint8_t deg = 0;
 1499              		.loc 1 888 0
 1500 028a 0027     		movs	r7, #0
 889:Src/main.c    ****         while(PI_INT_STATE != FLAGGED){
 1501              		.loc 1 889 0
 1502 028c 19E0     		b	.L87
 1503              	.LVL196:
 1504              	.L91:
 1505              	.LBB7:
 890:Src/main.c    ****             if(deg>6){turn_deg(20);}else{
 1506              		.loc 1 890 0
 1507 028e 062F     		cmp	r7, #6
 1508 0290 03D9     		bls	.L88
 1509              		.loc 1 890 0 is_stmt 0 discriminator 1
 1510 0292 1420     		movs	r0, #20
 1511 0294 FFF7FEFF 		bl	turn_deg
 1512              	.LVL197:
 1513 0298 03E0     		b	.L89
 1514              	.L88:
 891:Src/main.c    ****                 turn_deg(-20);
 1515              		.loc 1 891 0 is_stmt 1
 1516 029a 6FF01300 		mvn	r0, #19
 1517 029e FFF7FEFF 		bl	turn_deg
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 45


 1518              	.LVL198:
 1519              	.L89:
 892:Src/main.c    ****             }
 893:Src/main.c    ****             ++deg;
 1520              		.loc 1 893 0
 1521 02a2 0137     		adds	r7, r7, #1
 1522              	.LVL199:
 1523 02a4 FFB2     		uxtb	r7, r7
 1524              	.LVL200:
 894:Src/main.c    ****             uint32_t time = HAL_GetTick();
 1525              		.loc 1 894 0
 1526 02a6 FFF7FEFF 		bl	HAL_GetTick
 1527              	.LVL201:
 1528 02aa 0446     		mov	r4, r0
 1529              	.LVL202:
 1530              	.L90:
 895:Src/main.c    ****             while(HAL_GetTick()-time<3000 && PI_INT_STATE == NOT_FLAGGED);
 1531              		.loc 1 895 0 discriminator 2
 1532 02ac FFF7FEFF 		bl	HAL_GetTick
 1533              	.LVL203:
 1534 02b0 001B     		subs	r0, r0, r4
 1535 02b2 40F6B733 		movw	r3, #2999
 1536 02b6 9842     		cmp	r0, r3
 1537 02b8 03D8     		bhi	.L87
 1538              		.loc 1 895 0 is_stmt 0 discriminator 1
 1539 02ba 1C4B     		ldr	r3, .L101+48
 1540 02bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1541 02be 002B     		cmp	r3, #0
 1542 02c0 F4D0     		beq	.L90
 1543              	.LVL204:
 1544              	.L87:
 1545              	.LBE7:
 889:Src/main.c    ****             if(deg>6){turn_deg(20);}else{
 1546              		.loc 1 889 0 is_stmt 1
 1547 02c2 1A4B     		ldr	r3, .L101+48
 1548 02c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1549 02c6 012B     		cmp	r3, #1
 1550 02c8 E1D1     		bne	.L91
 1551              	.LVL205:
 1552              	.L86:
 1553              	.LBE6:
 896:Src/main.c    ****         }
 897:Src/main.c    ****     }
 898:Src/main.c    **** 
 899:Src/main.c    ****     if (ewok_cnt == 4)
 1554              		.loc 1 899 0
 1555 02ca 0E4B     		ldr	r3, .L101+8
 1556 02cc 1B68     		ldr	r3, [r3]
 1557 02ce 042B     		cmp	r3, #4
 1558 02d0 6DD1     		bne	.L92
 900:Src/main.c    ****     {
 901:Src/main.c    ****         print("Fourth ewok captured\n", 0);
 1559              		.loc 1 901 0
 1560 02d2 1748     		ldr	r0, .L101+52
 1561 02d4 0021     		movs	r1, #0
 1562 02d6 FFF7FEFF 		bl	print
 1563              	.LVL206:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 46


 902:Src/main.c    ****         turn_deg(150);
 1564              		.loc 1 902 0
 1565 02da 9620     		movs	r0, #150
 1566 02dc FFF7FEFF 		bl	turn_deg
 1567              	.LVL207:
 903:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1568              		.loc 1 903 0
 1569 02e0 0820     		movs	r0, #8
 1570 02e2 0B4B     		ldr	r3, .L101+20
 1571 02e4 1988     		ldrh	r1, [r3]
 1572 02e6 FFF7FEFF 		bl	set_motor_speed
 1573              	.LVL208:
 904:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1574              		.loc 1 904 0
 1575 02ea 0020     		movs	r0, #0
 1576 02ec 074B     		ldr	r3, .L101+16
 1577 02ee 1988     		ldrh	r1, [r3]
 1578 02f0 FFF7FEFF 		bl	set_motor_speed
 1579              	.LVL209:
 905:Src/main.c    ****         open_claw(&htim3);
 1580              		.loc 1 905 0
 1581 02f4 0248     		ldr	r0, .L101+4
 1582 02f6 FFF7FEFF 		bl	open_claw
 1583              	.LVL210:
 906:Src/main.c    ****         while (HAL_GetTick() - timeee < 8000)
 1584              		.loc 1 906 0
 1585 02fa 4FE0     		b	.L96
 1586              	.L102:
 1587              		.align	2
 1588              	.L101:
 1589 02fc DC000000 		.word	.LC11
 1590 0300 00000000 		.word	htim3
 1591 0304 00000000 		.word	.LANCHOR2
 1592 0308 F8000000 		.word	.LC12
 1593 030c 00000000 		.word	.LANCHOR1
 1594 0310 00000000 		.word	.LANCHOR0
 1595 0314 10010000 		.word	.LC13
 1596 0318 00000000 		.word	.LANCHOR3
 1597 031c 00040240 		.word	1073873920
 1598 0320 28010000 		.word	.LC14
 1599 0324 30010000 		.word	.LC15
 1600 0328 38010000 		.word	.LC16
 1601 032c 00000000 		.word	PI_INT_STATE
 1602 0330 50010000 		.word	.LC17
 1603              	.L98:
 907:Src/main.c    ****         {
 908:Src/main.c    ****             if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 1604              		.loc 1 908 0
 1605 0334 384B     		ldr	r3, .L103
 1606 0336 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1607 0338 012B     		cmp	r3, #1
 1608 033a 17D1     		bne	.L94
 1609              		.loc 1 908 0 is_stmt 0 discriminator 1
 1610 033c 374B     		ldr	r3, .L103+4
 1611 033e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1612 0340 A3B9     		cbnz	r3, .L94
 909:Src/main.c    ****             {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 47


 910:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 1613              		.loc 1 910 0 is_stmt 1
 1614 0342 0820     		movs	r0, #8
 1615 0344 0021     		movs	r1, #0
 1616 0346 FFF7FEFF 		bl	set_motor_speed
 1617              	.LVL211:
 1618              	.L95:
 911:Src/main.c    ****                 // Edge detected when LOW
 912:Src/main.c    ****                 while (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET);
 1619              		.loc 1 912 0 discriminator 1
 1620 034a 3548     		ldr	r0, .L103+8
 1621 034c 0421     		movs	r1, #4
 1622 034e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1623              	.LVL212:
 1624 0352 0028     		cmp	r0, #0
 1625 0354 F9D0     		beq	.L95
 913:Src/main.c    ****                 HAL_Delay(200);
 1626              		.loc 1 913 0
 1627 0356 C820     		movs	r0, #200
 1628 0358 FFF7FEFF 		bl	HAL_Delay
 1629              	.LVL213:
 914:Src/main.c    ****                 EDGE_LEFT_STATE = NOT_FLAGGED;
 1630              		.loc 1 914 0
 1631 035c 0022     		movs	r2, #0
 1632 035e 2E4B     		ldr	r3, .L103
 1633 0360 1A70     		strb	r2, [r3]
 915:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1634              		.loc 1 915 0
 1635 0362 0820     		movs	r0, #8
 1636 0364 2F4B     		ldr	r3, .L103+12
 1637 0366 1988     		ldrh	r1, [r3]
 1638 0368 FFF7FEFF 		bl	set_motor_speed
 1639              	.LVL214:
 1640              	.L94:
 916:Src/main.c    ****             }
 917:Src/main.c    ****             if (EDGE_RIGHT_STATE == FLAGGED)
 1641              		.loc 1 917 0
 1642 036c 2B4B     		ldr	r3, .L103+4
 1643 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1644 0370 012B     		cmp	r3, #1
 1645 0372 13D1     		bne	.L96
 918:Src/main.c    ****             {
 919:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 1646              		.loc 1 919 0
 1647 0374 0020     		movs	r0, #0
 1648 0376 0146     		mov	r1, r0
 1649 0378 FFF7FEFF 		bl	set_motor_speed
 1650              	.LVL215:
 1651              	.L97:
 920:Src/main.c    ****                 while (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET);
 1652              		.loc 1 920 0 discriminator 1
 1653 037c 2A48     		ldr	r0, .L103+16
 1654 037e 0821     		movs	r1, #8
 1655 0380 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1656              	.LVL216:
 1657 0384 0028     		cmp	r0, #0
 1658 0386 F9D0     		beq	.L97
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 48


 921:Src/main.c    ****                 HAL_Delay(200);
 1659              		.loc 1 921 0
 1660 0388 C820     		movs	r0, #200
 1661 038a FFF7FEFF 		bl	HAL_Delay
 1662              	.LVL217:
 922:Src/main.c    ****                 EDGE_RIGHT_STATE = NOT_FLAGGED;
 1663              		.loc 1 922 0
 1664 038e 0020     		movs	r0, #0
 1665 0390 224B     		ldr	r3, .L103+4
 1666 0392 1870     		strb	r0, [r3]
 923:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1667              		.loc 1 923 0
 1668 0394 254B     		ldr	r3, .L103+20
 1669 0396 1988     		ldrh	r1, [r3]
 1670 0398 FFF7FEFF 		bl	set_motor_speed
 1671              	.LVL218:
 1672              	.L96:
 906:Src/main.c    ****         {
 1673              		.loc 1 906 0
 1674 039c FFF7FEFF 		bl	HAL_GetTick
 1675              	.LVL219:
 1676 03a0 801B     		subs	r0, r0, r6
 1677 03a2 B0F5FA5F 		cmp	r0, #8000
 1678 03a6 C5D3     		bcc	.L98
 924:Src/main.c    ****             }
 925:Src/main.c    ****         }
 926:Src/main.c    ****         arm_down(&htim3);
 1679              		.loc 1 926 0
 1680 03a8 2148     		ldr	r0, .L103+24
 1681 03aa FFF7FEFF 		bl	arm_down
 1682              	.LVL220:
 1683              	.L92:
 927:Src/main.c    ****     }
 928:Src/main.c    **** 
 929:Src/main.c    ****     if (ewok_cnt == 5)
 1684              		.loc 1 929 0
 1685 03ae 214B     		ldr	r3, .L103+28
 1686 03b0 1B68     		ldr	r3, [r3]
 1687 03b2 052B     		cmp	r3, #5
 1688 03b4 26D1     		bne	.L99
 930:Src/main.c    ****     {
 931:Src/main.c    ****         print("Chewie captured\n", 0);
 1689              		.loc 1 931 0
 1690 03b6 2048     		ldr	r0, .L103+32
 1691 03b8 0021     		movs	r1, #0
 1692 03ba FFF7FEFF 		bl	print
 1693              	.LVL221:
 932:Src/main.c    ****         turn_deg(50);
 1694              		.loc 1 932 0
 1695 03be 3220     		movs	r0, #50
 1696 03c0 FFF7FEFF 		bl	turn_deg
 1697              	.LVL222:
 933:Src/main.c    ****         open_claw(&htim3);
 1698              		.loc 1 933 0
 1699 03c4 1A4C     		ldr	r4, .L103+24
 1700 03c6 2046     		mov	r0, r4
 1701 03c8 FFF7FEFF 		bl	open_claw
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 49


 1702              	.LVL223:
 934:Src/main.c    ****         HAL_Delay(750);
 1703              		.loc 1 934 0
 1704 03cc 40F2EE20 		movw	r0, #750
 1705 03d0 FFF7FEFF 		bl	HAL_Delay
 1706              	.LVL224:
 935:Src/main.c    ****         arm_down(&htim3);
 1707              		.loc 1 935 0
 1708 03d4 2046     		mov	r0, r4
 1709 03d6 FFF7FEFF 		bl	arm_down
 1710              	.LVL225:
 936:Src/main.c    ****         slow_actuate(&htim3, BASKET_CH, 10, 180);
 1711              		.loc 1 936 0
 1712 03da 2046     		mov	r0, r4
 1713 03dc 0821     		movs	r1, #8
 1714 03de 0A22     		movs	r2, #10
 1715 03e0 B423     		movs	r3, #180
 1716 03e2 FFF7FEFF 		bl	slow_actuate
 1717              	.LVL226:
 937:Src/main.c    ****         drive_straight_time(enc_pid, LEFT_SPEED, RIGHT_SPEED, 3000);
 1718              		.loc 1 937 0
 1719 03e6 2846     		mov	r0, r5
 1720 03e8 104B     		ldr	r3, .L103+20
 1721 03ea 1988     		ldrh	r1, [r3]
 1722 03ec 0D4B     		ldr	r3, .L103+12
 1723 03ee 1A88     		ldrh	r2, [r3]
 1724 03f0 40F6B833 		movw	r3, #3000
 1725 03f4 FFF7FEFF 		bl	drive_straight_time
 1726              	.LVL227:
 938:Src/main.c    ****         slow_actuate(&htim3, BASKET_CH, 180, 20);
 1727              		.loc 1 938 0
 1728 03f8 2046     		mov	r0, r4
 1729 03fa 0821     		movs	r1, #8
 1730 03fc B422     		movs	r2, #180
 1731 03fe 1423     		movs	r3, #20
 1732 0400 FFF7FEFF 		bl	slow_actuate
 1733              	.LVL228:
 1734              	.L99:
 939:Src/main.c    ****     }
 940:Src/main.c    ****     searches = 0;
 1735              		.loc 1 940 0
 1736 0404 0023     		movs	r3, #0
 1737 0406 0D4A     		ldr	r2, .L103+36
 1738 0408 1360     		str	r3, [r2]
 941:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 1739              		.loc 1 941 0
 1740 040a 0D4A     		ldr	r2, .L103+40
 1741 040c 1370     		strb	r3, [r2]
 942:Src/main.c    ****     return TRUE;
 943:Src/main.c    **** }
 1742              		.loc 1 943 0
 1743 040e 0120     		movs	r0, #1
 1744 0410 06B0     		add	sp, sp, #24
 1745              	.LCFI21:
 1746              		.cfi_def_cfa_offset 24
 1747              		@ sp needed
 1748 0412 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 50


 1749              	.LVL229:
 1750              	.L104:
 1751 0416 00BF     		.align	2
 1752              	.L103:
 1753 0418 00000000 		.word	EDGE_LEFT_STATE
 1754 041c 00000000 		.word	EDGE_RIGHT_STATE
 1755 0420 000C0240 		.word	1073875968
 1756 0424 00000000 		.word	.LANCHOR0
 1757 0428 00080240 		.word	1073874944
 1758 042c 00000000 		.word	.LANCHOR1
 1759 0430 00000000 		.word	htim3
 1760 0434 00000000 		.word	.LANCHOR2
 1761 0438 68010000 		.word	.LC18
 1762 043c 00000000 		.word	.LANCHOR3
 1763 0440 00000000 		.word	CLAW_INT_STATE
 1764              		.cfi_endproc
 1765              	.LFE137:
 1767              		.section	.text.drive_straight_time,"ax",%progbits
 1768              		.align	2
 1769              		.global	drive_straight_time
 1770              		.thumb
 1771              		.thumb_func
 1773              	drive_straight_time:
 1774              	.LFB127:
 452:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 1775              		.loc 1 452 0
 1776              		.cfi_startproc
 1777              		@ args = 0, pretend = 0, frame = 0
 1778              		@ frame_needed = 0, uses_anonymous_args = 0
 1779              	.LVL230:
 1780 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1781              	.LCFI22:
 1782              		.cfi_def_cfa_offset 24
 1783              		.cfi_offset 4, -24
 1784              		.cfi_offset 5, -20
 1785              		.cfi_offset 6, -16
 1786              		.cfi_offset 7, -12
 1787              		.cfi_offset 8, -8
 1788              		.cfi_offset 14, -4
 1789 0004 0646     		mov	r6, r0
 1790 0006 8846     		mov	r8, r1
 1791 0008 1746     		mov	r7, r2
 1792 000a 1D46     		mov	r5, r3
 453:Src/main.c    ****     char msg[50] = "";
 1793              		.loc 1 453 0
 1794 000c FFF7FEFF 		bl	HAL_GetTick
 1795              	.LVL231:
 1796 0010 0446     		mov	r4, r0
 1797              	.LVL232:
 456:Src/main.c    ****     {
 1798              		.loc 1 456 0
 1799 0012 19E0     		b	.L106
 1800              	.LVL233:
 1801              	.L110:
 458:Src/main.c    ****         {
 1802              		.loc 1 458 0
 1803 0014 1448     		ldr	r0, .L112
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 51


 1804 0016 1021     		movs	r1, #16
 1805 0018 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1806              	.LVL234:
 1807 001c 0128     		cmp	r0, #1
 1808 001e 08D1     		bne	.L107
 460:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 1809              		.loc 1 460 0
 1810 0020 1248     		ldr	r0, .L112+4
 1811 0022 0021     		movs	r1, #0
 1812 0024 FFF7FEFF 		bl	print
 1813              	.LVL235:
 461:Src/main.c    ****         }
 1814              		.loc 1 461 0
 1815 0028 3046     		mov	r0, r6
 1816 002a FFF7FEFF 		bl	debounce_and_grab
 1817              	.LVL236:
 1818 002e 58B1     		cbz	r0, .L106
 1819 0030 0FE0     		b	.L108
 1820              	.L107:
 480:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 1821              		.loc 1 480 0
 1822 0032 0020     		movs	r0, #0
 1823 0034 4146     		mov	r1, r8
 1824 0036 FFF7FEFF 		bl	set_motor_speed
 1825              	.LVL237:
 481:Src/main.c    ****             drive_straight(enc_pid);
 1826              		.loc 1 481 0
 1827 003a 0820     		movs	r0, #8
 1828 003c 3946     		mov	r1, r7
 1829 003e FFF7FEFF 		bl	set_motor_speed
 1830              	.LVL238:
 482:Src/main.c    **** 
 1831              		.loc 1 482 0
 1832 0042 3046     		mov	r0, r6
 1833 0044 FFF7FEFF 		bl	drive_straight
 1834              	.LVL239:
 1835              	.L106:
 456:Src/main.c    ****     {
 1836              		.loc 1 456 0
 1837 0048 FFF7FEFF 		bl	HAL_GetTick
 1838              	.LVL240:
 1839 004c 001B     		subs	r0, r0, r4
 1840 004e A842     		cmp	r0, r5
 1841 0050 E0D3     		bcc	.L110
 1842              	.L108:
 486:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1843              		.loc 1 486 0
 1844 0052 0020     		movs	r0, #0
 1845 0054 0146     		mov	r1, r0
 1846 0056 FFF7FEFF 		bl	set_motor_speed
 1847              	.LVL241:
 487:Src/main.c    **** }
 1848              		.loc 1 487 0
 1849 005a 0820     		movs	r0, #8
 1850 005c 0021     		movs	r1, #0
 1851 005e FFF7FEFF 		bl	set_motor_speed
 1852              	.LVL242:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 52


 1853 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1854              	.LVL243:
 1855              	.L113:
 1856 0066 00BF     		.align	2
 1857              	.L112:
 1858 0068 00040240 		.word	1073873920
 1859 006c 7C010000 		.word	.LC19
 1860              		.cfi_endproc
 1861              	.LFE127:
 1863              		.section	.text.test_PWM_htim1,"ax",%progbits
 1864              		.align	2
 1865              		.global	test_PWM_htim1
 1866              		.thumb
 1867              		.thumb_func
 1869              	test_PWM_htim1:
 1870              	.LFB138:
 944:Src/main.c    **** 
 945:Src/main.c    **** // ******
 946:Src/main.c    **** // TESTS
 947:Src/main.c    **** // ******
 948:Src/main.c    **** 
 949:Src/main.c    **** /*
 950:Src/main.c    ****  * Instructions:
 951:Src/main.c    ****  *      Run test_All() before the main while loop
 952:Src/main.c    ****  *      - Put a pull up resistor on htim3 PWM waves, measure voltage on pin
 953:Src/main.c    ****  *      - Measure voltage on pin of htim1
 954:Src/main.c    ****  *      - Give ADC pins values and read off of screen
 955:Src/main.c    ****  */
 956:Src/main.c    **** 
 957:Src/main.c    **** /*
 958:Src/main.c    ****  * Test PWM
 959:Src/main.c    ****  * Output: htim1 channel 1 through 4, PWM wave. Confirm these
 960:Src/main.c    ****  *         PWM waves via an oscilliscope.
 961:Src/main.c    ****  */
 962:Src/main.c    **** void test_PWM_htim1()
 963:Src/main.c    **** {
 1871              		.loc 1 963 0
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 0
 1874              		@ frame_needed = 0, uses_anonymous_args = 0
 1875 0000 10B5     		push	{r4, lr}
 1876              	.LCFI23:
 1877              		.cfi_def_cfa_offset 8
 1878              		.cfi_offset 4, -8
 1879              		.cfi_offset 14, -4
 964:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1880              		.loc 1 964 0
 1881 0002 0C4C     		ldr	r4, .L118
 1882 0004 2046     		mov	r0, r4
 1883 0006 0021     		movs	r1, #0
 1884 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1885              	.LVL244:
 965:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 966:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1886              		.loc 1 966 0
 1887 000c 2046     		mov	r0, r4
 1888 000e 0821     		movs	r1, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 53


 1889 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1890              	.LVL245:
 967:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 968:Src/main.c    ****     int s = 0;
 1891              		.loc 1 968 0
 1892 0014 0024     		movs	r4, #0
 969:Src/main.c    ****     while (s < 1000)
 1893              		.loc 1 969 0
 1894 0016 08E0     		b	.L115
 1895              	.LVL246:
 1896              	.L116:
 970:Src/main.c    ****     {
 971:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, s);
 1897              		.loc 1 971 0
 1898 0018 064B     		ldr	r3, .L118
 1899 001a 1B68     		ldr	r3, [r3]
 1900 001c 5C63     		str	r4, [r3, #52]
 972:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 973:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, s);
 1901              		.loc 1 973 0
 1902 001e DC63     		str	r4, [r3, #60]
 974:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 975:Src/main.c    ****         s += 100;
 1903              		.loc 1 975 0
 1904 0020 6434     		adds	r4, r4, #100
 1905              	.LVL247:
 976:Src/main.c    ****         HAL_Delay(1000);
 1906              		.loc 1 976 0
 1907 0022 4FF47A70 		mov	r0, #1000
 1908 0026 FFF7FEFF 		bl	HAL_Delay
 1909              	.LVL248:
 1910              	.L115:
 969:Src/main.c    ****     {
 1911              		.loc 1 969 0
 1912 002a B4F57A7F 		cmp	r4, #1000
 1913 002e F3DB     		blt	.L116
 977:Src/main.c    ****     }
 978:Src/main.c    **** }
 1914              		.loc 1 978 0
 1915 0030 10BD     		pop	{r4, pc}
 1916              	.LVL249:
 1917              	.L119:
 1918 0032 00BF     		.align	2
 1919              	.L118:
 1920 0034 00000000 		.word	htim1
 1921              		.cfi_endproc
 1922              	.LFE138:
 1924              		.section	.text.test_PWM_htim3,"ax",%progbits
 1925              		.align	2
 1926              		.global	test_PWM_htim3
 1927              		.thumb
 1928              		.thumb_func
 1930              	test_PWM_htim3:
 1931              	.LFB139:
 979:Src/main.c    **** 
 980:Src/main.c    **** /*
 981:Src/main.c    ****  * Test PWM
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 54


 982:Src/main.c    ****  * Output: htim3 channel 1 through 3, PWM wave. Confirm these
 983:Src/main.c    ****  *         PWM waves via an oscilliscope.
 984:Src/main.c    ****  */
 985:Src/main.c    **** void test_PWM_htim3()
 986:Src/main.c    **** {
 1932              		.loc 1 986 0
 1933              		.cfi_startproc
 1934              		@ args = 0, pretend = 0, frame = 0
 1935              		@ frame_needed = 0, uses_anonymous_args = 0
 1936 0000 10B5     		push	{r4, lr}
 1937              	.LCFI24:
 1938              		.cfi_def_cfa_offset 8
 1939              		.cfi_offset 4, -8
 1940              		.cfi_offset 14, -4
 987:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1941              		.loc 1 987 0
 1942 0002 0F4C     		ldr	r4, .L124
 1943 0004 2046     		mov	r0, r4
 1944 0006 0021     		movs	r1, #0
 1945 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1946              	.LVL250:
 988:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1947              		.loc 1 988 0
 1948 000c 2046     		mov	r0, r4
 1949 000e 0421     		movs	r1, #4
 1950 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1951              	.LVL251:
 989:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1952              		.loc 1 989 0
 1953 0014 2046     		mov	r0, r4
 1954 0016 0821     		movs	r1, #8
 1955 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1956              	.LVL252:
 990:Src/main.c    **** 
 991:Src/main.c    ****     int s = 500;
 1957              		.loc 1 991 0
 1958 001c 4FF4FA74 		mov	r4, #500
 992:Src/main.c    ****     while (s < 2400)
 1959              		.loc 1 992 0
 1960 0020 09E0     		b	.L121
 1961              	.LVL253:
 1962              	.L122:
 993:Src/main.c    ****     {
 994:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s);
 1963              		.loc 1 994 0
 1964 0022 074B     		ldr	r3, .L124
 1965 0024 1B68     		ldr	r3, [r3]
 1966 0026 5C63     		str	r4, [r3, #52]
 995:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s);
 1967              		.loc 1 995 0
 1968 0028 9C63     		str	r4, [r3, #56]
 996:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, s);
 1969              		.loc 1 996 0
 1970 002a DC63     		str	r4, [r3, #60]
 997:Src/main.c    ****         s += 100;
 1971              		.loc 1 997 0
 1972 002c 6434     		adds	r4, r4, #100
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 55


 1973              	.LVL254:
 998:Src/main.c    ****         HAL_Delay(500);
 1974              		.loc 1 998 0
 1975 002e 4FF4FA70 		mov	r0, #500
 1976 0032 FFF7FEFF 		bl	HAL_Delay
 1977              	.LVL255:
 1978              	.L121:
 992:Src/main.c    ****     {
 1979              		.loc 1 992 0
 1980 0036 B4F5166F 		cmp	r4, #2400
 1981 003a F2DB     		blt	.L122
 999:Src/main.c    ****     }
1000:Src/main.c    **** }
 1982              		.loc 1 1000 0
 1983 003c 10BD     		pop	{r4, pc}
 1984              	.LVL256:
 1985              	.L125:
 1986 003e 00BF     		.align	2
 1987              	.L124:
 1988 0040 00000000 		.word	htim3
 1989              		.cfi_endproc
 1990              	.LFE139:
 1992              		.section	.text.test_ADC,"ax",%progbits
 1993              		.align	2
 1994              		.global	test_ADC
 1995              		.thumb
 1996              		.thumb_func
 1998              	test_ADC:
 1999              	.LFB140:
1001:Src/main.c    **** 
1002:Src/main.c    **** void test_ADC()
1003:Src/main.c    **** {
 2000              		.loc 1 1003 0
 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 24
 2003              		@ frame_needed = 0, uses_anonymous_args = 0
 2004 0000 10B5     		push	{r4, lr}
 2005              	.LCFI25:
 2006              		.cfi_def_cfa_offset 8
 2007              		.cfi_offset 4, -8
 2008              		.cfi_offset 14, -4
 2009 0002 86B0     		sub	sp, sp, #24
 2010              	.LCFI26:
 2011              		.cfi_def_cfa_offset 32
1004:Src/main.c    ****     char msg[18] = "";
 2012              		.loc 1 1004 0
 2013 0004 0023     		movs	r3, #0
 2014 0006 0193     		str	r3, [sp, #4]
 2015 0008 0293     		str	r3, [sp, #8]
 2016 000a 0393     		str	r3, [sp, #12]
 2017 000c 0493     		str	r3, [sp, #16]
 2018 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
1005:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 2019              		.loc 1 1005 0
 2020 0012 0F48     		ldr	r0, .L129
 2021 0014 0F49     		ldr	r1, .L129+4
 2022 0016 4FF40062 		mov	r2, #2048
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 56


 2023 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2024              	.LVL257:
 2025              	.L127:
 2026              	.LBB8:
1006:Src/main.c    **** 
1007:Src/main.c    ****     while (1)
1008:Src/main.c    ****     {
1009:Src/main.c    ****         int ch_5 = adc_values[0];
 2027              		.loc 1 1009 0 discriminator 1
 2028 001e 0E4B     		ldr	r3, .L129+8
 2029              	.LVL258:
1010:Src/main.c    ****         int ch_4 = adc_values[1];
 2030              		.loc 1 1010 0 discriminator 1
 2031 0020 5C68     		ldr	r4, [r3, #4]
 2032              	.LVL259:
1011:Src/main.c    **** 
1012:Src/main.c    ****         sprintf(msg, "ch_5: %d\n", ch_5);
 2033              		.loc 1 1012 0 discriminator 1
 2034 0022 01A8     		add	r0, sp, #4
 2035 0024 0D49     		ldr	r1, .L129+12
 2036 0026 1A68     		ldr	r2, [r3]
 2037 0028 FFF7FEFF 		bl	sprintf
 2038              	.LVL260:
1013:Src/main.c    ****         print(msg, 0);
 2039              		.loc 1 1013 0 discriminator 1
 2040 002c 01A8     		add	r0, sp, #4
 2041 002e 0021     		movs	r1, #0
 2042 0030 FFF7FEFF 		bl	print
 2043              	.LVL261:
1014:Src/main.c    **** 
1015:Src/main.c    ****         sprintf(msg, "ch_4: %d\n", ch_4);
 2044              		.loc 1 1015 0 discriminator 1
 2045 0034 01A8     		add	r0, sp, #4
 2046 0036 0A49     		ldr	r1, .L129+16
 2047 0038 2246     		mov	r2, r4
 2048 003a FFF7FEFF 		bl	sprintf
 2049              	.LVL262:
1016:Src/main.c    ****         print(msg, 2);
 2050              		.loc 1 1016 0 discriminator 1
 2051 003e 01A8     		add	r0, sp, #4
 2052 0040 0221     		movs	r1, #2
 2053 0042 FFF7FEFF 		bl	print
 2054              	.LVL263:
1017:Src/main.c    **** 
1018:Src/main.c    ****         HAL_Delay(100);
 2055              		.loc 1 1018 0 discriminator 1
 2056 0046 6420     		movs	r0, #100
 2057 0048 FFF7FEFF 		bl	HAL_Delay
 2058              	.LVL264:
 2059              	.LBE8:
1019:Src/main.c    ****     }
 2060              		.loc 1 1019 0 discriminator 1
 2061 004c E7E7     		b	.L127
 2062              	.L130:
 2063 004e 00BF     		.align	2
 2064              	.L129:
 2065 0050 00000000 		.word	hadc1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 57


 2066 0054 00000000 		.word	dma_buffer
 2067 0058 00000000 		.word	adc_values
 2068 005c 8C010000 		.word	.LC20
 2069 0060 98010000 		.word	.LC21
 2070              		.cfi_endproc
 2071              	.LFE140:
 2073              		.section	.text.test_All,"ax",%progbits
 2074              		.align	2
 2075              		.global	test_All
 2076              		.thumb
 2077              		.thumb_func
 2079              	test_All:
 2080              	.LFB141:
1020:Src/main.c    **** }
1021:Src/main.c    **** 
1022:Src/main.c    **** /**
1023:Src/main.c    ****  * Test all PWM and ADC - Read PWM waves, input ADC voltages 
1024:Src/main.c    ****  * and read values on OLED
1025:Src/main.c    ****  *      htim1 -> CH1, CH2, CH3, CH4
1026:Src/main.c    ****  *      htim3 -> CH1, CH2, CH3
1027:Src/main.c    ****  *      ADC   -> CH5, CH4
1028:Src/main.c    ****  */
1029:Src/main.c    **** void test_All()
1030:Src/main.c    **** {
 2081              		.loc 1 1030 0
 2082              		.cfi_startproc
 2083              		@ Volatile: function does not return.
 2084              		@ args = 0, pretend = 0, frame = 0
 2085              		@ frame_needed = 0, uses_anonymous_args = 0
 2086 0000 08B5     		push	{r3, lr}
 2087              	.LCFI27:
 2088              		.cfi_def_cfa_offset 8
 2089              		.cfi_offset 3, -8
 2090              		.cfi_offset 14, -4
1031:Src/main.c    ****     test_PWM_htim1();
 2091              		.loc 1 1031 0
 2092 0002 FFF7FEFF 		bl	test_PWM_htim1
 2093              	.LVL265:
1032:Src/main.c    ****     test_PWM_htim3();
 2094              		.loc 1 1032 0
 2095 0006 FFF7FEFF 		bl	test_PWM_htim3
 2096              	.LVL266:
1033:Src/main.c    ****     test_ADC();
 2097              		.loc 1 1033 0
 2098 000a FFF7FEFF 		bl	test_ADC
 2099              	.LVL267:
 2100              		.cfi_endproc
 2101              	.LFE141:
 2103 000e 00BF     		.section	.text._Error_Handler,"ax",%progbits
 2104              		.align	2
 2105              		.global	_Error_Handler
 2106              		.thumb
 2107              		.thumb_func
 2109              	_Error_Handler:
 2110              	.LFB142:
1034:Src/main.c    **** }
1035:Src/main.c    **** // ******
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 58


1036:Src/main.c    **** // END TESTS
1037:Src/main.c    **** // ******
1038:Src/main.c    **** 
1039:Src/main.c    **** /* USER CODE END 4 */
1040:Src/main.c    **** 
1041:Src/main.c    **** /**
1042:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
1043:Src/main.c    ****  * @param  file: The file name as string.
1044:Src/main.c    ****  * @param  line: The line in file as a number.
1045:Src/main.c    ****  * @retval None
1046:Src/main.c    ****  */
1047:Src/main.c    **** void _Error_Handler(char *file, int line)
1048:Src/main.c    **** {
 2111              		.loc 1 1048 0
 2112              		.cfi_startproc
 2113              		@ Volatile: function does not return.
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
 2116              		@ link register save eliminated.
 2117              	.LVL268:
 2118              	.L134:
1049:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
1050:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
1051:Src/main.c    ****     while (1)
1052:Src/main.c    ****     {
1053:Src/main.c    ****     }
 2119              		.loc 1 1053 0 discriminator 1
 2120 0000 FEE7     		b	.L134
 2121              		.cfi_endproc
 2122              	.LFE142:
 2124 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 2125              		.align	2
 2126              		.global	SystemClock_Config
 2127              		.thumb
 2128              		.thumb_func
 2130              	SystemClock_Config:
 2131              	.LFB125:
 372:Src/main.c    **** 
 2132              		.loc 1 372 0
 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 80
 2135              		@ frame_needed = 0, uses_anonymous_args = 0
 2136 0000 00B5     		push	{lr}
 2137              	.LCFI28:
 2138              		.cfi_def_cfa_offset 4
 2139              		.cfi_offset 14, -4
 2140 0002 95B0     		sub	sp, sp, #84
 2141              	.LCFI29:
 2142              		.cfi_def_cfa_offset 88
 2143              	.LBB9:
 379:Src/main.c    **** 
 2144              		.loc 1 379 0
 2145 0004 0022     		movs	r2, #0
 2146 0006 0192     		str	r2, [sp, #4]
 2147 0008 2A4B     		ldr	r3, .L139
 2148 000a 196C     		ldr	r1, [r3, #64]
 2149 000c 41F08051 		orr	r1, r1, #268435456
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 59


 2150 0010 1964     		str	r1, [r3, #64]
 2151 0012 1B6C     		ldr	r3, [r3, #64]
 2152 0014 03F08053 		and	r3, r3, #268435456
 2153 0018 0193     		str	r3, [sp, #4]
 2154 001a 019B     		ldr	r3, [sp, #4]
 2155              	.LBE9:
 2156              	.LBB10:
 381:Src/main.c    **** 
 2157              		.loc 1 381 0
 2158 001c 0292     		str	r2, [sp, #8]
 2159 001e 2649     		ldr	r1, .L139+4
 2160 0020 0B68     		ldr	r3, [r1]
 2161 0022 23F44043 		bic	r3, r3, #49152
 2162 0026 43F40043 		orr	r3, r3, #32768
 2163 002a 0B60     		str	r3, [r1]
 2164 002c 0B68     		ldr	r3, [r1]
 2165 002e 03F44043 		and	r3, r3, #49152
 2166 0032 0293     		str	r3, [sp, #8]
 2167 0034 029B     		ldr	r3, [sp, #8]
 2168              	.LBE10:
 385:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2169              		.loc 1 385 0
 2170 0036 0223     		movs	r3, #2
 2171 0038 0893     		str	r3, [sp, #32]
 386:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 2172              		.loc 1 386 0
 2173 003a 0121     		movs	r1, #1
 2174 003c 0B91     		str	r1, [sp, #44]
 387:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2175              		.loc 1 387 0
 2176 003e 1021     		movs	r1, #16
 2177 0040 0C91     		str	r1, [sp, #48]
 388:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2178              		.loc 1 388 0
 2179 0042 0E93     		str	r3, [sp, #56]
 389:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 2180              		.loc 1 389 0
 2181 0044 0F92     		str	r2, [sp, #60]
 390:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 2182              		.loc 1 390 0
 2183 0046 0822     		movs	r2, #8
 2184 0048 1092     		str	r2, [sp, #64]
 391:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2185              		.loc 1 391 0
 2186 004a 4822     		movs	r2, #72
 2187 004c 1192     		str	r2, [sp, #68]
 392:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 2188              		.loc 1 392 0
 2189 004e 1293     		str	r3, [sp, #72]
 393:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2190              		.loc 1 393 0
 2191 0050 0423     		movs	r3, #4
 2192 0052 1393     		str	r3, [sp, #76]
 394:Src/main.c    ****     {
 2193              		.loc 1 394 0
 2194 0054 08A8     		add	r0, sp, #32
 2195 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 60


 2196              	.LVL269:
 2197 005a 20B1     		cbz	r0, .L136
 396:Src/main.c    ****     }
 2198              		.loc 1 396 0
 2199 005c 1748     		ldr	r0, .L139+8
 2200 005e 4FF4C671 		mov	r1, #396
 2201 0062 FFF7FEFF 		bl	_Error_Handler
 2202              	.LVL270:
 2203              	.L136:
 401:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2204              		.loc 1 401 0
 2205 0066 0F23     		movs	r3, #15
 2206 0068 0393     		str	r3, [sp, #12]
 403:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2207              		.loc 1 403 0
 2208 006a 0221     		movs	r1, #2
 2209 006c 0491     		str	r1, [sp, #16]
 404:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2210              		.loc 1 404 0
 2211 006e 0023     		movs	r3, #0
 2212 0070 0593     		str	r3, [sp, #20]
 405:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2213              		.loc 1 405 0
 2214 0072 4FF48052 		mov	r2, #4096
 2215 0076 0692     		str	r2, [sp, #24]
 406:Src/main.c    **** 
 2216              		.loc 1 406 0
 2217 0078 0793     		str	r3, [sp, #28]
 408:Src/main.c    ****     {
 2218              		.loc 1 408 0
 2219 007a 03A8     		add	r0, sp, #12
 2220 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2221              	.LVL271:
 2222 0080 20B1     		cbz	r0, .L137
 410:Src/main.c    ****     }
 2223              		.loc 1 410 0
 2224 0082 0E48     		ldr	r0, .L139+8
 2225 0084 4FF4CD71 		mov	r1, #410
 2226 0088 FFF7FEFF 		bl	_Error_Handler
 2227              	.LVL272:
 2228              	.L137:
 415:Src/main.c    **** 
 2229              		.loc 1 415 0
 2230 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2231              	.LVL273:
 2232 0090 0B4B     		ldr	r3, .L139+12
 2233 0092 A3FB0030 		umull	r3, r0, r3, r0
 2234 0096 8009     		lsrs	r0, r0, #6
 2235 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 2236              	.LVL274:
 419:Src/main.c    **** 
 2237              		.loc 1 419 0
 2238 009c 0420     		movs	r0, #4
 2239 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 2240              	.LVL275:
 422:Src/main.c    **** }
 2241              		.loc 1 422 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 61


 2242 00a2 4FF0FF30 		mov	r0, #-1
 2243 00a6 0021     		movs	r1, #0
 2244 00a8 0A46     		mov	r2, r1
 2245 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 2246              	.LVL276:
 423:Src/main.c    **** 
 2247              		.loc 1 423 0
 2248 00ae 15B0     		add	sp, sp, #84
 2249              	.LCFI30:
 2250              		.cfi_def_cfa_offset 4
 2251              		@ sp needed
 2252 00b0 5DF804FB 		ldr	pc, [sp], #4
 2253              	.L140:
 2254              		.align	2
 2255              	.L139:
 2256 00b4 00380240 		.word	1073887232
 2257 00b8 00700040 		.word	1073770496
 2258 00bc A4010000 		.word	.LC22
 2259 00c0 D34D6210 		.word	274877907
 2260              		.cfi_endproc
 2261              	.LFE125:
 2263              		.section	.text.main,"ax",%progbits
 2264              		.align	2
 2265              		.global	main
 2266              		.thumb
 2267              		.thumb_func
 2269              	main:
 2270              	.LFB124:
 116:Src/main.c    ****     /* USER CODE BEGIN 1 */
 2271              		.loc 1 116 0
 2272              		.cfi_startproc
 2273              		@ args = 0, pretend = 0, frame = 24
 2274              		@ frame_needed = 0, uses_anonymous_args = 0
 2275 0000 70B5     		push	{r4, r5, r6, lr}
 2276              	.LCFI31:
 2277              		.cfi_def_cfa_offset 16
 2278              		.cfi_offset 4, -16
 2279              		.cfi_offset 5, -12
 2280              		.cfi_offset 6, -8
 2281              		.cfi_offset 14, -4
 2282 0002 88B0     		sub	sp, sp, #32
 2283              	.LCFI32:
 2284              		.cfi_def_cfa_offset 48
 124:Src/main.c    **** 
 2285              		.loc 1 124 0
 2286 0004 FFF7FEFF 		bl	HAL_Init
 2287              	.LVL277:
 131:Src/main.c    **** 
 2288              		.loc 1 131 0
 2289 0008 FFF7FEFF 		bl	SystemClock_Config
 2290              	.LVL278:
 138:Src/main.c    ****     MX_DMA_Init();
 2291              		.loc 1 138 0
 2292 000c FFF7FEFF 		bl	MX_GPIO_Init
 2293              	.LVL279:
 139:Src/main.c    ****     MX_TIM3_Init();
 2294              		.loc 1 139 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 62


 2295 0010 FFF7FEFF 		bl	MX_DMA_Init
 2296              	.LVL280:
 140:Src/main.c    ****     MX_TIM1_Init();
 2297              		.loc 1 140 0
 2298 0014 FFF7FEFF 		bl	MX_TIM3_Init
 2299              	.LVL281:
 141:Src/main.c    ****     MX_TIM2_Init();
 2300              		.loc 1 141 0
 2301 0018 FFF7FEFF 		bl	MX_TIM1_Init
 2302              	.LVL282:
 142:Src/main.c    ****     MX_ADC1_Init();
 2303              		.loc 1 142 0
 2304 001c FFF7FEFF 		bl	MX_TIM2_Init
 2305              	.LVL283:
 143:Src/main.c    ****     MX_TIM4_Init();
 2306              		.loc 1 143 0
 2307 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2308              	.LVL284:
 144:Src/main.c    ****     MX_TIM9_Init();
 2309              		.loc 1 144 0
 2310 0024 FFF7FEFF 		bl	MX_TIM4_Init
 2311              	.LVL285:
 145:Src/main.c    ****     MX_TIM5_Init();
 2312              		.loc 1 145 0
 2313 0028 FFF7FEFF 		bl	MX_TIM9_Init
 2314              	.LVL286:
 146:Src/main.c    ****     MX_I2C1_Init();
 2315              		.loc 1 146 0
 2316 002c FFF7FEFF 		bl	MX_TIM5_Init
 2317              	.LVL287:
 147:Src/main.c    ****     MX_USART6_UART_Init();
 2318              		.loc 1 147 0
 2319 0030 FFF7FEFF 		bl	MX_I2C1_Init
 2320              	.LVL288:
 148:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2321              		.loc 1 148 0
 2322 0034 FFF7FEFF 		bl	MX_USART6_UART_Init
 2323              	.LVL289:
 165:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 2324              		.loc 1 165 0
 2325 0038 8148     		ldr	r0, .L159
 2326 003a 1821     		movs	r1, #24
 2327 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2328              	.LVL290:
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 2329              		.loc 1 166 0
 2330 0040 8048     		ldr	r0, .L159+4
 2331 0042 1821     		movs	r1, #24
 2332 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2333              	.LVL291:
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 2334              		.loc 1 167 0
 2335 0048 7F4C     		ldr	r4, .L159+8
 2336 004a 2046     		mov	r0, r4
 2337 004c 0021     		movs	r1, #0
 2338 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2339              	.LVL292:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 63


 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 2340              		.loc 1 168 0
 2341 0052 2046     		mov	r0, r4
 2342 0054 0421     		movs	r1, #4
 2343 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2344              	.LVL293:
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 2345              		.loc 1 169 0
 2346 005a 2046     		mov	r0, r4
 2347 005c 0821     		movs	r1, #8
 2348 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2349              	.LVL294:
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2350              		.loc 1 170 0
 2351 0062 2046     		mov	r0, r4
 2352 0064 0C21     		movs	r1, #12
 2353 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2354              	.LVL295:
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 2355              		.loc 1 171 0
 2356 006a 784C     		ldr	r4, .L159+12
 2357 006c 2046     		mov	r0, r4
 2358 006e 0021     		movs	r1, #0
 2359 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2360              	.LVL296:
 172:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 2361              		.loc 1 172 0
 2362 0074 2046     		mov	r0, r4
 2363 0076 0421     		movs	r1, #4
 2364 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2365              	.LVL297:
 173:Src/main.c    **** 
 2366              		.loc 1 173 0
 2367 007c 2046     		mov	r0, r4
 2368 007e 0821     		movs	r1, #8
 2369 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2370              	.LVL298:
 176:Src/main.c    ****     print("Starting\n", 0);
 2371              		.loc 1 176 0
 2372 0084 FFF7FEFF 		bl	ssd1306_Init
 2373              	.LVL299:
 177:Src/main.c    ****     claw_init(&htim3);
 2374              		.loc 1 177 0
 2375 0088 7148     		ldr	r0, .L159+16
 2376 008a 0021     		movs	r1, #0
 2377 008c FFF7FEFF 		bl	print
 2378              	.LVL300:
 178:Src/main.c    ****     // basket_init(&htim3);
 2379              		.loc 1 178 0
 2380 0090 2046     		mov	r0, r4
 2381 0092 FFF7FEFF 		bl	claw_init
 2382              	.LVL301:
 181:Src/main.c    **** 
 2383              		.loc 1 181 0
 2384 0096 0221     		movs	r1, #2
 2385 0098 0091     		str	r1, [sp]
 2386 009a 0123     		movs	r3, #1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 64


 2387 009c 0193     		str	r3, [sp, #4]
 2388 009e 02A8     		add	r0, sp, #8
 2389 00a0 0022     		movs	r2, #0
 2390 00a2 1346     		mov	r3, r2
 2391 00a4 FFF7FEFF 		bl	pid_Init
 2392              	.LVL302:
 183:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 2393              		.loc 1 183 0
 2394 00a8 0024     		movs	r4, #0
 2395 00aa 6A4B     		ldr	r3, .L159+20
 2396 00ac 1C70     		strb	r4, [r3]
 184:Src/main.c    **** 
 2397              		.loc 1 184 0
 2398 00ae 6A4B     		ldr	r3, .L159+24
 2399 00b0 1C70     		strb	r4, [r3]
 186:Src/main.c    **** 
 2400              		.loc 1 186 0
 2401 00b2 6A4D     		ldr	r5, .L159+28
 2402 00b4 2988     		ldrh	r1, [r5]
 2403 00b6 6A4E     		ldr	r6, .L159+32
 2404 00b8 02A8     		add	r0, sp, #8
 2405 00ba 5031     		adds	r1, r1, #80
 2406 00bc 3288     		ldrh	r2, [r6]
 2407 00be 4FF4FA63 		mov	r3, #2000
 2408 00c2 FFF7FEFF 		bl	drive_straight_time
 2409              	.LVL303:
 189:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 2410              		.loc 1 189 0
 2411 00c6 0620     		movs	r0, #6
 2412 00c8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2413              	.LVL304:
 190:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 2414              		.loc 1 190 0
 2415 00cc 0A20     		movs	r0, #10
 2416 00ce FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2417              	.LVL305:
 191:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 2418              		.loc 1 191 0
 2419 00d2 644B     		ldr	r3, .L159+36
 2420 00d4 1C70     		strb	r4, [r3]
 192:Src/main.c    **** 
 2421              		.loc 1 192 0
 2422 00d6 644B     		ldr	r3, .L159+40
 2423 00d8 1C70     		strb	r4, [r3]
 194:Src/main.c    ****     print("ewok\n", 0);
 2424              		.loc 1 194 0
 2425 00da 3288     		ldrh	r2, [r6]
 2426 00dc 02A8     		add	r0, sp, #8
 2427 00de 2988     		ldrh	r1, [r5]
 2428 00e0 0A32     		adds	r2, r2, #10
 2429 00e2 41F28833 		movw	r3, #5000
 2430 00e6 FFF7FEFF 		bl	drive_straight_time
 2431              	.LVL306:
 195:Src/main.c    **** 
 2432              		.loc 1 195 0
 2433 00ea 6048     		ldr	r0, .L159+44
 2434 00ec 2146     		mov	r1, r4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 65


 2435 00ee FFF7FEFF 		bl	print
 2436              	.LVL307:
 2437              	.L142:
 207:Src/main.c    ****         {
 2438              		.loc 1 207 0
 2439 00f2 5C4B     		ldr	r3, .L159+36
 2440 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2441 00f6 012B     		cmp	r3, #1
 2442 00f8 3AD1     		bne	.L143
 2443              	.LBB11:
 210:Src/main.c    ****             // Turn to ewok
 2444              		.loc 1 210 0
 2445 00fa 5D48     		ldr	r0, .L159+48
 2446 00fc 0021     		movs	r1, #0
 2447 00fe FFF7FEFF 		bl	print
 2448              	.LVL308:
 212:Src/main.c    **** 
 2449              		.loc 1 212 0
 2450 0102 FFF7FEFF 		bl	turn
 2451              	.LVL309:
 216:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2452              		.loc 1 216 0
 2453 0106 FFF7FEFF 		bl	HAL_GetTick
 2454              	.LVL310:
 2455 010a 0446     		mov	r4, r0
 2456              	.LVL311:
 217:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2457              		.loc 1 217 0
 2458 010c 0020     		movs	r0, #0
 2459              	.LVL312:
 2460 010e 534B     		ldr	r3, .L159+28
 2461 0110 1988     		ldrh	r1, [r3]
 2462 0112 FFF7FEFF 		bl	set_motor_speed
 2463              	.LVL313:
 218:Src/main.c    ****             while(HAL_GetTick()-time<2800){
 2464              		.loc 1 218 0
 2465 0116 0820     		movs	r0, #8
 2466 0118 514B     		ldr	r3, .L159+32
 2467 011a 1988     		ldrh	r1, [r3]
 2468 011c FFF7FEFF 		bl	set_motor_speed
 2469              	.LVL314:
 219:Src/main.c    ****                 drive_straight(&enc_pid);
 2470              		.loc 1 219 0
 2471 0120 10E0     		b	.L144
 2472              	.L146:
 220:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 2473              		.loc 1 220 0
 2474 0122 02A8     		add	r0, sp, #8
 2475 0124 FFF7FEFF 		bl	drive_straight
 2476              	.LVL315:
 222:Src/main.c    ****                 {
 2477              		.loc 1 222 0
 2478 0128 5248     		ldr	r0, .L159+52
 2479 012a 1021     		movs	r1, #16
 2480 012c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2481              	.LVL316:
 2482 0130 0128     		cmp	r0, #1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 66


 2483 0132 07D1     		bne	.L144
 224:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 2484              		.loc 1 224 0
 2485 0134 5048     		ldr	r0, .L159+56
 2486 0136 0021     		movs	r1, #0
 2487 0138 FFF7FEFF 		bl	print
 2488              	.LVL317:
 225:Src/main.c    ****                     break;
 2489              		.loc 1 225 0
 2490 013c 02A8     		add	r0, sp, #8
 2491 013e FFF7FEFF 		bl	debounce_and_grab
 2492              	.LVL318:
 226:Src/main.c    ****                 }
 2493              		.loc 1 226 0
 2494 0142 05E0     		b	.L145
 2495              	.L144:
 219:Src/main.c    ****                 drive_straight(&enc_pid);
 2496              		.loc 1 219 0
 2497 0144 FFF7FEFF 		bl	HAL_GetTick
 2498              	.LVL319:
 2499 0148 001B     		subs	r0, r0, r4
 2500 014a B0F52F6F 		cmp	r0, #2800
 2501 014e E8D3     		bcc	.L146
 2502              	.L145:
 229:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 2503              		.loc 1 229 0
 2504 0150 0020     		movs	r0, #0
 2505 0152 0146     		mov	r1, r0
 2506 0154 FFF7FEFF 		bl	set_motor_speed
 2507              	.LVL320:
 230:Src/main.c    ****             print("ewok\n", 0);
 2508              		.loc 1 230 0
 2509 0158 0820     		movs	r0, #8
 2510 015a 0021     		movs	r1, #0
 2511 015c FFF7FEFF 		bl	set_motor_speed
 2512              	.LVL321:
 231:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 2513              		.loc 1 231 0
 2514 0160 4248     		ldr	r0, .L159+44
 2515 0162 0021     		movs	r1, #0
 2516 0164 FFF7FEFF 		bl	print
 2517              	.LVL322:
 232:Src/main.c    **** 
 2518              		.loc 1 232 0
 2519 0168 0022     		movs	r2, #0
 2520 016a 3E4B     		ldr	r3, .L159+36
 2521 016c 1A70     		strb	r2, [r3]
 2522              	.LBE11:
 2523 016e C0E7     		b	.L142
 2524              	.LVL323:
 2525              	.L143:
 236:Src/main.c    ****             if(searches == 4 && ewok_cnt == 0){
 2526              		.loc 1 236 0
 2527 0170 424A     		ldr	r2, .L159+60
 2528 0172 1368     		ldr	r3, [r2]
 2529 0174 0133     		adds	r3, r3, #1
 2530 0176 1360     		str	r3, [r2]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 67


 237:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2531              		.loc 1 237 0
 2532 0178 042B     		cmp	r3, #4
 2533 017a 06D1     		bne	.L148
 237:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2534              		.loc 1 237 0 is_stmt 0 discriminator 1
 2535 017c 404A     		ldr	r2, .L159+64
 2536 017e 1268     		ldr	r2, [r2]
 2537 0180 1AB9     		cbnz	r2, .L148
 238:Src/main.c    ****             }
 2538              		.loc 1 238 0 is_stmt 1
 2539 0182 4048     		ldr	r0, .L159+68
 2540 0184 FFF7FEFF 		bl	debounce_and_grab
 2541              	.LVL324:
 2542 0188 B3E7     		b	.L142
 2543              	.L148:
 240:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2544              		.loc 1 240 0
 2545 018a 032B     		cmp	r3, #3
 2546 018c 07D1     		bne	.L149
 240:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2547              		.loc 1 240 0 is_stmt 0 discriminator 1
 2548 018e 3C4A     		ldr	r2, .L159+64
 2549 0190 1268     		ldr	r2, [r2]
 2550 0192 012A     		cmp	r2, #1
 2551 0194 03D1     		bne	.L149
 241:Src/main.c    ****             }
 2552              		.loc 1 241 0 is_stmt 1
 2553 0196 3B48     		ldr	r0, .L159+68
 2554 0198 FFF7FEFF 		bl	debounce_and_grab
 2555              	.LVL325:
 2556 019c A9E7     		b	.L142
 2557              	.L149:
 243:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2558              		.loc 1 243 0
 2559 019e 082B     		cmp	r3, #8
 2560 01a0 07D1     		bne	.L150
 243:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2561              		.loc 1 243 0 is_stmt 0 discriminator 1
 2562 01a2 374B     		ldr	r3, .L159+64
 2563 01a4 1B68     		ldr	r3, [r3]
 2564 01a6 022B     		cmp	r3, #2
 2565 01a8 03D1     		bne	.L150
 244:Src/main.c    ****             }else{
 2566              		.loc 1 244 0 is_stmt 1
 2567 01aa 3648     		ldr	r0, .L159+68
 2568 01ac FFF7FEFF 		bl	debounce_and_grab
 2569              	.LVL326:
 2570 01b0 9FE7     		b	.L142
 2571              	.L150:
 2572              	.LBB12:
 246:Src/main.c    ****             while(HAL_GetTick()-time<2800 && PI_INT_STATE == NOT_FLAGGED);
 2573              		.loc 1 246 0
 2574 01b2 FFF7FEFF 		bl	HAL_GetTick
 2575              	.LVL327:
 2576 01b6 0446     		mov	r4, r0
 2577              	.LVL328:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 68


 2578              	.L152:
 247:Src/main.c    ****             int thresh = ewok_cnt==1? 500:750;
 2579              		.loc 1 247 0 discriminator 2
 2580 01b8 FFF7FEFF 		bl	HAL_GetTick
 2581              	.LVL329:
 2582 01bc 001B     		subs	r0, r0, r4
 2583 01be B0F52F6F 		cmp	r0, #2800
 2584 01c2 03D2     		bcs	.L151
 247:Src/main.c    ****             int thresh = ewok_cnt==1? 500:750;
 2585              		.loc 1 247 0 is_stmt 0 discriminator 1
 2586 01c4 274B     		ldr	r3, .L159+36
 2587 01c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2588 01c8 002B     		cmp	r3, #0
 2589 01ca F5D0     		beq	.L152
 2590              	.L151:
 248:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2591              		.loc 1 248 0 is_stmt 1
 2592 01cc 2C4B     		ldr	r3, .L159+64
 2593 01ce 1B68     		ldr	r3, [r3]
 2594 01d0 012B     		cmp	r3, #1
 2595 01d2 02D1     		bne	.L157
 2596 01d4 4FF4FA75 		mov	r5, #500
 2597 01d8 01E0     		b	.L153
 2598              	.L157:
 2599 01da 40F2EE25 		movw	r5, #750
 2600              	.L153:
 2601              	.LVL330:
 249:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2602              		.loc 1 249 0 discriminator 4
 2603 01de 0020     		movs	r0, #0
 2604 01e0 1E4B     		ldr	r3, .L159+28
 2605 01e2 1988     		ldrh	r1, [r3]
 2606 01e4 FFF7FEFF 		bl	set_motor_speed
 2607              	.LVL331:
 250:Src/main.c    ****             time = HAL_GetTick();
 2608              		.loc 1 250 0 discriminator 4
 2609 01e8 0820     		movs	r0, #8
 2610 01ea 1D4B     		ldr	r3, .L159+32
 2611 01ec 1988     		ldrh	r1, [r3]
 2612 01ee FFF7FEFF 		bl	set_motor_speed
 2613              	.LVL332:
 251:Src/main.c    ****             while(HAL_GetTick()-time<thresh){
 2614              		.loc 1 251 0 discriminator 4
 2615 01f2 FFF7FEFF 		bl	HAL_GetTick
 2616              	.LVL333:
 2617 01f6 0446     		mov	r4, r0
 2618              	.LVL334:
 252:Src/main.c    ****                 drive_straight(&enc_pid);
 2619              		.loc 1 252 0 discriminator 4
 2620 01f8 10E0     		b	.L154
 2621              	.LVL335:
 2622              	.L156:
 253:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 2623              		.loc 1 253 0
 2624 01fa 02A8     		add	r0, sp, #8
 2625 01fc FFF7FEFF 		bl	drive_straight
 2626              	.LVL336:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 69


 255:Src/main.c    ****                 {
 2627              		.loc 1 255 0
 2628 0200 1C48     		ldr	r0, .L159+52
 2629 0202 1021     		movs	r1, #16
 2630 0204 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2631              	.LVL337:
 2632 0208 0128     		cmp	r0, #1
 2633 020a 07D1     		bne	.L154
 257:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 2634              		.loc 1 257 0
 2635 020c 1A48     		ldr	r0, .L159+56
 2636 020e 0021     		movs	r1, #0
 2637 0210 FFF7FEFF 		bl	print
 2638              	.LVL338:
 258:Src/main.c    ****                     break;
 2639              		.loc 1 258 0
 2640 0214 02A8     		add	r0, sp, #8
 2641 0216 FFF7FEFF 		bl	debounce_and_grab
 2642              	.LVL339:
 259:Src/main.c    ****                 }
 2643              		.loc 1 259 0
 2644 021a 04E0     		b	.L155
 2645              	.L154:
 252:Src/main.c    ****                 drive_straight(&enc_pid);
 2646              		.loc 1 252 0
 2647 021c FFF7FEFF 		bl	HAL_GetTick
 2648              	.LVL340:
 2649 0220 001B     		subs	r0, r0, r4
 2650 0222 A842     		cmp	r0, r5
 2651 0224 E9D3     		bcc	.L156
 2652              	.L155:
 262:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 2653              		.loc 1 262 0
 2654 0226 0020     		movs	r0, #0
 2655 0228 0146     		mov	r1, r0
 2656 022a FFF7FEFF 		bl	set_motor_speed
 2657              	.LVL341:
 263:Src/main.c    ****             print("ewok\n", 0);
 2658              		.loc 1 263 0
 2659 022e 0820     		movs	r0, #8
 2660 0230 0021     		movs	r1, #0
 2661 0232 FFF7FEFF 		bl	set_motor_speed
 2662              	.LVL342:
 264:Src/main.c    ****             }
 2663              		.loc 1 264 0
 2664 0236 0D48     		ldr	r0, .L159+44
 2665 0238 0021     		movs	r1, #0
 2666 023a FFF7FEFF 		bl	print
 2667              	.LVL343:
 2668 023e 58E7     		b	.L142
 2669              	.L160:
 2670              		.align	2
 2671              	.L159:
 2672 0240 00000000 		.word	htim4
 2673 0244 00000000 		.word	htim5
 2674 0248 00000000 		.word	htim1
 2675 024c 00000000 		.word	htim3
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 70


 2676 0250 08000000 		.word	.LC1
 2677 0254 00000000 		.word	EDGE_LEFT_STATE
 2678 0258 00000000 		.word	EDGE_RIGHT_STATE
 2679 025c 00000000 		.word	.LANCHOR1
 2680 0260 00000000 		.word	.LANCHOR0
 2681 0264 00000000 		.word	PI_INT_STATE
 2682 0268 00000000 		.word	CLAW_INT_STATE
 2683 026c B0010000 		.word	.LC23
 2684 0270 B8010000 		.word	.LC24
 2685 0274 00040240 		.word	1073873920
 2686 0278 7C010000 		.word	.LC19
 2687 027c 00000000 		.word	.LANCHOR3
 2688 0280 00000000 		.word	.LANCHOR2
 2689 0284 00000000 		.word	encoder_pid
 2690              	.LBE12:
 2691              		.cfi_endproc
 2692              	.LFE124:
 2694              		.global	searches
 2695              		.global	ewok_cnt
 2696              		.comm	adc_values,8192,4
 2697              		.comm	dma_buffer,8192,4
 2698              		.global	RIGHT_SPEED
 2699              		.global	LEFT_SPEED
 2700              		.section	.data.RIGHT_SPEED,"aw",%progbits
 2701              		.align	1
 2702              		.set	.LANCHOR0,. + 0
 2705              	RIGHT_SPEED:
 2706 0000 5802     		.short	600
 2707              		.section	.bss.searches,"aw",%nobits
 2708              		.align	2
 2709              		.set	.LANCHOR3,. + 0
 2712              	searches:
 2713 0000 00000000 		.space	4
 2714              		.section	.data.LEFT_SPEED,"aw",%progbits
 2715              		.align	1
 2716              		.set	.LANCHOR1,. + 0
 2719              	LEFT_SPEED:
 2720 0000 5802     		.short	600
 2721              		.section	.rodata.str1.4,"aMS",%progbits,1
 2722              		.align	2
 2723              	.LC0:
 2724 0000 41202564 		.ascii	"A %d\012\000"
 2724      0A00
 2725 0006 0000     		.space	2
 2726              	.LC1:
 2727 0008 53746172 		.ascii	"Starting\012\000"
 2727      74696E67 
 2727      0A00
 2728 0012 0000     		.space	2
 2729              	.LC2:
 2730 0014 256C750A 		.ascii	"%lu\012\000"
 2730      00
 2731 0019 000000   		.space	3
 2732              	.LC3:
 2733 001c 5455524E 		.ascii	"TURN | cnts: %d\012\000"
 2733      207C2063 
 2733      6E74733A 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 71


 2733      2025640A 
 2733      00
 2734 002d 000000   		.space	3
 2735              	.LC4:
 2736 0030 5455524E 		.ascii	"TURN | vlts: %d.%d\012\000"
 2736      207C2076 
 2736      6C74733A 
 2736      2025642E 
 2736      25640A00 
 2737              	.LC5:
 2738 0044 5455524E 		.ascii	"TURN | ADC_VAL: %d\012\000"
 2738      207C2041 
 2738      44435F56 
 2738      414C3A20 
 2738      25640A00 
 2739              	.LC6:
 2740 0058 5455524E 		.ascii	"TURN | TIM5->CNT: %lu\012\000"
 2740      207C2054 
 2740      494D352D 
 2740      3E434E54 
 2740      3A20256C 
 2741 006f 00       		.space	1
 2742              	.LC7:
 2743 0070 5455524E 		.ascii	"TURN | TIM4->CNT: %lu\012\000"
 2743      207C2054 
 2743      494D342D 
 2743      3E434E54 
 2743      3A20256C 
 2744 0087 00       		.space	1
 2745              	.LC8:
 2746 0088 5455524E 		.ascii	"TURN_DEG | turn count: %d\012\000"
 2746      5F444547 
 2746      207C2074 
 2746      75726E20 
 2746      636F756E 
 2747 00a3 00       		.space	1
 2748              	.LC9:
 2749 00a4 5455524E 		.ascii	"TURN_DEG | TIM5->CNT: %lu\012\000"
 2749      5F444547 
 2749      207C2054 
 2749      494D352D 
 2749      3E434E54 
 2750 00bf 00       		.space	1
 2751              	.LC10:
 2752 00c0 5455524E 		.ascii	"TURN_DEG | TIM4->CNT: %lu\012\000"
 2752      5F444547 
 2752      207C2054 
 2752      494D342D 
 2752      3E434E54 
 2753 00db 00       		.space	1
 2754              	.LC11:
 2755 00dc 434C4157 		.ascii	"CLAW_GRAB | grabbing ewok\012\000"
 2755      5F475241 
 2755      42207C20 
 2755      67726162 
 2755      62696E67 
 2756 00f7 00       		.space	1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 72


 2757              	.LC12:
 2758 00f8 46697273 		.ascii	"First ewok captured\012\000"
 2758      74206577 
 2758      6F6B2063 
 2758      61707475 
 2758      7265640A 
 2759 010d 000000   		.space	3
 2760              	.LC13:
 2761 0110 5365636F 		.ascii	"Second ewok captured\012\000"
 2761      6E642065 
 2761      776F6B20 
 2761      63617074 
 2761      75726564 
 2762 0126 0000     		.space	2
 2763              	.LC14:
 2764 0128 544C2025 		.ascii	"TL %d\000"
 2764      6400
 2765 012e 0000     		.space	2
 2766              	.LC15:
 2767 0130 54522025 		.ascii	"TR %d\000"
 2767      6400
 2768 0136 0000     		.space	2
 2769              	.LC16:
 2770 0138 54686972 		.ascii	"Third ewok captured\012\000"
 2770      64206577 
 2770      6F6B2063 
 2770      61707475 
 2770      7265640A 
 2771 014d 000000   		.space	3
 2772              	.LC17:
 2773 0150 466F7572 		.ascii	"Fourth ewok captured\012\000"
 2773      74682065 
 2773      776F6B20 
 2773      63617074 
 2773      75726564 
 2774 0166 0000     		.space	2
 2775              	.LC18:
 2776 0168 43686577 		.ascii	"Chewie captured\012\000"
 2776      69652063 
 2776      61707475 
 2776      7265640A 
 2776      00
 2777 0179 000000   		.space	3
 2778              	.LC19:
 2779 017c 436C6177 		.ascii	"Claw interrupt\012\000"
 2779      20696E74 
 2779      65727275 
 2779      70740A00 
 2780              	.LC20:
 2781 018c 63685F35 		.ascii	"ch_5: %d\012\000"
 2781      3A202564 
 2781      0A00
 2782 0196 0000     		.space	2
 2783              	.LC21:
 2784 0198 63685F34 		.ascii	"ch_4: %d\012\000"
 2784      3A202564 
 2784      0A00
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 73


 2785 01a2 0000     		.space	2
 2786              	.LC22:
 2787 01a4 5372632F 		.ascii	"Src/main.c\000"
 2787      6D61696E 
 2787      2E6300
 2788 01af 00       		.space	1
 2789              	.LC23:
 2790 01b0 65776F6B 		.ascii	"ewok\012\000"
 2790      0A00
 2791 01b6 0000     		.space	2
 2792              	.LC24:
 2793 01b8 50692069 		.ascii	"Pi interrupt\012\000"
 2793      6E746572 
 2793      72757074 
 2793      0A00
 2794              		.section	.bss.ewok_cnt,"aw",%nobits
 2795              		.align	2
 2796              		.set	.LANCHOR2,. + 0
 2799              	ewok_cnt:
 2800 0000 00000000 		.space	4
 2801              		.text
 2802              	.Letext0:
 2803              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2804              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2805              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2806              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 2807              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2808              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2809              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2810              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2811              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2812              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2813              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2814              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2815              		.file 14 "Inc/pid.h"
 2816              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 2817              		.file 16 "Inc/adc.h"
 2818              		.file 17 "Inc/tim.h"
 2819              		.file 18 "Inc/usart.h"
 2820              		.file 19 "Inc/extern_vars.h"
 2821              		.file 20 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 2822              		.file 21 "Inc/filter.h"
 2823              		.file 22 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2824              		.file 23 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2825              		.file 24 "Inc/claw.h"
 2826              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2827              		.file 26 "Inc/gpio.h"
 2828              		.file 27 "Inc/dma.h"
 2829              		.file 28 "Inc/i2c.h"
 2830              		.file 29 "Inc/ssd1306.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:21     .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:26     .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:82     .text.encoder_pid:000000000000003c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:87     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:92     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:115    .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:121    .text.drive_straight:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:126    .text.drive_straight:0000000000000000 drive_straight
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:154    .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:159    .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:190    .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:196    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:201    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:228    .text.print:0000000000000018 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:234    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:239    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:312    .text.alarm_detect:000000000000006c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:321    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:326    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:439    .text.menu:000000000000009c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:446    .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:451    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:517    .text.set_motor_speed:000000000000004c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:522    .text.square_edge:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:527    .text.square_edge:0000000000000000 square_edge
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:604    .text.square_edge:0000000000000064 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:614    .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:619    .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:848    .text.turn:0000000000000160 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:872    .text.turn_deg:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:877    .text.turn_deg:0000000000000000 turn_deg
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1058   .text.turn_deg:0000000000000108 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1074   .text.debounce_and_grab:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1079   .text.debounce_and_grab:0000000000000000 debounce_and_grab
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1773   .text.drive_straight_time:0000000000000000 drive_straight_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1589   .text.debounce_and_grab:00000000000002fc $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1605   .text.debounce_and_grab:0000000000000334 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1753   .text.debounce_and_grab:0000000000000418 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1768   .text.drive_straight_time:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1858   .text.drive_straight_time:0000000000000068 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1864   .text.test_PWM_htim1:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1869   .text.test_PWM_htim1:0000000000000000 test_PWM_htim1
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1920   .text.test_PWM_htim1:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1925   .text.test_PWM_htim3:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1930   .text.test_PWM_htim3:0000000000000000 test_PWM_htim3
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1988   .text.test_PWM_htim3:0000000000000040 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1993   .text.test_ADC:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:1998   .text.test_ADC:0000000000000000 test_ADC
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2065   .text.test_ADC:0000000000000050 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2074   .text.test_All:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2079   .text.test_All:0000000000000000 test_All
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2104   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2109   .text._Error_Handler:0000000000000000 _Error_Handler
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 75


/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2125   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2130   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2256   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2264   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2269   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2672   .text.main:0000000000000240 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2712   .bss.searches:0000000000000000 searches
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2799   .bss.ewok_cnt:0000000000000000 ewok_cnt
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2705   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2719   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2701   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2708   .bss.searches:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2715   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2722   .rodata.str1.4:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s:2795   .bss.ewok_cnt:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pid_GetGain
memcpy
HAL_Delay
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
strlen
HAL_UART_Transmit
huart6
__aeabi_d2iz
HAL_ADC_Start_DMA
goertzel
sprintf
hadc1
HAL_GPIO_ReadPin
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Stop_DMA
__aeabi_i2d
__aeabi_dadd
HAL_GetTick
close_claw
arm_up
open_claw
arm_down
htim3
PI_INT_STATE
slow_actuate
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
CLAW_INT_STATE
HAL_TIM_PWM_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccevoaDm.s 			page 76


HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_ADC1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
MX_I2C1_Init
MX_USART6_UART_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
HAL_NVIC_EnableIRQ
htim4
htim5
