ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** uint16_t LEFT_SPEED = 0.61*MOTOR_SPEED;
  66:Src/main.c    **** uint16_t RIGHT_SPEED = 0.69*MOTOR_SPEED;
  67:Src/main.c    **** uint32_t dma_buffer[3072];
  68:Src/main.c    **** uint32_t adc_values[3072];
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PV */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  73:Src/main.c    **** void SystemClock_Config(void);
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN PFP */
  76:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  77:Src/main.c    **** void print(char msg[], int row);
  78:Src/main.c    **** void do_pid(PID_t *pid_struct);
  79:Src/main.c    **** PID_t menu();
  80:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin);
  81:Src/main.c    **** void pi_navigation();
  82:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  83:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc);
  84:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  85:Src/main.c    **** void turn();
  86:Src/main.c    **** void turn_deg(uint8_t);
  87:Src/main.c    **** void alarm_detect();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END PFP */
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE BEGIN 0 */
  92:Src/main.c    **** /**
  93:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
  94:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
  95:Src/main.c    ****  * Order of buffer: ir1, ir2, pi, ir1, ir2...
  96:Src/main.c    ****  */
  97:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
  98:Src/main.c    **** {
  29              		.loc 1 98 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  99:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 99 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF44052 		mov	r2, #12288
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB129:
 100:Src/main.c    **** }
 101:Src/main.c    **** /* USER CODE END 0 */
 102:Src/main.c    **** 
 103:Src/main.c    **** /**
 104:Src/main.c    ****   * @brief  The application entry point.
 105:Src/main.c    ****   *
 106:Src/main.c    ****   * @retval None
 107:Src/main.c    ****   */
 108:Src/main.c    **** int main(void)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 4


 109:Src/main.c    **** {
 110:Src/main.c    ****   /* USER CODE BEGIN 1 */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE END 1 */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 117:Src/main.c    ****   HAL_Init();
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* USER CODE BEGIN Init */
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* USER CODE END Init */
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* Configure the system clock */
 124:Src/main.c    ****   SystemClock_Config();
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE END SysInit */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Initialize all configured peripherals */
 131:Src/main.c    ****   MX_GPIO_Init();
 132:Src/main.c    ****   MX_DMA_Init();
 133:Src/main.c    ****   MX_TIM3_Init();
 134:Src/main.c    ****   MX_TIM1_Init();
 135:Src/main.c    ****   MX_TIM2_Init();
 136:Src/main.c    ****   MX_USART6_UART_Init();
 137:Src/main.c    ****   MX_ADC1_Init();
 138:Src/main.c    ****   MX_I2C1_Init();
 139:Src/main.c    ****   MX_TIM4_Init();
 140:Src/main.c    ****   MX_TIM9_Init();
 141:Src/main.c    ****   MX_TIM5_Init();
 142:Src/main.c    ****   /* USER CODE BEGIN 2 */
 143:Src/main.c    **** 
 144:Src/main.c    ****     /* Initialize peripherals */
 145:Src/main.c    ****     /* 
 146:Src/main.c    ****      * Claw jaw: TIM3 CH1
 147:Src/main.c    ****      * Claw arm: TIM3 CH2
 148:Src/main.c    ****      * Basket: TIM3 CH3
 149:Src/main.c    ****      * left forward: TIM1 CH1
 150:Src/main.c    ****      * left backward: TIM1 CH2
 151:Src/main.c    ****      * right forward: TIM1 CH3
 152:Src/main.c    ****      * right backward: TIM1 CH4
 153:Src/main.c    ****      * left encoder: TIM4
 154:Src/main.c    ****      * right encoderL TIM5
 155:Src/main.c    ****      * spare clocks: TIM2, TIM9
 156:Src/main.c    ****      */
 157:Src/main.c    **** 
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 159:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 5


 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 167:Src/main.c    **** 
 168:Src/main.c    ****     /* Initialize other stuffs */
 169:Src/main.c    ****     ssd1306_Init();
 170:Src/main.c    ****     print("Starting", 0);
 171:Src/main.c    ****     claw_init(&htim3);
 172:Src/main.c    ****     ///basket_init(&htim3);
 173:Src/main.c    ****     
 174:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 100);
 175:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_2, 100);
 176:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 100);
 177:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_4, 100);
 178:Src/main.c    **** 
 179:Src/main.c    ****     /*
 180:Src/main.c    ****     ENCODER_t left_enc = encoder_Init(TIM4);
 181:Src/main.c    ****     ENCODER_t right_enc = encoder_Init(TIM5);
 182:Src/main.c    ****     PID_t left_pid = pid_Init(5, 12, 0, 2, 2);
 183:Src/main.c    ****     PID_t right_pid = pid_Init(30, 25, 0, 2, 2);
 184:Src/main.c    ****     */
 185:Src/main.c    ****     uint8_t ewok_cnt = 0;
 186:Src/main.c    ****     
 187:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 188:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 189:Src/main.c    ****     HAL_Delay(5000);
 190:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 191:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 192:Src/main.c    ****     HAL_Delay(1000);
 193:Src/main.c    ****     /* Initially disabled IR, PI and Claw INT*/
 194:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 195:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 196:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 197:Src/main.c    ****   /* USER CODE END 2 */
 198:Src/main.c    **** 
 199:Src/main.c    ****   /* Infinite loop */
 200:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 201:Src/main.c    ****     while (1)
 202:Src/main.c    ****     {
 203:Src/main.c    ****         char msg[10] = "Hi\n";
 204:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 205:Src/main.c    ****         HAL_Delay(1000);
 206:Src/main.c    ****         
 207:Src/main.c    ****         //print("in whiel", 0);
 208:Src/main.c    **** 
 209:Src/main.c    ****         /*
 210:Src/main.c    ****          * Servo Stuff
 211:Src/main.c    ****          */
 212:Src/main.c    **** 
 213:Src/main.c    **** 
 214:Src/main.c    ****         /*
 215:Src/main.c    ****          * Drive Straight
 216:Src/main.c    ****          *
 217:Src/main.c    ****          encoder_pid(&left_pid, &left_enc, &right_pid, &right_enc);
 218:Src/main.c    ****          */
 219:Src/main.c    **** 
 220:Src/main.c    ****         /*
 221:Src/main.c    ****          * Pi Turning
 222:Src/main.c    ****          */
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 6


 223:Src/main.c    ****         /*
 224:Src/main.c    ****          if (PI_INT_STATE == FLAGGED)
 225:Src/main.c    ****          {
 226:Src/main.c    ****          print("in pi int", 0);
 227:Src/main.c    ****          turn();
 228:Src/main.c    ****          
 229:Src/main.c    ****          set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 230:Src/main.c    ****          set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 231:Src/main.c    ****          int start = HAL_GetTick();
 232:Src/main.c    ****          while (HAL_GetTick() - start < 4000)
 233:Src/main.c    ****          {
 234:Src/main.c    ****          // encoder_dist_pid(&left_pid);
 235:Src/main.c    ****          if (CLAW_INT_STATE == FLAGGED)
 236:Src/main.c    ****          {
 237:Src/main.c    ****          HAL_Delay(200);
 238:Src/main.c    ****          set_motor_speed(TIM_CHANNEL_1, 0);
 239:Src/main.c    ****          set_motor_speed(TIM_CHANNEL_3, 0);
 240:Src/main.c    ****          actuatengo(&htim2, TIM_CHANNEL_2, TIM_CHANNEL_3);
 241:Src/main.c    ****          CLAW_INT_STATE = NOT_FLAGGED;
 242:Src/main.c    ****          ++ewok_cnt;
 243:Src/main.c    ****          char msg[18] = "";
 244:Src/main.c    ****          sprintf(msg, "wok_cnt: %d", ewok_cnt);
 245:Src/main.c    ****          print(msg, 0);
 246:Src/main.c    ****          if (ewok_cnt == 1)
 247:Src/main.c    ****          {
 248:Src/main.c    ****          turn_deg(-120);
 249:Src/main.c    ****          arm_up_to_deg(&htim2, 80);
 250:Src/main.c    ****          set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 251:Src/main.c    ****          set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 252:Src/main.c    ****          HAL_Delay(3000);
 253:Src/main.c    ****          CLAW_INT_STATE = NOT_FLAGGED;
 254:Src/main.c    ****          }
 255:Src/main.c    ****          break;
 256:Src/main.c    ****          }
 257:Src/main.c    ****          }
 258:Src/main.c    ****          // char pic_plz = "1";
 259:Src/main.c    ****          // HAL_UART_Transmit(&huart2, pic_plz, sizeof(pic_plz), 10000);
 260:Src/main.c    ****          PI_INT_STATE = NOT_FLAGGED;
 261:Src/main.c    ****          set_motor_speed(TIM_CHANNEL_1, 0);
 262:Src/main.c    ****          set_motor_speed(TIM_CHANNEL_3, 0);
 263:Src/main.c    ****          }
 264:Src/main.c    ****          */
 265:Src/main.c    **** 
 266:Src/main.c    ****         /*
 267:Src/main.c    ****          * EDGE and Object detection
 268:Src/main.c    ****          *
 269:Src/main.c    ****          if(EDGE_RIGHT_STATE == FLAGGED){
 270:Src/main.c    ****          print("ER",0);
 271:Src/main.c    ****          EDGE_RIGHT_STATE = NOT_FLAGGED;
 272:Src/main.c    ****          }
 273:Src/main.c    ****          if(TAPE_RIGHT_STATE == FLAGGED){
 274:Src/main.c    ****          print("TR",0);
 275:Src/main.c    ****          TAPE_RIGHT_STATE = NOT_FLAGGED;
 276:Src/main.c    ****          }
 277:Src/main.c    ****          if(EDGE_LEFT_STATE == FLAGGED){
 278:Src/main.c    ****          print("EL",0);
 279:Src/main.c    ****          EDGE_LEFT_STATE = NOT_FLAGGED;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 7


 280:Src/main.c    ****          }
 281:Src/main.c    **** 
 282:Src/main.c    ****          if(TAPE_LEFT_STATE == FLAGGED){
 283:Src/main.c    ****          print("TL",0);
 284:Src/main.c    ****          TAPE_LEFT_STATE = NOT_FLAGGED;
 285:Src/main.c    ****          }
 286:Src/main.c    ****          */
 287:Src/main.c    **** 
 288:Src/main.c    ****         /*
 289:Src/main.c    ****          * IR DETECTION
 290:Src/main.c    ****          *
 291:Src/main.c    ****          if (IR_INT_STATE == FLAGGED)
 292:Src/main.c    ****          {
 293:Src/main.c    ****          alarm_detect();
 294:Src/main.c    ****         //drive past sensor, enough so as to not trigger interrupt again
 295:Src/main.c    ****         HAL_Delay(2000);
 296:Src/main.c    ****         }*/
 297:Src/main.c    **** 
 298:Src/main.c    ****   /* USER CODE END WHILE */
 299:Src/main.c    **** 
 300:Src/main.c    ****   /* USER CODE BEGIN 3 */
 301:Src/main.c    ****     }
 302:Src/main.c    ****   /* USER CODE END 3 */
 303:Src/main.c    **** 
 304:Src/main.c    **** }
 305:Src/main.c    **** 
 306:Src/main.c    **** /**
 307:Src/main.c    ****   * @brief System Clock Configuration
 308:Src/main.c    ****   * @retval None
 309:Src/main.c    ****   */
 310:Src/main.c    **** void SystemClock_Config(void)
 311:Src/main.c    **** {
 312:Src/main.c    **** 
 313:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 314:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 315:Src/main.c    **** 
 316:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 317:Src/main.c    ****     */
 318:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 319:Src/main.c    **** 
 320:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 321:Src/main.c    **** 
 322:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 323:Src/main.c    ****     */
 324:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 325:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 326:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 327:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 328:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 329:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 330:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 331:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 332:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 333:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 334:Src/main.c    ****   {
 335:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 336:Src/main.c    ****   }
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 8


 337:Src/main.c    **** 
 338:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 339:Src/main.c    ****     */
 340:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 341:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 342:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 343:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 344:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 345:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 346:Src/main.c    **** 
 347:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 348:Src/main.c    ****   {
 349:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 350:Src/main.c    ****   }
 351:Src/main.c    **** 
 352:Src/main.c    ****     /**Configure the Systick interrupt time 
 353:Src/main.c    ****     */
 354:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 355:Src/main.c    **** 
 356:Src/main.c    ****     /**Configure the Systick 
 357:Src/main.c    ****     */
 358:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 359:Src/main.c    **** 
 360:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 361:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 362:Src/main.c    **** }
 363:Src/main.c    **** 
 364:Src/main.c    **** /* USER CODE BEGIN 4 */
 365:Src/main.c    **** 
 366:Src/main.c    **** /*
 367:Src/main.c    ****  * Assume motors are not on.
 368:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 369:Src/main.c    ****  */
 370:Src/main.c    **** void turn()
 371:Src/main.c    **** {
 372:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 373:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 374:Src/main.c    ****     HAL_Delay(50);
 375:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 376:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 377:Src/main.c    ****     TIM4->CNT = 0;
 378:Src/main.c    ****     TIM5->CNT = 0;
 379:Src/main.c    ****     
 380:Src/main.c    ****     char msg[18] = "";
 381:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 382:Src/main.c    ****     print(msg, 0);
 383:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 384:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 385:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 386:Src/main.c    ****     print(msg, 2);
 387:Src/main.c    ****     
 388:Src/main.c    ****     if (volts < -TURN_TOLERANCE)  // FIXME: Ben changed this
 389:Src/main.c    ****     {
 390:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 391:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 392:Src/main.c    ****         while (TIM5->CNT < counts)
 393:Src/main.c    ****         {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 9


 394:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 395:Src/main.c    ****             print(msg, 4);
 396:Src/main.c    ****         }
 397:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 398:Src/main.c    ****         print(msg, 4);
 399:Src/main.c    ****         TIM5->CNT = 0;
 400:Src/main.c    ****     }
 401:Src/main.c    ****     else if (volts > TURN_TOLERANCE) // FIXME: Ben changed this
 402:Src/main.c    ****     {
 403:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 404:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 405:Src/main.c    ****         while (TIM4->CNT < counts)
 406:Src/main.c    ****         {
 407:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 408:Src/main.c    ****             print(msg, 4);
 409:Src/main.c    ****         }
 410:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 411:Src/main.c    ****         print(msg, 4);
 412:Src/main.c    ****         TIM4->CNT = 0;
 413:Src/main.c    ****     }
 414:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 415:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 416:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 417:Src/main.c    **** }
 418:Src/main.c    **** 
 419:Src/main.c    **** /*
 420:Src/main.c    ****  * Assume motors are not on.
 421:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 422:Src/main.c    ****  */
 423:Src/main.c    **** void turn_deg(uint8_t deg)
 424:Src/main.c    **** {
 425:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 426:Src/main.c    ****         uint16_t counts = 50.0 / 90.0 * (deg-90) + 50;
 427:Src/main.c    ****         TIM4->CNT = 0;
 428:Src/main.c    ****         TIM5->CNT = 0;
 429:Src/main.c    ****         
 430:Src/main.c    ****         char msg[18] = "";
 431:Src/main.c    ****         
 432:Src/main.c    ****         if (deg > 0) // FIXME: Ben changed this
 433:Src/main.c    ****         {
 434:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 435:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 30000);
 436:Src/main.c    ****             while (TIM5->CNT < counts)
 437:Src/main.c    ****             {
 438:Src/main.c    ****                 sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 439:Src/main.c    ****                 print(msg, 4);
 440:Src/main.c    ****             }
 441:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 442:Src/main.c    ****             print(msg, 4);
 443:Src/main.c    ****             TIM5->CNT = 0;
 444:Src/main.c    ****         }
 445:Src/main.c    ****         else if (deg < 0) // FIXME: Ben changed this
 446:Src/main.c    ****         {
 447:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 30000);
 448:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 449:Src/main.c    ****             while (TIM4->CNT < counts)
 450:Src/main.c    ****             {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 10


 451:Src/main.c    ****                 sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 452:Src/main.c    ****                 print(msg, 4);
 453:Src/main.c    ****             }
 454:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 455:Src/main.c    ****             print(msg, 4);
 456:Src/main.c    ****             TIM4->CNT = 0;
 457:Src/main.c    ****         }
 458:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 459:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 460:Src/main.c    ****         HAL_ADC_Stop_DMA(&hadc1);
 461:Src/main.c    **** }
 462:Src/main.c    **** 
 463:Src/main.c    **** void pi_navigation()
 464:Src/main.c    **** {
 465:Src/main.c    ****     print("Pi nav", 0);
 466:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 467:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 468:Src/main.c    ****     HAL_Delay(500);
 469:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
 470:Src/main.c    ****     if (heading < 0)
 471:Src/main.c    ****     {
 472:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_2, 0.3*MOTOR_SPEED);
 473:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0.3*MOTOR_SPEED);
 474:Src/main.c    ****         heading *= -1;
 475:Src/main.c    ****     }
 476:Src/main.c    ****     else if (heading > 0)
 477:Src/main.c    ****     {
 478:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0.3*MOTOR_SPEED);
 479:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 0.3*MOTOR_SPEED);
 480:Src/main.c    ****     }
 481:Src/main.c    ****     HAL_Delay(2000 * heading);
 482:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0.3*MOTOR_SPEED);
 483:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0.3*MOTOR_SPEED);
 484:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 485:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 486:Src/main.c    **** }
 487:Src/main.c    **** 
 488:Src/main.c    **** /**
 489:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 490:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 491:Src/main.c    ****  *
 492:Src/main.c    ****  * @param adc_val, value read from ADC.
 493:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 494:Src/main.c    ****  **/
 495:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 496:Src/main.c    **** {
  67              		.loc 1 496 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 497:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 11


  77              		.loc 1 497 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 498:Src/main.c    **** }
  90              		.loc 1 498 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE129:
 101              		.global	__aeabi_dcmpgt
 102              		.section	.text.alarm_detect,"ax",%progbits
 103              		.align	2
 104              		.global	alarm_detect
 105              		.thumb
 106              		.thumb_func
 108              	alarm_detect:
 109              	.LFB130:
 499:Src/main.c    **** 
 500:Src/main.c    **** void alarm_detect()
 501:Src/main.c    **** {
 110              		.loc 1 501 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114 0000 00B5     		push	{lr}
 115              	.LCFI2:
 116              		.cfi_def_cfa_offset 4
 117              		.cfi_offset 14, -4
 118 0002 83B0     		sub	sp, sp, #12
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 16
 502:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 121              		.loc 1 502 0
 122 0004 1248     		ldr	r0, .L14
 123 0006 1349     		ldr	r1, .L14+4
 124 0008 4FF44062 		mov	r2, #3072
 125 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 126              	.LVL8:
 503:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 504:Src/main.c    ****     //HAL_NVIC_DisableIRQ (IRQn_Type IRQn) disbale ir interrupt
 505:Src/main.c    ****     //char msg[20] = "";
 506:Src/main.c    ****     HAL_Delay(500);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 12


 127              		.loc 1 506 0
 128 0010 4FF4FA70 		mov	r0, #500
 129 0014 FFF7FEFF 		bl	HAL_Delay
 130              	.LVL9:
 131              	.L10:
 132              	.LBB2:
 507:Src/main.c    ****     while (1)
 508:Src/main.c    ****     {
 509:Src/main.c    ****         //
 510:Src/main.c    ****         // Sampling frequency: 72e6/2/(495*3)
 511:Src/main.c    ****         // offset 0 : IR1
 512:Src/main.c    ****         double val = goertzel(adc_values, 24242, 9850, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 
 133              		.loc 1 512 0
 134 0018 0023     		movs	r3, #0
 135 001a 0093     		str	r3, [sp]
 136 001c 0E48     		ldr	r0, .L14+8
 137 001e 45F6B261 		movw	r1, #24242
 138 0022 42F27A62 		movw	r2, #9850
 139 0026 4FF44063 		mov	r3, #3072
 140 002a FFF7FEFF 		bl	goertzel
 141              	.LVL10:
 513:Src/main.c    ****         /*
 514:Src/main.c    ****            int predec = (int)(val / 1);
 515:Src/main.c    ****            int postdec = (int)((val - predec) * 1000);
 516:Src/main.c    ****            sprintf(msg, "%d.%d\n", predec, postdec);
 517:Src/main.c    ****            HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 518:Src/main.c    ****            */
 519:Src/main.c    **** 
 520:Src/main.c    ****         //compare
 521:Src/main.c    ****         // 1000 Hz: ranges to about 60, 9850 Hz: ranges to 20
 522:Src/main.c    ****         if (val > 15)
 142              		.loc 1 522 0
 143 002e 51EC100B 		fmrrd	r0, r1, d0
 144 0032 0022     		movs	r2, #0
 145 0034 094B     		ldr	r3, .L14+12
 146 0036 FFF7FEFF 		bl	__aeabi_dcmpgt
 147              	.LVL11:
 148 003a 0028     		cmp	r0, #0
 149 003c ECD0     		beq	.L10
 150              	.LBE2:
 523:Src/main.c    ****         {
 524:Src/main.c    ****             break;
 525:Src/main.c    ****         }
 526:Src/main.c    ****     }
 527:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 151              		.loc 1 527 0
 152 003e 0448     		ldr	r0, .L14
 153 0040 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 154              	.LVL12:
 528:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 155              		.loc 1 528 0
 156 0044 0022     		movs	r2, #0
 157 0046 064B     		ldr	r3, .L14+16
 158 0048 1A70     		strb	r2, [r3]
 529:Src/main.c    **** }
 159              		.loc 1 529 0
 160 004a 03B0     		add	sp, sp, #12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 13


 161              	.LCFI4:
 162              		.cfi_def_cfa_offset 4
 163              		@ sp needed
 164 004c 5DF804FB 		ldr	pc, [sp], #4
 165              	.L15:
 166              		.align	2
 167              	.L14:
 168 0050 00000000 		.word	hadc1
 169 0054 00000000 		.word	dma_buffer
 170 0058 00000000 		.word	adc_values
 171 005c 00002E40 		.word	1076756480
 172 0060 00000000 		.word	IR_INT_STATE
 173              		.cfi_endproc
 174              	.LFE130:
 176              		.section	.text.print,"ax",%progbits
 177              		.align	2
 178              		.global	print
 179              		.thumb
 180              		.thumb_func
 182              	print:
 183              	.LFB132:
 530:Src/main.c    **** 
 531:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin)
 532:Src/main.c    **** {
 533:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 534:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 535:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 536:Src/main.c    ****     HAL_Delay(500);
 537:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 538:Src/main.c    ****     while (1)
 539:Src/main.c    ****     {
 540:Src/main.c    ****         char msg[18] = "";
 541:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
 542:Src/main.c    ****         // freq one
 543:Src/main.c    ****         double val1 = goertzel(adc_values, 20956, freq1, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 544:Src/main.c    ****         int predec = (int)(val1 / 1);
 545:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 546:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 547:Src/main.c    ****         print(msg, 0);
 548:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 549:Src/main.c    ****         //freq2
 550:Src/main.c    ****         double val2 = goertzel(adc_values, 20956, freq2, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 551:Src/main.c    ****         predec = (int)(val2 / 1);
 552:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 553:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 554:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 555:Src/main.c    ****         //compare
 556:Src/main.c    ****         if (val1 > val2)
 557:Src/main.c    ****         {
 558:Src/main.c    ****             break;
 559:Src/main.c    ****         }
 560:Src/main.c    ****     }
 561:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 562:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 563:Src/main.c    **** }
 564:Src/main.c    **** 
 565:Src/main.c    **** /**
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 14


 566:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 567:Src/main.c    ****  * @param msg, string to print
 568:Src/main.c    ****  * @param row, row to print msg to
 569:Src/main.c    ****  */
 570:Src/main.c    **** void print(char *msg, int row)
 571:Src/main.c    **** {
 184              		.loc 1 571 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              	.LVL13:
 189 0000 38B5     		push	{r3, r4, r5, lr}
 190              	.LCFI5:
 191              		.cfi_def_cfa_offset 16
 192              		.cfi_offset 3, -16
 193              		.cfi_offset 4, -12
 194              		.cfi_offset 5, -8
 195              		.cfi_offset 14, -4
 196 0002 0546     		mov	r5, r0
 572:Src/main.c    ****     if (row == 0)
 197              		.loc 1 572 0
 198 0004 0C46     		mov	r4, r1
 199 0006 11B9     		cbnz	r1, .L17
 573:Src/main.c    ****     {
 574:Src/main.c    ****         ssd1306_Fill(Black);
 200              		.loc 1 574 0
 201 0008 0020     		movs	r0, #0
 202              	.LVL14:
 203 000a FFF7FEFF 		bl	ssd1306_Fill
 204              	.LVL15:
 205              	.L17:
 575:Src/main.c    ****     }
 576:Src/main.c    ****     ssd1306_SetCursor(0, row * 10);
 206              		.loc 1 576 0
 207 000e 04EB8404 		add	r4, r4, r4, lsl #2
 208              	.LVL16:
 209 0012 6100     		lsls	r1, r4, #1
 210 0014 0020     		movs	r0, #0
 211 0016 01F0FE01 		and	r1, r1, #254
 212 001a FFF7FEFF 		bl	ssd1306_SetCursor
 213              	.LVL17:
 577:Src/main.c    ****     ssd1306_WriteString(msg, Font_7x10, White);
 214              		.loc 1 577 0
 215 001e 054B     		ldr	r3, .L19
 216 0020 2846     		mov	r0, r5
 217 0022 93E80600 		ldmia	r3, {r1, r2}
 218 0026 0123     		movs	r3, #1
 219 0028 FFF7FEFF 		bl	ssd1306_WriteString
 220              	.LVL18:
 578:Src/main.c    ****     ssd1306_UpdateScreen();
 221              		.loc 1 578 0
 222 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 223              	.LVL19:
 224 0030 38BD     		pop	{r3, r4, r5, pc}
 225              	.LVL20:
 226              	.L20:
 227 0032 00BF     		.align	2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 15


 228              	.L19:
 229 0034 00000000 		.word	Font_7x10
 230              		.cfi_endproc
 231              	.LFE132:
 233              		.global	__aeabi_d2iz
 234              		.global	__aeabi_i2d
 235              		.section	.text.frequency_comparison,"ax",%progbits
 236              		.align	2
 237              		.global	frequency_comparison
 238              		.thumb
 239              		.thumb_func
 241              	frequency_comparison:
 242              	.LFB131:
 532:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 243              		.loc 1 532 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 32
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              	.LVL21:
 248 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 249              	.LCFI6:
 250              		.cfi_def_cfa_offset 36
 251              		.cfi_offset 4, -36
 252              		.cfi_offset 5, -32
 253              		.cfi_offset 6, -28
 254              		.cfi_offset 7, -24
 255              		.cfi_offset 8, -20
 256              		.cfi_offset 9, -16
 257              		.cfi_offset 10, -12
 258              		.cfi_offset 11, -8
 259              		.cfi_offset 14, -4
 260 0004 8BB0     		sub	sp, sp, #44
 261              	.LCFI7:
 262              		.cfi_def_cfa_offset 80
 263 0006 0390     		str	r0, [sp, #12]
 264 0008 8946     		mov	r9, r1
 533:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 265              		.loc 1 533 0
 266 000a 202A     		cmp	r2, #32
 267 000c 07D0     		beq	.L26
 533:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 268              		.loc 1 533 0 is_stmt 0 discriminator 1
 269 000e 102A     		cmp	r2, #16
 270 0010 02D1     		bne	.L27
 533:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 271              		.loc 1 533 0
 272 0012 4FF00108 		mov	r8, #1
 273 0016 04E0     		b	.L22
 274              	.L27:
 275 0018 4FF00208 		mov	r8, #2
 276 001c 01E0     		b	.L22
 277              	.L26:
 278 001e 4FF00008 		mov	r8, #0
 279              	.L22:
 280              	.LVL22:
 534:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 281              		.loc 1 534 0 is_stmt 1 discriminator 8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 16


 282 0022 4548     		ldr	r0, .L29
 283              	.LVL23:
 284 0024 4549     		ldr	r1, .L29+4
 285              	.LVL24:
 286 0026 4FF44062 		mov	r2, #3072
 287              	.LVL25:
 288 002a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 289              	.LVL26:
 536:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 290              		.loc 1 536 0 discriminator 8
 291 002e 4FF4FA70 		mov	r0, #500
 292 0032 FFF7FEFF 		bl	HAL_Delay
 293              	.LVL27:
 294              	.L25:
 295              	.LBB3:
 540:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
 296              		.loc 1 540 0
 297 0036 0026     		movs	r6, #0
 298 0038 0596     		str	r6, [sp, #20]
 299 003a 0696     		str	r6, [sp, #24]
 300 003c 0796     		str	r6, [sp, #28]
 301 003e 0896     		str	r6, [sp, #32]
 302 0040 ADF82460 		strh	r6, [sp, #36]	@ movhi
 543:Src/main.c    ****         int predec = (int)(val1 / 1);
 303              		.loc 1 543 0
 304 0044 5FFA88F7 		uxtb	r7, r8
 305 0048 DFF804B1 		ldr	fp, .L29+24
 306 004c 0097     		str	r7, [sp]
 307 004e 5846     		mov	r0, fp
 308 0050 45F2DC11 		movw	r1, #20956
 309 0054 039A     		ldr	r2, [sp, #12]
 310 0056 4FF44063 		mov	r3, #3072
 311 005a FFF7FEFF 		bl	goertzel
 312              	.LVL28:
 313 005e 55EC104B 		fmrrd	r4, r5, d0
 314              	.LVL29:
 544:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 315              		.loc 1 544 0
 316 0062 10EE100A 		fmrs	r0, s0	@ int
 317 0066 2946     		mov	r1, r5
 318 0068 FFF7FEFF 		bl	__aeabi_d2iz
 319              	.LVL30:
 320 006c 8246     		mov	r10, r0
 321              	.LVL31:
 545:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 322              		.loc 1 545 0
 323 006e FFF7FEFF 		bl	__aeabi_i2d
 324              	.LVL32:
 325 0072 0246     		mov	r2, r0
 326 0074 0B46     		mov	r3, r1
 327 0076 2046     		mov	r0, r4
 328 0078 2946     		mov	r1, r5
 329 007a FFF7FEFF 		bl	__aeabi_dsub
 330              	.LVL33:
 331 007e 0022     		movs	r2, #0
 332 0080 2F4B     		ldr	r3, .L29+8
 333 0082 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 17


 334              	.LVL34:
 335 0086 FFF7FEFF 		bl	__aeabi_d2iz
 336              	.LVL35:
 337 008a 0346     		mov	r3, r0
 338              	.LVL36:
 546:Src/main.c    ****         print(msg, 0);
 339              		.loc 1 546 0
 340 008c 05A8     		add	r0, sp, #20
 341              	.LVL37:
 342 008e 2D49     		ldr	r1, .L29+12
 343 0090 5246     		mov	r2, r10
 344 0092 FFF7FEFF 		bl	sprintf
 345              	.LVL38:
 547:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 346              		.loc 1 547 0
 347 0096 05A8     		add	r0, sp, #20
 348 0098 3146     		mov	r1, r6
 349 009a FFF7FEFF 		bl	print
 350              	.LVL39:
 548:Src/main.c    ****         //freq2
 351              		.loc 1 548 0
 352 009e 05A8     		add	r0, sp, #20
 353 00a0 FFF7FEFF 		bl	strlen
 354              	.LVL40:
 355 00a4 DFF8ACA0 		ldr	r10, .L29+28
 356              	.LVL41:
 357 00a8 82B2     		uxth	r2, r0
 358 00aa 5046     		mov	r0, r10
 359 00ac 05A9     		add	r1, sp, #20
 360 00ae 4FF6FF73 		movw	r3, #65535
 361 00b2 FFF7FEFF 		bl	HAL_UART_Transmit
 362              	.LVL42:
 550:Src/main.c    ****         predec = (int)(val2 / 1);
 363              		.loc 1 550 0
 364 00b6 0097     		str	r7, [sp]
 365 00b8 5846     		mov	r0, fp
 366 00ba 45F2DC11 		movw	r1, #20956
 367 00be 4A46     		mov	r2, r9
 368 00c0 4FF44063 		mov	r3, #3072
 369 00c4 FFF7FEFF 		bl	goertzel
 370              	.LVL43:
 371 00c8 57EC106B 		fmrrd	r6, r7, d0
 372              	.LVL44:
 551:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 373              		.loc 1 551 0
 374 00cc 10EE100A 		fmrs	r0, s0	@ int
 375 00d0 3946     		mov	r1, r7
 376 00d2 FFF7FEFF 		bl	__aeabi_d2iz
 377              	.LVL45:
 378 00d6 8346     		mov	fp, r0
 379              	.LVL46:
 552:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 380              		.loc 1 552 0
 381 00d8 FFF7FEFF 		bl	__aeabi_i2d
 382              	.LVL47:
 383 00dc 0246     		mov	r2, r0
 384 00de 0B46     		mov	r3, r1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 18


 385 00e0 3046     		mov	r0, r6
 386 00e2 3946     		mov	r1, r7
 387 00e4 FFF7FEFF 		bl	__aeabi_dsub
 388              	.LVL48:
 389 00e8 0022     		movs	r2, #0
 390 00ea 154B     		ldr	r3, .L29+8
 391 00ec FFF7FEFF 		bl	__aeabi_dmul
 392              	.LVL49:
 393 00f0 FFF7FEFF 		bl	__aeabi_d2iz
 394              	.LVL50:
 395 00f4 0346     		mov	r3, r0
 396              	.LVL51:
 553:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 397              		.loc 1 553 0
 398 00f6 05A8     		add	r0, sp, #20
 399              	.LVL52:
 400 00f8 1349     		ldr	r1, .L29+16
 401 00fa 5A46     		mov	r2, fp
 402 00fc FFF7FEFF 		bl	sprintf
 403              	.LVL53:
 554:Src/main.c    ****         //compare
 404              		.loc 1 554 0
 405 0100 05A8     		add	r0, sp, #20
 406 0102 FFF7FEFF 		bl	strlen
 407              	.LVL54:
 408 0106 82B2     		uxth	r2, r0
 409 0108 5046     		mov	r0, r10
 410 010a 05A9     		add	r1, sp, #20
 411 010c 4FF6FF73 		movw	r3, #65535
 412 0110 FFF7FEFF 		bl	HAL_UART_Transmit
 413              	.LVL55:
 556:Src/main.c    ****         {
 414              		.loc 1 556 0
 415 0114 2046     		mov	r0, r4
 416 0116 2946     		mov	r1, r5
 417 0118 3246     		mov	r2, r6
 418 011a 3B46     		mov	r3, r7
 419 011c FFF7FEFF 		bl	__aeabi_dcmpgt
 420              	.LVL56:
 421 0120 0028     		cmp	r0, #0
 422 0122 88D0     		beq	.L25
 423              	.LBE3:
 561:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 424              		.loc 1 561 0
 425 0124 0448     		ldr	r0, .L29
 426 0126 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 427              	.LVL57:
 562:Src/main.c    **** }
 428              		.loc 1 562 0
 429 012a 0022     		movs	r2, #0
 430 012c 074B     		ldr	r3, .L29+20
 431 012e 1A70     		strb	r2, [r3]
 563:Src/main.c    **** 
 432              		.loc 1 563 0
 433 0130 0BB0     		add	sp, sp, #44
 434              	.LCFI8:
 435              		.cfi_def_cfa_offset 36
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 19


 436              		@ sp needed
 437 0132 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 438              	.LVL58:
 439              	.L30:
 440 0136 00BF     		.align	2
 441              	.L29:
 442 0138 00000000 		.word	hadc1
 443 013c 00000000 		.word	dma_buffer
 444 0140 00408F40 		.word	1083129856
 445 0144 00000000 		.word	.LC0
 446 0148 08000000 		.word	.LC1
 447 014c 00000000 		.word	IR_INT_STATE
 448 0150 00000000 		.word	adc_values
 449 0154 00000000 		.word	huart6
 450              		.cfi_endproc
 451              	.LFE131:
 453              		.section	.text.set_motor_speed,"ax",%progbits
 454              		.align	2
 455              		.global	set_motor_speed
 456              		.thumb
 457              		.thumb_func
 459              	set_motor_speed:
 460              	.LFB135:
 579:Src/main.c    **** }
 580:Src/main.c    **** 
 581:Src/main.c    **** PID_t menu()
 582:Src/main.c    **** {
 583:Src/main.c    ****     print("Starting", 0);
 584:Src/main.c    ****     char msg[20] = "";
 585:Src/main.c    ****     int pid_select = 0;
 586:Src/main.c    ****     uint32_t values[3] = {0, 0, 0};
 587:Src/main.c    ****     while (1)
 588:Src/main.c    ****     {
 589:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 590:Src/main.c    ****         {
 591:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 592:Src/main.c    ****             print(msg, 0);
 593:Src/main.c    ****             TIM4->CNT = values[pid_select];
 594:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 595:Src/main.c    ****             {
 596:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 597:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 598:Src/main.c    ****                 print(msg, 0);
 599:Src/main.c    ****             }
 600:Src/main.c    ****             ++pid_select;
 601:Src/main.c    ****         }
 602:Src/main.c    ****         if (pid_select == 3)
 603:Src/main.c    ****             break;
 604:Src/main.c    ****     }
 605:Src/main.c    ****     while (1)
 606:Src/main.c    ****     {
 607:Src/main.c    ****         int speed = 0.3*MOTOR_SPEED;
 608:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 609:Src/main.c    ****         {
 610:Src/main.c    ****             if (pid_select == 3)
 611:Src/main.c    ****             {
 612:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 20


 613:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 614:Src/main.c    ****             }
 615:Src/main.c    ****             else
 616:Src/main.c    ****             {
 617:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 618:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 619:Src/main.c    ****             }
 620:Src/main.c    ****             sprintf(msg, "%d", speed);
 621:Src/main.c    ****             print(msg, 0);
 622:Src/main.c    ****             TIM4->CNT = speed;
 623:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 624:Src/main.c    ****             {
 625:Src/main.c    ****                 speed = TIM4->CNT;
 626:Src/main.c    ****                 sprintf(msg, "%d", speed);
 627:Src/main.c    ****                 print(msg, 0);
 628:Src/main.c    ****                 if (pid_select == 3)
 629:Src/main.c    ****                 {
 630:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, speed);
 631:Src/main.c    ****                     LEFT_SPEED = speed;
 632:Src/main.c    ****                 }
 633:Src/main.c    ****                 else
 634:Src/main.c    ****                 {
 635:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, speed);
 636:Src/main.c    ****                     RIGHT_SPEED = speed;
 637:Src/main.c    ****                 }
 638:Src/main.c    ****             }
 639:Src/main.c    ****             ++pid_select;
 640:Src/main.c    ****         }
 641:Src/main.c    ****         if (pid_select == 5)
 642:Src/main.c    ****         {
 643:Src/main.c    ****             break;
 644:Src/main.c    ****         }
 645:Src/main.c    ****     }
 646:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 647:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 648:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 649:Src/main.c    ****     print(msg, 0);
 650:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 651:Src/main.c    ****     print(msg, 1);
 652:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 653:Src/main.c    ****     print(msg, 2);
 654:Src/main.c    ****     sprintf(msg, "L %u", LEFT_SPEED);
 655:Src/main.c    ****     print(msg, 3);
 656:Src/main.c    ****     sprintf(msg, "R %u", RIGHT_SPEED);
 657:Src/main.c    ****     print(msg, 4);
 658:Src/main.c    ****     HAL_Delay(1000);
 659:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 660:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 661:Src/main.c    ****     return pid_Init(values[0], values[1], values[2], 5, 100);
 662:Src/main.c    **** }
 663:Src/main.c    **** 
 664:Src/main.c    **** void do_pid(PID_t *pid_struct)
 665:Src/main.c    **** {
 666:Src/main.c    ****     /* Read sensors */
 667:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) ? 0 : 1;
 668:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 669:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 21


 670:Src/main.c    ****     /* Get error */
 671:Src/main.c    ****     if (left && right)
 672:Src/main.c    ****     {
 673:Src/main.c    ****         pid_struct->err = 0;
 674:Src/main.c    ****     }
 675:Src/main.c    ****     else if (left && !right)
 676:Src/main.c    ****     {
 677:Src/main.c    ****         pid_struct->err = 1;
 678:Src/main.c    ****     }
 679:Src/main.c    ****     else if (!left && right)
 680:Src/main.c    ****     {
 681:Src/main.c    ****         pid_struct->err = -1;
 682:Src/main.c    ****     }
 683:Src/main.c    ****     else if (!left && !right && (pid_struct->err < 0))
 684:Src/main.c    ****     {
 685:Src/main.c    ****         pid_struct->err = -5;
 686:Src/main.c    ****     }
 687:Src/main.c    ****     else if (!left && !right && (pid_struct->err > 0))
 688:Src/main.c    ****     {
 689:Src/main.c    ****         pid_struct->err = 5;
 690:Src/main.c    ****     }
 691:Src/main.c    **** 
 692:Src/main.c    ****     /* Get gain */
 693:Src/main.c    ****     int16_t gain = pid_GetGain(pid_struct);
 694:Src/main.c    ****     char msg[20] = "";
 695:Src/main.c    ****     sprintf(msg, "%d", (int)gain);
 696:Src/main.c    ****     print(msg, 0);
 697:Src/main.c    ****     /* Set Motor Speeds*/
 698:Src/main.c    ****     int lspeed = LEFT_SPEED;
 699:Src/main.c    ****     int rspeed = RIGHT_SPEED;
 700:Src/main.c    ****     if (gain < 0)
 701:Src/main.c    ****     {
 702:Src/main.c    ****         lspeed = LEFT_SPEED - gain;
 703:Src/main.c    ****     }
 704:Src/main.c    ****     else if (gain > 0)
 705:Src/main.c    ****     {
 706:Src/main.c    ****         rspeed = RIGHT_SPEED + gain;
 707:Src/main.c    ****     }
 708:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 709:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 710:Src/main.c    **** }
 711:Src/main.c    **** 
 712:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 713:Src/main.c    **** {
 461              		.loc 1 713 0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465              		@ link register save eliminated.
 466              	.LVL59:
 714:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 467              		.loc 1 714 0
 468 0000 0346     		mov	r3, r0
 469 0002 18B9     		cbnz	r0, .L32
 715:Src/main.c    ****     {
 716:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 470              		.loc 1 716 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 22


 471 0004 0F4A     		ldr	r2, .L36
 472 0006 1268     		ldr	r2, [r2]
 473 0008 9063     		str	r0, [r2, #56]
 474 000a 13E0     		b	.L33
 475              	.L32:
 717:Src/main.c    ****     }
 718:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 476              		.loc 1 718 0
 477 000c 0428     		cmp	r0, #4
 478 000e 04D1     		bne	.L34
 719:Src/main.c    ****     {
 720:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 479              		.loc 1 720 0
 480 0010 0C4A     		ldr	r2, .L36
 481 0012 1268     		ldr	r2, [r2]
 482 0014 0020     		movs	r0, #0
 483              	.LVL60:
 484 0016 5063     		str	r0, [r2, #52]
 485 0018 0CE0     		b	.L33
 486              	.LVL61:
 487              	.L34:
 721:Src/main.c    ****     }
 722:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 488              		.loc 1 722 0
 489 001a 0828     		cmp	r0, #8
 490 001c 04D1     		bne	.L35
 723:Src/main.c    ****     {
 724:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 491              		.loc 1 724 0
 492 001e 094A     		ldr	r2, .L36
 493 0020 1268     		ldr	r2, [r2]
 494 0022 0020     		movs	r0, #0
 495              	.LVL62:
 496 0024 1064     		str	r0, [r2, #64]
 497 0026 05E0     		b	.L33
 498              	.LVL63:
 499              	.L35:
 725:Src/main.c    ****     }
 726:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 500              		.loc 1 726 0
 501 0028 0C28     		cmp	r0, #12
 502 002a 03D1     		bne	.L33
 727:Src/main.c    ****     {
 728:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 503              		.loc 1 728 0
 504 002c 054A     		ldr	r2, .L36
 505 002e 1268     		ldr	r2, [r2]
 506 0030 0020     		movs	r0, #0
 507              	.LVL64:
 508 0032 D063     		str	r0, [r2, #60]
 509              	.L33:
 729:Src/main.c    ****     }
 730:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 510              		.loc 1 730 0
 511 0034 034A     		ldr	r2, .L36
 512 0036 1268     		ldr	r2, [r2]
 513 0038 3432     		adds	r2, r2, #52
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 23


 514 003a 9B08     		lsrs	r3, r3, #2
 515              	.LVL65:
 516 003c 42F82310 		str	r1, [r2, r3, lsl #2]
 517 0040 7047     		bx	lr
 518              	.L37:
 519 0042 00BF     		.align	2
 520              	.L36:
 521 0044 00000000 		.word	htim1
 522              		.cfi_endproc
 523              	.LFE135:
 525              		.global	__aeabi_f2d
 526              		.global	__aeabi_d2uiz
 527              		.global	__aeabi_dcmplt
 528              		.section	.text.turn,"ax",%progbits
 529              		.align	2
 530              		.global	turn
 531              		.thumb
 532              		.thumb_func
 534              	turn:
 535              	.LFB126:
 371:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 536              		.loc 1 371 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 24
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 541              	.LCFI9:
 542              		.cfi_def_cfa_offset 20
 543              		.cfi_offset 4, -20
 544              		.cfi_offset 5, -16
 545              		.cfi_offset 6, -12
 546              		.cfi_offset 7, -8
 547              		.cfi_offset 14, -4
 548 0002 2DED028B 		fstmfdd	sp!, {d8}
 549              	.LCFI10:
 550              		.cfi_def_cfa_offset 28
 551              		.cfi_offset 80, -28
 552              		.cfi_offset 81, -24
 553 0006 87B0     		sub	sp, sp, #28
 554              	.LCFI11:
 555              		.cfi_def_cfa_offset 56
 372:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 556              		.loc 1 372 0
 557 0008 5F48     		ldr	r0, .L51+16
 558 000a 6049     		ldr	r1, .L51+20
 559 000c 4FF44062 		mov	r2, #3072
 560 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 561              	.LVL66:
 374:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 562              		.loc 1 374 0
 563 0014 3220     		movs	r0, #50
 564 0016 FFF7FEFF 		bl	HAL_Delay
 565              	.LVL67:
 375:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 566              		.loc 1 375 0
 567 001a 5D4B     		ldr	r3, .L51+24
 568 001c 5869     		ldr	r0, [r3, #20]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 24


 569 001e FFF7FEFF 		bl	calculate_heading
 570              	.LVL68:
 571 0022 B0EE408A 		fcpys	s16, s0
 572              	.LVL69:
 376:Src/main.c    ****     TIM4->CNT = 0;
 573              		.loc 1 376 0
 574 0026 F0EEC07A 		fabss	s15, s0
 575 002a 17EE900A 		fmrs	r0, s15
 576 002e FFF7FEFF 		bl	__aeabi_f2d
 577              	.LVL70:
 578 0032 0022     		movs	r2, #0
 579 0034 574B     		ldr	r3, .L51+28
 580 0036 FFF7FEFF 		bl	__aeabi_dmul
 581              	.LVL71:
 582 003a FFF7FEFF 		bl	__aeabi_d2uiz
 583              	.LVL72:
 584 003e 85B2     		uxth	r5, r0
 585              	.LVL73:
 377:Src/main.c    ****     TIM5->CNT = 0;
 586              		.loc 1 377 0
 587 0040 0024     		movs	r4, #0
 588 0042 554B     		ldr	r3, .L51+32
 589 0044 5C62     		str	r4, [r3, #36]
 378:Src/main.c    ****     
 590              		.loc 1 378 0
 591 0046 03F58063 		add	r3, r3, #1024
 592 004a 5C62     		str	r4, [r3, #36]
 380:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 593              		.loc 1 380 0
 594 004c 0194     		str	r4, [sp, #4]
 595 004e 0294     		str	r4, [sp, #8]
 596 0050 0394     		str	r4, [sp, #12]
 597 0052 0494     		str	r4, [sp, #16]
 598 0054 ADF81440 		strh	r4, [sp, #20]	@ movhi
 381:Src/main.c    ****     print(msg, 0);
 599              		.loc 1 381 0
 600 0058 01A8     		add	r0, sp, #4
 601 005a 5049     		ldr	r1, .L51+36
 602 005c 2A46     		mov	r2, r5
 603 005e FFF7FEFF 		bl	sprintf
 604              	.LVL74:
 382:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 605              		.loc 1 382 0
 606 0062 01A8     		add	r0, sp, #4
 607 0064 2146     		mov	r1, r4
 608 0066 FFF7FEFF 		bl	print
 609              	.LVL75:
 383:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 610              		.loc 1 383 0
 611 006a BDEEC87A 		ftosizs	s14, s16
 612              	.LVL76:
 384:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 613              		.loc 1 384 0
 614 006e F8EEC77A 		fsitos	s15, s14
 615 0072 78EE677A 		fsubs	s15, s16, s15
 616 0076 DFED4A6A 		flds	s13, .L51+40
 617 007a 67EEA67A 		fmuls	s15, s15, s13
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 25


 618              	.LVL77:
 385:Src/main.c    ****     print(msg, 2);
 619              		.loc 1 385 0
 620 007e 01A8     		add	r0, sp, #4
 621 0080 4849     		ldr	r1, .L51+44
 622 0082 17EE102A 		fmrs	r2, s14	@ int
 623 0086 FDEEE77A 		ftosizs	s15, s15
 624              	.LVL78:
 625 008a 17EE903A 		fmrs	r3, s15	@ int
 626 008e FFF7FEFF 		bl	sprintf
 627              	.LVL79:
 386:Src/main.c    ****     
 628              		.loc 1 386 0
 629 0092 01A8     		add	r0, sp, #4
 630 0094 0221     		movs	r1, #2
 631 0096 FFF7FEFF 		bl	print
 632              	.LVL80:
 388:Src/main.c    ****     {
 633              		.loc 1 388 0
 634 009a 18EE100A 		fmrs	r0, s16
 635 009e FFF7FEFF 		bl	__aeabi_f2d
 636              	.LVL81:
 637 00a2 0646     		mov	r6, r0
 638 00a4 0F46     		mov	r7, r1
 639 00a6 34A3     		adr	r3, .L51
 640 00a8 D3E90023 		ldrd	r2, [r3]
 641 00ac FFF7FEFF 		bl	__aeabi_dcmplt
 642              	.LVL82:
 643 00b0 20B3     		cbz	r0, .L49
 390:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 644              		.loc 1 390 0
 645 00b2 2046     		mov	r0, r4
 646 00b4 2146     		mov	r1, r4
 647 00b6 FFF7FEFF 		bl	set_motor_speed
 648              	.LVL83:
 391:Src/main.c    ****         while (TIM5->CNT < counts)
 649              		.loc 1 391 0
 650 00ba 0820     		movs	r0, #8
 651 00bc 3A4B     		ldr	r3, .L51+48
 652 00be 1988     		ldrh	r1, [r3]
 653 00c0 FFF7FEFF 		bl	set_motor_speed
 654              	.LVL84:
 392:Src/main.c    ****         {
 655              		.loc 1 392 0
 656 00c4 09E0     		b	.L41
 657              	.L42:
 394:Src/main.c    ****             print(msg, 4);
 658              		.loc 1 394 0
 659 00c6 394B     		ldr	r3, .L51+52
 660 00c8 5A6A     		ldr	r2, [r3, #36]
 661 00ca 01A8     		add	r0, sp, #4
 662 00cc 3849     		ldr	r1, .L51+56
 663 00ce FFF7FEFF 		bl	sprintf
 664              	.LVL85:
 395:Src/main.c    ****         }
 665              		.loc 1 395 0
 666 00d2 01A8     		add	r0, sp, #4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 26


 667 00d4 0421     		movs	r1, #4
 668 00d6 FFF7FEFF 		bl	print
 669              	.LVL86:
 670              	.L41:
 392:Src/main.c    ****         {
 671              		.loc 1 392 0
 672 00da 344B     		ldr	r3, .L51+52
 673 00dc 5B6A     		ldr	r3, [r3, #36]
 674 00de AB42     		cmp	r3, r5
 675 00e0 F1D3     		bcc	.L42
 397:Src/main.c    ****         print(msg, 4);
 676              		.loc 1 397 0
 677 00e2 324C     		ldr	r4, .L51+52
 678 00e4 626A     		ldr	r2, [r4, #36]
 679 00e6 01A8     		add	r0, sp, #4
 680 00e8 3149     		ldr	r1, .L51+56
 681 00ea FFF7FEFF 		bl	sprintf
 682              	.LVL87:
 398:Src/main.c    ****         TIM5->CNT = 0;
 683              		.loc 1 398 0
 684 00ee 01A8     		add	r0, sp, #4
 685 00f0 0421     		movs	r1, #4
 686 00f2 FFF7FEFF 		bl	print
 687              	.LVL88:
 399:Src/main.c    ****     }
 688              		.loc 1 399 0
 689 00f6 0023     		movs	r3, #0
 690 00f8 6362     		str	r3, [r4, #36]
 691 00fa 2BE0     		b	.L43
 692              	.L49:
 401:Src/main.c    ****     {
 693              		.loc 1 401 0
 694 00fc 3046     		mov	r0, r6
 695 00fe 3946     		mov	r1, r7
 696 0100 1FA3     		adr	r3, .L51+8
 697 0102 D3E90023 		ldrd	r2, [r3]
 698 0106 FFF7FEFF 		bl	__aeabi_dcmpgt
 699              	.LVL89:
 700 010a 18B3     		cbz	r0, .L43
 403:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 701              		.loc 1 403 0
 702 010c 0020     		movs	r0, #0
 703 010e 294B     		ldr	r3, .L51+60
 704 0110 1988     		ldrh	r1, [r3]
 705 0112 FFF7FEFF 		bl	set_motor_speed
 706              	.LVL90:
 404:Src/main.c    ****         while (TIM4->CNT < counts)
 707              		.loc 1 404 0
 708 0116 0820     		movs	r0, #8
 709 0118 0021     		movs	r1, #0
 710 011a FFF7FEFF 		bl	set_motor_speed
 711              	.LVL91:
 405:Src/main.c    ****         {
 712              		.loc 1 405 0
 713 011e 09E0     		b	.L45
 714              	.L46:
 407:Src/main.c    ****             print(msg, 4);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 27


 715              		.loc 1 407 0
 716 0120 1D4B     		ldr	r3, .L51+32
 717 0122 5A6A     		ldr	r2, [r3, #36]
 718 0124 01A8     		add	r0, sp, #4
 719 0126 2449     		ldr	r1, .L51+64
 720 0128 FFF7FEFF 		bl	sprintf
 721              	.LVL92:
 408:Src/main.c    ****         }
 722              		.loc 1 408 0
 723 012c 01A8     		add	r0, sp, #4
 724 012e 0421     		movs	r1, #4
 725 0130 FFF7FEFF 		bl	print
 726              	.LVL93:
 727              	.L45:
 405:Src/main.c    ****         {
 728              		.loc 1 405 0
 729 0134 184B     		ldr	r3, .L51+32
 730 0136 5B6A     		ldr	r3, [r3, #36]
 731 0138 AB42     		cmp	r3, r5
 732 013a F1D3     		bcc	.L46
 410:Src/main.c    ****         print(msg, 4);
 733              		.loc 1 410 0
 734 013c 164C     		ldr	r4, .L51+32
 735 013e 626A     		ldr	r2, [r4, #36]
 736 0140 01A8     		add	r0, sp, #4
 737 0142 1D49     		ldr	r1, .L51+64
 738 0144 FFF7FEFF 		bl	sprintf
 739              	.LVL94:
 411:Src/main.c    ****         TIM4->CNT = 0;
 740              		.loc 1 411 0
 741 0148 01A8     		add	r0, sp, #4
 742 014a 0421     		movs	r1, #4
 743 014c FFF7FEFF 		bl	print
 744              	.LVL95:
 412:Src/main.c    ****     }
 745              		.loc 1 412 0
 746 0150 0023     		movs	r3, #0
 747 0152 6362     		str	r3, [r4, #36]
 748              	.L43:
 414:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 749              		.loc 1 414 0
 750 0154 0020     		movs	r0, #0
 751 0156 0146     		mov	r1, r0
 752 0158 FFF7FEFF 		bl	set_motor_speed
 753              	.LVL96:
 415:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 754              		.loc 1 415 0
 755 015c 0820     		movs	r0, #8
 756 015e 0021     		movs	r1, #0
 757 0160 FFF7FEFF 		bl	set_motor_speed
 758              	.LVL97:
 416:Src/main.c    **** }
 759              		.loc 1 416 0
 760 0164 0848     		ldr	r0, .L51+16
 761 0166 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 762              	.LVL98:
 417:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 28


 763              		.loc 1 417 0
 764 016a 07B0     		add	sp, sp, #28
 765              	.LCFI12:
 766              		.cfi_def_cfa_offset 28
 767              		@ sp needed
 768 016c BDEC028B 		fldmfdd	sp!, {d8}
 769              	.LCFI13:
 770              		.cfi_restore 80
 771              		.cfi_restore 81
 772              		.cfi_def_cfa_offset 20
 773              	.LVL99:
 774 0170 F0BD     		pop	{r4, r5, r6, r7, pc}
 775              	.LVL100:
 776              	.L52:
 777 0172 00BFAFF3 		.align	3
 777      0080
 778              	.L51:
 779 0178 7B14AE47 		.word	1202590843
 780 017c E17AA4BF 		.word	-1079739679
 781 0180 7B14AE47 		.word	1202590843
 782 0184 E17AA43F 		.word	1067743969
 783 0188 00000000 		.word	hadc1
 784 018c 00000000 		.word	dma_buffer
 785 0190 00000000 		.word	adc_values
 786 0194 00005940 		.word	1079574528
 787 0198 00080040 		.word	1073743872
 788 019c 10000000 		.word	.LC2
 789 01a0 00007A44 		.word	1148846080
 790 01a4 1C000000 		.word	.LC3
 791 01a8 00000000 		.word	.LANCHOR0
 792 01ac 000C0040 		.word	1073744896
 793 01b0 28000000 		.word	.LC4
 794 01b4 00000000 		.word	.LANCHOR1
 795 01b8 38000000 		.word	.LC5
 796              		.cfi_endproc
 797              	.LFE126:
 799              		.global	__aeabi_dadd
 800              		.section	.text.turn_deg,"ax",%progbits
 801              		.align	2
 802              		.global	turn_deg
 803              		.thumb
 804              		.thumb_func
 806              	turn_deg:
 807              	.LFB127:
 424:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 808              		.loc 1 424 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 24
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812              	.LVL101:
 813 0000 30B5     		push	{r4, r5, lr}
 814              	.LCFI14:
 815              		.cfi_def_cfa_offset 12
 816              		.cfi_offset 4, -12
 817              		.cfi_offset 5, -8
 818              		.cfi_offset 14, -4
 819 0002 87B0     		sub	sp, sp, #28
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 29


 820              	.LCFI15:
 821              		.cfi_def_cfa_offset 40
 822 0004 0546     		mov	r5, r0
 425:Src/main.c    ****         uint16_t counts = 50.0 / 90.0 * (deg-90) + 50;
 823              		.loc 1 425 0
 824 0006 2C48     		ldr	r0, .L58+8
 825              	.LVL102:
 826 0008 2C49     		ldr	r1, .L58+12
 827 000a 4FF44062 		mov	r2, #3072
 828 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 829              	.LVL103:
 426:Src/main.c    ****         TIM4->CNT = 0;
 830              		.loc 1 426 0
 831 0012 A5F15A00 		sub	r0, r5, #90
 832 0016 FFF7FEFF 		bl	__aeabi_i2d
 833              	.LVL104:
 834 001a 25A3     		adr	r3, .L58
 835 001c D3E90023 		ldrd	r2, [r3]
 836 0020 FFF7FEFF 		bl	__aeabi_dmul
 837              	.LVL105:
 838 0024 0022     		movs	r2, #0
 839 0026 264B     		ldr	r3, .L58+16
 840 0028 FFF7FEFF 		bl	__aeabi_dadd
 841              	.LVL106:
 842 002c FFF7FEFF 		bl	__aeabi_d2uiz
 843              	.LVL107:
 844 0030 84B2     		uxth	r4, r0
 845              	.LVL108:
 427:Src/main.c    ****         TIM5->CNT = 0;
 846              		.loc 1 427 0
 847 0032 0023     		movs	r3, #0
 848 0034 234A     		ldr	r2, .L58+20
 849 0036 5362     		str	r3, [r2, #36]
 428:Src/main.c    ****         
 850              		.loc 1 428 0
 851 0038 02F58062 		add	r2, r2, #1024
 852 003c 5362     		str	r3, [r2, #36]
 430:Src/main.c    ****         
 853              		.loc 1 430 0
 854 003e 0193     		str	r3, [sp, #4]
 855 0040 0293     		str	r3, [sp, #8]
 856 0042 0393     		str	r3, [sp, #12]
 857 0044 0493     		str	r3, [sp, #16]
 858 0046 ADF81430 		strh	r3, [sp, #20]	@ movhi
 432:Src/main.c    ****         {
 859              		.loc 1 432 0
 860 004a 1DB3     		cbz	r5, .L54
 434:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 30000);
 861              		.loc 1 434 0
 862 004c 1846     		mov	r0, r3
 863 004e 1946     		mov	r1, r3
 864 0050 FFF7FEFF 		bl	set_motor_speed
 865              	.LVL109:
 435:Src/main.c    ****             while (TIM5->CNT < counts)
 866              		.loc 1 435 0
 867 0054 0820     		movs	r0, #8
 868 0056 47F23051 		movw	r1, #30000
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 30


 869 005a FFF7FEFF 		bl	set_motor_speed
 870              	.LVL110:
 436:Src/main.c    ****             {
 871              		.loc 1 436 0
 872 005e 09E0     		b	.L55
 873              	.L56:
 438:Src/main.c    ****                 print(msg, 4);
 874              		.loc 1 438 0
 875 0060 194B     		ldr	r3, .L58+24
 876 0062 5A6A     		ldr	r2, [r3, #36]
 877 0064 01A8     		add	r0, sp, #4
 878 0066 1949     		ldr	r1, .L58+28
 879 0068 FFF7FEFF 		bl	sprintf
 880              	.LVL111:
 439:Src/main.c    ****             }
 881              		.loc 1 439 0
 882 006c 01A8     		add	r0, sp, #4
 883 006e 0421     		movs	r1, #4
 884 0070 FFF7FEFF 		bl	print
 885              	.LVL112:
 886              	.L55:
 436:Src/main.c    ****             {
 887              		.loc 1 436 0
 888 0074 144B     		ldr	r3, .L58+24
 889 0076 5B6A     		ldr	r3, [r3, #36]
 890 0078 A342     		cmp	r3, r4
 891 007a F1D3     		bcc	.L56
 441:Src/main.c    ****             print(msg, 4);
 892              		.loc 1 441 0
 893 007c 124C     		ldr	r4, .L58+24
 894              	.LVL113:
 895 007e 626A     		ldr	r2, [r4, #36]
 896 0080 01A8     		add	r0, sp, #4
 897 0082 1249     		ldr	r1, .L58+28
 898 0084 FFF7FEFF 		bl	sprintf
 899              	.LVL114:
 442:Src/main.c    ****             TIM5->CNT = 0;
 900              		.loc 1 442 0
 901 0088 01A8     		add	r0, sp, #4
 902 008a 0421     		movs	r1, #4
 903 008c FFF7FEFF 		bl	print
 904              	.LVL115:
 443:Src/main.c    ****         }
 905              		.loc 1 443 0
 906 0090 0023     		movs	r3, #0
 907 0092 6362     		str	r3, [r4, #36]
 908              	.L54:
 458:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 909              		.loc 1 458 0
 910 0094 0020     		movs	r0, #0
 911 0096 0146     		mov	r1, r0
 912 0098 FFF7FEFF 		bl	set_motor_speed
 913              	.LVL116:
 459:Src/main.c    ****         HAL_ADC_Stop_DMA(&hadc1);
 914              		.loc 1 459 0
 915 009c 0820     		movs	r0, #8
 916 009e 0021     		movs	r1, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 31


 917 00a0 FFF7FEFF 		bl	set_motor_speed
 918              	.LVL117:
 460:Src/main.c    **** }
 919              		.loc 1 460 0
 920 00a4 0448     		ldr	r0, .L58+8
 921 00a6 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 922              	.LVL118:
 461:Src/main.c    **** 
 923              		.loc 1 461 0
 924 00aa 07B0     		add	sp, sp, #28
 925              	.LCFI16:
 926              		.cfi_def_cfa_offset 12
 927              		@ sp needed
 928 00ac 30BD     		pop	{r4, r5, pc}
 929              	.L59:
 930 00ae 00BF     		.align	3
 931              	.L58:
 932 00b0 721CC771 		.word	1908874354
 933 00b4 1CC7E13F 		.word	1071761180
 934 00b8 00000000 		.word	hadc1
 935 00bc 00000000 		.word	dma_buffer
 936 00c0 00004940 		.word	1078525952
 937 00c4 00080040 		.word	1073743872
 938 00c8 000C0040 		.word	1073744896
 939 00cc 28000000 		.word	.LC4
 940              		.cfi_endproc
 941              	.LFE127:
 943              		.section	.text.pi_navigation,"ax",%progbits
 944              		.align	2
 945              		.global	pi_navigation
 946              		.thumb
 947              		.thumb_func
 949              	pi_navigation:
 950              	.LFB128:
 464:Src/main.c    ****     print("Pi nav", 0);
 951              		.loc 1 464 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 0
 954              		@ frame_needed = 0, uses_anonymous_args = 0
 955 0000 08B5     		push	{r3, lr}
 956              	.LCFI17:
 957              		.cfi_def_cfa_offset 8
 958              		.cfi_offset 3, -8
 959              		.cfi_offset 14, -4
 960 0002 2DED028B 		fstmfdd	sp!, {d8}
 961              	.LCFI18:
 962              		.cfi_def_cfa_offset 16
 963              		.cfi_offset 80, -16
 964              		.cfi_offset 81, -12
 465:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 965              		.loc 1 465 0
 966 0006 2948     		ldr	r0, .L69
 967 0008 0021     		movs	r1, #0
 968 000a FFF7FEFF 		bl	print
 969              	.LVL119:
 466:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 970              		.loc 1 466 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 32


 971 000e 2848     		ldr	r0, .L69+4
 972 0010 2849     		ldr	r1, .L69+8
 973 0012 4FF44062 		mov	r2, #3072
 974 0016 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 975              	.LVL120:
 468:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
 976              		.loc 1 468 0
 977 001a 4FF4FA70 		mov	r0, #500
 978 001e FFF7FEFF 		bl	HAL_Delay
 979              	.LVL121:
 469:Src/main.c    ****     if (heading < 0)
 980              		.loc 1 469 0
 981 0022 254B     		ldr	r3, .L69+12
 982 0024 5869     		ldr	r0, [r3, #20]
 983 0026 FFF7FEFF 		bl	calculate_heading
 984              	.LVL122:
 985 002a B0EE408A 		fcpys	s16, s0
 986              	.LVL123:
 470:Src/main.c    ****     {
 987              		.loc 1 470 0
 988 002e B5EEC00A 		fcmpezs	s0
 989 0032 F1EE10FA 		fmstat
 990 0036 0CD5     		bpl	.L67
 472:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0.3*MOTOR_SPEED);
 991              		.loc 1 472 0
 992 0038 0420     		movs	r0, #4
 993 003a 4FF49671 		mov	r1, #300
 994 003e FFF7FEFF 		bl	set_motor_speed
 995              	.LVL124:
 473:Src/main.c    ****         heading *= -1;
 996              		.loc 1 473 0
 997 0042 0820     		movs	r0, #8
 998 0044 4FF49671 		mov	r1, #300
 999 0048 FFF7FEFF 		bl	set_motor_speed
 1000              	.LVL125:
 474:Src/main.c    ****     }
 1001              		.loc 1 474 0
 1002 004c B1EE488A 		fnegs	s16, s16
 1003              	.LVL126:
 1004 0050 0EE0     		b	.L63
 1005              	.LVL127:
 1006              	.L67:
 476:Src/main.c    ****     {
 1007              		.loc 1 476 0
 1008 0052 B5EEC00A 		fcmpezs	s0
 1009 0056 F1EE10FA 		fmstat
 1010 005a 09DD     		ble	.L63
 478:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 0.3*MOTOR_SPEED);
 1011              		.loc 1 478 0
 1012 005c 0020     		movs	r0, #0
 1013 005e 4FF49671 		mov	r1, #300
 1014 0062 FFF7FEFF 		bl	set_motor_speed
 1015              	.LVL128:
 479:Src/main.c    ****     }
 1016              		.loc 1 479 0
 1017 0066 0C20     		movs	r0, #12
 1018 0068 4FF49671 		mov	r1, #300
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 33


 1019 006c FFF7FEFF 		bl	set_motor_speed
 1020              	.LVL129:
 1021              	.L63:
 481:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0.3*MOTOR_SPEED);
 1022              		.loc 1 481 0
 1023 0070 DFED127A 		flds	s15, .L69+16
 1024 0074 28EE278A 		fmuls	s16, s16, s15
 1025              	.LVL130:
 1026 0078 FCEEC87A 		ftouizs	s15, s16
 1027 007c 17EE900A 		fmrs	r0, s15	@ int
 1028 0080 FFF7FEFF 		bl	HAL_Delay
 1029              	.LVL131:
 482:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0.3*MOTOR_SPEED);
 1030              		.loc 1 482 0
 1031 0084 0020     		movs	r0, #0
 1032 0086 4FF49671 		mov	r1, #300
 1033 008a FFF7FEFF 		bl	set_motor_speed
 1034              	.LVL132:
 483:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 1035              		.loc 1 483 0
 1036 008e 0820     		movs	r0, #8
 1037 0090 4FF49671 		mov	r1, #300
 1038 0094 FFF7FEFF 		bl	set_motor_speed
 1039              	.LVL133:
 484:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 1040              		.loc 1 484 0
 1041 0098 0548     		ldr	r0, .L69+4
 1042 009a FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1043              	.LVL134:
 485:Src/main.c    **** }
 1044              		.loc 1 485 0
 1045 009e 0022     		movs	r2, #0
 1046 00a0 074B     		ldr	r3, .L69+20
 1047 00a2 1A70     		strb	r2, [r3]
 486:Src/main.c    **** 
 1048              		.loc 1 486 0
 1049 00a4 BDEC028B 		fldmfdd	sp!, {d8}
 1050              	.LCFI19:
 1051              		.cfi_restore 80
 1052              		.cfi_restore 81
 1053              		.cfi_def_cfa_offset 8
 1054 00a8 08BD     		pop	{r3, pc}
 1055              	.L70:
 1056 00aa 00BF     		.align	2
 1057              	.L69:
 1058 00ac 48000000 		.word	.LC6
 1059 00b0 00000000 		.word	hadc1
 1060 00b4 00000000 		.word	dma_buffer
 1061 00b8 00000000 		.word	adc_values
 1062 00bc 0000FA44 		.word	1157234688
 1063 00c0 00000000 		.word	PI_INT_STATE
 1064              		.cfi_endproc
 1065              	.LFE128:
 1067              		.section	.text.menu,"ax",%progbits
 1068              		.align	2
 1069              		.global	menu
 1070              		.thumb
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 34


 1071              		.thumb_func
 1073              	menu:
 1074              	.LFB133:
 582:Src/main.c    ****     print("Starting", 0);
 1075              		.loc 1 582 0
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 32
 1078              		@ frame_needed = 0, uses_anonymous_args = 0
 1079              	.LVL135:
 1080 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1081              	.LCFI20:
 1082              		.cfi_def_cfa_offset 24
 1083              		.cfi_offset 4, -24
 1084              		.cfi_offset 5, -20
 1085              		.cfi_offset 6, -16
 1086              		.cfi_offset 7, -12
 1087              		.cfi_offset 8, -8
 1088              		.cfi_offset 14, -4
 1089 0004 8AB0     		sub	sp, sp, #40
 1090              	.LCFI21:
 1091              		.cfi_def_cfa_offset 64
 1092 0006 0646     		mov	r6, r0
 583:Src/main.c    ****     char msg[20] = "";
 1093              		.loc 1 583 0
 1094 0008 7148     		ldr	r0, .L85
 1095              	.LVL136:
 1096 000a 0021     		movs	r1, #0
 1097 000c FFF7FEFF 		bl	print
 1098              	.LVL137:
 584:Src/main.c    ****     int pid_select = 0;
 1099              		.loc 1 584 0
 1100 0010 0025     		movs	r5, #0
 1101 0012 0595     		str	r5, [sp, #20]
 1102 0014 0695     		str	r5, [sp, #24]
 1103 0016 0795     		str	r5, [sp, #28]
 1104 0018 0895     		str	r5, [sp, #32]
 1105 001a 0995     		str	r5, [sp, #36]
 1106              	.LVL138:
 586:Src/main.c    ****     while (1)
 1107              		.loc 1 586 0
 1108 001c 0295     		str	r5, [sp, #8]
 1109 001e 0395     		str	r5, [sp, #12]
 1110 0020 0495     		str	r5, [sp, #16]
 1111              	.LVL139:
 1112              	.L75:
 589:Src/main.c    ****         {
 1113              		.loc 1 589 0
 1114 0022 6C48     		ldr	r0, .L85+4
 1115 0024 4FF40051 		mov	r1, #8192
 1116 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1117              	.LVL140:
 1118 002c 38BB     		cbnz	r0, .L72
 591:Src/main.c    ****             print(msg, 0);
 1119              		.loc 1 591 0
 1120 002e 0AAB     		add	r3, sp, #40
 1121 0030 03EB8503 		add	r3, r3, r5, lsl #2
 1122 0034 53F8204C 		ldr	r4, [r3, #-32]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 35


 1123 0038 05A8     		add	r0, sp, #20
 1124 003a 6749     		ldr	r1, .L85+8
 1125 003c 2246     		mov	r2, r4
 1126 003e FFF7FEFF 		bl	sprintf
 1127              	.LVL141:
 592:Src/main.c    ****             TIM4->CNT = values[pid_select];
 1128              		.loc 1 592 0
 1129 0042 05A8     		add	r0, sp, #20
 1130 0044 0021     		movs	r1, #0
 1131 0046 FFF7FEFF 		bl	print
 1132              	.LVL142:
 593:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 1133              		.loc 1 593 0
 1134 004a 644B     		ldr	r3, .L85+12
 1135 004c 5C62     		str	r4, [r3, #36]
 594:Src/main.c    ****             {
 1136              		.loc 1 594 0
 1137 004e 0EE0     		b	.L73
 1138              	.L74:
 596:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 1139              		.loc 1 596 0
 1140 0050 624B     		ldr	r3, .L85+12
 1141 0052 5A6A     		ldr	r2, [r3, #36]
 1142 0054 0AAB     		add	r3, sp, #40
 1143 0056 03EB8503 		add	r3, r3, r5, lsl #2
 1144 005a 43F8202C 		str	r2, [r3, #-32]
 597:Src/main.c    ****                 print(msg, 0);
 1145              		.loc 1 597 0
 1146 005e 05A8     		add	r0, sp, #20
 1147 0060 5D49     		ldr	r1, .L85+8
 1148 0062 FFF7FEFF 		bl	sprintf
 1149              	.LVL143:
 598:Src/main.c    ****             }
 1150              		.loc 1 598 0
 1151 0066 05A8     		add	r0, sp, #20
 1152 0068 0021     		movs	r1, #0
 1153 006a FFF7FEFF 		bl	print
 1154              	.LVL144:
 1155              	.L73:
 594:Src/main.c    ****             {
 1156              		.loc 1 594 0
 1157 006e 5948     		ldr	r0, .L85+4
 1158 0070 4FF40051 		mov	r1, #8192
 1159 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1160              	.LVL145:
 1161 0078 0028     		cmp	r0, #0
 1162 007a E9D0     		beq	.L74
 600:Src/main.c    ****         }
 1163              		.loc 1 600 0
 1164 007c 0135     		adds	r5, r5, #1
 1165              	.LVL146:
 1166              	.L72:
 602:Src/main.c    ****             break;
 1167              		.loc 1 602 0
 1168 007e 032D     		cmp	r5, #3
 1169 0080 CFD1     		bne	.L75
 1170              	.L83:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 36


 1171              	.LVL147:
 1172              	.LBB4:
 608:Src/main.c    ****         {
 1173              		.loc 1 608 0
 1174 0082 5448     		ldr	r0, .L85+4
 1175 0084 4FF40051 		mov	r1, #8192
 1176 0088 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1177              	.LVL148:
 1178 008c 0028     		cmp	r0, #0
 1179 008e 45D1     		bne	.L76
 610:Src/main.c    ****             {
 1180              		.loc 1 610 0
 1181 0090 032D     		cmp	r5, #3
 1182 0092 09D1     		bne	.L77
 612:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 1183              		.loc 1 612 0
 1184 0094 524C     		ldr	r4, .L85+16
 1185 0096 2046     		mov	r0, r4
 1186 0098 0021     		movs	r1, #0
 1187 009a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1188              	.LVL149:
 613:Src/main.c    ****             }
 1189              		.loc 1 613 0
 1190 009e 2046     		mov	r0, r4
 1191 00a0 0821     		movs	r1, #8
 1192 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1193              	.LVL150:
 1194 00a6 08E0     		b	.L78
 1195              	.L77:
 617:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1196              		.loc 1 617 0
 1197 00a8 4D4C     		ldr	r4, .L85+16
 1198 00aa 2046     		mov	r0, r4
 1199 00ac 0021     		movs	r1, #0
 1200 00ae FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1201              	.LVL151:
 618:Src/main.c    ****             }
 1202              		.loc 1 618 0
 1203 00b2 2046     		mov	r0, r4
 1204 00b4 0821     		movs	r1, #8
 1205 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1206              	.LVL152:
 1207              	.L78:
 620:Src/main.c    ****             print(msg, 0);
 1208              		.loc 1 620 0
 1209 00ba 05A8     		add	r0, sp, #20
 1210 00bc 4949     		ldr	r1, .L85+20
 1211 00be 4FF49672 		mov	r2, #300
 1212 00c2 FFF7FEFF 		bl	sprintf
 1213              	.LVL153:
 621:Src/main.c    ****             TIM4->CNT = speed;
 1214              		.loc 1 621 0
 1215 00c6 05A8     		add	r0, sp, #20
 1216 00c8 0021     		movs	r1, #0
 1217 00ca FFF7FEFF 		bl	print
 1218              	.LVL154:
 622:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 37


 1219              		.loc 1 622 0
 1220 00ce 4FF49672 		mov	r2, #300
 1221 00d2 424B     		ldr	r3, .L85+12
 1222 00d4 5A62     		str	r2, [r3, #36]
 623:Src/main.c    ****             {
 1223              		.loc 1 623 0
 1224 00d6 19E0     		b	.L79
 1225              	.LVL155:
 1226              	.L82:
 625:Src/main.c    ****                 sprintf(msg, "%d", speed);
 1227              		.loc 1 625 0
 1228 00d8 404B     		ldr	r3, .L85+12
 1229 00da 5C6A     		ldr	r4, [r3, #36]
 1230              	.LVL156:
 626:Src/main.c    ****                 print(msg, 0);
 1231              		.loc 1 626 0
 1232 00dc 05A8     		add	r0, sp, #20
 1233 00de 4149     		ldr	r1, .L85+20
 1234 00e0 2246     		mov	r2, r4
 1235 00e2 FFF7FEFF 		bl	sprintf
 1236              	.LVL157:
 627:Src/main.c    ****                 if (pid_select == 3)
 1237              		.loc 1 627 0
 1238 00e6 05A8     		add	r0, sp, #20
 1239 00e8 0021     		movs	r1, #0
 1240 00ea FFF7FEFF 		bl	print
 1241              	.LVL158:
 628:Src/main.c    ****                 {
 1242              		.loc 1 628 0
 1243 00ee 032D     		cmp	r5, #3
 1244 00f0 06D1     		bne	.L80
 630:Src/main.c    ****                     LEFT_SPEED = speed;
 1245              		.loc 1 630 0
 1246 00f2 0020     		movs	r0, #0
 1247 00f4 2146     		mov	r1, r4
 1248 00f6 FFF7FEFF 		bl	set_motor_speed
 1249              	.LVL159:
 631:Src/main.c    ****                 }
 1250              		.loc 1 631 0
 1251 00fa 3B4B     		ldr	r3, .L85+24
 1252 00fc 1C80     		strh	r4, [r3]	@ movhi
 1253 00fe 05E0     		b	.L79
 1254              	.L80:
 635:Src/main.c    ****                     RIGHT_SPEED = speed;
 1255              		.loc 1 635 0
 1256 0100 0820     		movs	r0, #8
 1257 0102 2146     		mov	r1, r4
 1258 0104 FFF7FEFF 		bl	set_motor_speed
 1259              	.LVL160:
 636:Src/main.c    ****                 }
 1260              		.loc 1 636 0
 1261 0108 384B     		ldr	r3, .L85+28
 1262 010a 1C80     		strh	r4, [r3]	@ movhi
 1263              	.LVL161:
 1264              	.L79:
 623:Src/main.c    ****             {
 1265              		.loc 1 623 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 38


 1266 010c 3148     		ldr	r0, .L85+4
 1267 010e 4FF40051 		mov	r1, #8192
 1268 0112 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1269              	.LVL162:
 1270 0116 0028     		cmp	r0, #0
 1271 0118 DED0     		beq	.L82
 639:Src/main.c    ****         }
 1272              		.loc 1 639 0
 1273 011a 0135     		adds	r5, r5, #1
 1274              	.LVL163:
 1275              	.L76:
 641:Src/main.c    ****         {
 1276              		.loc 1 641 0
 1277 011c 052D     		cmp	r5, #5
 1278 011e B0D1     		bne	.L83
 1279              	.LBE4:
 646:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 1280              		.loc 1 646 0
 1281 0120 2F4C     		ldr	r4, .L85+16
 1282 0122 2046     		mov	r0, r4
 1283 0124 0021     		movs	r1, #0
 1284 0126 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1285              	.LVL164:
 647:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 1286              		.loc 1 647 0
 1287 012a 2046     		mov	r0, r4
 1288 012c 0821     		movs	r1, #8
 1289 012e FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1290              	.LVL165:
 648:Src/main.c    ****     print(msg, 0);
 1291              		.loc 1 648 0
 1292 0132 DDF80880 		ldr	r8, [sp, #8]
 1293 0136 05A8     		add	r0, sp, #20
 1294 0138 2D49     		ldr	r1, .L85+32
 1295 013a 4246     		mov	r2, r8
 1296 013c FFF7FEFF 		bl	sprintf
 1297              	.LVL166:
 649:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 1298              		.loc 1 649 0
 1299 0140 05A8     		add	r0, sp, #20
 1300 0142 0021     		movs	r1, #0
 1301 0144 FFF7FEFF 		bl	print
 1302              	.LVL167:
 650:Src/main.c    ****     print(msg, 1);
 1303              		.loc 1 650 0
 1304 0148 039F     		ldr	r7, [sp, #12]
 1305 014a 05A8     		add	r0, sp, #20
 1306 014c 2949     		ldr	r1, .L85+36
 1307 014e 3A46     		mov	r2, r7
 1308 0150 FFF7FEFF 		bl	sprintf
 1309              	.LVL168:
 651:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 1310              		.loc 1 651 0
 1311 0154 05A8     		add	r0, sp, #20
 1312 0156 0121     		movs	r1, #1
 1313 0158 FFF7FEFF 		bl	print
 1314              	.LVL169:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 39


 652:Src/main.c    ****     print(msg, 2);
 1315              		.loc 1 652 0
 1316 015c 049D     		ldr	r5, [sp, #16]
 1317              	.LVL170:
 1318 015e 05A8     		add	r0, sp, #20
 1319 0160 2549     		ldr	r1, .L85+40
 1320 0162 2A46     		mov	r2, r5
 1321 0164 FFF7FEFF 		bl	sprintf
 1322              	.LVL171:
 653:Src/main.c    ****     sprintf(msg, "L %u", LEFT_SPEED);
 1323              		.loc 1 653 0
 1324 0168 05A8     		add	r0, sp, #20
 1325 016a 0221     		movs	r1, #2
 1326 016c FFF7FEFF 		bl	print
 1327              	.LVL172:
 654:Src/main.c    ****     print(msg, 3);
 1328              		.loc 1 654 0
 1329 0170 05A8     		add	r0, sp, #20
 1330 0172 2249     		ldr	r1, .L85+44
 1331 0174 1C4B     		ldr	r3, .L85+24
 1332 0176 1A88     		ldrh	r2, [r3]
 1333 0178 FFF7FEFF 		bl	sprintf
 1334              	.LVL173:
 655:Src/main.c    ****     sprintf(msg, "R %u", RIGHT_SPEED);
 1335              		.loc 1 655 0
 1336 017c 05A8     		add	r0, sp, #20
 1337 017e 0321     		movs	r1, #3
 1338 0180 FFF7FEFF 		bl	print
 1339              	.LVL174:
 656:Src/main.c    ****     print(msg, 4);
 1340              		.loc 1 656 0
 1341 0184 05A8     		add	r0, sp, #20
 1342 0186 1E49     		ldr	r1, .L85+48
 1343 0188 184B     		ldr	r3, .L85+28
 1344 018a 1A88     		ldrh	r2, [r3]
 1345 018c FFF7FEFF 		bl	sprintf
 1346              	.LVL175:
 657:Src/main.c    ****     HAL_Delay(1000);
 1347              		.loc 1 657 0
 1348 0190 05A8     		add	r0, sp, #20
 1349 0192 0421     		movs	r1, #4
 1350 0194 FFF7FEFF 		bl	print
 1351              	.LVL176:
 658:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1352              		.loc 1 658 0
 1353 0198 4FF47A70 		mov	r0, #1000
 1354 019c FFF7FEFF 		bl	HAL_Delay
 1355              	.LVL177:
 659:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1356              		.loc 1 659 0
 1357 01a0 2046     		mov	r0, r4
 1358 01a2 0021     		movs	r1, #0
 1359 01a4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1360              	.LVL178:
 660:Src/main.c    ****     return pid_Init(values[0], values[1], values[2], 5, 100);
 1361              		.loc 1 660 0
 1362 01a8 2046     		mov	r0, r4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 40


 1363 01aa 0821     		movs	r1, #8
 1364 01ac FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1365              	.LVL179:
 661:Src/main.c    **** }
 1366              		.loc 1 661 0
 1367 01b0 0523     		movs	r3, #5
 1368 01b2 0093     		str	r3, [sp]
 1369 01b4 6423     		movs	r3, #100
 1370 01b6 0193     		str	r3, [sp, #4]
 1371 01b8 3046     		mov	r0, r6
 1372 01ba 1FFA88F1 		uxth	r1, r8
 1373 01be BAB2     		uxth	r2, r7
 1374 01c0 ABB2     		uxth	r3, r5
 1375 01c2 FFF7FEFF 		bl	pid_Init
 1376              	.LVL180:
 662:Src/main.c    **** 
 1377              		.loc 1 662 0
 1378 01c6 3046     		mov	r0, r6
 1379 01c8 0AB0     		add	sp, sp, #40
 1380              	.LCFI22:
 1381              		.cfi_def_cfa_offset 24
 1382              		@ sp needed
 1383 01ca BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1384              	.LVL181:
 1385              	.L86:
 1386 01ce 00BF     		.align	2
 1387              	.L85:
 1388 01d0 50000000 		.word	.LC7
 1389 01d4 00080240 		.word	1073874944
 1390 01d8 5C000000 		.word	.LC8
 1391 01dc 00080040 		.word	1073743872
 1392 01e0 00000000 		.word	htim1
 1393 01e4 60000000 		.word	.LC9
 1394 01e8 00000000 		.word	.LANCHOR1
 1395 01ec 00000000 		.word	.LANCHOR0
 1396 01f0 64000000 		.word	.LC10
 1397 01f4 6C000000 		.word	.LC11
 1398 01f8 74000000 		.word	.LC12
 1399 01fc 7C000000 		.word	.LC13
 1400 0200 84000000 		.word	.LC14
 1401              		.cfi_endproc
 1402              	.LFE133:
 1404              		.section	.text.do_pid,"ax",%progbits
 1405              		.align	2
 1406              		.global	do_pid
 1407              		.thumb
 1408              		.thumb_func
 1410              	do_pid:
 1411              	.LFB134:
 665:Src/main.c    ****     /* Read sensors */
 1412              		.loc 1 665 0
 1413              		.cfi_startproc
 1414              		@ args = 0, pretend = 0, frame = 24
 1415              		@ frame_needed = 0, uses_anonymous_args = 0
 1416              	.LVL182:
 1417 0000 70B5     		push	{r4, r5, r6, lr}
 1418              	.LCFI23:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 41


 1419              		.cfi_def_cfa_offset 16
 1420              		.cfi_offset 4, -16
 1421              		.cfi_offset 5, -12
 1422              		.cfi_offset 6, -8
 1423              		.cfi_offset 14, -4
 1424 0002 86B0     		sub	sp, sp, #24
 1425              	.LCFI24:
 1426              		.cfi_def_cfa_offset 40
 1427 0004 0646     		mov	r6, r0
 667:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 1428              		.loc 1 667 0
 1429 0006 2D4D     		ldr	r5, .L96
 1430 0008 2846     		mov	r0, r5
 1431              	.LVL183:
 1432 000a 4FF48041 		mov	r1, #16384
 1433 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1434              	.LVL184:
 1435 0012 B0FA80F4 		clz	r4, r0
 1436 0016 6409     		lsrs	r4, r4, #5
 1437              	.LVL185:
 668:Src/main.c    **** 
 1438              		.loc 1 668 0
 1439 0018 2846     		mov	r0, r5
 1440 001a 4FF40041 		mov	r1, #32768
 1441 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1442              	.LVL186:
 1443 0022 B0FA80F0 		clz	r0, r0
 1444 0026 4009     		lsrs	r0, r0, #5
 1445              	.LVL187:
 671:Src/main.c    ****     {
 1446              		.loc 1 671 0
 1447 0028 1CB1     		cbz	r4, .L88
 671:Src/main.c    ****     {
 1448              		.loc 1 671 0 is_stmt 0 discriminator 1
 1449 002a 10B1     		cbz	r0, .L88
 673:Src/main.c    ****     }
 1450              		.loc 1 673 0 is_stmt 1
 1451 002c 0023     		movs	r3, #0
 1452 002e 3361     		str	r3, [r6, #16]
 1453 0030 1AE0     		b	.L89
 1454              	.L88:
 675:Src/main.c    ****     {
 1455              		.loc 1 675 0
 1456 0032 1CB1     		cbz	r4, .L90
 675:Src/main.c    ****     {
 1457              		.loc 1 675 0 is_stmt 0 discriminator 1
 1458 0034 10B9     		cbnz	r0, .L90
 677:Src/main.c    ****     }
 1459              		.loc 1 677 0 is_stmt 1
 1460 0036 0123     		movs	r3, #1
 1461 0038 3361     		str	r3, [r6, #16]
 1462 003a 15E0     		b	.L89
 1463              	.L90:
 679:Src/main.c    ****     {
 1464              		.loc 1 679 0
 1465 003c 24B9     		cbnz	r4, .L91
 679:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 42


 1466              		.loc 1 679 0 is_stmt 0 discriminator 1
 1467 003e 18B1     		cbz	r0, .L91
 681:Src/main.c    ****     }
 1468              		.loc 1 681 0 is_stmt 1
 1469 0040 4FF0FF33 		mov	r3, #-1
 1470 0044 3361     		str	r3, [r6, #16]
 1471 0046 0FE0     		b	.L89
 1472              	.L91:
 683:Src/main.c    ****     {
 1473              		.loc 1 683 0
 1474 0048 3CB9     		cbnz	r4, .L92
 683:Src/main.c    ****     {
 1475              		.loc 1 683 0 is_stmt 0 discriminator 1
 1476 004a 30B9     		cbnz	r0, .L92
 683:Src/main.c    ****     {
 1477              		.loc 1 683 0 discriminator 2
 1478 004c 3369     		ldr	r3, [r6, #16]
 1479 004e 002B     		cmp	r3, #0
 1480 0050 03DA     		bge	.L92
 685:Src/main.c    ****     }
 1481              		.loc 1 685 0 is_stmt 1
 1482 0052 6FF00403 		mvn	r3, #4
 1483 0056 3361     		str	r3, [r6, #16]
 1484 0058 06E0     		b	.L89
 1485              	.L92:
 687:Src/main.c    ****     {
 1486              		.loc 1 687 0
 1487 005a 2CB9     		cbnz	r4, .L89
 687:Src/main.c    ****     {
 1488              		.loc 1 687 0 is_stmt 0 discriminator 1
 1489 005c 20B9     		cbnz	r0, .L89
 687:Src/main.c    ****     {
 1490              		.loc 1 687 0 discriminator 2
 1491 005e 3369     		ldr	r3, [r6, #16]
 1492 0060 002B     		cmp	r3, #0
 1493 0062 01DD     		ble	.L89
 689:Src/main.c    ****     }
 1494              		.loc 1 689 0 is_stmt 1
 1495 0064 0523     		movs	r3, #5
 1496 0066 3361     		str	r3, [r6, #16]
 1497              	.L89:
 693:Src/main.c    ****     char msg[20] = "";
 1498              		.loc 1 693 0
 1499 0068 3046     		mov	r0, r6
 1500              	.LVL188:
 1501 006a FFF7FEFF 		bl	pid_GetGain
 1502              	.LVL189:
 1503 006e 85B2     		uxth	r5, r0
 1504              	.LVL190:
 694:Src/main.c    ****     sprintf(msg, "%d", (int)gain);
 1505              		.loc 1 694 0
 1506 0070 0024     		movs	r4, #0
 1507              	.LVL191:
 1508 0072 0194     		str	r4, [sp, #4]
 1509 0074 0294     		str	r4, [sp, #8]
 1510 0076 0394     		str	r4, [sp, #12]
 1511 0078 0494     		str	r4, [sp, #16]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 43


 1512 007a 0594     		str	r4, [sp, #20]
 695:Src/main.c    ****     print(msg, 0);
 1513              		.loc 1 695 0
 1514 007c 2EB2     		sxth	r6, r5
 1515              	.LVL192:
 1516 007e 01A8     		add	r0, sp, #4
 1517 0080 0F49     		ldr	r1, .L96+4
 1518 0082 3246     		mov	r2, r6
 1519 0084 FFF7FEFF 		bl	sprintf
 1520              	.LVL193:
 696:Src/main.c    ****     /* Set Motor Speeds*/
 1521              		.loc 1 696 0
 1522 0088 01A8     		add	r0, sp, #4
 1523 008a 2146     		mov	r1, r4
 1524 008c FFF7FEFF 		bl	print
 1525              	.LVL194:
 698:Src/main.c    ****     int rspeed = RIGHT_SPEED;
 1526              		.loc 1 698 0
 1527 0090 0C4B     		ldr	r3, .L96+8
 1528 0092 1988     		ldrh	r1, [r3]
 1529              	.LVL195:
 699:Src/main.c    ****     if (gain < 0)
 1530              		.loc 1 699 0
 1531 0094 0C4B     		ldr	r3, .L96+12
 1532 0096 1C88     		ldrh	r4, [r3]
 1533              	.LVL196:
 700:Src/main.c    ****     {
 1534              		.loc 1 700 0
 1535 0098 002E     		cmp	r6, #0
 1536 009a 01DA     		bge	.L93
 702:Src/main.c    ****     }
 1537              		.loc 1 702 0
 1538 009c 891B     		subs	r1, r1, r6
 1539              	.LVL197:
 1540 009e 03E0     		b	.L94
 1541              	.L93:
 704:Src/main.c    ****     {
 1542              		.loc 1 704 0
 1543 00a0 2DB2     		sxth	r5, r5
 1544 00a2 002D     		cmp	r5, #0
 1545 00a4 00DD     		ble	.L94
 706:Src/main.c    ****     }
 1546              		.loc 1 706 0
 1547 00a6 3444     		add	r4, r4, r6
 1548              	.LVL198:
 1549              	.L94:
 708:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1550              		.loc 1 708 0
 1551 00a8 0020     		movs	r0, #0
 1552 00aa FFF7FEFF 		bl	set_motor_speed
 1553              	.LVL199:
 709:Src/main.c    **** }
 1554              		.loc 1 709 0
 1555 00ae 0820     		movs	r0, #8
 1556 00b0 2146     		mov	r1, r4
 1557 00b2 FFF7FEFF 		bl	set_motor_speed
 1558              	.LVL200:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 44


 710:Src/main.c    **** 
 1559              		.loc 1 710 0
 1560 00b6 06B0     		add	sp, sp, #24
 1561              	.LCFI25:
 1562              		.cfi_def_cfa_offset 16
 1563              		@ sp needed
 1564 00b8 70BD     		pop	{r4, r5, r6, pc}
 1565              	.LVL201:
 1566              	.L97:
 1567 00ba 00BF     		.align	2
 1568              	.L96:
 1569 00bc 00040240 		.word	1073873920
 1570 00c0 60000000 		.word	.LC9
 1571 00c4 00000000 		.word	.LANCHOR1
 1572 00c8 00000000 		.word	.LANCHOR0
 1573              		.cfi_endproc
 1574              	.LFE134:
 1576              		.section	.text.encoder_pid,"ax",%progbits
 1577              		.align	2
 1578              		.global	encoder_pid
 1579              		.thumb
 1580              		.thumb_func
 1582              	encoder_pid:
 1583              	.LFB136:
 731:Src/main.c    **** }
 732:Src/main.c    **** 
 733:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc)
 734:Src/main.c    **** {
 1584              		.loc 1 734 0
 1585              		.cfi_startproc
 1586              		@ args = 0, pretend = 0, frame = 24
 1587              		@ frame_needed = 0, uses_anonymous_args = 0
 1588              	.LVL202:
 1589 0000 70B5     		push	{r4, r5, r6, lr}
 1590              	.LCFI26:
 1591              		.cfi_def_cfa_offset 16
 1592              		.cfi_offset 4, -16
 1593              		.cfi_offset 5, -12
 1594              		.cfi_offset 6, -8
 1595              		.cfi_offset 14, -4
 1596 0002 2DED048B 		fstmfdd	sp!, {d8, d9}
 1597              	.LCFI27:
 1598              		.cfi_def_cfa_offset 32
 1599              		.cfi_offset 80, -32
 1600              		.cfi_offset 81, -28
 1601              		.cfi_offset 82, -24
 1602              		.cfi_offset 83, -20
 1603 0006 86B0     		sub	sp, sp, #24
 1604              	.LCFI28:
 1605              		.cfi_def_cfa_offset 56
 1606 0008 0546     		mov	r5, r0
 1607 000a 1446     		mov	r4, r2
 1608 000c 1E46     		mov	r6, r3
 735:Src/main.c    ****     /* Get error */
 736:Src/main.c    ****     float l_enc = update_encoder(left_enc);
 1609              		.loc 1 736 0
 1610 000e 0846     		mov	r0, r1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 45


 1611              	.LVL203:
 1612 0010 FFF7FEFF 		bl	update_encoder
 1613              	.LVL204:
 1614 0014 F0EE408A 		fcpys	s17, s0
 1615              	.LVL205:
 737:Src/main.c    ****     float r_enc = update_encoder(right_enc);
 1616              		.loc 1 737 0
 1617 0018 3046     		mov	r0, r6
 1618 001a FFF7FEFF 		bl	update_encoder
 1619              	.LVL206:
 1620 001e B0EE408A 		fcpys	s16, s0
 1621              	.LVL207:
 738:Src/main.c    ****     left_pid->err = ENCODER_GOAL - l_enc;
 1622              		.loc 1 738 0
 1623 0022 F0EE007A 		fconsts	s15, #0
 1624 0026 37EEE87A 		fsubs	s14, s15, s17
 1625 002a BDEEC77A 		ftosizs	s14, s14
 1626 002e 85ED047A 		fsts	s14, [r5, #16]	@ int
 739:Src/main.c    ****     right_pid->err = ENCODER_GOAL - r_enc;
 1627              		.loc 1 739 0
 1628 0032 77EEC07A 		fsubs	s15, s15, s0
 1629 0036 FDEEE77A 		ftosizs	s15, s15
 1630 003a C4ED047A 		fsts	s15, [r4, #16]	@ int
 740:Src/main.c    **** 
 741:Src/main.c    ****     /* Get gain */
 742:Src/main.c    ****     int32_t left_gain = pid_GetGain(left_pid);
 1631              		.loc 1 742 0
 1632 003e 2846     		mov	r0, r5
 1633 0040 FFF7FEFF 		bl	pid_GetGain
 1634              	.LVL208:
 1635 0044 0646     		mov	r6, r0
 1636              	.LVL209:
 743:Src/main.c    ****     int32_t right_gain = pid_GetGain(right_pid);
 1637              		.loc 1 743 0
 1638 0046 2046     		mov	r0, r4
 1639              	.LVL210:
 1640 0048 FFF7FEFF 		bl	pid_GetGain
 1641              	.LVL211:
 1642 004c 0546     		mov	r5, r0
 1643              	.LVL212:
 744:Src/main.c    **** 
 745:Src/main.c    ****     int l_predec = (int)(l_enc / 1);
 1644              		.loc 1 745 0
 1645 004e FDEEE87A 		ftosizs	s15, s17
 1646              	.LVL213:
 746:Src/main.c    ****     int l_postdec = (int)((l_enc - l_predec) * 1000);
 1647              		.loc 1 746 0
 1648 0052 B8EEE77A 		fsitos	s14, s15
 1649 0056 78EEC78A 		fsubs	s17, s17, s14
 1650              	.LVL214:
 1651 005a 9FED297A 		flds	s14, .L100
 1652 005e 68EE878A 		fmuls	s17, s17, s14
 1653              	.LVL215:
 747:Src/main.c    ****     int r_predec = (int)(r_enc / 1);
 1654              		.loc 1 747 0
 1655 0062 BDEEC89A 		ftosizs	s18, s16
 1656              	.LVL216:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 46


 748:Src/main.c    ****     int r_postdec = (int)((r_enc - r_predec) * 1000);
 1657              		.loc 1 748 0
 1658 0066 F8EEC96A 		fsitos	s13, s18
 1659 006a 38EE668A 		fsubs	s16, s16, s13
 1660              	.LVL217:
 1661 006e 28EE078A 		fmuls	s16, s16, s14
 1662 0072 BDEEC88A 		ftosizs	s16, s16
 1663              	.LVL218:
 749:Src/main.c    ****     char msg[18] = "";
 1664              		.loc 1 749 0
 1665 0076 0024     		movs	r4, #0
 1666              	.LVL219:
 1667 0078 0194     		str	r4, [sp, #4]
 1668 007a 0294     		str	r4, [sp, #8]
 1669 007c 0394     		str	r4, [sp, #12]
 1670 007e 0494     		str	r4, [sp, #16]
 1671 0080 ADF81440 		strh	r4, [sp, #20]	@ movhi
 750:Src/main.c    ****     sprintf(msg, "LG: %d.%d", l_predec, l_postdec);
 1672              		.loc 1 750 0
 1673 0084 01A8     		add	r0, sp, #4
 1674              	.LVL220:
 1675 0086 1F49     		ldr	r1, .L100+4
 1676 0088 17EE902A 		fmrs	r2, s15	@ int
 1677 008c FDEEE87A 		ftosizs	s15, s17
 1678              	.LVL221:
 1679 0090 17EE903A 		fmrs	r3, s15	@ int
 1680 0094 FFF7FEFF 		bl	sprintf
 1681              	.LVL222:
 751:Src/main.c    ****     print(msg, 0);
 1682              		.loc 1 751 0
 1683 0098 01A8     		add	r0, sp, #4
 1684 009a 2146     		mov	r1, r4
 1685 009c FFF7FEFF 		bl	print
 1686              	.LVL223:
 752:Src/main.c    ****     sprintf(msg, "RG: %d.%d", r_predec, r_postdec);
 1687              		.loc 1 752 0
 1688 00a0 01A8     		add	r0, sp, #4
 1689 00a2 1949     		ldr	r1, .L100+8
 1690 00a4 19EE102A 		fmrs	r2, s18	@ int
 1691 00a8 18EE103A 		fmrs	r3, s16	@ int
 1692 00ac FFF7FEFF 		bl	sprintf
 1693              	.LVL224:
 753:Src/main.c    ****     print(msg, 1);
 1694              		.loc 1 753 0
 1695 00b0 01A8     		add	r0, sp, #4
 1696 00b2 0121     		movs	r1, #1
 1697 00b4 FFF7FEFF 		bl	print
 1698              	.LVL225:
 754:Src/main.c    **** 
 755:Src/main.c    ****     /* Set Motor Speeds*/
 756:Src/main.c    ****     int lspeed = LEFT_SPEED + left_gain;
 1699              		.loc 1 756 0
 1700 00b8 144B     		ldr	r3, .L100+12
 1701 00ba 1B88     		ldrh	r3, [r3]
 1702 00bc 1E44     		add	r6, r6, r3
 1703              	.LVL226:
 757:Src/main.c    ****     int rspeed = RIGHT_SPEED + right_gain;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 47


 1704              		.loc 1 757 0
 1705 00be 144B     		ldr	r3, .L100+16
 1706 00c0 1B88     		ldrh	r3, [r3]
 1707 00c2 1D44     		add	r5, r5, r3
 1708              	.LVL227:
 758:Src/main.c    **** 
 759:Src/main.c    ****     sprintf(msg, "LS: %d", (int)lspeed);
 1709              		.loc 1 759 0
 1710 00c4 01A8     		add	r0, sp, #4
 1711 00c6 1349     		ldr	r1, .L100+20
 1712 00c8 3246     		mov	r2, r6
 1713 00ca FFF7FEFF 		bl	sprintf
 1714              	.LVL228:
 760:Src/main.c    ****     print(msg, 3);
 1715              		.loc 1 760 0
 1716 00ce 01A8     		add	r0, sp, #4
 1717 00d0 0321     		movs	r1, #3
 1718 00d2 FFF7FEFF 		bl	print
 1719              	.LVL229:
 761:Src/main.c    ****     sprintf(msg, "RS: %d", (int)rspeed);
 1720              		.loc 1 761 0
 1721 00d6 01A8     		add	r0, sp, #4
 1722 00d8 0F49     		ldr	r1, .L100+24
 1723 00da 2A46     		mov	r2, r5
 1724 00dc FFF7FEFF 		bl	sprintf
 1725              	.LVL230:
 762:Src/main.c    ****     print(msg, 4);
 1726              		.loc 1 762 0
 1727 00e0 01A8     		add	r0, sp, #4
 1728 00e2 0421     		movs	r1, #4
 1729 00e4 FFF7FEFF 		bl	print
 1730              	.LVL231:
 763:Src/main.c    ****     // set_motor_speed
 764:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 1731              		.loc 1 764 0
 1732 00e8 2046     		mov	r0, r4
 1733 00ea 3146     		mov	r1, r6
 1734 00ec FFF7FEFF 		bl	set_motor_speed
 1735              	.LVL232:
 765:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1736              		.loc 1 765 0
 1737 00f0 0820     		movs	r0, #8
 1738 00f2 2946     		mov	r1, r5
 1739 00f4 FFF7FEFF 		bl	set_motor_speed
 1740              	.LVL233:
 766:Src/main.c    **** }
 1741              		.loc 1 766 0
 1742 00f8 06B0     		add	sp, sp, #24
 1743              	.LCFI29:
 1744              		.cfi_def_cfa_offset 32
 1745              		@ sp needed
 1746 00fa BDEC048B 		fldmfdd	sp!, {d8-d9}
 1747              	.LCFI30:
 1748              		.cfi_restore 82
 1749              		.cfi_restore 83
 1750              		.cfi_restore 80
 1751              		.cfi_restore 81
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 48


 1752              		.cfi_def_cfa_offset 16
 1753              	.LVL234:
 1754 00fe 70BD     		pop	{r4, r5, r6, pc}
 1755              	.LVL235:
 1756              	.L101:
 1757              		.align	2
 1758              	.L100:
 1759 0100 00007A44 		.word	1148846080
 1760 0104 8C000000 		.word	.LC15
 1761 0108 98000000 		.word	.LC16
 1762 010c 00000000 		.word	.LANCHOR1
 1763 0110 00000000 		.word	.LANCHOR0
 1764 0114 A4000000 		.word	.LC17
 1765 0118 AC000000 		.word	.LC18
 1766              		.cfi_endproc
 1767              	.LFE136:
 1769              		.section	.text._Error_Handler,"ax",%progbits
 1770              		.align	2
 1771              		.global	_Error_Handler
 1772              		.thumb
 1773              		.thumb_func
 1775              	_Error_Handler:
 1776              	.LFB137:
 767:Src/main.c    **** 
 768:Src/main.c    **** /* USER CODE END 4 */
 769:Src/main.c    **** 
 770:Src/main.c    **** /**
 771:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 772:Src/main.c    ****   * @param  file: The file name as string.
 773:Src/main.c    ****   * @param  line: The line in file as a number.
 774:Src/main.c    ****   * @retval None
 775:Src/main.c    ****   */
 776:Src/main.c    **** void _Error_Handler(char *file, int line)
 777:Src/main.c    **** {
 1777              		.loc 1 777 0
 1778              		.cfi_startproc
 1779              		@ Volatile: function does not return.
 1780              		@ args = 0, pretend = 0, frame = 0
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782              		@ link register save eliminated.
 1783              	.LVL236:
 1784              	.L103:
 778:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 779:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 780:Src/main.c    ****     while (1)
 781:Src/main.c    ****     {
 782:Src/main.c    ****     }
 1785              		.loc 1 782 0 discriminator 1
 1786 0000 FEE7     		b	.L103
 1787              		.cfi_endproc
 1788              	.LFE137:
 1790 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1791              		.align	2
 1792              		.global	SystemClock_Config
 1793              		.thumb
 1794              		.thumb_func
 1796              	SystemClock_Config:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 49


 1797              	.LFB125:
 311:Src/main.c    **** 
 1798              		.loc 1 311 0
 1799              		.cfi_startproc
 1800              		@ args = 0, pretend = 0, frame = 80
 1801              		@ frame_needed = 0, uses_anonymous_args = 0
 1802 0000 00B5     		push	{lr}
 1803              	.LCFI31:
 1804              		.cfi_def_cfa_offset 4
 1805              		.cfi_offset 14, -4
 1806 0002 95B0     		sub	sp, sp, #84
 1807              	.LCFI32:
 1808              		.cfi_def_cfa_offset 88
 1809              	.LBB5:
 318:Src/main.c    **** 
 1810              		.loc 1 318 0
 1811 0004 0022     		movs	r2, #0
 1812 0006 0192     		str	r2, [sp, #4]
 1813 0008 2A4B     		ldr	r3, .L108
 1814 000a 196C     		ldr	r1, [r3, #64]
 1815 000c 41F08051 		orr	r1, r1, #268435456
 1816 0010 1964     		str	r1, [r3, #64]
 1817 0012 1B6C     		ldr	r3, [r3, #64]
 1818 0014 03F08053 		and	r3, r3, #268435456
 1819 0018 0193     		str	r3, [sp, #4]
 1820 001a 019B     		ldr	r3, [sp, #4]
 1821              	.LBE5:
 1822              	.LBB6:
 320:Src/main.c    **** 
 1823              		.loc 1 320 0
 1824 001c 0292     		str	r2, [sp, #8]
 1825 001e 2649     		ldr	r1, .L108+4
 1826 0020 0B68     		ldr	r3, [r1]
 1827 0022 23F44043 		bic	r3, r3, #49152
 1828 0026 43F40043 		orr	r3, r3, #32768
 1829 002a 0B60     		str	r3, [r1]
 1830 002c 0B68     		ldr	r3, [r1]
 1831 002e 03F44043 		and	r3, r3, #49152
 1832 0032 0293     		str	r3, [sp, #8]
 1833 0034 029B     		ldr	r3, [sp, #8]
 1834              	.LBE6:
 324:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1835              		.loc 1 324 0
 1836 0036 0223     		movs	r3, #2
 1837 0038 0893     		str	r3, [sp, #32]
 325:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 1838              		.loc 1 325 0
 1839 003a 0121     		movs	r1, #1
 1840 003c 0B91     		str	r1, [sp, #44]
 326:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1841              		.loc 1 326 0
 1842 003e 1021     		movs	r1, #16
 1843 0040 0C91     		str	r1, [sp, #48]
 327:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1844              		.loc 1 327 0
 1845 0042 0E93     		str	r3, [sp, #56]
 328:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 50


 1846              		.loc 1 328 0
 1847 0044 0F92     		str	r2, [sp, #60]
 329:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 1848              		.loc 1 329 0
 1849 0046 0822     		movs	r2, #8
 1850 0048 1092     		str	r2, [sp, #64]
 330:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1851              		.loc 1 330 0
 1852 004a 4822     		movs	r2, #72
 1853 004c 1192     		str	r2, [sp, #68]
 331:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1854              		.loc 1 331 0
 1855 004e 1293     		str	r3, [sp, #72]
 332:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1856              		.loc 1 332 0
 1857 0050 0423     		movs	r3, #4
 1858 0052 1393     		str	r3, [sp, #76]
 333:Src/main.c    ****   {
 1859              		.loc 1 333 0
 1860 0054 08A8     		add	r0, sp, #32
 1861 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1862              	.LVL237:
 1863 005a 20B1     		cbz	r0, .L105
 335:Src/main.c    ****   }
 1864              		.loc 1 335 0
 1865 005c 1748     		ldr	r0, .L108+8
 1866 005e 40F24F11 		movw	r1, #335
 1867 0062 FFF7FEFF 		bl	_Error_Handler
 1868              	.LVL238:
 1869              	.L105:
 340:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1870              		.loc 1 340 0
 1871 0066 0F23     		movs	r3, #15
 1872 0068 0393     		str	r3, [sp, #12]
 342:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1873              		.loc 1 342 0
 1874 006a 0221     		movs	r1, #2
 1875 006c 0491     		str	r1, [sp, #16]
 343:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1876              		.loc 1 343 0
 1877 006e 0023     		movs	r3, #0
 1878 0070 0593     		str	r3, [sp, #20]
 344:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1879              		.loc 1 344 0
 1880 0072 4FF48052 		mov	r2, #4096
 1881 0076 0692     		str	r2, [sp, #24]
 345:Src/main.c    **** 
 1882              		.loc 1 345 0
 1883 0078 0793     		str	r3, [sp, #28]
 347:Src/main.c    ****   {
 1884              		.loc 1 347 0
 1885 007a 03A8     		add	r0, sp, #12
 1886 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1887              	.LVL239:
 1888 0080 20B1     		cbz	r0, .L106
 349:Src/main.c    ****   }
 1889              		.loc 1 349 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 51


 1890 0082 0E48     		ldr	r0, .L108+8
 1891 0084 40F25D11 		movw	r1, #349
 1892 0088 FFF7FEFF 		bl	_Error_Handler
 1893              	.LVL240:
 1894              	.L106:
 354:Src/main.c    **** 
 1895              		.loc 1 354 0
 1896 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1897              	.LVL241:
 1898 0090 0B4B     		ldr	r3, .L108+12
 1899 0092 A3FB0030 		umull	r3, r0, r3, r0
 1900 0096 8009     		lsrs	r0, r0, #6
 1901 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1902              	.LVL242:
 358:Src/main.c    **** 
 1903              		.loc 1 358 0
 1904 009c 0420     		movs	r0, #4
 1905 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1906              	.LVL243:
 361:Src/main.c    **** }
 1907              		.loc 1 361 0
 1908 00a2 4FF0FF30 		mov	r0, #-1
 1909 00a6 0021     		movs	r1, #0
 1910 00a8 0A46     		mov	r2, r1
 1911 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1912              	.LVL244:
 362:Src/main.c    **** 
 1913              		.loc 1 362 0
 1914 00ae 15B0     		add	sp, sp, #84
 1915              	.LCFI33:
 1916              		.cfi_def_cfa_offset 4
 1917              		@ sp needed
 1918 00b0 5DF804FB 		ldr	pc, [sp], #4
 1919              	.L109:
 1920              		.align	2
 1921              	.L108:
 1922 00b4 00380240 		.word	1073887232
 1923 00b8 00700040 		.word	1073770496
 1924 00bc B4000000 		.word	.LC19
 1925 00c0 D34D6210 		.word	274877907
 1926              		.cfi_endproc
 1927              	.LFE125:
 1929              		.section	.text.main,"ax",%progbits
 1930              		.align	2
 1931              		.global	main
 1932              		.thumb
 1933              		.thumb_func
 1935              	main:
 1936              	.LFB124:
 109:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1937              		.loc 1 109 0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 16
 1940              		@ frame_needed = 0, uses_anonymous_args = 0
 1941 0000 10B5     		push	{r4, lr}
 1942              	.LCFI34:
 1943              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 52


 1944              		.cfi_offset 4, -8
 1945              		.cfi_offset 14, -4
 1946 0002 84B0     		sub	sp, sp, #16
 1947              	.LCFI35:
 1948              		.cfi_def_cfa_offset 24
 117:Src/main.c    **** 
 1949              		.loc 1 117 0
 1950 0004 FFF7FEFF 		bl	HAL_Init
 1951              	.LVL245:
 124:Src/main.c    **** 
 1952              		.loc 1 124 0
 1953 0008 FFF7FEFF 		bl	SystemClock_Config
 1954              	.LVL246:
 131:Src/main.c    ****   MX_DMA_Init();
 1955              		.loc 1 131 0
 1956 000c FFF7FEFF 		bl	MX_GPIO_Init
 1957              	.LVL247:
 132:Src/main.c    ****   MX_TIM3_Init();
 1958              		.loc 1 132 0
 1959 0010 FFF7FEFF 		bl	MX_DMA_Init
 1960              	.LVL248:
 133:Src/main.c    ****   MX_TIM1_Init();
 1961              		.loc 1 133 0
 1962 0014 FFF7FEFF 		bl	MX_TIM3_Init
 1963              	.LVL249:
 134:Src/main.c    ****   MX_TIM2_Init();
 1964              		.loc 1 134 0
 1965 0018 FFF7FEFF 		bl	MX_TIM1_Init
 1966              	.LVL250:
 135:Src/main.c    ****   MX_USART6_UART_Init();
 1967              		.loc 1 135 0
 1968 001c FFF7FEFF 		bl	MX_TIM2_Init
 1969              	.LVL251:
 136:Src/main.c    ****   MX_ADC1_Init();
 1970              		.loc 1 136 0
 1971 0020 FFF7FEFF 		bl	MX_USART6_UART_Init
 1972              	.LVL252:
 137:Src/main.c    ****   MX_I2C1_Init();
 1973              		.loc 1 137 0
 1974 0024 FFF7FEFF 		bl	MX_ADC1_Init
 1975              	.LVL253:
 138:Src/main.c    ****   MX_TIM4_Init();
 1976              		.loc 1 138 0
 1977 0028 FFF7FEFF 		bl	MX_I2C1_Init
 1978              	.LVL254:
 139:Src/main.c    ****   MX_TIM9_Init();
 1979              		.loc 1 139 0
 1980 002c FFF7FEFF 		bl	MX_TIM4_Init
 1981              	.LVL255:
 140:Src/main.c    ****   MX_TIM5_Init();
 1982              		.loc 1 140 0
 1983 0030 FFF7FEFF 		bl	MX_TIM9_Init
 1984              	.LVL256:
 141:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1985              		.loc 1 141 0
 1986 0034 FFF7FEFF 		bl	MX_TIM5_Init
 1987              	.LVL257:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 53


 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1988              		.loc 1 158 0
 1989 0038 3B48     		ldr	r0, .L113
 1990 003a 1821     		movs	r1, #24
 1991 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1992              	.LVL258:
 159:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1993              		.loc 1 159 0
 1994 0040 3A48     		ldr	r0, .L113+4
 1995 0042 1821     		movs	r1, #24
 1996 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1997              	.LVL259:
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 1998              		.loc 1 160 0
 1999 0048 394C     		ldr	r4, .L113+8
 2000 004a 2046     		mov	r0, r4
 2001 004c 0021     		movs	r1, #0
 2002 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2003              	.LVL260:
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 2004              		.loc 1 161 0
 2005 0052 2046     		mov	r0, r4
 2006 0054 0421     		movs	r1, #4
 2007 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2008              	.LVL261:
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 2009              		.loc 1 162 0
 2010 005a 2046     		mov	r0, r4
 2011 005c 0821     		movs	r1, #8
 2012 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2013              	.LVL262:
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2014              		.loc 1 163 0
 2015 0062 2046     		mov	r0, r4
 2016 0064 0C21     		movs	r1, #12
 2017 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2018              	.LVL263:
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 2019              		.loc 1 164 0
 2020 006a 324C     		ldr	r4, .L113+12
 2021 006c 2046     		mov	r0, r4
 2022 006e 0021     		movs	r1, #0
 2023 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2024              	.LVL264:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 2025              		.loc 1 165 0
 2026 0074 2046     		mov	r0, r4
 2027 0076 0421     		movs	r1, #4
 2028 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2029              	.LVL265:
 166:Src/main.c    **** 
 2030              		.loc 1 166 0
 2031 007c 2046     		mov	r0, r4
 2032 007e 0821     		movs	r1, #8
 2033 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2034              	.LVL266:
 169:Src/main.c    ****     print("Starting", 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 54


 2035              		.loc 1 169 0
 2036 0084 FFF7FEFF 		bl	ssd1306_Init
 2037              	.LVL267:
 170:Src/main.c    ****     claw_init(&htim3);
 2038              		.loc 1 170 0
 2039 0088 2B48     		ldr	r0, .L113+16
 2040 008a 0021     		movs	r1, #0
 2041 008c FFF7FEFF 		bl	print
 2042              	.LVL268:
 171:Src/main.c    ****     ///basket_init(&htim3);
 2043              		.loc 1 171 0
 2044 0090 2046     		mov	r0, r4
 2045 0092 FFF7FEFF 		bl	claw_init
 2046              	.LVL269:
 174:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_2, 100);
 2047              		.loc 1 174 0
 2048 0096 0020     		movs	r0, #0
 2049 0098 6421     		movs	r1, #100
 2050 009a FFF7FEFF 		bl	set_motor_speed
 2051              	.LVL270:
 175:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 100);
 2052              		.loc 1 175 0
 2053 009e 0420     		movs	r0, #4
 2054 00a0 6421     		movs	r1, #100
 2055 00a2 FFF7FEFF 		bl	set_motor_speed
 2056              	.LVL271:
 176:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_4, 100);
 2057              		.loc 1 176 0
 2058 00a6 0820     		movs	r0, #8
 2059 00a8 6421     		movs	r1, #100
 2060 00aa FFF7FEFF 		bl	set_motor_speed
 2061              	.LVL272:
 177:Src/main.c    **** 
 2062              		.loc 1 177 0
 2063 00ae 0C20     		movs	r0, #12
 2064 00b0 6421     		movs	r1, #100
 2065 00b2 FFF7FEFF 		bl	set_motor_speed
 2066              	.LVL273:
 187:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2067              		.loc 1 187 0
 2068 00b6 0020     		movs	r0, #0
 2069 00b8 204B     		ldr	r3, .L113+20
 2070 00ba 1988     		ldrh	r1, [r3]
 2071 00bc FFF7FEFF 		bl	set_motor_speed
 2072              	.LVL274:
 188:Src/main.c    ****     HAL_Delay(5000);
 2073              		.loc 1 188 0
 2074 00c0 0820     		movs	r0, #8
 2075 00c2 1F4B     		ldr	r3, .L113+24
 2076 00c4 1988     		ldrh	r1, [r3]
 2077 00c6 FFF7FEFF 		bl	set_motor_speed
 2078              	.LVL275:
 189:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 2079              		.loc 1 189 0
 2080 00ca 41F28830 		movw	r0, #5000
 2081 00ce FFF7FEFF 		bl	HAL_Delay
 2082              	.LVL276:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 55


 190:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 2083              		.loc 1 190 0
 2084 00d2 0020     		movs	r0, #0
 2085 00d4 0146     		mov	r1, r0
 2086 00d6 FFF7FEFF 		bl	set_motor_speed
 2087              	.LVL277:
 191:Src/main.c    ****     HAL_Delay(1000);
 2088              		.loc 1 191 0
 2089 00da 0820     		movs	r0, #8
 2090 00dc 0021     		movs	r1, #0
 2091 00de FFF7FEFF 		bl	set_motor_speed
 2092              	.LVL278:
 192:Src/main.c    ****     /* Initially disabled IR, PI and Claw INT*/
 2093              		.loc 1 192 0
 2094 00e2 4FF47A70 		mov	r0, #1000
 2095 00e6 FFF7FEFF 		bl	HAL_Delay
 2096              	.LVL279:
 194:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 2097              		.loc 1 194 0
 2098 00ea 0620     		movs	r0, #6
 2099 00ec FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2100              	.LVL280:
 195:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 2101              		.loc 1 195 0
 2102 00f0 0720     		movs	r0, #7
 2103 00f2 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2104              	.LVL281:
 196:Src/main.c    ****   /* USER CODE END 2 */
 2105              		.loc 1 196 0
 2106 00f6 0A20     		movs	r0, #10
 2107 00f8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2108              	.LVL282:
 2109              	.L111:
 2110              	.LBB7:
 203:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 2111              		.loc 1 203 0 discriminator 1
 2112 00fc 114B     		ldr	r3, .L113+28
 2113 00fe 0193     		str	r3, [sp, #4]
 2114 0100 0023     		movs	r3, #0
 2115 0102 0293     		str	r3, [sp, #8]
 2116 0104 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 204:Src/main.c    ****         HAL_Delay(1000);
 2117              		.loc 1 204 0 discriminator 1
 2118 0108 01A8     		add	r0, sp, #4
 2119 010a FFF7FEFF 		bl	strlen
 2120              	.LVL283:
 2121 010e 82B2     		uxth	r2, r0
 2122 0110 0D48     		ldr	r0, .L113+32
 2123 0112 01A9     		add	r1, sp, #4
 2124 0114 4FF6FF73 		movw	r3, #65535
 2125 0118 FFF7FEFF 		bl	HAL_UART_Transmit
 2126              	.LVL284:
 205:Src/main.c    ****         
 2127              		.loc 1 205 0 discriminator 1
 2128 011c 4FF47A70 		mov	r0, #1000
 2129 0120 FFF7FEFF 		bl	HAL_Delay
 2130              	.LVL285:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 56


 2131              	.LBE7:
 301:Src/main.c    ****   /* USER CODE END 3 */
 2132              		.loc 1 301 0 discriminator 1
 2133 0124 EAE7     		b	.L111
 2134              	.L114:
 2135 0126 00BF     		.align	2
 2136              	.L113:
 2137 0128 00000000 		.word	htim4
 2138 012c 00000000 		.word	htim5
 2139 0130 00000000 		.word	htim1
 2140 0134 00000000 		.word	htim3
 2141 0138 50000000 		.word	.LC7
 2142 013c 00000000 		.word	.LANCHOR1
 2143 0140 00000000 		.word	.LANCHOR0
 2144 0144 48690A00 		.word	682312
 2145 0148 00000000 		.word	huart6
 2146              		.cfi_endproc
 2147              	.LFE124:
 2149              		.comm	adc_values,12288,4
 2150              		.comm	dma_buffer,12288,4
 2151              		.global	RIGHT_SPEED
 2152              		.global	LEFT_SPEED
 2153              		.section	.data.RIGHT_SPEED,"aw",%progbits
 2154              		.align	1
 2155              		.set	.LANCHOR0,. + 0
 2158              	RIGHT_SPEED:
 2159 0000 B202     		.short	690
 2160              		.section	.data.LEFT_SPEED,"aw",%progbits
 2161              		.align	1
 2162              		.set	.LANCHOR1,. + 0
 2165              	LEFT_SPEED:
 2166 0000 6202     		.short	610
 2167              		.section	.rodata.str1.4,"aMS",%progbits,1
 2168              		.align	2
 2169              	.LC0:
 2170 0000 25642E25 		.ascii	"%d.%d\012\000"
 2170      640A00
 2171 0007 00       		.space	1
 2172              	.LC1:
 2173 0008 25642E25 		.ascii	"%d.%d\000"
 2173      6400
 2174 000e 0000     		.space	2
 2175              	.LC2:
 2176 0010 636E7473 		.ascii	"cnts: %d\000"
 2176      3A202564 
 2176      00
 2177 0019 000000   		.space	3
 2178              	.LC3:
 2179 001c 766C7473 		.ascii	"vlts: %d.%d\000"
 2179      3A202564 
 2179      2E256400 
 2180              	.LC4:
 2181 0028 54494D35 		.ascii	"TIM5->CNT: %lu\000"
 2181      2D3E434E 
 2181      543A2025 
 2181      6C7500
 2182 0037 00       		.space	1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 57


 2183              	.LC5:
 2184 0038 54494D34 		.ascii	"TIM4->CNT: %lu\000"
 2184      2D3E434E 
 2184      543A2025 
 2184      6C7500
 2185 0047 00       		.space	1
 2186              	.LC6:
 2187 0048 5069206E 		.ascii	"Pi nav\000"
 2187      617600
 2188 004f 00       		.space	1
 2189              	.LC7:
 2190 0050 53746172 		.ascii	"Starting\000"
 2190      74696E67 
 2190      00
 2191 0059 000000   		.space	3
 2192              	.LC8:
 2193 005c 256C7500 		.ascii	"%lu\000"
 2194              	.LC9:
 2195 0060 256400   		.ascii	"%d\000"
 2196 0063 00       		.space	1
 2197              	.LC10:
 2198 0064 5020256C 		.ascii	"P %lu\000"
 2198      7500
 2199 006a 0000     		.space	2
 2200              	.LC11:
 2201 006c 4420256C 		.ascii	"D %lu\000"
 2201      7500
 2202 0072 0000     		.space	2
 2203              	.LC12:
 2204 0074 4920256C 		.ascii	"I %lu\000"
 2204      7500
 2205 007a 0000     		.space	2
 2206              	.LC13:
 2207 007c 4C202575 		.ascii	"L %u\000"
 2207      00
 2208 0081 000000   		.space	3
 2209              	.LC14:
 2210 0084 52202575 		.ascii	"R %u\000"
 2210      00
 2211 0089 000000   		.space	3
 2212              	.LC15:
 2213 008c 4C473A20 		.ascii	"LG: %d.%d\000"
 2213      25642E25 
 2213      6400
 2214 0096 0000     		.space	2
 2215              	.LC16:
 2216 0098 52473A20 		.ascii	"RG: %d.%d\000"
 2216      25642E25 
 2216      6400
 2217 00a2 0000     		.space	2
 2218              	.LC17:
 2219 00a4 4C533A20 		.ascii	"LS: %d\000"
 2219      256400
 2220 00ab 00       		.space	1
 2221              	.LC18:
 2222 00ac 52533A20 		.ascii	"RS: %d\000"
 2222      256400
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 58


 2223 00b3 00       		.space	1
 2224              	.LC19:
 2225 00b4 5372632F 		.ascii	"Src/main.c\000"
 2225      6D61696E 
 2225      2E6300
 2226              		.text
 2227              	.Letext0:
 2228              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2229              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2230              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2231              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 2232              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2233              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2234              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2235              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2236              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2237              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2238              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2239              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2240              		.file 14 "Inc/fonts.h"
 2241              		.file 15 "Inc/ssd1306.h"
 2242              		.file 16 "Inc/encoder.h"
 2243              		.file 17 "Inc/pid.h"
 2244              		.file 18 "Drivers/CMSIS/Include/core_cm4.h"
 2245              		.file 19 "Inc/adc.h"
 2246              		.file 20 "Inc/tim.h"
 2247              		.file 21 "Inc/usart.h"
 2248              		.file 22 "Inc/extern_vars.h"
 2249              		.file 23 "Inc/filter.h"
 2250              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2251              		.file 25 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2252              		.file 26 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 2253              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2254              		.file 28 "Inc/gpio.h"
 2255              		.file 29 "Inc/dma.h"
 2256              		.file 30 "Inc/i2c.h"
 2257              		.file 31 "Inc/claw.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 59


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000003000 adc_values
                            *COM*:0000000000003000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:103    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:108    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:168    .text.alarm_detect:0000000000000050 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:177    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:182    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:229    .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:236    .text.frequency_comparison:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:241    .text.frequency_comparison:0000000000000000 frequency_comparison
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:442    .text.frequency_comparison:0000000000000138 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:454    .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:459    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:521    .text.set_motor_speed:0000000000000044 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:529    .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:534    .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:779    .text.turn:0000000000000178 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:801    .text.turn_deg:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:806    .text.turn_deg:0000000000000000 turn_deg
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:932    .text.turn_deg:00000000000000b0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:944    .text.pi_navigation:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:949    .text.pi_navigation:0000000000000000 pi_navigation
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1058   .text.pi_navigation:00000000000000ac $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1068   .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1073   .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1388   .text.menu:00000000000001d0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1405   .text.do_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1410   .text.do_pid:0000000000000000 do_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1569   .text.do_pid:00000000000000bc $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1577   .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1582   .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1759   .text.encoder_pid:0000000000000100 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1770   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1775   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1791   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1796   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1922   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1930   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:1935   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:2137   .text.main:0000000000000128 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:2158   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:2165   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:2154   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:2161   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s:2168   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 60


__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
__aeabi_d2iz
__aeabi_i2d
sprintf
strlen
HAL_UART_Transmit
huart6
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_dcmplt
__aeabi_dadd
PI_INT_STATE
HAL_GPIO_ReadPin
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
pid_Init
pid_GetGain
update_encoder
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
HAL_NVIC_EnableIRQ
htim4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccNUsIku.s 			page 61


htim5
htim3
