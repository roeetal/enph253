ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  ** This notice applies to any and all portions of this file
   8:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****  * inserted by the user or by software development tools
  11:Src/main.c    ****  * are owned by their respective copyright owners.
  12:Src/main.c    ****  *
  13:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****  *
  15:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****  * are permitted provided that the following conditions are met:
  17:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****  *      and/or other materials provided with the distribution.
  22:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****  *      without specific prior written permission.
  25:Src/main.c    ****  *
  26:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 2


  31:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****  *
  37:Src/main.c    ****  ******************************************************************************
  38:Src/main.c    ****  */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** //TODO: Drive system, signed int32, giving forward backward, encoders, coordinate system.
  66:Src/main.c    **** uint16_t LEFT_SPEED = 20000;
  67:Src/main.c    **** uint16_t RIGHT_SPEED = 20000;
  68:Src/main.c    **** uint32_t dma_buffer[3072];
  69:Src/main.c    **** uint32_t adc_values[3072];
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE END PV */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  74:Src/main.c    **** void SystemClock_Config(void);
  75:Src/main.c    **** 
  76:Src/main.c    **** /* USER CODE BEGIN PFP */
  77:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  78:Src/main.c    **** void print(char msg[], int row);
  79:Src/main.c    **** void do_pid(PID_t *pid_struct);
  80:Src/main.c    **** PID_t menu();
  81:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin);
  82:Src/main.c    **** void pi_navigation();
  83:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  84:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc);
  85:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  86:Src/main.c    **** void turn();
  87:Src/main.c    **** void alarm_detect();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END PFP */
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE BEGIN 0 */
  92:Src/main.c    **** /**
  93:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
  94:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
  95:Src/main.c    ****  * Order of buffer: ir1, ir2, ir1, ir2...
  96:Src/main.c    ****  */
  97:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
  98:Src/main.c    **** {
  29              		.loc 1 98 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  99:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 99 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF44052 		mov	r2, #12288
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB128:
 100:Src/main.c    **** }
 101:Src/main.c    **** /* USER CODE END 0 */
 102:Src/main.c    **** 
 103:Src/main.c    **** /**
 104:Src/main.c    ****  * @brief  The application entry point.
 105:Src/main.c    ****  *
 106:Src/main.c    ****  * @retval None
 107:Src/main.c    ****  */
 108:Src/main.c    **** int main(void)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 4


 109:Src/main.c    **** {
 110:Src/main.c    ****     /* USER CODE BEGIN 1 */
 111:Src/main.c    **** 
 112:Src/main.c    ****     /* USER CODE END 1 */
 113:Src/main.c    **** 
 114:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 115:Src/main.c    **** 
 116:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 117:Src/main.c    ****     HAL_Init();
 118:Src/main.c    **** 
 119:Src/main.c    ****     /* USER CODE BEGIN Init */
 120:Src/main.c    **** 
 121:Src/main.c    ****     /* USER CODE END Init */
 122:Src/main.c    **** 
 123:Src/main.c    ****     /* Configure the system clock */
 124:Src/main.c    ****     SystemClock_Config();
 125:Src/main.c    **** 
 126:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 127:Src/main.c    **** 
 128:Src/main.c    ****     /* USER CODE END SysInit */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* Initialize all configured peripherals */
 131:Src/main.c    ****     MX_GPIO_Init();
 132:Src/main.c    ****     MX_DMA_Init();
 133:Src/main.c    ****     MX_TIM3_Init();
 134:Src/main.c    ****     MX_TIM1_Init();
 135:Src/main.c    ****     MX_TIM2_Init();
 136:Src/main.c    ****     MX_USART6_UART_Init();
 137:Src/main.c    ****     MX_ADC1_Init();
 138:Src/main.c    ****     MX_I2C1_Init();
 139:Src/main.c    ****     MX_TIM4_Init();
 140:Src/main.c    ****     MX_TIM9_Init();
 141:Src/main.c    ****     MX_TIM5_Init();
 142:Src/main.c    ****     /* USER CODE BEGIN 2 */
 143:Src/main.c    **** 
 144:Src/main.c    ****     /* Initialize peripherals */
 145:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 146:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 147:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 148:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 149:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 150:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 151:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 152:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 153:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 154:Src/main.c    ****     ssd1306_Init();
 155:Src/main.c    ****     print("Starting...", 0);
 156:Src/main.c    ****     //claw_init(&htim2);
 157:Src/main.c    **** 
 158:Src/main.c    ****     /* Initialize other stuffs*/
 159:Src/main.c    ****     // 3 * gain * kp = 20,000
 160:Src/main.c    ****     ENCODER_t left_enc = encoder_Init(TIM4);
 161:Src/main.c    ****     ENCODER_t right_enc = encoder_Init(TIM5);
 162:Src/main.c    ****     PID_t left_pid = pid_Init(5000, 0, 0, 2, 2);
 163:Src/main.c    ****     PID_t right_pid = pid_Init(5000, 0, 0, 2, 2);
 164:Src/main.c    ****     //PID_t pid_struct = menu();
 165:Src/main.c    ****     /* USER CODE END 2 */
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 5


 166:Src/main.c    **** 
 167:Src/main.c    ****     /* Infinite loop */
 168:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 169:Src/main.c    ****     while (1)
 170:Src/main.c    ****     {
 171:Src/main.c    ****         // encoder_pid(&left_pid, &left_enc, &right_pid, &right_enc);
 172:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 173:Src/main.c    ****         {
 174:Src/main.c    ****             print("in pi int", 0);
 175:Src/main.c    ****             turn();
 176:Src/main.c    ****         }
 177:Src/main.c    ****         // if (IR_INT_STATE == FLAGGED)
 178:Src/main.c    ****         // {
 179:Src/main.c    ****         //     alarm_detect();
 180:Src/main.c    ****         // }
 181:Src/main.c    ****         /* USER CODE END WHILE */
 182:Src/main.c    **** 
 183:Src/main.c    ****         /* USER CODE BEGIN 3 */
 184:Src/main.c    ****     }
 185:Src/main.c    ****     /* USER CODE END 3 */
 186:Src/main.c    **** 
 187:Src/main.c    **** }
 188:Src/main.c    **** 
 189:Src/main.c    **** /**
 190:Src/main.c    ****  * @brief System Clock Configuration
 191:Src/main.c    ****  * @retval None
 192:Src/main.c    ****  */
 193:Src/main.c    **** void SystemClock_Config(void)
 194:Src/main.c    **** {
 195:Src/main.c    **** 
 196:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 197:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 198:Src/main.c    **** 
 199:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 200:Src/main.c    ****     */
 201:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 202:Src/main.c    **** 
 203:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 204:Src/main.c    **** 
 205:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 206:Src/main.c    ****     */
 207:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 208:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 209:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 210:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 211:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 212:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 213:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 214:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 215:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 216:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 217:Src/main.c    ****     {
 218:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 219:Src/main.c    ****     }
 220:Src/main.c    **** 
 221:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 222:Src/main.c    ****     */
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 6


 223:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 224:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 225:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 226:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 227:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 228:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 229:Src/main.c    **** 
 230:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 231:Src/main.c    ****     {
 232:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 233:Src/main.c    ****     }
 234:Src/main.c    **** 
 235:Src/main.c    ****     /**Configure the Systick interrupt time 
 236:Src/main.c    ****     */
 237:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 238:Src/main.c    **** 
 239:Src/main.c    ****     /**Configure the Systick 
 240:Src/main.c    ****     */
 241:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 242:Src/main.c    **** 
 243:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 244:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 245:Src/main.c    **** }
 246:Src/main.c    **** 
 247:Src/main.c    **** /* USER CODE BEGIN 4 */
 248:Src/main.c    **** 
 249:Src/main.c    **** /*
 250:Src/main.c    ****  * Assume motors are not on.
 251:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 252:Src/main.c    ****  */
 253:Src/main.c    **** void turn()
 254:Src/main.c    **** {
 255:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 256:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 257:Src/main.c    ****     HAL_Delay(500);
 258:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 259:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 260:Src/main.c    ****     TIM3->CNT = 0;
 261:Src/main.c    ****     TIM4->CNT = 0;
 262:Src/main.c    ****     char msg[18] = "";
 263:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 264:Src/main.c    ****     print(msg, 0);
 265:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 266:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 267:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 268:Src/main.c    ****     print(msg, 0);
 269:Src/main.c    ****     if (volts < 0)
 270:Src/main.c    ****     {
 271:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 272:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 273:Src/main.c    ****         while (TIM4->CNT < counts)
 274:Src/main.c    ****         {
 275:Src/main.c    ****         }
 276:Src/main.c    ****         TIM4->CNT = 0;
 277:Src/main.c    ****     }
 278:Src/main.c    ****     else if (volts > 0)
 279:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 7


 280:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 30000);
 281:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 282:Src/main.c    ****         while (TIM3->CNT < counts)
 283:Src/main.c    ****         {
 284:Src/main.c    ****         }
 285:Src/main.c    ****         TIM4->CNT = 0;
 286:Src/main.c    ****     }
 287:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 288:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 289:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 290:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 291:Src/main.c    **** }
 292:Src/main.c    **** 
 293:Src/main.c    **** void pi_navigation()
 294:Src/main.c    **** {
 295:Src/main.c    ****     print("Pi nav", 0);
 296:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 297:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 298:Src/main.c    ****     HAL_Delay(500);
 299:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
 300:Src/main.c    ****     if (heading < 0)
 301:Src/main.c    ****     {
 302:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_2, 10000);
 303:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 10000);
 304:Src/main.c    ****         heading *= -1;
 305:Src/main.c    ****     }
 306:Src/main.c    ****     else if (heading > 0)
 307:Src/main.c    ****     {
 308:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 10000);
 309:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 10000);
 310:Src/main.c    ****     }
 311:Src/main.c    ****     HAL_Delay(2000 * heading);
 312:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 20000);
 313:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 20000);
 314:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 315:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 316:Src/main.c    **** }
 317:Src/main.c    **** 
 318:Src/main.c    **** /**
 319:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 320:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 321:Src/main.c    ****  *
 322:Src/main.c    ****  * @param adc_val, value read from ADC.
 323:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 324:Src/main.c    ****  **/
 325:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 326:Src/main.c    **** {
  67              		.loc 1 326 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 8


 327:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 327 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 328:Src/main.c    **** }
  90              		.loc 1 328 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE128:
 101              		.section	.text.print,"ax",%progbits
 102              		.align	2
 103              		.global	print
 104              		.thumb
 105              		.thumb_func
 107              	print:
 108              	.LFB131:
 329:Src/main.c    **** 
 330:Src/main.c    **** void alarm_detect()
 331:Src/main.c    **** {
 332:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 333:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 334:Src/main.c    ****     HAL_Delay(500);
 335:Src/main.c    ****     while (1)
 336:Src/main.c    ****     {
 337:Src/main.c    ****         char msg[18] = "";
 338:Src/main.c    ****         // Sampling frequency: 72e6/2/(495*3)
 339:Src/main.c    ****         // freq
 340:Src/main.c    ****         // offset 0 : IR1
 341:Src/main.c    ****         double val = goertzel(adc_values, 24242, 10000, sizeof(dma_buffer) / sizeof(dma_buffer[0]),
 342:Src/main.c    ****         int predec = (int)(val / 1);
 343:Src/main.c    ****         int postdec = (int)((val - predec) * 1000);
 344:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 345:Src/main.c    ****         print(msg, 0);
 346:Src/main.c    ****         //compare
 347:Src/main.c    ****         if (val > 3)
 348:Src/main.c    ****         {
 349:Src/main.c    ****             break;
 350:Src/main.c    ****         }
 351:Src/main.c    ****     }
 352:Src/main.c    ****     print("Go", 0);
 353:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 9


 354:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 355:Src/main.c    **** }
 356:Src/main.c    **** 
 357:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin)
 358:Src/main.c    **** {
 359:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 360:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 361:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 362:Src/main.c    ****     HAL_Delay(500);
 363:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 364:Src/main.c    ****     while (1)
 365:Src/main.c    ****     {
 366:Src/main.c    ****         char msg[18] = "";
 367:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
 368:Src/main.c    ****         // freq one
 369:Src/main.c    ****         double val1 = goertzel(adc_values, 20956, freq1, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 370:Src/main.c    ****         int predec = (int)(val1 / 1);
 371:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 372:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 373:Src/main.c    ****         print(msg, 0);
 374:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 375:Src/main.c    ****         //freq2
 376:Src/main.c    ****         double val2 = goertzel(adc_values, 20956, freq2, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 377:Src/main.c    ****         predec = (int)(val2 / 1);
 378:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 379:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 380:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 381:Src/main.c    ****         //compare
 382:Src/main.c    ****         if (val1 > val2)
 383:Src/main.c    ****         {
 384:Src/main.c    ****             break;
 385:Src/main.c    ****         }
 386:Src/main.c    ****     }
 387:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 388:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 389:Src/main.c    **** }
 390:Src/main.c    **** 
 391:Src/main.c    **** /**
 392:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 393:Src/main.c    ****  * @param msg, string to print
 394:Src/main.c    ****  * @param row, row to print msg to
 395:Src/main.c    ****  */
 396:Src/main.c    **** void print(char *msg, int row)
 397:Src/main.c    **** {
 109              		.loc 1 397 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              	.LVL8:
 114 0000 38B5     		push	{r3, r4, r5, lr}
 115              	.LCFI2:
 116              		.cfi_def_cfa_offset 16
 117              		.cfi_offset 3, -16
 118              		.cfi_offset 4, -12
 119              		.cfi_offset 5, -8
 120              		.cfi_offset 14, -4
 121 0002 0546     		mov	r5, r0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 10


 398:Src/main.c    ****     if (row == 0)
 122              		.loc 1 398 0
 123 0004 0C46     		mov	r4, r1
 124 0006 11B9     		cbnz	r1, .L10
 399:Src/main.c    ****     {
 400:Src/main.c    ****         ssd1306_Fill(Black);
 125              		.loc 1 400 0
 126 0008 0020     		movs	r0, #0
 127              	.LVL9:
 128 000a FFF7FEFF 		bl	ssd1306_Fill
 129              	.LVL10:
 130              	.L10:
 401:Src/main.c    ****     }
 402:Src/main.c    ****     ssd1306_SetCursor(0, row * 10);
 131              		.loc 1 402 0
 132 000e 04EB8404 		add	r4, r4, r4, lsl #2
 133              	.LVL11:
 134 0012 6100     		lsls	r1, r4, #1
 135 0014 0020     		movs	r0, #0
 136 0016 01F0FE01 		and	r1, r1, #254
 137 001a FFF7FEFF 		bl	ssd1306_SetCursor
 138              	.LVL12:
 403:Src/main.c    ****     ssd1306_WriteString(msg, Font_7x10, White);
 139              		.loc 1 403 0
 140 001e 054B     		ldr	r3, .L12
 141 0020 2846     		mov	r0, r5
 142 0022 93E80600 		ldmia	r3, {r1, r2}
 143 0026 0123     		movs	r3, #1
 144 0028 FFF7FEFF 		bl	ssd1306_WriteString
 145              	.LVL13:
 404:Src/main.c    ****     ssd1306_UpdateScreen();
 146              		.loc 1 404 0
 147 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 148              	.LVL14:
 149 0030 38BD     		pop	{r3, r4, r5, pc}
 150              	.LVL15:
 151              	.L13:
 152 0032 00BF     		.align	2
 153              	.L12:
 154 0034 00000000 		.word	Font_7x10
 155              		.cfi_endproc
 156              	.LFE131:
 158              		.global	__aeabi_d2iz
 159              		.global	__aeabi_i2d
 160              		.global	__aeabi_dcmpgt
 161              		.section	.text.alarm_detect,"ax",%progbits
 162              		.align	2
 163              		.global	alarm_detect
 164              		.thumb
 165              		.thumb_func
 167              	alarm_detect:
 168              	.LFB129:
 331:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 169              		.loc 1 331 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 24
 172              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 11


 173 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 174              	.LCFI3:
 175              		.cfi_def_cfa_offset 20
 176              		.cfi_offset 4, -20
 177              		.cfi_offset 5, -16
 178              		.cfi_offset 6, -12
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 89B0     		sub	sp, sp, #36
 182              	.LCFI4:
 183              		.cfi_def_cfa_offset 56
 332:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 184              		.loc 1 332 0
 185 0004 2648     		ldr	r0, .L18
 186 0006 2749     		ldr	r1, .L18+4
 187 0008 4FF44062 		mov	r2, #3072
 188 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 189              	.LVL16:
 334:Src/main.c    ****     while (1)
 190              		.loc 1 334 0
 191 0010 4FF4FA70 		mov	r0, #500
 192 0014 FFF7FEFF 		bl	HAL_Delay
 193              	.LVL17:
 194              	.L16:
 195              	.LBB2:
 337:Src/main.c    ****         // Sampling frequency: 72e6/2/(495*3)
 196              		.loc 1 337 0
 197 0018 0024     		movs	r4, #0
 198 001a 0394     		str	r4, [sp, #12]
 199 001c 0494     		str	r4, [sp, #16]
 200 001e 0594     		str	r4, [sp, #20]
 201 0020 0694     		str	r4, [sp, #24]
 202 0022 ADF81C40 		strh	r4, [sp, #28]	@ movhi
 341:Src/main.c    ****         int predec = (int)(val / 1);
 203              		.loc 1 341 0
 204 0026 0094     		str	r4, [sp]
 205 0028 1F48     		ldr	r0, .L18+8
 206 002a 45F6B261 		movw	r1, #24242
 207 002e 42F21072 		movw	r2, #10000
 208 0032 4FF44063 		mov	r3, #3072
 209 0036 FFF7FEFF 		bl	goertzel
 210              	.LVL18:
 211 003a 57EC106B 		fmrrd	r6, r7, d0
 212              	.LVL19:
 342:Src/main.c    ****         int postdec = (int)((val - predec) * 1000);
 213              		.loc 1 342 0
 214 003e 10EE100A 		fmrs	r0, s0	@ int
 215 0042 3946     		mov	r1, r7
 216 0044 FFF7FEFF 		bl	__aeabi_d2iz
 217              	.LVL20:
 218 0048 0546     		mov	r5, r0
 219              	.LVL21:
 343:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 220              		.loc 1 343 0
 221 004a FFF7FEFF 		bl	__aeabi_i2d
 222              	.LVL22:
 223 004e 0246     		mov	r2, r0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 12


 224 0050 0B46     		mov	r3, r1
 225 0052 3046     		mov	r0, r6
 226 0054 3946     		mov	r1, r7
 227 0056 FFF7FEFF 		bl	__aeabi_dsub
 228              	.LVL23:
 229 005a 0022     		movs	r2, #0
 230 005c 134B     		ldr	r3, .L18+12
 231 005e FFF7FEFF 		bl	__aeabi_dmul
 232              	.LVL24:
 233 0062 FFF7FEFF 		bl	__aeabi_d2iz
 234              	.LVL25:
 235 0066 0346     		mov	r3, r0
 236              	.LVL26:
 344:Src/main.c    ****         print(msg, 0);
 237              		.loc 1 344 0
 238 0068 03A8     		add	r0, sp, #12
 239              	.LVL27:
 240 006a 1149     		ldr	r1, .L18+16
 241 006c 2A46     		mov	r2, r5
 242 006e FFF7FEFF 		bl	sprintf
 243              	.LVL28:
 345:Src/main.c    ****         //compare
 244              		.loc 1 345 0
 245 0072 03A8     		add	r0, sp, #12
 246 0074 2146     		mov	r1, r4
 247 0076 FFF7FEFF 		bl	print
 248              	.LVL29:
 347:Src/main.c    ****         {
 249              		.loc 1 347 0
 250 007a 3046     		mov	r0, r6
 251 007c 3946     		mov	r1, r7
 252 007e 0022     		movs	r2, #0
 253 0080 0C4B     		ldr	r3, .L18+20
 254 0082 FFF7FEFF 		bl	__aeabi_dcmpgt
 255              	.LVL30:
 256 0086 0028     		cmp	r0, #0
 257 0088 C6D0     		beq	.L16
 258              	.LBE2:
 352:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 259              		.loc 1 352 0
 260 008a 0B48     		ldr	r0, .L18+24
 261 008c 2146     		mov	r1, r4
 262 008e FFF7FEFF 		bl	print
 263              	.LVL31:
 353:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 264              		.loc 1 353 0
 265 0092 0348     		ldr	r0, .L18
 266 0094 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 267              	.LVL32:
 354:Src/main.c    **** }
 268              		.loc 1 354 0
 269 0098 084B     		ldr	r3, .L18+28
 270 009a 1C70     		strb	r4, [r3]
 355:Src/main.c    **** 
 271              		.loc 1 355 0
 272 009c 09B0     		add	sp, sp, #36
 273              	.LCFI5:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 13


 274              		.cfi_def_cfa_offset 20
 275              		@ sp needed
 276 009e F0BD     		pop	{r4, r5, r6, r7, pc}
 277              	.LVL33:
 278              	.L19:
 279              		.align	2
 280              	.L18:
 281 00a0 00000000 		.word	hadc1
 282 00a4 00000000 		.word	dma_buffer
 283 00a8 00000000 		.word	adc_values
 284 00ac 00408F40 		.word	1083129856
 285 00b0 00000000 		.word	.LC0
 286 00b4 00000840 		.word	1074266112
 287 00b8 08000000 		.word	.LC1
 288 00bc 00000000 		.word	IR_INT_STATE
 289              		.cfi_endproc
 290              	.LFE129:
 292              		.section	.text.frequency_comparison,"ax",%progbits
 293              		.align	2
 294              		.global	frequency_comparison
 295              		.thumb
 296              		.thumb_func
 298              	frequency_comparison:
 299              	.LFB130:
 358:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 300              		.loc 1 358 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 32
 303              		@ frame_needed = 0, uses_anonymous_args = 0
 304              	.LVL34:
 305 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 306              	.LCFI6:
 307              		.cfi_def_cfa_offset 36
 308              		.cfi_offset 4, -36
 309              		.cfi_offset 5, -32
 310              		.cfi_offset 6, -28
 311              		.cfi_offset 7, -24
 312              		.cfi_offset 8, -20
 313              		.cfi_offset 9, -16
 314              		.cfi_offset 10, -12
 315              		.cfi_offset 11, -8
 316              		.cfi_offset 14, -4
 317 0004 8BB0     		sub	sp, sp, #44
 318              	.LCFI7:
 319              		.cfi_def_cfa_offset 80
 320 0006 0390     		str	r0, [sp, #12]
 321 0008 8946     		mov	r9, r1
 359:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 322              		.loc 1 359 0
 323 000a 202A     		cmp	r2, #32
 324 000c 07D0     		beq	.L25
 359:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 325              		.loc 1 359 0 is_stmt 0 discriminator 1
 326 000e 102A     		cmp	r2, #16
 327 0010 02D1     		bne	.L26
 359:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 328              		.loc 1 359 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 14


 329 0012 4FF00108 		mov	r8, #1
 330 0016 04E0     		b	.L21
 331              	.L26:
 332 0018 4FF00208 		mov	r8, #2
 333 001c 01E0     		b	.L21
 334              	.L25:
 335 001e 4FF00008 		mov	r8, #0
 336              	.L21:
 337              	.LVL35:
 360:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 338              		.loc 1 360 0 is_stmt 1 discriminator 8
 339 0022 4548     		ldr	r0, .L28
 340              	.LVL36:
 341 0024 4549     		ldr	r1, .L28+4
 342              	.LVL37:
 343 0026 4FF44062 		mov	r2, #3072
 344              	.LVL38:
 345 002a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 346              	.LVL39:
 362:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 347              		.loc 1 362 0 discriminator 8
 348 002e 4FF4FA70 		mov	r0, #500
 349 0032 FFF7FEFF 		bl	HAL_Delay
 350              	.LVL40:
 351              	.L24:
 352              	.LBB3:
 366:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
 353              		.loc 1 366 0
 354 0036 0026     		movs	r6, #0
 355 0038 0596     		str	r6, [sp, #20]
 356 003a 0696     		str	r6, [sp, #24]
 357 003c 0796     		str	r6, [sp, #28]
 358 003e 0896     		str	r6, [sp, #32]
 359 0040 ADF82460 		strh	r6, [sp, #36]	@ movhi
 369:Src/main.c    ****         int predec = (int)(val1 / 1);
 360              		.loc 1 369 0
 361 0044 5FFA88F7 		uxtb	r7, r8
 362 0048 DFF804B1 		ldr	fp, .L28+24
 363 004c 0097     		str	r7, [sp]
 364 004e 5846     		mov	r0, fp
 365 0050 45F2DC11 		movw	r1, #20956
 366 0054 039A     		ldr	r2, [sp, #12]
 367 0056 4FF44063 		mov	r3, #3072
 368 005a FFF7FEFF 		bl	goertzel
 369              	.LVL41:
 370 005e 55EC104B 		fmrrd	r4, r5, d0
 371              	.LVL42:
 370:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 372              		.loc 1 370 0
 373 0062 10EE100A 		fmrs	r0, s0	@ int
 374 0066 2946     		mov	r1, r5
 375 0068 FFF7FEFF 		bl	__aeabi_d2iz
 376              	.LVL43:
 377 006c 8246     		mov	r10, r0
 378              	.LVL44:
 371:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 379              		.loc 1 371 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 15


 380 006e FFF7FEFF 		bl	__aeabi_i2d
 381              	.LVL45:
 382 0072 0246     		mov	r2, r0
 383 0074 0B46     		mov	r3, r1
 384 0076 2046     		mov	r0, r4
 385 0078 2946     		mov	r1, r5
 386 007a FFF7FEFF 		bl	__aeabi_dsub
 387              	.LVL46:
 388 007e 0022     		movs	r2, #0
 389 0080 2F4B     		ldr	r3, .L28+8
 390 0082 FFF7FEFF 		bl	__aeabi_dmul
 391              	.LVL47:
 392 0086 FFF7FEFF 		bl	__aeabi_d2iz
 393              	.LVL48:
 394 008a 0346     		mov	r3, r0
 395              	.LVL49:
 372:Src/main.c    ****         print(msg, 0);
 396              		.loc 1 372 0
 397 008c 05A8     		add	r0, sp, #20
 398              	.LVL50:
 399 008e 2D49     		ldr	r1, .L28+12
 400 0090 5246     		mov	r2, r10
 401 0092 FFF7FEFF 		bl	sprintf
 402              	.LVL51:
 373:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 403              		.loc 1 373 0
 404 0096 05A8     		add	r0, sp, #20
 405 0098 3146     		mov	r1, r6
 406 009a FFF7FEFF 		bl	print
 407              	.LVL52:
 374:Src/main.c    ****         //freq2
 408              		.loc 1 374 0
 409 009e 05A8     		add	r0, sp, #20
 410 00a0 FFF7FEFF 		bl	strlen
 411              	.LVL53:
 412 00a4 DFF8ACA0 		ldr	r10, .L28+28
 413              	.LVL54:
 414 00a8 82B2     		uxth	r2, r0
 415 00aa 5046     		mov	r0, r10
 416 00ac 05A9     		add	r1, sp, #20
 417 00ae 4FF6FF73 		movw	r3, #65535
 418 00b2 FFF7FEFF 		bl	HAL_UART_Transmit
 419              	.LVL55:
 376:Src/main.c    ****         predec = (int)(val2 / 1);
 420              		.loc 1 376 0
 421 00b6 0097     		str	r7, [sp]
 422 00b8 5846     		mov	r0, fp
 423 00ba 45F2DC11 		movw	r1, #20956
 424 00be 4A46     		mov	r2, r9
 425 00c0 4FF44063 		mov	r3, #3072
 426 00c4 FFF7FEFF 		bl	goertzel
 427              	.LVL56:
 428 00c8 57EC106B 		fmrrd	r6, r7, d0
 429              	.LVL57:
 377:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 430              		.loc 1 377 0
 431 00cc 10EE100A 		fmrs	r0, s0	@ int
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 16


 432 00d0 3946     		mov	r1, r7
 433 00d2 FFF7FEFF 		bl	__aeabi_d2iz
 434              	.LVL58:
 435 00d6 8346     		mov	fp, r0
 436              	.LVL59:
 378:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 437              		.loc 1 378 0
 438 00d8 FFF7FEFF 		bl	__aeabi_i2d
 439              	.LVL60:
 440 00dc 0246     		mov	r2, r0
 441 00de 0B46     		mov	r3, r1
 442 00e0 3046     		mov	r0, r6
 443 00e2 3946     		mov	r1, r7
 444 00e4 FFF7FEFF 		bl	__aeabi_dsub
 445              	.LVL61:
 446 00e8 0022     		movs	r2, #0
 447 00ea 154B     		ldr	r3, .L28+8
 448 00ec FFF7FEFF 		bl	__aeabi_dmul
 449              	.LVL62:
 450 00f0 FFF7FEFF 		bl	__aeabi_d2iz
 451              	.LVL63:
 452 00f4 0346     		mov	r3, r0
 453              	.LVL64:
 379:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 454              		.loc 1 379 0
 455 00f6 05A8     		add	r0, sp, #20
 456              	.LVL65:
 457 00f8 1349     		ldr	r1, .L28+16
 458 00fa 5A46     		mov	r2, fp
 459 00fc FFF7FEFF 		bl	sprintf
 460              	.LVL66:
 380:Src/main.c    ****         //compare
 461              		.loc 1 380 0
 462 0100 05A8     		add	r0, sp, #20
 463 0102 FFF7FEFF 		bl	strlen
 464              	.LVL67:
 465 0106 82B2     		uxth	r2, r0
 466 0108 5046     		mov	r0, r10
 467 010a 05A9     		add	r1, sp, #20
 468 010c 4FF6FF73 		movw	r3, #65535
 469 0110 FFF7FEFF 		bl	HAL_UART_Transmit
 470              	.LVL68:
 382:Src/main.c    ****         {
 471              		.loc 1 382 0
 472 0114 2046     		mov	r0, r4
 473 0116 2946     		mov	r1, r5
 474 0118 3246     		mov	r2, r6
 475 011a 3B46     		mov	r3, r7
 476 011c FFF7FEFF 		bl	__aeabi_dcmpgt
 477              	.LVL69:
 478 0120 0028     		cmp	r0, #0
 479 0122 88D0     		beq	.L24
 480              	.LBE3:
 387:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 481              		.loc 1 387 0
 482 0124 0448     		ldr	r0, .L28
 483 0126 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 17


 484              	.LVL70:
 388:Src/main.c    **** }
 485              		.loc 1 388 0
 486 012a 0022     		movs	r2, #0
 487 012c 074B     		ldr	r3, .L28+20
 488 012e 1A70     		strb	r2, [r3]
 389:Src/main.c    **** 
 489              		.loc 1 389 0
 490 0130 0BB0     		add	sp, sp, #44
 491              	.LCFI8:
 492              		.cfi_def_cfa_offset 36
 493              		@ sp needed
 494 0132 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 495              	.LVL71:
 496              	.L29:
 497 0136 00BF     		.align	2
 498              	.L28:
 499 0138 00000000 		.word	hadc1
 500 013c 00000000 		.word	dma_buffer
 501 0140 00408F40 		.word	1083129856
 502 0144 00000000 		.word	.LC0
 503 0148 0C000000 		.word	.LC2
 504 014c 00000000 		.word	IR_INT_STATE
 505 0150 00000000 		.word	adc_values
 506 0154 00000000 		.word	huart6
 507              		.cfi_endproc
 508              	.LFE130:
 510              		.section	.text.menu,"ax",%progbits
 511              		.align	2
 512              		.global	menu
 513              		.thumb
 514              		.thumb_func
 516              	menu:
 517              	.LFB132:
 405:Src/main.c    **** }
 406:Src/main.c    **** 
 407:Src/main.c    **** PID_t menu()
 408:Src/main.c    **** {
 518              		.loc 1 408 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 32
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522              	.LVL72:
 523 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 524              	.LCFI9:
 525              		.cfi_def_cfa_offset 24
 526              		.cfi_offset 4, -24
 527              		.cfi_offset 5, -20
 528              		.cfi_offset 6, -16
 529              		.cfi_offset 7, -12
 530              		.cfi_offset 8, -8
 531              		.cfi_offset 14, -4
 532 0004 8AB0     		sub	sp, sp, #40
 533              	.LCFI10:
 534              		.cfi_def_cfa_offset 64
 535 0006 0646     		mov	r6, r0
 409:Src/main.c    ****     print("Starting", 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 18


 536              		.loc 1 409 0
 537 0008 7048     		ldr	r0, .L44
 538              	.LVL73:
 539 000a 0021     		movs	r1, #0
 540 000c FFF7FEFF 		bl	print
 541              	.LVL74:
 410:Src/main.c    ****     char msg[20] = "";
 542              		.loc 1 410 0
 543 0010 0025     		movs	r5, #0
 544 0012 0595     		str	r5, [sp, #20]
 545 0014 0695     		str	r5, [sp, #24]
 546 0016 0795     		str	r5, [sp, #28]
 547 0018 0895     		str	r5, [sp, #32]
 548 001a 0995     		str	r5, [sp, #36]
 549              	.LVL75:
 411:Src/main.c    ****     int pid_select = 0;
 412:Src/main.c    ****     uint32_t values[3] = {0, 0, 0};
 550              		.loc 1 412 0
 551 001c 0295     		str	r5, [sp, #8]
 552 001e 0395     		str	r5, [sp, #12]
 553 0020 0495     		str	r5, [sp, #16]
 554              	.LVL76:
 555              	.L34:
 413:Src/main.c    ****     while (1)
 414:Src/main.c    ****     {
 415:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 556              		.loc 1 415 0
 557 0022 6B48     		ldr	r0, .L44+4
 558 0024 4FF40051 		mov	r1, #8192
 559 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 560              	.LVL77:
 561 002c 38BB     		cbnz	r0, .L31
 416:Src/main.c    ****         {
 417:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 562              		.loc 1 417 0
 563 002e 0AAB     		add	r3, sp, #40
 564 0030 03EB8503 		add	r3, r3, r5, lsl #2
 565 0034 53F8204C 		ldr	r4, [r3, #-32]
 566 0038 05A8     		add	r0, sp, #20
 567 003a 6649     		ldr	r1, .L44+8
 568 003c 2246     		mov	r2, r4
 569 003e FFF7FEFF 		bl	sprintf
 570              	.LVL78:
 418:Src/main.c    ****             print(msg, 0);
 571              		.loc 1 418 0
 572 0042 05A8     		add	r0, sp, #20
 573 0044 0021     		movs	r1, #0
 574 0046 FFF7FEFF 		bl	print
 575              	.LVL79:
 419:Src/main.c    ****             TIM4->CNT = values[pid_select];
 576              		.loc 1 419 0
 577 004a 634B     		ldr	r3, .L44+12
 578 004c 5C62     		str	r4, [r3, #36]
 420:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 579              		.loc 1 420 0
 580 004e 0EE0     		b	.L32
 581              	.L33:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 19


 421:Src/main.c    ****             {
 422:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 582              		.loc 1 422 0
 583 0050 614B     		ldr	r3, .L44+12
 584 0052 5A6A     		ldr	r2, [r3, #36]
 585 0054 0AAB     		add	r3, sp, #40
 586 0056 03EB8503 		add	r3, r3, r5, lsl #2
 587 005a 43F8202C 		str	r2, [r3, #-32]
 423:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 588              		.loc 1 423 0
 589 005e 05A8     		add	r0, sp, #20
 590 0060 5C49     		ldr	r1, .L44+8
 591 0062 FFF7FEFF 		bl	sprintf
 592              	.LVL80:
 424:Src/main.c    ****                 print(msg, 0);
 593              		.loc 1 424 0
 594 0066 05A8     		add	r0, sp, #20
 595 0068 0021     		movs	r1, #0
 596 006a FFF7FEFF 		bl	print
 597              	.LVL81:
 598              	.L32:
 420:Src/main.c    ****             {
 599              		.loc 1 420 0
 600 006e 5848     		ldr	r0, .L44+4
 601 0070 4FF40051 		mov	r1, #8192
 602 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 603              	.LVL82:
 604 0078 0028     		cmp	r0, #0
 605 007a E9D0     		beq	.L33
 425:Src/main.c    ****             }
 426:Src/main.c    ****             ++pid_select;
 606              		.loc 1 426 0
 607 007c 0135     		adds	r5, r5, #1
 608              	.LVL83:
 609              	.L31:
 427:Src/main.c    ****         }
 428:Src/main.c    ****         if (pid_select == 3)
 610              		.loc 1 428 0
 611 007e 032D     		cmp	r5, #3
 612 0080 CFD1     		bne	.L34
 613              	.L42:
 614              	.LVL84:
 615              	.LBB4:
 429:Src/main.c    ****             break;
 430:Src/main.c    ****     }
 431:Src/main.c    ****     while (1)
 432:Src/main.c    ****     {
 433:Src/main.c    ****         int speed = 20000;
 434:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 616              		.loc 1 434 0
 617 0082 5348     		ldr	r0, .L44+4
 618 0084 4FF40051 		mov	r1, #8192
 619 0088 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 620              	.LVL85:
 621 008c 0028     		cmp	r0, #0
 622 008e 43D1     		bne	.L35
 435:Src/main.c    ****         {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 20


 436:Src/main.c    ****             if (pid_select == 3)
 623              		.loc 1 436 0
 624 0090 032D     		cmp	r5, #3
 625 0092 09D1     		bne	.L36
 437:Src/main.c    ****             {
 438:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 626              		.loc 1 438 0
 627 0094 514C     		ldr	r4, .L44+16
 628 0096 2046     		mov	r0, r4
 629 0098 0021     		movs	r1, #0
 630 009a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 631              	.LVL86:
 439:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 632              		.loc 1 439 0
 633 009e 2046     		mov	r0, r4
 634 00a0 0821     		movs	r1, #8
 635 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 636              	.LVL87:
 637 00a6 08E0     		b	.L37
 638              	.L36:
 440:Src/main.c    ****             }
 441:Src/main.c    ****             else
 442:Src/main.c    ****             {
 443:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 639              		.loc 1 443 0
 640 00a8 4C4C     		ldr	r4, .L44+16
 641 00aa 2046     		mov	r0, r4
 642 00ac 0021     		movs	r1, #0
 643 00ae FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 644              	.LVL88:
 444:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 645              		.loc 1 444 0
 646 00b2 2046     		mov	r0, r4
 647 00b4 0821     		movs	r1, #8
 648 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 649              	.LVL89:
 650              	.L37:
 445:Src/main.c    ****             }
 446:Src/main.c    ****             sprintf(msg, "%d", speed);
 651              		.loc 1 446 0
 652 00ba 05A8     		add	r0, sp, #20
 653 00bc 4849     		ldr	r1, .L44+20
 654 00be 44F62062 		movw	r2, #20000
 655 00c2 FFF7FEFF 		bl	sprintf
 656              	.LVL90:
 447:Src/main.c    ****             print(msg, 0);
 657              		.loc 1 447 0
 658 00c6 05A8     		add	r0, sp, #20
 659 00c8 0021     		movs	r1, #0
 660 00ca FFF7FEFF 		bl	print
 661              	.LVL91:
 448:Src/main.c    ****             TIM4->CNT = speed;
 662              		.loc 1 448 0
 663 00ce 44F62062 		movw	r2, #20000
 664 00d2 414B     		ldr	r3, .L44+12
 665 00d4 5A62     		str	r2, [r3, #36]
 449:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 21


 666              		.loc 1 449 0
 667 00d6 17E0     		b	.L38
 668              	.LVL92:
 669              	.L41:
 450:Src/main.c    ****             {
 451:Src/main.c    ****                 speed = TIM4->CNT;
 670              		.loc 1 451 0
 671 00d8 3F4B     		ldr	r3, .L44+12
 672 00da 5C6A     		ldr	r4, [r3, #36]
 673              	.LVL93:
 452:Src/main.c    ****                 sprintf(msg, "%d", speed);
 674              		.loc 1 452 0
 675 00dc 05A8     		add	r0, sp, #20
 676 00de 4049     		ldr	r1, .L44+20
 677 00e0 2246     		mov	r2, r4
 678 00e2 FFF7FEFF 		bl	sprintf
 679              	.LVL94:
 453:Src/main.c    ****                 print(msg, 0);
 680              		.loc 1 453 0
 681 00e6 05A8     		add	r0, sp, #20
 682 00e8 0021     		movs	r1, #0
 683 00ea FFF7FEFF 		bl	print
 684              	.LVL95:
 454:Src/main.c    ****                 if (pid_select == 3)
 685              		.loc 1 454 0
 686 00ee 032D     		cmp	r5, #3
 687 00f0 05D1     		bne	.L39
 455:Src/main.c    ****                 {
 456:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 688              		.loc 1 456 0
 689 00f2 3A4B     		ldr	r3, .L44+16
 690 00f4 1B68     		ldr	r3, [r3]
 691 00f6 5C63     		str	r4, [r3, #52]
 457:Src/main.c    ****                     LEFT_SPEED = speed;
 692              		.loc 1 457 0
 693 00f8 3A4B     		ldr	r3, .L44+24
 694 00fa 1C80     		strh	r4, [r3]	@ movhi
 695 00fc 04E0     		b	.L38
 696              	.L39:
 458:Src/main.c    ****                 }
 459:Src/main.c    ****                 else
 460:Src/main.c    ****                 {
 461:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 697              		.loc 1 461 0
 698 00fe 374B     		ldr	r3, .L44+16
 699 0100 1B68     		ldr	r3, [r3]
 700 0102 DC63     		str	r4, [r3, #60]
 462:Src/main.c    ****                     RIGHT_SPEED = speed;
 701              		.loc 1 462 0
 702 0104 384B     		ldr	r3, .L44+28
 703 0106 1C80     		strh	r4, [r3]	@ movhi
 704              	.LVL96:
 705              	.L38:
 449:Src/main.c    ****             {
 706              		.loc 1 449 0
 707 0108 3148     		ldr	r0, .L44+4
 708 010a 4FF40051 		mov	r1, #8192
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 22


 709 010e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 710              	.LVL97:
 711 0112 0028     		cmp	r0, #0
 712 0114 E0D0     		beq	.L41
 463:Src/main.c    ****                 }
 464:Src/main.c    ****             }
 465:Src/main.c    ****             ++pid_select;
 713              		.loc 1 465 0
 714 0116 0135     		adds	r5, r5, #1
 715              	.LVL98:
 716              	.L35:
 466:Src/main.c    ****         }
 467:Src/main.c    ****         if (pid_select == 5)
 717              		.loc 1 467 0
 718 0118 052D     		cmp	r5, #5
 719 011a B2D1     		bne	.L42
 720              	.LBE4:
 468:Src/main.c    ****         {
 469:Src/main.c    ****             break;
 470:Src/main.c    ****         }
 471:Src/main.c    ****     }
 472:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 721              		.loc 1 472 0
 722 011c 2F4C     		ldr	r4, .L44+16
 723 011e 2046     		mov	r0, r4
 724 0120 0021     		movs	r1, #0
 725 0122 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 726              	.LVL99:
 473:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 727              		.loc 1 473 0
 728 0126 2046     		mov	r0, r4
 729 0128 0821     		movs	r1, #8
 730 012a FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 731              	.LVL100:
 474:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 732              		.loc 1 474 0
 733 012e DDF80880 		ldr	r8, [sp, #8]
 734 0132 05A8     		add	r0, sp, #20
 735 0134 2D49     		ldr	r1, .L44+32
 736 0136 4246     		mov	r2, r8
 737 0138 FFF7FEFF 		bl	sprintf
 738              	.LVL101:
 475:Src/main.c    ****     print(msg, 0);
 739              		.loc 1 475 0
 740 013c 05A8     		add	r0, sp, #20
 741 013e 0021     		movs	r1, #0
 742 0140 FFF7FEFF 		bl	print
 743              	.LVL102:
 476:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 744              		.loc 1 476 0
 745 0144 039F     		ldr	r7, [sp, #12]
 746 0146 05A8     		add	r0, sp, #20
 747 0148 2949     		ldr	r1, .L44+36
 748 014a 3A46     		mov	r2, r7
 749 014c FFF7FEFF 		bl	sprintf
 750              	.LVL103:
 477:Src/main.c    ****     print(msg, 1);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 23


 751              		.loc 1 477 0
 752 0150 05A8     		add	r0, sp, #20
 753 0152 0121     		movs	r1, #1
 754 0154 FFF7FEFF 		bl	print
 755              	.LVL104:
 478:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 756              		.loc 1 478 0
 757 0158 049D     		ldr	r5, [sp, #16]
 758              	.LVL105:
 759 015a 05A8     		add	r0, sp, #20
 760 015c 2549     		ldr	r1, .L44+40
 761 015e 2A46     		mov	r2, r5
 762 0160 FFF7FEFF 		bl	sprintf
 763              	.LVL106:
 479:Src/main.c    ****     print(msg, 2);
 764              		.loc 1 479 0
 765 0164 05A8     		add	r0, sp, #20
 766 0166 0221     		movs	r1, #2
 767 0168 FFF7FEFF 		bl	print
 768              	.LVL107:
 480:Src/main.c    ****     sprintf(msg, "L %u", LEFT_SPEED);
 769              		.loc 1 480 0
 770 016c 05A8     		add	r0, sp, #20
 771 016e 2249     		ldr	r1, .L44+44
 772 0170 1C4B     		ldr	r3, .L44+24
 773 0172 1A88     		ldrh	r2, [r3]
 774 0174 FFF7FEFF 		bl	sprintf
 775              	.LVL108:
 481:Src/main.c    ****     print(msg, 3);
 776              		.loc 1 481 0
 777 0178 05A8     		add	r0, sp, #20
 778 017a 0321     		movs	r1, #3
 779 017c FFF7FEFF 		bl	print
 780              	.LVL109:
 482:Src/main.c    ****     sprintf(msg, "R %u", RIGHT_SPEED);
 781              		.loc 1 482 0
 782 0180 05A8     		add	r0, sp, #20
 783 0182 1E49     		ldr	r1, .L44+48
 784 0184 184B     		ldr	r3, .L44+28
 785 0186 1A88     		ldrh	r2, [r3]
 786 0188 FFF7FEFF 		bl	sprintf
 787              	.LVL110:
 483:Src/main.c    ****     print(msg, 4);
 788              		.loc 1 483 0
 789 018c 05A8     		add	r0, sp, #20
 790 018e 0421     		movs	r1, #4
 791 0190 FFF7FEFF 		bl	print
 792              	.LVL111:
 484:Src/main.c    ****     HAL_Delay(1000);
 793              		.loc 1 484 0
 794 0194 4FF47A70 		mov	r0, #1000
 795 0198 FFF7FEFF 		bl	HAL_Delay
 796              	.LVL112:
 485:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 797              		.loc 1 485 0
 798 019c 2046     		mov	r0, r4
 799 019e 0021     		movs	r1, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 24


 800 01a0 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 801              	.LVL113:
 486:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 802              		.loc 1 486 0
 803 01a4 2046     		mov	r0, r4
 804 01a6 0821     		movs	r1, #8
 805 01a8 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 806              	.LVL114:
 487:Src/main.c    ****     return pid_Init(values[0], values[1], values[2], 5, 100);
 807              		.loc 1 487 0
 808 01ac 0523     		movs	r3, #5
 809 01ae 0093     		str	r3, [sp]
 810 01b0 6423     		movs	r3, #100
 811 01b2 0193     		str	r3, [sp, #4]
 812 01b4 3046     		mov	r0, r6
 813 01b6 1FFA88F1 		uxth	r1, r8
 814 01ba BAB2     		uxth	r2, r7
 815 01bc ABB2     		uxth	r3, r5
 816 01be FFF7FEFF 		bl	pid_Init
 817              	.LVL115:
 488:Src/main.c    **** }
 818              		.loc 1 488 0
 819 01c2 3046     		mov	r0, r6
 820 01c4 0AB0     		add	sp, sp, #40
 821              	.LCFI11:
 822              		.cfi_def_cfa_offset 24
 823              		@ sp needed
 824 01c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 825              	.LVL116:
 826              	.L45:
 827 01ca 00BF     		.align	2
 828              	.L44:
 829 01cc 14000000 		.word	.LC3
 830 01d0 00080240 		.word	1073874944
 831 01d4 20000000 		.word	.LC4
 832 01d8 00080040 		.word	1073743872
 833 01dc 00000000 		.word	htim1
 834 01e0 24000000 		.word	.LC5
 835 01e4 00000000 		.word	.LANCHOR0
 836 01e8 00000000 		.word	.LANCHOR1
 837 01ec 28000000 		.word	.LC6
 838 01f0 30000000 		.word	.LC7
 839 01f4 38000000 		.word	.LC8
 840 01f8 40000000 		.word	.LC9
 841 01fc 48000000 		.word	.LC10
 842              		.cfi_endproc
 843              	.LFE132:
 845              		.section	.text.do_pid,"ax",%progbits
 846              		.align	2
 847              		.global	do_pid
 848              		.thumb
 849              		.thumb_func
 851              	do_pid:
 852              	.LFB133:
 489:Src/main.c    **** 
 490:Src/main.c    **** void do_pid(PID_t *pid_struct)
 491:Src/main.c    **** {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 25


 853              		.loc 1 491 0
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 24
 856              		@ frame_needed = 0, uses_anonymous_args = 0
 857              	.LVL117:
 858 0000 70B5     		push	{r4, r5, r6, lr}
 859              	.LCFI12:
 860              		.cfi_def_cfa_offset 16
 861              		.cfi_offset 4, -16
 862              		.cfi_offset 5, -12
 863              		.cfi_offset 6, -8
 864              		.cfi_offset 14, -4
 865 0002 86B0     		sub	sp, sp, #24
 866              	.LCFI13:
 867              		.cfi_def_cfa_offset 40
 868 0004 0646     		mov	r6, r0
 492:Src/main.c    ****     /* Read sensors */
 493:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) ? 0 : 1;
 869              		.loc 1 493 0
 870 0006 2B4D     		ldr	r5, .L55
 871 0008 2846     		mov	r0, r5
 872              	.LVL118:
 873 000a 4FF48041 		mov	r1, #16384
 874 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 875              	.LVL119:
 876 0012 B0FA80F4 		clz	r4, r0
 877 0016 6409     		lsrs	r4, r4, #5
 878              	.LVL120:
 494:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 879              		.loc 1 494 0
 880 0018 2846     		mov	r0, r5
 881 001a 4FF40041 		mov	r1, #32768
 882 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 883              	.LVL121:
 884 0022 B0FA80F0 		clz	r0, r0
 885 0026 4009     		lsrs	r0, r0, #5
 886              	.LVL122:
 495:Src/main.c    **** 
 496:Src/main.c    ****     /* Get error */
 497:Src/main.c    ****     if (left && right)
 887              		.loc 1 497 0
 888 0028 1CB1     		cbz	r4, .L47
 889              		.loc 1 497 0 is_stmt 0 discriminator 1
 890 002a 10B1     		cbz	r0, .L47
 498:Src/main.c    ****     {
 499:Src/main.c    ****         pid_struct->err = 0;
 891              		.loc 1 499 0 is_stmt 1
 892 002c 0023     		movs	r3, #0
 893 002e 3361     		str	r3, [r6, #16]
 894 0030 1AE0     		b	.L48
 895              	.L47:
 500:Src/main.c    ****     }
 501:Src/main.c    ****     else if (left && !right)
 896              		.loc 1 501 0
 897 0032 1CB1     		cbz	r4, .L49
 898              		.loc 1 501 0 is_stmt 0 discriminator 1
 899 0034 10B9     		cbnz	r0, .L49
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 26


 502:Src/main.c    ****     {
 503:Src/main.c    ****         pid_struct->err = 1;
 900              		.loc 1 503 0 is_stmt 1
 901 0036 0123     		movs	r3, #1
 902 0038 3361     		str	r3, [r6, #16]
 903 003a 15E0     		b	.L48
 904              	.L49:
 504:Src/main.c    ****     }
 505:Src/main.c    ****     else if (!left && right)
 905              		.loc 1 505 0
 906 003c 24B9     		cbnz	r4, .L50
 907              		.loc 1 505 0 is_stmt 0 discriminator 1
 908 003e 18B1     		cbz	r0, .L50
 506:Src/main.c    ****     {
 507:Src/main.c    ****         pid_struct->err = -1;
 909              		.loc 1 507 0 is_stmt 1
 910 0040 4FF0FF33 		mov	r3, #-1
 911 0044 3361     		str	r3, [r6, #16]
 912 0046 0FE0     		b	.L48
 913              	.L50:
 508:Src/main.c    ****     }
 509:Src/main.c    ****     else if (!left && !right && (pid_struct->err < 0))
 914              		.loc 1 509 0
 915 0048 3CB9     		cbnz	r4, .L51
 916              		.loc 1 509 0 is_stmt 0 discriminator 1
 917 004a 30B9     		cbnz	r0, .L51
 918              		.loc 1 509 0 discriminator 2
 919 004c 3369     		ldr	r3, [r6, #16]
 920 004e 002B     		cmp	r3, #0
 921 0050 03DA     		bge	.L51
 510:Src/main.c    ****     {
 511:Src/main.c    ****         pid_struct->err = -5;
 922              		.loc 1 511 0 is_stmt 1
 923 0052 6FF00403 		mvn	r3, #4
 924 0056 3361     		str	r3, [r6, #16]
 925 0058 06E0     		b	.L48
 926              	.L51:
 512:Src/main.c    ****     }
 513:Src/main.c    ****     else if (!left && !right && (pid_struct->err > 0))
 927              		.loc 1 513 0
 928 005a 2CB9     		cbnz	r4, .L48
 929              		.loc 1 513 0 is_stmt 0 discriminator 1
 930 005c 20B9     		cbnz	r0, .L48
 931              		.loc 1 513 0 discriminator 2
 932 005e 3369     		ldr	r3, [r6, #16]
 933 0060 002B     		cmp	r3, #0
 934 0062 01DD     		ble	.L48
 514:Src/main.c    ****     {
 515:Src/main.c    ****         pid_struct->err = 5;
 935              		.loc 1 515 0 is_stmt 1
 936 0064 0523     		movs	r3, #5
 937 0066 3361     		str	r3, [r6, #16]
 938              	.L48:
 516:Src/main.c    ****     }
 517:Src/main.c    **** 
 518:Src/main.c    ****     /* Get gain */
 519:Src/main.c    ****     int16_t gain = pid_GetGain(pid_struct);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 27


 939              		.loc 1 519 0
 940 0068 3046     		mov	r0, r6
 941              	.LVL123:
 942 006a FFF7FEFF 		bl	pid_GetGain
 943              	.LVL124:
 944 006e 85B2     		uxth	r5, r0
 945              	.LVL125:
 520:Src/main.c    ****     char msg[20] = "";
 946              		.loc 1 520 0
 947 0070 0024     		movs	r4, #0
 948              	.LVL126:
 949 0072 0194     		str	r4, [sp, #4]
 950 0074 0294     		str	r4, [sp, #8]
 951 0076 0394     		str	r4, [sp, #12]
 952 0078 0494     		str	r4, [sp, #16]
 953 007a 0594     		str	r4, [sp, #20]
 521:Src/main.c    ****     sprintf(msg, "%d", (int)gain);
 954              		.loc 1 521 0
 955 007c 2EB2     		sxth	r6, r5
 956              	.LVL127:
 957 007e 01A8     		add	r0, sp, #4
 958 0080 0D49     		ldr	r1, .L55+4
 959 0082 3246     		mov	r2, r6
 960 0084 FFF7FEFF 		bl	sprintf
 961              	.LVL128:
 522:Src/main.c    ****     print(msg, 0);
 962              		.loc 1 522 0
 963 0088 01A8     		add	r0, sp, #4
 964 008a 2146     		mov	r1, r4
 965 008c FFF7FEFF 		bl	print
 966              	.LVL129:
 523:Src/main.c    ****     /* Set Motor Speeds*/
 524:Src/main.c    ****     int lspeed = LEFT_SPEED;
 967              		.loc 1 524 0
 968 0090 0A4B     		ldr	r3, .L55+8
 969 0092 1988     		ldrh	r1, [r3]
 970              	.LVL130:
 525:Src/main.c    ****     int rspeed = RIGHT_SPEED;
 971              		.loc 1 525 0
 972 0094 0A4B     		ldr	r3, .L55+12
 973 0096 1B88     		ldrh	r3, [r3]
 974              	.LVL131:
 526:Src/main.c    ****     if (gain < 0)
 975              		.loc 1 526 0
 976 0098 A642     		cmp	r6, r4
 977 009a 01DA     		bge	.L52
 527:Src/main.c    ****     {
 528:Src/main.c    ****         lspeed = LEFT_SPEED - gain;
 978              		.loc 1 528 0
 979 009c 891B     		subs	r1, r1, r6
 980              	.LVL132:
 981 009e 03E0     		b	.L53
 982              	.L52:
 529:Src/main.c    ****     }
 530:Src/main.c    ****     else if (gain > 0)
 983              		.loc 1 530 0
 984 00a0 2DB2     		sxth	r5, r5
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 28


 985 00a2 002D     		cmp	r5, #0
 986 00a4 00DD     		ble	.L53
 531:Src/main.c    ****     {
 532:Src/main.c    ****         rspeed = RIGHT_SPEED + gain;
 987              		.loc 1 532 0
 988 00a6 3344     		add	r3, r3, r6
 989              	.LVL133:
 990              	.L53:
 533:Src/main.c    ****     }
 534:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, lspeed);
 991              		.loc 1 534 0
 992 00a8 064A     		ldr	r2, .L55+16
 993 00aa 1268     		ldr	r2, [r2]
 994 00ac 5163     		str	r1, [r2, #52]
 535:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, rspeed);
 995              		.loc 1 535 0
 996 00ae D363     		str	r3, [r2, #60]
 536:Src/main.c    **** }
 997              		.loc 1 536 0
 998 00b0 06B0     		add	sp, sp, #24
 999              	.LCFI14:
 1000              		.cfi_def_cfa_offset 16
 1001              		@ sp needed
 1002 00b2 70BD     		pop	{r4, r5, r6, pc}
 1003              	.LVL134:
 1004              	.L56:
 1005              		.align	2
 1006              	.L55:
 1007 00b4 00040240 		.word	1073873920
 1008 00b8 24000000 		.word	.LC5
 1009 00bc 00000000 		.word	.LANCHOR0
 1010 00c0 00000000 		.word	.LANCHOR1
 1011 00c4 00000000 		.word	htim1
 1012              		.cfi_endproc
 1013              	.LFE133:
 1015              		.section	.text.set_motor_speed,"ax",%progbits
 1016              		.align	2
 1017              		.global	set_motor_speed
 1018              		.thumb
 1019              		.thumb_func
 1021              	set_motor_speed:
 1022              	.LFB134:
 537:Src/main.c    **** 
 538:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 539:Src/main.c    **** {
 1023              		.loc 1 539 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 0
 1026              		@ frame_needed = 0, uses_anonymous_args = 0
 1027              		@ link register save eliminated.
 1028              	.LVL135:
 540:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 1029              		.loc 1 540 0
 1030 0000 0346     		mov	r3, r0
 1031 0002 18B9     		cbnz	r0, .L58
 541:Src/main.c    ****     {
 542:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 29


 1032              		.loc 1 542 0
 1033 0004 0F4A     		ldr	r2, .L62
 1034 0006 1268     		ldr	r2, [r2]
 1035 0008 9063     		str	r0, [r2, #56]
 1036 000a 13E0     		b	.L59
 1037              	.L58:
 543:Src/main.c    ****     }
 544:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 1038              		.loc 1 544 0
 1039 000c 0428     		cmp	r0, #4
 1040 000e 04D1     		bne	.L60
 545:Src/main.c    ****     {
 546:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 1041              		.loc 1 546 0
 1042 0010 0C4A     		ldr	r2, .L62
 1043 0012 1268     		ldr	r2, [r2]
 1044 0014 0020     		movs	r0, #0
 1045              	.LVL136:
 1046 0016 5063     		str	r0, [r2, #52]
 1047 0018 0CE0     		b	.L59
 1048              	.LVL137:
 1049              	.L60:
 547:Src/main.c    ****     }
 548:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 1050              		.loc 1 548 0
 1051 001a 0828     		cmp	r0, #8
 1052 001c 04D1     		bne	.L61
 549:Src/main.c    ****     {
 550:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 1053              		.loc 1 550 0
 1054 001e 094A     		ldr	r2, .L62
 1055 0020 1268     		ldr	r2, [r2]
 1056 0022 0020     		movs	r0, #0
 1057              	.LVL138:
 1058 0024 1064     		str	r0, [r2, #64]
 1059 0026 05E0     		b	.L59
 1060              	.LVL139:
 1061              	.L61:
 551:Src/main.c    ****     }
 552:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 1062              		.loc 1 552 0
 1063 0028 0C28     		cmp	r0, #12
 1064 002a 03D1     		bne	.L59
 553:Src/main.c    ****     {
 554:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 1065              		.loc 1 554 0
 1066 002c 054A     		ldr	r2, .L62
 1067 002e 1268     		ldr	r2, [r2]
 1068 0030 0020     		movs	r0, #0
 1069              	.LVL140:
 1070 0032 D063     		str	r0, [r2, #60]
 1071              	.L59:
 555:Src/main.c    ****     }
 556:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 1072              		.loc 1 556 0
 1073 0034 034A     		ldr	r2, .L62
 1074 0036 1268     		ldr	r2, [r2]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 30


 1075 0038 3432     		adds	r2, r2, #52
 1076 003a 9B08     		lsrs	r3, r3, #2
 1077              	.LVL141:
 1078 003c 42F82310 		str	r1, [r2, r3, lsl #2]
 1079 0040 7047     		bx	lr
 1080              	.L63:
 1081 0042 00BF     		.align	2
 1082              	.L62:
 1083 0044 00000000 		.word	htim1
 1084              		.cfi_endproc
 1085              	.LFE134:
 1087              		.global	__aeabi_f2d
 1088              		.global	__aeabi_d2uiz
 1089              		.section	.text.turn,"ax",%progbits
 1090              		.align	2
 1091              		.global	turn
 1092              		.thumb
 1093              		.thumb_func
 1095              	turn:
 1096              	.LFB126:
 254:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1097              		.loc 1 254 0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 24
 1100              		@ frame_needed = 0, uses_anonymous_args = 0
 1101 0000 30B5     		push	{r4, r5, lr}
 1102              	.LCFI15:
 1103              		.cfi_def_cfa_offset 12
 1104              		.cfi_offset 4, -12
 1105              		.cfi_offset 5, -8
 1106              		.cfi_offset 14, -4
 1107 0002 2DED028B 		fstmfdd	sp!, {d8}
 1108              	.LCFI16:
 1109              		.cfi_def_cfa_offset 20
 1110              		.cfi_offset 80, -20
 1111              		.cfi_offset 81, -16
 1112 0006 87B0     		sub	sp, sp, #28
 1113              	.LCFI17:
 1114              		.cfi_def_cfa_offset 48
 255:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 1115              		.loc 1 255 0
 1116 0008 4548     		ldr	r0, .L75+8
 1117 000a 4649     		ldr	r1, .L75+12
 1118 000c 4FF44062 		mov	r2, #3072
 1119 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1120              	.LVL142:
 257:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 1121              		.loc 1 257 0
 1122 0014 4FF4FA70 		mov	r0, #500
 1123 0018 FFF7FEFF 		bl	HAL_Delay
 1124              	.LVL143:
 258:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 1125              		.loc 1 258 0
 1126 001c 424B     		ldr	r3, .L75+16
 1127 001e 5869     		ldr	r0, [r3, #20]
 1128 0020 FFF7FEFF 		bl	calculate_heading
 1129              	.LVL144:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 31


 1130 0024 B0EE408A 		fcpys	s16, s0
 1131              	.LVL145:
 259:Src/main.c    ****     TIM3->CNT = 0;
 1132              		.loc 1 259 0
 1133 0028 F0EEC07A 		fabss	s15, s0
 1134 002c 17EE900A 		fmrs	r0, s15
 1135 0030 FFF7FEFF 		bl	__aeabi_f2d
 1136              	.LVL146:
 1137 0034 38A3     		adr	r3, .L75
 1138 0036 D3E90023 		ldrd	r2, [r3]
 1139 003a FFF7FEFF 		bl	__aeabi_dmul
 1140              	.LVL147:
 1141 003e FFF7FEFF 		bl	__aeabi_d2uiz
 1142              	.LVL148:
 1143 0042 85B2     		uxth	r5, r0
 1144              	.LVL149:
 260:Src/main.c    ****     TIM4->CNT = 0;
 1145              		.loc 1 260 0
 1146 0044 0024     		movs	r4, #0
 1147 0046 394B     		ldr	r3, .L75+20
 1148 0048 5C62     		str	r4, [r3, #36]
 261:Src/main.c    ****     char msg[18] = "";
 1149              		.loc 1 261 0
 1150 004a 03F58063 		add	r3, r3, #1024
 1151 004e 5C62     		str	r4, [r3, #36]
 262:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 1152              		.loc 1 262 0
 1153 0050 0194     		str	r4, [sp, #4]
 1154 0052 0294     		str	r4, [sp, #8]
 1155 0054 0394     		str	r4, [sp, #12]
 1156 0056 0494     		str	r4, [sp, #16]
 1157 0058 ADF81440 		strh	r4, [sp, #20]	@ movhi
 263:Src/main.c    ****     print(msg, 0);
 1158              		.loc 1 263 0
 1159 005c 01A8     		add	r0, sp, #4
 1160 005e 3449     		ldr	r1, .L75+24
 1161 0060 2A46     		mov	r2, r5
 1162 0062 FFF7FEFF 		bl	sprintf
 1163              	.LVL150:
 264:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 1164              		.loc 1 264 0
 1165 0066 01A8     		add	r0, sp, #4
 1166 0068 2146     		mov	r1, r4
 1167 006a FFF7FEFF 		bl	print
 1168              	.LVL151:
 265:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 1169              		.loc 1 265 0
 1170 006e BDEEC87A 		ftosizs	s14, s16
 1171              	.LVL152:
 266:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 1172              		.loc 1 266 0
 1173 0072 F8EEC77A 		fsitos	s15, s14
 1174 0076 78EE677A 		fsubs	s15, s16, s15
 1175 007a DFED2E6A 		flds	s13, .L75+28
 1176 007e 67EEA67A 		fmuls	s15, s15, s13
 1177              	.LVL153:
 267:Src/main.c    ****     print(msg, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 32


 1178              		.loc 1 267 0
 1179 0082 01A8     		add	r0, sp, #4
 1180 0084 2C49     		ldr	r1, .L75+32
 1181 0086 17EE102A 		fmrs	r2, s14	@ int
 1182 008a FDEEE77A 		ftosizs	s15, s15
 1183              	.LVL154:
 1184 008e 17EE903A 		fmrs	r3, s15	@ int
 1185 0092 FFF7FEFF 		bl	sprintf
 1186              	.LVL155:
 268:Src/main.c    ****     if (volts < 0)
 1187              		.loc 1 268 0
 1188 0096 01A8     		add	r0, sp, #4
 1189 0098 2146     		mov	r1, r4
 1190 009a FFF7FEFF 		bl	print
 1191              	.LVL156:
 269:Src/main.c    ****     {
 1192              		.loc 1 269 0
 1193 009e B5EEC08A 		fcmpezs	s16
 1194 00a2 F1EE10FA 		fmstat
 1195 00a6 10D5     		bpl	.L73
 271:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 1196              		.loc 1 271 0
 1197 00a8 2046     		mov	r0, r4
 1198 00aa 2146     		mov	r1, r4
 1199 00ac FFF7FEFF 		bl	set_motor_speed
 1200              	.LVL157:
 272:Src/main.c    ****         while (TIM4->CNT < counts)
 1201              		.loc 1 272 0
 1202 00b0 0820     		movs	r0, #8
 1203 00b2 47F23051 		movw	r1, #30000
 1204 00b6 FFF7FEFF 		bl	set_motor_speed
 1205              	.LVL158:
 1206              	.L67:
 273:Src/main.c    ****         {
 1207              		.loc 1 273 0 discriminator 1
 1208 00ba 204B     		ldr	r3, .L75+36
 1209 00bc 5B6A     		ldr	r3, [r3, #36]
 1210 00be AB42     		cmp	r3, r5
 1211 00c0 FBD3     		bcc	.L67
 276:Src/main.c    ****     }
 1212              		.loc 1 276 0
 1213 00c2 0022     		movs	r2, #0
 1214 00c4 1D4B     		ldr	r3, .L75+36
 1215 00c6 5A62     		str	r2, [r3, #36]
 1216 00c8 14E0     		b	.L68
 1217              	.L73:
 278:Src/main.c    ****     {
 1218              		.loc 1 278 0
 1219 00ca B5EEC08A 		fcmpezs	s16
 1220 00ce F1EE10FA 		fmstat
 1221 00d2 0FDD     		ble	.L68
 280:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1222              		.loc 1 280 0
 1223 00d4 0020     		movs	r0, #0
 1224 00d6 47F23051 		movw	r1, #30000
 1225 00da FFF7FEFF 		bl	set_motor_speed
 1226              	.LVL159:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 33


 281:Src/main.c    ****         while (TIM3->CNT < counts)
 1227              		.loc 1 281 0
 1228 00de 0820     		movs	r0, #8
 1229 00e0 0021     		movs	r1, #0
 1230 00e2 FFF7FEFF 		bl	set_motor_speed
 1231              	.LVL160:
 1232              	.L70:
 282:Src/main.c    ****         {
 1233              		.loc 1 282 0 discriminator 1
 1234 00e6 114B     		ldr	r3, .L75+20
 1235 00e8 5B6A     		ldr	r3, [r3, #36]
 1236 00ea AB42     		cmp	r3, r5
 1237 00ec FBD3     		bcc	.L70
 285:Src/main.c    ****     }
 1238              		.loc 1 285 0
 1239 00ee 0022     		movs	r2, #0
 1240 00f0 124B     		ldr	r3, .L75+36
 1241 00f2 5A62     		str	r2, [r3, #36]
 1242              	.L68:
 287:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1243              		.loc 1 287 0
 1244 00f4 0020     		movs	r0, #0
 1245 00f6 0146     		mov	r1, r0
 1246 00f8 FFF7FEFF 		bl	set_motor_speed
 1247              	.LVL161:
 288:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 1248              		.loc 1 288 0
 1249 00fc 0820     		movs	r0, #8
 1250 00fe 0021     		movs	r1, #0
 1251 0100 FFF7FEFF 		bl	set_motor_speed
 1252              	.LVL162:
 289:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 1253              		.loc 1 289 0
 1254 0104 0648     		ldr	r0, .L75+8
 1255 0106 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1256              	.LVL163:
 290:Src/main.c    **** }
 1257              		.loc 1 290 0
 1258 010a 0022     		movs	r2, #0
 1259 010c 0C4B     		ldr	r3, .L75+40
 1260 010e 1A70     		strb	r2, [r3]
 291:Src/main.c    **** 
 1261              		.loc 1 291 0
 1262 0110 07B0     		add	sp, sp, #28
 1263              	.LCFI18:
 1264              		.cfi_def_cfa_offset 20
 1265              		@ sp needed
 1266 0112 BDEC028B 		fldmfdd	sp!, {d8}
 1267              	.LCFI19:
 1268              		.cfi_restore 80
 1269              		.cfi_restore 81
 1270              		.cfi_def_cfa_offset 12
 1271              	.LVL164:
 1272 0116 30BD     		pop	{r4, r5, pc}
 1273              	.LVL165:
 1274              	.L76:
 1275              		.align	3
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 34


 1276              	.L75:
 1277 0118 00000000 		.word	0
 1278 011c 00C07240 		.word	1081262080
 1279 0120 00000000 		.word	hadc1
 1280 0124 00000000 		.word	dma_buffer
 1281 0128 00000000 		.word	adc_values
 1282 012c 00040040 		.word	1073742848
 1283 0130 50000000 		.word	.LC11
 1284 0134 00007A44 		.word	1148846080
 1285 0138 5C000000 		.word	.LC12
 1286 013c 00080040 		.word	1073743872
 1287 0140 00000000 		.word	PI_INT_STATE
 1288              		.cfi_endproc
 1289              	.LFE126:
 1291              		.section	.text.pi_navigation,"ax",%progbits
 1292              		.align	2
 1293              		.global	pi_navigation
 1294              		.thumb
 1295              		.thumb_func
 1297              	pi_navigation:
 1298              	.LFB127:
 294:Src/main.c    ****     print("Pi nav", 0);
 1299              		.loc 1 294 0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 1303 0000 08B5     		push	{r3, lr}
 1304              	.LCFI20:
 1305              		.cfi_def_cfa_offset 8
 1306              		.cfi_offset 3, -8
 1307              		.cfi_offset 14, -4
 1308 0002 2DED028B 		fstmfdd	sp!, {d8}
 1309              	.LCFI21:
 1310              		.cfi_def_cfa_offset 16
 1311              		.cfi_offset 80, -16
 1312              		.cfi_offset 81, -12
 295:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1313              		.loc 1 295 0
 1314 0006 2948     		ldr	r0, .L86
 1315 0008 0021     		movs	r1, #0
 1316 000a FFF7FEFF 		bl	print
 1317              	.LVL166:
 296:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 1318              		.loc 1 296 0
 1319 000e 2848     		ldr	r0, .L86+4
 1320 0010 2849     		ldr	r1, .L86+8
 1321 0012 4FF44062 		mov	r2, #3072
 1322 0016 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1323              	.LVL167:
 298:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
 1324              		.loc 1 298 0
 1325 001a 4FF4FA70 		mov	r0, #500
 1326 001e FFF7FEFF 		bl	HAL_Delay
 1327              	.LVL168:
 299:Src/main.c    ****     if (heading < 0)
 1328              		.loc 1 299 0
 1329 0022 254B     		ldr	r3, .L86+12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 35


 1330 0024 5869     		ldr	r0, [r3, #20]
 1331 0026 FFF7FEFF 		bl	calculate_heading
 1332              	.LVL169:
 1333 002a B0EE408A 		fcpys	s16, s0
 1334              	.LVL170:
 300:Src/main.c    ****     {
 1335              		.loc 1 300 0
 1336 002e B5EEC00A 		fcmpezs	s0
 1337 0032 F1EE10FA 		fmstat
 1338 0036 0CD5     		bpl	.L84
 302:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 10000);
 1339              		.loc 1 302 0
 1340 0038 0420     		movs	r0, #4
 1341 003a 42F21071 		movw	r1, #10000
 1342 003e FFF7FEFF 		bl	set_motor_speed
 1343              	.LVL171:
 303:Src/main.c    ****         heading *= -1;
 1344              		.loc 1 303 0
 1345 0042 0820     		movs	r0, #8
 1346 0044 42F21071 		movw	r1, #10000
 1347 0048 FFF7FEFF 		bl	set_motor_speed
 1348              	.LVL172:
 304:Src/main.c    ****     }
 1349              		.loc 1 304 0
 1350 004c B1EE488A 		fnegs	s16, s16
 1351              	.LVL173:
 1352 0050 0EE0     		b	.L80
 1353              	.LVL174:
 1354              	.L84:
 306:Src/main.c    ****     {
 1355              		.loc 1 306 0
 1356 0052 B5EEC00A 		fcmpezs	s0
 1357 0056 F1EE10FA 		fmstat
 1358 005a 09DD     		ble	.L80
 308:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 10000);
 1359              		.loc 1 308 0
 1360 005c 0020     		movs	r0, #0
 1361 005e 42F21071 		movw	r1, #10000
 1362 0062 FFF7FEFF 		bl	set_motor_speed
 1363              	.LVL175:
 309:Src/main.c    ****     }
 1364              		.loc 1 309 0
 1365 0066 0C20     		movs	r0, #12
 1366 0068 42F21071 		movw	r1, #10000
 1367 006c FFF7FEFF 		bl	set_motor_speed
 1368              	.LVL176:
 1369              	.L80:
 311:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 20000);
 1370              		.loc 1 311 0
 1371 0070 DFED127A 		flds	s15, .L86+16
 1372 0074 28EE278A 		fmuls	s16, s16, s15
 1373              	.LVL177:
 1374 0078 FCEEC87A 		ftouizs	s15, s16
 1375 007c 17EE900A 		fmrs	r0, s15	@ int
 1376 0080 FFF7FEFF 		bl	HAL_Delay
 1377              	.LVL178:
 312:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 20000);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 36


 1378              		.loc 1 312 0
 1379 0084 0020     		movs	r0, #0
 1380 0086 44F62061 		movw	r1, #20000
 1381 008a FFF7FEFF 		bl	set_motor_speed
 1382              	.LVL179:
 313:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 1383              		.loc 1 313 0
 1384 008e 0820     		movs	r0, #8
 1385 0090 44F62061 		movw	r1, #20000
 1386 0094 FFF7FEFF 		bl	set_motor_speed
 1387              	.LVL180:
 314:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 1388              		.loc 1 314 0
 1389 0098 0548     		ldr	r0, .L86+4
 1390 009a FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1391              	.LVL181:
 315:Src/main.c    **** }
 1392              		.loc 1 315 0
 1393 009e 0022     		movs	r2, #0
 1394 00a0 074B     		ldr	r3, .L86+20
 1395 00a2 1A70     		strb	r2, [r3]
 316:Src/main.c    **** 
 1396              		.loc 1 316 0
 1397 00a4 BDEC028B 		fldmfdd	sp!, {d8}
 1398              	.LCFI22:
 1399              		.cfi_restore 80
 1400              		.cfi_restore 81
 1401              		.cfi_def_cfa_offset 8
 1402 00a8 08BD     		pop	{r3, pc}
 1403              	.L87:
 1404 00aa 00BF     		.align	2
 1405              	.L86:
 1406 00ac 68000000 		.word	.LC13
 1407 00b0 00000000 		.word	hadc1
 1408 00b4 00000000 		.word	dma_buffer
 1409 00b8 00000000 		.word	adc_values
 1410 00bc 0000FA44 		.word	1157234688
 1411 00c0 00000000 		.word	PI_INT_STATE
 1412              		.cfi_endproc
 1413              	.LFE127:
 1415              		.section	.text.encoder_pid,"ax",%progbits
 1416              		.align	2
 1417              		.global	encoder_pid
 1418              		.thumb
 1419              		.thumb_func
 1421              	encoder_pid:
 1422              	.LFB135:
 557:Src/main.c    **** }
 558:Src/main.c    **** 
 559:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc)
 560:Src/main.c    **** {
 1423              		.loc 1 560 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 24
 1426              		@ frame_needed = 0, uses_anonymous_args = 0
 1427              	.LVL182:
 1428 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 37


 1429              	.LCFI23:
 1430              		.cfi_def_cfa_offset 16
 1431              		.cfi_offset 4, -16
 1432              		.cfi_offset 5, -12
 1433              		.cfi_offset 6, -8
 1434              		.cfi_offset 14, -4
 1435 0002 2DED048B 		fstmfdd	sp!, {d8, d9}
 1436              	.LCFI24:
 1437              		.cfi_def_cfa_offset 32
 1438              		.cfi_offset 80, -32
 1439              		.cfi_offset 81, -28
 1440              		.cfi_offset 82, -24
 1441              		.cfi_offset 83, -20
 1442 0006 86B0     		sub	sp, sp, #24
 1443              	.LCFI25:
 1444              		.cfi_def_cfa_offset 56
 1445 0008 0546     		mov	r5, r0
 1446 000a 1446     		mov	r4, r2
 1447 000c 1E46     		mov	r6, r3
 561:Src/main.c    ****     /* Get error */
 562:Src/main.c    ****     float l_enc = update_encoder(left_enc);
 1448              		.loc 1 562 0
 1449 000e 0846     		mov	r0, r1
 1450              	.LVL183:
 1451 0010 FFF7FEFF 		bl	update_encoder
 1452              	.LVL184:
 1453 0014 F0EE408A 		fcpys	s17, s0
 1454              	.LVL185:
 563:Src/main.c    ****     float r_enc = update_encoder(right_enc);
 1455              		.loc 1 563 0
 1456 0018 3046     		mov	r0, r6
 1457 001a FFF7FEFF 		bl	update_encoder
 1458              	.LVL186:
 1459 001e B0EE408A 		fcpys	s16, s0
 1460              	.LVL187:
 564:Src/main.c    ****     left_pid->err = ENCODER_GOAL - l_enc;
 1461              		.loc 1 564 0
 1462 0022 F0EE087A 		fconsts	s15, #8
 1463 0026 37EEE87A 		fsubs	s14, s15, s17
 1464 002a BDEEC77A 		ftosizs	s14, s14
 1465 002e 85ED047A 		fsts	s14, [r5, #16]	@ int
 565:Src/main.c    ****     right_pid->err = ENCODER_GOAL - r_enc;
 1466              		.loc 1 565 0
 1467 0032 77EEC07A 		fsubs	s15, s15, s0
 1468 0036 FDEEE77A 		ftosizs	s15, s15
 1469 003a C4ED047A 		fsts	s15, [r4, #16]	@ int
 566:Src/main.c    **** 
 567:Src/main.c    ****     /* Get gain */
 568:Src/main.c    ****     int32_t left_gain = pid_GetGain(left_pid);
 1470              		.loc 1 568 0
 1471 003e 2846     		mov	r0, r5
 1472 0040 FFF7FEFF 		bl	pid_GetGain
 1473              	.LVL188:
 1474 0044 0646     		mov	r6, r0
 1475              	.LVL189:
 569:Src/main.c    ****     int32_t right_gain = pid_GetGain(right_pid);
 1476              		.loc 1 569 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 38


 1477 0046 2046     		mov	r0, r4
 1478              	.LVL190:
 1479 0048 FFF7FEFF 		bl	pid_GetGain
 1480              	.LVL191:
 1481 004c 0546     		mov	r5, r0
 1482              	.LVL192:
 570:Src/main.c    **** 
 571:Src/main.c    ****     int l_predec = (int)(l_enc / 1);
 1483              		.loc 1 571 0
 1484 004e FDEEE87A 		ftosizs	s15, s17
 1485              	.LVL193:
 572:Src/main.c    ****     int l_postdec = (int)((l_enc - l_predec) * 1000);
 1486              		.loc 1 572 0
 1487 0052 B8EEE77A 		fsitos	s14, s15
 1488 0056 78EEC78A 		fsubs	s17, s17, s14
 1489              	.LVL194:
 1490 005a 9FED297A 		flds	s14, .L90
 1491 005e 68EE878A 		fmuls	s17, s17, s14
 1492              	.LVL195:
 573:Src/main.c    ****     int r_predec = (int)(r_enc / 1);
 1493              		.loc 1 573 0
 1494 0062 BDEEC89A 		ftosizs	s18, s16
 1495              	.LVL196:
 574:Src/main.c    ****     int r_postdec = (int)((r_enc - r_predec) * 1000);
 1496              		.loc 1 574 0
 1497 0066 F8EEC96A 		fsitos	s13, s18
 1498 006a 38EE668A 		fsubs	s16, s16, s13
 1499              	.LVL197:
 1500 006e 28EE078A 		fmuls	s16, s16, s14
 1501 0072 BDEEC88A 		ftosizs	s16, s16
 1502              	.LVL198:
 575:Src/main.c    ****     char msg[18] = "";
 1503              		.loc 1 575 0
 1504 0076 0024     		movs	r4, #0
 1505              	.LVL199:
 1506 0078 0194     		str	r4, [sp, #4]
 1507 007a 0294     		str	r4, [sp, #8]
 1508 007c 0394     		str	r4, [sp, #12]
 1509 007e 0494     		str	r4, [sp, #16]
 1510 0080 ADF81440 		strh	r4, [sp, #20]	@ movhi
 576:Src/main.c    ****     sprintf(msg, "LG: %d.%d", l_predec, l_postdec);
 1511              		.loc 1 576 0
 1512 0084 01A8     		add	r0, sp, #4
 1513              	.LVL200:
 1514 0086 1F49     		ldr	r1, .L90+4
 1515 0088 17EE902A 		fmrs	r2, s15	@ int
 1516 008c FDEEE87A 		ftosizs	s15, s17
 1517              	.LVL201:
 1518 0090 17EE903A 		fmrs	r3, s15	@ int
 1519 0094 FFF7FEFF 		bl	sprintf
 1520              	.LVL202:
 577:Src/main.c    ****     print(msg, 0);
 1521              		.loc 1 577 0
 1522 0098 01A8     		add	r0, sp, #4
 1523 009a 2146     		mov	r1, r4
 1524 009c FFF7FEFF 		bl	print
 1525              	.LVL203:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 39


 578:Src/main.c    ****     sprintf(msg, "RG: %d.%d", r_predec, r_postdec);
 1526              		.loc 1 578 0
 1527 00a0 01A8     		add	r0, sp, #4
 1528 00a2 1949     		ldr	r1, .L90+8
 1529 00a4 19EE102A 		fmrs	r2, s18	@ int
 1530 00a8 18EE103A 		fmrs	r3, s16	@ int
 1531 00ac FFF7FEFF 		bl	sprintf
 1532              	.LVL204:
 579:Src/main.c    ****     print(msg, 1);
 1533              		.loc 1 579 0
 1534 00b0 01A8     		add	r0, sp, #4
 1535 00b2 0121     		movs	r1, #1
 1536 00b4 FFF7FEFF 		bl	print
 1537              	.LVL205:
 580:Src/main.c    **** 
 581:Src/main.c    ****     /* Set Motor Speeds*/
 582:Src/main.c    ****     int lspeed = LEFT_SPEED + left_gain;
 1538              		.loc 1 582 0
 1539 00b8 144B     		ldr	r3, .L90+12
 1540 00ba 1B88     		ldrh	r3, [r3]
 1541 00bc 1E44     		add	r6, r6, r3
 1542              	.LVL206:
 583:Src/main.c    ****     int rspeed = RIGHT_SPEED + right_gain;
 1543              		.loc 1 583 0
 1544 00be 144B     		ldr	r3, .L90+16
 1545 00c0 1B88     		ldrh	r3, [r3]
 1546 00c2 1D44     		add	r5, r5, r3
 1547              	.LVL207:
 584:Src/main.c    **** 
 585:Src/main.c    ****     sprintf(msg, "LS: %d", (int)lspeed);
 1548              		.loc 1 585 0
 1549 00c4 01A8     		add	r0, sp, #4
 1550 00c6 1349     		ldr	r1, .L90+20
 1551 00c8 3246     		mov	r2, r6
 1552 00ca FFF7FEFF 		bl	sprintf
 1553              	.LVL208:
 586:Src/main.c    ****     print(msg, 3);
 1554              		.loc 1 586 0
 1555 00ce 01A8     		add	r0, sp, #4
 1556 00d0 0321     		movs	r1, #3
 1557 00d2 FFF7FEFF 		bl	print
 1558              	.LVL209:
 587:Src/main.c    ****     sprintf(msg, "RS: %d", (int)rspeed);
 1559              		.loc 1 587 0
 1560 00d6 01A8     		add	r0, sp, #4
 1561 00d8 0F49     		ldr	r1, .L90+24
 1562 00da 2A46     		mov	r2, r5
 1563 00dc FFF7FEFF 		bl	sprintf
 1564              	.LVL210:
 588:Src/main.c    ****     print(msg, 4);
 1565              		.loc 1 588 0
 1566 00e0 01A8     		add	r0, sp, #4
 1567 00e2 0421     		movs	r1, #4
 1568 00e4 FFF7FEFF 		bl	print
 1569              	.LVL211:
 589:Src/main.c    ****     // set_motor_speed
 590:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 40


 1570              		.loc 1 590 0
 1571 00e8 2046     		mov	r0, r4
 1572 00ea 3146     		mov	r1, r6
 1573 00ec FFF7FEFF 		bl	set_motor_speed
 1574              	.LVL212:
 591:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1575              		.loc 1 591 0
 1576 00f0 0820     		movs	r0, #8
 1577 00f2 2946     		mov	r1, r5
 1578 00f4 FFF7FEFF 		bl	set_motor_speed
 1579              	.LVL213:
 592:Src/main.c    **** }
 1580              		.loc 1 592 0
 1581 00f8 06B0     		add	sp, sp, #24
 1582              	.LCFI26:
 1583              		.cfi_def_cfa_offset 32
 1584              		@ sp needed
 1585 00fa BDEC048B 		fldmfdd	sp!, {d8-d9}
 1586              	.LCFI27:
 1587              		.cfi_restore 82
 1588              		.cfi_restore 83
 1589              		.cfi_restore 80
 1590              		.cfi_restore 81
 1591              		.cfi_def_cfa_offset 16
 1592              	.LVL214:
 1593 00fe 70BD     		pop	{r4, r5, r6, pc}
 1594              	.LVL215:
 1595              	.L91:
 1596              		.align	2
 1597              	.L90:
 1598 0100 00007A44 		.word	1148846080
 1599 0104 70000000 		.word	.LC14
 1600 0108 7C000000 		.word	.LC15
 1601 010c 00000000 		.word	.LANCHOR0
 1602 0110 00000000 		.word	.LANCHOR1
 1603 0114 88000000 		.word	.LC16
 1604 0118 90000000 		.word	.LC17
 1605              		.cfi_endproc
 1606              	.LFE135:
 1608              		.section	.text._Error_Handler,"ax",%progbits
 1609              		.align	2
 1610              		.global	_Error_Handler
 1611              		.thumb
 1612              		.thumb_func
 1614              	_Error_Handler:
 1615              	.LFB136:
 593:Src/main.c    **** 
 594:Src/main.c    **** /* USER CODE END 4 */
 595:Src/main.c    **** 
 596:Src/main.c    **** /**
 597:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 598:Src/main.c    ****  * @param  file: The file name as string.
 599:Src/main.c    ****  * @param  line: The line in file as a number.
 600:Src/main.c    ****  * @retval None
 601:Src/main.c    ****  */
 602:Src/main.c    **** void _Error_Handler(char *file, int line)
 603:Src/main.c    **** {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 41


 1616              		.loc 1 603 0
 1617              		.cfi_startproc
 1618              		@ Volatile: function does not return.
 1619              		@ args = 0, pretend = 0, frame = 0
 1620              		@ frame_needed = 0, uses_anonymous_args = 0
 1621              		@ link register save eliminated.
 1622              	.LVL216:
 1623              	.L93:
 604:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 605:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 606:Src/main.c    ****     while (1)
 607:Src/main.c    ****     {
 608:Src/main.c    ****     }
 1624              		.loc 1 608 0 discriminator 1
 1625 0000 FEE7     		b	.L93
 1626              		.cfi_endproc
 1627              	.LFE136:
 1629 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1630              		.align	2
 1631              		.global	SystemClock_Config
 1632              		.thumb
 1633              		.thumb_func
 1635              	SystemClock_Config:
 1636              	.LFB125:
 194:Src/main.c    **** 
 1637              		.loc 1 194 0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 80
 1640              		@ frame_needed = 0, uses_anonymous_args = 0
 1641 0000 00B5     		push	{lr}
 1642              	.LCFI28:
 1643              		.cfi_def_cfa_offset 4
 1644              		.cfi_offset 14, -4
 1645 0002 95B0     		sub	sp, sp, #84
 1646              	.LCFI29:
 1647              		.cfi_def_cfa_offset 88
 1648              	.LBB5:
 201:Src/main.c    **** 
 1649              		.loc 1 201 0
 1650 0004 0022     		movs	r2, #0
 1651 0006 0192     		str	r2, [sp, #4]
 1652 0008 294B     		ldr	r3, .L98
 1653 000a 196C     		ldr	r1, [r3, #64]
 1654 000c 41F08051 		orr	r1, r1, #268435456
 1655 0010 1964     		str	r1, [r3, #64]
 1656 0012 1B6C     		ldr	r3, [r3, #64]
 1657 0014 03F08053 		and	r3, r3, #268435456
 1658 0018 0193     		str	r3, [sp, #4]
 1659 001a 019B     		ldr	r3, [sp, #4]
 1660              	.LBE5:
 1661              	.LBB6:
 203:Src/main.c    **** 
 1662              		.loc 1 203 0
 1663 001c 0292     		str	r2, [sp, #8]
 1664 001e 2549     		ldr	r1, .L98+4
 1665 0020 0B68     		ldr	r3, [r1]
 1666 0022 23F44043 		bic	r3, r3, #49152
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 42


 1667 0026 43F40043 		orr	r3, r3, #32768
 1668 002a 0B60     		str	r3, [r1]
 1669 002c 0B68     		ldr	r3, [r1]
 1670 002e 03F44043 		and	r3, r3, #49152
 1671 0032 0293     		str	r3, [sp, #8]
 1672 0034 029B     		ldr	r3, [sp, #8]
 1673              	.LBE6:
 207:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1674              		.loc 1 207 0
 1675 0036 0223     		movs	r3, #2
 1676 0038 0893     		str	r3, [sp, #32]
 208:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 1677              		.loc 1 208 0
 1678 003a 0121     		movs	r1, #1
 1679 003c 0B91     		str	r1, [sp, #44]
 209:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1680              		.loc 1 209 0
 1681 003e 1021     		movs	r1, #16
 1682 0040 0C91     		str	r1, [sp, #48]
 210:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1683              		.loc 1 210 0
 1684 0042 0E93     		str	r3, [sp, #56]
 211:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 1685              		.loc 1 211 0
 1686 0044 0F92     		str	r2, [sp, #60]
 212:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 1687              		.loc 1 212 0
 1688 0046 0822     		movs	r2, #8
 1689 0048 1092     		str	r2, [sp, #64]
 213:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1690              		.loc 1 213 0
 1691 004a 4822     		movs	r2, #72
 1692 004c 1192     		str	r2, [sp, #68]
 214:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 1693              		.loc 1 214 0
 1694 004e 1293     		str	r3, [sp, #72]
 215:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1695              		.loc 1 215 0
 1696 0050 0423     		movs	r3, #4
 1697 0052 1393     		str	r3, [sp, #76]
 216:Src/main.c    ****     {
 1698              		.loc 1 216 0
 1699 0054 08A8     		add	r0, sp, #32
 1700 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1701              	.LVL217:
 1702 005a 18B1     		cbz	r0, .L95
 218:Src/main.c    ****     }
 1703              		.loc 1 218 0
 1704 005c 1648     		ldr	r0, .L98+8
 1705 005e DA21     		movs	r1, #218
 1706 0060 FFF7FEFF 		bl	_Error_Handler
 1707              	.LVL218:
 1708              	.L95:
 223:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1709              		.loc 1 223 0
 1710 0064 0F23     		movs	r3, #15
 1711 0066 0393     		str	r3, [sp, #12]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 43


 225:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1712              		.loc 1 225 0
 1713 0068 0221     		movs	r1, #2
 1714 006a 0491     		str	r1, [sp, #16]
 226:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1715              		.loc 1 226 0
 1716 006c 0023     		movs	r3, #0
 1717 006e 0593     		str	r3, [sp, #20]
 227:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1718              		.loc 1 227 0
 1719 0070 4FF48052 		mov	r2, #4096
 1720 0074 0692     		str	r2, [sp, #24]
 228:Src/main.c    **** 
 1721              		.loc 1 228 0
 1722 0076 0793     		str	r3, [sp, #28]
 230:Src/main.c    ****     {
 1723              		.loc 1 230 0
 1724 0078 03A8     		add	r0, sp, #12
 1725 007a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1726              	.LVL219:
 1727 007e 18B1     		cbz	r0, .L96
 232:Src/main.c    ****     }
 1728              		.loc 1 232 0
 1729 0080 0D48     		ldr	r0, .L98+8
 1730 0082 E821     		movs	r1, #232
 1731 0084 FFF7FEFF 		bl	_Error_Handler
 1732              	.LVL220:
 1733              	.L96:
 237:Src/main.c    **** 
 1734              		.loc 1 237 0
 1735 0088 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1736              	.LVL221:
 1737 008c 0B4B     		ldr	r3, .L98+12
 1738 008e A3FB0030 		umull	r3, r0, r3, r0
 1739 0092 8009     		lsrs	r0, r0, #6
 1740 0094 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1741              	.LVL222:
 241:Src/main.c    **** 
 1742              		.loc 1 241 0
 1743 0098 0420     		movs	r0, #4
 1744 009a FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1745              	.LVL223:
 244:Src/main.c    **** }
 1746              		.loc 1 244 0
 1747 009e 4FF0FF30 		mov	r0, #-1
 1748 00a2 0021     		movs	r1, #0
 1749 00a4 0A46     		mov	r2, r1
 1750 00a6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1751              	.LVL224:
 245:Src/main.c    **** 
 1752              		.loc 1 245 0
 1753 00aa 15B0     		add	sp, sp, #84
 1754              	.LCFI30:
 1755              		.cfi_def_cfa_offset 4
 1756              		@ sp needed
 1757 00ac 5DF804FB 		ldr	pc, [sp], #4
 1758              	.L99:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 44


 1759              		.align	2
 1760              	.L98:
 1761 00b0 00380240 		.word	1073887232
 1762 00b4 00700040 		.word	1073770496
 1763 00b8 98000000 		.word	.LC18
 1764 00bc D34D6210 		.word	274877907
 1765              		.cfi_endproc
 1766              	.LFE125:
 1768              		.section	.text.main,"ax",%progbits
 1769              		.align	2
 1770              		.global	main
 1771              		.thumb
 1772              		.thumb_func
 1774              	main:
 1775              	.LFB124:
 109:Src/main.c    ****     /* USER CODE BEGIN 1 */
 1776              		.loc 1 109 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 72
 1779              		@ frame_needed = 0, uses_anonymous_args = 0
 1780 0000 10B5     		push	{r4, lr}
 1781              	.LCFI31:
 1782              		.cfi_def_cfa_offset 8
 1783              		.cfi_offset 4, -8
 1784              		.cfi_offset 14, -4
 1785 0002 94B0     		sub	sp, sp, #80
 1786              	.LCFI32:
 1787              		.cfi_def_cfa_offset 88
 117:Src/main.c    **** 
 1788              		.loc 1 117 0
 1789 0004 FFF7FEFF 		bl	HAL_Init
 1790              	.LVL225:
 124:Src/main.c    **** 
 1791              		.loc 1 124 0
 1792 0008 FFF7FEFF 		bl	SystemClock_Config
 1793              	.LVL226:
 131:Src/main.c    ****     MX_DMA_Init();
 1794              		.loc 1 131 0
 1795 000c FFF7FEFF 		bl	MX_GPIO_Init
 1796              	.LVL227:
 132:Src/main.c    ****     MX_TIM3_Init();
 1797              		.loc 1 132 0
 1798 0010 FFF7FEFF 		bl	MX_DMA_Init
 1799              	.LVL228:
 133:Src/main.c    ****     MX_TIM1_Init();
 1800              		.loc 1 133 0
 1801 0014 FFF7FEFF 		bl	MX_TIM3_Init
 1802              	.LVL229:
 134:Src/main.c    ****     MX_TIM2_Init();
 1803              		.loc 1 134 0
 1804 0018 FFF7FEFF 		bl	MX_TIM1_Init
 1805              	.LVL230:
 135:Src/main.c    ****     MX_USART6_UART_Init();
 1806              		.loc 1 135 0
 1807 001c FFF7FEFF 		bl	MX_TIM2_Init
 1808              	.LVL231:
 136:Src/main.c    ****     MX_ADC1_Init();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 45


 1809              		.loc 1 136 0
 1810 0020 FFF7FEFF 		bl	MX_USART6_UART_Init
 1811              	.LVL232:
 137:Src/main.c    ****     MX_I2C1_Init();
 1812              		.loc 1 137 0
 1813 0024 FFF7FEFF 		bl	MX_ADC1_Init
 1814              	.LVL233:
 138:Src/main.c    ****     MX_TIM4_Init();
 1815              		.loc 1 138 0
 1816 0028 FFF7FEFF 		bl	MX_I2C1_Init
 1817              	.LVL234:
 139:Src/main.c    ****     MX_TIM9_Init();
 1818              		.loc 1 139 0
 1819 002c FFF7FEFF 		bl	MX_TIM4_Init
 1820              	.LVL235:
 140:Src/main.c    ****     MX_TIM5_Init();
 1821              		.loc 1 140 0
 1822 0030 FFF7FEFF 		bl	MX_TIM9_Init
 1823              	.LVL236:
 141:Src/main.c    ****     /* USER CODE BEGIN 2 */
 1824              		.loc 1 141 0
 1825 0034 FFF7FEFF 		bl	MX_TIM5_Init
 1826              	.LVL237:
 145:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1827              		.loc 1 145 0
 1828 0038 2848     		ldr	r0, .L104
 1829 003a 1821     		movs	r1, #24
 1830 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1831              	.LVL238:
 146:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1832              		.loc 1 146 0
 1833 0040 2748     		ldr	r0, .L104+4
 1834 0042 1821     		movs	r1, #24
 1835 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1836              	.LVL239:
 147:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 1837              		.loc 1 147 0
 1838 0048 264C     		ldr	r4, .L104+8
 1839 004a 2046     		mov	r0, r4
 1840 004c 0021     		movs	r1, #0
 1841 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1842              	.LVL240:
 148:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1843              		.loc 1 148 0
 1844 0052 2046     		mov	r0, r4
 1845 0054 0421     		movs	r1, #4
 1846 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1847              	.LVL241:
 149:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 1848              		.loc 1 149 0
 1849 005a 2046     		mov	r0, r4
 1850 005c 0821     		movs	r1, #8
 1851 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1852              	.LVL242:
 150:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 1853              		.loc 1 150 0
 1854 0062 2046     		mov	r0, r4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 46


 1855 0064 0C21     		movs	r1, #12
 1856 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1857              	.LVL243:
 151:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 1858              		.loc 1 151 0
 1859 006a 1F4C     		ldr	r4, .L104+12
 1860 006c 2046     		mov	r0, r4
 1861 006e 0021     		movs	r1, #0
 1862 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1863              	.LVL244:
 152:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 1864              		.loc 1 152 0
 1865 0074 2046     		mov	r0, r4
 1866 0076 0421     		movs	r1, #4
 1867 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1868              	.LVL245:
 153:Src/main.c    ****     ssd1306_Init();
 1869              		.loc 1 153 0
 1870 007c 2046     		mov	r0, r4
 1871 007e 0821     		movs	r1, #8
 1872 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1873              	.LVL246:
 154:Src/main.c    ****     print("Starting...", 0);
 1874              		.loc 1 154 0
 1875 0084 FFF7FEFF 		bl	ssd1306_Init
 1876              	.LVL247:
 155:Src/main.c    ****     //claw_init(&htim2);
 1877              		.loc 1 155 0
 1878 0088 1848     		ldr	r0, .L104+16
 1879 008a 0021     		movs	r1, #0
 1880 008c FFF7FEFF 		bl	print
 1881              	.LVL248:
 160:Src/main.c    ****     ENCODER_t right_enc = encoder_Init(TIM5);
 1882              		.loc 1 160 0
 1883 0090 11A8     		add	r0, sp, #68
 1884 0092 1749     		ldr	r1, .L104+20
 1885 0094 FFF7FEFF 		bl	encoder_Init
 1886              	.LVL249:
 161:Src/main.c    ****     PID_t left_pid = pid_Init(5000, 0, 0, 2, 2);
 1887              		.loc 1 161 0
 1888 0098 0EA8     		add	r0, sp, #56
 1889 009a 1649     		ldr	r1, .L104+24
 1890 009c FFF7FEFF 		bl	encoder_Init
 1891              	.LVL250:
 162:Src/main.c    ****     PID_t right_pid = pid_Init(5000, 0, 0, 2, 2);
 1892              		.loc 1 162 0
 1893 00a0 0224     		movs	r4, #2
 1894 00a2 0094     		str	r4, [sp]
 1895 00a4 0194     		str	r4, [sp, #4]
 1896 00a6 08A8     		add	r0, sp, #32
 1897 00a8 41F28831 		movw	r1, #5000
 1898 00ac 0022     		movs	r2, #0
 1899 00ae 1346     		mov	r3, r2
 1900 00b0 FFF7FEFF 		bl	pid_Init
 1901              	.LVL251:
 163:Src/main.c    ****     //PID_t pid_struct = menu();
 1902              		.loc 1 163 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 47


 1903 00b4 0094     		str	r4, [sp]
 1904 00b6 0194     		str	r4, [sp, #4]
 1905 00b8 02A8     		add	r0, sp, #8
 1906 00ba 41F28831 		movw	r1, #5000
 1907 00be 0022     		movs	r2, #0
 1908 00c0 1346     		mov	r3, r2
 1909 00c2 FFF7FEFF 		bl	pid_Init
 1910              	.LVL252:
 1911              	.L101:
 172:Src/main.c    ****         {
 1912              		.loc 1 172 0
 1913 00c6 0C4B     		ldr	r3, .L104+28
 1914 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1915 00ca 012B     		cmp	r3, #1
 1916 00cc FBD1     		bne	.L101
 174:Src/main.c    ****             turn();
 1917              		.loc 1 174 0
 1918 00ce 0B48     		ldr	r0, .L104+32
 1919 00d0 0021     		movs	r1, #0
 1920 00d2 FFF7FEFF 		bl	print
 1921              	.LVL253:
 175:Src/main.c    ****         }
 1922              		.loc 1 175 0
 1923 00d6 FFF7FEFF 		bl	turn
 1924              	.LVL254:
 1925 00da F4E7     		b	.L101
 1926              	.L105:
 1927              		.align	2
 1928              	.L104:
 1929 00dc 00000000 		.word	htim4
 1930 00e0 00000000 		.word	htim5
 1931 00e4 00000000 		.word	htim1
 1932 00e8 00000000 		.word	htim2
 1933 00ec A4000000 		.word	.LC19
 1934 00f0 00080040 		.word	1073743872
 1935 00f4 000C0040 		.word	1073744896
 1936 00f8 00000000 		.word	PI_INT_STATE
 1937 00fc B0000000 		.word	.LC20
 1938              		.cfi_endproc
 1939              	.LFE124:
 1941              		.comm	adc_values,12288,4
 1942              		.comm	dma_buffer,12288,4
 1943              		.global	RIGHT_SPEED
 1944              		.global	LEFT_SPEED
 1945              		.section	.data.RIGHT_SPEED,"aw",%progbits
 1946              		.align	1
 1947              		.set	.LANCHOR1,. + 0
 1950              	RIGHT_SPEED:
 1951 0000 204E     		.short	20000
 1952              		.section	.data.LEFT_SPEED,"aw",%progbits
 1953              		.align	1
 1954              		.set	.LANCHOR0,. + 0
 1957              	LEFT_SPEED:
 1958 0000 204E     		.short	20000
 1959              		.section	.rodata.str1.4,"aMS",%progbits,1
 1960              		.align	2
 1961              	.LC0:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 48


 1962 0000 25642E25 		.ascii	"%d.%d\012\000"
 1962      640A00
 1963 0007 00       		.space	1
 1964              	.LC1:
 1965 0008 476F00   		.ascii	"Go\000"
 1966 000b 00       		.space	1
 1967              	.LC2:
 1968 000c 25642E25 		.ascii	"%d.%d\000"
 1968      6400
 1969 0012 0000     		.space	2
 1970              	.LC3:
 1971 0014 53746172 		.ascii	"Starting\000"
 1971      74696E67 
 1971      00
 1972 001d 000000   		.space	3
 1973              	.LC4:
 1974 0020 256C7500 		.ascii	"%lu\000"
 1975              	.LC5:
 1976 0024 256400   		.ascii	"%d\000"
 1977 0027 00       		.space	1
 1978              	.LC6:
 1979 0028 5020256C 		.ascii	"P %lu\000"
 1979      7500
 1980 002e 0000     		.space	2
 1981              	.LC7:
 1982 0030 4420256C 		.ascii	"D %lu\000"
 1982      7500
 1983 0036 0000     		.space	2
 1984              	.LC8:
 1985 0038 4920256C 		.ascii	"I %lu\000"
 1985      7500
 1986 003e 0000     		.space	2
 1987              	.LC9:
 1988 0040 4C202575 		.ascii	"L %u\000"
 1988      00
 1989 0045 000000   		.space	3
 1990              	.LC10:
 1991 0048 52202575 		.ascii	"R %u\000"
 1991      00
 1992 004d 000000   		.space	3
 1993              	.LC11:
 1994 0050 636E7473 		.ascii	"cnts: %d\000"
 1994      3A202564 
 1994      00
 1995 0059 000000   		.space	3
 1996              	.LC12:
 1997 005c 766C7473 		.ascii	"vlts: %d.%d\000"
 1997      3A202564 
 1997      2E256400 
 1998              	.LC13:
 1999 0068 5069206E 		.ascii	"Pi nav\000"
 1999      617600
 2000 006f 00       		.space	1
 2001              	.LC14:
 2002 0070 4C473A20 		.ascii	"LG: %d.%d\000"
 2002      25642E25 
 2002      6400
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 49


 2003 007a 0000     		.space	2
 2004              	.LC15:
 2005 007c 52473A20 		.ascii	"RG: %d.%d\000"
 2005      25642E25 
 2005      6400
 2006 0086 0000     		.space	2
 2007              	.LC16:
 2008 0088 4C533A20 		.ascii	"LS: %d\000"
 2008      256400
 2009 008f 00       		.space	1
 2010              	.LC17:
 2011 0090 52533A20 		.ascii	"RS: %d\000"
 2011      256400
 2012 0097 00       		.space	1
 2013              	.LC18:
 2014 0098 5372632F 		.ascii	"Src/main.c\000"
 2014      6D61696E 
 2014      2E6300
 2015 00a3 00       		.space	1
 2016              	.LC19:
 2017 00a4 53746172 		.ascii	"Starting...\000"
 2017      74696E67 
 2017      2E2E2E00 
 2018              	.LC20:
 2019 00b0 696E2070 		.ascii	"in pi int\000"
 2019      6920696E 
 2019      7400
 2020              		.text
 2021              	.Letext0:
 2022              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2023              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2024              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2025              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 2026              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2027              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2028              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2029              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2030              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2031              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2032              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2033              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2034              		.file 14 "Inc/fonts.h"
 2035              		.file 15 "Inc/ssd1306.h"
 2036              		.file 16 "Inc/encoder.h"
 2037              		.file 17 "Inc/pid.h"
 2038              		.file 18 "Drivers/CMSIS/Include/core_cm4.h"
 2039              		.file 19 "Inc/adc.h"
 2040              		.file 20 "Inc/tim.h"
 2041              		.file 21 "Inc/usart.h"
 2042              		.file 22 "Inc/extern_vars.h"
 2043              		.file 23 "Inc/filter.h"
 2044              		.file 24 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2045              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2046              		.file 26 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 2047              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2048              		.file 28 "Inc/gpio.h"
 2049              		.file 29 "Inc/dma.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 50


 2050              		.file 30 "Inc/i2c.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 51


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000003000 adc_values
                            *COM*:0000000000003000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:102    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:107    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:154    .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:162    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:167    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:281    .text.alarm_detect:00000000000000a0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:293    .text.frequency_comparison:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:298    .text.frequency_comparison:0000000000000000 frequency_comparison
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:499    .text.frequency_comparison:0000000000000138 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:511    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:516    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:829    .text.menu:00000000000001cc $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:846    .text.do_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:851    .text.do_pid:0000000000000000 do_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1007   .text.do_pid:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1016   .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1021   .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1083   .text.set_motor_speed:0000000000000044 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1090   .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1095   .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1277   .text.turn:0000000000000118 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1292   .text.pi_navigation:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1297   .text.pi_navigation:0000000000000000 pi_navigation
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1406   .text.pi_navigation:00000000000000ac $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1416   .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1421   .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1598   .text.encoder_pid:0000000000000100 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1609   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1614   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1630   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1635   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1761   .text.SystemClock_Config:00000000000000b0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1769   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1774   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1929   .text.main:00000000000000dc $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1950   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1957   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1946   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1953   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s:1960   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccxG8VpY.s 			page 52


__aeabi_d2f
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
__aeabi_d2iz
__aeabi_i2d
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
sprintf
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
strlen
HAL_UART_Transmit
huart6
HAL_GPIO_ReadPin
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
pid_Init
htim1
pid_GetGain
__aeabi_f2d
__aeabi_d2uiz
PI_INT_STATE
update_encoder
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
HAL_TIM_Encoder_Start
ssd1306_Init
encoder_Init
htim4
htim5
htim2
