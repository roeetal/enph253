ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.print,"ax",%progbits
  21              		.align	2
  22              		.global	print
  23              		.thumb
  24              		.thumb_func
  26              	print:
  27              	.LFB126:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  ** This notice applies to any and all portions of this file
   8:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****  * inserted by the user or by software development tools
  11:Src/main.c    ****  * are owned by their respective copyright owners.
  12:Src/main.c    ****  *
  13:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****  *
  15:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****  * are permitted provided that the following conditions are met:
  17:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****  *      and/or other materials provided with the distribution.
  22:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****  *      without specific prior written permission.
  25:Src/main.c    ****  *
  26:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 2


  31:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****  *
  37:Src/main.c    ****  ******************************************************************************
  38:Src/main.c    ****  */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "stm32f4xx_it.h"
  43:Src/main.c    **** #include "adc.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE END Includes */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN GV */
  56:Src/main.c    **** /* Global variables ---------------------------------------------------------*/
  57:Src/main.c    **** uint8_t PUSH_BUTTON_STATE = 0;
  58:Src/main.c    **** /* USER CODE END GV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE BEGIN PV */
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE END PV */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  66:Src/main.c    **** void SystemClock_Config(void);
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE BEGIN PFP */
  69:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  70:Src/main.c    **** void print(char* msg, int row);
  71:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]);
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END PFP */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN 0 */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE END 0 */
  78:Src/main.c    **** 
  79:Src/main.c    **** /**
  80:Src/main.c    ****  * @brief  The application entry point.
  81:Src/main.c    ****  *
  82:Src/main.c    ****  * @retval None
  83:Src/main.c    ****  */
  84:Src/main.c    **** int main(void)
  85:Src/main.c    **** {
  86:Src/main.c    ****     /* USER CODE BEGIN 1 */
  87:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 3


  88:Src/main.c    ****     /* USER CODE END 1 */
  89:Src/main.c    **** 
  90:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
  91:Src/main.c    **** 
  92:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  93:Src/main.c    ****     HAL_Init();
  94:Src/main.c    **** 
  95:Src/main.c    ****     /* USER CODE BEGIN Init */
  96:Src/main.c    **** 
  97:Src/main.c    ****     /* USER CODE END Init */
  98:Src/main.c    **** 
  99:Src/main.c    ****     /* Configure the system clock */
 100:Src/main.c    ****     SystemClock_Config();
 101:Src/main.c    **** 
 102:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 103:Src/main.c    **** 
 104:Src/main.c    ****     /* USER CODE END SysInit */
 105:Src/main.c    **** 
 106:Src/main.c    ****     /* Initialize all configured peripherals */
 107:Src/main.c    ****     MX_GPIO_Init();
 108:Src/main.c    ****     MX_TIM3_Init();
 109:Src/main.c    ****     MX_TIM5_Init();
 110:Src/main.c    ****     MX_TIM1_Init();
 111:Src/main.c    ****     MX_TIM2_Init();
 112:Src/main.c    ****     MX_USART6_UART_Init();
 113:Src/main.c    ****     MX_ADC1_Init();
 114:Src/main.c    ****     MX_I2C1_Init();
 115:Src/main.c    ****     MX_TIM4_Init();
 116:Src/main.c    ****     MX_TIM9_Init();
 117:Src/main.c    ****     ssd1306_Init();
 118:Src/main.c    ****     /* USER CODE BEGIN 2 */
 119:Src/main.c    **** 
 120:Src/main.c    ****     /* Initialize all timer related stuffs*/
 121:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 122:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 123:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 124:Src/main.c    **** 
 125:Src/main.c    ****     // declare external variables for use with interrupts
 126:Src/main.c    **** 
 127:Src/main.c    ****     /* USER CODE END 2 */
 128:Src/main.c    ****     print("Starting", 0);
 129:Src/main.c    ****     char *msg = (char*)malloc(18*sizeof(char));
 130:Src/main.c    ****     int motor = 0;
 131:Src/main.c    ****     uint32_t speed[2] = {0,0};
 132:Src/main.c    ****     print("L: 0", 0);
 133:Src/main.c    ****     print("R: 0", 1);
 134:Src/main.c    ****     /* Infinite loop */
 135:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 136:Src/main.c    ****     while (1)
 137:Src/main.c    ****     {
 138:Src/main.c    ****         if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 139:Src/main.c    ****             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 140:Src/main.c    ****             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 141:Src/main.c    ****             sprintf(msg, "%lu", speed[motor]);
 142:Src/main.c    ****             print(msg, 0);
 143:Src/main.c    ****             TIM4->CNT = speed[motor];
 144:Src/main.c    ****             while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 4


 145:Src/main.c    ****                 speed[motor] = TIM4->CNT;
 146:Src/main.c    ****                 sprintf(msg, "%lu", speed[motor]);
 147:Src/main.c    ****                 print(msg, 0);
 148:Src/main.c    ****             }
 149:Src/main.c    ****             update_motor_speed(motor, speed);
 150:Src/main.c    ****             motor = motor==0? 1: 0;
 151:Src/main.c    ****             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 152:Src/main.c    ****             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 153:Src/main.c    ****         }
 154:Src/main.c    **** 
 155:Src/main.c    ****         /* USER CODE END WHILE */
 156:Src/main.c    **** 
 157:Src/main.c    ****         /* USER CODE BEGIN 3 */
 158:Src/main.c    **** 
 159:Src/main.c    ****     }
 160:Src/main.c    ****     /* USER CODE END 3 */
 161:Src/main.c    **** 
 162:Src/main.c    **** }
 163:Src/main.c    **** 
 164:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]){
 165:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[0]/100.0*MOTOR_SPEED);
 166:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[1]/100.0*MOTOR_SPEED);
 167:Src/main.c    ****     char *msg = (char*)malloc(18*sizeof(char));
 168:Src/main.c    ****     sprintf(msg, "L: %lu", speed[0]);
 169:Src/main.c    ****     print(msg, 0);
 170:Src/main.c    ****     sprintf(msg, "R: %lu", speed[1]);
 171:Src/main.c    ****     print(msg, 1);
 172:Src/main.c    **** }
 173:Src/main.c    **** 
 174:Src/main.c    **** /**
 175:Src/main.c    ****  * @brief System Clock Configuration
 176:Src/main.c    ****  * @retval None
 177:Src/main.c    ****  */
 178:Src/main.c    **** void SystemClock_Config(void)
 179:Src/main.c    **** {
 180:Src/main.c    **** 
 181:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 182:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 183:Src/main.c    **** 
 184:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 185:Src/main.c    ****     */
 186:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 187:Src/main.c    **** 
 188:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 189:Src/main.c    **** 
 190:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 191:Src/main.c    ****     */
 192:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 193:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 194:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 195:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 196:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 197:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 198:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 199:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 200:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 201:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 5


 202:Src/main.c    ****     {
 203:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 204:Src/main.c    ****     }
 205:Src/main.c    **** 
 206:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 207:Src/main.c    ****     */
 208:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 209:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 210:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 211:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 212:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 213:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 214:Src/main.c    **** 
 215:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 216:Src/main.c    ****     {
 217:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 218:Src/main.c    ****     }
 219:Src/main.c    **** 
 220:Src/main.c    ****     /**Configure the Systick interrupt time 
 221:Src/main.c    ****     */
 222:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 223:Src/main.c    **** 
 224:Src/main.c    ****     /**Configure the Systick 
 225:Src/main.c    ****     */
 226:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 227:Src/main.c    **** 
 228:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 229:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 230:Src/main.c    **** }
 231:Src/main.c    **** 
 232:Src/main.c    **** /* USER CODE BEGIN 4 */
 233:Src/main.c    **** /*
 234:Src/main.c    ****  * Rows from 0 - 6
 235:Src/main.c    ****  * Reset screen when printing from row 0
 236:Src/main.c    ****  */
 237:Src/main.c    **** void print(char* msg, int row){
  29              		.loc 1 237 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 38B5     		push	{r3, r4, r5, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 3, -16
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 14, -4
  41 0002 0546     		mov	r5, r0
 238:Src/main.c    ****     if(row==0){
  42              		.loc 1 238 0
  43 0004 0C46     		mov	r4, r1
  44 0006 11B9     		cbnz	r1, .L2
 239:Src/main.c    ****         ssd1306_Fill(Black);
  45              		.loc 1 239 0
  46 0008 0020     		movs	r0, #0
  47              	.LVL1:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 6


  48 000a FFF7FEFF 		bl	ssd1306_Fill
  49              	.LVL2:
  50              	.L2:
 240:Src/main.c    ****     }
 241:Src/main.c    ****     ssd1306_SetCursor(0,row*10);
  51              		.loc 1 241 0
  52 000e 04EB8404 		add	r4, r4, r4, lsl #2
  53              	.LVL3:
  54 0012 6100     		lsls	r1, r4, #1
  55 0014 0020     		movs	r0, #0
  56 0016 01F0FE01 		and	r1, r1, #254
  57 001a FFF7FEFF 		bl	ssd1306_SetCursor
  58              	.LVL4:
 242:Src/main.c    ****     ssd1306_WriteString(msg,Font_7x10,White);
  59              		.loc 1 242 0
  60 001e 054B     		ldr	r3, .L4
  61 0020 2846     		mov	r0, r5
  62 0022 93E80600 		ldmia	r3, {r1, r2}
  63 0026 0123     		movs	r3, #1
  64 0028 FFF7FEFF 		bl	ssd1306_WriteString
  65              	.LVL5:
 243:Src/main.c    ****     ssd1306_UpdateScreen();
  66              		.loc 1 243 0
  67 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
  68              	.LVL6:
  69 0030 38BD     		pop	{r3, r4, r5, pc}
  70              	.LVL7:
  71              	.L5:
  72 0032 00BF     		.align	2
  73              	.L4:
  74 0034 00000000 		.word	Font_7x10
  75              		.cfi_endproc
  76              	.LFE126:
  78              		.global	__aeabi_ui2d
  79              		.global	__aeabi_ddiv
  80              		.global	__aeabi_dmul
  81              		.global	__aeabi_d2uiz
  82              		.section	.text.update_motor_speed,"ax",%progbits
  83              		.align	2
  84              		.global	update_motor_speed
  85              		.thumb
  86              		.thumb_func
  88              	update_motor_speed:
  89              	.LFB124:
 164:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[0]/100.0*MOTOR_SPEED);
  90              		.loc 1 164 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              	.LVL8:
  95 0000 38B5     		push	{r3, r4, r5, lr}
  96              	.LCFI1:
  97              		.cfi_def_cfa_offset 16
  98              		.cfi_offset 3, -16
  99              		.cfi_offset 4, -12
 100              		.cfi_offset 5, -8
 101              		.cfi_offset 14, -4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 7


 102 0002 0C46     		mov	r4, r1
 165:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[1]/100.0*MOTOR_SPEED);
 103              		.loc 1 165 0
 104 0004 194B     		ldr	r3, .L8
 105 0006 1D68     		ldr	r5, [r3]
 106 0008 0868     		ldr	r0, [r1]
 107              	.LVL9:
 108 000a FFF7FEFF 		bl	__aeabi_ui2d
 109              	.LVL10:
 110 000e 0022     		movs	r2, #0
 111 0010 174B     		ldr	r3, .L8+4
 112 0012 FFF7FEFF 		bl	__aeabi_ddiv
 113              	.LVL11:
 114 0016 0022     		movs	r2, #0
 115 0018 164B     		ldr	r3, .L8+8
 116 001a FFF7FEFF 		bl	__aeabi_dmul
 117              	.LVL12:
 118 001e FFF7FEFF 		bl	__aeabi_d2uiz
 119              	.LVL13:
 120 0022 6863     		str	r0, [r5, #52]
 166:Src/main.c    ****     char *msg = (char*)malloc(18*sizeof(char));
 121              		.loc 1 166 0
 122 0024 6068     		ldr	r0, [r4, #4]
 123 0026 FFF7FEFF 		bl	__aeabi_ui2d
 124              	.LVL14:
 125 002a 0022     		movs	r2, #0
 126 002c 104B     		ldr	r3, .L8+4
 127 002e FFF7FEFF 		bl	__aeabi_ddiv
 128              	.LVL15:
 129 0032 0022     		movs	r2, #0
 130 0034 0F4B     		ldr	r3, .L8+8
 131 0036 FFF7FEFF 		bl	__aeabi_dmul
 132              	.LVL16:
 133 003a FFF7FEFF 		bl	__aeabi_d2uiz
 134              	.LVL17:
 135 003e E863     		str	r0, [r5, #60]
 167:Src/main.c    ****     sprintf(msg, "L: %lu", speed[0]);
 136              		.loc 1 167 0
 137 0040 1220     		movs	r0, #18
 138 0042 FFF7FEFF 		bl	malloc
 139              	.LVL18:
 140 0046 0546     		mov	r5, r0
 141              	.LVL19:
 168:Src/main.c    ****     print(msg, 0);
 142              		.loc 1 168 0
 143 0048 0B49     		ldr	r1, .L8+12
 144 004a 2268     		ldr	r2, [r4]
 145 004c FFF7FEFF 		bl	sprintf
 146              	.LVL20:
 169:Src/main.c    ****     sprintf(msg, "R: %lu", speed[1]);
 147              		.loc 1 169 0
 148 0050 2846     		mov	r0, r5
 149 0052 0021     		movs	r1, #0
 150 0054 FFF7FEFF 		bl	print
 151              	.LVL21:
 170:Src/main.c    ****     print(msg, 1);
 152              		.loc 1 170 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 8


 153 0058 2846     		mov	r0, r5
 154 005a 0849     		ldr	r1, .L8+16
 155 005c 6268     		ldr	r2, [r4, #4]
 156 005e FFF7FEFF 		bl	sprintf
 157              	.LVL22:
 171:Src/main.c    **** }
 158              		.loc 1 171 0
 159 0062 2846     		mov	r0, r5
 160 0064 0121     		movs	r1, #1
 161 0066 FFF7FEFF 		bl	print
 162              	.LVL23:
 163 006a 38BD     		pop	{r3, r4, r5, pc}
 164              	.LVL24:
 165              	.L9:
 166              		.align	2
 167              	.L8:
 168 006c 00000000 		.word	htim1
 169 0070 00005940 		.word	1079574528
 170 0074 00408F40 		.word	1083129856
 171 0078 00000000 		.word	.LC0
 172 007c 08000000 		.word	.LC1
 173              		.cfi_endproc
 174              	.LFE124:
 176              		.section	.text._Error_Handler,"ax",%progbits
 177              		.align	2
 178              		.global	_Error_Handler
 179              		.thumb
 180              		.thumb_func
 182              	_Error_Handler:
 183              	.LFB127:
 244:Src/main.c    **** }
 245:Src/main.c    **** 
 246:Src/main.c    **** /* USER CODE END 4 */
 247:Src/main.c    **** 
 248:Src/main.c    **** /**
 249:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 250:Src/main.c    ****  * @param  file: The file name as string.
 251:Src/main.c    ****  * @param  line: The line in file as a number.
 252:Src/main.c    ****  * @retval None
 253:Src/main.c    ****  */
 254:Src/main.c    **** void _Error_Handler(char *file, int line)
 255:Src/main.c    **** {
 184              		.loc 1 255 0
 185              		.cfi_startproc
 186              		@ Volatile: function does not return.
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 190              	.LVL25:
 191              	.L11:
 256:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 257:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 258:Src/main.c    ****     while(1)
 259:Src/main.c    ****     {
 260:Src/main.c    ****     }
 192              		.loc 1 260 0 discriminator 1
 193 0000 FEE7     		b	.L11
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 9


 194              		.cfi_endproc
 195              	.LFE127:
 197 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 198              		.align	2
 199              		.global	SystemClock_Config
 200              		.thumb
 201              		.thumb_func
 203              	SystemClock_Config:
 204              	.LFB125:
 179:Src/main.c    **** 
 205              		.loc 1 179 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 80
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209 0000 00B5     		push	{lr}
 210              	.LCFI2:
 211              		.cfi_def_cfa_offset 4
 212              		.cfi_offset 14, -4
 213 0002 95B0     		sub	sp, sp, #84
 214              	.LCFI3:
 215              		.cfi_def_cfa_offset 88
 216              	.LBB2:
 186:Src/main.c    **** 
 217              		.loc 1 186 0
 218 0004 0022     		movs	r2, #0
 219 0006 0192     		str	r2, [sp, #4]
 220 0008 294B     		ldr	r3, .L16
 221 000a 196C     		ldr	r1, [r3, #64]
 222 000c 41F08051 		orr	r1, r1, #268435456
 223 0010 1964     		str	r1, [r3, #64]
 224 0012 1B6C     		ldr	r3, [r3, #64]
 225 0014 03F08053 		and	r3, r3, #268435456
 226 0018 0193     		str	r3, [sp, #4]
 227 001a 019B     		ldr	r3, [sp, #4]
 228              	.LBE2:
 229              	.LBB3:
 188:Src/main.c    **** 
 230              		.loc 1 188 0
 231 001c 0292     		str	r2, [sp, #8]
 232 001e 2549     		ldr	r1, .L16+4
 233 0020 0B68     		ldr	r3, [r1]
 234 0022 23F44043 		bic	r3, r3, #49152
 235 0026 43F40043 		orr	r3, r3, #32768
 236 002a 0B60     		str	r3, [r1]
 237 002c 0B68     		ldr	r3, [r1]
 238 002e 03F44043 		and	r3, r3, #49152
 239 0032 0293     		str	r3, [sp, #8]
 240 0034 029B     		ldr	r3, [sp, #8]
 241              	.LBE3:
 192:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 242              		.loc 1 192 0
 243 0036 0223     		movs	r3, #2
 244 0038 0893     		str	r3, [sp, #32]
 193:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 245              		.loc 1 193 0
 246 003a 0121     		movs	r1, #1
 247 003c 0B91     		str	r1, [sp, #44]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 10


 194:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 248              		.loc 1 194 0
 249 003e 1021     		movs	r1, #16
 250 0040 0C91     		str	r1, [sp, #48]
 195:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 251              		.loc 1 195 0
 252 0042 0E93     		str	r3, [sp, #56]
 196:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 253              		.loc 1 196 0
 254 0044 0F92     		str	r2, [sp, #60]
 197:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 255              		.loc 1 197 0
 256 0046 0822     		movs	r2, #8
 257 0048 1092     		str	r2, [sp, #64]
 198:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 258              		.loc 1 198 0
 259 004a 4822     		movs	r2, #72
 260 004c 1192     		str	r2, [sp, #68]
 199:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 261              		.loc 1 199 0
 262 004e 1293     		str	r3, [sp, #72]
 200:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 263              		.loc 1 200 0
 264 0050 0423     		movs	r3, #4
 265 0052 1393     		str	r3, [sp, #76]
 201:Src/main.c    ****     {
 266              		.loc 1 201 0
 267 0054 08A8     		add	r0, sp, #32
 268 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 269              	.LVL26:
 270 005a 18B1     		cbz	r0, .L13
 203:Src/main.c    ****     }
 271              		.loc 1 203 0
 272 005c 1648     		ldr	r0, .L16+8
 273 005e CB21     		movs	r1, #203
 274 0060 FFF7FEFF 		bl	_Error_Handler
 275              	.LVL27:
 276              	.L13:
 208:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 277              		.loc 1 208 0
 278 0064 0F23     		movs	r3, #15
 279 0066 0393     		str	r3, [sp, #12]
 210:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 280              		.loc 1 210 0
 281 0068 0221     		movs	r1, #2
 282 006a 0491     		str	r1, [sp, #16]
 211:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 283              		.loc 1 211 0
 284 006c 0023     		movs	r3, #0
 285 006e 0593     		str	r3, [sp, #20]
 212:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 286              		.loc 1 212 0
 287 0070 4FF48052 		mov	r2, #4096
 288 0074 0692     		str	r2, [sp, #24]
 213:Src/main.c    **** 
 289              		.loc 1 213 0
 290 0076 0793     		str	r3, [sp, #28]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 11


 215:Src/main.c    ****     {
 291              		.loc 1 215 0
 292 0078 03A8     		add	r0, sp, #12
 293 007a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 294              	.LVL28:
 295 007e 18B1     		cbz	r0, .L14
 217:Src/main.c    ****     }
 296              		.loc 1 217 0
 297 0080 0D48     		ldr	r0, .L16+8
 298 0082 D921     		movs	r1, #217
 299 0084 FFF7FEFF 		bl	_Error_Handler
 300              	.LVL29:
 301              	.L14:
 222:Src/main.c    **** 
 302              		.loc 1 222 0
 303 0088 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 304              	.LVL30:
 305 008c 0B4B     		ldr	r3, .L16+12
 306 008e A3FB0030 		umull	r3, r0, r3, r0
 307 0092 8009     		lsrs	r0, r0, #6
 308 0094 FFF7FEFF 		bl	HAL_SYSTICK_Config
 309              	.LVL31:
 226:Src/main.c    **** 
 310              		.loc 1 226 0
 311 0098 0420     		movs	r0, #4
 312 009a FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 313              	.LVL32:
 229:Src/main.c    **** }
 314              		.loc 1 229 0
 315 009e 4FF0FF30 		mov	r0, #-1
 316 00a2 0021     		movs	r1, #0
 317 00a4 0A46     		mov	r2, r1
 318 00a6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 319              	.LVL33:
 230:Src/main.c    **** 
 320              		.loc 1 230 0
 321 00aa 15B0     		add	sp, sp, #84
 322              	.LCFI4:
 323              		.cfi_def_cfa_offset 4
 324              		@ sp needed
 325 00ac 5DF804FB 		ldr	pc, [sp], #4
 326              	.L17:
 327              		.align	2
 328              	.L16:
 329 00b0 00380240 		.word	1073887232
 330 00b4 00700040 		.word	1073770496
 331 00b8 10000000 		.word	.LC2
 332 00bc D34D6210 		.word	274877907
 333              		.cfi_endproc
 334              	.LFE125:
 336              		.section	.text.main,"ax",%progbits
 337              		.align	2
 338              		.global	main
 339              		.thumb
 340              		.thumb_func
 342              	main:
 343              	.LFB123:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 12


  85:Src/main.c    ****     /* USER CODE BEGIN 1 */
 344              		.loc 1 85 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 8
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348 0000 70B5     		push	{r4, r5, r6, lr}
 349              	.LCFI5:
 350              		.cfi_def_cfa_offset 16
 351              		.cfi_offset 4, -16
 352              		.cfi_offset 5, -12
 353              		.cfi_offset 6, -8
 354              		.cfi_offset 14, -4
 355 0002 82B0     		sub	sp, sp, #8
 356              	.LCFI6:
 357              		.cfi_def_cfa_offset 24
  93:Src/main.c    **** 
 358              		.loc 1 93 0
 359 0004 FFF7FEFF 		bl	HAL_Init
 360              	.LVL34:
 100:Src/main.c    **** 
 361              		.loc 1 100 0
 362 0008 FFF7FEFF 		bl	SystemClock_Config
 363              	.LVL35:
 107:Src/main.c    ****     MX_TIM3_Init();
 364              		.loc 1 107 0
 365 000c FFF7FEFF 		bl	MX_GPIO_Init
 366              	.LVL36:
 108:Src/main.c    ****     MX_TIM5_Init();
 367              		.loc 1 108 0
 368 0010 FFF7FEFF 		bl	MX_TIM3_Init
 369              	.LVL37:
 109:Src/main.c    ****     MX_TIM1_Init();
 370              		.loc 1 109 0
 371 0014 FFF7FEFF 		bl	MX_TIM5_Init
 372              	.LVL38:
 110:Src/main.c    ****     MX_TIM2_Init();
 373              		.loc 1 110 0
 374 0018 FFF7FEFF 		bl	MX_TIM1_Init
 375              	.LVL39:
 111:Src/main.c    ****     MX_USART6_UART_Init();
 376              		.loc 1 111 0
 377 001c FFF7FEFF 		bl	MX_TIM2_Init
 378              	.LVL40:
 112:Src/main.c    ****     MX_ADC1_Init();
 379              		.loc 1 112 0
 380 0020 FFF7FEFF 		bl	MX_USART6_UART_Init
 381              	.LVL41:
 113:Src/main.c    ****     MX_I2C1_Init();
 382              		.loc 1 113 0
 383 0024 FFF7FEFF 		bl	MX_ADC1_Init
 384              	.LVL42:
 114:Src/main.c    ****     MX_TIM4_Init();
 385              		.loc 1 114 0
 386 0028 FFF7FEFF 		bl	MX_I2C1_Init
 387              	.LVL43:
 115:Src/main.c    ****     MX_TIM9_Init();
 388              		.loc 1 115 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 13


 389 002c FFF7FEFF 		bl	MX_TIM4_Init
 390              	.LVL44:
 116:Src/main.c    ****     ssd1306_Init();
 391              		.loc 1 116 0
 392 0030 FFF7FEFF 		bl	MX_TIM9_Init
 393              	.LVL45:
 117:Src/main.c    ****     /* USER CODE BEGIN 2 */
 394              		.loc 1 117 0
 395 0034 FFF7FEFF 		bl	ssd1306_Init
 396              	.LVL46:
 121:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 397              		.loc 1 121 0
 398 0038 3348     		ldr	r0, .L24
 399 003a 1821     		movs	r1, #24
 400 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 401              	.LVL47:
 122:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 402              		.loc 1 122 0
 403 0040 324C     		ldr	r4, .L24+4
 404 0042 2046     		mov	r0, r4
 405 0044 0021     		movs	r1, #0
 406 0046 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 407              	.LVL48:
 123:Src/main.c    **** 
 408              		.loc 1 123 0
 409 004a 2046     		mov	r0, r4
 410 004c 0821     		movs	r1, #8
 411 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 412              	.LVL49:
 128:Src/main.c    ****     char *msg = (char*)malloc(18*sizeof(char));
 413              		.loc 1 128 0
 414 0052 2F48     		ldr	r0, .L24+8
 415 0054 0021     		movs	r1, #0
 416 0056 FFF7FEFF 		bl	print
 417              	.LVL50:
 129:Src/main.c    ****     int motor = 0;
 418              		.loc 1 129 0
 419 005a 1220     		movs	r0, #18
 420 005c FFF7FEFF 		bl	malloc
 421              	.LVL51:
 422 0060 0446     		mov	r4, r0
 423              	.LVL52:
 131:Src/main.c    ****     print("L: 0", 0);
 424              		.loc 1 131 0
 425 0062 0025     		movs	r5, #0
 426 0064 0095     		str	r5, [sp]
 427 0066 0195     		str	r5, [sp, #4]
 132:Src/main.c    ****     print("R: 0", 1);
 428              		.loc 1 132 0
 429 0068 2A48     		ldr	r0, .L24+12
 430              	.LVL53:
 431 006a 2946     		mov	r1, r5
 432 006c FFF7FEFF 		bl	print
 433              	.LVL54:
 133:Src/main.c    ****     /* Infinite loop */
 434              		.loc 1 133 0
 435 0070 2948     		ldr	r0, .L24+16
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 14


 436 0072 0121     		movs	r1, #1
 437 0074 FFF7FEFF 		bl	print
 438              	.LVL55:
 439              	.L19:
 138:Src/main.c    ****             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 440              		.loc 1 138 0
 441 0078 2848     		ldr	r0, .L24+20
 442 007a 4FF40051 		mov	r1, #8192
 443 007e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 444              	.LVL56:
 445 0082 0028     		cmp	r0, #0
 446 0084 F8D1     		bne	.L19
 139:Src/main.c    ****             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 447              		.loc 1 139 0
 448 0086 214E     		ldr	r6, .L24+4
 449 0088 3046     		mov	r0, r6
 450 008a 0021     		movs	r1, #0
 451 008c FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 452              	.LVL57:
 140:Src/main.c    ****             sprintf(msg, "%lu", speed[motor]);
 453              		.loc 1 140 0
 454 0090 3046     		mov	r0, r6
 455 0092 0821     		movs	r1, #8
 456 0094 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 457              	.LVL58:
 141:Src/main.c    ****             print(msg, 0);
 458              		.loc 1 141 0
 459 0098 2046     		mov	r0, r4
 460 009a 2149     		ldr	r1, .L24+24
 461 009c 02AB     		add	r3, sp, #8
 462 009e 03EB8506 		add	r6, r3, r5, lsl #2
 463 00a2 56F8082C 		ldr	r2, [r6, #-8]
 464 00a6 FFF7FEFF 		bl	sprintf
 465              	.LVL59:
 142:Src/main.c    ****             TIM4->CNT = speed[motor];
 466              		.loc 1 142 0
 467 00aa 2046     		mov	r0, r4
 468 00ac 0021     		movs	r1, #0
 469 00ae FFF7FEFF 		bl	print
 470              	.LVL60:
 143:Src/main.c    ****             while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 471              		.loc 1 143 0
 472 00b2 56F8082C 		ldr	r2, [r6, #-8]
 473 00b6 1B4B     		ldr	r3, .L24+28
 474 00b8 5A62     		str	r2, [r3, #36]
 144:Src/main.c    ****                 speed[motor] = TIM4->CNT;
 475              		.loc 1 144 0
 476 00ba 0EE0     		b	.L20
 477              	.L21:
 145:Src/main.c    ****                 sprintf(msg, "%lu", speed[motor]);
 478              		.loc 1 145 0
 479 00bc 194B     		ldr	r3, .L24+28
 480 00be 5A6A     		ldr	r2, [r3, #36]
 481 00c0 02AB     		add	r3, sp, #8
 482 00c2 03EB8503 		add	r3, r3, r5, lsl #2
 483 00c6 43F8082C 		str	r2, [r3, #-8]
 146:Src/main.c    ****                 print(msg, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 15


 484              		.loc 1 146 0
 485 00ca 2046     		mov	r0, r4
 486 00cc 1449     		ldr	r1, .L24+24
 487 00ce FFF7FEFF 		bl	sprintf
 488              	.LVL61:
 147:Src/main.c    ****             }
 489              		.loc 1 147 0
 490 00d2 2046     		mov	r0, r4
 491 00d4 0021     		movs	r1, #0
 492 00d6 FFF7FEFF 		bl	print
 493              	.LVL62:
 494              	.L20:
 144:Src/main.c    ****                 speed[motor] = TIM4->CNT;
 495              		.loc 1 144 0
 496 00da 1048     		ldr	r0, .L24+20
 497 00dc 4FF40051 		mov	r1, #8192
 498 00e0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 499              	.LVL63:
 500 00e4 0028     		cmp	r0, #0
 501 00e6 E9D0     		beq	.L21
 149:Src/main.c    ****             motor = motor==0? 1: 0;
 502              		.loc 1 149 0
 503 00e8 2846     		mov	r0, r5
 504 00ea 6946     		mov	r1, sp
 505 00ec FFF7FEFF 		bl	update_motor_speed
 506              	.LVL64:
 150:Src/main.c    ****             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 507              		.loc 1 150 0
 508 00f0 85F00105 		eor	r5, r5, #1
 509              	.LVL65:
 151:Src/main.c    ****             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 510              		.loc 1 151 0
 511 00f4 054E     		ldr	r6, .L24+4
 512 00f6 3046     		mov	r0, r6
 513 00f8 0021     		movs	r1, #0
 514 00fa FFF7FEFF 		bl	HAL_TIM_PWM_Start
 515              	.LVL66:
 152:Src/main.c    ****         }
 516              		.loc 1 152 0
 517 00fe 3046     		mov	r0, r6
 518 0100 0821     		movs	r1, #8
 519 0102 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 520              	.LVL67:
 521 0106 B7E7     		b	.L19
 522              	.L25:
 523              		.align	2
 524              	.L24:
 525 0108 00000000 		.word	htim4
 526 010c 00000000 		.word	htim1
 527 0110 1C000000 		.word	.LC3
 528 0114 28000000 		.word	.LC4
 529 0118 30000000 		.word	.LC5
 530 011c 00080240 		.word	1073874944
 531 0120 38000000 		.word	.LC6
 532 0124 00080040 		.word	1073743872
 533              		.cfi_endproc
 534              	.LFE123:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 16


 536              		.global	PUSH_BUTTON_STATE
 537              		.section	.rodata.str1.4,"aMS",%progbits,1
 538              		.align	2
 539              	.LC0:
 540 0000 4C3A2025 		.ascii	"L: %lu\000"
 540      6C7500
 541 0007 00       		.space	1
 542              	.LC1:
 543 0008 523A2025 		.ascii	"R: %lu\000"
 543      6C7500
 544 000f 00       		.space	1
 545              	.LC2:
 546 0010 5372632F 		.ascii	"Src/main.c\000"
 546      6D61696E 
 546      2E6300
 547 001b 00       		.space	1
 548              	.LC3:
 549 001c 53746172 		.ascii	"Starting\000"
 549      74696E67 
 549      00
 550 0025 000000   		.space	3
 551              	.LC4:
 552 0028 4C3A2030 		.ascii	"L: 0\000"
 552      00
 553 002d 000000   		.space	3
 554              	.LC5:
 555 0030 523A2030 		.ascii	"R: 0\000"
 555      00
 556 0035 000000   		.space	3
 557              	.LC6:
 558 0038 256C7500 		.ascii	"%lu\000"
 559              		.section	.bss.PUSH_BUTTON_STATE,"aw",%nobits
 562              	PUSH_BUTTON_STATE:
 563 0000 00       		.space	1
 564              		.text
 565              	.Letext0:
 566              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 567              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 568              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 569              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 570              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 571              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 572              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 573              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 574              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 575              		.file 11 "Inc/fonts.h"
 576              		.file 12 "Inc/ssd1306.h"
 577              		.file 13 "<built-in>"
 578              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
 579              		.file 15 "Inc/tim.h"
 580              		.file 16 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 581              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 582              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 583              		.file 19 "Inc/gpio.h"
 584              		.file 20 "Inc/usart.h"
 585              		.file 21 "Inc/adc.h"
 586              		.file 22 "Inc/i2c.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 17


ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:21     .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:26     .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:74     .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:83     .text.update_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:88     .text.update_motor_speed:0000000000000000 update_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:168    .text.update_motor_speed:000000000000006c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:177    .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:182    .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:198    .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:203    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:329    .text.SystemClock_Config:00000000000000b0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:337    .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:342    .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:525    .text.main:0000000000000108 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:562    .bss.PUSH_BUTTON_STATE:0000000000000000 PUSH_BUTTON_STATE
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:538    .rodata.str1.4:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s:563    .bss.PUSH_BUTTON_STATE:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
malloc
sprintf
htim1
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_TIM3_Init
MX_TIM5_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
ssd1306_Init
HAL_TIM_Encoder_Start
HAL_TIM_PWM_Start
HAL_GPIO_ReadPin
HAL_TIM_PWM_Stop
htim4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccROgdT7.s 			page 19


