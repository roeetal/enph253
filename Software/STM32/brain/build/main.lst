ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.encoder_pid,"ax",%progbits
  21              		.align	2
  22              		.global	encoder_pid
  23              		.thumb
  24              		.thumb_func
  26              	encoder_pid:
  27              	.LFB136:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****  ******************************************************************************
   3:Src/main.c    ****  * @file           : main.c
   4:Src/main.c    ****  * @brief          : Main program body
   5:Src/main.c    ****  ******************************************************************************
   6:Src/main.c    ****  ** This notice applies to any and all portions of this file
   7:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****  * inserted by the user or by software development tools
  10:Src/main.c    ****  * are owned by their respective copyright owners.
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  13:Src/main.c    ****  *
  14:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****  * are permitted provided that the following conditions are met:
  16:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****  *      and/or other materials provided with the distribution.
  21:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****  *      without specific prior written permission.
  24:Src/main.c    ****  *
  25:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 2


  31:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****  *
  36:Src/main.c    ****  ******************************************************************************
  37:Src/main.c    ****  */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** #include "main.h"
  40:Src/main.c    **** #include "stm32f4xx_hal.h"
  41:Src/main.c    **** #include "adc.h"
  42:Src/main.c    **** #include "dma.h"
  43:Src/main.c    **** #include "i2c.h"
  44:Src/main.c    **** #include "tim.h"
  45:Src/main.c    **** #include "usart.h"
  46:Src/main.c    **** #include "gpio.h"
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** #include "fonts.h"
  50:Src/main.c    **** #include "ssd1306.h"
  51:Src/main.c    **** #include "encoder.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "filter.h"
  54:Src/main.c    **** #include "extern_vars.h"
  55:Src/main.c    **** #include <String.h>
  56:Src/main.c    **** #include "claw.h"
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END Includes */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** // uint16_t LEFT_SPEED = BASE_SPEED+SPEED_DIFF;
  65:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED;
  66:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  67:Src/main.c    **** uint32_t dma_buffer[2048];
  68:Src/main.c    **** uint32_t adc_values[2048];
  69:Src/main.c    **** int ewok_cnt = 0;
  70:Src/main.c    **** int searches = 0;
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  79:Src/main.c    **** void print(char msg[], int row);
  80:Src/main.c    **** PID_t menu();
  81:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  82:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  83:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  84:Src/main.c    **** void turn();
  85:Src/main.c    **** void turn_deg(int16_t);
  86:Src/main.c    **** void alarm_detect();
  87:Src/main.c    **** void drive_straight(PID_t *enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 3


  88:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis);
  89:Src/main.c    **** void square_edge(PID_t *enc_pid);
  90:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid);
  91:Src/main.c    **** void test_All();
  92:Src/main.c    **** void test_PWM_htim1();
  93:Src/main.c    **** void test_PWM_htim3();
  94:Src/main.c    **** 
  95:Src/main.c    **** /* USER CODE END PFP */
  96:Src/main.c    **** 
  97:Src/main.c    **** /* USER CODE BEGIN 0 */
  98:Src/main.c    **** /**
  99:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
 100:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
 101:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
 102:Src/main.c    ****  */
 103:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 104:Src/main.c    **** {
 105:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
 106:Src/main.c    **** }
 107:Src/main.c    **** /* USER CODE END 0 */
 108:Src/main.c    **** 
 109:Src/main.c    **** /**
 110:Src/main.c    ****  * @brief  The application entry point.
 111:Src/main.c    ****  *
 112:Src/main.c    ****  * @retval None
 113:Src/main.c    ****  */
 114:Src/main.c    **** int main(void)
 115:Src/main.c    **** {
 116:Src/main.c    ****     /* USER CODE BEGIN 1 */
 117:Src/main.c    **** 
 118:Src/main.c    ****     /* USER CODE END 1 */
 119:Src/main.c    **** 
 120:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 121:Src/main.c    **** 
 122:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 123:Src/main.c    ****     HAL_Init();
 124:Src/main.c    **** 
 125:Src/main.c    ****     /* USER CODE BEGIN Init */
 126:Src/main.c    **** 
 127:Src/main.c    ****     /* USER CODE END Init */
 128:Src/main.c    **** 
 129:Src/main.c    ****     /* Configure the system clock */
 130:Src/main.c    ****     SystemClock_Config();
 131:Src/main.c    **** 
 132:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 133:Src/main.c    **** 
 134:Src/main.c    ****     /* USER CODE END SysInit */
 135:Src/main.c    **** 
 136:Src/main.c    ****     /* Initialize all configured peripherals */
 137:Src/main.c    ****     MX_GPIO_Init();
 138:Src/main.c    ****     MX_DMA_Init();
 139:Src/main.c    ****     MX_TIM3_Init();
 140:Src/main.c    ****     MX_TIM1_Init();
 141:Src/main.c    ****     MX_TIM2_Init();
 142:Src/main.c    ****     MX_ADC1_Init();
 143:Src/main.c    ****     MX_TIM4_Init();
 144:Src/main.c    ****     MX_TIM9_Init();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 4


 145:Src/main.c    ****     MX_TIM5_Init();
 146:Src/main.c    ****     MX_I2C1_Init();
 147:Src/main.c    ****     MX_USART6_UART_Init();
 148:Src/main.c    ****     /* USER CODE BEGIN 2 */
 149:Src/main.c    **** 
 150:Src/main.c    ****     /* Initialize peripherals */
 151:Src/main.c    ****     /* 
 152:Src/main.c    ****      * Claw jaw: TIM3 CH1
 153:Src/main.c    ****      * Claw arm: TIM3 CH2
 154:Src/main.c    ****      * Basket: TIM3 CH3
 155:Src/main.c    ****      * left forward: TIM1 CH1
 156:Src/main.c    ****      * left backward: TIM1 CH2
 157:Src/main.c    ****      * right forward: TIM1 CH3
 158:Src/main.c    ****      * right backward: TIM1 CH4
 159:Src/main.c    ****      * left encoder: TIM4
 160:Src/main.c    ****      * right encoderL TIM5
 161:Src/main.c    ****      * spare clocks: TIM2, TIM9
 162:Src/main.c    ****      */
 163:Src/main.c    **** 
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 165:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 172:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 173:Src/main.c    **** 
 174:Src/main.c    ****     /* Initialize other stuffs */
 175:Src/main.c    ****     ssd1306_Init();
 176:Src/main.c    ****     print("Starting\n", 0);
 177:Src/main.c    ****     claw_init(&htim3);
 178:Src/main.c    ****     // basket_init(&htim3);
 179:Src/main.c    **** 
 180:Src/main.c    ****     PID_t enc_pid = pid_Init(2, 0, 0, 2, 1);
 181:Src/main.c    **** 
 182:Src/main.c    ****     EDGE_LEFT_STATE = NOT_FLAGGED;
 183:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 184:Src/main.c    **** 
 185:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED+80, RIGHT_SPEED, 2000);
 186:Src/main.c    **** 
 187:Src/main.c    ****     /* Initially disabled interrupts and ADC */
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 189:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 190:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 191:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 192:Src/main.c    **** 
 193:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED+10, 5000);
 194:Src/main.c    ****     print("ewok\n", 0);
 195:Src/main.c    **** 
 196:Src/main.c    ****     /* USER CODE END 2 */
 197:Src/main.c    **** 
 198:Src/main.c    ****     /* Infinite loop */
 199:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 200:Src/main.c    ****     while (1)
 201:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 5


 202:Src/main.c    ****         // /*
 203:Src/main.c    ****         //  * Pi Turning
 204:Src/main.c    ****         //  */
 205:Src/main.c    **** 
 206:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 207:Src/main.c    ****         {
 208:Src/main.c    ****             // Stop Requesting Images
 209:Src/main.c    ****             print("Pi interrupt\n", 0);
 210:Src/main.c    ****             // Turn to ewok
 211:Src/main.c    ****             turn();
 212:Src/main.c    **** 
 213:Src/main.c    ****             // Drive forward w/ PID for 2.5 s, enable claw interrupt
 214:Src/main.c    ****             //    uint32_t start = HAL_GetTick();
 215:Src/main.c    ****             uint32_t time = HAL_GetTick();
 216:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 217:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 218:Src/main.c    ****             while(HAL_GetTick()-time<2800){
 219:Src/main.c    ****                 drive_straight(&enc_pid);
 220:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 221:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 222:Src/main.c    ****                 {
 223:Src/main.c    ****                     print("Claw interrupt\n", 0);
 224:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 225:Src/main.c    ****                     break;
 226:Src/main.c    ****                 }
 227:Src/main.c    ****             }
 228:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 229:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 230:Src/main.c    ****             print("ewok\n", 0);
 231:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 232:Src/main.c    **** 
 233:Src/main.c    ****         }else{
 234:Src/main.c    **** 
 235:Src/main.c    ****             ++searches;
 236:Src/main.c    ****             if(searches == 4 && ewok_cnt == 0){
 237:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 238:Src/main.c    ****             }
 239:Src/main.c    ****             else if(searches == 3 && ewok_cnt == 1){
 240:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 241:Src/main.c    ****             }
 242:Src/main.c    ****             else if(searches == 8 && ewok_cnt == 2){
 243:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 244:Src/main.c    ****             }else{
 245:Src/main.c    ****             uint32_t time = HAL_GetTick();
 246:Src/main.c    ****             while(HAL_GetTick()-time<2800 && PI_INT_STATE == NOT_FLAGGED);
 247:Src/main.c    ****             int thresh = ewok_cnt==1? 500:750;
 248:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 249:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 250:Src/main.c    ****             time = HAL_GetTick();
 251:Src/main.c    ****             while(HAL_GetTick()-time<thresh){
 252:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 253:Src/main.c    ****                 {
 254:Src/main.c    ****                     print("Claw interrupt\n", 0);
 255:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 256:Src/main.c    ****                     break;
 257:Src/main.c    ****                 }
 258:Src/main.c    ****                 drive_straight(&enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 6


 259:Src/main.c    ****             }
 260:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 261:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 262:Src/main.c    ****             print("ewok\n", 0);
 263:Src/main.c    ****             }
 264:Src/main.c    ****         }
 265:Src/main.c    ****         /* 
 266:Src/main.c    ****         // Reset Claw Interrupt before driving forward
 267:Src/main.c    ****         print("MAIN | CLAW_INT UNFLAGGED\n", 0);
 268:Src/main.c    ****         while (HAL_GetTick()-start<3000)
 269:Src/main.c    ****         {
 270:Src/main.c    ****         drive_straight(&enc_pid);
 271:Src/main.c    ****         // If we trip claw interrupt, debounce and grab it
 272:Src/main.c    ****         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 273:Src/main.c    ****         {
 274:Src/main.c    ****         print("Claw interrupt\n", 0);
 275:Src/main.c    ****         if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 276:Src/main.c    ****         }
 277:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 278:Src/main.c    ****         {
 279:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 280:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 281:Src/main.c    ****         print("Edge left triggered", 0);
 282:Src/main.c    ****         turn_deg(30);
 283:Src/main.c    ****         }
 284:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 285:Src/main.c    ****         print("Edge right triggered", 0);
 286:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 287:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 288:Src/main.c    ****         turn_deg(-30);
 289:Src/main.c    ****         }
 290:Src/main.c    ****         }
 291:Src/main.c    **** 
 292:Src/main.c    ****         }
 293:Src/main.c    ****         else
 294:Src/main.c    ****         {
 295:Src/main.c    **** 
 296:Src/main.c    **** */
 297:Src/main.c    ****         /*
 298:Src/main.c    ****          * Look for Ewok
 299:Src/main.c    ****          */
 300:Src/main.c    ****         // CLAW_INT_STATE = NOT_FLAGGED;
 301:Src/main.c    **** 
 302:Src/main.c    ****         // if (ewok_cnt == 4 || ewok_cnt == 5)
 303:Src/main.c    ****         // {
 304:Src/main.c    ****         //     if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 305:Src/main.c    ****         //     {
 306:Src/main.c    ****         //         drive_straight_time(&enc_pid, 0, RIGHT_SPEED - 100, 400);
 307:Src/main.c    ****         //         uint32_t temp_time = HAL_GetTick();
 308:Src/main.c    ****         //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 309:Src/main.c    ****         //     }
 310:Src/main.c    ****         //     else if (EDGE_LEFT_STATE == NOT_FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 311:Src/main.c    ****         //     {
 312:Src/main.c    ****         //         drive_straight_time(&enc_pid, LEFT_SPEED - 100, 0, 400);
 313:Src/main.c    ****         //         uint32_t temp_time = HAL_GetTick();
 314:Src/main.c    ****         //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 315:Src/main.c    ****         //     }
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 7


 316:Src/main.c    ****         // }
 317:Src/main.c    ****         /*
 318:Src/main.c    **** 
 319:Src/main.c    ****            drive_straight_time(&enc_pid, LEFT_SPEED - 100, RIGHT_SPEED - 100, 500);
 320:Src/main.c    ****            print("ewok\n", 0);
 321:Src/main.c    ****            if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 322:Src/main.c    ****            {
 323:Src/main.c    ****            print("Claw interrupt\n", 0);
 324:Src/main.c    ****            if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 325:Src/main.c    ****            }
 326:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 327:Src/main.c    ****            {
 328:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 329:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 330:Src/main.c    ****            print("Edge left triggered", 0);
 331:Src/main.c    ****            turn_deg(30);
 332:Src/main.c    ****            }
 333:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 334:Src/main.c    ****            print("Edge right triggered", 0);
 335:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 336:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 337:Src/main.c    ****            turn_deg(-30);
 338:Src/main.c    ****            }
 339:Src/main.c    ****            uint32_t temp_time = HAL_GetTick();
 340:Src/main.c    ****            */
 341:Src/main.c    ****         /*
 342:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 343:Src/main.c    ****            {
 344:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 345:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 346:Src/main.c    ****            print("Edge left triggered", 0);
 347:Src/main.c    ****            turn_deg(30);
 348:Src/main.c    ****            }
 349:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 350:Src/main.c    ****            print("Edge right triggered", 0);
 351:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 352:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 353:Src/main.c    ****            turn_deg(-30);
 354:Src/main.c    ****            }
 355:Src/main.c    ****            */
 356:Src/main.c    **** 
 357:Src/main.c    ****         /* USER CODE END WHILE */
 358:Src/main.c    **** 
 359:Src/main.c    ****         /* USER CODE BEGIN 3 */
 360:Src/main.c    ****     }
 361:Src/main.c    ****     /* USER CODE END 3 */
 362:Src/main.c    **** 
 363:Src/main.c    **** }
 364:Src/main.c    **** 
 365:Src/main.c    **** /**
 366:Src/main.c    ****  * @brief System Clock Configuration
 367:Src/main.c    ****  * @retval None
 368:Src/main.c    ****  */
 369:Src/main.c    **** void SystemClock_Config(void)
 370:Src/main.c    **** {
 371:Src/main.c    **** 
 372:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 8


 373:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 374:Src/main.c    **** 
 375:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 376:Src/main.c    ****     */
 377:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 378:Src/main.c    **** 
 379:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 380:Src/main.c    **** 
 381:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 382:Src/main.c    ****     */
 383:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 384:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 385:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 386:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 387:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 388:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 389:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 390:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 391:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 392:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 393:Src/main.c    ****     {
 394:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 395:Src/main.c    ****     }
 396:Src/main.c    **** 
 397:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 398:Src/main.c    ****     */
 399:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 400:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 401:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 402:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 403:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 404:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 405:Src/main.c    **** 
 406:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 407:Src/main.c    ****     {
 408:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 409:Src/main.c    ****     }
 410:Src/main.c    **** 
 411:Src/main.c    ****     /**Configure the Systick interrupt time 
 412:Src/main.c    ****     */
 413:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 414:Src/main.c    **** 
 415:Src/main.c    ****     /**Configure the Systick 
 416:Src/main.c    ****     */
 417:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 418:Src/main.c    **** 
 419:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 420:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 421:Src/main.c    **** }
 422:Src/main.c    **** 
 423:Src/main.c    **** /* USER CODE BEGIN 4 */
 424:Src/main.c    **** 
 425:Src/main.c    **** void square_edge(PID_t *enc_pid)
 426:Src/main.c    **** {
 427:Src/main.c    ****     while (1)
 428:Src/main.c    ****     {
 429:Src/main.c    ****         drive_straight(enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 9


 430:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_Read
 431:Src/main.c    ****         {
 432:Src/main.c    ****             break;
 433:Src/main.c    ****         }
 434:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET || HAL_GPIO
 435:Src/main.c    ****         {
 436:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 437:Src/main.c    ****             {
 438:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 439:Src/main.c    ****             }
 440:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET)
 441:Src/main.c    ****             {
 442:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 443:Src/main.c    ****             }
 444:Src/main.c    ****         }
 445:Src/main.c    ****     }
 446:Src/main.c    **** }
 447:Src/main.c    **** 
 448:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis)
 449:Src/main.c    **** {
 450:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 451:Src/main.c    ****     char msg[50] = "";
 452:Src/main.c    ****     uint8_t count = 0; // FIXME: Remove to speed up
 453:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 454:Src/main.c    ****     {
 455:Src/main.c    ****         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 456:Src/main.c    ****         {
 457:Src/main.c    ****             print("Claw interrupt\n", 0);
 458:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 459:Src/main.c    ****         }
 460:Src/main.c    ****         /*
 461:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 462:Src/main.c    ****            {
 463:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 464:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 465:Src/main.c    ****            print("Edge left triggered", 0);
 466:Src/main.c    ****            turn_deg(30);
 467:Src/main.c    ****            }
 468:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 469:Src/main.c    ****            print("Edge right triggered", 0);
 470:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 471:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 472:Src/main.c    ****            turn_deg(-30);
 473:Src/main.c    ****            }
 474:Src/main.c    ****            */
 475:Src/main.c    ****         else 
 476:Src/main.c    ****         {
 477:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, lspeed);
 478:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 479:Src/main.c    ****             drive_straight(enc_pid);
 480:Src/main.c    **** 
 481:Src/main.c    ****         }
 482:Src/main.c    ****     }
 483:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 484:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 485:Src/main.c    **** }
 486:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 10


 487:Src/main.c    **** void drive_straight(PID_t *enc_pid)
 488:Src/main.c    **** {
 489:Src/main.c    ****     encoder_pid(enc_pid);
 490:Src/main.c    ****     HAL_Delay(10);
 491:Src/main.c    **** 
 492:Src/main.c    **** }
 493:Src/main.c    **** 
 494:Src/main.c    **** /*
 495:Src/main.c    ****  * Assume motors are not on.
 496:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 497:Src/main.c    ****  */
 498:Src/main.c    **** void turn()
 499:Src/main.c    **** {
 500:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 501:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 502:Src/main.c    ****     HAL_Delay(500);
 503:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 504:Src/main.c    ****     //double r = atan(1.57*tan()/())
 505:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 506:Src/main.c    ****     TIM4->CNT = 0;
 507:Src/main.c    ****     TIM5->CNT = 0;
 508:Src/main.c    **** 
 509:Src/main.c    ****     char msg[18] = "";
 510:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", (int)counts);
 511:Src/main.c    ****     print(msg, 0);
 512:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 513:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 514:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 515:Src/main.c    ****     print(msg, 2);
 516:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %lu\n", 2 * adc_values[5]);
 517:Src/main.c    ****     print(msg, 0);
 518:Src/main.c    **** 
 519:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
 520:Src/main.c    ****     {
 521:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 522:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 523:Src/main.c    ****         while (TIM5->CNT < counts)
 524:Src/main.c    ****         {
 525:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 526:Src/main.c    ****             // print(msg, 4);
 527:Src/main.c    ****         }
 528:Src/main.c    ****         sprintf(msg, "TURN | TIM5->CNT: %lu\n", TIM5->CNT);
 529:Src/main.c    ****         print(msg, 4);
 530:Src/main.c    ****         TIM5->CNT = 0;
 531:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 532:Src/main.c    ****     }
 533:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 534:Src/main.c    ****     {
 535:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 536:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 537:Src/main.c    ****         while (TIM4->CNT < counts)
 538:Src/main.c    ****         {
 539:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 540:Src/main.c    ****             // print(msg, 4);
 541:Src/main.c    ****         }
 542:Src/main.c    ****         sprintf(msg, "TURN | TIM4->CNT: %lu\n", TIM4->CNT);
 543:Src/main.c    ****         print(msg, 4);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 11


 544:Src/main.c    ****         TIM4->CNT = 0;
 545:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 546:Src/main.c    ****     }
 547:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 548:Src/main.c    **** }
 549:Src/main.c    **** 
 550:Src/main.c    **** /*
 551:Src/main.c    ****  * Assume motors are not on.
 552:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 553:Src/main.c    ****  */
 554:Src/main.c    **** void turn_deg(int16_t deg)
 555:Src/main.c    **** {
 556:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 557:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 558:Src/main.c    ****     if (counts < 0) counts = -counts;
 559:Src/main.c    ****     TIM4->CNT = 0;
 560:Src/main.c    ****     TIM5->CNT = 0;
 561:Src/main.c    **** 
 562:Src/main.c    ****     char msg[50] = "";
 563:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 564:Src/main.c    ****     print(msg, 0);
 565:Src/main.c    **** 
 566:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 567:Src/main.c    ****     {
 568:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 569:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 570:Src/main.c    ****         while (TIM4->CNT < counts)
 571:Src/main.c    ****         {
 572:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 573:Src/main.c    ****             // print(msg, 4);
 574:Src/main.c    ****         }
 575:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM5->CNT: %lu\n", TIM5->CNT);
 576:Src/main.c    ****         print(msg, 4);
 577:Src/main.c    ****         TIM5->CNT = 0;
 578:Src/main.c    ****     }
 579:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 580:Src/main.c    ****     {
 581:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 582:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 583:Src/main.c    ****         while (TIM5->CNT < counts)
 584:Src/main.c    ****         {
 585:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 586:Src/main.c    ****             // print(msg, 4);
 587:Src/main.c    ****         }
 588:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM4->CNT: %lu\n", TIM4->CNT);
 589:Src/main.c    ****         print(msg, 4);
 590:Src/main.c    ****         TIM4->CNT = 0;
 591:Src/main.c    ****     }
 592:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 593:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 594:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 595:Src/main.c    **** }
 596:Src/main.c    **** 
 597:Src/main.c    **** /**
 598:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 599:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 600:Src/main.c    ****  *
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 12


 601:Src/main.c    ****  * @param adc_val, value read from ADC.
 602:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 603:Src/main.c    ****  **/
 604:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 605:Src/main.c    **** {
 606:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
 607:Src/main.c    **** }
 608:Src/main.c    **** 
 609:Src/main.c    **** // Sampling frequency: 72e6/2/(495*2)
 610:Src/main.c    **** void alarm_detect() {
 611:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 612:Src/main.c    ****     HAL_Delay(500);
 613:Src/main.c    ****     char msg[20]="";
 614:Src/main.c    ****     int count = 0;
 615:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 10);
 616:Src/main.c    ****     HAL_Delay(100);
 617:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 10);
 618:Src/main.c    ****     HAL_Delay(100);
 619:Src/main.c    ****     print("worcs", 0);
 620:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 621:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 622:Src/main.c    **** }
 623:Src/main.c    **** 
 624:Src/main.c    **** /**
 625:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 626:Src/main.c    ****  * @param msg, string to print
 627:Src/main.c    ****  * @param row, row to print msg to
 628:Src/main.c    ****  */
 629:Src/main.c    **** void print(char *msg, int row)
 630:Src/main.c    **** {
 631:Src/main.c    ****     // if (row == 0)
 632:Src/main.c    ****     // {
 633:Src/main.c    ****     //     ssd1306_Fill(Black);
 634:Src/main.c    ****     // }
 635:Src/main.c    ****     // ssd1306_SetCursor(0, row * 10);
 636:Src/main.c    ****     // ssd1306_WriteString(msg, Font_7x10, White);
 637:Src/main.c    ****     // ssd1306_UpdateScreen();
 638:Src/main.c    ****     HAL_UART_Transmit(&huart6, (uint8_t *) msg, strlen(msg), 100);
 639:Src/main.c    **** }
 640:Src/main.c    **** 
 641:Src/main.c    **** PID_t menu()
 642:Src/main.c    **** {
 643:Src/main.c    ****     print("Starting\n", 0);
 644:Src/main.c    ****     char msg[20] = "";
 645:Src/main.c    ****     int pid_select = 0;
 646:Src/main.c    ****     uint32_t values[2] = {0, 0};
 647:Src/main.c    ****     while (1)
 648:Src/main.c    ****     {
 649:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 650:Src/main.c    ****         {
 651:Src/main.c    ****             sprintf(msg, "%lu\n", values[pid_select]);
 652:Src/main.c    ****             print(msg, 0);
 653:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 654:Src/main.c    ****             {
 655:Src/main.c    ****                 values[pid_select]++;
 656:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
 657:Src/main.c    ****                 print(msg, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 13


 658:Src/main.c    ****                 HAL_Delay(500);
 659:Src/main.c    ****             }
 660:Src/main.c    ****             ++pid_select;
 661:Src/main.c    ****         }
 662:Src/main.c    ****         if (pid_select == 2)
 663:Src/main.c    ****             break;
 664:Src/main.c    ****     }
 665:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 666:Src/main.c    **** }
 667:Src/main.c    **** 
 668:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 669:Src/main.c    **** {
 670:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 671:Src/main.c    ****     {
 672:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 673:Src/main.c    ****     }
 674:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 675:Src/main.c    ****     {
 676:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 677:Src/main.c    ****     }
 678:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 679:Src/main.c    ****     {
 680:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 681:Src/main.c    ****     }
 682:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 683:Src/main.c    ****     {
 684:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 685:Src/main.c    ****     }
 686:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed > 1000 ? 1000 : speed);
 687:Src/main.c    **** }
 688:Src/main.c    **** 
 689:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 690:Src/main.c    **** {
  29              		.loc 1 690 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 38B5     		push	{r3, r4, r5, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 3, -16
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 14, -4
 691:Src/main.c    ****     /* Get error */
 692:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
  41              		.loc 1 692 0
  42 0002 0E4B     		ldr	r3, .L5
  43 0004 5C6A     		ldr	r4, [r3, #36]
  44              	.LVL1:
 693:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
  45              		.loc 1 693 0
  46 0006 03F58063 		add	r3, r3, #1024
  47 000a 5D6A     		ldr	r5, [r3, #36]
  48              	.LVL2:
 694:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 14


  49              		.loc 1 694 0
  50 000c 631B     		subs	r3, r4, r5
  51 000e 0361     		str	r3, [r0, #16]
 695:Src/main.c    **** 
 696:Src/main.c    ****     /* Get gain */
 697:Src/main.c    ****     // Gain <0 for ride side faster
 698:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
  52              		.loc 1 698 0
  53 0010 FFF7FEFF 		bl	pid_GetGain
  54              	.LVL3:
 699:Src/main.c    **** 
 700:Src/main.c    ****     /* Set Motor Speeds*/
 701:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 702:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 703:Src/main.c    ****     if (gain < 0)
 704:Src/main.c    ****     {
 705:Src/main.c    ****         lspeed -= gain;
 706:Src/main.c    ****     }
 707:Src/main.c    ****     else if (gain > 0)
 708:Src/main.c    ****     {
 709:Src/main.c    ****         rspeed += gain;
 710:Src/main.c    ****     }
 711:Src/main.c    **** 
 712:Src/main.c    ****     // char msg[18] = "";
 713:Src/main.c    ****     // sprintf(msg, "LS: %lu", lspeed);
 714:Src/main.c    ****     // print(msg, 0);
 715:Src/main.c    ****     // sprintf(msg, "RS: %lu", rspeed);
 716:Src/main.c    ****     // print(msg, 1);
 717:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, lspeed);
 718:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, rspeed);
 719:Src/main.c    **** 
 720:Src/main.c    ****     /* Prevent weird overflow shit */
 721:Src/main.c    ****     if (lcnt > 60000 || rcnt > 60000)
  55              		.loc 1 721 0
  56 0014 4EF66023 		movw	r3, #60000
  57 0018 9C42     		cmp	r4, r3
  58 001a 01D8     		bhi	.L2
  59              		.loc 1 721 0 is_stmt 0 discriminator 1
  60 001c 9D42     		cmp	r5, r3
  61 001e 0CD9     		bls	.L1
  62              	.L2:
 722:Src/main.c    ****     {
 723:Src/main.c    ****         TIM4->CNT -= 50000;
  63              		.loc 1 723 0 is_stmt 1
  64 0020 064A     		ldr	r2, .L5
  65 0022 536A     		ldr	r3, [r2, #36]
  66 0024 A3F54343 		sub	r3, r3, #49920
  67 0028 503B     		subs	r3, r3, #80
  68 002a 5362     		str	r3, [r2, #36]
  69              	.LVL4:
 724:Src/main.c    ****         TIM5->CNT -= 50000;
  70              		.loc 1 724 0
  71 002c 02F58062 		add	r2, r2, #1024
  72 0030 536A     		ldr	r3, [r2, #36]
  73 0032 A3F54343 		sub	r3, r3, #49920
  74 0036 503B     		subs	r3, r3, #80
  75 0038 5362     		str	r3, [r2, #36]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 15


  76              	.L1:
  77 003a 38BD     		pop	{r3, r4, r5, pc}
  78              	.LVL5:
  79              	.L6:
  80              		.align	2
  81              	.L5:
  82 003c 00080040 		.word	1073743872
  83              		.cfi_endproc
  84              	.LFE136:
  86              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  87              		.align	2
  88              		.global	HAL_ADC_ConvCpltCallback
  89              		.thumb
  90              		.thumb_func
  92              	HAL_ADC_ConvCpltCallback:
  93              	.LFB123:
 104:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  94              		.loc 1 104 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL6:
  99 0000 08B5     		push	{r3, lr}
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 3, -8
 103              		.cfi_offset 14, -4
 105:Src/main.c    **** }
 104              		.loc 1 105 0
 105 0002 0348     		ldr	r0, .L9
 106              	.LVL7:
 107 0004 0349     		ldr	r1, .L9+4
 108 0006 4FF40052 		mov	r2, #8192
 109 000a FFF7FEFF 		bl	memcpy
 110              	.LVL8:
 111 000e 08BD     		pop	{r3, pc}
 112              	.L10:
 113              		.align	2
 114              	.L9:
 115 0010 00000000 		.word	adc_values
 116 0014 00000000 		.word	dma_buffer
 117              		.cfi_endproc
 118              	.LFE123:
 120              		.section	.text.drive_straight,"ax",%progbits
 121              		.align	2
 122              		.global	drive_straight
 123              		.thumb
 124              		.thumb_func
 126              	drive_straight:
 127              	.LFB128:
 488:Src/main.c    ****     encoder_pid(enc_pid);
 128              		.loc 1 488 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              	.LVL9:
 133 0000 08B5     		push	{r3, lr}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 16


 134              	.LCFI2:
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 3, -8
 137              		.cfi_offset 14, -4
 489:Src/main.c    ****     HAL_Delay(10);
 138              		.loc 1 489 0
 139 0002 FFF7FEFF 		bl	encoder_pid
 140              	.LVL10:
 490:Src/main.c    **** 
 141              		.loc 1 490 0
 142 0006 0A20     		movs	r0, #10
 143 0008 FFF7FEFF 		bl	HAL_Delay
 144              	.LVL11:
 145 000c 08BD     		pop	{r3, pc}
 146              		.cfi_endproc
 147              	.LFE128:
 149              		.global	__aeabi_ui2d
 150              		.global	__aeabi_dmul
 151              		.global	__aeabi_dsub
 152              		.global	__aeabi_d2f
 153 000e 00BF     		.section	.text.calculate_heading,"ax",%progbits
 154              		.align	2
 155              		.global	calculate_heading
 156              		.thumb
 157              		.thumb_func
 159              	calculate_heading:
 160              	.LFB131:
 605:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
 161              		.loc 1 605 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL12:
 166 0000 08B5     		push	{r3, lr}
 167              	.LCFI3:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 3, -8
 170              		.cfi_offset 14, -4
 606:Src/main.c    **** }
 171              		.loc 1 606 0
 172 0002 FFF7FEFF 		bl	__aeabi_ui2d
 173              	.LVL13:
 174 0006 0022     		movs	r2, #0
 175 0008 054B     		ldr	r3, .L15
 176 000a FFF7FEFF 		bl	__aeabi_dmul
 177              	.LVL14:
 178 000e 0022     		movs	r2, #0
 179 0010 044B     		ldr	r3, .L15+4
 180 0012 FFF7FEFF 		bl	__aeabi_dsub
 181              	.LVL15:
 182 0016 FFF7FEFF 		bl	__aeabi_d2f
 183              	.LVL16:
 607:Src/main.c    **** 
 184              		.loc 1 607 0
 185 001a 00EE100A 		fmsr	s0, r0
 186 001e 08BD     		pop	{r3, pc}
 187              	.L16:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 17


 188              		.align	2
 189              	.L15:
 190 0020 0000303F 		.word	1060110336
 191 0024 0000E03F 		.word	1071644672
 192              		.cfi_endproc
 193              	.LFE131:
 195              		.section	.text.print,"ax",%progbits
 196              		.align	2
 197              		.global	print
 198              		.thumb
 199              		.thumb_func
 201              	print:
 202              	.LFB133:
 630:Src/main.c    ****     // if (row == 0)
 203              		.loc 1 630 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              	.LVL17:
 208 0000 10B5     		push	{r4, lr}
 209              	.LCFI4:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 4, -8
 212              		.cfi_offset 14, -4
 213 0002 0446     		mov	r4, r0
 638:Src/main.c    **** }
 214              		.loc 1 638 0
 215 0004 FFF7FEFF 		bl	strlen
 216              	.LVL18:
 217 0008 82B2     		uxth	r2, r0
 218 000a 0348     		ldr	r0, .L19
 219 000c 2146     		mov	r1, r4
 220 000e 6423     		movs	r3, #100
 221 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 222              	.LVL19:
 223 0014 10BD     		pop	{r4, pc}
 224              	.LVL20:
 225              	.L20:
 226 0016 00BF     		.align	2
 227              	.L19:
 228 0018 00000000 		.word	huart6
 229              		.cfi_endproc
 230              	.LFE133:
 232              		.global	__aeabi_dcmplt
 233              		.global	__aeabi_dcmpgt
 234              		.section	.text.alarm_detect,"ax",%progbits
 235              		.align	2
 236              		.global	alarm_detect
 237              		.thumb
 238              		.thumb_func
 240              	alarm_detect:
 241              	.LFB132:
 610:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 242              		.loc 1 610 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 18


 246 0000 00B5     		push	{lr}
 247              	.LCFI5:
 248              		.cfi_def_cfa_offset 4
 249              		.cfi_offset 14, -4
 250 0002 83B0     		sub	sp, sp, #12
 251              	.LCFI6:
 252              		.cfi_def_cfa_offset 16
 611:Src/main.c    ****     HAL_Delay(500);
 253              		.loc 1 611 0
 254 0004 2148     		ldr	r0, .L25
 255 0006 2249     		ldr	r1, .L25+4
 256 0008 4FF40062 		mov	r2, #2048
 257 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 258              	.LVL21:
 612:Src/main.c    ****     char msg[20]="";
 259              		.loc 1 612 0
 260 0010 4FF4FA70 		mov	r0, #500
 261 0014 FFF7FEFF 		bl	HAL_Delay
 262              	.LVL22:
 263              	.L22:
 615:Src/main.c    ****     HAL_Delay(100);
 264              		.loc 1 615 0 discriminator 1
 265 0018 0023     		movs	r3, #0
 266 001a 0093     		str	r3, [sp]
 267 001c 1D48     		ldr	r0, .L25+8
 268 001e 48F60B61 		movw	r1, #36363
 269 0022 4FF47A72 		mov	r2, #1000
 270 0026 4FF40063 		mov	r3, #2048
 271 002a FFF7FEFF 		bl	goertzel
 272              	.LVL23:
 273 002e 51EC100B 		fmrrd	r0, r1, d0
 274 0032 0022     		movs	r2, #0
 275 0034 184B     		ldr	r3, .L25+12
 276 0036 FFF7FEFF 		bl	__aeabi_dcmplt
 277              	.LVL24:
 278 003a 0028     		cmp	r0, #0
 279 003c ECD1     		bne	.L22
 616:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 10);
 280              		.loc 1 616 0
 281 003e 6420     		movs	r0, #100
 282 0040 FFF7FEFF 		bl	HAL_Delay
 283              	.LVL25:
 284              	.L23:
 617:Src/main.c    ****     HAL_Delay(100);
 285              		.loc 1 617 0 discriminator 1
 286 0044 0023     		movs	r3, #0
 287 0046 0093     		str	r3, [sp]
 288 0048 1248     		ldr	r0, .L25+8
 289 004a 48F60B61 		movw	r1, #36363
 290 004e 4FF47A72 		mov	r2, #1000
 291 0052 4FF40063 		mov	r3, #2048
 292 0056 FFF7FEFF 		bl	goertzel
 293              	.LVL26:
 294 005a 51EC100B 		fmrrd	r0, r1, d0
 295 005e 0022     		movs	r2, #0
 296 0060 0D4B     		ldr	r3, .L25+12
 297 0062 FFF7FEFF 		bl	__aeabi_dcmpgt
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 19


 298              	.LVL27:
 299 0066 0028     		cmp	r0, #0
 300 0068 ECD1     		bne	.L23
 618:Src/main.c    ****     print("worcs", 0);
 301              		.loc 1 618 0
 302 006a 6420     		movs	r0, #100
 303 006c FFF7FEFF 		bl	HAL_Delay
 304              	.LVL28:
 619:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 305              		.loc 1 619 0
 306 0070 0A48     		ldr	r0, .L25+16
 307 0072 0021     		movs	r1, #0
 308 0074 FFF7FEFF 		bl	print
 309              	.LVL29:
 620:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 310              		.loc 1 620 0
 311 0078 0448     		ldr	r0, .L25
 312 007a FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 313              	.LVL30:
 621:Src/main.c    **** }
 314              		.loc 1 621 0
 315 007e 0022     		movs	r2, #0
 316 0080 074B     		ldr	r3, .L25+20
 317 0082 1A70     		strb	r2, [r3]
 622:Src/main.c    **** 
 318              		.loc 1 622 0
 319 0084 03B0     		add	sp, sp, #12
 320              	.LCFI7:
 321              		.cfi_def_cfa_offset 4
 322              		@ sp needed
 323 0086 5DF804FB 		ldr	pc, [sp], #4
 324              	.L26:
 325 008a 00BF     		.align	2
 326              	.L25:
 327 008c 00000000 		.word	hadc1
 328 0090 00000000 		.word	dma_buffer
 329 0094 00000000 		.word	adc_values
 330 0098 00002440 		.word	1076101120
 331 009c 00000000 		.word	.LC0
 332 00a0 00000000 		.word	IR_INT_STATE
 333              		.cfi_endproc
 334              	.LFE132:
 336              		.section	.text.menu,"ax",%progbits
 337              		.align	2
 338              		.global	menu
 339              		.thumb
 340              		.thumb_func
 342              	menu:
 343              	.LFB134:
 642:Src/main.c    ****     print("Starting\n", 0);
 344              		.loc 1 642 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 32
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              	.LVL31:
 349 0000 30B5     		push	{r4, r5, lr}
 350              	.LCFI8:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 20


 351              		.cfi_def_cfa_offset 12
 352              		.cfi_offset 4, -12
 353              		.cfi_offset 5, -8
 354              		.cfi_offset 14, -4
 355 0002 8BB0     		sub	sp, sp, #44
 356              	.LCFI9:
 357              		.cfi_def_cfa_offset 56
 358 0004 0546     		mov	r5, r0
 643:Src/main.c    ****     char msg[20] = "";
 359              		.loc 1 643 0
 360 0006 2548     		ldr	r0, .L33
 361              	.LVL32:
 362 0008 0021     		movs	r1, #0
 363 000a FFF7FEFF 		bl	print
 364              	.LVL33:
 644:Src/main.c    ****     int pid_select = 0;
 365              		.loc 1 644 0
 366 000e 0024     		movs	r4, #0
 367 0010 0594     		str	r4, [sp, #20]
 368 0012 0694     		str	r4, [sp, #24]
 369 0014 0794     		str	r4, [sp, #28]
 370 0016 0894     		str	r4, [sp, #32]
 371 0018 0994     		str	r4, [sp, #36]
 372              	.LVL34:
 646:Src/main.c    ****     while (1)
 373              		.loc 1 646 0
 374 001a 0394     		str	r4, [sp, #12]
 375 001c 0494     		str	r4, [sp, #16]
 376              	.LVL35:
 377              	.L31:
 649:Src/main.c    ****         {
 378              		.loc 1 649 0
 379 001e 2048     		ldr	r0, .L33+4
 380 0020 4FF40051 		mov	r1, #8192
 381 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 382              	.LVL36:
 383 0028 48BB     		cbnz	r0, .L28
 651:Src/main.c    ****             print(msg, 0);
 384              		.loc 1 651 0
 385 002a 05A8     		add	r0, sp, #20
 386 002c 1D49     		ldr	r1, .L33+8
 387 002e 0AAB     		add	r3, sp, #40
 388 0030 03EB8403 		add	r3, r3, r4, lsl #2
 389 0034 53F81C2C 		ldr	r2, [r3, #-28]
 390 0038 FFF7FEFF 		bl	sprintf
 391              	.LVL37:
 652:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 392              		.loc 1 652 0
 393 003c 05A8     		add	r0, sp, #20
 394 003e 0021     		movs	r1, #0
 395 0040 FFF7FEFF 		bl	print
 396              	.LVL38:
 653:Src/main.c    ****             {
 397              		.loc 1 653 0
 398 0044 13E0     		b	.L29
 399              	.L30:
 655:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 21


 400              		.loc 1 655 0
 401 0046 0AAB     		add	r3, sp, #40
 402 0048 03EB8403 		add	r3, r3, r4, lsl #2
 403 004c 53F81C2C 		ldr	r2, [r3, #-28]
 404 0050 0132     		adds	r2, r2, #1
 405 0052 43F81C2C 		str	r2, [r3, #-28]
 656:Src/main.c    ****                 print(msg, 0);
 406              		.loc 1 656 0
 407 0056 05A8     		add	r0, sp, #20
 408 0058 1249     		ldr	r1, .L33+8
 409 005a FFF7FEFF 		bl	sprintf
 410              	.LVL39:
 657:Src/main.c    ****                 HAL_Delay(500);
 411              		.loc 1 657 0
 412 005e 05A8     		add	r0, sp, #20
 413 0060 0021     		movs	r1, #0
 414 0062 FFF7FEFF 		bl	print
 415              	.LVL40:
 658:Src/main.c    ****             }
 416              		.loc 1 658 0
 417 0066 4FF4FA70 		mov	r0, #500
 418 006a FFF7FEFF 		bl	HAL_Delay
 419              	.LVL41:
 420              	.L29:
 653:Src/main.c    ****             {
 421              		.loc 1 653 0
 422 006e 0C48     		ldr	r0, .L33+4
 423 0070 4FF40051 		mov	r1, #8192
 424 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 425              	.LVL42:
 426 0078 0028     		cmp	r0, #0
 427 007a E4D0     		beq	.L30
 660:Src/main.c    ****         }
 428              		.loc 1 660 0
 429 007c 0134     		adds	r4, r4, #1
 430              	.LVL43:
 431              	.L28:
 662:Src/main.c    ****             break;
 432              		.loc 1 662 0
 433 007e 022C     		cmp	r4, #2
 434 0080 CDD1     		bne	.L31
 665:Src/main.c    **** }
 435              		.loc 1 665 0
 436 0082 BDF80C10 		ldrh	r1, [sp, #12]
 437 0086 BDF81020 		ldrh	r2, [sp, #16]
 438 008a 0123     		movs	r3, #1
 439 008c 0093     		str	r3, [sp]
 440 008e 0193     		str	r3, [sp, #4]
 441 0090 2846     		mov	r0, r5
 442 0092 FFF7FEFF 		bl	pid_Init
 443              	.LVL44:
 666:Src/main.c    **** 
 444              		.loc 1 666 0
 445 0096 2846     		mov	r0, r5
 446 0098 0BB0     		add	sp, sp, #44
 447              	.LCFI10:
 448              		.cfi_def_cfa_offset 12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 22


 449              		@ sp needed
 450 009a 30BD     		pop	{r4, r5, pc}
 451              	.LVL45:
 452              	.L34:
 453              		.align	2
 454              	.L33:
 455 009c 08000000 		.word	.LC1
 456 00a0 00080240 		.word	1073874944
 457 00a4 14000000 		.word	.LC2
 458              		.cfi_endproc
 459              	.LFE134:
 461              		.section	.text.set_motor_speed,"ax",%progbits
 462              		.align	2
 463              		.global	set_motor_speed
 464              		.thumb
 465              		.thumb_func
 467              	set_motor_speed:
 468              	.LFB135:
 669:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 469              		.loc 1 669 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473              		@ link register save eliminated.
 474              	.LVL46:
 670:Src/main.c    ****     {
 475              		.loc 1 670 0
 476 0000 0346     		mov	r3, r0
 477 0002 18B9     		cbnz	r0, .L36
 672:Src/main.c    ****     }
 478              		.loc 1 672 0
 479 0004 114A     		ldr	r2, .L40
 480 0006 1268     		ldr	r2, [r2]
 481 0008 9063     		str	r0, [r2, #56]
 482 000a 13E0     		b	.L37
 483              	.L36:
 674:Src/main.c    ****     {
 484              		.loc 1 674 0
 485 000c 0428     		cmp	r0, #4
 486 000e 04D1     		bne	.L38
 676:Src/main.c    ****     }
 487              		.loc 1 676 0
 488 0010 0E4A     		ldr	r2, .L40
 489 0012 1268     		ldr	r2, [r2]
 490 0014 0020     		movs	r0, #0
 491              	.LVL47:
 492 0016 5063     		str	r0, [r2, #52]
 493 0018 0CE0     		b	.L37
 494              	.LVL48:
 495              	.L38:
 678:Src/main.c    ****     {
 496              		.loc 1 678 0
 497 001a 0828     		cmp	r0, #8
 498 001c 04D1     		bne	.L39
 680:Src/main.c    ****     }
 499              		.loc 1 680 0
 500 001e 0B4A     		ldr	r2, .L40
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 23


 501 0020 1268     		ldr	r2, [r2]
 502 0022 0020     		movs	r0, #0
 503              	.LVL49:
 504 0024 1064     		str	r0, [r2, #64]
 505 0026 05E0     		b	.L37
 506              	.LVL50:
 507              	.L39:
 682:Src/main.c    ****     {
 508              		.loc 1 682 0
 509 0028 0C28     		cmp	r0, #12
 510 002a 03D1     		bne	.L37
 684:Src/main.c    ****     }
 511              		.loc 1 684 0
 512 002c 074A     		ldr	r2, .L40
 513 002e 1268     		ldr	r2, [r2]
 514 0030 0020     		movs	r0, #0
 515              	.LVL51:
 516 0032 D063     		str	r0, [r2, #60]
 517              	.L37:
 686:Src/main.c    **** }
 518              		.loc 1 686 0
 519 0034 054A     		ldr	r2, .L40
 520 0036 1268     		ldr	r2, [r2]
 521 0038 3432     		adds	r2, r2, #52
 522 003a 9B08     		lsrs	r3, r3, #2
 523              	.LVL52:
 524 003c B1F57A7F 		cmp	r1, #1000
 525 0040 28BF     		it	cs
 526 0042 4FF47A71 		movcs	r1, #1000
 527              	.LVL53:
 528 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 529 004a 7047     		bx	lr
 530              	.L41:
 531              		.align	2
 532              	.L40:
 533 004c 00000000 		.word	htim1
 534              		.cfi_endproc
 535              	.LFE135:
 537              		.section	.text.square_edge,"ax",%progbits
 538              		.align	2
 539              		.global	square_edge
 540              		.thumb
 541              		.thumb_func
 543              	square_edge:
 544              	.LFB126:
 426:Src/main.c    ****     while (1)
 545              		.loc 1 426 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549              	.LVL54:
 550 0000 10B5     		push	{r4, lr}
 551              	.LCFI11:
 552              		.cfi_def_cfa_offset 8
 553              		.cfi_offset 4, -8
 554              		.cfi_offset 14, -4
 555 0002 0446     		mov	r4, r0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 24


 556              	.LVL55:
 557              	.L43:
 429:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_Read
 558              		.loc 1 429 0
 559 0004 2046     		mov	r0, r4
 560 0006 FFF7FEFF 		bl	drive_straight
 561              	.LVL56:
 430:Src/main.c    ****         {
 562              		.loc 1 430 0
 563 000a 1648     		ldr	r0, .L50
 564 000c 0421     		movs	r1, #4
 565 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 566              	.LVL57:
 567 0012 38B9     		cbnz	r0, .L44
 430:Src/main.c    ****         {
 568              		.loc 1 430 0 is_stmt 0 discriminator 1
 569 0014 00F18040 		add	r0, r0, #1073741824
 570 0018 00F50230 		add	r0, r0, #133120
 571 001c 0821     		movs	r1, #8
 572 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 573              	.LVL58:
 574 0022 E8B1     		cbz	r0, .L42
 575              	.L44:
 434:Src/main.c    ****         {
 576              		.loc 1 434 0 is_stmt 1
 577 0024 0F48     		ldr	r0, .L50
 578 0026 0421     		movs	r1, #4
 579 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 580              	.LVL59:
 581 002c 28B1     		cbz	r0, .L46
 434:Src/main.c    ****         {
 582              		.loc 1 434 0 is_stmt 0 discriminator 1
 583 002e 0E48     		ldr	r0, .L50+4
 584 0030 0821     		movs	r1, #8
 585 0032 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 586              	.LVL60:
 587 0036 0028     		cmp	r0, #0
 588 0038 E4D1     		bne	.L43
 589              	.L46:
 436:Src/main.c    ****             {
 590              		.loc 1 436 0 is_stmt 1
 591 003a 0A48     		ldr	r0, .L50
 592 003c 0421     		movs	r1, #4
 593 003e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 594              	.LVL61:
 595 0042 10B9     		cbnz	r0, .L48
 438:Src/main.c    ****             }
 596              		.loc 1 438 0
 597 0044 0146     		mov	r1, r0
 598 0046 FFF7FEFF 		bl	set_motor_speed
 599              	.LVL62:
 600              	.L48:
 440:Src/main.c    ****             {
 601              		.loc 1 440 0
 602 004a 0748     		ldr	r0, .L50+4
 603 004c 0821     		movs	r1, #8
 604 004e FFF7FEFF 		bl	HAL_GPIO_ReadPin
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 25


 605              	.LVL63:
 606 0052 0028     		cmp	r0, #0
 607 0054 D6D1     		bne	.L43
 442:Src/main.c    ****             }
 608              		.loc 1 442 0
 609 0056 0820     		movs	r0, #8
 610 0058 0021     		movs	r1, #0
 611 005a FFF7FEFF 		bl	set_motor_speed
 612              	.LVL64:
 613 005e D1E7     		b	.L43
 614              	.L42:
 615 0060 10BD     		pop	{r4, pc}
 616              	.LVL65:
 617              	.L51:
 618 0062 00BF     		.align	2
 619              	.L50:
 620 0064 000C0240 		.word	1073875968
 621 0068 00080240 		.word	1073874944
 622              		.cfi_endproc
 623              	.LFE126:
 625              		.global	__aeabi_f2d
 626              		.global	__aeabi_d2uiz
 627              		.section	.text.turn,"ax",%progbits
 628              		.align	2
 629              		.global	turn
 630              		.thumb
 631              		.thumb_func
 633              	turn:
 634              	.LFB129:
 499:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 635              		.loc 1 499 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 24
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 640              	.LCFI12:
 641              		.cfi_def_cfa_offset 20
 642              		.cfi_offset 4, -20
 643              		.cfi_offset 5, -16
 644              		.cfi_offset 6, -12
 645              		.cfi_offset 7, -8
 646              		.cfi_offset 14, -4
 647 0002 2DED028B 		fstmfdd	sp!, {d8}
 648              	.LCFI13:
 649              		.cfi_def_cfa_offset 28
 650              		.cfi_offset 80, -28
 651              		.cfi_offset 81, -24
 652 0006 87B0     		sub	sp, sp, #28
 653              	.LCFI14:
 654              		.cfi_def_cfa_offset 56
 500:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 655              		.loc 1 500 0
 656 0008 5948     		ldr	r0, .L63+16
 657 000a 5A49     		ldr	r1, .L63+20
 658 000c 4FF40062 		mov	r2, #2048
 659 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 660              	.LVL66:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 26


 502:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 661              		.loc 1 502 0
 662 0014 4FF4FA70 		mov	r0, #500
 663 0018 FFF7FEFF 		bl	HAL_Delay
 664              	.LVL67:
 503:Src/main.c    ****     //double r = atan(1.57*tan()/())
 665              		.loc 1 503 0
 666 001c 564E     		ldr	r6, .L63+24
 667 001e 7069     		ldr	r0, [r6, #20]
 668 0020 4000     		lsls	r0, r0, #1
 669 0022 FFF7FEFF 		bl	calculate_heading
 670              	.LVL68:
 671 0026 B0EE408A 		fcpys	s16, s0
 672              	.LVL69:
 505:Src/main.c    ****     TIM4->CNT = 0;
 673              		.loc 1 505 0
 674 002a F0EEC07A 		fabss	s15, s0
 675 002e 17EE900A 		fmrs	r0, s15
 676 0032 FFF7FEFF 		bl	__aeabi_f2d
 677              	.LVL70:
 678 0036 0022     		movs	r2, #0
 679 0038 504B     		ldr	r3, .L63+28
 680 003a FFF7FEFF 		bl	__aeabi_dmul
 681              	.LVL71:
 682 003e FFF7FEFF 		bl	__aeabi_d2uiz
 683              	.LVL72:
 684 0042 85B2     		uxth	r5, r0
 685              	.LVL73:
 506:Src/main.c    ****     TIM5->CNT = 0;
 686              		.loc 1 506 0
 687 0044 0024     		movs	r4, #0
 688 0046 4E4B     		ldr	r3, .L63+32
 689 0048 5C62     		str	r4, [r3, #36]
 507:Src/main.c    **** 
 690              		.loc 1 507 0
 691 004a 03F58063 		add	r3, r3, #1024
 692 004e 5C62     		str	r4, [r3, #36]
 509:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", (int)counts);
 693              		.loc 1 509 0
 694 0050 0194     		str	r4, [sp, #4]
 695 0052 0294     		str	r4, [sp, #8]
 696 0054 0394     		str	r4, [sp, #12]
 697 0056 0494     		str	r4, [sp, #16]
 698 0058 ADF81440 		strh	r4, [sp, #20]	@ movhi
 510:Src/main.c    ****     print(msg, 0);
 699              		.loc 1 510 0
 700 005c 01A8     		add	r0, sp, #4
 701 005e 4949     		ldr	r1, .L63+36
 702 0060 2A46     		mov	r2, r5
 703 0062 FFF7FEFF 		bl	sprintf
 704              	.LVL74:
 511:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 705              		.loc 1 511 0
 706 0066 01A8     		add	r0, sp, #4
 707 0068 2146     		mov	r1, r4
 708 006a FFF7FEFF 		bl	print
 709              	.LVL75:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 27


 512:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 710              		.loc 1 512 0
 711 006e BDEEC87A 		ftosizs	s14, s16
 712              	.LVL76:
 513:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 713              		.loc 1 513 0
 714 0072 F8EEC77A 		fsitos	s15, s14
 715 0076 78EE677A 		fsubs	s15, s16, s15
 716 007a DFED436A 		flds	s13, .L63+40
 717 007e 67EEA67A 		fmuls	s15, s15, s13
 718              	.LVL77:
 514:Src/main.c    ****     print(msg, 2);
 719              		.loc 1 514 0
 720 0082 01A8     		add	r0, sp, #4
 721 0084 4149     		ldr	r1, .L63+44
 722 0086 17EE102A 		fmrs	r2, s14	@ int
 723 008a FDEEE77A 		ftosizs	s15, s15
 724              	.LVL78:
 725 008e 17EE903A 		fmrs	r3, s15	@ int
 726 0092 FFF7FEFF 		bl	sprintf
 727              	.LVL79:
 515:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %lu\n", 2 * adc_values[5]);
 728              		.loc 1 515 0
 729 0096 01A8     		add	r0, sp, #4
 730 0098 0221     		movs	r1, #2
 731 009a FFF7FEFF 		bl	print
 732              	.LVL80:
 516:Src/main.c    ****     print(msg, 0);
 733              		.loc 1 516 0
 734 009e 7269     		ldr	r2, [r6, #20]
 735 00a0 01A8     		add	r0, sp, #4
 736 00a2 3B49     		ldr	r1, .L63+48
 737 00a4 5200     		lsls	r2, r2, #1
 738 00a6 FFF7FEFF 		bl	sprintf
 739              	.LVL81:
 517:Src/main.c    **** 
 740              		.loc 1 517 0
 741 00aa 01A8     		add	r0, sp, #4
 742 00ac 2146     		mov	r1, r4
 743 00ae FFF7FEFF 		bl	print
 744              	.LVL82:
 519:Src/main.c    ****     {
 745              		.loc 1 519 0
 746 00b2 18EE100A 		fmrs	r0, s16
 747 00b6 FFF7FEFF 		bl	__aeabi_f2d
 748              	.LVL83:
 749 00ba 0646     		mov	r6, r0
 750 00bc 0F46     		mov	r7, r1
 751 00be 28A3     		adr	r3, .L63
 752 00c0 D3E90023 		ldrd	r2, [r3]
 753 00c4 FFF7FEFF 		bl	__aeabi_dcmplt
 754              	.LVL84:
 755 00c8 E8B1     		cbz	r0, .L61
 521:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 756              		.loc 1 521 0
 757 00ca 2046     		mov	r0, r4
 758 00cc 2146     		mov	r1, r4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 28


 759 00ce FFF7FEFF 		bl	set_motor_speed
 760              	.LVL85:
 522:Src/main.c    ****         while (TIM5->CNT < counts)
 761              		.loc 1 522 0
 762 00d2 0820     		movs	r0, #8
 763 00d4 2F4B     		ldr	r3, .L63+52
 764 00d6 1988     		ldrh	r1, [r3]
 765 00d8 FFF7FEFF 		bl	set_motor_speed
 766              	.LVL86:
 767              	.L55:
 523:Src/main.c    ****         {
 768              		.loc 1 523 0 discriminator 1
 769 00dc 2E4B     		ldr	r3, .L63+56
 770 00de 5B6A     		ldr	r3, [r3, #36]
 771 00e0 AB42     		cmp	r3, r5
 772 00e2 FBD3     		bcc	.L55
 528:Src/main.c    ****         print(msg, 4);
 773              		.loc 1 528 0
 774 00e4 2C4C     		ldr	r4, .L63+56
 775 00e6 626A     		ldr	r2, [r4, #36]
 776 00e8 01A8     		add	r0, sp, #4
 777 00ea 2C49     		ldr	r1, .L63+60
 778 00ec FFF7FEFF 		bl	sprintf
 779              	.LVL87:
 529:Src/main.c    ****         TIM5->CNT = 0;
 780              		.loc 1 529 0
 781 00f0 01A8     		add	r0, sp, #4
 782 00f2 0421     		movs	r1, #4
 783 00f4 FFF7FEFF 		bl	print
 784              	.LVL88:
 530:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 785              		.loc 1 530 0
 786 00f8 0020     		movs	r0, #0
 787 00fa 6062     		str	r0, [r4, #36]
 531:Src/main.c    ****     }
 788              		.loc 1 531 0
 789 00fc 284B     		ldr	r3, .L63+64
 790 00fe 1988     		ldrh	r1, [r3]
 791 0100 FFF7FEFF 		bl	set_motor_speed
 792              	.LVL89:
 793 0104 25E0     		b	.L56
 794              	.L61:
 533:Src/main.c    ****     {
 795              		.loc 1 533 0
 796 0106 3046     		mov	r0, r6
 797 0108 3946     		mov	r1, r7
 798 010a 17A3     		adr	r3, .L63+8
 799 010c D3E90023 		ldrd	r2, [r3]
 800 0110 FFF7FEFF 		bl	__aeabi_dcmpgt
 801              	.LVL90:
 802 0114 E8B1     		cbz	r0, .L56
 535:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 803              		.loc 1 535 0
 804 0116 0020     		movs	r0, #0
 805 0118 214B     		ldr	r3, .L63+64
 806 011a 1988     		ldrh	r1, [r3]
 807 011c FFF7FEFF 		bl	set_motor_speed
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 29


 808              	.LVL91:
 536:Src/main.c    ****         while (TIM4->CNT < counts)
 809              		.loc 1 536 0
 810 0120 0820     		movs	r0, #8
 811 0122 0021     		movs	r1, #0
 812 0124 FFF7FEFF 		bl	set_motor_speed
 813              	.LVL92:
 814              	.L58:
 537:Src/main.c    ****         {
 815              		.loc 1 537 0 discriminator 1
 816 0128 154B     		ldr	r3, .L63+32
 817 012a 5B6A     		ldr	r3, [r3, #36]
 818 012c AB42     		cmp	r3, r5
 819 012e FBD3     		bcc	.L58
 542:Src/main.c    ****         print(msg, 4);
 820              		.loc 1 542 0
 821 0130 134C     		ldr	r4, .L63+32
 822 0132 626A     		ldr	r2, [r4, #36]
 823 0134 01A8     		add	r0, sp, #4
 824 0136 1B49     		ldr	r1, .L63+68
 825 0138 FFF7FEFF 		bl	sprintf
 826              	.LVL93:
 543:Src/main.c    ****         TIM4->CNT = 0;
 827              		.loc 1 543 0
 828 013c 01A8     		add	r0, sp, #4
 829 013e 0421     		movs	r1, #4
 830 0140 FFF7FEFF 		bl	print
 831              	.LVL94:
 544:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 832              		.loc 1 544 0
 833 0144 0023     		movs	r3, #0
 834 0146 6362     		str	r3, [r4, #36]
 545:Src/main.c    ****     }
 835              		.loc 1 545 0
 836 0148 0820     		movs	r0, #8
 837 014a 124B     		ldr	r3, .L63+52
 838 014c 1988     		ldrh	r1, [r3]
 839 014e FFF7FEFF 		bl	set_motor_speed
 840              	.LVL95:
 841              	.L56:
 547:Src/main.c    **** }
 842              		.loc 1 547 0
 843 0152 0748     		ldr	r0, .L63+16
 844 0154 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 845              	.LVL96:
 548:Src/main.c    **** 
 846              		.loc 1 548 0
 847 0158 07B0     		add	sp, sp, #28
 848              	.LCFI15:
 849              		.cfi_def_cfa_offset 28
 850              		@ sp needed
 851 015a BDEC028B 		fldmfdd	sp!, {d8}
 852              	.LCFI16:
 853              		.cfi_restore 80
 854              		.cfi_restore 81
 855              		.cfi_def_cfa_offset 20
 856              	.LVL97:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 30


 857 015e F0BD     		pop	{r4, r5, r6, r7, pc}
 858              	.LVL98:
 859              	.L64:
 860              		.align	3
 861              	.L63:
 862 0160 7B14AE47 		.word	1202590843
 863 0164 E17AA4BF 		.word	-1079739679
 864 0168 7B14AE47 		.word	1202590843
 865 016c E17AA43F 		.word	1067743969
 866 0170 00000000 		.word	hadc1
 867 0174 00000000 		.word	dma_buffer
 868 0178 00000000 		.word	adc_values
 869 017c 00806140 		.word	1080131584
 870 0180 00080040 		.word	1073743872
 871 0184 1C000000 		.word	.LC3
 872 0188 00007A44 		.word	1148846080
 873 018c 30000000 		.word	.LC4
 874 0190 44000000 		.word	.LC5
 875 0194 00000000 		.word	.LANCHOR0
 876 0198 000C0040 		.word	1073744896
 877 019c 5C000000 		.word	.LC6
 878 01a0 00000000 		.word	.LANCHOR1
 879 01a4 74000000 		.word	.LC7
 880              		.cfi_endproc
 881              	.LFE129:
 883              		.global	__aeabi_i2d
 884              		.global	__aeabi_dadd
 885              		.global	__aeabi_d2iz
 886              		.section	.text.turn_deg,"ax",%progbits
 887              		.align	2
 888              		.global	turn_deg
 889              		.thumb
 890              		.thumb_func
 892              	turn_deg:
 893              	.LFB130:
 555:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 894              		.loc 1 555 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 56
 897              		@ frame_needed = 0, uses_anonymous_args = 0
 898              	.LVL99:
 899 0000 70B5     		push	{r4, r5, r6, lr}
 900              	.LCFI17:
 901              		.cfi_def_cfa_offset 16
 902              		.cfi_offset 4, -16
 903              		.cfi_offset 5, -12
 904              		.cfi_offset 6, -8
 905              		.cfi_offset 14, -4
 906 0002 8EB0     		sub	sp, sp, #56
 907              	.LCFI18:
 908              		.cfi_def_cfa_offset 72
 909 0004 0646     		mov	r6, r0
 556:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 910              		.loc 1 556 0
 911 0006 4248     		ldr	r0, .L72+8
 912              	.LVL100:
 913 0008 4249     		ldr	r1, .L72+12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 31


 914 000a 4FF40062 		mov	r2, #2048
 915 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 916              	.LVL101:
 557:Src/main.c    ****     if (counts < 0) counts = -counts;
 917              		.loc 1 557 0
 918 0012 A6F15A00 		sub	r0, r6, #90
 919 0016 FFF7FEFF 		bl	__aeabi_i2d
 920              	.LVL102:
 921 001a 3BA3     		adr	r3, .L72
 922 001c D3E90023 		ldrd	r2, [r3]
 923 0020 FFF7FEFF 		bl	__aeabi_dmul
 924              	.LVL103:
 925 0024 0022     		movs	r2, #0
 926 0026 3C4B     		ldr	r3, .L72+16
 927 0028 FFF7FEFF 		bl	__aeabi_dadd
 928              	.LVL104:
 929 002c FFF7FEFF 		bl	__aeabi_d2iz
 930              	.LVL105:
 931 0030 85B2     		uxth	r5, r0
 932              	.LVL106:
 558:Src/main.c    ****     TIM4->CNT = 0;
 933              		.loc 1 558 0
 934 0032 15F4004F 		tst	r5, #32768
 935 0036 01D0     		beq	.L66
 558:Src/main.c    ****     TIM4->CNT = 0;
 936              		.loc 1 558 0 is_stmt 0 discriminator 1
 937 0038 6D42     		negs	r5, r5
 938              	.LVL107:
 939 003a ADB2     		uxth	r5, r5
 940              	.LVL108:
 941              	.L66:
 559:Src/main.c    ****     TIM5->CNT = 0;
 942              		.loc 1 559 0 is_stmt 1
 943 003c 0024     		movs	r4, #0
 944 003e 374B     		ldr	r3, .L72+20
 945 0040 5C62     		str	r4, [r3, #36]
 560:Src/main.c    **** 
 946              		.loc 1 560 0
 947 0042 03F58063 		add	r3, r3, #1024
 948 0046 5C62     		str	r4, [r3, #36]
 562:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 949              		.loc 1 562 0
 950 0048 0194     		str	r4, [sp, #4]
 951 004a 0294     		str	r4, [sp, #8]
 952 004c 0394     		str	r4, [sp, #12]
 953 004e 0494     		str	r4, [sp, #16]
 954 0050 0594     		str	r4, [sp, #20]
 955 0052 0694     		str	r4, [sp, #24]
 956 0054 0794     		str	r4, [sp, #28]
 957 0056 0894     		str	r4, [sp, #32]
 958 0058 0994     		str	r4, [sp, #36]
 959 005a 0A94     		str	r4, [sp, #40]
 960 005c 0B94     		str	r4, [sp, #44]
 961 005e 0C94     		str	r4, [sp, #48]
 962 0060 ADF83440 		strh	r4, [sp, #52]	@ movhi
 563:Src/main.c    ****     print(msg, 0);
 963              		.loc 1 563 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 32


 964 0064 01A8     		add	r0, sp, #4
 965 0066 2E49     		ldr	r1, .L72+24
 966 0068 2AB2     		sxth	r2, r5
 967 006a FFF7FEFF 		bl	sprintf
 968              	.LVL109:
 564:Src/main.c    **** 
 969              		.loc 1 564 0
 970 006e 01A8     		add	r0, sp, #4
 971 0070 2146     		mov	r1, r4
 972 0072 FFF7FEFF 		bl	print
 973              	.LVL110:
 566:Src/main.c    ****     {
 974              		.loc 1 566 0
 975 0076 A642     		cmp	r6, r4
 976 0078 1ADD     		ble	.L67
 568:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 977              		.loc 1 568 0
 978 007a 2046     		mov	r0, r4
 979 007c 294B     		ldr	r3, .L72+28
 980 007e 1988     		ldrh	r1, [r3]
 981 0080 FFF7FEFF 		bl	set_motor_speed
 982              	.LVL111:
 569:Src/main.c    ****         while (TIM4->CNT < counts)
 983              		.loc 1 569 0
 984 0084 0820     		movs	r0, #8
 985 0086 2146     		mov	r1, r4
 986 0088 FFF7FEFF 		bl	set_motor_speed
 987              	.LVL112:
 988              	.L68:
 570:Src/main.c    ****         {
 989              		.loc 1 570 0 discriminator 1
 990 008c 234B     		ldr	r3, .L72+20
 991 008e 5A6A     		ldr	r2, [r3, #36]
 992 0090 2BB2     		sxth	r3, r5
 993 0092 9A42     		cmp	r2, r3
 994 0094 FAD3     		bcc	.L68
 575:Src/main.c    ****         print(msg, 4);
 995              		.loc 1 575 0
 996 0096 244C     		ldr	r4, .L72+32
 997 0098 626A     		ldr	r2, [r4, #36]
 998 009a 01A8     		add	r0, sp, #4
 999 009c 2349     		ldr	r1, .L72+36
 1000 009e FFF7FEFF 		bl	sprintf
 1001              	.LVL113:
 576:Src/main.c    ****         TIM5->CNT = 0;
 1002              		.loc 1 576 0
 1003 00a2 01A8     		add	r0, sp, #4
 1004 00a4 0421     		movs	r1, #4
 1005 00a6 FFF7FEFF 		bl	print
 1006              	.LVL114:
 577:Src/main.c    ****     }
 1007              		.loc 1 577 0
 1008 00aa 0023     		movs	r3, #0
 1009 00ac 6362     		str	r3, [r4, #36]
 1010 00ae 1BE0     		b	.L69
 1011              	.L67:
 579:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 33


 1012              		.loc 1 579 0
 1013 00b0 002E     		cmp	r6, #0
 1014 00b2 19DA     		bge	.L69
 581:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1015              		.loc 1 581 0
 1016 00b4 0020     		movs	r0, #0
 1017 00b6 0146     		mov	r1, r0
 1018 00b8 FFF7FEFF 		bl	set_motor_speed
 1019              	.LVL115:
 582:Src/main.c    ****         while (TIM5->CNT < counts)
 1020              		.loc 1 582 0
 1021 00bc 0820     		movs	r0, #8
 1022 00be 1C4B     		ldr	r3, .L72+40
 1023 00c0 1988     		ldrh	r1, [r3]
 1024 00c2 FFF7FEFF 		bl	set_motor_speed
 1025              	.LVL116:
 1026              	.L70:
 583:Src/main.c    ****         {
 1027              		.loc 1 583 0 discriminator 1
 1028 00c6 184B     		ldr	r3, .L72+32
 1029 00c8 5A6A     		ldr	r2, [r3, #36]
 1030 00ca 2BB2     		sxth	r3, r5
 1031 00cc 9A42     		cmp	r2, r3
 1032 00ce FAD3     		bcc	.L70
 588:Src/main.c    ****         print(msg, 4);
 1033              		.loc 1 588 0
 1034 00d0 124C     		ldr	r4, .L72+20
 1035 00d2 626A     		ldr	r2, [r4, #36]
 1036 00d4 01A8     		add	r0, sp, #4
 1037 00d6 1749     		ldr	r1, .L72+44
 1038 00d8 FFF7FEFF 		bl	sprintf
 1039              	.LVL117:
 589:Src/main.c    ****         TIM4->CNT = 0;
 1040              		.loc 1 589 0
 1041 00dc 01A8     		add	r0, sp, #4
 1042 00de 0421     		movs	r1, #4
 1043 00e0 FFF7FEFF 		bl	print
 1044              	.LVL118:
 590:Src/main.c    ****     }
 1045              		.loc 1 590 0
 1046 00e4 0023     		movs	r3, #0
 1047 00e6 6362     		str	r3, [r4, #36]
 1048              	.L69:
 592:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1049              		.loc 1 592 0
 1050 00e8 0020     		movs	r0, #0
 1051 00ea 0146     		mov	r1, r0
 1052 00ec FFF7FEFF 		bl	set_motor_speed
 1053              	.LVL119:
 593:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 1054              		.loc 1 593 0
 1055 00f0 0820     		movs	r0, #8
 1056 00f2 0021     		movs	r1, #0
 1057 00f4 FFF7FEFF 		bl	set_motor_speed
 1058              	.LVL120:
 594:Src/main.c    **** }
 1059              		.loc 1 594 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 34


 1060 00f8 0548     		ldr	r0, .L72+8
 1061 00fa FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1062              	.LVL121:
 595:Src/main.c    **** 
 1063              		.loc 1 595 0
 1064 00fe 0EB0     		add	sp, sp, #56
 1065              	.LCFI19:
 1066              		.cfi_def_cfa_offset 16
 1067              		@ sp needed
 1068 0100 70BD     		pop	{r4, r5, r6, pc}
 1069              	.LVL122:
 1070              	.L73:
 1071 0102 00BFAFF3 		.align	3
 1071      0080
 1072              	.L72:
 1073 0108 721CC771 		.word	1908874354
 1074 010c 1CC7E13F 		.word	1071761180
 1075 0110 00000000 		.word	hadc1
 1076 0114 00000000 		.word	dma_buffer
 1077 0118 00004940 		.word	1078525952
 1078 011c 00080040 		.word	1073743872
 1079 0120 8C000000 		.word	.LC8
 1080 0124 00000000 		.word	.LANCHOR1
 1081 0128 000C0040 		.word	1073744896
 1082 012c A8000000 		.word	.LC9
 1083 0130 00000000 		.word	.LANCHOR0
 1084 0134 C4000000 		.word	.LC10
 1085              		.cfi_endproc
 1086              	.LFE130:
 1088              		.section	.text.debounce_and_grab,"ax",%progbits
 1089              		.align	2
 1090              		.global	debounce_and_grab
 1091              		.thumb
 1092              		.thumb_func
 1094              	debounce_and_grab:
 1095              	.LFB137:
 725:Src/main.c    ****     }
 726:Src/main.c    **** }
 727:Src/main.c    **** 
 728:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid)
 729:Src/main.c    **** {
 1096              		.loc 1 729 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 0
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              	.LVL123:
 1101 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1102              	.LCFI20:
 1103              		.cfi_def_cfa_offset 24
 1104              		.cfi_offset 3, -24
 1105              		.cfi_offset 4, -20
 1106              		.cfi_offset 5, -16
 1107              		.cfi_offset 6, -12
 1108              		.cfi_offset 7, -8
 1109              		.cfi_offset 14, -4
 1110 0002 0546     		mov	r5, r0
 730:Src/main.c    ****     uint32_t timeee = HAL_GetTick();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 35


 1111              		.loc 1 730 0
 1112 0004 FFF7FEFF 		bl	HAL_GetTick
 1113              	.LVL124:
 731:Src/main.c    ****     // int count = 0;
 732:Src/main.c    ****     // while (HAL_GetTick() - timeee < 50)
 733:Src/main.c    ****     // {
 734:Src/main.c    ****     //     ++count;
 735:Src/main.c    ****     //     HAL_Delay(5);
 736:Src/main.c    ****     //     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_RESET)
 737:Src/main.c    ****     //     {
 738:Src/main.c    ****     //         print("CLAW_GRAB | Claw debounced. No ewok found\n", 0);
 739:Src/main.c    ****     //         ewok = FALSE;
 740:Src/main.c    ****     //         break;
 741:Src/main.c    ****     //     }
 742:Src/main.c    ****     // }
 743:Src/main.c    ****     // char msg[50] = "";
 744:Src/main.c    ****     // sprintf(msg, "CLAW_GRAB | Debounced with %d checks\n", count);
 745:Src/main.c    ****     // print(msg, 0);
 746:Src/main.c    ****     // If claw is still high, we have an ewok. Stop, grab it, continue on
 747:Src/main.c    ****     // hardcoded procedure
 748:Src/main.c    ****     print("CLAW_GRAB | grabbing ewok\n", 0);
 1114              		.loc 1 748 0
 1115 0008 B348     		ldr	r0, .L104
 1116 000a 0021     		movs	r1, #0
 1117 000c FFF7FEFF 		bl	print
 1118              	.LVL125:
 749:Src/main.c    ****     HAL_Delay(500);
 1119              		.loc 1 749 0
 1120 0010 4FF4FA70 		mov	r0, #500
 1121 0014 FFF7FEFF 		bl	HAL_Delay
 1122              	.LVL126:
 750:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 1123              		.loc 1 750 0
 1124 0018 0020     		movs	r0, #0
 1125 001a 0146     		mov	r1, r0
 1126 001c FFF7FEFF 		bl	set_motor_speed
 1127              	.LVL127:
 751:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1128              		.loc 1 751 0
 1129 0020 0820     		movs	r0, #8
 1130 0022 0021     		movs	r1, #0
 1131 0024 FFF7FEFF 		bl	set_motor_speed
 1132              	.LVL128:
 752:Src/main.c    ****     close_claw(&htim3);
 1133              		.loc 1 752 0
 1134 0028 AC4C     		ldr	r4, .L104+4
 1135 002a 2046     		mov	r0, r4
 1136 002c FFF7FEFF 		bl	close_claw
 1137              	.LVL129:
 753:Src/main.c    ****     arm_up(&htim3);
 1138              		.loc 1 753 0
 1139 0030 2046     		mov	r0, r4
 1140 0032 FFF7FEFF 		bl	arm_up
 1141              	.LVL130:
 754:Src/main.c    ****     // TODO: delete next line, there for testing!!!
 755:Src/main.c    ****     HAL_Delay(100);
 1142              		.loc 1 755 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 36


 1143 0036 6420     		movs	r0, #100
 1144 0038 FFF7FEFF 		bl	HAL_Delay
 1145              	.LVL131:
 756:Src/main.c    ****     ++ewok_cnt;
 1146              		.loc 1 756 0
 1147 003c A84A     		ldr	r2, .L104+8
 1148 003e 1368     		ldr	r3, [r2]
 1149 0040 0133     		adds	r3, r3, #1
 1150 0042 1360     		str	r3, [r2]
 757:Src/main.c    ****     // char msg[18] = "";
 758:Src/main.c    ****     // sprintf(msg, "wok_cnt: %d\n", ewok_cnt);
 759:Src/main.c    ****     // print(msg, 0);
 760:Src/main.c    ****     /*
 761:Src/main.c    ****      * Claw is up and closed
 762:Src/main.c    ****      * Ewok Count incremented
 763:Src/main.c    ****      * Motors not powered
 764:Src/main.c    ****      * CLAW_INT_STATE not FLAGGED, interrupt disabled
 765:Src/main.c    ****      */
 766:Src/main.c    **** 
 767:Src/main.c    ****     // For the first ewok, turn left, arm up, square robot w/ edge,
 768:Src/main.c    ****     // drive straight for 3 s, bring arm down
 769:Src/main.c    ****     if (ewok_cnt == 1)
 1151              		.loc 1 769 0
 1152 0044 012B     		cmp	r3, #1
 1153 0046 4CD1     		bne	.L75
 1154              	.LBB2:
 770:Src/main.c    ****     {
 771:Src/main.c    ****         print("First ewok captured\n", 0);
 1155              		.loc 1 771 0
 1156 0048 A648     		ldr	r0, .L104+12
 1157 004a 0021     		movs	r1, #0
 1158 004c FFF7FEFF 		bl	print
 1159              	.LVL132:
 772:Src/main.c    ****         turn_deg(-170);
 1160              		.loc 1 772 0
 1161 0050 6FF0A900 		mvn	r0, #169
 1162 0054 FFF7FEFF 		bl	turn_deg
 1163              	.LVL133:
 773:Src/main.c    ****         open_claw(&htim3);
 1164              		.loc 1 773 0
 1165 0058 2046     		mov	r0, r4
 1166 005a FFF7FEFF 		bl	open_claw
 1167              	.LVL134:
 774:Src/main.c    ****         LEFT_SPEED+=100;
 1168              		.loc 1 774 0
 1169 005e A24C     		ldr	r4, .L104+16
 1170 0060 2388     		ldrh	r3, [r4]
 1171 0062 6433     		adds	r3, r3, #100
 1172 0064 2380     		strh	r3, [r4]	@ movhi
 775:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED-50);
 1173              		.loc 1 775 0
 1174 0066 A14B     		ldr	r3, .L104+20
 1175 0068 1988     		ldrh	r1, [r3]
 1176 006a 0820     		movs	r0, #8
 1177 006c 3239     		subs	r1, r1, #50
 1178 006e FFF7FEFF 		bl	set_motor_speed
 1179              	.LVL135:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 37


 776:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED-50);
 1180              		.loc 1 776 0
 1181 0072 2188     		ldrh	r1, [r4]
 1182 0074 0020     		movs	r0, #0
 1183 0076 3239     		subs	r1, r1, #50
 1184 0078 FFF7FEFF 		bl	set_motor_speed
 1185              	.LVL136:
 777:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1186              		.loc 1 777 0
 1187 007c FFF7FEFF 		bl	HAL_GetTick
 1188              	.LVL137:
 1189 0080 0446     		mov	r4, r0
 1190              	.LVL138:
 778:Src/main.c    ****         while(HAL_GetTick()-time < 1000){
 1191              		.loc 1 778 0
 1192 0082 02E0     		b	.L76
 1193              	.LVL139:
 1194              	.L77:
 779:Src/main.c    ****             drive_straight(enc_pid);
 1195              		.loc 1 779 0
 1196 0084 2846     		mov	r0, r5
 1197 0086 FFF7FEFF 		bl	drive_straight
 1198              	.LVL140:
 1199              	.L76:
 778:Src/main.c    ****         while(HAL_GetTick()-time < 1000){
 1200              		.loc 1 778 0
 1201 008a FFF7FEFF 		bl	HAL_GetTick
 1202              	.LVL141:
 1203 008e 001B     		subs	r0, r0, r4
 1204 0090 B0F57A7F 		cmp	r0, #1000
 1205 0094 F6D3     		bcc	.L77
 780:Src/main.c    ****         }
 781:Src/main.c    ****         square_edge(enc_pid);
 1206              		.loc 1 781 0
 1207 0096 2846     		mov	r0, r5
 1208 0098 FFF7FEFF 		bl	square_edge
 1209              	.LVL142:
 782:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1210              		.loc 1 782 0
 1211 009c 0820     		movs	r0, #8
 1212 009e 934B     		ldr	r3, .L104+20
 1213 00a0 1988     		ldrh	r1, [r3]
 1214 00a2 FFF7FEFF 		bl	set_motor_speed
 1215              	.LVL143:
 783:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1216              		.loc 1 783 0
 1217 00a6 0020     		movs	r0, #0
 1218 00a8 8F4B     		ldr	r3, .L104+16
 1219 00aa 1988     		ldrh	r1, [r3]
 1220 00ac FFF7FEFF 		bl	set_motor_speed
 1221              	.LVL144:
 784:Src/main.c    ****         time = HAL_GetTick();
 1222              		.loc 1 784 0
 1223 00b0 FFF7FEFF 		bl	HAL_GetTick
 1224              	.LVL145:
 1225 00b4 0446     		mov	r4, r0
 1226              	.LVL146:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 38


 785:Src/main.c    ****         while(HAL_GetTick()-time < 2500){
 1227              		.loc 1 785 0
 1228 00b6 02E0     		b	.L78
 1229              	.LVL147:
 1230              	.L79:
 786:Src/main.c    ****             drive_straight(enc_pid);
 1231              		.loc 1 786 0
 1232 00b8 2846     		mov	r0, r5
 1233 00ba FFF7FEFF 		bl	drive_straight
 1234              	.LVL148:
 1235              	.L78:
 785:Src/main.c    ****         while(HAL_GetTick()-time < 2500){
 1236              		.loc 1 785 0
 1237 00be FFF7FEFF 		bl	HAL_GetTick
 1238              	.LVL149:
 1239 00c2 001B     		subs	r0, r0, r4
 1240 00c4 40F6C313 		movw	r3, #2499
 1241 00c8 9842     		cmp	r0, r3
 1242 00ca F5D9     		bls	.L79
 787:Src/main.c    ****         }
 788:Src/main.c    ****         arm_down(&htim3);
 1243              		.loc 1 788 0
 1244 00cc 8348     		ldr	r0, .L104+4
 1245 00ce FFF7FEFF 		bl	arm_down
 1246              	.LVL150:
 789:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1247              		.loc 1 789 0
 1248 00d2 0820     		movs	r0, #8
 1249 00d4 0021     		movs	r1, #0
 1250 00d6 FFF7FEFF 		bl	set_motor_speed
 1251              	.LVL151:
 790:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1252              		.loc 1 790 0
 1253 00da 0020     		movs	r0, #0
 1254 00dc 0146     		mov	r1, r0
 1255 00de FFF7FEFF 		bl	set_motor_speed
 1256              	.LVL152:
 1257              	.L75:
 1258              	.LBE2:
 791:Src/main.c    ****         // square_edge(&enc_pid);
 792:Src/main.c    ****         //        drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 10000);
 793:Src/main.c    ****     }
 794:Src/main.c    **** 
 795:Src/main.c    ****     if (ewok_cnt == 2)
 1259              		.loc 1 795 0
 1260 00e2 7F4B     		ldr	r3, .L104+8
 1261 00e4 1B68     		ldr	r3, [r3]
 1262 00e6 022B     		cmp	r3, #2
 1263 00e8 44D1     		bne	.L80
 1264              	.LBB3:
 796:Src/main.c    ****     {
 797:Src/main.c    ****         print("Second ewok captured\n",0);
 1265              		.loc 1 797 0
 1266 00ea 8148     		ldr	r0, .L104+24
 1267 00ec 0021     		movs	r1, #0
 1268 00ee FFF7FEFF 		bl	print
 1269              	.LVL153:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 39


 798:Src/main.c    ****         if(ewok_cnt==2 && searches == 3){
 1270              		.loc 1 798 0
 1271 00f2 7B4B     		ldr	r3, .L104+8
 1272 00f4 1B68     		ldr	r3, [r3]
 1273 00f6 022B     		cmp	r3, #2
 1274 00f8 08D1     		bne	.L81
 1275              		.loc 1 798 0 is_stmt 0 discriminator 1
 1276 00fa 7E4B     		ldr	r3, .L104+28
 1277 00fc 1B68     		ldr	r3, [r3]
 1278 00fe 032B     		cmp	r3, #3
 1279 0100 04D1     		bne	.L81
 799:Src/main.c    ****         turn_deg(-200); //  Prolly have to change this
 1280              		.loc 1 799 0 is_stmt 1
 1281 0102 6FF0C700 		mvn	r0, #199
 1282 0106 FFF7FEFF 		bl	turn_deg
 1283              	.LVL154:
 1284 010a 03E0     		b	.L82
 1285              	.L81:
 800:Src/main.c    ****         }else{
 801:Src/main.c    ****         turn_deg(-180); //  Prolly have to change this
 1286              		.loc 1 801 0
 1287 010c 6FF0B300 		mvn	r0, #179
 1288 0110 FFF7FEFF 		bl	turn_deg
 1289              	.LVL155:
 1290              	.L82:
 802:Src/main.c    ****         }
 803:Src/main.c    ****         HAL_Delay(10);
 1291              		.loc 1 803 0
 1292 0114 0A20     		movs	r0, #10
 1293 0116 FFF7FEFF 		bl	HAL_Delay
 1294              	.LVL156:
 804:Src/main.c    ****         alarm_detect();
 1295              		.loc 1 804 0
 1296 011a FFF7FEFF 		bl	alarm_detect
 1297              	.LVL157:
 805:Src/main.c    ****         HAL_Delay(10);
 1298              		.loc 1 805 0
 1299 011e 0A20     		movs	r0, #10
 1300 0120 FFF7FEFF 		bl	HAL_Delay
 1301              	.LVL158:
 806:Src/main.c    ****         open_claw(&htim3);
 1302              		.loc 1 806 0
 1303 0124 6D48     		ldr	r0, .L104+4
 1304 0126 FFF7FEFF 		bl	open_claw
 1305              	.LVL159:
 807:Src/main.c    ****         HAL_Delay(10);
 1306              		.loc 1 807 0
 1307 012a 0A20     		movs	r0, #10
 1308 012c FFF7FEFF 		bl	HAL_Delay
 1309              	.LVL160:
 808:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1310              		.loc 1 808 0
 1311 0130 FFF7FEFF 		bl	HAL_GetTick
 1312              	.LVL161:
 1313 0134 0446     		mov	r4, r0
 1314              	.LVL162:
 809:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 40


 1315              		.loc 1 809 0
 1316 0136 0820     		movs	r0, #8
 1317              	.LVL163:
 1318 0138 6C4B     		ldr	r3, .L104+20
 1319 013a 1988     		ldrh	r1, [r3]
 1320 013c FFF7FEFF 		bl	set_motor_speed
 1321              	.LVL164:
 810:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1322              		.loc 1 810 0
 1323 0140 0020     		movs	r0, #0
 1324 0142 694B     		ldr	r3, .L104+16
 1325 0144 1988     		ldrh	r1, [r3]
 1326 0146 FFF7FEFF 		bl	set_motor_speed
 1327              	.LVL165:
 811:Src/main.c    ****         while(HAL_GetTick()-time < 8000){
 1328              		.loc 1 811 0
 1329 014a 02E0     		b	.L83
 1330              	.L84:
 812:Src/main.c    ****             drive_straight(enc_pid);
 1331              		.loc 1 812 0
 1332 014c 2846     		mov	r0, r5
 1333 014e FFF7FEFF 		bl	drive_straight
 1334              	.LVL166:
 1335              	.L83:
 811:Src/main.c    ****         while(HAL_GetTick()-time < 8000){
 1336              		.loc 1 811 0
 1337 0152 FFF7FEFF 		bl	HAL_GetTick
 1338              	.LVL167:
 1339 0156 001B     		subs	r0, r0, r4
 1340 0158 B0F5FA5F 		cmp	r0, #8000
 1341 015c F6D3     		bcc	.L84
 813:Src/main.c    ****         }
 814:Src/main.c    ****         arm_down(&htim3);
 1342              		.loc 1 814 0
 1343 015e 5F48     		ldr	r0, .L104+4
 1344 0160 FFF7FEFF 		bl	arm_down
 1345              	.LVL168:
 815:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1346              		.loc 1 815 0
 1347 0164 0820     		movs	r0, #8
 1348 0166 0021     		movs	r1, #0
 1349 0168 FFF7FEFF 		bl	set_motor_speed
 1350              	.LVL169:
 816:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1351              		.loc 1 816 0
 1352 016c 0020     		movs	r0, #0
 1353 016e 0146     		mov	r1, r0
 1354 0170 FFF7FEFF 		bl	set_motor_speed
 1355              	.LVL170:
 1356              	.L80:
 1357              	.LBE3:
 817:Src/main.c    ****         /*
 818:Src/main.c    ****            timeee = HAL_GetTick();
 819:Src/main.c    ****            while (HAL_GetTick() - timeee < 7000)
 820:Src/main.c    ****            {
 821:Src/main.c    ****            if (TAPE_LEFT_STATE == FLAGGED && TAPE_RIGHT_STATE != FLAGGED)
 822:Src/main.c    ****            {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 41


 823:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 824:Src/main.c    ****         // Tape detects object when high
 825:Src/main.c    ****         while (HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) == GPIO_PIN_SET);
 826:Src/main.c    ****         HAL_Delay(100);
 827:Src/main.c    ****         TAPE_LEFT_STATE = NOT_FLAGGED;
 828:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 829:Src/main.c    ****         }
 830:Src/main.c    ****         else if (TAPE_RIGHT_STATE == FLAGGED && TAPE_LEFT_STATE != FLAGGED)
 831:Src/main.c    ****         {
 832:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 833:Src/main.c    ****         while (HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) == GPIO_PIN_SET);
 834:Src/main.c    ****         HAL_Delay(100);
 835:Src/main.c    ****         TAPE_RIGHT_STATE = NOT_FLAGGED;
 836:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 837:Src/main.c    ****         }
 838:Src/main.c    ****         }
 839:Src/main.c    ****         */
 840:Src/main.c    ****     }
 841:Src/main.c    **** 
 842:Src/main.c    ****     if (ewok_cnt == 3)
 1358              		.loc 1 842 0
 1359 0174 5A4B     		ldr	r3, .L104+8
 1360 0176 1B68     		ldr	r3, [r3]
 1361 0178 032B     		cmp	r3, #3
 1362 017a 56D1     		bne	.L85
 1363              	.LBB4:
 843:Src/main.c    ****     {
 844:Src/main.c    ****         print("Third ewok captured\n", 0);
 1364              		.loc 1 844 0
 1365 017c 5E48     		ldr	r0, .L104+32
 1366 017e 0021     		movs	r1, #0
 1367 0180 FFF7FEFF 		bl	print
 1368              	.LVL171:
 845:Src/main.c    ****         turn_deg(170);
 1369              		.loc 1 845 0
 1370 0184 AA20     		movs	r0, #170
 1371 0186 FFF7FEFF 		bl	turn_deg
 1372              	.LVL172:
 846:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1373              		.loc 1 846 0
 1374 018a 584F     		ldr	r7, .L104+20
 1375 018c 0820     		movs	r0, #8
 1376 018e 3988     		ldrh	r1, [r7]
 1377 0190 FFF7FEFF 		bl	set_motor_speed
 1378              	.LVL173:
 847:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1379              		.loc 1 847 0
 1380 0194 544E     		ldr	r6, .L104+16
 1381 0196 0020     		movs	r0, #0
 1382 0198 3188     		ldrh	r1, [r6]
 1383 019a FFF7FEFF 		bl	set_motor_speed
 1384              	.LVL174:
 848:Src/main.c    ****         square_edge(enc_pid);
 1385              		.loc 1 848 0
 1386 019e 2846     		mov	r0, r5
 1387 01a0 FFF7FEFF 		bl	square_edge
 1388              	.LVL175:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 42


 849:Src/main.c    ****         open_claw(&htim3);
 1389              		.loc 1 849 0
 1390 01a4 4D48     		ldr	r0, .L104+4
 1391 01a6 FFF7FEFF 		bl	open_claw
 1392              	.LVL176:
 850:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1393              		.loc 1 850 0
 1394 01aa FFF7FEFF 		bl	HAL_GetTick
 1395              	.LVL177:
 1396 01ae 0446     		mov	r4, r0
 1397              	.LVL178:
 851:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1398              		.loc 1 851 0
 1399 01b0 0820     		movs	r0, #8
 1400              	.LVL179:
 1401 01b2 3988     		ldrh	r1, [r7]
 1402 01b4 FFF7FEFF 		bl	set_motor_speed
 1403              	.LVL180:
 852:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1404              		.loc 1 852 0
 1405 01b8 0020     		movs	r0, #0
 1406 01ba 3188     		ldrh	r1, [r6]
 1407 01bc FFF7FEFF 		bl	set_motor_speed
 1408              	.LVL181:
 853:Src/main.c    ****         while(HAL_GetTick()-time < 2000){
 1409              		.loc 1 853 0
 1410 01c0 02E0     		b	.L86
 1411              	.L87:
 854:Src/main.c    ****             drive_straight(enc_pid);
 1412              		.loc 1 854 0
 1413 01c2 2846     		mov	r0, r5
 1414 01c4 FFF7FEFF 		bl	drive_straight
 1415              	.LVL182:
 1416              	.L86:
 853:Src/main.c    ****         while(HAL_GetTick()-time < 2000){
 1417              		.loc 1 853 0
 1418 01c8 FFF7FEFF 		bl	HAL_GetTick
 1419              	.LVL183:
 1420 01cc 001B     		subs	r0, r0, r4
 1421 01ce B0F5FA6F 		cmp	r0, #2000
 1422 01d2 F6D3     		bcc	.L87
 855:Src/main.c    ****         }
 856:Src/main.c    ****         arm_down(&htim3);
 1423              		.loc 1 856 0
 1424 01d4 4148     		ldr	r0, .L104+4
 1425 01d6 FFF7FEFF 		bl	arm_down
 1426              	.LVL184:
 857:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1427              		.loc 1 857 0
 1428 01da 0820     		movs	r0, #8
 1429 01dc 0021     		movs	r1, #0
 1430 01de FFF7FEFF 		bl	set_motor_speed
 1431              	.LVL185:
 858:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1432              		.loc 1 858 0
 1433 01e2 0020     		movs	r0, #0
 1434 01e4 0146     		mov	r1, r0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 43


 1435 01e6 FFF7FEFF 		bl	set_motor_speed
 1436              	.LVL186:
 859:Src/main.c    ****         uint8_t deg = 0;
 1437              		.loc 1 859 0
 1438 01ea 0026     		movs	r6, #0
 860:Src/main.c    ****         while(PI_INT_STATE != FLAGGED){
 1439              		.loc 1 860 0
 1440 01ec 19E0     		b	.L88
 1441              	.LVL187:
 1442              	.L92:
 861:Src/main.c    ****             if(deg>6){
 1443              		.loc 1 861 0
 1444 01ee 062E     		cmp	r6, #6
 1445 01f0 03D9     		bls	.L89
 862:Src/main.c    ****                 turn_deg(15);
 1446              		.loc 1 862 0
 1447 01f2 0F20     		movs	r0, #15
 1448 01f4 FFF7FEFF 		bl	turn_deg
 1449              	.LVL188:
 1450 01f8 03E0     		b	.L90
 1451              	.L89:
 863:Src/main.c    ****             }else{
 864:Src/main.c    ****                 turn_deg(-20);
 1452              		.loc 1 864 0
 1453 01fa 6FF01300 		mvn	r0, #19
 1454 01fe FFF7FEFF 		bl	turn_deg
 1455              	.LVL189:
 1456              	.L90:
 865:Src/main.c    ****             }
 866:Src/main.c    ****             ++deg;
 1457              		.loc 1 866 0
 1458 0202 0136     		adds	r6, r6, #1
 1459              	.LVL190:
 1460 0204 F6B2     		uxtb	r6, r6
 1461              	.LVL191:
 867:Src/main.c    ****             time = HAL_GetTick();
 1462              		.loc 1 867 0
 1463 0206 FFF7FEFF 		bl	HAL_GetTick
 1464              	.LVL192:
 1465 020a 0446     		mov	r4, r0
 1466              	.LVL193:
 1467              	.L91:
 868:Src/main.c    ****             while(HAL_GetTick()-time<3000 && PI_INT_STATE == NOT_FLAGGED);
 1468              		.loc 1 868 0 discriminator 2
 1469 020c FFF7FEFF 		bl	HAL_GetTick
 1470              	.LVL194:
 1471 0210 001B     		subs	r0, r0, r4
 1472 0212 40F6B733 		movw	r3, #2999
 1473 0216 9842     		cmp	r0, r3
 1474 0218 03D8     		bhi	.L88
 1475              		.loc 1 868 0 is_stmt 0 discriminator 1
 1476 021a 384B     		ldr	r3, .L104+36
 1477 021c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1478 021e 002B     		cmp	r3, #0
 1479 0220 F4D0     		beq	.L91
 1480              	.LVL195:
 1481              	.L88:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 44


 860:Src/main.c    ****             if(deg>6){
 1482              		.loc 1 860 0 is_stmt 1
 1483 0222 364B     		ldr	r3, .L104+36
 1484 0224 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1485 0226 012B     		cmp	r3, #1
 1486 0228 E1D1     		bne	.L92
 1487              	.LVL196:
 1488              	.L85:
 1489              	.LBE4:
 869:Src/main.c    ****         }
 870:Src/main.c    ****     }
 871:Src/main.c    **** 
 872:Src/main.c    ****     if (ewok_cnt == 4)
 1490              		.loc 1 872 0
 1491 022a 2D4B     		ldr	r3, .L104+8
 1492 022c 1B68     		ldr	r3, [r3]
 1493 022e 042B     		cmp	r3, #4
 1494 0230 40F08280 		bne	.L93
 873:Src/main.c    ****     {
 874:Src/main.c    ****         print("Fourth ewok captured\n", 0);
 1495              		.loc 1 874 0
 1496 0234 3248     		ldr	r0, .L104+40
 1497 0236 0021     		movs	r1, #0
 1498 0238 FFF7FEFF 		bl	print
 1499              	.LVL197:
 875:Src/main.c    ****         turn_deg(180);
 1500              		.loc 1 875 0
 1501 023c B420     		movs	r0, #180
 1502 023e FFF7FEFF 		bl	turn_deg
 1503              	.LVL198:
 876:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1504              		.loc 1 876 0
 1505 0242 0820     		movs	r0, #8
 1506 0244 294B     		ldr	r3, .L104+20
 1507 0246 1988     		ldrh	r1, [r3]
 1508 0248 FFF7FEFF 		bl	set_motor_speed
 1509              	.LVL199:
 877:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1510              		.loc 1 877 0
 1511 024c 264C     		ldr	r4, .L104+16
 1512 024e 0020     		movs	r0, #0
 1513 0250 2188     		ldrh	r1, [r4]
 1514 0252 FFF7FEFF 		bl	set_motor_speed
 1515              	.LVL200:
 878:Src/main.c    ****         open_claw(&htim3);
 1516              		.loc 1 878 0
 1517 0256 2148     		ldr	r0, .L104+4
 1518 0258 FFF7FEFF 		bl	open_claw
 1519              	.LVL201:
 879:Src/main.c    ****         LEFT_SPEED -= 100;
 1520              		.loc 1 879 0
 1521 025c 2388     		ldrh	r3, [r4]
 1522 025e 643B     		subs	r3, r3, #100
 1523 0260 2380     		strh	r3, [r4]	@ movhi
 880:Src/main.c    ****         timeee = HAL_GetTick();
 1524              		.loc 1 880 0
 1525 0262 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 45


 1526              	.LVL202:
 1527 0266 0446     		mov	r4, r0
 1528              	.LVL203:
 881:Src/main.c    ****         while (HAL_GetTick() - timeee < 8000)
 1529              		.loc 1 881 0
 1530 0268 5DE0     		b	.L94
 1531              	.LVL204:
 1532              	.L99:
 882:Src/main.c    ****         {
 883:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_
 1533              		.loc 1 883 0
 1534 026a 2648     		ldr	r0, .L104+44
 1535 026c 0421     		movs	r1, #4
 1536 026e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1537              	.LVL205:
 1538 0272 68B9     		cbnz	r0, .L95
 1539              		.loc 1 883 0 is_stmt 0 discriminator 1
 1540 0274 00F18040 		add	r0, r0, #1073741824
 1541 0278 00F50230 		add	r0, r0, #133120
 1542 027c 0821     		movs	r1, #8
 1543 027e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1544              	.LVL206:
 1545 0282 0128     		cmp	r0, #1
 1546 0284 04D1     		bne	.L95
 884:Src/main.c    ****             {
 885:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 1547              		.loc 1 885 0 is_stmt 1
 1548 0286 0820     		movs	r0, #8
 1549 0288 0021     		movs	r1, #0
 1550 028a FFF7FEFF 		bl	set_motor_speed
 1551              	.LVL207:
 1552 028e 47E0     		b	.L96
 1553              	.L95:
 886:Src/main.c    ****             }else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_SET && HAL_G
 1554              		.loc 1 886 0
 1555 0290 1C48     		ldr	r0, .L104+44
 1556 0292 0421     		movs	r1, #4
 1557 0294 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1558              	.LVL208:
 1559 0298 0128     		cmp	r0, #1
 1560 029a 08D1     		bne	.L97
 1561              		.loc 1 886 0 is_stmt 0 discriminator 1
 1562 029c 1A48     		ldr	r0, .L104+48
 1563 029e 0821     		movs	r1, #8
 1564 02a0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1565              	.LVL209:
 1566 02a4 18B9     		cbnz	r0, .L97
 887:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 1567              		.loc 1 887 0 is_stmt 1
 1568 02a6 0146     		mov	r1, r0
 1569 02a8 FFF7FEFF 		bl	set_motor_speed
 1570              	.LVL210:
 1571 02ac 38E0     		b	.L96
 1572              	.L97:
 888:Src/main.c    ****             }else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL
 1573              		.loc 1 888 0
 1574 02ae 1548     		ldr	r0, .L104+44
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 46


 1575 02b0 0421     		movs	r1, #4
 1576 02b2 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1577              	.LVL211:
 1578 02b6 48BB     		cbnz	r0, .L98
 1579              		.loc 1 888 0 is_stmt 0 discriminator 1
 1580 02b8 00F18040 		add	r0, r0, #1073741824
 1581 02bc 00F50230 		add	r0, r0, #133120
 1582 02c0 0821     		movs	r1, #8
 1583 02c2 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1584              	.LVL212:
 1585 02c6 08BB     		cbnz	r0, .L98
 889:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 1586              		.loc 1 889 0 is_stmt 1
 1587 02c8 0146     		mov	r1, r0
 1588 02ca FFF7FEFF 		bl	set_motor_speed
 1589              	.LVL213:
 890:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 1590              		.loc 1 890 0
 1591 02ce 0820     		movs	r0, #8
 1592 02d0 0021     		movs	r1, #0
 1593 02d2 FFF7FEFF 		bl	set_motor_speed
 1594              	.LVL214:
 1595 02d6 23E0     		b	.L96
 1596              	.L105:
 1597              		.align	2
 1598              	.L104:
 1599 02d8 E0000000 		.word	.LC11
 1600 02dc 00000000 		.word	htim3
 1601 02e0 00000000 		.word	.LANCHOR2
 1602 02e4 FC000000 		.word	.LC12
 1603 02e8 00000000 		.word	.LANCHOR1
 1604 02ec 00000000 		.word	.LANCHOR0
 1605 02f0 14010000 		.word	.LC13
 1606 02f4 00000000 		.word	.LANCHOR3
 1607 02f8 2C010000 		.word	.LC14
 1608 02fc 00000000 		.word	PI_INT_STATE
 1609 0300 44010000 		.word	.LC15
 1610 0304 000C0240 		.word	1073875968
 1611 0308 00080240 		.word	1073874944
 1612              	.L98:
 891:Src/main.c    ****             }else{
 892:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1613              		.loc 1 892 0
 1614 030c 0820     		movs	r0, #8
 1615 030e 2B4B     		ldr	r3, .L106
 1616 0310 1988     		ldrh	r1, [r3]
 1617 0312 FFF7FEFF 		bl	set_motor_speed
 1618              	.LVL215:
 893:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1619              		.loc 1 893 0
 1620 0316 0020     		movs	r0, #0
 1621 0318 294B     		ldr	r3, .L106+4
 1622 031a 1988     		ldrh	r1, [r3]
 1623 031c FFF7FEFF 		bl	set_motor_speed
 1624              	.LVL216:
 1625              	.L96:
 894:Src/main.c    ****             }
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 47


 895:Src/main.c    ****             drive_straight(enc_pid);
 1626              		.loc 1 895 0
 1627 0320 2846     		mov	r0, r5
 1628 0322 FFF7FEFF 		bl	drive_straight
 1629              	.LVL217:
 1630              	.L94:
 881:Src/main.c    ****         {
 1631              		.loc 1 881 0
 1632 0326 FFF7FEFF 		bl	HAL_GetTick
 1633              	.LVL218:
 1634 032a 001B     		subs	r0, r0, r4
 1635 032c B0F5FA5F 		cmp	r0, #8000
 1636 0330 9BD3     		bcc	.L99
 896:Src/main.c    ****         }
 897:Src/main.c    ****         arm_down(&htim3);
 1637              		.loc 1 897 0
 1638 0332 2448     		ldr	r0, .L106+8
 1639 0334 FFF7FEFF 		bl	arm_down
 1640              	.LVL219:
 1641              	.L93:
 898:Src/main.c    ****     }
 899:Src/main.c    **** 
 900:Src/main.c    ****     if (ewok_cnt == 5)
 1642              		.loc 1 900 0
 1643 0338 234B     		ldr	r3, .L106+12
 1644 033a 1B68     		ldr	r3, [r3]
 1645 033c 052B     		cmp	r3, #5
 1646 033e 35D1     		bne	.L100
 1647              	.LBB5:
 901:Src/main.c    ****     {
 902:Src/main.c    ****         print("Chewie captured\n", 0);
 1648              		.loc 1 902 0
 1649 0340 2248     		ldr	r0, .L106+16
 1650 0342 0021     		movs	r1, #0
 1651 0344 FFF7FEFF 		bl	print
 1652              	.LVL220:
 903:Src/main.c    ****         turn_deg(50);
 1653              		.loc 1 903 0
 1654 0348 3220     		movs	r0, #50
 1655 034a FFF7FEFF 		bl	turn_deg
 1656              	.LVL221:
 904:Src/main.c    ****         open_claw(&htim3);
 1657              		.loc 1 904 0
 1658 034e 1D4C     		ldr	r4, .L106+8
 1659 0350 2046     		mov	r0, r4
 1660 0352 FFF7FEFF 		bl	open_claw
 1661              	.LVL222:
 905:Src/main.c    ****         HAL_Delay(750);
 1662              		.loc 1 905 0
 1663 0356 40F2EE20 		movw	r0, #750
 1664 035a FFF7FEFF 		bl	HAL_Delay
 1665              	.LVL223:
 906:Src/main.c    ****         arm_down(&htim3);
 1666              		.loc 1 906 0
 1667 035e 2046     		mov	r0, r4
 1668 0360 FFF7FEFF 		bl	arm_down
 1669              	.LVL224:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 48


 907:Src/main.c    ****         slow_actuate(&htim3, BASKET_CH, 10, 180);
 1670              		.loc 1 907 0
 1671 0364 2046     		mov	r0, r4
 1672 0366 0821     		movs	r1, #8
 1673 0368 0A22     		movs	r2, #10
 1674 036a B423     		movs	r3, #180
 1675 036c FFF7FEFF 		bl	slow_actuate
 1676              	.LVL225:
 908:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1677              		.loc 1 908 0
 1678 0370 FFF7FEFF 		bl	HAL_GetTick
 1679              	.LVL226:
 1680 0374 0446     		mov	r4, r0
 1681              	.LVL227:
 909:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1682              		.loc 1 909 0
 1683 0376 0820     		movs	r0, #8
 1684              	.LVL228:
 1685 0378 104B     		ldr	r3, .L106
 1686 037a 1988     		ldrh	r1, [r3]
 1687 037c FFF7FEFF 		bl	set_motor_speed
 1688              	.LVL229:
 910:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1689              		.loc 1 910 0
 1690 0380 0020     		movs	r0, #0
 1691 0382 0F4B     		ldr	r3, .L106+4
 1692 0384 1988     		ldrh	r1, [r3]
 1693 0386 FFF7FEFF 		bl	set_motor_speed
 1694              	.LVL230:
 911:Src/main.c    ****         while(HAL_GetTick()-time < 5000){
 1695              		.loc 1 911 0
 1696 038a 02E0     		b	.L101
 1697              	.L102:
 912:Src/main.c    ****             drive_straight(enc_pid);
 1698              		.loc 1 912 0
 1699 038c 2846     		mov	r0, r5
 1700 038e FFF7FEFF 		bl	drive_straight
 1701              	.LVL231:
 1702              	.L101:
 911:Src/main.c    ****         while(HAL_GetTick()-time < 5000){
 1703              		.loc 1 911 0
 1704 0392 FFF7FEFF 		bl	HAL_GetTick
 1705              	.LVL232:
 1706 0396 001B     		subs	r0, r0, r4
 1707 0398 41F28733 		movw	r3, #4999
 1708 039c 9842     		cmp	r0, r3
 1709 039e F5D9     		bls	.L102
 913:Src/main.c    ****         }
 914:Src/main.c    ****         slow_actuate(&htim3, BASKET_CH, 180, 20);
 1710              		.loc 1 914 0
 1711 03a0 0848     		ldr	r0, .L106+8
 1712 03a2 0821     		movs	r1, #8
 1713 03a4 B422     		movs	r2, #180
 1714 03a6 1423     		movs	r3, #20
 1715 03a8 FFF7FEFF 		bl	slow_actuate
 1716              	.LVL233:
 1717              	.L100:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 49


 1718              	.LBE5:
 915:Src/main.c    ****     }
 916:Src/main.c    ****     searches = 0;
 1719              		.loc 1 916 0
 1720 03ac 0023     		movs	r3, #0
 1721 03ae 084A     		ldr	r2, .L106+20
 1722 03b0 1360     		str	r3, [r2]
 917:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 1723              		.loc 1 917 0
 1724 03b2 084A     		ldr	r2, .L106+24
 1725 03b4 1370     		strb	r3, [r2]
 918:Src/main.c    ****     return TRUE;
 919:Src/main.c    **** }
 1726              		.loc 1 919 0
 1727 03b6 0120     		movs	r0, #1
 1728 03b8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1729              	.LVL234:
 1730              	.L107:
 1731 03ba 00BF     		.align	2
 1732              	.L106:
 1733 03bc 00000000 		.word	.LANCHOR0
 1734 03c0 00000000 		.word	.LANCHOR1
 1735 03c4 00000000 		.word	htim3
 1736 03c8 00000000 		.word	.LANCHOR2
 1737 03cc 5C010000 		.word	.LC16
 1738 03d0 00000000 		.word	.LANCHOR3
 1739 03d4 00000000 		.word	CLAW_INT_STATE
 1740              		.cfi_endproc
 1741              	.LFE137:
 1743              		.section	.text.drive_straight_time,"ax",%progbits
 1744              		.align	2
 1745              		.global	drive_straight_time
 1746              		.thumb
 1747              		.thumb_func
 1749              	drive_straight_time:
 1750              	.LFB127:
 449:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 1751              		.loc 1 449 0
 1752              		.cfi_startproc
 1753              		@ args = 0, pretend = 0, frame = 0
 1754              		@ frame_needed = 0, uses_anonymous_args = 0
 1755              	.LVL235:
 1756 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1757              	.LCFI21:
 1758              		.cfi_def_cfa_offset 24
 1759              		.cfi_offset 4, -24
 1760              		.cfi_offset 5, -20
 1761              		.cfi_offset 6, -16
 1762              		.cfi_offset 7, -12
 1763              		.cfi_offset 8, -8
 1764              		.cfi_offset 14, -4
 1765 0004 0646     		mov	r6, r0
 1766 0006 8846     		mov	r8, r1
 1767 0008 1746     		mov	r7, r2
 1768 000a 1D46     		mov	r5, r3
 450:Src/main.c    ****     char msg[50] = "";
 1769              		.loc 1 450 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 50


 1770 000c FFF7FEFF 		bl	HAL_GetTick
 1771              	.LVL236:
 1772 0010 0446     		mov	r4, r0
 1773              	.LVL237:
 453:Src/main.c    ****     {
 1774              		.loc 1 453 0
 1775 0012 19E0     		b	.L109
 1776              	.LVL238:
 1777              	.L113:
 455:Src/main.c    ****         {
 1778              		.loc 1 455 0
 1779 0014 1448     		ldr	r0, .L115
 1780 0016 1021     		movs	r1, #16
 1781 0018 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1782              	.LVL239:
 1783 001c 0128     		cmp	r0, #1
 1784 001e 08D1     		bne	.L110
 457:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 1785              		.loc 1 457 0
 1786 0020 1248     		ldr	r0, .L115+4
 1787 0022 0021     		movs	r1, #0
 1788 0024 FFF7FEFF 		bl	print
 1789              	.LVL240:
 458:Src/main.c    ****         }
 1790              		.loc 1 458 0
 1791 0028 3046     		mov	r0, r6
 1792 002a FFF7FEFF 		bl	debounce_and_grab
 1793              	.LVL241:
 1794 002e 58B1     		cbz	r0, .L109
 1795 0030 0FE0     		b	.L111
 1796              	.L110:
 477:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 1797              		.loc 1 477 0
 1798 0032 0020     		movs	r0, #0
 1799 0034 4146     		mov	r1, r8
 1800 0036 FFF7FEFF 		bl	set_motor_speed
 1801              	.LVL242:
 478:Src/main.c    ****             drive_straight(enc_pid);
 1802              		.loc 1 478 0
 1803 003a 0820     		movs	r0, #8
 1804 003c 3946     		mov	r1, r7
 1805 003e FFF7FEFF 		bl	set_motor_speed
 1806              	.LVL243:
 479:Src/main.c    **** 
 1807              		.loc 1 479 0
 1808 0042 3046     		mov	r0, r6
 1809 0044 FFF7FEFF 		bl	drive_straight
 1810              	.LVL244:
 1811              	.L109:
 453:Src/main.c    ****     {
 1812              		.loc 1 453 0
 1813 0048 FFF7FEFF 		bl	HAL_GetTick
 1814              	.LVL245:
 1815 004c 001B     		subs	r0, r0, r4
 1816 004e A842     		cmp	r0, r5
 1817 0050 E0D3     		bcc	.L113
 1818              	.L111:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 51


 483:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1819              		.loc 1 483 0
 1820 0052 0020     		movs	r0, #0
 1821 0054 0146     		mov	r1, r0
 1822 0056 FFF7FEFF 		bl	set_motor_speed
 1823              	.LVL246:
 484:Src/main.c    **** }
 1824              		.loc 1 484 0
 1825 005a 0820     		movs	r0, #8
 1826 005c 0021     		movs	r1, #0
 1827 005e FFF7FEFF 		bl	set_motor_speed
 1828              	.LVL247:
 1829 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1830              	.LVL248:
 1831              	.L116:
 1832 0066 00BF     		.align	2
 1833              	.L115:
 1834 0068 00040240 		.word	1073873920
 1835 006c 70010000 		.word	.LC17
 1836              		.cfi_endproc
 1837              	.LFE127:
 1839              		.section	.text.test_PWM_htim1,"ax",%progbits
 1840              		.align	2
 1841              		.global	test_PWM_htim1
 1842              		.thumb
 1843              		.thumb_func
 1845              	test_PWM_htim1:
 1846              	.LFB138:
 920:Src/main.c    **** 
 921:Src/main.c    **** // ******
 922:Src/main.c    **** // TESTS
 923:Src/main.c    **** // ******
 924:Src/main.c    **** 
 925:Src/main.c    **** /*
 926:Src/main.c    ****  * Instructions:
 927:Src/main.c    ****  *      Run test_All() before the main while loop
 928:Src/main.c    ****  *      - Put a pull up resistor on htim3 PWM waves, measure voltage on pin
 929:Src/main.c    ****  *      - Measure voltage on pin of htim1
 930:Src/main.c    ****  *      - Give ADC pins values and read off of screen
 931:Src/main.c    ****  */
 932:Src/main.c    **** 
 933:Src/main.c    **** /*
 934:Src/main.c    ****  * Test PWM
 935:Src/main.c    ****  * Output: htim1 channel 1 through 4, PWM wave. Confirm these
 936:Src/main.c    ****  *         PWM waves via an oscilliscope.
 937:Src/main.c    ****  */
 938:Src/main.c    **** void test_PWM_htim1()
 939:Src/main.c    **** {
 1847              		.loc 1 939 0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851 0000 10B5     		push	{r4, lr}
 1852              	.LCFI22:
 1853              		.cfi_def_cfa_offset 8
 1854              		.cfi_offset 4, -8
 1855              		.cfi_offset 14, -4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 52


 940:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1856              		.loc 1 940 0
 1857 0002 0C4C     		ldr	r4, .L121
 1858 0004 2046     		mov	r0, r4
 1859 0006 0021     		movs	r1, #0
 1860 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1861              	.LVL249:
 941:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 942:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1862              		.loc 1 942 0
 1863 000c 2046     		mov	r0, r4
 1864 000e 0821     		movs	r1, #8
 1865 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1866              	.LVL250:
 943:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 944:Src/main.c    ****     int s = 0;
 1867              		.loc 1 944 0
 1868 0014 0024     		movs	r4, #0
 945:Src/main.c    ****     while (s < 1000)
 1869              		.loc 1 945 0
 1870 0016 08E0     		b	.L118
 1871              	.LVL251:
 1872              	.L119:
 946:Src/main.c    ****     {
 947:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, s);
 1873              		.loc 1 947 0
 1874 0018 064B     		ldr	r3, .L121
 1875 001a 1B68     		ldr	r3, [r3]
 1876 001c 5C63     		str	r4, [r3, #52]
 948:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 949:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, s);
 1877              		.loc 1 949 0
 1878 001e DC63     		str	r4, [r3, #60]
 950:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 951:Src/main.c    ****         s += 100;
 1879              		.loc 1 951 0
 1880 0020 6434     		adds	r4, r4, #100
 1881              	.LVL252:
 952:Src/main.c    ****         HAL_Delay(1000);
 1882              		.loc 1 952 0
 1883 0022 4FF47A70 		mov	r0, #1000
 1884 0026 FFF7FEFF 		bl	HAL_Delay
 1885              	.LVL253:
 1886              	.L118:
 945:Src/main.c    ****     {
 1887              		.loc 1 945 0
 1888 002a B4F57A7F 		cmp	r4, #1000
 1889 002e F3DB     		blt	.L119
 953:Src/main.c    ****     }
 954:Src/main.c    **** }
 1890              		.loc 1 954 0
 1891 0030 10BD     		pop	{r4, pc}
 1892              	.LVL254:
 1893              	.L122:
 1894 0032 00BF     		.align	2
 1895              	.L121:
 1896 0034 00000000 		.word	htim1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 53


 1897              		.cfi_endproc
 1898              	.LFE138:
 1900              		.section	.text.test_PWM_htim3,"ax",%progbits
 1901              		.align	2
 1902              		.global	test_PWM_htim3
 1903              		.thumb
 1904              		.thumb_func
 1906              	test_PWM_htim3:
 1907              	.LFB139:
 955:Src/main.c    **** 
 956:Src/main.c    **** /*
 957:Src/main.c    ****  * Test PWM
 958:Src/main.c    ****  * Output: htim3 channel 1 through 3, PWM wave. Confirm these
 959:Src/main.c    ****  *         PWM waves via an oscilliscope.
 960:Src/main.c    ****  */
 961:Src/main.c    **** void test_PWM_htim3()
 962:Src/main.c    **** {
 1908              		.loc 1 962 0
 1909              		.cfi_startproc
 1910              		@ args = 0, pretend = 0, frame = 0
 1911              		@ frame_needed = 0, uses_anonymous_args = 0
 1912 0000 10B5     		push	{r4, lr}
 1913              	.LCFI23:
 1914              		.cfi_def_cfa_offset 8
 1915              		.cfi_offset 4, -8
 1916              		.cfi_offset 14, -4
 963:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1917              		.loc 1 963 0
 1918 0002 0F4C     		ldr	r4, .L127
 1919 0004 2046     		mov	r0, r4
 1920 0006 0021     		movs	r1, #0
 1921 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1922              	.LVL255:
 964:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1923              		.loc 1 964 0
 1924 000c 2046     		mov	r0, r4
 1925 000e 0421     		movs	r1, #4
 1926 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1927              	.LVL256:
 965:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1928              		.loc 1 965 0
 1929 0014 2046     		mov	r0, r4
 1930 0016 0821     		movs	r1, #8
 1931 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1932              	.LVL257:
 966:Src/main.c    **** 
 967:Src/main.c    ****     int s = 500;
 1933              		.loc 1 967 0
 1934 001c 4FF4FA74 		mov	r4, #500
 968:Src/main.c    ****     while (s < 2400)
 1935              		.loc 1 968 0
 1936 0020 09E0     		b	.L124
 1937              	.LVL258:
 1938              	.L125:
 969:Src/main.c    ****     {
 970:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s);
 1939              		.loc 1 970 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 54


 1940 0022 074B     		ldr	r3, .L127
 1941 0024 1B68     		ldr	r3, [r3]
 1942 0026 5C63     		str	r4, [r3, #52]
 971:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s);
 1943              		.loc 1 971 0
 1944 0028 9C63     		str	r4, [r3, #56]
 972:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, s);
 1945              		.loc 1 972 0
 1946 002a DC63     		str	r4, [r3, #60]
 973:Src/main.c    ****         s += 100;
 1947              		.loc 1 973 0
 1948 002c 6434     		adds	r4, r4, #100
 1949              	.LVL259:
 974:Src/main.c    ****         HAL_Delay(500);
 1950              		.loc 1 974 0
 1951 002e 4FF4FA70 		mov	r0, #500
 1952 0032 FFF7FEFF 		bl	HAL_Delay
 1953              	.LVL260:
 1954              	.L124:
 968:Src/main.c    ****     {
 1955              		.loc 1 968 0
 1956 0036 B4F5166F 		cmp	r4, #2400
 1957 003a F2DB     		blt	.L125
 975:Src/main.c    ****     }
 976:Src/main.c    **** }
 1958              		.loc 1 976 0
 1959 003c 10BD     		pop	{r4, pc}
 1960              	.LVL261:
 1961              	.L128:
 1962 003e 00BF     		.align	2
 1963              	.L127:
 1964 0040 00000000 		.word	htim3
 1965              		.cfi_endproc
 1966              	.LFE139:
 1968              		.section	.text.test_ADC,"ax",%progbits
 1969              		.align	2
 1970              		.global	test_ADC
 1971              		.thumb
 1972              		.thumb_func
 1974              	test_ADC:
 1975              	.LFB140:
 977:Src/main.c    **** 
 978:Src/main.c    **** void test_ADC()
 979:Src/main.c    **** {
 1976              		.loc 1 979 0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 24
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 1980 0000 10B5     		push	{r4, lr}
 1981              	.LCFI24:
 1982              		.cfi_def_cfa_offset 8
 1983              		.cfi_offset 4, -8
 1984              		.cfi_offset 14, -4
 1985 0002 86B0     		sub	sp, sp, #24
 1986              	.LCFI25:
 1987              		.cfi_def_cfa_offset 32
 980:Src/main.c    ****     char msg[18] = "";
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 55


 1988              		.loc 1 980 0
 1989 0004 0023     		movs	r3, #0
 1990 0006 0193     		str	r3, [sp, #4]
 1991 0008 0293     		str	r3, [sp, #8]
 1992 000a 0393     		str	r3, [sp, #12]
 1993 000c 0493     		str	r3, [sp, #16]
 1994 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
 981:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1995              		.loc 1 981 0
 1996 0012 0F48     		ldr	r0, .L132
 1997 0014 0F49     		ldr	r1, .L132+4
 1998 0016 4FF40062 		mov	r2, #2048
 1999 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2000              	.LVL262:
 2001              	.L130:
 2002              	.LBB6:
 982:Src/main.c    **** 
 983:Src/main.c    ****     while (1)
 984:Src/main.c    ****     {
 985:Src/main.c    ****         int ch_5 = adc_values[0];
 2003              		.loc 1 985 0 discriminator 1
 2004 001e 0E4B     		ldr	r3, .L132+8
 2005              	.LVL263:
 986:Src/main.c    ****         int ch_4 = adc_values[1];
 2006              		.loc 1 986 0 discriminator 1
 2007 0020 5C68     		ldr	r4, [r3, #4]
 2008              	.LVL264:
 987:Src/main.c    **** 
 988:Src/main.c    ****         sprintf(msg, "ch_5: %d\n", ch_5);
 2009              		.loc 1 988 0 discriminator 1
 2010 0022 01A8     		add	r0, sp, #4
 2011 0024 0D49     		ldr	r1, .L132+12
 2012 0026 1A68     		ldr	r2, [r3]
 2013 0028 FFF7FEFF 		bl	sprintf
 2014              	.LVL265:
 989:Src/main.c    ****         print(msg, 0);
 2015              		.loc 1 989 0 discriminator 1
 2016 002c 01A8     		add	r0, sp, #4
 2017 002e 0021     		movs	r1, #0
 2018 0030 FFF7FEFF 		bl	print
 2019              	.LVL266:
 990:Src/main.c    **** 
 991:Src/main.c    ****         sprintf(msg, "ch_4: %d\n", ch_4);
 2020              		.loc 1 991 0 discriminator 1
 2021 0034 01A8     		add	r0, sp, #4
 2022 0036 0A49     		ldr	r1, .L132+16
 2023 0038 2246     		mov	r2, r4
 2024 003a FFF7FEFF 		bl	sprintf
 2025              	.LVL267:
 992:Src/main.c    ****         print(msg, 2);
 2026              		.loc 1 992 0 discriminator 1
 2027 003e 01A8     		add	r0, sp, #4
 2028 0040 0221     		movs	r1, #2
 2029 0042 FFF7FEFF 		bl	print
 2030              	.LVL268:
 993:Src/main.c    **** 
 994:Src/main.c    ****         HAL_Delay(100);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 56


 2031              		.loc 1 994 0 discriminator 1
 2032 0046 6420     		movs	r0, #100
 2033 0048 FFF7FEFF 		bl	HAL_Delay
 2034              	.LVL269:
 2035              	.LBE6:
 995:Src/main.c    ****     }
 2036              		.loc 1 995 0 discriminator 1
 2037 004c E7E7     		b	.L130
 2038              	.L133:
 2039 004e 00BF     		.align	2
 2040              	.L132:
 2041 0050 00000000 		.word	hadc1
 2042 0054 00000000 		.word	dma_buffer
 2043 0058 00000000 		.word	adc_values
 2044 005c 80010000 		.word	.LC18
 2045 0060 8C010000 		.word	.LC19
 2046              		.cfi_endproc
 2047              	.LFE140:
 2049              		.section	.text.test_All,"ax",%progbits
 2050              		.align	2
 2051              		.global	test_All
 2052              		.thumb
 2053              		.thumb_func
 2055              	test_All:
 2056              	.LFB141:
 996:Src/main.c    **** }
 997:Src/main.c    **** 
 998:Src/main.c    **** /**
 999:Src/main.c    ****  * Test all PWM and ADC - Read PWM waves, input ADC voltages 
1000:Src/main.c    ****  * and read values on OLED
1001:Src/main.c    ****  *      htim1 -> CH1, CH2, CH3, CH4
1002:Src/main.c    ****  *      htim3 -> CH1, CH2, CH3
1003:Src/main.c    ****  *      ADC   -> CH5, CH4
1004:Src/main.c    ****  */
1005:Src/main.c    **** void test_All()
1006:Src/main.c    **** {
 2057              		.loc 1 1006 0
 2058              		.cfi_startproc
 2059              		@ Volatile: function does not return.
 2060              		@ args = 0, pretend = 0, frame = 0
 2061              		@ frame_needed = 0, uses_anonymous_args = 0
 2062 0000 08B5     		push	{r3, lr}
 2063              	.LCFI26:
 2064              		.cfi_def_cfa_offset 8
 2065              		.cfi_offset 3, -8
 2066              		.cfi_offset 14, -4
1007:Src/main.c    ****     test_PWM_htim1();
 2067              		.loc 1 1007 0
 2068 0002 FFF7FEFF 		bl	test_PWM_htim1
 2069              	.LVL270:
1008:Src/main.c    ****     test_PWM_htim3();
 2070              		.loc 1 1008 0
 2071 0006 FFF7FEFF 		bl	test_PWM_htim3
 2072              	.LVL271:
1009:Src/main.c    ****     test_ADC();
 2073              		.loc 1 1009 0
 2074 000a FFF7FEFF 		bl	test_ADC
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 57


 2075              	.LVL272:
 2076              		.cfi_endproc
 2077              	.LFE141:
 2079 000e 00BF     		.section	.text._Error_Handler,"ax",%progbits
 2080              		.align	2
 2081              		.global	_Error_Handler
 2082              		.thumb
 2083              		.thumb_func
 2085              	_Error_Handler:
 2086              	.LFB142:
1010:Src/main.c    **** }
1011:Src/main.c    **** // ******
1012:Src/main.c    **** // END TESTS
1013:Src/main.c    **** // ******
1014:Src/main.c    **** 
1015:Src/main.c    **** /* USER CODE END 4 */
1016:Src/main.c    **** 
1017:Src/main.c    **** /**
1018:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
1019:Src/main.c    ****  * @param  file: The file name as string.
1020:Src/main.c    ****  * @param  line: The line in file as a number.
1021:Src/main.c    ****  * @retval None
1022:Src/main.c    ****  */
1023:Src/main.c    **** void _Error_Handler(char *file, int line)
1024:Src/main.c    **** {
 2087              		.loc 1 1024 0
 2088              		.cfi_startproc
 2089              		@ Volatile: function does not return.
 2090              		@ args = 0, pretend = 0, frame = 0
 2091              		@ frame_needed = 0, uses_anonymous_args = 0
 2092              		@ link register save eliminated.
 2093              	.LVL273:
 2094              	.L137:
1025:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
1026:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
1027:Src/main.c    ****     while (1)
1028:Src/main.c    ****     {
1029:Src/main.c    ****     }
 2095              		.loc 1 1029 0 discriminator 1
 2096 0000 FEE7     		b	.L137
 2097              		.cfi_endproc
 2098              	.LFE142:
 2100 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 2101              		.align	2
 2102              		.global	SystemClock_Config
 2103              		.thumb
 2104              		.thumb_func
 2106              	SystemClock_Config:
 2107              	.LFB125:
 370:Src/main.c    **** 
 2108              		.loc 1 370 0
 2109              		.cfi_startproc
 2110              		@ args = 0, pretend = 0, frame = 80
 2111              		@ frame_needed = 0, uses_anonymous_args = 0
 2112 0000 00B5     		push	{lr}
 2113              	.LCFI27:
 2114              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 58


 2115              		.cfi_offset 14, -4
 2116 0002 95B0     		sub	sp, sp, #84
 2117              	.LCFI28:
 2118              		.cfi_def_cfa_offset 88
 2119              	.LBB7:
 377:Src/main.c    **** 
 2120              		.loc 1 377 0
 2121 0004 0022     		movs	r2, #0
 2122 0006 0192     		str	r2, [sp, #4]
 2123 0008 2A4B     		ldr	r3, .L142
 2124 000a 196C     		ldr	r1, [r3, #64]
 2125 000c 41F08051 		orr	r1, r1, #268435456
 2126 0010 1964     		str	r1, [r3, #64]
 2127 0012 1B6C     		ldr	r3, [r3, #64]
 2128 0014 03F08053 		and	r3, r3, #268435456
 2129 0018 0193     		str	r3, [sp, #4]
 2130 001a 019B     		ldr	r3, [sp, #4]
 2131              	.LBE7:
 2132              	.LBB8:
 379:Src/main.c    **** 
 2133              		.loc 1 379 0
 2134 001c 0292     		str	r2, [sp, #8]
 2135 001e 2649     		ldr	r1, .L142+4
 2136 0020 0B68     		ldr	r3, [r1]
 2137 0022 23F44043 		bic	r3, r3, #49152
 2138 0026 43F40043 		orr	r3, r3, #32768
 2139 002a 0B60     		str	r3, [r1]
 2140 002c 0B68     		ldr	r3, [r1]
 2141 002e 03F44043 		and	r3, r3, #49152
 2142 0032 0293     		str	r3, [sp, #8]
 2143 0034 029B     		ldr	r3, [sp, #8]
 2144              	.LBE8:
 383:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2145              		.loc 1 383 0
 2146 0036 0223     		movs	r3, #2
 2147 0038 0893     		str	r3, [sp, #32]
 384:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 2148              		.loc 1 384 0
 2149 003a 0121     		movs	r1, #1
 2150 003c 0B91     		str	r1, [sp, #44]
 385:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2151              		.loc 1 385 0
 2152 003e 1021     		movs	r1, #16
 2153 0040 0C91     		str	r1, [sp, #48]
 386:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2154              		.loc 1 386 0
 2155 0042 0E93     		str	r3, [sp, #56]
 387:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 2156              		.loc 1 387 0
 2157 0044 0F92     		str	r2, [sp, #60]
 388:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 2158              		.loc 1 388 0
 2159 0046 0822     		movs	r2, #8
 2160 0048 1092     		str	r2, [sp, #64]
 389:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2161              		.loc 1 389 0
 2162 004a 4822     		movs	r2, #72
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 59


 2163 004c 1192     		str	r2, [sp, #68]
 390:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 2164              		.loc 1 390 0
 2165 004e 1293     		str	r3, [sp, #72]
 391:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2166              		.loc 1 391 0
 2167 0050 0423     		movs	r3, #4
 2168 0052 1393     		str	r3, [sp, #76]
 392:Src/main.c    ****     {
 2169              		.loc 1 392 0
 2170 0054 08A8     		add	r0, sp, #32
 2171 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2172              	.LVL274:
 2173 005a 20B1     		cbz	r0, .L139
 394:Src/main.c    ****     }
 2174              		.loc 1 394 0
 2175 005c 1748     		ldr	r0, .L142+8
 2176 005e 4FF4C571 		mov	r1, #394
 2177 0062 FFF7FEFF 		bl	_Error_Handler
 2178              	.LVL275:
 2179              	.L139:
 399:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2180              		.loc 1 399 0
 2181 0066 0F23     		movs	r3, #15
 2182 0068 0393     		str	r3, [sp, #12]
 401:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2183              		.loc 1 401 0
 2184 006a 0221     		movs	r1, #2
 2185 006c 0491     		str	r1, [sp, #16]
 402:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2186              		.loc 1 402 0
 2187 006e 0023     		movs	r3, #0
 2188 0070 0593     		str	r3, [sp, #20]
 403:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2189              		.loc 1 403 0
 2190 0072 4FF48052 		mov	r2, #4096
 2191 0076 0692     		str	r2, [sp, #24]
 404:Src/main.c    **** 
 2192              		.loc 1 404 0
 2193 0078 0793     		str	r3, [sp, #28]
 406:Src/main.c    ****     {
 2194              		.loc 1 406 0
 2195 007a 03A8     		add	r0, sp, #12
 2196 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2197              	.LVL276:
 2198 0080 20B1     		cbz	r0, .L140
 408:Src/main.c    ****     }
 2199              		.loc 1 408 0
 2200 0082 0E48     		ldr	r0, .L142+8
 2201 0084 4FF4CC71 		mov	r1, #408
 2202 0088 FFF7FEFF 		bl	_Error_Handler
 2203              	.LVL277:
 2204              	.L140:
 413:Src/main.c    **** 
 2205              		.loc 1 413 0
 2206 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2207              	.LVL278:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 60


 2208 0090 0B4B     		ldr	r3, .L142+12
 2209 0092 A3FB0030 		umull	r3, r0, r3, r0
 2210 0096 8009     		lsrs	r0, r0, #6
 2211 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 2212              	.LVL279:
 417:Src/main.c    **** 
 2213              		.loc 1 417 0
 2214 009c 0420     		movs	r0, #4
 2215 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 2216              	.LVL280:
 420:Src/main.c    **** }
 2217              		.loc 1 420 0
 2218 00a2 4FF0FF30 		mov	r0, #-1
 2219 00a6 0021     		movs	r1, #0
 2220 00a8 0A46     		mov	r2, r1
 2221 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 2222              	.LVL281:
 421:Src/main.c    **** 
 2223              		.loc 1 421 0
 2224 00ae 15B0     		add	sp, sp, #84
 2225              	.LCFI29:
 2226              		.cfi_def_cfa_offset 4
 2227              		@ sp needed
 2228 00b0 5DF804FB 		ldr	pc, [sp], #4
 2229              	.L143:
 2230              		.align	2
 2231              	.L142:
 2232 00b4 00380240 		.word	1073887232
 2233 00b8 00700040 		.word	1073770496
 2234 00bc 98010000 		.word	.LC20
 2235 00c0 D34D6210 		.word	274877907
 2236              		.cfi_endproc
 2237              	.LFE125:
 2239              		.section	.text.main,"ax",%progbits
 2240              		.align	2
 2241              		.global	main
 2242              		.thumb
 2243              		.thumb_func
 2245              	main:
 2246              	.LFB124:
 115:Src/main.c    ****     /* USER CODE BEGIN 1 */
 2247              		.loc 1 115 0
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 24
 2250              		@ frame_needed = 0, uses_anonymous_args = 0
 2251 0000 70B5     		push	{r4, r5, r6, lr}
 2252              	.LCFI30:
 2253              		.cfi_def_cfa_offset 16
 2254              		.cfi_offset 4, -16
 2255              		.cfi_offset 5, -12
 2256              		.cfi_offset 6, -8
 2257              		.cfi_offset 14, -4
 2258 0002 88B0     		sub	sp, sp, #32
 2259              	.LCFI31:
 2260              		.cfi_def_cfa_offset 48
 123:Src/main.c    **** 
 2261              		.loc 1 123 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 61


 2262 0004 FFF7FEFF 		bl	HAL_Init
 2263              	.LVL282:
 130:Src/main.c    **** 
 2264              		.loc 1 130 0
 2265 0008 FFF7FEFF 		bl	SystemClock_Config
 2266              	.LVL283:
 137:Src/main.c    ****     MX_DMA_Init();
 2267              		.loc 1 137 0
 2268 000c FFF7FEFF 		bl	MX_GPIO_Init
 2269              	.LVL284:
 138:Src/main.c    ****     MX_TIM3_Init();
 2270              		.loc 1 138 0
 2271 0010 FFF7FEFF 		bl	MX_DMA_Init
 2272              	.LVL285:
 139:Src/main.c    ****     MX_TIM1_Init();
 2273              		.loc 1 139 0
 2274 0014 FFF7FEFF 		bl	MX_TIM3_Init
 2275              	.LVL286:
 140:Src/main.c    ****     MX_TIM2_Init();
 2276              		.loc 1 140 0
 2277 0018 FFF7FEFF 		bl	MX_TIM1_Init
 2278              	.LVL287:
 141:Src/main.c    ****     MX_ADC1_Init();
 2279              		.loc 1 141 0
 2280 001c FFF7FEFF 		bl	MX_TIM2_Init
 2281              	.LVL288:
 142:Src/main.c    ****     MX_TIM4_Init();
 2282              		.loc 1 142 0
 2283 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2284              	.LVL289:
 143:Src/main.c    ****     MX_TIM9_Init();
 2285              		.loc 1 143 0
 2286 0024 FFF7FEFF 		bl	MX_TIM4_Init
 2287              	.LVL290:
 144:Src/main.c    ****     MX_TIM5_Init();
 2288              		.loc 1 144 0
 2289 0028 FFF7FEFF 		bl	MX_TIM9_Init
 2290              	.LVL291:
 145:Src/main.c    ****     MX_I2C1_Init();
 2291              		.loc 1 145 0
 2292 002c FFF7FEFF 		bl	MX_TIM5_Init
 2293              	.LVL292:
 146:Src/main.c    ****     MX_USART6_UART_Init();
 2294              		.loc 1 146 0
 2295 0030 FFF7FEFF 		bl	MX_I2C1_Init
 2296              	.LVL293:
 147:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2297              		.loc 1 147 0
 2298 0034 FFF7FEFF 		bl	MX_USART6_UART_Init
 2299              	.LVL294:
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 2300              		.loc 1 164 0
 2301 0038 8148     		ldr	r0, .L163
 2302 003a 1821     		movs	r1, #24
 2303 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2304              	.LVL295:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 62


 2305              		.loc 1 165 0
 2306 0040 8048     		ldr	r0, .L163+4
 2307 0042 1821     		movs	r1, #24
 2308 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2309              	.LVL296:
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 2310              		.loc 1 166 0
 2311 0048 7F4C     		ldr	r4, .L163+8
 2312 004a 2046     		mov	r0, r4
 2313 004c 0021     		movs	r1, #0
 2314 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2315              	.LVL297:
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 2316              		.loc 1 167 0
 2317 0052 2046     		mov	r0, r4
 2318 0054 0421     		movs	r1, #4
 2319 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2320              	.LVL298:
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 2321              		.loc 1 168 0
 2322 005a 2046     		mov	r0, r4
 2323 005c 0821     		movs	r1, #8
 2324 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2325              	.LVL299:
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2326              		.loc 1 169 0
 2327 0062 2046     		mov	r0, r4
 2328 0064 0C21     		movs	r1, #12
 2329 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2330              	.LVL300:
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 2331              		.loc 1 170 0
 2332 006a 784C     		ldr	r4, .L163+12
 2333 006c 2046     		mov	r0, r4
 2334 006e 0021     		movs	r1, #0
 2335 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2336              	.LVL301:
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 2337              		.loc 1 171 0
 2338 0074 2046     		mov	r0, r4
 2339 0076 0421     		movs	r1, #4
 2340 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2341              	.LVL302:
 172:Src/main.c    **** 
 2342              		.loc 1 172 0
 2343 007c 2046     		mov	r0, r4
 2344 007e 0821     		movs	r1, #8
 2345 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2346              	.LVL303:
 175:Src/main.c    ****     print("Starting\n", 0);
 2347              		.loc 1 175 0
 2348 0084 FFF7FEFF 		bl	ssd1306_Init
 2349              	.LVL304:
 176:Src/main.c    ****     claw_init(&htim3);
 2350              		.loc 1 176 0
 2351 0088 7148     		ldr	r0, .L163+16
 2352 008a 0021     		movs	r1, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 63


 2353 008c FFF7FEFF 		bl	print
 2354              	.LVL305:
 177:Src/main.c    ****     // basket_init(&htim3);
 2355              		.loc 1 177 0
 2356 0090 2046     		mov	r0, r4
 2357 0092 FFF7FEFF 		bl	claw_init
 2358              	.LVL306:
 180:Src/main.c    **** 
 2359              		.loc 1 180 0
 2360 0096 0221     		movs	r1, #2
 2361 0098 0091     		str	r1, [sp]
 2362 009a 0123     		movs	r3, #1
 2363 009c 0193     		str	r3, [sp, #4]
 2364 009e 02A8     		add	r0, sp, #8
 2365 00a0 0022     		movs	r2, #0
 2366 00a2 1346     		mov	r3, r2
 2367 00a4 FFF7FEFF 		bl	pid_Init
 2368              	.LVL307:
 182:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 2369              		.loc 1 182 0
 2370 00a8 0024     		movs	r4, #0
 2371 00aa 6A4B     		ldr	r3, .L163+20
 2372 00ac 1C70     		strb	r4, [r3]
 183:Src/main.c    **** 
 2373              		.loc 1 183 0
 2374 00ae 6A4B     		ldr	r3, .L163+24
 2375 00b0 1C70     		strb	r4, [r3]
 185:Src/main.c    **** 
 2376              		.loc 1 185 0
 2377 00b2 6A4D     		ldr	r5, .L163+28
 2378 00b4 2988     		ldrh	r1, [r5]
 2379 00b6 6A4E     		ldr	r6, .L163+32
 2380 00b8 02A8     		add	r0, sp, #8
 2381 00ba 5031     		adds	r1, r1, #80
 2382 00bc 3288     		ldrh	r2, [r6]
 2383 00be 4FF4FA63 		mov	r3, #2000
 2384 00c2 FFF7FEFF 		bl	drive_straight_time
 2385              	.LVL308:
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 2386              		.loc 1 188 0
 2387 00c6 0620     		movs	r0, #6
 2388 00c8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2389              	.LVL309:
 189:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 2390              		.loc 1 189 0
 2391 00cc 0A20     		movs	r0, #10
 2392 00ce FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2393              	.LVL310:
 190:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 2394              		.loc 1 190 0
 2395 00d2 644B     		ldr	r3, .L163+36
 2396 00d4 1C70     		strb	r4, [r3]
 191:Src/main.c    **** 
 2397              		.loc 1 191 0
 2398 00d6 644B     		ldr	r3, .L163+40
 2399 00d8 1C70     		strb	r4, [r3]
 193:Src/main.c    ****     print("ewok\n", 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 64


 2400              		.loc 1 193 0
 2401 00da 3288     		ldrh	r2, [r6]
 2402 00dc 02A8     		add	r0, sp, #8
 2403 00de 2988     		ldrh	r1, [r5]
 2404 00e0 0A32     		adds	r2, r2, #10
 2405 00e2 41F28833 		movw	r3, #5000
 2406 00e6 FFF7FEFF 		bl	drive_straight_time
 2407              	.LVL311:
 194:Src/main.c    **** 
 2408              		.loc 1 194 0
 2409 00ea 6048     		ldr	r0, .L163+44
 2410 00ec 2146     		mov	r1, r4
 2411 00ee FFF7FEFF 		bl	print
 2412              	.LVL312:
 2413              	.L145:
 206:Src/main.c    ****         {
 2414              		.loc 1 206 0
 2415 00f2 5C4B     		ldr	r3, .L163+36
 2416 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2417 00f6 012B     		cmp	r3, #1
 2418 00f8 3AD1     		bne	.L146
 2419              	.LBB9:
 209:Src/main.c    ****             // Turn to ewok
 2420              		.loc 1 209 0
 2421 00fa 5D48     		ldr	r0, .L163+48
 2422 00fc 0021     		movs	r1, #0
 2423 00fe FFF7FEFF 		bl	print
 2424              	.LVL313:
 211:Src/main.c    **** 
 2425              		.loc 1 211 0
 2426 0102 FFF7FEFF 		bl	turn
 2427              	.LVL314:
 215:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2428              		.loc 1 215 0
 2429 0106 FFF7FEFF 		bl	HAL_GetTick
 2430              	.LVL315:
 2431 010a 0446     		mov	r4, r0
 2432              	.LVL316:
 216:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2433              		.loc 1 216 0
 2434 010c 0020     		movs	r0, #0
 2435              	.LVL317:
 2436 010e 534B     		ldr	r3, .L163+28
 2437 0110 1988     		ldrh	r1, [r3]
 2438 0112 FFF7FEFF 		bl	set_motor_speed
 2439              	.LVL318:
 217:Src/main.c    ****             while(HAL_GetTick()-time<2800){
 2440              		.loc 1 217 0
 2441 0116 0820     		movs	r0, #8
 2442 0118 514B     		ldr	r3, .L163+32
 2443 011a 1988     		ldrh	r1, [r3]
 2444 011c FFF7FEFF 		bl	set_motor_speed
 2445              	.LVL319:
 218:Src/main.c    ****                 drive_straight(&enc_pid);
 2446              		.loc 1 218 0
 2447 0120 10E0     		b	.L147
 2448              	.L149:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 65


 219:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 2449              		.loc 1 219 0
 2450 0122 02A8     		add	r0, sp, #8
 2451 0124 FFF7FEFF 		bl	drive_straight
 2452              	.LVL320:
 221:Src/main.c    ****                 {
 2453              		.loc 1 221 0
 2454 0128 5248     		ldr	r0, .L163+52
 2455 012a 1021     		movs	r1, #16
 2456 012c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2457              	.LVL321:
 2458 0130 0128     		cmp	r0, #1
 2459 0132 07D1     		bne	.L147
 223:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 2460              		.loc 1 223 0
 2461 0134 5048     		ldr	r0, .L163+56
 2462 0136 0021     		movs	r1, #0
 2463 0138 FFF7FEFF 		bl	print
 2464              	.LVL322:
 224:Src/main.c    ****                     break;
 2465              		.loc 1 224 0
 2466 013c 02A8     		add	r0, sp, #8
 2467 013e FFF7FEFF 		bl	debounce_and_grab
 2468              	.LVL323:
 225:Src/main.c    ****                 }
 2469              		.loc 1 225 0
 2470 0142 05E0     		b	.L148
 2471              	.L147:
 218:Src/main.c    ****                 drive_straight(&enc_pid);
 2472              		.loc 1 218 0
 2473 0144 FFF7FEFF 		bl	HAL_GetTick
 2474              	.LVL324:
 2475 0148 001B     		subs	r0, r0, r4
 2476 014a B0F52F6F 		cmp	r0, #2800
 2477 014e E8D3     		bcc	.L149
 2478              	.L148:
 228:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 2479              		.loc 1 228 0
 2480 0150 0020     		movs	r0, #0
 2481 0152 0146     		mov	r1, r0
 2482 0154 FFF7FEFF 		bl	set_motor_speed
 2483              	.LVL325:
 229:Src/main.c    ****             print("ewok\n", 0);
 2484              		.loc 1 229 0
 2485 0158 0820     		movs	r0, #8
 2486 015a 0021     		movs	r1, #0
 2487 015c FFF7FEFF 		bl	set_motor_speed
 2488              	.LVL326:
 230:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 2489              		.loc 1 230 0
 2490 0160 4248     		ldr	r0, .L163+44
 2491 0162 0021     		movs	r1, #0
 2492 0164 FFF7FEFF 		bl	print
 2493              	.LVL327:
 231:Src/main.c    **** 
 2494              		.loc 1 231 0
 2495 0168 0022     		movs	r2, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 66


 2496 016a 3E4B     		ldr	r3, .L163+36
 2497 016c 1A70     		strb	r2, [r3]
 2498              	.LBE9:
 2499 016e C0E7     		b	.L145
 2500              	.LVL328:
 2501              	.L146:
 235:Src/main.c    ****             if(searches == 4 && ewok_cnt == 0){
 2502              		.loc 1 235 0
 2503 0170 424A     		ldr	r2, .L163+60
 2504 0172 1368     		ldr	r3, [r2]
 2505 0174 0133     		adds	r3, r3, #1
 2506 0176 1360     		str	r3, [r2]
 236:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2507              		.loc 1 236 0
 2508 0178 042B     		cmp	r3, #4
 2509 017a 06D1     		bne	.L151
 236:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2510              		.loc 1 236 0 is_stmt 0 discriminator 1
 2511 017c 404A     		ldr	r2, .L163+64
 2512 017e 1268     		ldr	r2, [r2]
 2513 0180 1AB9     		cbnz	r2, .L151
 237:Src/main.c    ****             }
 2514              		.loc 1 237 0 is_stmt 1
 2515 0182 4048     		ldr	r0, .L163+68
 2516 0184 FFF7FEFF 		bl	debounce_and_grab
 2517              	.LVL329:
 2518 0188 B3E7     		b	.L145
 2519              	.L151:
 239:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2520              		.loc 1 239 0
 2521 018a 032B     		cmp	r3, #3
 2522 018c 07D1     		bne	.L152
 239:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2523              		.loc 1 239 0 is_stmt 0 discriminator 1
 2524 018e 3C4A     		ldr	r2, .L163+64
 2525 0190 1268     		ldr	r2, [r2]
 2526 0192 012A     		cmp	r2, #1
 2527 0194 03D1     		bne	.L152
 240:Src/main.c    ****             }
 2528              		.loc 1 240 0 is_stmt 1
 2529 0196 3B48     		ldr	r0, .L163+68
 2530 0198 FFF7FEFF 		bl	debounce_and_grab
 2531              	.LVL330:
 2532 019c A9E7     		b	.L145
 2533              	.L152:
 242:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2534              		.loc 1 242 0
 2535 019e 082B     		cmp	r3, #8
 2536 01a0 07D1     		bne	.L153
 242:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2537              		.loc 1 242 0 is_stmt 0 discriminator 1
 2538 01a2 374B     		ldr	r3, .L163+64
 2539 01a4 1B68     		ldr	r3, [r3]
 2540 01a6 022B     		cmp	r3, #2
 2541 01a8 03D1     		bne	.L153
 243:Src/main.c    ****             }else{
 2542              		.loc 1 243 0 is_stmt 1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 67


 2543 01aa 3648     		ldr	r0, .L163+68
 2544 01ac FFF7FEFF 		bl	debounce_and_grab
 2545              	.LVL331:
 2546 01b0 9FE7     		b	.L145
 2547              	.L153:
 2548              	.LBB10:
 245:Src/main.c    ****             while(HAL_GetTick()-time<2800 && PI_INT_STATE == NOT_FLAGGED);
 2549              		.loc 1 245 0
 2550 01b2 FFF7FEFF 		bl	HAL_GetTick
 2551              	.LVL332:
 2552 01b6 0446     		mov	r4, r0
 2553              	.LVL333:
 2554              	.L155:
 246:Src/main.c    ****             int thresh = ewok_cnt==1? 500:750;
 2555              		.loc 1 246 0 discriminator 2
 2556 01b8 FFF7FEFF 		bl	HAL_GetTick
 2557              	.LVL334:
 2558 01bc 001B     		subs	r0, r0, r4
 2559 01be B0F52F6F 		cmp	r0, #2800
 2560 01c2 03D2     		bcs	.L154
 246:Src/main.c    ****             int thresh = ewok_cnt==1? 500:750;
 2561              		.loc 1 246 0 is_stmt 0 discriminator 1
 2562 01c4 274B     		ldr	r3, .L163+36
 2563 01c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2564 01c8 002B     		cmp	r3, #0
 2565 01ca F5D0     		beq	.L155
 2566              	.L154:
 247:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2567              		.loc 1 247 0 is_stmt 1
 2568 01cc 2C4B     		ldr	r3, .L163+64
 2569 01ce 1B68     		ldr	r3, [r3]
 2570 01d0 012B     		cmp	r3, #1
 2571 01d2 02D1     		bne	.L161
 2572 01d4 4FF4FA75 		mov	r5, #500
 2573 01d8 01E0     		b	.L156
 2574              	.L161:
 2575 01da 40F2EE25 		movw	r5, #750
 2576              	.L156:
 2577              	.LVL335:
 248:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2578              		.loc 1 248 0 discriminator 4
 2579 01de 0020     		movs	r0, #0
 2580 01e0 1E4B     		ldr	r3, .L163+28
 2581 01e2 1988     		ldrh	r1, [r3]
 2582 01e4 FFF7FEFF 		bl	set_motor_speed
 2583              	.LVL336:
 249:Src/main.c    ****             time = HAL_GetTick();
 2584              		.loc 1 249 0 discriminator 4
 2585 01e8 0820     		movs	r0, #8
 2586 01ea 1D4B     		ldr	r3, .L163+32
 2587 01ec 1988     		ldrh	r1, [r3]
 2588 01ee FFF7FEFF 		bl	set_motor_speed
 2589              	.LVL337:
 250:Src/main.c    ****             while(HAL_GetTick()-time<thresh){
 2590              		.loc 1 250 0 discriminator 4
 2591 01f2 FFF7FEFF 		bl	HAL_GetTick
 2592              	.LVL338:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 68


 2593 01f6 0446     		mov	r4, r0
 2594              	.LVL339:
 251:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 2595              		.loc 1 251 0 discriminator 4
 2596 01f8 10E0     		b	.L157
 2597              	.LVL340:
 2598              	.L160:
 252:Src/main.c    ****                 {
 2599              		.loc 1 252 0
 2600 01fa 1E48     		ldr	r0, .L163+52
 2601 01fc 1021     		movs	r1, #16
 2602 01fe FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2603              	.LVL341:
 2604 0202 0128     		cmp	r0, #1
 2605 0204 07D1     		bne	.L158
 254:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 2606              		.loc 1 254 0
 2607 0206 1C48     		ldr	r0, .L163+56
 2608 0208 0021     		movs	r1, #0
 2609 020a FFF7FEFF 		bl	print
 2610              	.LVL342:
 255:Src/main.c    ****                     break;
 2611              		.loc 1 255 0
 2612 020e 02A8     		add	r0, sp, #8
 2613 0210 FFF7FEFF 		bl	debounce_and_grab
 2614              	.LVL343:
 256:Src/main.c    ****                 }
 2615              		.loc 1 256 0
 2616 0214 07E0     		b	.L159
 2617              	.L158:
 258:Src/main.c    ****             }
 2618              		.loc 1 258 0
 2619 0216 02A8     		add	r0, sp, #8
 2620 0218 FFF7FEFF 		bl	drive_straight
 2621              	.LVL344:
 2622              	.L157:
 251:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 2623              		.loc 1 251 0
 2624 021c FFF7FEFF 		bl	HAL_GetTick
 2625              	.LVL345:
 2626 0220 001B     		subs	r0, r0, r4
 2627 0222 A842     		cmp	r0, r5
 2628 0224 E9D3     		bcc	.L160
 2629              	.L159:
 260:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 2630              		.loc 1 260 0
 2631 0226 0020     		movs	r0, #0
 2632 0228 0146     		mov	r1, r0
 2633 022a FFF7FEFF 		bl	set_motor_speed
 2634              	.LVL346:
 261:Src/main.c    ****             print("ewok\n", 0);
 2635              		.loc 1 261 0
 2636 022e 0820     		movs	r0, #8
 2637 0230 0021     		movs	r1, #0
 2638 0232 FFF7FEFF 		bl	set_motor_speed
 2639              	.LVL347:
 262:Src/main.c    ****             }
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 69


 2640              		.loc 1 262 0
 2641 0236 0D48     		ldr	r0, .L163+44
 2642 0238 0021     		movs	r1, #0
 2643 023a FFF7FEFF 		bl	print
 2644              	.LVL348:
 2645 023e 58E7     		b	.L145
 2646              	.L164:
 2647              		.align	2
 2648              	.L163:
 2649 0240 00000000 		.word	htim4
 2650 0244 00000000 		.word	htim5
 2651 0248 00000000 		.word	htim1
 2652 024c 00000000 		.word	htim3
 2653 0250 08000000 		.word	.LC1
 2654 0254 00000000 		.word	EDGE_LEFT_STATE
 2655 0258 00000000 		.word	EDGE_RIGHT_STATE
 2656 025c 00000000 		.word	.LANCHOR1
 2657 0260 00000000 		.word	.LANCHOR0
 2658 0264 00000000 		.word	PI_INT_STATE
 2659 0268 00000000 		.word	CLAW_INT_STATE
 2660 026c A4010000 		.word	.LC21
 2661 0270 AC010000 		.word	.LC22
 2662 0274 00040240 		.word	1073873920
 2663 0278 70010000 		.word	.LC17
 2664 027c 00000000 		.word	.LANCHOR3
 2665 0280 00000000 		.word	.LANCHOR2
 2666 0284 00000000 		.word	encoder_pid
 2667              	.LBE10:
 2668              		.cfi_endproc
 2669              	.LFE124:
 2671              		.global	searches
 2672              		.global	ewok_cnt
 2673              		.comm	adc_values,8192,4
 2674              		.comm	dma_buffer,8192,4
 2675              		.global	RIGHT_SPEED
 2676              		.global	LEFT_SPEED
 2677              		.section	.data.RIGHT_SPEED,"aw",%progbits
 2678              		.align	1
 2679              		.set	.LANCHOR0,. + 0
 2682              	RIGHT_SPEED:
 2683 0000 5802     		.short	600
 2684              		.section	.bss.searches,"aw",%nobits
 2685              		.align	2
 2686              		.set	.LANCHOR3,. + 0
 2689              	searches:
 2690 0000 00000000 		.space	4
 2691              		.section	.data.LEFT_SPEED,"aw",%progbits
 2692              		.align	1
 2693              		.set	.LANCHOR1,. + 0
 2696              	LEFT_SPEED:
 2697 0000 5802     		.short	600
 2698              		.section	.rodata.str1.4,"aMS",%progbits,1
 2699              		.align	2
 2700              	.LC0:
 2701 0000 776F7263 		.ascii	"worcs\000"
 2701      7300
 2702 0006 0000     		.space	2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 70


 2703              	.LC1:
 2704 0008 53746172 		.ascii	"Starting\012\000"
 2704      74696E67 
 2704      0A00
 2705 0012 0000     		.space	2
 2706              	.LC2:
 2707 0014 256C750A 		.ascii	"%lu\012\000"
 2707      00
 2708 0019 000000   		.space	3
 2709              	.LC3:
 2710 001c 5455524E 		.ascii	"TURN | cnts: %d\012\000"
 2710      207C2063 
 2710      6E74733A 
 2710      2025640A 
 2710      00
 2711 002d 000000   		.space	3
 2712              	.LC4:
 2713 0030 5455524E 		.ascii	"TURN | vlts: %d.%d\012\000"
 2713      207C2076 
 2713      6C74733A 
 2713      2025642E 
 2713      25640A00 
 2714              	.LC5:
 2715 0044 5455524E 		.ascii	"TURN | ADC_VAL: %lu\012\000"
 2715      207C2041 
 2715      44435F56 
 2715      414C3A20 
 2715      256C750A 
 2716 0059 000000   		.space	3
 2717              	.LC6:
 2718 005c 5455524E 		.ascii	"TURN | TIM5->CNT: %lu\012\000"
 2718      207C2054 
 2718      494D352D 
 2718      3E434E54 
 2718      3A20256C 
 2719 0073 00       		.space	1
 2720              	.LC7:
 2721 0074 5455524E 		.ascii	"TURN | TIM4->CNT: %lu\012\000"
 2721      207C2054 
 2721      494D342D 
 2721      3E434E54 
 2721      3A20256C 
 2722 008b 00       		.space	1
 2723              	.LC8:
 2724 008c 5455524E 		.ascii	"TURN_DEG | turn count: %d\012\000"
 2724      5F444547 
 2724      207C2074 
 2724      75726E20 
 2724      636F756E 
 2725 00a7 00       		.space	1
 2726              	.LC9:
 2727 00a8 5455524E 		.ascii	"TURN_DEG | TIM5->CNT: %lu\012\000"
 2727      5F444547 
 2727      207C2054 
 2727      494D352D 
 2727      3E434E54 
 2728 00c3 00       		.space	1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 71


 2729              	.LC10:
 2730 00c4 5455524E 		.ascii	"TURN_DEG | TIM4->CNT: %lu\012\000"
 2730      5F444547 
 2730      207C2054 
 2730      494D342D 
 2730      3E434E54 
 2731 00df 00       		.space	1
 2732              	.LC11:
 2733 00e0 434C4157 		.ascii	"CLAW_GRAB | grabbing ewok\012\000"
 2733      5F475241 
 2733      42207C20 
 2733      67726162 
 2733      62696E67 
 2734 00fb 00       		.space	1
 2735              	.LC12:
 2736 00fc 46697273 		.ascii	"First ewok captured\012\000"
 2736      74206577 
 2736      6F6B2063 
 2736      61707475 
 2736      7265640A 
 2737 0111 000000   		.space	3
 2738              	.LC13:
 2739 0114 5365636F 		.ascii	"Second ewok captured\012\000"
 2739      6E642065 
 2739      776F6B20 
 2739      63617074 
 2739      75726564 
 2740 012a 0000     		.space	2
 2741              	.LC14:
 2742 012c 54686972 		.ascii	"Third ewok captured\012\000"
 2742      64206577 
 2742      6F6B2063 
 2742      61707475 
 2742      7265640A 
 2743 0141 000000   		.space	3
 2744              	.LC15:
 2745 0144 466F7572 		.ascii	"Fourth ewok captured\012\000"
 2745      74682065 
 2745      776F6B20 
 2745      63617074 
 2745      75726564 
 2746 015a 0000     		.space	2
 2747              	.LC16:
 2748 015c 43686577 		.ascii	"Chewie captured\012\000"
 2748      69652063 
 2748      61707475 
 2748      7265640A 
 2748      00
 2749 016d 000000   		.space	3
 2750              	.LC17:
 2751 0170 436C6177 		.ascii	"Claw interrupt\012\000"
 2751      20696E74 
 2751      65727275 
 2751      70740A00 
 2752              	.LC18:
 2753 0180 63685F35 		.ascii	"ch_5: %d\012\000"
 2753      3A202564 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 72


 2753      0A00
 2754 018a 0000     		.space	2
 2755              	.LC19:
 2756 018c 63685F34 		.ascii	"ch_4: %d\012\000"
 2756      3A202564 
 2756      0A00
 2757 0196 0000     		.space	2
 2758              	.LC20:
 2759 0198 5372632F 		.ascii	"Src/main.c\000"
 2759      6D61696E 
 2759      2E6300
 2760 01a3 00       		.space	1
 2761              	.LC21:
 2762 01a4 65776F6B 		.ascii	"ewok\012\000"
 2762      0A00
 2763 01aa 0000     		.space	2
 2764              	.LC22:
 2765 01ac 50692069 		.ascii	"Pi interrupt\012\000"
 2765      6E746572 
 2765      72757074 
 2765      0A00
 2766              		.section	.bss.ewok_cnt,"aw",%nobits
 2767              		.align	2
 2768              		.set	.LANCHOR2,. + 0
 2771              	ewok_cnt:
 2772 0000 00000000 		.space	4
 2773              		.text
 2774              	.Letext0:
 2775              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2776              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2777              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2778              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 2779              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2780              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2781              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2782              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2783              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2784              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2785              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2786              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2787              		.file 14 "Inc/pid.h"
 2788              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 2789              		.file 16 "Inc/adc.h"
 2790              		.file 17 "Inc/tim.h"
 2791              		.file 18 "Inc/usart.h"
 2792              		.file 19 "Inc/extern_vars.h"
 2793              		.file 20 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 2794              		.file 21 "Inc/filter.h"
 2795              		.file 22 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2796              		.file 23 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2797              		.file 24 "Inc/claw.h"
 2798              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2799              		.file 26 "Inc/gpio.h"
 2800              		.file 27 "Inc/dma.h"
 2801              		.file 28 "Inc/i2c.h"
 2802              		.file 29 "Inc/ssd1306.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:21     .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:26     .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:82     .text.encoder_pid:000000000000003c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:87     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:92     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:115    .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:121    .text.drive_straight:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:126    .text.drive_straight:0000000000000000 drive_straight
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:154    .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:159    .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:190    .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:196    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:201    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:228    .text.print:0000000000000018 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:235    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:240    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:327    .text.alarm_detect:000000000000008c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:337    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:342    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:455    .text.menu:000000000000009c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:462    .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:467    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:533    .text.set_motor_speed:000000000000004c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:538    .text.square_edge:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:543    .text.square_edge:0000000000000000 square_edge
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:620    .text.square_edge:0000000000000064 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:628    .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:633    .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:862    .text.turn:0000000000000160 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:887    .text.turn_deg:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:892    .text.turn_deg:0000000000000000 turn_deg
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1073   .text.turn_deg:0000000000000108 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1089   .text.debounce_and_grab:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1094   .text.debounce_and_grab:0000000000000000 debounce_and_grab
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1599   .text.debounce_and_grab:00000000000002d8 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1614   .text.debounce_and_grab:000000000000030c $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1733   .text.debounce_and_grab:00000000000003bc $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1744   .text.drive_straight_time:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1749   .text.drive_straight_time:0000000000000000 drive_straight_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1834   .text.drive_straight_time:0000000000000068 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1840   .text.test_PWM_htim1:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1845   .text.test_PWM_htim1:0000000000000000 test_PWM_htim1
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1896   .text.test_PWM_htim1:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1901   .text.test_PWM_htim3:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1906   .text.test_PWM_htim3:0000000000000000 test_PWM_htim3
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1964   .text.test_PWM_htim3:0000000000000040 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1969   .text.test_ADC:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:1974   .text.test_ADC:0000000000000000 test_ADC
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2041   .text.test_ADC:0000000000000050 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2050   .text.test_All:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2055   .text.test_All:0000000000000000 test_All
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2080   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2085   .text._Error_Handler:0000000000000000 _Error_Handler
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 74


/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2101   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2106   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2232   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2240   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2245   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2649   .text.main:0000000000000240 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2689   .bss.searches:0000000000000000 searches
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2771   .bss.ewok_cnt:0000000000000000 ewok_cnt
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2682   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2696   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2678   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2685   .bss.searches:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2692   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2699   .rodata.str1.4:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s:2767   .bss.ewok_cnt:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pid_GetGain
memcpy
HAL_Delay
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
strlen
HAL_UART_Transmit
huart6
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
HAL_GPIO_ReadPin
sprintf
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dadd
__aeabi_d2iz
HAL_GetTick
close_claw
arm_up
open_claw
arm_down
htim3
PI_INT_STATE
slow_actuate
CLAW_INT_STATE
HAL_TIM_PWM_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccrKejiI.s 			page 75


HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_ADC1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
MX_I2C1_Init
MX_USART6_UART_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
HAL_NVIC_EnableIRQ
htim4
htim5
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
