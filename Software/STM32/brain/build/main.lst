ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  ** This notice applies to any and all portions of this file
   8:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****  * inserted by the user or by software development tools
  11:Src/main.c    ****  * are owned by their respective copyright owners.
  12:Src/main.c    ****  *
  13:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****  *
  15:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****  * are permitted provided that the following conditions are met:
  17:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****  *      and/or other materials provided with the distribution.
  22:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****  *      without specific prior written permission.
  25:Src/main.c    ****  *
  26:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 2


  31:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****  *
  37:Src/main.c    ****  ******************************************************************************
  38:Src/main.c    ****  */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "gpio.h"
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** #include "fonts.h"
  50:Src/main.c    **** #include "ssd1306.h"
  51:Src/main.c    **** #include "encoder.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "filter.h"
  54:Src/main.c    **** #include "extern_vars.h"
  55:Src/main.c    **** #include <String.h>
  56:Src/main.c    **** #include "claw.h"
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END Includes */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED;
  65:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  66:Src/main.c    **** uint32_t dma_buffer[2048];
  67:Src/main.c    **** uint32_t adc_values[2048];
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END PV */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  72:Src/main.c    **** void SystemClock_Config(void);
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE BEGIN PFP */
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void print(char msg[], int row);
  77:Src/main.c    **** PID_t menu();
  78:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  79:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  80:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  81:Src/main.c    **** void turn();
  82:Src/main.c    **** void turn_deg(uint8_t);
  83:Src/main.c    **** void alarm_detect();
  84:Src/main.c    **** void drive_straight(PID_t *enc_pid);
  85:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis);
  86:Src/main.c    **** void square_edge(PID_t *enc_pid);
  87:Src/main.c    **** void test_All();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 3


  88:Src/main.c    **** void test_PWM_htim1();
  89:Src/main.c    **** void test_PWM_htim3();
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE END PFP */
  92:Src/main.c    **** 
  93:Src/main.c    **** /* USER CODE BEGIN 0 */
  94:Src/main.c    **** /**
  95:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
  96:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
  97:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
  98:Src/main.c    ****  */
  99:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 100:Src/main.c    **** {
  29              		.loc 1 100 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 101:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 101 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF40052 		mov	r2, #8192
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB131:
 102:Src/main.c    **** }
 103:Src/main.c    **** /* USER CODE END 0 */
 104:Src/main.c    **** 
 105:Src/main.c    **** /**
 106:Src/main.c    ****  * @brief  The application entry point.
 107:Src/main.c    ****  *
 108:Src/main.c    ****  * @retval None
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 4


 109:Src/main.c    ****  */
 110:Src/main.c    **** int main(void)
 111:Src/main.c    **** {
 112:Src/main.c    ****     /* USER CODE BEGIN 1 */
 113:Src/main.c    **** 
 114:Src/main.c    ****     /* USER CODE END 1 */
 115:Src/main.c    **** 
 116:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 117:Src/main.c    **** 
 118:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 119:Src/main.c    ****     HAL_Init();
 120:Src/main.c    **** 
 121:Src/main.c    ****     /* USER CODE BEGIN Init */
 122:Src/main.c    **** 
 123:Src/main.c    ****     /* USER CODE END Init */
 124:Src/main.c    **** 
 125:Src/main.c    ****     /* Configure the system clock */
 126:Src/main.c    ****     SystemClock_Config();
 127:Src/main.c    **** 
 128:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* USER CODE END SysInit */
 131:Src/main.c    **** 
 132:Src/main.c    ****     /* Initialize all configured peripherals */
 133:Src/main.c    ****     MX_GPIO_Init();
 134:Src/main.c    ****     MX_DMA_Init();
 135:Src/main.c    ****     MX_TIM3_Init();
 136:Src/main.c    ****     MX_TIM1_Init();
 137:Src/main.c    ****     MX_TIM2_Init();
 138:Src/main.c    ****     MX_ADC1_Init();
 139:Src/main.c    ****     MX_I2C1_Init();
 140:Src/main.c    ****     MX_TIM4_Init();
 141:Src/main.c    ****     MX_TIM9_Init();
 142:Src/main.c    ****     MX_TIM5_Init();
 143:Src/main.c    ****     /* USER CODE BEGIN 2 */
 144:Src/main.c    **** 
 145:Src/main.c    ****     /* Initialize peripherals */
 146:Src/main.c    ****     /* 
 147:Src/main.c    ****      * Claw jaw: TIM3 CH1
 148:Src/main.c    ****      * Claw arm: TIM3 CH2
 149:Src/main.c    ****      * Basket: TIM3 CH3
 150:Src/main.c    ****      * left forward: TIM1 CH1
 151:Src/main.c    ****      * left backward: TIM1 CH2
 152:Src/main.c    ****      * right forward: TIM1 CH3
 153:Src/main.c    ****      * right backward: TIM1 CH4
 154:Src/main.c    ****      * left encoder: TIM4
 155:Src/main.c    ****      * right encoderL TIM5
 156:Src/main.c    ****      * spare clocks: TIM2, TIM9
 157:Src/main.c    ****      */
 158:Src/main.c    **** 
 159:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 160:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 5


 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 168:Src/main.c    **** 
 169:Src/main.c    ****     /* Initialize other stuffs */
 170:Src/main.c    ****     ssd1306_Init();
 171:Src/main.c    ****     print("Starting", 0);
 172:Src/main.c    ****     claw_init(&htim3);
 173:Src/main.c    ****     basket_init(&htim3);
 174:Src/main.c    **** 
 175:Src/main.c    ****     uint8_t ewok_cnt = 0;
 176:Src/main.c    ****     PID_t enc_pid = pid_Init(1, 0, 0, 1, 1);
 177:Src/main.c    **** 
 178:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 8 * 1000);
 179:Src/main.c    **** 
 180:Src/main.c    ****     /* Initially disabled interrupts and ADC */
 181:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 182:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 183:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 184:Src/main.c    **** 
 185:Src/main.c    ****     HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_SET);
 186:Src/main.c    ****     /* USER CODE END 2 */
 187:Src/main.c    **** 
 188:Src/main.c    ****     /* Infinite loop */
 189:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 190:Src/main.c    **** 
 191:Src/main.c    ****     while (1)
 192:Src/main.c    ****     {
 193:Src/main.c    ****         /*
 194:Src/main.c    ****          * Pi Turning
 195:Src/main.c    ****          */
 196:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 197:Src/main.c    ****         {
 198:Src/main.c    ****             HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_RESET);
 199:Src/main.c    ****             print("in pi int", 0);
 200:Src/main.c    ****             turn();
 201:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 202:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 203:Src/main.c    ****             HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 204:Src/main.c    ****             uint32_t start = HAL_GetTick();
 205:Src/main.c    ****             while ((HAL_GetTick() - start) < 2500)
 206:Src/main.c    ****             {
 207:Src/main.c    ****                 drive_straight(&enc_pid);
 208:Src/main.c    ****                 if (CLAW_INT_STATE == FLAGGED)
 209:Src/main.c    ****                 {
 210:Src/main.c    ****                     uint32_t timeee = HAL_GetTick();
 211:Src/main.c    ****                     while (HAL_GetTick() - timeee < 20)
 212:Src/main.c    ****                     {
 213:Src/main.c    ****                         HAL_Delay(5);
 214:Src/main.c    ****                         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 215:Src/main.c    ****                         {
 216:Src/main.c    ****                             CLAW_INT_STATE = NOT_FLAGGED;
 217:Src/main.c    ****                         }
 218:Src/main.c    ****                     }
 219:Src/main.c    ****                     if(CLAW_INT_STATE == NOT_FLAGGED){
 220:Src/main.c    ****                         break;
 221:Src/main.c    ****                     }
 222:Src/main.c    ****                     HAL_Delay(400);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 6


 223:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 224:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 225:Src/main.c    ****                     close_claw(&htim3);
 226:Src/main.c    ****                     arm_up(&htim3);
 227:Src/main.c    ****                     HAL_NVIC_DisableIRQ(CLAW_INT_EXTI_IRQn);
 228:Src/main.c    ****                     CLAW_INT_STATE = NOT_FLAGGED;
 229:Src/main.c    ****                     ++ewok_cnt;
 230:Src/main.c    ****                     // char msg[18] = "";
 231:Src/main.c    ****                     // sprintf(msg, "wok_cnt: %d", ewok_cnt);
 232:Src/main.c    ****                     // print(msg, 0);
 233:Src/main.c    ****                     /*
 234:Src/main.c    ****                      * Claw is up and close
 235:Src/main.c    ****                      * Ewok Count incremented
 236:Src/main.c    ****                      * Motors not powered
 237:Src/main.c    ****                      * CLAW_INT_STATE not FLAGGED
 238:Src/main.c    ****                      */
 239:Src/main.c    ****                     if (ewok_cnt == 1)
 240:Src/main.c    ****                     {
 241:Src/main.c    ****                         turn_deg(-95);
 242:Src/main.c    ****                         open_claw(&htim3);
 243:Src/main.c    ****                         // square_edge(&enc_pid);
 244:Src/main.c    ****                         drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 5000);
 245:Src/main.c    ****                         arm_down(&htim3);
 246:Src/main.c    ****                     }
 247:Src/main.c    ****                     if (ewok_cnt == 2)
 248:Src/main.c    ****                     {
 249:Src/main.c    ****                         turn_deg(-110); //  Prolly have to change this
 250:Src/main.c    ****                         alarm_detect();
 251:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 252:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 253:Src/main.c    ****                         open_claw(&htim3);
 254:Src/main.c    ****                         timeee = HAL_GetTick();
 255:Src/main.c    ****                         while(HAL_GetTick()-timeee < 7000){
 256:Src/main.c    ****                             if((TAPE_LEFT_STATE == FLAGGED || TAPE_RIGHT_STATE == FLAGGED) && !(TAP
 257:Src/main.c    ****                                 if(TAPE_LEFT_STATE == FLAGGED){
 258:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, 0);
 259:Src/main.c    ****                                     while(HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) == G
 260:Src/main.c    ****                                     TAPE_LEFT_STATE = NOT_FLAGGED;
 261:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 262:Src/main.c    ****                                 }
 263:Src/main.c    ****                                 if(TAPE_RIGHT_STATE == FLAGGED){
 264:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, 0);
 265:Src/main.c    ****                                     while(HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ==
 266:Src/main.c    ****                                     TAPE_RIGHT_STATE = NOT_FLAGGED;
 267:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 268:Src/main.c    ****                                 }
 269:Src/main.c    ****                             }
 270:Src/main.c    ****                         }
 271:Src/main.c    ****                         arm_down(&htim3);
 272:Src/main.c    ****                     }
 273:Src/main.c    ****                     if(ewok_cnt == 3){
 274:Src/main.c    ****                         turn_deg(110);
 275:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 276:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 277:Src/main.c    ****                         open_claw(&htim3);
 278:Src/main.c    ****                         drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 2000);
 279:Src/main.c    ****                         drive_straight_time(&enc_pid, 700, 700, 2000);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 7


 280:Src/main.c    ****                         arm_down(&htim3);
 281:Src/main.c    ****                     }
 282:Src/main.c    ****                     if(ewok_cnt == 4){
 283:Src/main.c    ****                         turn_deg(150);
 284:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 285:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 286:Src/main.c    ****                         open_claw(&htim3);
 287:Src/main.c    ****                         while(HAL_GetTick()-timeee < 8000){
 288:Src/main.c    ****                             if((EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED) && !(EDG
 289:Src/main.c    ****                                 if(EDGE_LEFT_STATE == FLAGGED){
 290:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, 0);
 291:Src/main.c    ****                                     while(HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == G
 292:Src/main.c    ****                                     EDGE_LEFT_STATE = NOT_FLAGGED;
 293:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 294:Src/main.c    ****                                 }
 295:Src/main.c    ****                                 if(EDGE_RIGHT_STATE == FLAGGED){
 296:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, 0);
 297:Src/main.c    ****                                     while(HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) ==
 298:Src/main.c    ****                                     EDGE_RIGHT_STATE = NOT_FLAGGED;
 299:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 300:Src/main.c    ****                                 }
 301:Src/main.c    ****                             }
 302:Src/main.c    ****                         }
 303:Src/main.c    ****                         arm_down(&htim3);
 304:Src/main.c    ****                     }
 305:Src/main.c    ****                    if(ewok_cnt == 5){
 306:Src/main.c    ****                         turn_deg(70);
 307:Src/main.c    ****                         HAL_Delay(500);
 308:Src/main.c    ****                         open_claw(&htim3);
 309:Src/main.c    ****                         arm_down(&htim3);
 310:Src/main.c    ****                         slow_actuate(&htim3, BASKET_CH, 10, 180);
 311:Src/main.c    ****                         drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 3000);
 312:Src/main.c    ****                    } 
 313:Src/main.c    ****                     break;
 314:Src/main.c    ****                 }
 315:Src/main.c    ****             }
 316:Src/main.c    **** 
 317:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 318:Src/main.c    ****             HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_SET);
 319:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 320:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 321:Src/main.c    ****         }
 322:Src/main.c    ****         else
 323:Src/main.c    ****         {
 324:Src/main.c    ****             /*
 325:Src/main.c    ****              * Look for Ewok
 326:Src/main.c    ****              */
 327:Src/main.c    ****             drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 500);
 328:Src/main.c    **** 
 329:Src/main.c    ****             uint32_t temp_time = HAL_GetTick();
 330:Src/main.c    ****             while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED)
 331:Src/main.c    ****                 ;
 332:Src/main.c    ****         }
 333:Src/main.c    **** 
 334:Src/main.c    ****         /*
 335:Src/main.c    ****          * Edge detected
 336:Src/main.c    ****          */
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 8


 337:Src/main.c    ****         //    if(EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED){
 338:Src/main.c    ****         //        set_motor_speed(TIM_CHANNEL_1, 0);
 339:Src/main.c    ****         //        set_motor_speed(TIM_CHANNEL_3, 0);
 340:Src/main.c    ****         //    }
 341:Src/main.c    **** 
 342:Src/main.c    ****         /*
 343:Src/main.c    ****          * IR DETECTION
 344:Src/main.c    ****          *
 345:Src/main.c    ****          if (IR_INT_STATE == FLAGGED)
 346:Src/main.c    ****          {
 347:Src/main.c    ****          alarm_detect();
 348:Src/main.c    ****         //drive past sensor, enough so as to not trigger interrupt again
 349:Src/main.c    ****         HAL_Delay(2000);
 350:Src/main.c    ****         }*/
 351:Src/main.c    **** 
 352:Src/main.c    ****         /* USER CODE END WHILE */
 353:Src/main.c    **** 
 354:Src/main.c    ****         /* USER CODE BEGIN 3 */
 355:Src/main.c    ****     }
 356:Src/main.c    ****     /* USER CODE END 3 */
 357:Src/main.c    **** }
 358:Src/main.c    **** 
 359:Src/main.c    **** /**
 360:Src/main.c    ****  * @brief System Clock Configuration
 361:Src/main.c    ****  * @retval None
 362:Src/main.c    ****  */
 363:Src/main.c    **** void SystemClock_Config(void)
 364:Src/main.c    **** {
 365:Src/main.c    **** 
 366:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 367:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 368:Src/main.c    **** 
 369:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 370:Src/main.c    ****     */
 371:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 372:Src/main.c    **** 
 373:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 374:Src/main.c    **** 
 375:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 376:Src/main.c    ****     */
 377:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 378:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 379:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 380:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 381:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 382:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 383:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 384:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 385:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 386:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 387:Src/main.c    ****     {
 388:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 389:Src/main.c    ****     }
 390:Src/main.c    **** 
 391:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 392:Src/main.c    ****     */
 393:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 9


 394:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 395:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 396:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 397:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 398:Src/main.c    **** 
 399:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 400:Src/main.c    ****     {
 401:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 402:Src/main.c    ****     }
 403:Src/main.c    **** 
 404:Src/main.c    ****     /**Configure the Systick interrupt time 
 405:Src/main.c    ****     */
 406:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 407:Src/main.c    **** 
 408:Src/main.c    ****     /**Configure the Systick 
 409:Src/main.c    ****     */
 410:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 411:Src/main.c    **** 
 412:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 413:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 414:Src/main.c    **** }
 415:Src/main.c    **** 
 416:Src/main.c    **** /* USER CODE BEGIN 4 */
 417:Src/main.c    **** 
 418:Src/main.c    **** void square_edge(PID_t *enc_pid)
 419:Src/main.c    **** {
 420:Src/main.c    ****     while (1)
 421:Src/main.c    ****     {
 422:Src/main.c    ****         drive_straight(enc_pid);
 423:Src/main.c    ****         if (EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED)
 424:Src/main.c    ****         {
 425:Src/main.c    ****             if (EDGE_LEFT_STATE == FLAGGED)
 426:Src/main.c    ****             {
 427:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 428:Src/main.c    ****             }
 429:Src/main.c    ****             if (EDGE_RIGHT_STATE == FLAGGED)
 430:Src/main.c    ****             {
 431:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 432:Src/main.c    ****             }
 433:Src/main.c    ****         }
 434:Src/main.c    ****         else if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 435:Src/main.c    ****         {
 436:Src/main.c    ****             break;
 437:Src/main.c    ****         }
 438:Src/main.c    ****     }
 439:Src/main.c    **** }
 440:Src/main.c    **** 
 441:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis)
 442:Src/main.c    **** {
 443:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 444:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 445:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 446:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 447:Src/main.c    ****     {
 448:Src/main.c    ****         drive_straight(enc_pid);
 449:Src/main.c    ****     }
 450:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 10


 451:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 452:Src/main.c    **** }
 453:Src/main.c    **** 
 454:Src/main.c    **** void drive_straight(PID_t *enc_pid)
 455:Src/main.c    **** {
 456:Src/main.c    ****     encoder_pid(enc_pid);
 457:Src/main.c    ****     HAL_Delay(10);
 458:Src/main.c    **** }
 459:Src/main.c    **** 
 460:Src/main.c    **** /*
 461:Src/main.c    ****  * Assume motors are not on.
 462:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 463:Src/main.c    ****  */
 464:Src/main.c    **** void turn()
 465:Src/main.c    **** {
 466:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 467:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 468:Src/main.c    ****     HAL_Delay(100);
 469:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 470:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 471:Src/main.c    ****     TIM4->CNT = 0;
 472:Src/main.c    ****     TIM5->CNT = 0;
 473:Src/main.c    **** 
 474:Src/main.c    ****     char msg[18] = "";
 475:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 476:Src/main.c    ****     print(msg, 0);
 477:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 478:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 479:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 480:Src/main.c    ****     print(msg, 2);
 481:Src/main.c    **** 
 482:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
 483:Src/main.c    ****     {
 484:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 485:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 486:Src/main.c    ****         while (TIM5->CNT < counts)
 487:Src/main.c    ****         {
 488:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 489:Src/main.c    ****             print(msg, 4);
 490:Src/main.c    ****         }
 491:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 492:Src/main.c    ****         print(msg, 4);
 493:Src/main.c    ****         TIM5->CNT = 0;
 494:Src/main.c    ****     }
 495:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 496:Src/main.c    ****     {
 497:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 498:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 499:Src/main.c    ****         while (TIM4->CNT < counts)
 500:Src/main.c    ****         {
 501:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 502:Src/main.c    ****             print(msg, 4);
 503:Src/main.c    ****         }
 504:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 505:Src/main.c    ****         print(msg, 4);
 506:Src/main.c    ****         TIM4->CNT = 0;
 507:Src/main.c    ****     }
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 11


 508:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 509:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 510:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 511:Src/main.c    **** }
 512:Src/main.c    **** 
 513:Src/main.c    **** /*
 514:Src/main.c    ****  * Assume motors are not on.
 515:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 516:Src/main.c    ****  */
 517:Src/main.c    **** void turn_deg(uint8_t deg)
 518:Src/main.c    **** {
 519:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 520:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 521:Src/main.c    ****     TIM4->CNT = 0;
 522:Src/main.c    ****     TIM5->CNT = 0;
 523:Src/main.c    **** 
 524:Src/main.c    ****     char msg[18] = "";
 525:Src/main.c    **** 
 526:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 527:Src/main.c    ****     {
 528:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 529:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 530:Src/main.c    ****         while (TIM5->CNT < counts)
 531:Src/main.c    ****         {
 532:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 533:Src/main.c    ****             print(msg, 4);
 534:Src/main.c    ****         }
 535:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 536:Src/main.c    ****         print(msg, 4);
 537:Src/main.c    ****         TIM5->CNT = 0;
 538:Src/main.c    ****     }
 539:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 540:Src/main.c    ****     {
 541:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 30000);
 542:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 543:Src/main.c    ****         while (TIM4->CNT < counts)
 544:Src/main.c    ****         {
 545:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 546:Src/main.c    ****             print(msg, 4);
 547:Src/main.c    ****         }
 548:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 549:Src/main.c    ****         print(msg, 4);
 550:Src/main.c    ****         TIM4->CNT = 0;
 551:Src/main.c    ****     }
 552:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 553:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 554:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 555:Src/main.c    **** }
 556:Src/main.c    **** 
 557:Src/main.c    **** /**
 558:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 559:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 560:Src/main.c    ****  *
 561:Src/main.c    ****  * @param adc_val, value read from ADC.
 562:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 563:Src/main.c    ****  **/
 564:Src/main.c    **** float calculate_heading(uint32_t adc_val)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 12


 565:Src/main.c    **** {
  67              		.loc 1 565 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 566:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 566 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 567:Src/main.c    **** }
  90              		.loc 1 567 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE131:
 101              		.global	__aeabi_dcmplt
 102              		.global	__aeabi_dcmpgt
 103              		.section	.text.alarm_detect,"ax",%progbits
 104              		.align	2
 105              		.global	alarm_detect
 106              		.thumb
 107              		.thumb_func
 109              	alarm_detect:
 110              	.LFB132:
 568:Src/main.c    **** 
 569:Src/main.c    **** // Sampling frequency: 72e6/2/(495*3)
 570:Src/main.c    **** void alarm_detect()
 571:Src/main.c    **** {
 111              		.loc 1 571 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115 0000 00B5     		push	{lr}
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 14, -4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 13


 119 0002 83B0     		sub	sp, sp, #12
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 16
 572:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 122              		.loc 1 572 0
 123 0004 1C48     		ldr	r0, .L13
 124 0006 1D49     		ldr	r1, .L13+4
 125 0008 4FF40062 		mov	r2, #2048
 126 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 127              	.LVL8:
 573:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 574:Src/main.c    ****     HAL_Delay(500);
 128              		.loc 1 574 0
 129 0010 4FF4FA70 		mov	r0, #500
 130 0014 FFF7FEFF 		bl	HAL_Delay
 131              	.LVL9:
 132              	.L10:
 575:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 100)
 133              		.loc 1 575 0 discriminator 1
 134 0018 0023     		movs	r3, #0
 135 001a 0093     		str	r3, [sp]
 136 001c 1848     		ldr	r0, .L13+8
 137 001e 45F6B261 		movw	r1, #24242
 138 0022 4FF47A72 		mov	r2, #1000
 139 0026 4FF40063 		mov	r3, #2048
 140 002a FFF7FEFF 		bl	goertzel
 141              	.LVL10:
 142 002e 51EC100B 		fmrrd	r0, r1, d0
 143 0032 0022     		movs	r2, #0
 144 0034 134B     		ldr	r3, .L13+12
 145 0036 FFF7FEFF 		bl	__aeabi_dcmplt
 146              	.LVL11:
 147 003a 0028     		cmp	r0, #0
 148 003c ECD1     		bne	.L10
 149              	.L11:
 576:Src/main.c    ****         ;
 577:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 100)
 150              		.loc 1 577 0 discriminator 1
 151 003e 0023     		movs	r3, #0
 152 0040 0093     		str	r3, [sp]
 153 0042 0F48     		ldr	r0, .L13+8
 154 0044 45F6B261 		movw	r1, #24242
 155 0048 4FF47A72 		mov	r2, #1000
 156 004c 4FF40063 		mov	r3, #2048
 157 0050 FFF7FEFF 		bl	goertzel
 158              	.LVL12:
 159 0054 51EC100B 		fmrrd	r0, r1, d0
 160 0058 0022     		movs	r2, #0
 161 005a 0A4B     		ldr	r3, .L13+12
 162 005c FFF7FEFF 		bl	__aeabi_dcmpgt
 163              	.LVL13:
 164 0060 0028     		cmp	r0, #0
 165 0062 ECD1     		bne	.L11
 578:Src/main.c    ****         ;
 579:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 166              		.loc 1 579 0
 167 0064 0448     		ldr	r0, .L13
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 14


 168 0066 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 169              	.LVL14:
 580:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 170              		.loc 1 580 0
 171 006a 0022     		movs	r2, #0
 172 006c 064B     		ldr	r3, .L13+16
 173 006e 1A70     		strb	r2, [r3]
 581:Src/main.c    **** }
 174              		.loc 1 581 0
 175 0070 03B0     		add	sp, sp, #12
 176              	.LCFI4:
 177              		.cfi_def_cfa_offset 4
 178              		@ sp needed
 179 0072 5DF804FB 		ldr	pc, [sp], #4
 180              	.L14:
 181 0076 00BF     		.align	2
 182              	.L13:
 183 0078 00000000 		.word	hadc1
 184 007c 00000000 		.word	dma_buffer
 185 0080 00000000 		.word	adc_values
 186 0084 00005940 		.word	1079574528
 187 0088 00000000 		.word	IR_INT_STATE
 188              		.cfi_endproc
 189              	.LFE132:
 191              		.section	.text.print,"ax",%progbits
 192              		.align	2
 193              		.global	print
 194              		.thumb
 195              		.thumb_func
 197              	print:
 198              	.LFB133:
 582:Src/main.c    **** 
 583:Src/main.c    **** /**
 584:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 585:Src/main.c    ****  * @param msg, string to print
 586:Src/main.c    ****  * @param row, row to print msg to
 587:Src/main.c    ****  */
 588:Src/main.c    **** void print(char *msg, int row)
 589:Src/main.c    **** {
 199              		.loc 1 589 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL15:
 204 0000 38B5     		push	{r3, r4, r5, lr}
 205              	.LCFI5:
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 3, -16
 208              		.cfi_offset 4, -12
 209              		.cfi_offset 5, -8
 210              		.cfi_offset 14, -4
 211 0002 0546     		mov	r5, r0
 590:Src/main.c    ****     if (row == 0)
 212              		.loc 1 590 0
 213 0004 0C46     		mov	r4, r1
 214 0006 11B9     		cbnz	r1, .L16
 591:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 15


 592:Src/main.c    ****         ssd1306_Fill(Black);
 215              		.loc 1 592 0
 216 0008 0020     		movs	r0, #0
 217              	.LVL16:
 218 000a FFF7FEFF 		bl	ssd1306_Fill
 219              	.LVL17:
 220              	.L16:
 593:Src/main.c    ****     }
 594:Src/main.c    ****     ssd1306_SetCursor(0, row * 10);
 221              		.loc 1 594 0
 222 000e 04EB8404 		add	r4, r4, r4, lsl #2
 223              	.LVL18:
 224 0012 6100     		lsls	r1, r4, #1
 225 0014 0020     		movs	r0, #0
 226 0016 01F0FE01 		and	r1, r1, #254
 227 001a FFF7FEFF 		bl	ssd1306_SetCursor
 228              	.LVL19:
 595:Src/main.c    ****     ssd1306_WriteString(msg, Font_7x10, White);
 229              		.loc 1 595 0
 230 001e 054B     		ldr	r3, .L18
 231 0020 2846     		mov	r0, r5
 232 0022 93E80600 		ldmia	r3, {r1, r2}
 233 0026 0123     		movs	r3, #1
 234 0028 FFF7FEFF 		bl	ssd1306_WriteString
 235              	.LVL20:
 596:Src/main.c    ****     ssd1306_UpdateScreen();
 236              		.loc 1 596 0
 237 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 238              	.LVL21:
 239 0030 38BD     		pop	{r3, r4, r5, pc}
 240              	.LVL22:
 241              	.L19:
 242 0032 00BF     		.align	2
 243              	.L18:
 244 0034 00000000 		.word	Font_7x10
 245              		.cfi_endproc
 246              	.LFE133:
 248              		.section	.text.menu,"ax",%progbits
 249              		.align	2
 250              		.global	menu
 251              		.thumb
 252              		.thumb_func
 254              	menu:
 255              	.LFB134:
 597:Src/main.c    **** }
 598:Src/main.c    **** 
 599:Src/main.c    **** PID_t menu()
 600:Src/main.c    **** {
 256              		.loc 1 600 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 32
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL23:
 261 0000 30B5     		push	{r4, r5, lr}
 262              	.LCFI6:
 263              		.cfi_def_cfa_offset 12
 264              		.cfi_offset 4, -12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 16


 265              		.cfi_offset 5, -8
 266              		.cfi_offset 14, -4
 267 0002 8BB0     		sub	sp, sp, #44
 268              	.LCFI7:
 269              		.cfi_def_cfa_offset 56
 270 0004 0546     		mov	r5, r0
 601:Src/main.c    ****     print("Starting", 0);
 271              		.loc 1 601 0
 272 0006 2548     		ldr	r0, .L26
 273              	.LVL24:
 274 0008 0021     		movs	r1, #0
 275 000a FFF7FEFF 		bl	print
 276              	.LVL25:
 602:Src/main.c    ****     char msg[20] = "";
 277              		.loc 1 602 0
 278 000e 0024     		movs	r4, #0
 279 0010 0594     		str	r4, [sp, #20]
 280 0012 0694     		str	r4, [sp, #24]
 281 0014 0794     		str	r4, [sp, #28]
 282 0016 0894     		str	r4, [sp, #32]
 283 0018 0994     		str	r4, [sp, #36]
 284              	.LVL26:
 603:Src/main.c    ****     int pid_select = 0;
 604:Src/main.c    ****     uint32_t values[2] = {0, 0};
 285              		.loc 1 604 0
 286 001a 0394     		str	r4, [sp, #12]
 287 001c 0494     		str	r4, [sp, #16]
 288              	.LVL27:
 289              	.L24:
 605:Src/main.c    ****     while (1)
 606:Src/main.c    ****     {
 607:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 290              		.loc 1 607 0
 291 001e 2048     		ldr	r0, .L26+4
 292 0020 4FF40051 		mov	r1, #8192
 293 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 294              	.LVL28:
 295 0028 48BB     		cbnz	r0, .L21
 608:Src/main.c    ****         {
 609:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 296              		.loc 1 609 0
 297 002a 05A8     		add	r0, sp, #20
 298 002c 1D49     		ldr	r1, .L26+8
 299 002e 0AAB     		add	r3, sp, #40
 300 0030 03EB8403 		add	r3, r3, r4, lsl #2
 301 0034 53F81C2C 		ldr	r2, [r3, #-28]
 302 0038 FFF7FEFF 		bl	sprintf
 303              	.LVL29:
 610:Src/main.c    ****             print(msg, 0);
 304              		.loc 1 610 0
 305 003c 05A8     		add	r0, sp, #20
 306 003e 0021     		movs	r1, #0
 307 0040 FFF7FEFF 		bl	print
 308              	.LVL30:
 611:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 309              		.loc 1 611 0
 310 0044 13E0     		b	.L22
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 17


 311              	.L23:
 612:Src/main.c    ****             {
 613:Src/main.c    ****                 values[pid_select]++;
 312              		.loc 1 613 0
 313 0046 0AAB     		add	r3, sp, #40
 314 0048 03EB8403 		add	r3, r3, r4, lsl #2
 315 004c 53F81C2C 		ldr	r2, [r3, #-28]
 316 0050 0132     		adds	r2, r2, #1
 317 0052 43F81C2C 		str	r2, [r3, #-28]
 614:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 318              		.loc 1 614 0
 319 0056 05A8     		add	r0, sp, #20
 320 0058 1249     		ldr	r1, .L26+8
 321 005a FFF7FEFF 		bl	sprintf
 322              	.LVL31:
 615:Src/main.c    ****                 print(msg, 0);
 323              		.loc 1 615 0
 324 005e 05A8     		add	r0, sp, #20
 325 0060 0021     		movs	r1, #0
 326 0062 FFF7FEFF 		bl	print
 327              	.LVL32:
 616:Src/main.c    ****                 HAL_Delay(500);
 328              		.loc 1 616 0
 329 0066 4FF4FA70 		mov	r0, #500
 330 006a FFF7FEFF 		bl	HAL_Delay
 331              	.LVL33:
 332              	.L22:
 611:Src/main.c    ****             {
 333              		.loc 1 611 0
 334 006e 0C48     		ldr	r0, .L26+4
 335 0070 4FF40051 		mov	r1, #8192
 336 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 337              	.LVL34:
 338 0078 0028     		cmp	r0, #0
 339 007a E4D0     		beq	.L23
 617:Src/main.c    ****             }
 618:Src/main.c    ****             ++pid_select;
 340              		.loc 1 618 0
 341 007c 0134     		adds	r4, r4, #1
 342              	.LVL35:
 343              	.L21:
 619:Src/main.c    ****         }
 620:Src/main.c    ****         if (pid_select == 2)
 344              		.loc 1 620 0
 345 007e 022C     		cmp	r4, #2
 346 0080 CDD1     		bne	.L24
 621:Src/main.c    ****             break;
 622:Src/main.c    ****     }
 623:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 347              		.loc 1 623 0
 348 0082 BDF80C10 		ldrh	r1, [sp, #12]
 349 0086 BDF81020 		ldrh	r2, [sp, #16]
 350 008a 0123     		movs	r3, #1
 351 008c 0093     		str	r3, [sp]
 352 008e 0193     		str	r3, [sp, #4]
 353 0090 2846     		mov	r0, r5
 354 0092 FFF7FEFF 		bl	pid_Init
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 18


 355              	.LVL36:
 624:Src/main.c    **** }
 356              		.loc 1 624 0
 357 0096 2846     		mov	r0, r5
 358 0098 0BB0     		add	sp, sp, #44
 359              	.LCFI8:
 360              		.cfi_def_cfa_offset 12
 361              		@ sp needed
 362 009a 30BD     		pop	{r4, r5, pc}
 363              	.LVL37:
 364              	.L27:
 365              		.align	2
 366              	.L26:
 367 009c 00000000 		.word	.LC0
 368 00a0 00080240 		.word	1073874944
 369 00a4 0C000000 		.word	.LC1
 370              		.cfi_endproc
 371              	.LFE134:
 373              		.section	.text.set_motor_speed,"ax",%progbits
 374              		.align	2
 375              		.global	set_motor_speed
 376              		.thumb
 377              		.thumb_func
 379              	set_motor_speed:
 380              	.LFB135:
 625:Src/main.c    **** 
 626:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 627:Src/main.c    **** {
 381              		.loc 1 627 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 386              	.LVL38:
 628:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 387              		.loc 1 628 0
 388 0000 0346     		mov	r3, r0
 389 0002 18B9     		cbnz	r0, .L29
 629:Src/main.c    ****     {
 630:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 390              		.loc 1 630 0
 391 0004 114A     		ldr	r2, .L33
 392 0006 1268     		ldr	r2, [r2]
 393 0008 9063     		str	r0, [r2, #56]
 394 000a 13E0     		b	.L30
 395              	.L29:
 631:Src/main.c    ****     }
 632:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 396              		.loc 1 632 0
 397 000c 0428     		cmp	r0, #4
 398 000e 04D1     		bne	.L31
 633:Src/main.c    ****     {
 634:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 399              		.loc 1 634 0
 400 0010 0E4A     		ldr	r2, .L33
 401 0012 1268     		ldr	r2, [r2]
 402 0014 0020     		movs	r0, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 19


 403              	.LVL39:
 404 0016 5063     		str	r0, [r2, #52]
 405 0018 0CE0     		b	.L30
 406              	.LVL40:
 407              	.L31:
 635:Src/main.c    ****     }
 636:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 408              		.loc 1 636 0
 409 001a 0828     		cmp	r0, #8
 410 001c 04D1     		bne	.L32
 637:Src/main.c    ****     {
 638:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 411              		.loc 1 638 0
 412 001e 0B4A     		ldr	r2, .L33
 413 0020 1268     		ldr	r2, [r2]
 414 0022 0020     		movs	r0, #0
 415              	.LVL41:
 416 0024 1064     		str	r0, [r2, #64]
 417 0026 05E0     		b	.L30
 418              	.LVL42:
 419              	.L32:
 639:Src/main.c    ****     }
 640:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 420              		.loc 1 640 0
 421 0028 0C28     		cmp	r0, #12
 422 002a 03D1     		bne	.L30
 641:Src/main.c    ****     {
 642:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 423              		.loc 1 642 0
 424 002c 074A     		ldr	r2, .L33
 425 002e 1268     		ldr	r2, [r2]
 426 0030 0020     		movs	r0, #0
 427              	.LVL43:
 428 0032 D063     		str	r0, [r2, #60]
 429              	.L30:
 643:Src/main.c    ****     }
 644:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed > 1000 ? 1000 : speed);
 430              		.loc 1 644 0
 431 0034 054A     		ldr	r2, .L33
 432 0036 1268     		ldr	r2, [r2]
 433 0038 3432     		adds	r2, r2, #52
 434 003a 9B08     		lsrs	r3, r3, #2
 435              	.LVL44:
 436 003c B1F57A7F 		cmp	r1, #1000
 437 0040 28BF     		it	cs
 438 0042 4FF47A71 		movcs	r1, #1000
 439              	.LVL45:
 440 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 441 004a 7047     		bx	lr
 442              	.L34:
 443              		.align	2
 444              	.L33:
 445 004c 00000000 		.word	htim1
 446              		.cfi_endproc
 447              	.LFE135:
 449              		.global	__aeabi_f2d
 450              		.global	__aeabi_d2uiz
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 20


 451              		.section	.text.turn,"ax",%progbits
 452              		.align	2
 453              		.global	turn
 454              		.thumb
 455              		.thumb_func
 457              	turn:
 458              	.LFB129:
 465:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 459              		.loc 1 465 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 24
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 464              	.LCFI9:
 465              		.cfi_def_cfa_offset 20
 466              		.cfi_offset 4, -20
 467              		.cfi_offset 5, -16
 468              		.cfi_offset 6, -12
 469              		.cfi_offset 7, -8
 470              		.cfi_offset 14, -4
 471 0002 2DED028B 		fstmfdd	sp!, {d8}
 472              	.LCFI10:
 473              		.cfi_def_cfa_offset 28
 474              		.cfi_offset 80, -28
 475              		.cfi_offset 81, -24
 476 0006 87B0     		sub	sp, sp, #28
 477              	.LCFI11:
 478              		.cfi_def_cfa_offset 56
 466:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 479              		.loc 1 466 0
 480 0008 5F48     		ldr	r0, .L48+16
 481 000a 6049     		ldr	r1, .L48+20
 482 000c 4FF40062 		mov	r2, #2048
 483 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 484              	.LVL46:
 468:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 485              		.loc 1 468 0
 486 0014 6420     		movs	r0, #100
 487 0016 FFF7FEFF 		bl	HAL_Delay
 488              	.LVL47:
 469:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 489              		.loc 1 469 0
 490 001a 5D4B     		ldr	r3, .L48+24
 491 001c 5869     		ldr	r0, [r3, #20]
 492 001e 4000     		lsls	r0, r0, #1
 493 0020 FFF7FEFF 		bl	calculate_heading
 494              	.LVL48:
 495 0024 B0EE408A 		fcpys	s16, s0
 496              	.LVL49:
 470:Src/main.c    ****     TIM4->CNT = 0;
 497              		.loc 1 470 0
 498 0028 F0EEC07A 		fabss	s15, s0
 499 002c 17EE900A 		fmrs	r0, s15
 500 0030 FFF7FEFF 		bl	__aeabi_f2d
 501              	.LVL50:
 502 0034 0022     		movs	r2, #0
 503 0036 574B     		ldr	r3, .L48+28
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 21


 504 0038 FFF7FEFF 		bl	__aeabi_dmul
 505              	.LVL51:
 506 003c FFF7FEFF 		bl	__aeabi_d2uiz
 507              	.LVL52:
 508 0040 85B2     		uxth	r5, r0
 509              	.LVL53:
 471:Src/main.c    ****     TIM5->CNT = 0;
 510              		.loc 1 471 0
 511 0042 0024     		movs	r4, #0
 512 0044 544B     		ldr	r3, .L48+32
 513 0046 5C62     		str	r4, [r3, #36]
 472:Src/main.c    **** 
 514              		.loc 1 472 0
 515 0048 03F58063 		add	r3, r3, #1024
 516 004c 5C62     		str	r4, [r3, #36]
 474:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 517              		.loc 1 474 0
 518 004e 0194     		str	r4, [sp, #4]
 519 0050 0294     		str	r4, [sp, #8]
 520 0052 0394     		str	r4, [sp, #12]
 521 0054 0494     		str	r4, [sp, #16]
 522 0056 ADF81440 		strh	r4, [sp, #20]	@ movhi
 475:Src/main.c    ****     print(msg, 0);
 523              		.loc 1 475 0
 524 005a 01A8     		add	r0, sp, #4
 525 005c 4F49     		ldr	r1, .L48+36
 526 005e 2A46     		mov	r2, r5
 527 0060 FFF7FEFF 		bl	sprintf
 528              	.LVL54:
 476:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 529              		.loc 1 476 0
 530 0064 01A8     		add	r0, sp, #4
 531 0066 2146     		mov	r1, r4
 532 0068 FFF7FEFF 		bl	print
 533              	.LVL55:
 477:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 534              		.loc 1 477 0
 535 006c BDEEC87A 		ftosizs	s14, s16
 536              	.LVL56:
 478:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 537              		.loc 1 478 0
 538 0070 F8EEC77A 		fsitos	s15, s14
 539 0074 78EE677A 		fsubs	s15, s16, s15
 540 0078 DFED496A 		flds	s13, .L48+40
 541 007c 67EEA67A 		fmuls	s15, s15, s13
 542              	.LVL57:
 479:Src/main.c    ****     print(msg, 2);
 543              		.loc 1 479 0
 544 0080 01A8     		add	r0, sp, #4
 545 0082 4849     		ldr	r1, .L48+44
 546 0084 17EE102A 		fmrs	r2, s14	@ int
 547 0088 FDEEE77A 		ftosizs	s15, s15
 548              	.LVL58:
 549 008c 17EE903A 		fmrs	r3, s15	@ int
 550 0090 FFF7FEFF 		bl	sprintf
 551              	.LVL59:
 480:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 22


 552              		.loc 1 480 0
 553 0094 01A8     		add	r0, sp, #4
 554 0096 0221     		movs	r1, #2
 555 0098 FFF7FEFF 		bl	print
 556              	.LVL60:
 482:Src/main.c    ****     {
 557              		.loc 1 482 0
 558 009c 18EE100A 		fmrs	r0, s16
 559 00a0 FFF7FEFF 		bl	__aeabi_f2d
 560              	.LVL61:
 561 00a4 0646     		mov	r6, r0
 562 00a6 0F46     		mov	r7, r1
 563 00a8 33A3     		adr	r3, .L48
 564 00aa D3E90023 		ldrd	r2, [r3]
 565 00ae FFF7FEFF 		bl	__aeabi_dcmplt
 566              	.LVL62:
 567 00b2 20B3     		cbz	r0, .L46
 484:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 568              		.loc 1 484 0
 569 00b4 2046     		mov	r0, r4
 570 00b6 2146     		mov	r1, r4
 571 00b8 FFF7FEFF 		bl	set_motor_speed
 572              	.LVL63:
 485:Src/main.c    ****         while (TIM5->CNT < counts)
 573              		.loc 1 485 0
 574 00bc 0820     		movs	r0, #8
 575 00be 3A4B     		ldr	r3, .L48+48
 576 00c0 1988     		ldrh	r1, [r3]
 577 00c2 FFF7FEFF 		bl	set_motor_speed
 578              	.LVL64:
 486:Src/main.c    ****         {
 579              		.loc 1 486 0
 580 00c6 09E0     		b	.L38
 581              	.L39:
 488:Src/main.c    ****             print(msg, 4);
 582              		.loc 1 488 0
 583 00c8 384B     		ldr	r3, .L48+52
 584 00ca 5A6A     		ldr	r2, [r3, #36]
 585 00cc 01A8     		add	r0, sp, #4
 586 00ce 3849     		ldr	r1, .L48+56
 587 00d0 FFF7FEFF 		bl	sprintf
 588              	.LVL65:
 489:Src/main.c    ****         }
 589              		.loc 1 489 0
 590 00d4 01A8     		add	r0, sp, #4
 591 00d6 0421     		movs	r1, #4
 592 00d8 FFF7FEFF 		bl	print
 593              	.LVL66:
 594              	.L38:
 486:Src/main.c    ****         {
 595              		.loc 1 486 0
 596 00dc 334B     		ldr	r3, .L48+52
 597 00de 5B6A     		ldr	r3, [r3, #36]
 598 00e0 AB42     		cmp	r3, r5
 599 00e2 F1D3     		bcc	.L39
 491:Src/main.c    ****         print(msg, 4);
 600              		.loc 1 491 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 23


 601 00e4 314C     		ldr	r4, .L48+52
 602 00e6 626A     		ldr	r2, [r4, #36]
 603 00e8 01A8     		add	r0, sp, #4
 604 00ea 3149     		ldr	r1, .L48+56
 605 00ec FFF7FEFF 		bl	sprintf
 606              	.LVL67:
 492:Src/main.c    ****         TIM5->CNT = 0;
 607              		.loc 1 492 0
 608 00f0 01A8     		add	r0, sp, #4
 609 00f2 0421     		movs	r1, #4
 610 00f4 FFF7FEFF 		bl	print
 611              	.LVL68:
 493:Src/main.c    ****     }
 612              		.loc 1 493 0
 613 00f8 0023     		movs	r3, #0
 614 00fa 6362     		str	r3, [r4, #36]
 615 00fc 2BE0     		b	.L40
 616              	.L46:
 495:Src/main.c    ****     {
 617              		.loc 1 495 0
 618 00fe 3046     		mov	r0, r6
 619 0100 3946     		mov	r1, r7
 620 0102 1FA3     		adr	r3, .L48+8
 621 0104 D3E90023 		ldrd	r2, [r3]
 622 0108 FFF7FEFF 		bl	__aeabi_dcmpgt
 623              	.LVL69:
 624 010c 18B3     		cbz	r0, .L40
 497:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 625              		.loc 1 497 0
 626 010e 0020     		movs	r0, #0
 627 0110 284B     		ldr	r3, .L48+60
 628 0112 1988     		ldrh	r1, [r3]
 629 0114 FFF7FEFF 		bl	set_motor_speed
 630              	.LVL70:
 498:Src/main.c    ****         while (TIM4->CNT < counts)
 631              		.loc 1 498 0
 632 0118 0820     		movs	r0, #8
 633 011a 0021     		movs	r1, #0
 634 011c FFF7FEFF 		bl	set_motor_speed
 635              	.LVL71:
 499:Src/main.c    ****         {
 636              		.loc 1 499 0
 637 0120 09E0     		b	.L42
 638              	.L43:
 501:Src/main.c    ****             print(msg, 4);
 639              		.loc 1 501 0
 640 0122 1D4B     		ldr	r3, .L48+32
 641 0124 5A6A     		ldr	r2, [r3, #36]
 642 0126 01A8     		add	r0, sp, #4
 643 0128 2349     		ldr	r1, .L48+64
 644 012a FFF7FEFF 		bl	sprintf
 645              	.LVL72:
 502:Src/main.c    ****         }
 646              		.loc 1 502 0
 647 012e 01A8     		add	r0, sp, #4
 648 0130 0421     		movs	r1, #4
 649 0132 FFF7FEFF 		bl	print
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 24


 650              	.LVL73:
 651              	.L42:
 499:Src/main.c    ****         {
 652              		.loc 1 499 0
 653 0136 184B     		ldr	r3, .L48+32
 654 0138 5B6A     		ldr	r3, [r3, #36]
 655 013a AB42     		cmp	r3, r5
 656 013c F1D3     		bcc	.L43
 504:Src/main.c    ****         print(msg, 4);
 657              		.loc 1 504 0
 658 013e 164C     		ldr	r4, .L48+32
 659 0140 626A     		ldr	r2, [r4, #36]
 660 0142 01A8     		add	r0, sp, #4
 661 0144 1C49     		ldr	r1, .L48+64
 662 0146 FFF7FEFF 		bl	sprintf
 663              	.LVL74:
 505:Src/main.c    ****         TIM4->CNT = 0;
 664              		.loc 1 505 0
 665 014a 01A8     		add	r0, sp, #4
 666 014c 0421     		movs	r1, #4
 667 014e FFF7FEFF 		bl	print
 668              	.LVL75:
 506:Src/main.c    ****     }
 669              		.loc 1 506 0
 670 0152 0023     		movs	r3, #0
 671 0154 6362     		str	r3, [r4, #36]
 672              	.L40:
 508:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 673              		.loc 1 508 0
 674 0156 0020     		movs	r0, #0
 675 0158 0146     		mov	r1, r0
 676 015a FFF7FEFF 		bl	set_motor_speed
 677              	.LVL76:
 509:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 678              		.loc 1 509 0
 679 015e 0820     		movs	r0, #8
 680 0160 0021     		movs	r1, #0
 681 0162 FFF7FEFF 		bl	set_motor_speed
 682              	.LVL77:
 510:Src/main.c    **** }
 683              		.loc 1 510 0
 684 0166 0848     		ldr	r0, .L48+16
 685 0168 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 686              	.LVL78:
 511:Src/main.c    **** 
 687              		.loc 1 511 0
 688 016c 07B0     		add	sp, sp, #28
 689              	.LCFI12:
 690              		.cfi_def_cfa_offset 28
 691              		@ sp needed
 692 016e BDEC028B 		fldmfdd	sp!, {d8}
 693              	.LCFI13:
 694              		.cfi_restore 80
 695              		.cfi_restore 81
 696              		.cfi_def_cfa_offset 20
 697              	.LVL79:
 698 0172 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 25


 699              	.LVL80:
 700              	.L49:
 701 0174 AFF30080 		.align	3
 702              	.L48:
 703 0178 7B14AE47 		.word	1202590843
 704 017c E17AA4BF 		.word	-1079739679
 705 0180 7B14AE47 		.word	1202590843
 706 0184 E17AA43F 		.word	1067743969
 707 0188 00000000 		.word	hadc1
 708 018c 00000000 		.word	dma_buffer
 709 0190 00000000 		.word	adc_values
 710 0194 00005940 		.word	1079574528
 711 0198 00080040 		.word	1073743872
 712 019c 10000000 		.word	.LC2
 713 01a0 00007A44 		.word	1148846080
 714 01a4 1C000000 		.word	.LC3
 715 01a8 00000000 		.word	.LANCHOR0
 716 01ac 000C0040 		.word	1073744896
 717 01b0 28000000 		.word	.LC4
 718 01b4 00000000 		.word	.LANCHOR1
 719 01b8 38000000 		.word	.LC5
 720              		.cfi_endproc
 721              	.LFE129:
 723              		.global	__aeabi_i2d
 724              		.global	__aeabi_dadd
 725              		.section	.text.turn_deg,"ax",%progbits
 726              		.align	2
 727              		.global	turn_deg
 728              		.thumb
 729              		.thumb_func
 731              	turn_deg:
 732              	.LFB130:
 518:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 733              		.loc 1 518 0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 24
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737              	.LVL81:
 738 0000 30B5     		push	{r4, r5, lr}
 739              	.LCFI14:
 740              		.cfi_def_cfa_offset 12
 741              		.cfi_offset 4, -12
 742              		.cfi_offset 5, -8
 743              		.cfi_offset 14, -4
 744 0002 87B0     		sub	sp, sp, #28
 745              	.LCFI15:
 746              		.cfi_def_cfa_offset 40
 747 0004 0546     		mov	r5, r0
 519:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 748              		.loc 1 519 0
 749 0006 2C48     		ldr	r0, .L55+8
 750              	.LVL82:
 751 0008 2C49     		ldr	r1, .L55+12
 752 000a 4FF40062 		mov	r2, #2048
 753 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 754              	.LVL83:
 520:Src/main.c    ****     TIM4->CNT = 0;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 26


 755              		.loc 1 520 0
 756 0012 A5F15A00 		sub	r0, r5, #90
 757 0016 FFF7FEFF 		bl	__aeabi_i2d
 758              	.LVL84:
 759 001a 25A3     		adr	r3, .L55
 760 001c D3E90023 		ldrd	r2, [r3]
 761 0020 FFF7FEFF 		bl	__aeabi_dmul
 762              	.LVL85:
 763 0024 0022     		movs	r2, #0
 764 0026 264B     		ldr	r3, .L55+16
 765 0028 FFF7FEFF 		bl	__aeabi_dadd
 766              	.LVL86:
 767 002c FFF7FEFF 		bl	__aeabi_d2uiz
 768              	.LVL87:
 769 0030 84B2     		uxth	r4, r0
 770              	.LVL88:
 521:Src/main.c    ****     TIM5->CNT = 0;
 771              		.loc 1 521 0
 772 0032 0023     		movs	r3, #0
 773 0034 234A     		ldr	r2, .L55+20
 774 0036 5362     		str	r3, [r2, #36]
 522:Src/main.c    **** 
 775              		.loc 1 522 0
 776 0038 02F58062 		add	r2, r2, #1024
 777 003c 5362     		str	r3, [r2, #36]
 524:Src/main.c    **** 
 778              		.loc 1 524 0
 779 003e 0193     		str	r3, [sp, #4]
 780 0040 0293     		str	r3, [sp, #8]
 781 0042 0393     		str	r3, [sp, #12]
 782 0044 0493     		str	r3, [sp, #16]
 783 0046 ADF81430 		strh	r3, [sp, #20]	@ movhi
 526:Src/main.c    ****     {
 784              		.loc 1 526 0
 785 004a 1DB3     		cbz	r5, .L51
 528:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 786              		.loc 1 528 0
 787 004c 1846     		mov	r0, r3
 788 004e 1946     		mov	r1, r3
 789 0050 FFF7FEFF 		bl	set_motor_speed
 790              	.LVL89:
 529:Src/main.c    ****         while (TIM5->CNT < counts)
 791              		.loc 1 529 0
 792 0054 0820     		movs	r0, #8
 793 0056 47F23051 		movw	r1, #30000
 794 005a FFF7FEFF 		bl	set_motor_speed
 795              	.LVL90:
 530:Src/main.c    ****         {
 796              		.loc 1 530 0
 797 005e 09E0     		b	.L52
 798              	.L53:
 532:Src/main.c    ****             print(msg, 4);
 799              		.loc 1 532 0
 800 0060 194B     		ldr	r3, .L55+24
 801 0062 5A6A     		ldr	r2, [r3, #36]
 802 0064 01A8     		add	r0, sp, #4
 803 0066 1949     		ldr	r1, .L55+28
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 27


 804 0068 FFF7FEFF 		bl	sprintf
 805              	.LVL91:
 533:Src/main.c    ****         }
 806              		.loc 1 533 0
 807 006c 01A8     		add	r0, sp, #4
 808 006e 0421     		movs	r1, #4
 809 0070 FFF7FEFF 		bl	print
 810              	.LVL92:
 811              	.L52:
 530:Src/main.c    ****         {
 812              		.loc 1 530 0
 813 0074 144B     		ldr	r3, .L55+24
 814 0076 5B6A     		ldr	r3, [r3, #36]
 815 0078 A342     		cmp	r3, r4
 816 007a F1D3     		bcc	.L53
 535:Src/main.c    ****         print(msg, 4);
 817              		.loc 1 535 0
 818 007c 124C     		ldr	r4, .L55+24
 819              	.LVL93:
 820 007e 626A     		ldr	r2, [r4, #36]
 821 0080 01A8     		add	r0, sp, #4
 822 0082 1249     		ldr	r1, .L55+28
 823 0084 FFF7FEFF 		bl	sprintf
 824              	.LVL94:
 536:Src/main.c    ****         TIM5->CNT = 0;
 825              		.loc 1 536 0
 826 0088 01A8     		add	r0, sp, #4
 827 008a 0421     		movs	r1, #4
 828 008c FFF7FEFF 		bl	print
 829              	.LVL95:
 537:Src/main.c    ****     }
 830              		.loc 1 537 0
 831 0090 0023     		movs	r3, #0
 832 0092 6362     		str	r3, [r4, #36]
 833              	.L51:
 552:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 834              		.loc 1 552 0
 835 0094 0020     		movs	r0, #0
 836 0096 0146     		mov	r1, r0
 837 0098 FFF7FEFF 		bl	set_motor_speed
 838              	.LVL96:
 553:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 839              		.loc 1 553 0
 840 009c 0820     		movs	r0, #8
 841 009e 0021     		movs	r1, #0
 842 00a0 FFF7FEFF 		bl	set_motor_speed
 843              	.LVL97:
 554:Src/main.c    **** }
 844              		.loc 1 554 0
 845 00a4 0448     		ldr	r0, .L55+8
 846 00a6 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 847              	.LVL98:
 555:Src/main.c    **** 
 848              		.loc 1 555 0
 849 00aa 07B0     		add	sp, sp, #28
 850              	.LCFI16:
 851              		.cfi_def_cfa_offset 12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 28


 852              		@ sp needed
 853 00ac 30BD     		pop	{r4, r5, pc}
 854              	.L56:
 855 00ae 00BF     		.align	3
 856              	.L55:
 857 00b0 721CC771 		.word	1908874354
 858 00b4 1CC7E13F 		.word	1071761180
 859 00b8 00000000 		.word	hadc1
 860 00bc 00000000 		.word	dma_buffer
 861 00c0 00004940 		.word	1078525952
 862 00c4 00080040 		.word	1073743872
 863 00c8 000C0040 		.word	1073744896
 864 00cc 28000000 		.word	.LC4
 865              		.cfi_endproc
 866              	.LFE130:
 868              		.section	.text.encoder_pid,"ax",%progbits
 869              		.align	2
 870              		.global	encoder_pid
 871              		.thumb
 872              		.thumb_func
 874              	encoder_pid:
 875              	.LFB136:
 645:Src/main.c    **** }
 646:Src/main.c    **** 
 647:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 648:Src/main.c    **** {
 876              		.loc 1 648 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 0, uses_anonymous_args = 0
 880              	.LVL99:
 881 0000 38B5     		push	{r3, r4, r5, lr}
 882              	.LCFI17:
 883              		.cfi_def_cfa_offset 16
 884              		.cfi_offset 3, -16
 885              		.cfi_offset 4, -12
 886              		.cfi_offset 5, -8
 887              		.cfi_offset 14, -4
 649:Src/main.c    ****     /* Get error */
 650:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
 888              		.loc 1 650 0
 889 0002 0E4B     		ldr	r3, .L61
 890 0004 5C6A     		ldr	r4, [r3, #36]
 891              	.LVL100:
 651:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
 892              		.loc 1 651 0
 893 0006 03F58063 		add	r3, r3, #1024
 894 000a 5D6A     		ldr	r5, [r3, #36]
 895              	.LVL101:
 652:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
 896              		.loc 1 652 0
 897 000c 631B     		subs	r3, r4, r5
 898 000e 0361     		str	r3, [r0, #16]
 653:Src/main.c    **** 
 654:Src/main.c    ****     /* Get gain */
 655:Src/main.c    ****     // Gain <0 for ride side faster
 656:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 29


 899              		.loc 1 656 0
 900 0010 FFF7FEFF 		bl	pid_GetGain
 901              	.LVL102:
 657:Src/main.c    **** 
 658:Src/main.c    ****     /* Set Motor Speeds*/
 659:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 660:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 661:Src/main.c    ****     if (gain < 0)
 662:Src/main.c    ****     {
 663:Src/main.c    ****         lspeed -= gain;
 664:Src/main.c    ****     }
 665:Src/main.c    ****     else if (gain > 0)
 666:Src/main.c    ****     {
 667:Src/main.c    ****         rspeed += gain;
 668:Src/main.c    ****     }
 669:Src/main.c    **** 
 670:Src/main.c    ****     // char msg[18] = "";
 671:Src/main.c    ****     // sprintf(msg, "LS: %lu", lspeed);
 672:Src/main.c    ****     // print(msg, 0);
 673:Src/main.c    ****     // sprintf(msg, "RS: %lu", rspeed);
 674:Src/main.c    ****     // print(msg, 1);
 675:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, lspeed);
 676:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, rspeed);
 677:Src/main.c    **** 
 678:Src/main.c    ****     /* Prevent weird overflow shit */
 679:Src/main.c    ****     if (lcnt > 60000 || rcnt > 60000)
 902              		.loc 1 679 0
 903 0014 4EF66023 		movw	r3, #60000
 904 0018 9C42     		cmp	r4, r3
 905 001a 01D8     		bhi	.L58
 906              		.loc 1 679 0 is_stmt 0 discriminator 1
 907 001c 9D42     		cmp	r5, r3
 908 001e 0CD9     		bls	.L57
 909              	.L58:
 680:Src/main.c    ****     {
 681:Src/main.c    ****         TIM4->CNT -= 50000;
 910              		.loc 1 681 0 is_stmt 1
 911 0020 064A     		ldr	r2, .L61
 912 0022 536A     		ldr	r3, [r2, #36]
 913 0024 A3F54343 		sub	r3, r3, #49920
 914 0028 503B     		subs	r3, r3, #80
 915 002a 5362     		str	r3, [r2, #36]
 916              	.LVL103:
 682:Src/main.c    ****         TIM5->CNT -= 50000;
 917              		.loc 1 682 0
 918 002c 02F58062 		add	r2, r2, #1024
 919 0030 536A     		ldr	r3, [r2, #36]
 920 0032 A3F54343 		sub	r3, r3, #49920
 921 0036 503B     		subs	r3, r3, #80
 922 0038 5362     		str	r3, [r2, #36]
 923              	.L57:
 924 003a 38BD     		pop	{r3, r4, r5, pc}
 925              	.LVL104:
 926              	.L62:
 927              		.align	2
 928              	.L61:
 929 003c 00080040 		.word	1073743872
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 30


 930              		.cfi_endproc
 931              	.LFE136:
 933              		.section	.text.drive_straight,"ax",%progbits
 934              		.align	2
 935              		.global	drive_straight
 936              		.thumb
 937              		.thumb_func
 939              	drive_straight:
 940              	.LFB128:
 455:Src/main.c    ****     encoder_pid(enc_pid);
 941              		.loc 1 455 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 0
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              	.LVL105:
 946 0000 08B5     		push	{r3, lr}
 947              	.LCFI18:
 948              		.cfi_def_cfa_offset 8
 949              		.cfi_offset 3, -8
 950              		.cfi_offset 14, -4
 456:Src/main.c    ****     HAL_Delay(10);
 951              		.loc 1 456 0
 952 0002 FFF7FEFF 		bl	encoder_pid
 953              	.LVL106:
 457:Src/main.c    **** }
 954              		.loc 1 457 0
 955 0006 0A20     		movs	r0, #10
 956 0008 FFF7FEFF 		bl	HAL_Delay
 957              	.LVL107:
 958 000c 08BD     		pop	{r3, pc}
 959              		.cfi_endproc
 960              	.LFE128:
 962 000e 00BF     		.section	.text.square_edge,"ax",%progbits
 963              		.align	2
 964              		.global	square_edge
 965              		.thumb
 966              		.thumb_func
 968              	square_edge:
 969              	.LFB126:
 419:Src/main.c    ****     while (1)
 970              		.loc 1 419 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974              	.LVL108:
 975 0000 10B5     		push	{r4, lr}
 976              	.LCFI19:
 977              		.cfi_def_cfa_offset 8
 978              		.cfi_offset 4, -8
 979              		.cfi_offset 14, -4
 980 0002 0446     		mov	r4, r0
 981              	.LVL109:
 982              	.L66:
 422:Src/main.c    ****         if (EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED)
 983              		.loc 1 422 0
 984 0004 2046     		mov	r0, r4
 985 0006 FFF7FEFF 		bl	drive_straight
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 31


 986              	.LVL110:
 423:Src/main.c    ****         {
 987              		.loc 1 423 0
 988 000a 0E4B     		ldr	r3, .L72
 989 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 990 000e 012B     		cmp	r3, #1
 991 0010 03D0     		beq	.L67
 423:Src/main.c    ****         {
 992              		.loc 1 423 0 is_stmt 0 discriminator 1
 993 0012 0D4A     		ldr	r2, .L72+4
 994 0014 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 995 0016 012A     		cmp	r2, #1
 996 0018 0ED1     		bne	.L68
 997              	.L67:
 425:Src/main.c    ****             {
 998              		.loc 1 425 0 is_stmt 1
 999 001a 012B     		cmp	r3, #1
 1000 001c 03D1     		bne	.L69
 427:Src/main.c    ****             }
 1001              		.loc 1 427 0
 1002 001e 0020     		movs	r0, #0
 1003 0020 0146     		mov	r1, r0
 1004 0022 FFF7FEFF 		bl	set_motor_speed
 1005              	.LVL111:
 1006              	.L69:
 429:Src/main.c    ****             {
 1007              		.loc 1 429 0
 1008 0026 084B     		ldr	r3, .L72+4
 1009 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1010 002a 012B     		cmp	r3, #1
 1011 002c EAD1     		bne	.L66
 431:Src/main.c    ****             }
 1012              		.loc 1 431 0
 1013 002e 0820     		movs	r0, #8
 1014 0030 0021     		movs	r1, #0
 1015 0032 FFF7FEFF 		bl	set_motor_speed
 1016              	.LVL112:
 1017 0036 E5E7     		b	.L66
 1018              	.L68:
 434:Src/main.c    ****         {
 1019              		.loc 1 434 0
 1020 0038 012B     		cmp	r3, #1
 1021 003a E3D1     		bne	.L66
 434:Src/main.c    ****         {
 1022              		.loc 1 434 0 is_stmt 0 discriminator 1
 1023 003c 012A     		cmp	r2, #1
 1024 003e E1D1     		bne	.L66
 439:Src/main.c    **** 
 1025              		.loc 1 439 0 is_stmt 1
 1026 0040 10BD     		pop	{r4, pc}
 1027              	.LVL113:
 1028              	.L73:
 1029 0042 00BF     		.align	2
 1030              	.L72:
 1031 0044 00000000 		.word	EDGE_LEFT_STATE
 1032 0048 00000000 		.word	EDGE_RIGHT_STATE
 1033              		.cfi_endproc
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 32


 1034              	.LFE126:
 1036              		.section	.text.drive_straight_time,"ax",%progbits
 1037              		.align	2
 1038              		.global	drive_straight_time
 1039              		.thumb
 1040              		.thumb_func
 1042              	drive_straight_time:
 1043              	.LFB127:
 442:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 1044              		.loc 1 442 0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 0
 1047              		@ frame_needed = 0, uses_anonymous_args = 0
 1048              	.LVL114:
 1049 0000 70B5     		push	{r4, r5, r6, lr}
 1050              	.LCFI20:
 1051              		.cfi_def_cfa_offset 16
 1052              		.cfi_offset 4, -16
 1053              		.cfi_offset 5, -12
 1054              		.cfi_offset 6, -8
 1055              		.cfi_offset 14, -4
 1056 0002 0646     		mov	r6, r0
 1057 0004 1446     		mov	r4, r2
 1058 0006 1D46     		mov	r5, r3
 443:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1059              		.loc 1 443 0
 1060 0008 0020     		movs	r0, #0
 1061              	.LVL115:
 1062 000a FFF7FEFF 		bl	set_motor_speed
 1063              	.LVL116:
 444:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 1064              		.loc 1 444 0
 1065 000e 0820     		movs	r0, #8
 1066 0010 2146     		mov	r1, r4
 1067 0012 FFF7FEFF 		bl	set_motor_speed
 1068              	.LVL117:
 445:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 1069              		.loc 1 445 0
 1070 0016 FFF7FEFF 		bl	HAL_GetTick
 1071              	.LVL118:
 1072 001a 0446     		mov	r4, r0
 1073              	.LVL119:
 446:Src/main.c    ****     {
 1074              		.loc 1 446 0
 1075 001c 02E0     		b	.L75
 1076              	.LVL120:
 1077              	.L76:
 448:Src/main.c    ****     }
 1078              		.loc 1 448 0
 1079 001e 3046     		mov	r0, r6
 1080 0020 FFF7FEFF 		bl	drive_straight
 1081              	.LVL121:
 1082              	.L75:
 446:Src/main.c    ****     {
 1083              		.loc 1 446 0
 1084 0024 FFF7FEFF 		bl	HAL_GetTick
 1085              	.LVL122:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 33


 1086 0028 001B     		subs	r0, r0, r4
 1087 002a A842     		cmp	r0, r5
 1088 002c F7D3     		bcc	.L76
 450:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1089              		.loc 1 450 0
 1090 002e 0020     		movs	r0, #0
 1091 0030 0146     		mov	r1, r0
 1092 0032 FFF7FEFF 		bl	set_motor_speed
 1093              	.LVL123:
 451:Src/main.c    **** }
 1094              		.loc 1 451 0
 1095 0036 0820     		movs	r0, #8
 1096 0038 0021     		movs	r1, #0
 1097 003a FFF7FEFF 		bl	set_motor_speed
 1098              	.LVL124:
 1099 003e 70BD     		pop	{r4, r5, r6, pc}
 1100              		.cfi_endproc
 1101              	.LFE127:
 1103              		.section	.text.test_PWM_htim1,"ax",%progbits
 1104              		.align	2
 1105              		.global	test_PWM_htim1
 1106              		.thumb
 1107              		.thumb_func
 1109              	test_PWM_htim1:
 1110              	.LFB137:
 683:Src/main.c    ****     }
 684:Src/main.c    **** }
 685:Src/main.c    **** 
 686:Src/main.c    **** // ******
 687:Src/main.c    **** // TESTS
 688:Src/main.c    **** // ******
 689:Src/main.c    **** 
 690:Src/main.c    **** /*
 691:Src/main.c    ****  * Instructions:
 692:Src/main.c    ****  *      Run test_All() before the main while loop
 693:Src/main.c    ****  *      - Put a pull up resistor on htim3 PWM waves, measure voltage on pin
 694:Src/main.c    ****  *      - Measure voltage on pin of htim1
 695:Src/main.c    ****  *      - Give ADC pins values and read off of screen
 696:Src/main.c    ****  */
 697:Src/main.c    **** 
 698:Src/main.c    **** /*
 699:Src/main.c    ****  * Test PWM
 700:Src/main.c    ****  * Output: htim1 channel 1 through 4, PWM wave. Confirm these
 701:Src/main.c    ****  *         PWM waves via an oscilliscope.
 702:Src/main.c    ****  */
 703:Src/main.c    **** void test_PWM_htim1()
 704:Src/main.c    **** {
 1111              		.loc 1 704 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 0
 1114              		@ frame_needed = 0, uses_anonymous_args = 0
 1115 0000 10B5     		push	{r4, lr}
 1116              	.LCFI21:
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 4, -8
 1119              		.cfi_offset 14, -4
 705:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 34


 1120              		.loc 1 705 0
 1121 0002 0C4C     		ldr	r4, .L82
 1122 0004 2046     		mov	r0, r4
 1123 0006 0021     		movs	r1, #0
 1124 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1125              	.LVL125:
 706:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 707:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1126              		.loc 1 707 0
 1127 000c 2046     		mov	r0, r4
 1128 000e 0821     		movs	r1, #8
 1129 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1130              	.LVL126:
 708:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 709:Src/main.c    ****     int s = 0;
 1131              		.loc 1 709 0
 1132 0014 0024     		movs	r4, #0
 710:Src/main.c    ****     while (s < 1000)
 1133              		.loc 1 710 0
 1134 0016 08E0     		b	.L79
 1135              	.LVL127:
 1136              	.L80:
 711:Src/main.c    ****     {
 712:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, s);
 1137              		.loc 1 712 0
 1138 0018 064B     		ldr	r3, .L82
 1139 001a 1B68     		ldr	r3, [r3]
 1140 001c 5C63     		str	r4, [r3, #52]
 713:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 714:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, s);
 1141              		.loc 1 714 0
 1142 001e DC63     		str	r4, [r3, #60]
 715:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 716:Src/main.c    ****         s += 100;
 1143              		.loc 1 716 0
 1144 0020 6434     		adds	r4, r4, #100
 1145              	.LVL128:
 717:Src/main.c    ****         HAL_Delay(1000);
 1146              		.loc 1 717 0
 1147 0022 4FF47A70 		mov	r0, #1000
 1148 0026 FFF7FEFF 		bl	HAL_Delay
 1149              	.LVL129:
 1150              	.L79:
 710:Src/main.c    ****     {
 1151              		.loc 1 710 0
 1152 002a B4F57A7F 		cmp	r4, #1000
 1153 002e F3DB     		blt	.L80
 718:Src/main.c    ****     }
 719:Src/main.c    **** }
 1154              		.loc 1 719 0
 1155 0030 10BD     		pop	{r4, pc}
 1156              	.LVL130:
 1157              	.L83:
 1158 0032 00BF     		.align	2
 1159              	.L82:
 1160 0034 00000000 		.word	htim1
 1161              		.cfi_endproc
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 35


 1162              	.LFE137:
 1164              		.section	.text.test_PWM_htim3,"ax",%progbits
 1165              		.align	2
 1166              		.global	test_PWM_htim3
 1167              		.thumb
 1168              		.thumb_func
 1170              	test_PWM_htim3:
 1171              	.LFB138:
 720:Src/main.c    **** 
 721:Src/main.c    **** /*
 722:Src/main.c    ****  * Test PWM
 723:Src/main.c    ****  * Output: htim3 channel 1 through 3, PWM wave. Confirm these
 724:Src/main.c    ****  *         PWM waves via an oscilliscope.
 725:Src/main.c    ****  */
 726:Src/main.c    **** void test_PWM_htim3()
 727:Src/main.c    **** {
 1172              		.loc 1 727 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 0
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
 1176 0000 10B5     		push	{r4, lr}
 1177              	.LCFI22:
 1178              		.cfi_def_cfa_offset 8
 1179              		.cfi_offset 4, -8
 1180              		.cfi_offset 14, -4
 728:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1181              		.loc 1 728 0
 1182 0002 0F4C     		ldr	r4, .L88
 1183 0004 2046     		mov	r0, r4
 1184 0006 0021     		movs	r1, #0
 1185 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1186              	.LVL131:
 729:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1187              		.loc 1 729 0
 1188 000c 2046     		mov	r0, r4
 1189 000e 0421     		movs	r1, #4
 1190 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1191              	.LVL132:
 730:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1192              		.loc 1 730 0
 1193 0014 2046     		mov	r0, r4
 1194 0016 0821     		movs	r1, #8
 1195 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1196              	.LVL133:
 731:Src/main.c    **** 
 732:Src/main.c    ****     int s = 500;
 1197              		.loc 1 732 0
 1198 001c 4FF4FA74 		mov	r4, #500
 733:Src/main.c    ****     while (s < 2400)
 1199              		.loc 1 733 0
 1200 0020 09E0     		b	.L85
 1201              	.LVL134:
 1202              	.L86:
 734:Src/main.c    ****     {
 735:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s);
 1203              		.loc 1 735 0
 1204 0022 074B     		ldr	r3, .L88
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 36


 1205 0024 1B68     		ldr	r3, [r3]
 1206 0026 5C63     		str	r4, [r3, #52]
 736:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s);
 1207              		.loc 1 736 0
 1208 0028 9C63     		str	r4, [r3, #56]
 737:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, s);
 1209              		.loc 1 737 0
 1210 002a DC63     		str	r4, [r3, #60]
 738:Src/main.c    ****         s += 100;
 1211              		.loc 1 738 0
 1212 002c 6434     		adds	r4, r4, #100
 1213              	.LVL135:
 739:Src/main.c    ****         HAL_Delay(500);
 1214              		.loc 1 739 0
 1215 002e 4FF4FA70 		mov	r0, #500
 1216 0032 FFF7FEFF 		bl	HAL_Delay
 1217              	.LVL136:
 1218              	.L85:
 733:Src/main.c    ****     {
 1219              		.loc 1 733 0
 1220 0036 B4F5166F 		cmp	r4, #2400
 1221 003a F2DB     		blt	.L86
 740:Src/main.c    ****     }
 741:Src/main.c    **** }
 1222              		.loc 1 741 0
 1223 003c 10BD     		pop	{r4, pc}
 1224              	.LVL137:
 1225              	.L89:
 1226 003e 00BF     		.align	2
 1227              	.L88:
 1228 0040 00000000 		.word	htim3
 1229              		.cfi_endproc
 1230              	.LFE138:
 1232              		.section	.text.test_ADC,"ax",%progbits
 1233              		.align	2
 1234              		.global	test_ADC
 1235              		.thumb
 1236              		.thumb_func
 1238              	test_ADC:
 1239              	.LFB139:
 742:Src/main.c    **** 
 743:Src/main.c    **** void test_ADC()
 744:Src/main.c    **** {
 1240              		.loc 1 744 0
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 24
 1243              		@ frame_needed = 0, uses_anonymous_args = 0
 1244 0000 10B5     		push	{r4, lr}
 1245              	.LCFI23:
 1246              		.cfi_def_cfa_offset 8
 1247              		.cfi_offset 4, -8
 1248              		.cfi_offset 14, -4
 1249 0002 86B0     		sub	sp, sp, #24
 1250              	.LCFI24:
 1251              		.cfi_def_cfa_offset 32
 745:Src/main.c    ****     char msg[18] = "";
 1252              		.loc 1 745 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 37


 1253 0004 0023     		movs	r3, #0
 1254 0006 0193     		str	r3, [sp, #4]
 1255 0008 0293     		str	r3, [sp, #8]
 1256 000a 0393     		str	r3, [sp, #12]
 1257 000c 0493     		str	r3, [sp, #16]
 1258 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
 746:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1259              		.loc 1 746 0
 1260 0012 0F48     		ldr	r0, .L93
 1261 0014 0F49     		ldr	r1, .L93+4
 1262 0016 4FF40062 		mov	r2, #2048
 1263 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1264              	.LVL138:
 1265              	.L91:
 1266              	.LBB2:
 747:Src/main.c    **** 
 748:Src/main.c    ****     while (1)
 749:Src/main.c    ****     {
 750:Src/main.c    ****         int ch_5 = adc_values[0];
 1267              		.loc 1 750 0 discriminator 1
 1268 001e 0E4B     		ldr	r3, .L93+8
 1269              	.LVL139:
 751:Src/main.c    ****         int ch_4 = adc_values[1];
 1270              		.loc 1 751 0 discriminator 1
 1271 0020 5C68     		ldr	r4, [r3, #4]
 1272              	.LVL140:
 752:Src/main.c    **** 
 753:Src/main.c    ****         sprintf(msg, "ch_5: %d", ch_5);
 1273              		.loc 1 753 0 discriminator 1
 1274 0022 01A8     		add	r0, sp, #4
 1275 0024 0D49     		ldr	r1, .L93+12
 1276 0026 1A68     		ldr	r2, [r3]
 1277 0028 FFF7FEFF 		bl	sprintf
 1278              	.LVL141:
 754:Src/main.c    ****         print(msg, 0);
 1279              		.loc 1 754 0 discriminator 1
 1280 002c 01A8     		add	r0, sp, #4
 1281 002e 0021     		movs	r1, #0
 1282 0030 FFF7FEFF 		bl	print
 1283              	.LVL142:
 755:Src/main.c    **** 
 756:Src/main.c    ****         sprintf(msg, "ch_4: %d", ch_4);
 1284              		.loc 1 756 0 discriminator 1
 1285 0034 01A8     		add	r0, sp, #4
 1286 0036 0A49     		ldr	r1, .L93+16
 1287 0038 2246     		mov	r2, r4
 1288 003a FFF7FEFF 		bl	sprintf
 1289              	.LVL143:
 757:Src/main.c    ****         print(msg, 2);
 1290              		.loc 1 757 0 discriminator 1
 1291 003e 01A8     		add	r0, sp, #4
 1292 0040 0221     		movs	r1, #2
 1293 0042 FFF7FEFF 		bl	print
 1294              	.LVL144:
 758:Src/main.c    **** 
 759:Src/main.c    ****         HAL_Delay(100);
 1295              		.loc 1 759 0 discriminator 1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 38


 1296 0046 6420     		movs	r0, #100
 1297 0048 FFF7FEFF 		bl	HAL_Delay
 1298              	.LVL145:
 1299              	.LBE2:
 760:Src/main.c    ****     }
 1300              		.loc 1 760 0 discriminator 1
 1301 004c E7E7     		b	.L91
 1302              	.L94:
 1303 004e 00BF     		.align	2
 1304              	.L93:
 1305 0050 00000000 		.word	hadc1
 1306 0054 00000000 		.word	dma_buffer
 1307 0058 00000000 		.word	adc_values
 1308 005c 48000000 		.word	.LC6
 1309 0060 54000000 		.word	.LC7
 1310              		.cfi_endproc
 1311              	.LFE139:
 1313              		.section	.text.test_All,"ax",%progbits
 1314              		.align	2
 1315              		.global	test_All
 1316              		.thumb
 1317              		.thumb_func
 1319              	test_All:
 1320              	.LFB140:
 761:Src/main.c    **** }
 762:Src/main.c    **** 
 763:Src/main.c    **** /**
 764:Src/main.c    ****  * Test all PWM and ADC - Read PWM waves, input ADC voltages 
 765:Src/main.c    ****  * and read values on OLED
 766:Src/main.c    ****  *      htim1 -> CH1, CH2, CH3, CH4
 767:Src/main.c    ****  *      htim3 -> CH1, CH2, CH3
 768:Src/main.c    ****  *      ADC   -> CH5, CH4
 769:Src/main.c    ****  */
 770:Src/main.c    **** void test_All()
 771:Src/main.c    **** {
 1321              		.loc 1 771 0
 1322              		.cfi_startproc
 1323              		@ Volatile: function does not return.
 1324              		@ args = 0, pretend = 0, frame = 0
 1325              		@ frame_needed = 0, uses_anonymous_args = 0
 1326 0000 08B5     		push	{r3, lr}
 1327              	.LCFI25:
 1328              		.cfi_def_cfa_offset 8
 1329              		.cfi_offset 3, -8
 1330              		.cfi_offset 14, -4
 772:Src/main.c    ****     test_PWM_htim1();
 1331              		.loc 1 772 0
 1332 0002 FFF7FEFF 		bl	test_PWM_htim1
 1333              	.LVL146:
 773:Src/main.c    ****     test_PWM_htim3();
 1334              		.loc 1 773 0
 1335 0006 FFF7FEFF 		bl	test_PWM_htim3
 1336              	.LVL147:
 774:Src/main.c    ****     test_ADC();
 1337              		.loc 1 774 0
 1338 000a FFF7FEFF 		bl	test_ADC
 1339              	.LVL148:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 39


 1340              		.cfi_endproc
 1341              	.LFE140:
 1343 000e 00BF     		.section	.text._Error_Handler,"ax",%progbits
 1344              		.align	2
 1345              		.global	_Error_Handler
 1346              		.thumb
 1347              		.thumb_func
 1349              	_Error_Handler:
 1350              	.LFB141:
 775:Src/main.c    **** }
 776:Src/main.c    **** // ******
 777:Src/main.c    **** // END TESTS
 778:Src/main.c    **** // ******
 779:Src/main.c    **** 
 780:Src/main.c    **** /* USER CODE END 4 */
 781:Src/main.c    **** 
 782:Src/main.c    **** /**
 783:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 784:Src/main.c    ****  * @param  file: The file name as string.
 785:Src/main.c    ****  * @param  line: The line in file as a number.
 786:Src/main.c    ****  * @retval None
 787:Src/main.c    ****  */
 788:Src/main.c    **** void _Error_Handler(char *file, int line)
 789:Src/main.c    **** {
 1351              		.loc 1 789 0
 1352              		.cfi_startproc
 1353              		@ Volatile: function does not return.
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 1356              		@ link register save eliminated.
 1357              	.LVL149:
 1358              	.L98:
 790:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 791:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 792:Src/main.c    ****     while (1)
 793:Src/main.c    ****     {
 794:Src/main.c    ****     }
 1359              		.loc 1 794 0 discriminator 1
 1360 0000 FEE7     		b	.L98
 1361              		.cfi_endproc
 1362              	.LFE141:
 1364 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1365              		.align	2
 1366              		.global	SystemClock_Config
 1367              		.thumb
 1368              		.thumb_func
 1370              	SystemClock_Config:
 1371              	.LFB125:
 364:Src/main.c    **** 
 1372              		.loc 1 364 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 80
 1375              		@ frame_needed = 0, uses_anonymous_args = 0
 1376 0000 00B5     		push	{lr}
 1377              	.LCFI26:
 1378              		.cfi_def_cfa_offset 4
 1379              		.cfi_offset 14, -4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 40


 1380 0002 95B0     		sub	sp, sp, #84
 1381              	.LCFI27:
 1382              		.cfi_def_cfa_offset 88
 1383              	.LBB3:
 371:Src/main.c    **** 
 1384              		.loc 1 371 0
 1385 0004 0022     		movs	r2, #0
 1386 0006 0192     		str	r2, [sp, #4]
 1387 0008 2A4B     		ldr	r3, .L103
 1388 000a 196C     		ldr	r1, [r3, #64]
 1389 000c 41F08051 		orr	r1, r1, #268435456
 1390 0010 1964     		str	r1, [r3, #64]
 1391 0012 1B6C     		ldr	r3, [r3, #64]
 1392 0014 03F08053 		and	r3, r3, #268435456
 1393 0018 0193     		str	r3, [sp, #4]
 1394 001a 019B     		ldr	r3, [sp, #4]
 1395              	.LBE3:
 1396              	.LBB4:
 373:Src/main.c    **** 
 1397              		.loc 1 373 0
 1398 001c 0292     		str	r2, [sp, #8]
 1399 001e 2649     		ldr	r1, .L103+4
 1400 0020 0B68     		ldr	r3, [r1]
 1401 0022 23F44043 		bic	r3, r3, #49152
 1402 0026 43F40043 		orr	r3, r3, #32768
 1403 002a 0B60     		str	r3, [r1]
 1404 002c 0B68     		ldr	r3, [r1]
 1405 002e 03F44043 		and	r3, r3, #49152
 1406 0032 0293     		str	r3, [sp, #8]
 1407 0034 029B     		ldr	r3, [sp, #8]
 1408              	.LBE4:
 377:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1409              		.loc 1 377 0
 1410 0036 0223     		movs	r3, #2
 1411 0038 0893     		str	r3, [sp, #32]
 378:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 1412              		.loc 1 378 0
 1413 003a 0121     		movs	r1, #1
 1414 003c 0B91     		str	r1, [sp, #44]
 379:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1415              		.loc 1 379 0
 1416 003e 1021     		movs	r1, #16
 1417 0040 0C91     		str	r1, [sp, #48]
 380:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1418              		.loc 1 380 0
 1419 0042 0E93     		str	r3, [sp, #56]
 381:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 1420              		.loc 1 381 0
 1421 0044 0F92     		str	r2, [sp, #60]
 382:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 1422              		.loc 1 382 0
 1423 0046 0822     		movs	r2, #8
 1424 0048 1092     		str	r2, [sp, #64]
 383:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1425              		.loc 1 383 0
 1426 004a 4822     		movs	r2, #72
 1427 004c 1192     		str	r2, [sp, #68]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 41


 384:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 1428              		.loc 1 384 0
 1429 004e 1293     		str	r3, [sp, #72]
 385:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1430              		.loc 1 385 0
 1431 0050 0423     		movs	r3, #4
 1432 0052 1393     		str	r3, [sp, #76]
 386:Src/main.c    ****     {
 1433              		.loc 1 386 0
 1434 0054 08A8     		add	r0, sp, #32
 1435 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1436              	.LVL150:
 1437 005a 20B1     		cbz	r0, .L100
 388:Src/main.c    ****     }
 1438              		.loc 1 388 0
 1439 005c 1748     		ldr	r0, .L103+8
 1440 005e 4FF4C271 		mov	r1, #388
 1441 0062 FFF7FEFF 		bl	_Error_Handler
 1442              	.LVL151:
 1443              	.L100:
 393:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1444              		.loc 1 393 0
 1445 0066 0F23     		movs	r3, #15
 1446 0068 0393     		str	r3, [sp, #12]
 394:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1447              		.loc 1 394 0
 1448 006a 0221     		movs	r1, #2
 1449 006c 0491     		str	r1, [sp, #16]
 395:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1450              		.loc 1 395 0
 1451 006e 0023     		movs	r3, #0
 1452 0070 0593     		str	r3, [sp, #20]
 396:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1453              		.loc 1 396 0
 1454 0072 4FF48052 		mov	r2, #4096
 1455 0076 0692     		str	r2, [sp, #24]
 397:Src/main.c    **** 
 1456              		.loc 1 397 0
 1457 0078 0793     		str	r3, [sp, #28]
 399:Src/main.c    ****     {
 1458              		.loc 1 399 0
 1459 007a 03A8     		add	r0, sp, #12
 1460 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1461              	.LVL152:
 1462 0080 20B1     		cbz	r0, .L101
 401:Src/main.c    ****     }
 1463              		.loc 1 401 0
 1464 0082 0E48     		ldr	r0, .L103+8
 1465 0084 40F29111 		movw	r1, #401
 1466 0088 FFF7FEFF 		bl	_Error_Handler
 1467              	.LVL153:
 1468              	.L101:
 406:Src/main.c    **** 
 1469              		.loc 1 406 0
 1470 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1471              	.LVL154:
 1472 0090 0B4B     		ldr	r3, .L103+12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 42


 1473 0092 A3FB0030 		umull	r3, r0, r3, r0
 1474 0096 8009     		lsrs	r0, r0, #6
 1475 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1476              	.LVL155:
 410:Src/main.c    **** 
 1477              		.loc 1 410 0
 1478 009c 0420     		movs	r0, #4
 1479 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1480              	.LVL156:
 413:Src/main.c    **** }
 1481              		.loc 1 413 0
 1482 00a2 4FF0FF30 		mov	r0, #-1
 1483 00a6 0021     		movs	r1, #0
 1484 00a8 0A46     		mov	r2, r1
 1485 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1486              	.LVL157:
 414:Src/main.c    **** 
 1487              		.loc 1 414 0
 1488 00ae 15B0     		add	sp, sp, #84
 1489              	.LCFI28:
 1490              		.cfi_def_cfa_offset 4
 1491              		@ sp needed
 1492 00b0 5DF804FB 		ldr	pc, [sp], #4
 1493              	.L104:
 1494              		.align	2
 1495              	.L103:
 1496 00b4 00380240 		.word	1073887232
 1497 00b8 00700040 		.word	1073770496
 1498 00bc 60000000 		.word	.LC8
 1499 00c0 D34D6210 		.word	274877907
 1500              		.cfi_endproc
 1501              	.LFE125:
 1503              		.section	.text.main,"ax",%progbits
 1504              		.align	2
 1505              		.global	main
 1506              		.thumb
 1507              		.thumb_func
 1509              	main:
 1510              	.LFB124:
 111:Src/main.c    ****     /* USER CODE BEGIN 1 */
 1511              		.loc 1 111 0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 24
 1514              		@ frame_needed = 0, uses_anonymous_args = 0
 1515 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1516              	.LCFI29:
 1517              		.cfi_def_cfa_offset 24
 1518              		.cfi_offset 4, -24
 1519              		.cfi_offset 5, -20
 1520              		.cfi_offset 6, -16
 1521              		.cfi_offset 7, -12
 1522              		.cfi_offset 8, -8
 1523              		.cfi_offset 14, -4
 1524 0004 88B0     		sub	sp, sp, #32
 1525              	.LCFI30:
 1526              		.cfi_def_cfa_offset 56
 119:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 43


 1527              		.loc 1 119 0
 1528 0006 FFF7FEFF 		bl	HAL_Init
 1529              	.LVL158:
 126:Src/main.c    **** 
 1530              		.loc 1 126 0
 1531 000a FFF7FEFF 		bl	SystemClock_Config
 1532              	.LVL159:
 133:Src/main.c    ****     MX_DMA_Init();
 1533              		.loc 1 133 0
 1534 000e FFF7FEFF 		bl	MX_GPIO_Init
 1535              	.LVL160:
 134:Src/main.c    ****     MX_TIM3_Init();
 1536              		.loc 1 134 0
 1537 0012 FFF7FEFF 		bl	MX_DMA_Init
 1538              	.LVL161:
 135:Src/main.c    ****     MX_TIM1_Init();
 1539              		.loc 1 135 0
 1540 0016 FFF7FEFF 		bl	MX_TIM3_Init
 1541              	.LVL162:
 136:Src/main.c    ****     MX_TIM2_Init();
 1542              		.loc 1 136 0
 1543 001a FFF7FEFF 		bl	MX_TIM1_Init
 1544              	.LVL163:
 137:Src/main.c    ****     MX_ADC1_Init();
 1545              		.loc 1 137 0
 1546 001e FFF7FEFF 		bl	MX_TIM2_Init
 1547              	.LVL164:
 138:Src/main.c    ****     MX_I2C1_Init();
 1548              		.loc 1 138 0
 1549 0022 FFF7FEFF 		bl	MX_ADC1_Init
 1550              	.LVL165:
 139:Src/main.c    ****     MX_TIM4_Init();
 1551              		.loc 1 139 0
 1552 0026 FFF7FEFF 		bl	MX_I2C1_Init
 1553              	.LVL166:
 140:Src/main.c    ****     MX_TIM9_Init();
 1554              		.loc 1 140 0
 1555 002a FFF7FEFF 		bl	MX_TIM4_Init
 1556              	.LVL167:
 141:Src/main.c    ****     MX_TIM5_Init();
 1557              		.loc 1 141 0
 1558 002e FFF7FEFF 		bl	MX_TIM9_Init
 1559              	.LVL168:
 142:Src/main.c    ****     /* USER CODE BEGIN 2 */
 1560              		.loc 1 142 0
 1561 0032 FFF7FEFF 		bl	MX_TIM5_Init
 1562              	.LVL169:
 159:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1563              		.loc 1 159 0
 1564 0036 AC48     		ldr	r0, .L137
 1565 0038 1821     		movs	r1, #24
 1566 003a FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1567              	.LVL170:
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1568              		.loc 1 160 0
 1569 003e AB48     		ldr	r0, .L137+4
 1570 0040 1821     		movs	r1, #24
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 44


 1571 0042 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1572              	.LVL171:
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 1573              		.loc 1 161 0
 1574 0046 AA4C     		ldr	r4, .L137+8
 1575 0048 2046     		mov	r0, r4
 1576 004a 0021     		movs	r1, #0
 1577 004c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1578              	.LVL172:
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1579              		.loc 1 162 0
 1580 0050 2046     		mov	r0, r4
 1581 0052 0421     		movs	r1, #4
 1582 0054 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1583              	.LVL173:
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 1584              		.loc 1 163 0
 1585 0058 2046     		mov	r0, r4
 1586 005a 0821     		movs	r1, #8
 1587 005c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1588              	.LVL174:
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1589              		.loc 1 164 0
 1590 0060 2046     		mov	r0, r4
 1591 0062 0C21     		movs	r1, #12
 1592 0064 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1593              	.LVL175:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1594              		.loc 1 165 0
 1595 0068 A24C     		ldr	r4, .L137+12
 1596 006a 2046     		mov	r0, r4
 1597 006c 0021     		movs	r1, #0
 1598 006e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1599              	.LVL176:
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1600              		.loc 1 166 0
 1601 0072 2046     		mov	r0, r4
 1602 0074 0421     		movs	r1, #4
 1603 0076 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1604              	.LVL177:
 167:Src/main.c    **** 
 1605              		.loc 1 167 0
 1606 007a 2046     		mov	r0, r4
 1607 007c 0821     		movs	r1, #8
 1608 007e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1609              	.LVL178:
 170:Src/main.c    ****     print("Starting", 0);
 1610              		.loc 1 170 0
 1611 0082 FFF7FEFF 		bl	ssd1306_Init
 1612              	.LVL179:
 171:Src/main.c    ****     claw_init(&htim3);
 1613              		.loc 1 171 0
 1614 0086 9C48     		ldr	r0, .L137+16
 1615 0088 0021     		movs	r1, #0
 1616 008a FFF7FEFF 		bl	print
 1617              	.LVL180:
 172:Src/main.c    ****     basket_init(&htim3);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 45


 1618              		.loc 1 172 0
 1619 008e 2046     		mov	r0, r4
 1620 0090 FFF7FEFF 		bl	claw_init
 1621              	.LVL181:
 173:Src/main.c    **** 
 1622              		.loc 1 173 0
 1623 0094 2046     		mov	r0, r4
 1624 0096 FFF7FEFF 		bl	basket_init
 1625              	.LVL182:
 176:Src/main.c    **** 
 1626              		.loc 1 176 0
 1627 009a 0124     		movs	r4, #1
 1628 009c 0094     		str	r4, [sp]
 1629 009e 0194     		str	r4, [sp, #4]
 1630 00a0 02A8     		add	r0, sp, #8
 1631 00a2 2146     		mov	r1, r4
 1632 00a4 0022     		movs	r2, #0
 1633 00a6 1346     		mov	r3, r2
 1634 00a8 FFF7FEFF 		bl	pid_Init
 1635              	.LVL183:
 178:Src/main.c    **** 
 1636              		.loc 1 178 0
 1637 00ac 02A8     		add	r0, sp, #8
 1638 00ae 934B     		ldr	r3, .L137+20
 1639 00b0 1988     		ldrh	r1, [r3]
 1640 00b2 934B     		ldr	r3, .L137+24
 1641 00b4 1A88     		ldrh	r2, [r3]
 1642 00b6 4FF4FA53 		mov	r3, #8000
 1643 00ba FFF7FEFF 		bl	drive_straight_time
 1644              	.LVL184:
 181:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 1645              		.loc 1 181 0
 1646 00be 0620     		movs	r0, #6
 1647 00c0 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1648              	.LVL185:
 182:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 1649              		.loc 1 182 0
 1650 00c4 0025     		movs	r5, #0
 1651 00c6 8F4B     		ldr	r3, .L137+28
 1652 00c8 1D70     		strb	r5, [r3]
 183:Src/main.c    **** 
 1653              		.loc 1 183 0
 1654 00ca 8F4B     		ldr	r3, .L137+32
 1655 00cc 1D70     		strb	r5, [r3]
 185:Src/main.c    ****     /* USER CODE END 2 */
 1656              		.loc 1 185 0
 1657 00ce 8F48     		ldr	r0, .L137+36
 1658 00d0 4021     		movs	r1, #64
 1659 00d2 2246     		mov	r2, r4
 1660 00d4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1661              	.LVL186:
 1662              	.L106:
 196:Src/main.c    ****         {
 1663              		.loc 1 196 0
 1664 00d8 8A4B     		ldr	r3, .L137+28
 1665 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1666 00dc 012B     		cmp	r3, #1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 46


 1667 00de 40F09881 		bne	.L107
 1668              	.LBB5:
 198:Src/main.c    ****             print("in pi int", 0);
 1669              		.loc 1 198 0
 1670 00e2 8A48     		ldr	r0, .L137+36
 1671 00e4 4021     		movs	r1, #64
 1672 00e6 0022     		movs	r2, #0
 1673 00e8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1674              	.LVL187:
 199:Src/main.c    ****             turn();
 1675              		.loc 1 199 0
 1676 00ec 8848     		ldr	r0, .L137+40
 1677 00ee 0021     		movs	r1, #0
 1678 00f0 FFF7FEFF 		bl	print
 1679              	.LVL188:
 200:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1680              		.loc 1 200 0
 1681 00f4 FFF7FEFF 		bl	turn
 1682              	.LVL189:
 201:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1683              		.loc 1 201 0
 1684 00f8 0020     		movs	r0, #0
 1685 00fa 804B     		ldr	r3, .L137+20
 1686 00fc 1988     		ldrh	r1, [r3]
 1687 00fe FFF7FEFF 		bl	set_motor_speed
 1688              	.LVL190:
 202:Src/main.c    ****             HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 1689              		.loc 1 202 0
 1690 0102 0820     		movs	r0, #8
 1691 0104 7E4B     		ldr	r3, .L137+24
 1692 0106 1988     		ldrh	r1, [r3]
 1693 0108 FFF7FEFF 		bl	set_motor_speed
 1694              	.LVL191:
 203:Src/main.c    ****             uint32_t start = HAL_GetTick();
 1695              		.loc 1 203 0
 1696 010c 0A20     		movs	r0, #10
 1697 010e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1698              	.LVL192:
 204:Src/main.c    ****             while ((HAL_GetTick() - start) < 2500)
 1699              		.loc 1 204 0
 1700 0112 FFF7FEFF 		bl	HAL_GetTick
 1701              	.LVL193:
 1702 0116 0446     		mov	r4, r0
 1703              	.LVL194:
 205:Src/main.c    ****             {
 1704              		.loc 1 205 0
 1705 0118 62E1     		b	.L108
 1706              	.LVL195:
 1707              	.L133:
 207:Src/main.c    ****                 if (CLAW_INT_STATE == FLAGGED)
 1708              		.loc 1 207 0
 1709 011a 02A8     		add	r0, sp, #8
 1710 011c FFF7FEFF 		bl	drive_straight
 1711              	.LVL196:
 208:Src/main.c    ****                 {
 1712              		.loc 1 208 0
 1713 0120 794B     		ldr	r3, .L137+32
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 47


 1714 0122 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1715 0124 012B     		cmp	r3, #1
 1716 0126 40F05B81 		bne	.L108
 1717              	.LBB6:
 210:Src/main.c    ****                     while (HAL_GetTick() - timeee < 20)
 1718              		.loc 1 210 0
 1719 012a FFF7FEFF 		bl	HAL_GetTick
 1720              	.LVL197:
 1721 012e 0446     		mov	r4, r0
 1722              	.LVL198:
 211:Src/main.c    ****                     {
 1723              		.loc 1 211 0
 1724 0130 0BE0     		b	.L110
 1725              	.LVL199:
 1726              	.L111:
 213:Src/main.c    ****                         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 1727              		.loc 1 213 0
 1728 0132 0520     		movs	r0, #5
 1729 0134 FFF7FEFF 		bl	HAL_Delay
 1730              	.LVL200:
 214:Src/main.c    ****                         {
 1731              		.loc 1 214 0
 1732 0138 7648     		ldr	r0, .L137+44
 1733 013a 1021     		movs	r1, #16
 1734 013c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1735              	.LVL201:
 1736 0140 0128     		cmp	r0, #1
 1737 0142 02D1     		bne	.L110
 216:Src/main.c    ****                         }
 1738              		.loc 1 216 0
 1739 0144 0022     		movs	r2, #0
 1740 0146 704B     		ldr	r3, .L137+32
 1741 0148 1A70     		strb	r2, [r3]
 1742              	.L110:
 211:Src/main.c    ****                     {
 1743              		.loc 1 211 0
 1744 014a FFF7FEFF 		bl	HAL_GetTick
 1745              	.LVL202:
 1746 014e 001B     		subs	r0, r0, r4
 1747 0150 1328     		cmp	r0, #19
 1748 0152 EED9     		bls	.L111
 219:Src/main.c    ****                         break;
 1749              		.loc 1 219 0
 1750 0154 6C4B     		ldr	r3, .L137+32
 1751 0156 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1752 0158 002B     		cmp	r3, #0
 1753 015a 00F04981 		beq	.L112
 222:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 1754              		.loc 1 222 0
 1755 015e 4FF4C870 		mov	r0, #400
 1756 0162 FFF7FEFF 		bl	HAL_Delay
 1757              	.LVL203:
 223:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 1758              		.loc 1 223 0
 1759 0166 0020     		movs	r0, #0
 1760 0168 0146     		mov	r1, r0
 1761 016a FFF7FEFF 		bl	set_motor_speed
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 48


 1762              	.LVL204:
 224:Src/main.c    ****                     close_claw(&htim3);
 1763              		.loc 1 224 0
 1764 016e 0820     		movs	r0, #8
 1765 0170 0021     		movs	r1, #0
 1766 0172 FFF7FEFF 		bl	set_motor_speed
 1767              	.LVL205:
 225:Src/main.c    ****                     arm_up(&htim3);
 1768              		.loc 1 225 0
 1769 0176 5F4E     		ldr	r6, .L137+12
 1770 0178 3046     		mov	r0, r6
 1771 017a FFF7FEFF 		bl	close_claw
 1772              	.LVL206:
 226:Src/main.c    ****                     HAL_NVIC_DisableIRQ(CLAW_INT_EXTI_IRQn);
 1773              		.loc 1 226 0
 1774 017e 3046     		mov	r0, r6
 1775 0180 FFF7FEFF 		bl	arm_up
 1776              	.LVL207:
 227:Src/main.c    ****                     CLAW_INT_STATE = NOT_FLAGGED;
 1777              		.loc 1 227 0
 1778 0184 0A20     		movs	r0, #10
 1779 0186 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1780              	.LVL208:
 228:Src/main.c    ****                     ++ewok_cnt;
 1781              		.loc 1 228 0
 1782 018a 0022     		movs	r2, #0
 1783 018c 5E4B     		ldr	r3, .L137+32
 1784 018e 1A70     		strb	r2, [r3]
 229:Src/main.c    ****                     // char msg[18] = "";
 1785              		.loc 1 229 0
 1786 0190 0135     		adds	r5, r5, #1
 1787              	.LVL209:
 1788 0192 EDB2     		uxtb	r5, r5
 1789              	.LVL210:
 239:Src/main.c    ****                     {
 1790              		.loc 1 239 0
 1791 0194 012D     		cmp	r5, #1
 1792 0196 11D1     		bne	.L113
 241:Src/main.c    ****                         open_claw(&htim3);
 1793              		.loc 1 241 0
 1794 0198 A120     		movs	r0, #161
 1795 019a FFF7FEFF 		bl	turn_deg
 1796              	.LVL211:
 242:Src/main.c    ****                         // square_edge(&enc_pid);
 1797              		.loc 1 242 0
 1798 019e 3046     		mov	r0, r6
 1799 01a0 FFF7FEFF 		bl	open_claw
 1800              	.LVL212:
 244:Src/main.c    ****                         arm_down(&htim3);
 1801              		.loc 1 244 0
 1802 01a4 02A8     		add	r0, sp, #8
 1803 01a6 554B     		ldr	r3, .L137+20
 1804 01a8 1988     		ldrh	r1, [r3]
 1805 01aa 554B     		ldr	r3, .L137+24
 1806 01ac 1A88     		ldrh	r2, [r3]
 1807 01ae 41F28833 		movw	r3, #5000
 1808 01b2 FFF7FEFF 		bl	drive_straight_time
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 49


 1809              	.LVL213:
 245:Src/main.c    ****                     }
 1810              		.loc 1 245 0
 1811 01b6 3046     		mov	r0, r6
 1812 01b8 FFF7FEFF 		bl	arm_down
 1813              	.LVL214:
 1814              	.L113:
 247:Src/main.c    ****                     {
 1815              		.loc 1 247 0
 1816 01bc 022D     		cmp	r5, #2
 1817 01be 58D1     		bne	.L114
 249:Src/main.c    ****                         alarm_detect();
 1818              		.loc 1 249 0
 1819 01c0 9220     		movs	r0, #146
 1820 01c2 FFF7FEFF 		bl	turn_deg
 1821              	.LVL215:
 250:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1822              		.loc 1 250 0
 1823 01c6 FFF7FEFF 		bl	alarm_detect
 1824              	.LVL216:
 251:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1825              		.loc 1 251 0
 1826 01ca 0820     		movs	r0, #8
 1827 01cc 4C4B     		ldr	r3, .L137+24
 1828 01ce 1988     		ldrh	r1, [r3]
 1829 01d0 FFF7FEFF 		bl	set_motor_speed
 1830              	.LVL217:
 252:Src/main.c    ****                         open_claw(&htim3);
 1831              		.loc 1 252 0
 1832 01d4 0020     		movs	r0, #0
 1833 01d6 494B     		ldr	r3, .L137+20
 1834 01d8 1988     		ldrh	r1, [r3]
 1835 01da FFF7FEFF 		bl	set_motor_speed
 1836              	.LVL218:
 253:Src/main.c    ****                         timeee = HAL_GetTick();
 1837              		.loc 1 253 0
 1838 01de 4548     		ldr	r0, .L137+12
 1839 01e0 FFF7FEFF 		bl	open_claw
 1840              	.LVL219:
 254:Src/main.c    ****                         while(HAL_GetTick()-timeee < 7000){
 1841              		.loc 1 254 0
 1842 01e4 FFF7FEFF 		bl	HAL_GetTick
 1843              	.LVL220:
 1844 01e8 0446     		mov	r4, r0
 1845              	.LVL221:
 255:Src/main.c    ****                             if((TAPE_LEFT_STATE == FLAGGED || TAPE_RIGHT_STATE == FLAGGED) && !(TAP
 1846              		.loc 1 255 0
 1847 01ea 38E0     		b	.L115
 1848              	.LVL222:
 1849              	.L122:
 256:Src/main.c    ****                                 if(TAPE_LEFT_STATE == FLAGGED){
 1850              		.loc 1 256 0
 1851 01ec 4A4B     		ldr	r3, .L137+48
 1852 01ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1853 01f0 012B     		cmp	r3, #1
 1854 01f2 03D0     		beq	.L116
 256:Src/main.c    ****                                 if(TAPE_LEFT_STATE == FLAGGED){
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 50


 1855              		.loc 1 256 0 is_stmt 0 discriminator 2
 1856 01f4 494A     		ldr	r2, .L137+52
 1857 01f6 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1858 01f8 012A     		cmp	r2, #1
 1859 01fa 30D1     		bne	.L115
 1860              	.L116:
 256:Src/main.c    ****                                 if(TAPE_LEFT_STATE == FLAGGED){
 1861              		.loc 1 256 0 discriminator 3
 1862 01fc 012B     		cmp	r3, #1
 1863 01fe 03D1     		bne	.L118
 256:Src/main.c    ****                                 if(TAPE_LEFT_STATE == FLAGGED){
 1864              		.loc 1 256 0 discriminator 4
 1865 0200 464A     		ldr	r2, .L137+52
 1866 0202 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1867 0204 012A     		cmp	r2, #1
 1868 0206 2AD0     		beq	.L115
 1869              	.L118:
 257:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, 0);
 1870              		.loc 1 257 0 is_stmt 1
 1871 0208 012B     		cmp	r3, #1
 1872 020a 12D1     		bne	.L119
 258:Src/main.c    ****                                     while(HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) == G
 1873              		.loc 1 258 0
 1874 020c 0820     		movs	r0, #8
 1875 020e 0021     		movs	r1, #0
 1876 0210 FFF7FEFF 		bl	set_motor_speed
 1877              	.LVL223:
 1878              	.L120:
 259:Src/main.c    ****                                     TAPE_LEFT_STATE = NOT_FLAGGED;
 1879              		.loc 1 259 0 discriminator 1
 1880 0214 3F48     		ldr	r0, .L137+44
 1881 0216 4FF48041 		mov	r1, #16384
 1882 021a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1883              	.LVL224:
 1884 021e 0128     		cmp	r0, #1
 1885 0220 F8D0     		beq	.L120
 260:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1886              		.loc 1 260 0
 1887 0222 0022     		movs	r2, #0
 1888 0224 3C4B     		ldr	r3, .L137+48
 1889 0226 1A70     		strb	r2, [r3]
 261:Src/main.c    ****                                 }
 1890              		.loc 1 261 0
 1891 0228 0820     		movs	r0, #8
 1892 022a 354B     		ldr	r3, .L137+24
 1893 022c 1988     		ldrh	r1, [r3]
 1894 022e FFF7FEFF 		bl	set_motor_speed
 1895              	.LVL225:
 1896              	.L119:
 263:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, 0);
 1897              		.loc 1 263 0
 1898 0232 3A4B     		ldr	r3, .L137+52
 1899 0234 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1900 0236 012B     		cmp	r3, #1
 1901 0238 11D1     		bne	.L115
 264:Src/main.c    ****                                     while(HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ==
 1902              		.loc 1 264 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 51


 1903 023a 0020     		movs	r0, #0
 1904 023c 0146     		mov	r1, r0
 1905 023e FFF7FEFF 		bl	set_motor_speed
 1906              	.LVL226:
 1907              	.L121:
 265:Src/main.c    ****                                     TAPE_RIGHT_STATE = NOT_FLAGGED;
 1908              		.loc 1 265 0 discriminator 1
 1909 0242 3448     		ldr	r0, .L137+44
 1910 0244 4FF40041 		mov	r1, #32768
 1911 0248 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1912              	.LVL227:
 1913 024c 0128     		cmp	r0, #1
 1914 024e F8D0     		beq	.L121
 266:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1915              		.loc 1 266 0
 1916 0250 0020     		movs	r0, #0
 1917 0252 324B     		ldr	r3, .L137+52
 1918 0254 1870     		strb	r0, [r3]
 267:Src/main.c    ****                                 }
 1919              		.loc 1 267 0
 1920 0256 294B     		ldr	r3, .L137+20
 1921 0258 1988     		ldrh	r1, [r3]
 1922 025a FFF7FEFF 		bl	set_motor_speed
 1923              	.LVL228:
 1924              	.L115:
 255:Src/main.c    ****                             if((TAPE_LEFT_STATE == FLAGGED || TAPE_RIGHT_STATE == FLAGGED) && !(TAP
 1925              		.loc 1 255 0
 1926 025e FFF7FEFF 		bl	HAL_GetTick
 1927              	.LVL229:
 1928 0262 001B     		subs	r0, r0, r4
 1929 0264 41F65733 		movw	r3, #6999
 1930 0268 9842     		cmp	r0, r3
 1931 026a BFD9     		bls	.L122
 271:Src/main.c    ****                     }
 1932              		.loc 1 271 0
 1933 026c 2148     		ldr	r0, .L137+12
 1934 026e FFF7FEFF 		bl	arm_down
 1935              	.LVL230:
 1936              	.L114:
 273:Src/main.c    ****                         turn_deg(110);
 1937              		.loc 1 273 0
 1938 0272 032D     		cmp	r5, #3
 1939 0274 25D1     		bne	.L123
 274:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1940              		.loc 1 274 0
 1941 0276 6E20     		movs	r0, #110
 1942 0278 FFF7FEFF 		bl	turn_deg
 1943              	.LVL231:
 275:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1944              		.loc 1 275 0
 1945 027c 204F     		ldr	r7, .L137+24
 1946 027e 0820     		movs	r0, #8
 1947 0280 3988     		ldrh	r1, [r7]
 1948 0282 FFF7FEFF 		bl	set_motor_speed
 1949              	.LVL232:
 276:Src/main.c    ****                         open_claw(&htim3);
 1950              		.loc 1 276 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 52


 1951 0286 DFF87480 		ldr	r8, .L137+20
 1952 028a 0020     		movs	r0, #0
 1953 028c B8F80010 		ldrh	r1, [r8]
 1954 0290 FFF7FEFF 		bl	set_motor_speed
 1955              	.LVL233:
 277:Src/main.c    ****                         drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 2000);
 1956              		.loc 1 277 0
 1957 0294 174E     		ldr	r6, .L137+12
 1958 0296 3046     		mov	r0, r6
 1959 0298 FFF7FEFF 		bl	open_claw
 1960              	.LVL234:
 278:Src/main.c    ****                         drive_straight_time(&enc_pid, 700, 700, 2000);
 1961              		.loc 1 278 0
 1962 029c 02A8     		add	r0, sp, #8
 1963 029e B8F80010 		ldrh	r1, [r8]
 1964 02a2 3A88     		ldrh	r2, [r7]
 1965 02a4 4FF4FA63 		mov	r3, #2000
 1966 02a8 FFF7FEFF 		bl	drive_straight_time
 1967              	.LVL235:
 279:Src/main.c    ****                         arm_down(&htim3);
 1968              		.loc 1 279 0
 1969 02ac 02A8     		add	r0, sp, #8
 1970 02ae 4FF42F71 		mov	r1, #700
 1971 02b2 0A46     		mov	r2, r1
 1972 02b4 4FF4FA63 		mov	r3, #2000
 1973 02b8 FFF7FEFF 		bl	drive_straight_time
 1974              	.LVL236:
 280:Src/main.c    ****                     }
 1975              		.loc 1 280 0
 1976 02bc 3046     		mov	r0, r6
 1977 02be FFF7FEFF 		bl	arm_down
 1978              	.LVL237:
 1979              	.L123:
 282:Src/main.c    ****                         turn_deg(150);
 1980              		.loc 1 282 0
 1981 02c2 042D     		cmp	r5, #4
 1982 02c4 6CD1     		bne	.L124
 283:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1983              		.loc 1 283 0
 1984 02c6 9620     		movs	r0, #150
 1985 02c8 FFF7FEFF 		bl	turn_deg
 1986              	.LVL238:
 284:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1987              		.loc 1 284 0
 1988 02cc 0820     		movs	r0, #8
 1989 02ce 0C4B     		ldr	r3, .L137+24
 1990 02d0 1988     		ldrh	r1, [r3]
 1991 02d2 FFF7FEFF 		bl	set_motor_speed
 1992              	.LVL239:
 285:Src/main.c    ****                         open_claw(&htim3);
 1993              		.loc 1 285 0
 1994 02d6 0020     		movs	r0, #0
 1995 02d8 084B     		ldr	r3, .L137+20
 1996 02da 1988     		ldrh	r1, [r3]
 1997 02dc FFF7FEFF 		bl	set_motor_speed
 1998              	.LVL240:
 286:Src/main.c    ****                         while(HAL_GetTick()-timeee < 8000){
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 53


 1999              		.loc 1 286 0
 2000 02e0 0448     		ldr	r0, .L137+12
 2001 02e2 FFF7FEFF 		bl	open_claw
 2002              	.LVL241:
 287:Src/main.c    ****                             if((EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED) && !(EDG
 2003              		.loc 1 287 0
 2004 02e6 52E0     		b	.L125
 2005              	.L138:
 2006              		.align	2
 2007              	.L137:
 2008 02e8 00000000 		.word	htim4
 2009 02ec 00000000 		.word	htim5
 2010 02f0 00000000 		.word	htim1
 2011 02f4 00000000 		.word	htim3
 2012 02f8 00000000 		.word	.LC0
 2013 02fc 00000000 		.word	.LANCHOR1
 2014 0300 00000000 		.word	.LANCHOR0
 2015 0304 00000000 		.word	PI_INT_STATE
 2016 0308 00000000 		.word	CLAW_INT_STATE
 2017 030c 00080240 		.word	1073874944
 2018 0310 6C000000 		.word	.LC9
 2019 0314 00040240 		.word	1073873920
 2020 0318 00000000 		.word	TAPE_LEFT_STATE
 2021 031c 00000000 		.word	TAPE_RIGHT_STATE
 2022              	.L132:
 288:Src/main.c    ****                                 if(EDGE_LEFT_STATE == FLAGGED){
 2023              		.loc 1 288 0
 2024 0320 484B     		ldr	r3, .L139
 2025 0322 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2026 0324 012B     		cmp	r3, #1
 2027 0326 03D0     		beq	.L126
 288:Src/main.c    ****                                 if(EDGE_LEFT_STATE == FLAGGED){
 2028              		.loc 1 288 0 is_stmt 0 discriminator 2
 2029 0328 474A     		ldr	r2, .L139+4
 2030 032a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2031 032c 012A     		cmp	r2, #1
 2032 032e 2ED1     		bne	.L125
 2033              	.L126:
 288:Src/main.c    ****                                 if(EDGE_LEFT_STATE == FLAGGED){
 2034              		.loc 1 288 0 discriminator 3
 2035 0330 012B     		cmp	r3, #1
 2036 0332 03D1     		bne	.L128
 288:Src/main.c    ****                                 if(EDGE_LEFT_STATE == FLAGGED){
 2037              		.loc 1 288 0 discriminator 4
 2038 0334 444A     		ldr	r2, .L139+4
 2039 0336 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2040 0338 012A     		cmp	r2, #1
 2041 033a 28D0     		beq	.L125
 2042              	.L128:
 289:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, 0);
 2043              		.loc 1 289 0 is_stmt 1
 2044 033c 012B     		cmp	r3, #1
 2045 033e 11D1     		bne	.L129
 290:Src/main.c    ****                                     while(HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == G
 2046              		.loc 1 290 0
 2047 0340 0820     		movs	r0, #8
 2048 0342 0021     		movs	r1, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 54


 2049 0344 FFF7FEFF 		bl	set_motor_speed
 2050              	.LVL242:
 2051              	.L130:
 291:Src/main.c    ****                                     EDGE_LEFT_STATE = NOT_FLAGGED;
 2052              		.loc 1 291 0 discriminator 1
 2053 0348 4048     		ldr	r0, .L139+8
 2054 034a 0421     		movs	r1, #4
 2055 034c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2056              	.LVL243:
 2057 0350 0028     		cmp	r0, #0
 2058 0352 F9D0     		beq	.L130
 292:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2059              		.loc 1 292 0
 2060 0354 0022     		movs	r2, #0
 2061 0356 3B4B     		ldr	r3, .L139
 2062 0358 1A70     		strb	r2, [r3]
 293:Src/main.c    ****                                 }
 2063              		.loc 1 293 0
 2064 035a 0820     		movs	r0, #8
 2065 035c 3C4B     		ldr	r3, .L139+12
 2066 035e 1988     		ldrh	r1, [r3]
 2067 0360 FFF7FEFF 		bl	set_motor_speed
 2068              	.LVL244:
 2069              	.L129:
 295:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, 0);
 2070              		.loc 1 295 0
 2071 0364 384B     		ldr	r3, .L139+4
 2072 0366 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2073 0368 012B     		cmp	r3, #1
 2074 036a 10D1     		bne	.L125
 296:Src/main.c    ****                                     while(HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) ==
 2075              		.loc 1 296 0
 2076 036c 0020     		movs	r0, #0
 2077 036e 0146     		mov	r1, r0
 2078 0370 FFF7FEFF 		bl	set_motor_speed
 2079              	.LVL245:
 2080              	.L131:
 297:Src/main.c    ****                                     EDGE_RIGHT_STATE = NOT_FLAGGED;
 2081              		.loc 1 297 0 discriminator 1
 2082 0374 3748     		ldr	r0, .L139+16
 2083 0376 0821     		movs	r1, #8
 2084 0378 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2085              	.LVL246:
 2086 037c 0028     		cmp	r0, #0
 2087 037e F9D0     		beq	.L131
 298:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2088              		.loc 1 298 0
 2089 0380 0020     		movs	r0, #0
 2090 0382 314B     		ldr	r3, .L139+4
 2091 0384 1870     		strb	r0, [r3]
 299:Src/main.c    ****                                 }
 2092              		.loc 1 299 0
 2093 0386 344B     		ldr	r3, .L139+20
 2094 0388 1988     		ldrh	r1, [r3]
 2095 038a FFF7FEFF 		bl	set_motor_speed
 2096              	.LVL247:
 2097              	.L125:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 55


 287:Src/main.c    ****                             if((EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED) && !(EDG
 2098              		.loc 1 287 0
 2099 038e FFF7FEFF 		bl	HAL_GetTick
 2100              	.LVL248:
 2101 0392 001B     		subs	r0, r0, r4
 2102 0394 B0F5FA5F 		cmp	r0, #8000
 2103 0398 C2D3     		bcc	.L132
 303:Src/main.c    ****                     }
 2104              		.loc 1 303 0
 2105 039a 3048     		ldr	r0, .L139+24
 2106 039c FFF7FEFF 		bl	arm_down
 2107              	.LVL249:
 2108              	.L124:
 305:Src/main.c    ****                         turn_deg(70);
 2109              		.loc 1 305 0
 2110 03a0 052D     		cmp	r5, #5
 2111 03a2 25D1     		bne	.L112
 306:Src/main.c    ****                         HAL_Delay(500);
 2112              		.loc 1 306 0
 2113 03a4 4620     		movs	r0, #70
 2114 03a6 FFF7FEFF 		bl	turn_deg
 2115              	.LVL250:
 307:Src/main.c    ****                         open_claw(&htim3);
 2116              		.loc 1 307 0
 2117 03aa 4FF4FA70 		mov	r0, #500
 2118 03ae FFF7FEFF 		bl	HAL_Delay
 2119              	.LVL251:
 308:Src/main.c    ****                         arm_down(&htim3);
 2120              		.loc 1 308 0
 2121 03b2 2A4C     		ldr	r4, .L139+24
 2122              	.LVL252:
 2123 03b4 2046     		mov	r0, r4
 2124 03b6 FFF7FEFF 		bl	open_claw
 2125              	.LVL253:
 309:Src/main.c    ****                         slow_actuate(&htim3, BASKET_CH, 10, 180);
 2126              		.loc 1 309 0
 2127 03ba 2046     		mov	r0, r4
 2128 03bc FFF7FEFF 		bl	arm_down
 2129              	.LVL254:
 310:Src/main.c    ****                         drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 3000);
 2130              		.loc 1 310 0
 2131 03c0 2046     		mov	r0, r4
 2132 03c2 0821     		movs	r1, #8
 2133 03c4 0A22     		movs	r2, #10
 2134 03c6 B423     		movs	r3, #180
 2135 03c8 FFF7FEFF 		bl	slow_actuate
 2136              	.LVL255:
 311:Src/main.c    ****                    } 
 2137              		.loc 1 311 0
 2138 03cc 02A8     		add	r0, sp, #8
 2139 03ce 224B     		ldr	r3, .L139+20
 2140 03d0 1988     		ldrh	r1, [r3]
 2141 03d2 1F4B     		ldr	r3, .L139+12
 2142 03d4 1A88     		ldrh	r2, [r3]
 2143 03d6 40F6B833 		movw	r3, #3000
 2144 03da FFF7FEFF 		bl	drive_straight_time
 2145              	.LVL256:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 56


 2146 03de 07E0     		b	.L112
 2147              	.LVL257:
 2148              	.L108:
 2149              	.LBE6:
 205:Src/main.c    ****             {
 2150              		.loc 1 205 0
 2151 03e0 FFF7FEFF 		bl	HAL_GetTick
 2152              	.LVL258:
 2153 03e4 001B     		subs	r0, r0, r4
 2154 03e6 40F6C313 		movw	r3, #2499
 2155 03ea 9842     		cmp	r0, r3
 2156 03ec 7FF695AE 		bls	.L133
 2157              	.LVL259:
 2158              	.L112:
 317:Src/main.c    ****             HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_SET);
 2159              		.loc 1 317 0
 2160 03f0 0024     		movs	r4, #0
 2161 03f2 1B4B     		ldr	r3, .L139+28
 2162 03f4 1C70     		strb	r4, [r3]
 318:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 2163              		.loc 1 318 0
 2164 03f6 1748     		ldr	r0, .L139+16
 2165 03f8 4021     		movs	r1, #64
 2166 03fa 0122     		movs	r2, #1
 2167 03fc FFF7FEFF 		bl	HAL_GPIO_WritePin
 2168              	.LVL260:
 319:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 2169              		.loc 1 319 0
 2170 0400 2046     		mov	r0, r4
 2171 0402 2146     		mov	r1, r4
 2172 0404 FFF7FEFF 		bl	set_motor_speed
 2173              	.LVL261:
 320:Src/main.c    ****         }
 2174              		.loc 1 320 0
 2175 0408 0820     		movs	r0, #8
 2176 040a 2146     		mov	r1, r4
 2177 040c FFF7FEFF 		bl	set_motor_speed
 2178              	.LVL262:
 2179              	.LBE5:
 2180 0410 62E6     		b	.L106
 2181              	.L107:
 2182              	.LBB7:
 327:Src/main.c    **** 
 2183              		.loc 1 327 0
 2184 0412 02A8     		add	r0, sp, #8
 2185 0414 104B     		ldr	r3, .L139+20
 2186 0416 1988     		ldrh	r1, [r3]
 2187 0418 0D4B     		ldr	r3, .L139+12
 2188 041a 1A88     		ldrh	r2, [r3]
 2189 041c 4FF4FA73 		mov	r3, #500
 2190 0420 FFF7FEFF 		bl	drive_straight_time
 2191              	.LVL263:
 329:Src/main.c    ****             while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED)
 2192              		.loc 1 329 0
 2193 0424 FFF7FEFF 		bl	HAL_GetTick
 2194              	.LVL264:
 2195 0428 0446     		mov	r4, r0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 57


 2196              	.LVL265:
 2197              	.L135:
 330:Src/main.c    ****                 ;
 2198              		.loc 1 330 0 discriminator 2
 2199 042a FFF7FEFF 		bl	HAL_GetTick
 2200              	.LVL266:
 2201 042e 001B     		subs	r0, r0, r4
 2202 0430 40F6B733 		movw	r3, #2999
 2203 0434 9842     		cmp	r0, r3
 2204 0436 3FF64FAE 		bhi	.L106
 330:Src/main.c    ****                 ;
 2205              		.loc 1 330 0 is_stmt 0 discriminator 1
 2206 043a 094B     		ldr	r3, .L139+28
 2207 043c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2208 043e 002B     		cmp	r3, #0
 2209 0440 F3D0     		beq	.L135
 2210 0442 49E6     		b	.L106
 2211              	.L140:
 2212              		.align	2
 2213              	.L139:
 2214 0444 00000000 		.word	EDGE_LEFT_STATE
 2215 0448 00000000 		.word	EDGE_RIGHT_STATE
 2216 044c 000C0240 		.word	1073875968
 2217 0450 00000000 		.word	.LANCHOR0
 2218 0454 00080240 		.word	1073874944
 2219 0458 00000000 		.word	.LANCHOR1
 2220 045c 00000000 		.word	htim3
 2221 0460 00000000 		.word	PI_INT_STATE
 2222              	.LBE7:
 2223              		.cfi_endproc
 2224              	.LFE124:
 2226              		.comm	adc_values,8192,4
 2227              		.comm	dma_buffer,8192,4
 2228              		.global	RIGHT_SPEED
 2229              		.global	LEFT_SPEED
 2230              		.section	.data.RIGHT_SPEED,"aw",%progbits
 2231              		.align	1
 2232              		.set	.LANCHOR0,. + 0
 2235              	RIGHT_SPEED:
 2236 0000 5802     		.short	600
 2237              		.section	.data.LEFT_SPEED,"aw",%progbits
 2238              		.align	1
 2239              		.set	.LANCHOR1,. + 0
 2242              	LEFT_SPEED:
 2243 0000 5802     		.short	600
 2244              		.section	.rodata.str1.4,"aMS",%progbits,1
 2245              		.align	2
 2246              	.LC0:
 2247 0000 53746172 		.ascii	"Starting\000"
 2247      74696E67 
 2247      00
 2248 0009 000000   		.space	3
 2249              	.LC1:
 2250 000c 256C7500 		.ascii	"%lu\000"
 2251              	.LC2:
 2252 0010 636E7473 		.ascii	"cnts: %d\000"
 2252      3A202564 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 58


 2252      00
 2253 0019 000000   		.space	3
 2254              	.LC3:
 2255 001c 766C7473 		.ascii	"vlts: %d.%d\000"
 2255      3A202564 
 2255      2E256400 
 2256              	.LC4:
 2257 0028 54494D35 		.ascii	"TIM5->CNT: %lu\000"
 2257      2D3E434E 
 2257      543A2025 
 2257      6C7500
 2258 0037 00       		.space	1
 2259              	.LC5:
 2260 0038 54494D34 		.ascii	"TIM4->CNT: %lu\000"
 2260      2D3E434E 
 2260      543A2025 
 2260      6C7500
 2261 0047 00       		.space	1
 2262              	.LC6:
 2263 0048 63685F35 		.ascii	"ch_5: %d\000"
 2263      3A202564 
 2263      00
 2264 0051 000000   		.space	3
 2265              	.LC7:
 2266 0054 63685F34 		.ascii	"ch_4: %d\000"
 2266      3A202564 
 2266      00
 2267 005d 000000   		.space	3
 2268              	.LC8:
 2269 0060 5372632F 		.ascii	"Src/main.c\000"
 2269      6D61696E 
 2269      2E6300
 2270 006b 00       		.space	1
 2271              	.LC9:
 2272 006c 696E2070 		.ascii	"in pi int\000"
 2272      6920696E 
 2272      7400
 2273              		.text
 2274              	.Letext0:
 2275              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2276              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2277              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2278              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2279              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2280              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2281              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2282              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2283              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2284              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2285              		.file 12 "Inc/fonts.h"
 2286              		.file 13 "Inc/ssd1306.h"
 2287              		.file 14 "Inc/pid.h"
 2288              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 2289              		.file 16 "Inc/adc.h"
 2290              		.file 17 "Inc/tim.h"
 2291              		.file 18 "Inc/extern_vars.h"
 2292              		.file 19 "Inc/filter.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 59


 2293              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2294              		.file 21 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2295              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2296              		.file 23 "Inc/claw.h"
 2297              		.file 24 "Inc/gpio.h"
 2298              		.file 25 "Inc/dma.h"
 2299              		.file 26 "Inc/i2c.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 60


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:104    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:109    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:183    .text.alarm_detect:0000000000000078 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:192    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:197    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:244    .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:249    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:254    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:367    .text.menu:000000000000009c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:374    .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:379    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:445    .text.set_motor_speed:000000000000004c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:452    .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:457    .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:703    .text.turn:0000000000000178 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:726    .text.turn_deg:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:731    .text.turn_deg:0000000000000000 turn_deg
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:857    .text.turn_deg:00000000000000b0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:869    .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:874    .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:929    .text.encoder_pid:000000000000003c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:934    .text.drive_straight:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:939    .text.drive_straight:0000000000000000 drive_straight
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:963    .text.square_edge:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:968    .text.square_edge:0000000000000000 square_edge
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1031   .text.square_edge:0000000000000044 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1037   .text.drive_straight_time:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1042   .text.drive_straight_time:0000000000000000 drive_straight_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1104   .text.test_PWM_htim1:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1109   .text.test_PWM_htim1:0000000000000000 test_PWM_htim1
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1160   .text.test_PWM_htim1:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1165   .text.test_PWM_htim3:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1170   .text.test_PWM_htim3:0000000000000000 test_PWM_htim3
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1228   .text.test_PWM_htim3:0000000000000040 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1233   .text.test_ADC:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1238   .text.test_ADC:0000000000000000 test_ADC
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1305   .text.test_ADC:0000000000000050 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1314   .text.test_All:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1319   .text.test_All:0000000000000000 test_All
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1344   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1349   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1365   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1370   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1496   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1504   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:1509   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:2008   .text.main:00000000000002e8 $d
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 61


/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:2024   .text.main:0000000000000320 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:2214   .text.main:0000000000000444 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:2235   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:2242   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:2231   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:2238   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s:2245   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
HAL_GPIO_ReadPin
sprintf
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dadd
pid_GetGain
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
HAL_GetTick
HAL_TIM_PWM_Start
htim3
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccJGWiq3.s 			page 62


MX_TIM9_Init
MX_TIM5_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
basket_init
HAL_NVIC_EnableIRQ
HAL_GPIO_WritePin
close_claw
arm_up
HAL_NVIC_DisableIRQ
open_claw
arm_down
htim4
htim5
PI_INT_STATE
CLAW_INT_STATE
TAPE_LEFT_STATE
TAPE_RIGHT_STATE
slow_actuate
