ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.print,"ax",%progbits
  21              		.align	2
  22              		.global	print
  23              		.thumb
  24              		.thumb_func
  26              	print:
  27              	.LFB125:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  ** This notice applies to any and all portions of this file
   8:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****  * inserted by the user or by software development tools
  11:Src/main.c    ****  * are owned by their respective copyright owners.
  12:Src/main.c    ****  *
  13:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****  *
  15:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****  * are permitted provided that the following conditions are met:
  17:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****  *      and/or other materials provided with the distribution.
  22:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****  *      without specific prior written permission.
  25:Src/main.c    ****  *
  26:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 2


  31:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****  *
  37:Src/main.c    ****  ******************************************************************************
  38:Src/main.c    ****  */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "stm32f4xx_it.h"
  43:Src/main.c    **** #include "adc.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "encoder.h"
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE BEGIN GV */
  58:Src/main.c    **** /* Global variables ---------------------------------------------------------*/
  59:Src/main.c    **** uint8_t PUSH_BUTTON_STATE = 0;
  60:Src/main.c    **** int LEFT_SPEED = 800;
  61:Src/main.c    **** int RIGHT_SPEED = 800;
  62:Src/main.c    **** /* USER CODE END GV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE BEGIN PV */
  65:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE END PV */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  70:Src/main.c    **** void SystemClock_Config(void);
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE BEGIN PFP */
  73:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  74:Src/main.c    **** void print(char msg[], int row);
  75:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]);
  76:Src/main.c    **** void do_pid(PID_t *pid_struct);
  77:Src/main.c    **** PID_t menu(void);
  78:Src/main.c    **** 
  79:Src/main.c    **** /* USER CODE END PFP */
  80:Src/main.c    **** 
  81:Src/main.c    **** /* USER CODE BEGIN 0 */
  82:Src/main.c    **** 
  83:Src/main.c    **** /* USER CODE END 0 */
  84:Src/main.c    **** 
  85:Src/main.c    **** /**
  86:Src/main.c    ****  * @brief  The application entry point.
  87:Src/main.c    ****  *
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 3


  88:Src/main.c    ****  * @retval None
  89:Src/main.c    ****  */
  90:Src/main.c    **** int main(void)
  91:Src/main.c    **** {
  92:Src/main.c    ****     /* USER CODE BEGIN 1 */
  93:Src/main.c    **** 
  94:Src/main.c    ****     /* USER CODE END 1 */
  95:Src/main.c    **** 
  96:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
  97:Src/main.c    **** 
  98:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  99:Src/main.c    ****     HAL_Init();
 100:Src/main.c    **** 
 101:Src/main.c    ****     /* USER CODE BEGIN Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****     /* USER CODE END Init */
 104:Src/main.c    **** 
 105:Src/main.c    ****     /* Configure the system clock */
 106:Src/main.c    ****     SystemClock_Config();
 107:Src/main.c    **** 
 108:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****     /* USER CODE END SysInit */
 111:Src/main.c    **** 
 112:Src/main.c    ****     /* Initialize all configured peripherals */
 113:Src/main.c    ****     MX_GPIO_Init();
 114:Src/main.c    ****     MX_TIM3_Init();
 115:Src/main.c    ****     MX_TIM5_Init();
 116:Src/main.c    ****     MX_TIM1_Init();
 117:Src/main.c    ****     MX_TIM2_Init();
 118:Src/main.c    ****     MX_USART6_UART_Init();
 119:Src/main.c    ****     MX_ADC1_Init();
 120:Src/main.c    ****     MX_I2C1_Init();
 121:Src/main.c    ****     MX_TIM4_Init();
 122:Src/main.c    ****     MX_TIM9_Init();
 123:Src/main.c    ****     ssd1306_Init();
 124:Src/main.c    ****     /* USER CODE BEGIN 2 */
 125:Src/main.c    **** 
 126:Src/main.c    ****     /* Initialize all timer related stuffs*/
 127:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 128:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 129:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 130:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 131:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 132:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 133:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 134:Src/main.c    **** 
 135:Src/main.c    **** 
 136:Src/main.c    ****     /* Initialize struct stuffs*/
 137:Src/main.c    ****     //PID_t pid_s = menu();
 138:Src/main.c    ****     ENCODER_t LEFT_ENCODER = encoder_Init();
 139:Src/main.c    **** 
 140:Src/main.c    ****     /* declare external variables for use with interrupts*/
 141:Src/main.c    **** 
 142:Src/main.c    **** 
 143:Src/main.c    ****     /* USER CODE END 2 */
 144:Src/main.c    ****     char msg[20] = "";
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 4


 145:Src/main.c    **** 
 146:Src/main.c    ****     /* Infinite loop */
 147:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 148:Src/main.c    ****     while (1)
 149:Src/main.c    ****     {
 150:Src/main.c    ****         //do_pid(&pid_s);
 151:Src/main.c    **** /*        uint8_t temp_cnt = TIM4->CNT;
 152:Src/main.c    ****         uint16_t temp_time = TIM9->CNT;
 153:Src/main.c    ****         uint16_t dt = temp_time<time? temp_time+1+(time^255): temp_time - time;
 154:Src/main.c    ****         
 155:Src/main.c    ****         int8_t dcnt;
 156:Src/main.c    ****         if(speed>0 && temp_cnt<cnt){
 157:Src/main.c    ****                 dcnt = temp_cnt+1+(cnt^255);
 158:Src/main.c    ****         }else if(speed<0 && temp_cnt>cnt){
 159:Src/main.c    ****             dcnt = -(cnt+1+(temp_cnt^255));
 160:Src/main.c    ****         }else if(temp_cnt>200 && cnt == 0 && speed==0){
 161:Src/main.c    ****             dcnt = -(1+(temp_cnt^255));
 162:Src/main.c    ****         }else{
 163:Src/main.c    ****             dcnt = temp_cnt - cnt;
 164:Src/main.c    ****         }
 165:Src/main.c    ****         speed = 2*3.14159265359*dcnt/100.0*0.6/(dt/(72000000/65535.0)); //cm/s
 166:Src/main.c    ****         
 167:Src/main.c    ****         sprintf(msg, "dC: %d", dcnt);
 168:Src/main.c    ****         print(msg, 0);
 169:Src/main.c    ****         sprintf(msg, "dT: %u", dt);
 170:Src/main.c    ****         print(msg, 1);
 171:Src/main.c    ****         sprintf(msg, "S: %d", (int)speed);
 172:Src/main.c    ****         print(msg, 2);
 173:Src/main.c    ****         cnt = temp_cnt;
 174:Src/main.c    ****         time = temp_time;
 175:Src/main.c    ****         HAL_Delay(50);
 176:Src/main.c    **** */
 177:Src/main.c    ****     sprintf(msg, "%d", (int)update_encoder(&LEFT_ENCODER, &htim4));
 178:Src/main.c    ****     print(msg, 0);
 179:Src/main.c    ****         /* USER CODE END WHILE */
 180:Src/main.c    **** 
 181:Src/main.c    ****         /* USER CODE BEGIN 3 */
 182:Src/main.c    **** 
 183:Src/main.c    ****     }
 184:Src/main.c    ****     /* USER CODE END 3 */
 185:Src/main.c    **** 
 186:Src/main.c    **** }
 187:Src/main.c    **** 
 188:Src/main.c    **** 
 189:Src/main.c    **** /**
 190:Src/main.c    ****  * @brief System Clock Configuration
 191:Src/main.c    ****  * @retval None
 192:Src/main.c    ****  */
 193:Src/main.c    **** void SystemClock_Config(void)
 194:Src/main.c    **** {
 195:Src/main.c    **** 
 196:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 197:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 198:Src/main.c    **** 
 199:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 200:Src/main.c    ****     */
 201:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 5


 202:Src/main.c    **** 
 203:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 204:Src/main.c    **** 
 205:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 206:Src/main.c    ****     */
 207:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 208:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 209:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 210:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 211:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 212:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 213:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 214:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 215:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 216:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 217:Src/main.c    ****     {
 218:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 219:Src/main.c    ****     }
 220:Src/main.c    **** 
 221:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 222:Src/main.c    ****     */
 223:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 224:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 225:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 226:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 227:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 228:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 229:Src/main.c    **** 
 230:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 231:Src/main.c    ****     {
 232:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 233:Src/main.c    ****     }
 234:Src/main.c    **** 
 235:Src/main.c    ****     /**Configure the Systick interrupt time 
 236:Src/main.c    ****     */
 237:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 238:Src/main.c    **** 
 239:Src/main.c    ****     /**Configure the Systick 
 240:Src/main.c    ****     */
 241:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 242:Src/main.c    **** 
 243:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 244:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 245:Src/main.c    **** }
 246:Src/main.c    **** 
 247:Src/main.c    **** /* USER CODE BEGIN 4 */
 248:Src/main.c    **** /*
 249:Src/main.c    ****  * Rows from 0 - 6
 250:Src/main.c    ****  * Reset screen when printing from row 0
 251:Src/main.c    ****  */
 252:Src/main.c    **** void print(char* msg, int row){
  29              		.loc 1 252 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 6


  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 3, -16
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 14, -4
  41 0002 0546     		mov	r5, r0
 253:Src/main.c    ****     if(row==0){
  42              		.loc 1 253 0
  43 0004 0C46     		mov	r4, r1
  44 0006 11B9     		cbnz	r1, .L2
 254:Src/main.c    ****         ssd1306_Fill(Black);
  45              		.loc 1 254 0
  46 0008 0020     		movs	r0, #0
  47              	.LVL1:
  48 000a FFF7FEFF 		bl	ssd1306_Fill
  49              	.LVL2:
  50              	.L2:
 255:Src/main.c    ****     }
 256:Src/main.c    ****     ssd1306_SetCursor(0,row*10);
  51              		.loc 1 256 0
  52 000e 04EB8404 		add	r4, r4, r4, lsl #2
  53              	.LVL3:
  54 0012 6100     		lsls	r1, r4, #1
  55 0014 0020     		movs	r0, #0
  56 0016 01F0FE01 		and	r1, r1, #254
  57 001a FFF7FEFF 		bl	ssd1306_SetCursor
  58              	.LVL4:
 257:Src/main.c    ****     ssd1306_WriteString(msg,Font_7x10,White);
  59              		.loc 1 257 0
  60 001e 054B     		ldr	r3, .L4
  61 0020 2846     		mov	r0, r5
  62 0022 93E80600 		ldmia	r3, {r1, r2}
  63 0026 0123     		movs	r3, #1
  64 0028 FFF7FEFF 		bl	ssd1306_WriteString
  65              	.LVL5:
 258:Src/main.c    ****     ssd1306_UpdateScreen();
  66              		.loc 1 258 0
  67 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
  68              	.LVL6:
  69 0030 38BD     		pop	{r3, r4, r5, pc}
  70              	.LVL7:
  71              	.L5:
  72 0032 00BF     		.align	2
  73              	.L4:
  74 0034 00000000 		.word	Font_7x10
  75              		.cfi_endproc
  76              	.LFE125:
  78              		.section	.text.menu,"ax",%progbits
  79              		.align	2
  80              		.global	menu
  81              		.thumb
  82              		.thumb_func
  84              	menu:
  85              	.LFB126:
 259:Src/main.c    **** }
 260:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 7


 261:Src/main.c    **** PID_t menu(void){
  86              		.loc 1 261 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 32
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              	.LVL8:
  91 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  92              	.LCFI1:
  93              		.cfi_def_cfa_offset 20
  94              		.cfi_offset 4, -20
  95              		.cfi_offset 5, -16
  96              		.cfi_offset 6, -12
  97              		.cfi_offset 7, -8
  98              		.cfi_offset 14, -4
  99 0002 8BB0     		sub	sp, sp, #44
 100              	.LCFI2:
 101              		.cfi_def_cfa_offset 64
 102 0004 0646     		mov	r6, r0
 262:Src/main.c    ****     print("Starting", 0);
 103              		.loc 1 262 0
 104 0006 5F48     		ldr	r0, .L20
 105              	.LVL9:
 106 0008 0021     		movs	r1, #0
 107 000a FFF7FEFF 		bl	print
 108              	.LVL10:
 263:Src/main.c    ****     char msg[20] = "";
 109              		.loc 1 263 0
 110 000e 0025     		movs	r5, #0
 111 0010 0595     		str	r5, [sp, #20]
 112 0012 0695     		str	r5, [sp, #24]
 113 0014 0795     		str	r5, [sp, #28]
 114 0016 0895     		str	r5, [sp, #32]
 115 0018 0995     		str	r5, [sp, #36]
 116              	.LVL11:
 264:Src/main.c    ****     int pid_select = 0;
 265:Src/main.c    ****     uint32_t values[3] = {0,0,0};
 117              		.loc 1 265 0
 118 001a 0295     		str	r5, [sp, #8]
 119 001c 0395     		str	r5, [sp, #12]
 120 001e 0495     		str	r5, [sp, #16]
 121              	.LVL12:
 122              	.L10:
 266:Src/main.c    ****     while(1){
 267:Src/main.c    ****         if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 123              		.loc 1 267 0
 124 0020 5948     		ldr	r0, .L20+4
 125 0022 4FF40051 		mov	r1, #8192
 126 0026 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 127              	.LVL13:
 128 002a 38BB     		cbnz	r0, .L7
 268:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 129              		.loc 1 268 0
 130 002c 0AAB     		add	r3, sp, #40
 131 002e 03EB8503 		add	r3, r3, r5, lsl #2
 132 0032 53F8204C 		ldr	r4, [r3, #-32]
 133 0036 05A8     		add	r0, sp, #20
 134 0038 5449     		ldr	r1, .L20+8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 8


 135 003a 2246     		mov	r2, r4
 136 003c FFF7FEFF 		bl	sprintf
 137              	.LVL14:
 269:Src/main.c    ****             print(msg, 0);
 138              		.loc 1 269 0
 139 0040 05A8     		add	r0, sp, #20
 140 0042 0021     		movs	r1, #0
 141 0044 FFF7FEFF 		bl	print
 142              	.LVL15:
 270:Src/main.c    ****             TIM4->CNT = values[pid_select];
 143              		.loc 1 270 0
 144 0048 514B     		ldr	r3, .L20+12
 145 004a 5C62     		str	r4, [r3, #36]
 271:Src/main.c    ****             while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 146              		.loc 1 271 0
 147 004c 0EE0     		b	.L8
 148              	.L9:
 272:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 149              		.loc 1 272 0
 150 004e 504B     		ldr	r3, .L20+12
 151 0050 5A6A     		ldr	r2, [r3, #36]
 152 0052 0AAB     		add	r3, sp, #40
 153 0054 03EB8503 		add	r3, r3, r5, lsl #2
 154 0058 43F8202C 		str	r2, [r3, #-32]
 273:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 155              		.loc 1 273 0
 156 005c 05A8     		add	r0, sp, #20
 157 005e 4B49     		ldr	r1, .L20+8
 158 0060 FFF7FEFF 		bl	sprintf
 159              	.LVL16:
 274:Src/main.c    ****                 print(msg, 0);
 160              		.loc 1 274 0
 161 0064 05A8     		add	r0, sp, #20
 162 0066 0021     		movs	r1, #0
 163 0068 FFF7FEFF 		bl	print
 164              	.LVL17:
 165              	.L8:
 271:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 166              		.loc 1 271 0
 167 006c 4648     		ldr	r0, .L20+4
 168 006e 4FF40051 		mov	r1, #8192
 169 0072 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 170              	.LVL18:
 171 0076 0028     		cmp	r0, #0
 172 0078 E9D0     		beq	.L9
 275:Src/main.c    ****             }
 276:Src/main.c    ****             ++pid_select;
 173              		.loc 1 276 0
 174 007a 0135     		adds	r5, r5, #1
 175              	.LVL19:
 176              	.L7:
 277:Src/main.c    ****         }
 278:Src/main.c    ****         if(pid_select==3) break;
 177              		.loc 1 278 0
 178 007c 032D     		cmp	r5, #3
 179 007e CFD1     		bne	.L10
 180              	.L18:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 9


 181              	.LVL20:
 182              	.LBB2:
 279:Src/main.c    ****     }
 280:Src/main.c    ****     while(1){
 281:Src/main.c    ****         int speed = 750;
 282:Src/main.c    ****         if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 183              		.loc 1 282 0
 184 0080 4148     		ldr	r0, .L20+4
 185 0082 4FF40051 		mov	r1, #8192
 186 0086 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 187              	.LVL21:
 188 008a 0028     		cmp	r0, #0
 189 008c 43D1     		bne	.L11
 283:Src/main.c    ****             if(pid_select==3){
 190              		.loc 1 283 0
 191 008e 032D     		cmp	r5, #3
 192 0090 09D1     		bne	.L12
 284:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 193              		.loc 1 284 0
 194 0092 404C     		ldr	r4, .L20+16
 195 0094 2046     		mov	r0, r4
 196 0096 0021     		movs	r1, #0
 197 0098 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 198              	.LVL22:
 285:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 199              		.loc 1 285 0
 200 009c 2046     		mov	r0, r4
 201 009e 0821     		movs	r1, #8
 202 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 203              	.LVL23:
 204 00a4 08E0     		b	.L13
 205              	.L12:
 286:Src/main.c    ****             }else{
 287:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 206              		.loc 1 287 0
 207 00a6 3B4C     		ldr	r4, .L20+16
 208 00a8 2046     		mov	r0, r4
 209 00aa 0021     		movs	r1, #0
 210 00ac FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 211              	.LVL24:
 288:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 212              		.loc 1 288 0
 213 00b0 2046     		mov	r0, r4
 214 00b2 0821     		movs	r1, #8
 215 00b4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 216              	.LVL25:
 217              	.L13:
 289:Src/main.c    ****             }
 290:Src/main.c    ****             sprintf(msg, "%d", speed);
 218              		.loc 1 290 0
 219 00b8 05A8     		add	r0, sp, #20
 220 00ba 3749     		ldr	r1, .L20+20
 221 00bc 40F2EE22 		movw	r2, #750
 222 00c0 FFF7FEFF 		bl	sprintf
 223              	.LVL26:
 291:Src/main.c    ****             print(msg, 0);
 224              		.loc 1 291 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 10


 225 00c4 05A8     		add	r0, sp, #20
 226 00c6 0021     		movs	r1, #0
 227 00c8 FFF7FEFF 		bl	print
 228              	.LVL27:
 292:Src/main.c    ****             TIM4->CNT = speed;
 229              		.loc 1 292 0
 230 00cc 40F2EE22 		movw	r2, #750
 231 00d0 2F4B     		ldr	r3, .L20+12
 232 00d2 5A62     		str	r2, [r3, #36]
 293:Src/main.c    ****             while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 233              		.loc 1 293 0
 234 00d4 17E0     		b	.L14
 235              	.LVL28:
 236              	.L17:
 294:Src/main.c    ****                 speed = TIM4->CNT;
 237              		.loc 1 294 0
 238 00d6 2E4B     		ldr	r3, .L20+12
 239 00d8 5C6A     		ldr	r4, [r3, #36]
 240              	.LVL29:
 295:Src/main.c    ****                 sprintf(msg, "%d", speed);
 241              		.loc 1 295 0
 242 00da 05A8     		add	r0, sp, #20
 243 00dc 2E49     		ldr	r1, .L20+20
 244 00de 2246     		mov	r2, r4
 245 00e0 FFF7FEFF 		bl	sprintf
 246              	.LVL30:
 296:Src/main.c    ****                 print(msg, 0);
 247              		.loc 1 296 0
 248 00e4 05A8     		add	r0, sp, #20
 249 00e6 0021     		movs	r1, #0
 250 00e8 FFF7FEFF 		bl	print
 251              	.LVL31:
 297:Src/main.c    ****                 if(pid_select==3){
 252              		.loc 1 297 0
 253 00ec 032D     		cmp	r5, #3
 254 00ee 05D1     		bne	.L15
 298:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 255              		.loc 1 298 0
 256 00f0 284B     		ldr	r3, .L20+16
 257 00f2 1B68     		ldr	r3, [r3]
 258 00f4 5C63     		str	r4, [r3, #52]
 299:Src/main.c    ****                     LEFT_SPEED = speed;
 259              		.loc 1 299 0
 260 00f6 294B     		ldr	r3, .L20+24
 261 00f8 1C60     		str	r4, [r3]
 262 00fa 04E0     		b	.L14
 263              	.L15:
 300:Src/main.c    ****                 }else{
 301:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 264              		.loc 1 301 0
 265 00fc 254B     		ldr	r3, .L20+16
 266 00fe 1B68     		ldr	r3, [r3]
 267 0100 DC63     		str	r4, [r3, #60]
 302:Src/main.c    ****                     RIGHT_SPEED = speed;
 268              		.loc 1 302 0
 269 0102 274B     		ldr	r3, .L20+28
 270 0104 1C60     		str	r4, [r3]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 11


 271              	.LVL32:
 272              	.L14:
 293:Src/main.c    ****                 speed = TIM4->CNT;
 273              		.loc 1 293 0
 274 0106 2048     		ldr	r0, .L20+4
 275 0108 4FF40051 		mov	r1, #8192
 276 010c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 277              	.LVL33:
 278 0110 0028     		cmp	r0, #0
 279 0112 E0D0     		beq	.L17
 303:Src/main.c    ****                 }
 304:Src/main.c    ****             }
 305:Src/main.c    ****             ++pid_select;
 280              		.loc 1 305 0
 281 0114 0135     		adds	r5, r5, #1
 282              	.LVL34:
 283              	.L11:
 306:Src/main.c    ****         }
 307:Src/main.c    ****         if(pid_select==4){
 284              		.loc 1 307 0
 285 0116 042D     		cmp	r5, #4
 286 0118 B2D1     		bne	.L18
 287              	.LBE2:
 308:Src/main.c    ****             break;
 309:Src/main.c    ****         }
 310:Src/main.c    ****     }
 311:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 288              		.loc 1 311 0
 289 011a 1E4C     		ldr	r4, .L20+16
 290 011c 2046     		mov	r0, r4
 291 011e 0021     		movs	r1, #0
 292 0120 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 293              	.LVL35:
 312:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 294              		.loc 1 312 0
 295 0124 2046     		mov	r0, r4
 296 0126 0821     		movs	r1, #8
 297 0128 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 298              	.LVL36:
 313:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 299              		.loc 1 313 0
 300 012c 029F     		ldr	r7, [sp, #8]
 301 012e 05A8     		add	r0, sp, #20
 302 0130 1C49     		ldr	r1, .L20+32
 303 0132 3A46     		mov	r2, r7
 304 0134 FFF7FEFF 		bl	sprintf
 305              	.LVL37:
 314:Src/main.c    ****     print(msg, 0);
 306              		.loc 1 314 0
 307 0138 05A8     		add	r0, sp, #20
 308 013a 0021     		movs	r1, #0
 309 013c FFF7FEFF 		bl	print
 310              	.LVL38:
 315:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 311              		.loc 1 315 0
 312 0140 039D     		ldr	r5, [sp, #12]
 313              	.LVL39:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 12


 314 0142 05A8     		add	r0, sp, #20
 315 0144 1849     		ldr	r1, .L20+36
 316 0146 2A46     		mov	r2, r5
 317 0148 FFF7FEFF 		bl	sprintf
 318              	.LVL40:
 316:Src/main.c    ****     print(msg, 1);
 319              		.loc 1 316 0
 320 014c 05A8     		add	r0, sp, #20
 321 014e 0121     		movs	r1, #1
 322 0150 FFF7FEFF 		bl	print
 323              	.LVL41:
 317:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 324              		.loc 1 317 0
 325 0154 049C     		ldr	r4, [sp, #16]
 326 0156 05A8     		add	r0, sp, #20
 327 0158 1449     		ldr	r1, .L20+40
 328 015a 2246     		mov	r2, r4
 329 015c FFF7FEFF 		bl	sprintf
 330              	.LVL42:
 318:Src/main.c    ****     print(msg, 2);
 331              		.loc 1 318 0
 332 0160 05A8     		add	r0, sp, #20
 333 0162 0221     		movs	r1, #2
 334 0164 FFF7FEFF 		bl	print
 335              	.LVL43:
 319:Src/main.c    ****     return pid_Init(values[0],values[1],values[2],5,1);
 336              		.loc 1 319 0
 337 0168 0523     		movs	r3, #5
 338 016a 0093     		str	r3, [sp]
 339 016c 0123     		movs	r3, #1
 340 016e 0193     		str	r3, [sp, #4]
 341 0170 3046     		mov	r0, r6
 342 0172 3946     		mov	r1, r7
 343 0174 2A46     		mov	r2, r5
 344 0176 2346     		mov	r3, r4
 345 0178 FFF7FEFF 		bl	pid_Init
 346              	.LVL44:
 320:Src/main.c    **** }
 347              		.loc 1 320 0
 348 017c 3046     		mov	r0, r6
 349 017e 0BB0     		add	sp, sp, #44
 350              	.LCFI3:
 351              		.cfi_def_cfa_offset 20
 352              		@ sp needed
 353 0180 F0BD     		pop	{r4, r5, r6, r7, pc}
 354              	.LVL45:
 355              	.L21:
 356 0182 00BF     		.align	2
 357              	.L20:
 358 0184 00000000 		.word	.LC0
 359 0188 00080240 		.word	1073874944
 360 018c 0C000000 		.word	.LC1
 361 0190 00080040 		.word	1073743872
 362 0194 00000000 		.word	htim1
 363 0198 10000000 		.word	.LC2
 364 019c 00000000 		.word	.LANCHOR0
 365 01a0 00000000 		.word	.LANCHOR1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 13


 366 01a4 14000000 		.word	.LC3
 367 01a8 1C000000 		.word	.LC4
 368 01ac 24000000 		.word	.LC5
 369              		.cfi_endproc
 370              	.LFE126:
 372              		.global	__aeabi_d2iz
 373              		.section	.text.do_pid,"ax",%progbits
 374              		.align	2
 375              		.global	do_pid
 376              		.thumb
 377              		.thumb_func
 379              	do_pid:
 380              	.LFB127:
 321:Src/main.c    **** 
 322:Src/main.c    **** void do_pid(PID_t *pid_struct){
 381              		.loc 1 322 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              	.LVL46:
 386 0000 70B5     		push	{r4, r5, r6, lr}
 387              	.LCFI4:
 388              		.cfi_def_cfa_offset 16
 389              		.cfi_offset 4, -16
 390              		.cfi_offset 5, -12
 391              		.cfi_offset 6, -8
 392              		.cfi_offset 14, -4
 393 0002 0646     		mov	r6, r0
 323:Src/main.c    ****     /* Read sensors */
 324:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin)? 0 : 1;
 394              		.loc 1 324 0
 395 0004 274D     		ldr	r5, .L31
 396 0006 2846     		mov	r0, r5
 397              	.LVL47:
 398 0008 4FF48041 		mov	r1, #16384
 399 000c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 400              	.LVL48:
 401 0010 B0FA80F4 		clz	r4, r0
 402 0014 6409     		lsrs	r4, r4, #5
 403              	.LVL49:
 325:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin)? 0 : 1;
 404              		.loc 1 325 0
 405 0016 2846     		mov	r0, r5
 406 0018 4FF40041 		mov	r1, #32768
 407 001c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 408              	.LVL50:
 409 0020 B0FA80F0 		clz	r0, r0
 410 0024 4009     		lsrs	r0, r0, #5
 411              	.LVL51:
 326:Src/main.c    **** 
 327:Src/main.c    ****     /* Get error */
 328:Src/main.c    ****     if(left && right){ pid_struct->err = 0; }
 412              		.loc 1 328 0
 413 0026 1CB1     		cbz	r4, .L23
 414              		.loc 1 328 0 is_stmt 0 discriminator 1
 415 0028 10B1     		cbz	r0, .L23
 416              		.loc 1 328 0 discriminator 2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 14


 417 002a 0023     		movs	r3, #0
 418 002c 3362     		str	r3, [r6, #32]
 419 002e 1AE0     		b	.L24
 420              	.L23:
 329:Src/main.c    ****     else if(left && !right){ pid_struct->err = 1; }
 421              		.loc 1 329 0 is_stmt 1
 422 0030 1CB1     		cbz	r4, .L25
 423              		.loc 1 329 0 is_stmt 0 discriminator 1
 424 0032 10B9     		cbnz	r0, .L25
 425              		.loc 1 329 0 discriminator 2
 426 0034 0123     		movs	r3, #1
 427 0036 3362     		str	r3, [r6, #32]
 428 0038 15E0     		b	.L24
 429              	.L25:
 330:Src/main.c    ****     else if(!left && right){ pid_struct->err = -1; }
 430              		.loc 1 330 0 is_stmt 1
 431 003a 24B9     		cbnz	r4, .L26
 432              		.loc 1 330 0 is_stmt 0 discriminator 1
 433 003c 18B1     		cbz	r0, .L26
 434              		.loc 1 330 0 discriminator 2
 435 003e 4FF0FF33 		mov	r3, #-1
 436 0042 3362     		str	r3, [r6, #32]
 437 0044 0FE0     		b	.L24
 438              	.L26:
 331:Src/main.c    ****     else if(!left && !right && (pid_struct->err < 0)){ pid_struct->err = -5; }
 439              		.loc 1 331 0 is_stmt 1
 440 0046 3CB9     		cbnz	r4, .L27
 441              		.loc 1 331 0 is_stmt 0 discriminator 1
 442 0048 30B9     		cbnz	r0, .L27
 443              		.loc 1 331 0 discriminator 2
 444 004a 336A     		ldr	r3, [r6, #32]
 445 004c 002B     		cmp	r3, #0
 446 004e 03DA     		bge	.L27
 447              		.loc 1 331 0 discriminator 3
 448 0050 6FF00403 		mvn	r3, #4
 449 0054 3362     		str	r3, [r6, #32]
 450 0056 06E0     		b	.L24
 451              	.L27:
 332:Src/main.c    ****     else if(!left && !right && (pid_struct->err > 0)){ pid_struct->err = 5; }
 452              		.loc 1 332 0 is_stmt 1
 453 0058 2CB9     		cbnz	r4, .L24
 454              		.loc 1 332 0 is_stmt 0 discriminator 1
 455 005a 20B9     		cbnz	r0, .L24
 456              		.loc 1 332 0 discriminator 2
 457 005c 336A     		ldr	r3, [r6, #32]
 458 005e 002B     		cmp	r3, #0
 459 0060 01DD     		ble	.L24
 460              		.loc 1 332 0 discriminator 3
 461 0062 0523     		movs	r3, #5
 462 0064 3362     		str	r3, [r6, #32]
 463              	.L24:
 333:Src/main.c    **** 
 334:Src/main.c    ****     /* Get gain */
 335:Src/main.c    ****     double gain = pid_GetGain(pid_struct, &htim9);
 464              		.loc 1 335 0 is_stmt 1
 465 0066 3046     		mov	r0, r6
 466              	.LVL52:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 15


 467 0068 0F49     		ldr	r1, .L31+4
 468 006a FFF7FEFF 		bl	pid_GetGain
 469              	.LVL53:
 336:Src/main.c    ****     int g = (int) gain;
 470              		.loc 1 336 0
 471 006e 51EC100B 		fmrrd	r0, r1, d0
 472 0072 FFF7FEFF 		bl	__aeabi_d2iz
 473              	.LVL54:
 337:Src/main.c    **** 
 338:Src/main.c    ****     /* Set Motor Speeds*/
 339:Src/main.c    ****     if(g<0){
 474              		.loc 1 339 0
 475 0076 0028     		cmp	r0, #0
 476 0078 04DA     		bge	.L28
 340:Src/main.c    ****         LEFT_SPEED -= g;
 477              		.loc 1 340 0
 478 007a 0C4A     		ldr	r2, .L31+8
 479 007c 1368     		ldr	r3, [r2]
 480 007e 181A     		subs	r0, r3, r0
 481              	.LVL55:
 482 0080 1060     		str	r0, [r2]
 483 0082 05E0     		b	.L29
 484              	.LVL56:
 485              	.L28:
 341:Src/main.c    ****     }else if(g>0){
 486              		.loc 1 341 0
 487 0084 0028     		cmp	r0, #0
 488 0086 03DD     		ble	.L29
 342:Src/main.c    ****         RIGHT_SPEED += g;
 489              		.loc 1 342 0
 490 0088 094B     		ldr	r3, .L31+12
 491 008a 1A68     		ldr	r2, [r3]
 492 008c 1044     		add	r0, r0, r2
 493              	.LVL57:
 494 008e 1860     		str	r0, [r3]
 495              	.L29:
 343:Src/main.c    ****     }
 344:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LEFT_SPEED);
 496              		.loc 1 344 0
 497 0090 084B     		ldr	r3, .L31+16
 498 0092 1B68     		ldr	r3, [r3]
 499 0094 054A     		ldr	r2, .L31+8
 500 0096 1268     		ldr	r2, [r2]
 501 0098 5A63     		str	r2, [r3, #52]
 345:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, RIGHT_SPEED);
 502              		.loc 1 345 0
 503 009a 054A     		ldr	r2, .L31+12
 504 009c 1268     		ldr	r2, [r2]
 505 009e DA63     		str	r2, [r3, #60]
 506 00a0 70BD     		pop	{r4, r5, r6, pc}
 507              	.LVL58:
 508              	.L32:
 509 00a2 00BF     		.align	2
 510              	.L31:
 511 00a4 00040240 		.word	1073873920
 512 00a8 00000000 		.word	htim9
 513 00ac 00000000 		.word	.LANCHOR0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 16


 514 00b0 00000000 		.word	.LANCHOR1
 515 00b4 00000000 		.word	htim1
 516              		.cfi_endproc
 517              	.LFE127:
 519              		.global	__aeabi_ui2d
 520              		.global	__aeabi_ddiv
 521              		.global	__aeabi_dmul
 522              		.global	__aeabi_d2uiz
 523              		.section	.text.update_motor_speed,"ax",%progbits
 524              		.align	2
 525              		.global	update_motor_speed
 526              		.thumb
 527              		.thumb_func
 529              	update_motor_speed:
 530              	.LFB128:
 346:Src/main.c    **** }
 347:Src/main.c    **** 
 348:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]){
 531              		.loc 1 348 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 24
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              	.LVL59:
 536 0000 30B5     		push	{r4, r5, lr}
 537              	.LCFI5:
 538              		.cfi_def_cfa_offset 12
 539              		.cfi_offset 4, -12
 540              		.cfi_offset 5, -8
 541              		.cfi_offset 14, -4
 542 0002 87B0     		sub	sp, sp, #28
 543              	.LCFI6:
 544              		.cfi_def_cfa_offset 40
 545 0004 0D46     		mov	r5, r1
 349:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[0]/100.0*MOTOR_SPEED);
 546              		.loc 1 349 0
 547 0006 1C4B     		ldr	r3, .L35
 548 0008 1C68     		ldr	r4, [r3]
 549 000a 0868     		ldr	r0, [r1]
 550              	.LVL60:
 551 000c FFF7FEFF 		bl	__aeabi_ui2d
 552              	.LVL61:
 553 0010 0022     		movs	r2, #0
 554 0012 1A4B     		ldr	r3, .L35+4
 555 0014 FFF7FEFF 		bl	__aeabi_ddiv
 556              	.LVL62:
 557 0018 0022     		movs	r2, #0
 558 001a 194B     		ldr	r3, .L35+8
 559 001c FFF7FEFF 		bl	__aeabi_dmul
 560              	.LVL63:
 561 0020 FFF7FEFF 		bl	__aeabi_d2uiz
 562              	.LVL64:
 563 0024 6063     		str	r0, [r4, #52]
 350:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[1]/100.0*MOTOR_SPEED);
 564              		.loc 1 350 0
 565 0026 6868     		ldr	r0, [r5, #4]
 566 0028 FFF7FEFF 		bl	__aeabi_ui2d
 567              	.LVL65:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 17


 568 002c 0022     		movs	r2, #0
 569 002e 134B     		ldr	r3, .L35+4
 570 0030 FFF7FEFF 		bl	__aeabi_ddiv
 571              	.LVL66:
 572 0034 0022     		movs	r2, #0
 573 0036 124B     		ldr	r3, .L35+8
 574 0038 FFF7FEFF 		bl	__aeabi_dmul
 575              	.LVL67:
 576 003c FFF7FEFF 		bl	__aeabi_d2uiz
 577              	.LVL68:
 578 0040 E063     		str	r0, [r4, #60]
 351:Src/main.c    ****     char msg[20] = "";
 579              		.loc 1 351 0
 580 0042 0024     		movs	r4, #0
 581 0044 0194     		str	r4, [sp, #4]
 582 0046 0294     		str	r4, [sp, #8]
 583 0048 0394     		str	r4, [sp, #12]
 584 004a 0494     		str	r4, [sp, #16]
 585 004c 0594     		str	r4, [sp, #20]
 352:Src/main.c    ****     sprintf(msg, "L: %lu", speed[0]);
 586              		.loc 1 352 0
 587 004e 01A8     		add	r0, sp, #4
 588 0050 0C49     		ldr	r1, .L35+12
 589 0052 2A68     		ldr	r2, [r5]
 590 0054 FFF7FEFF 		bl	sprintf
 591              	.LVL69:
 353:Src/main.c    ****     print(msg, 0);
 592              		.loc 1 353 0
 593 0058 01A8     		add	r0, sp, #4
 594 005a 2146     		mov	r1, r4
 595 005c FFF7FEFF 		bl	print
 596              	.LVL70:
 354:Src/main.c    ****     sprintf(msg, "R: %lu", speed[1]);
 597              		.loc 1 354 0
 598 0060 01A8     		add	r0, sp, #4
 599 0062 0949     		ldr	r1, .L35+16
 600 0064 6A68     		ldr	r2, [r5, #4]
 601 0066 FFF7FEFF 		bl	sprintf
 602              	.LVL71:
 355:Src/main.c    ****     print(msg, 1);
 603              		.loc 1 355 0
 604 006a 01A8     		add	r0, sp, #4
 605 006c 0121     		movs	r1, #1
 606 006e FFF7FEFF 		bl	print
 607              	.LVL72:
 356:Src/main.c    **** }
 608              		.loc 1 356 0
 609 0072 07B0     		add	sp, sp, #28
 610              	.LCFI7:
 611              		.cfi_def_cfa_offset 12
 612              		@ sp needed
 613 0074 30BD     		pop	{r4, r5, pc}
 614              	.LVL73:
 615              	.L36:
 616 0076 00BF     		.align	2
 617              	.L35:
 618 0078 00000000 		.word	htim1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 18


 619 007c 00005940 		.word	1079574528
 620 0080 00408F40 		.word	1083129856
 621 0084 2C000000 		.word	.LC6
 622 0088 34000000 		.word	.LC7
 623              		.cfi_endproc
 624              	.LFE128:
 626              		.section	.text._Error_Handler,"ax",%progbits
 627              		.align	2
 628              		.global	_Error_Handler
 629              		.thumb
 630              		.thumb_func
 632              	_Error_Handler:
 633              	.LFB129:
 357:Src/main.c    **** /* USER CODE END 4 */
 358:Src/main.c    **** 
 359:Src/main.c    **** /**
 360:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 361:Src/main.c    ****  * @param  file: The file name as string.
 362:Src/main.c    ****  * @param  line: The line in file as a number.
 363:Src/main.c    ****  * @retval None
 364:Src/main.c    ****  */
 365:Src/main.c    **** void _Error_Handler(char *file, int line)
 366:Src/main.c    **** {
 634              		.loc 1 366 0
 635              		.cfi_startproc
 636              		@ Volatile: function does not return.
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              		@ link register save eliminated.
 640              	.LVL74:
 641              	.L38:
 367:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 368:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 369:Src/main.c    ****     while(1)
 370:Src/main.c    ****     {
 371:Src/main.c    ****     }
 642              		.loc 1 371 0 discriminator 1
 643 0000 FEE7     		b	.L38
 644              		.cfi_endproc
 645              	.LFE129:
 647 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 648              		.align	2
 649              		.global	SystemClock_Config
 650              		.thumb
 651              		.thumb_func
 653              	SystemClock_Config:
 654              	.LFB124:
 194:Src/main.c    **** 
 655              		.loc 1 194 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 80
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659 0000 00B5     		push	{lr}
 660              	.LCFI8:
 661              		.cfi_def_cfa_offset 4
 662              		.cfi_offset 14, -4
 663 0002 95B0     		sub	sp, sp, #84
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 19


 664              	.LCFI9:
 665              		.cfi_def_cfa_offset 88
 666              	.LBB3:
 201:Src/main.c    **** 
 667              		.loc 1 201 0
 668 0004 0022     		movs	r2, #0
 669 0006 0192     		str	r2, [sp, #4]
 670 0008 294B     		ldr	r3, .L43
 671 000a 196C     		ldr	r1, [r3, #64]
 672 000c 41F08051 		orr	r1, r1, #268435456
 673 0010 1964     		str	r1, [r3, #64]
 674 0012 1B6C     		ldr	r3, [r3, #64]
 675 0014 03F08053 		and	r3, r3, #268435456
 676 0018 0193     		str	r3, [sp, #4]
 677 001a 019B     		ldr	r3, [sp, #4]
 678              	.LBE3:
 679              	.LBB4:
 203:Src/main.c    **** 
 680              		.loc 1 203 0
 681 001c 0292     		str	r2, [sp, #8]
 682 001e 2549     		ldr	r1, .L43+4
 683 0020 0B68     		ldr	r3, [r1]
 684 0022 23F44043 		bic	r3, r3, #49152
 685 0026 43F40043 		orr	r3, r3, #32768
 686 002a 0B60     		str	r3, [r1]
 687 002c 0B68     		ldr	r3, [r1]
 688 002e 03F44043 		and	r3, r3, #49152
 689 0032 0293     		str	r3, [sp, #8]
 690 0034 029B     		ldr	r3, [sp, #8]
 691              	.LBE4:
 207:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 692              		.loc 1 207 0
 693 0036 0223     		movs	r3, #2
 694 0038 0893     		str	r3, [sp, #32]
 208:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 695              		.loc 1 208 0
 696 003a 0121     		movs	r1, #1
 697 003c 0B91     		str	r1, [sp, #44]
 209:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 698              		.loc 1 209 0
 699 003e 1021     		movs	r1, #16
 700 0040 0C91     		str	r1, [sp, #48]
 210:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 701              		.loc 1 210 0
 702 0042 0E93     		str	r3, [sp, #56]
 211:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 703              		.loc 1 211 0
 704 0044 0F92     		str	r2, [sp, #60]
 212:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 705              		.loc 1 212 0
 706 0046 0822     		movs	r2, #8
 707 0048 1092     		str	r2, [sp, #64]
 213:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 708              		.loc 1 213 0
 709 004a 4822     		movs	r2, #72
 710 004c 1192     		str	r2, [sp, #68]
 214:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 20


 711              		.loc 1 214 0
 712 004e 1293     		str	r3, [sp, #72]
 215:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 713              		.loc 1 215 0
 714 0050 0423     		movs	r3, #4
 715 0052 1393     		str	r3, [sp, #76]
 216:Src/main.c    ****     {
 716              		.loc 1 216 0
 717 0054 08A8     		add	r0, sp, #32
 718 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 719              	.LVL75:
 720 005a 18B1     		cbz	r0, .L40
 218:Src/main.c    ****     }
 721              		.loc 1 218 0
 722 005c 1648     		ldr	r0, .L43+8
 723 005e DA21     		movs	r1, #218
 724 0060 FFF7FEFF 		bl	_Error_Handler
 725              	.LVL76:
 726              	.L40:
 223:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 727              		.loc 1 223 0
 728 0064 0F23     		movs	r3, #15
 729 0066 0393     		str	r3, [sp, #12]
 225:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 730              		.loc 1 225 0
 731 0068 0221     		movs	r1, #2
 732 006a 0491     		str	r1, [sp, #16]
 226:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 733              		.loc 1 226 0
 734 006c 0023     		movs	r3, #0
 735 006e 0593     		str	r3, [sp, #20]
 227:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 736              		.loc 1 227 0
 737 0070 4FF48052 		mov	r2, #4096
 738 0074 0692     		str	r2, [sp, #24]
 228:Src/main.c    **** 
 739              		.loc 1 228 0
 740 0076 0793     		str	r3, [sp, #28]
 230:Src/main.c    ****     {
 741              		.loc 1 230 0
 742 0078 03A8     		add	r0, sp, #12
 743 007a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 744              	.LVL77:
 745 007e 18B1     		cbz	r0, .L41
 232:Src/main.c    ****     }
 746              		.loc 1 232 0
 747 0080 0D48     		ldr	r0, .L43+8
 748 0082 E821     		movs	r1, #232
 749 0084 FFF7FEFF 		bl	_Error_Handler
 750              	.LVL78:
 751              	.L41:
 237:Src/main.c    **** 
 752              		.loc 1 237 0
 753 0088 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 754              	.LVL79:
 755 008c 0B4B     		ldr	r3, .L43+12
 756 008e A3FB0030 		umull	r3, r0, r3, r0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 21


 757 0092 8009     		lsrs	r0, r0, #6
 758 0094 FFF7FEFF 		bl	HAL_SYSTICK_Config
 759              	.LVL80:
 241:Src/main.c    **** 
 760              		.loc 1 241 0
 761 0098 0420     		movs	r0, #4
 762 009a FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 763              	.LVL81:
 244:Src/main.c    **** }
 764              		.loc 1 244 0
 765 009e 4FF0FF30 		mov	r0, #-1
 766 00a2 0021     		movs	r1, #0
 767 00a4 0A46     		mov	r2, r1
 768 00a6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 769              	.LVL82:
 245:Src/main.c    **** 
 770              		.loc 1 245 0
 771 00aa 15B0     		add	sp, sp, #84
 772              	.LCFI10:
 773              		.cfi_def_cfa_offset 4
 774              		@ sp needed
 775 00ac 5DF804FB 		ldr	pc, [sp], #4
 776              	.L44:
 777              		.align	2
 778              	.L43:
 779 00b0 00380240 		.word	1073887232
 780 00b4 00700040 		.word	1073770496
 781 00b8 3C000000 		.word	.LC8
 782 00bc D34D6210 		.word	274877907
 783              		.cfi_endproc
 784              	.LFE124:
 786              		.section	.text.main,"ax",%progbits
 787              		.align	2
 788              		.global	main
 789              		.thumb
 790              		.thumb_func
 792              	main:
 793              	.LFB123:
  91:Src/main.c    ****     /* USER CODE BEGIN 1 */
 794              		.loc 1 91 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 32
 797              		@ frame_needed = 0, uses_anonymous_args = 0
 798 0000 10B5     		push	{r4, lr}
 799              	.LCFI11:
 800              		.cfi_def_cfa_offset 8
 801              		.cfi_offset 4, -8
 802              		.cfi_offset 14, -4
 803 0002 88B0     		sub	sp, sp, #32
 804              	.LCFI12:
 805              		.cfi_def_cfa_offset 40
  99:Src/main.c    **** 
 806              		.loc 1 99 0
 807 0004 FFF7FEFF 		bl	HAL_Init
 808              	.LVL83:
 106:Src/main.c    **** 
 809              		.loc 1 106 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 22


 810 0008 FFF7FEFF 		bl	SystemClock_Config
 811              	.LVL84:
 113:Src/main.c    ****     MX_TIM3_Init();
 812              		.loc 1 113 0
 813 000c FFF7FEFF 		bl	MX_GPIO_Init
 814              	.LVL85:
 114:Src/main.c    ****     MX_TIM5_Init();
 815              		.loc 1 114 0
 816 0010 FFF7FEFF 		bl	MX_TIM3_Init
 817              	.LVL86:
 115:Src/main.c    ****     MX_TIM1_Init();
 818              		.loc 1 115 0
 819 0014 FFF7FEFF 		bl	MX_TIM5_Init
 820              	.LVL87:
 116:Src/main.c    ****     MX_TIM2_Init();
 821              		.loc 1 116 0
 822 0018 FFF7FEFF 		bl	MX_TIM1_Init
 823              	.LVL88:
 117:Src/main.c    ****     MX_USART6_UART_Init();
 824              		.loc 1 117 0
 825 001c FFF7FEFF 		bl	MX_TIM2_Init
 826              	.LVL89:
 118:Src/main.c    ****     MX_ADC1_Init();
 827              		.loc 1 118 0
 828 0020 FFF7FEFF 		bl	MX_USART6_UART_Init
 829              	.LVL90:
 119:Src/main.c    ****     MX_I2C1_Init();
 830              		.loc 1 119 0
 831 0024 FFF7FEFF 		bl	MX_ADC1_Init
 832              	.LVL91:
 120:Src/main.c    ****     MX_TIM4_Init();
 833              		.loc 1 120 0
 834 0028 FFF7FEFF 		bl	MX_I2C1_Init
 835              	.LVL92:
 121:Src/main.c    ****     MX_TIM9_Init();
 836              		.loc 1 121 0
 837 002c FFF7FEFF 		bl	MX_TIM4_Init
 838              	.LVL93:
 122:Src/main.c    ****     ssd1306_Init();
 839              		.loc 1 122 0
 840 0030 FFF7FEFF 		bl	MX_TIM9_Init
 841              	.LVL94:
 123:Src/main.c    ****     /* USER CODE BEGIN 2 */
 842              		.loc 1 123 0
 843 0034 FFF7FEFF 		bl	ssd1306_Init
 844              	.LVL95:
 127:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 845              		.loc 1 127 0
 846 0038 1A48     		ldr	r0, .L48
 847 003a 1821     		movs	r1, #24
 848 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 849              	.LVL96:
 128:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 850              		.loc 1 128 0
 851 0040 1948     		ldr	r0, .L48+4
 852 0042 1821     		movs	r1, #24
 853 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 23


 854              	.LVL97:
 129:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 855              		.loc 1 129 0
 856 0048 184C     		ldr	r4, .L48+8
 857 004a 2046     		mov	r0, r4
 858 004c 0021     		movs	r1, #0
 859 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 860              	.LVL98:
 130:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 861              		.loc 1 130 0
 862 0052 2046     		mov	r0, r4
 863 0054 0821     		movs	r1, #8
 864 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 865              	.LVL99:
 131:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 866              		.loc 1 131 0
 867 005a 2046     		mov	r0, r4
 868 005c 0021     		movs	r1, #0
 869 005e FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 870              	.LVL100:
 132:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 871              		.loc 1 132 0
 872 0062 2046     		mov	r0, r4
 873 0064 0821     		movs	r1, #8
 874 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 875              	.LVL101:
 133:Src/main.c    **** 
 876              		.loc 1 133 0
 877 006a 1148     		ldr	r0, .L48+12
 878 006c FFF7FEFF 		bl	HAL_TIM_Base_Start
 879              	.LVL102:
 138:Src/main.c    **** 
 880              		.loc 1 138 0
 881 0070 06A8     		add	r0, sp, #24
 882 0072 FFF7FEFF 		bl	encoder_Init
 883              	.LVL103:
 144:Src/main.c    **** 
 884              		.loc 1 144 0
 885 0076 0023     		movs	r3, #0
 886 0078 0193     		str	r3, [sp, #4]
 887 007a 0293     		str	r3, [sp, #8]
 888 007c 0393     		str	r3, [sp, #12]
 889 007e 0493     		str	r3, [sp, #16]
 890 0080 0593     		str	r3, [sp, #20]
 891              	.L46:
 177:Src/main.c    ****     print(msg, 0);
 892              		.loc 1 177 0 discriminator 1
 893 0082 06A8     		add	r0, sp, #24
 894 0084 0749     		ldr	r1, .L48
 895 0086 FFF7FEFF 		bl	update_encoder
 896              	.LVL104:
 897 008a 01A8     		add	r0, sp, #4
 898 008c 0949     		ldr	r1, .L48+16
 899 008e FDEEC07A 		ftosizs	s15, s0
 900 0092 17EE902A 		fmrs	r2, s15	@ int
 901 0096 FFF7FEFF 		bl	sprintf
 902              	.LVL105:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 24


 178:Src/main.c    ****         /* USER CODE END WHILE */
 903              		.loc 1 178 0 discriminator 1
 904 009a 01A8     		add	r0, sp, #4
 905 009c 0021     		movs	r1, #0
 906 009e FFF7FEFF 		bl	print
 907              	.LVL106:
 183:Src/main.c    ****     /* USER CODE END 3 */
 908              		.loc 1 183 0 discriminator 1
 909 00a2 EEE7     		b	.L46
 910              	.L49:
 911              		.align	2
 912              	.L48:
 913 00a4 00000000 		.word	htim4
 914 00a8 00000000 		.word	htim5
 915 00ac 00000000 		.word	htim1
 916 00b0 00000000 		.word	htim9
 917 00b4 10000000 		.word	.LC2
 918              		.cfi_endproc
 919              	.LFE123:
 921              		.global	RIGHT_SPEED
 922              		.global	LEFT_SPEED
 923              		.global	PUSH_BUTTON_STATE
 924              		.comm	last_time,4,4
 925              		.section	.data.RIGHT_SPEED,"aw",%progbits
 926              		.align	2
 927              		.set	.LANCHOR1,. + 0
 930              	RIGHT_SPEED:
 931 0000 20030000 		.word	800
 932              		.section	.data.LEFT_SPEED,"aw",%progbits
 933              		.align	2
 934              		.set	.LANCHOR0,. + 0
 937              	LEFT_SPEED:
 938 0000 20030000 		.word	800
 939              		.section	.rodata.str1.4,"aMS",%progbits,1
 940              		.align	2
 941              	.LC0:
 942 0000 53746172 		.ascii	"Starting\000"
 942      74696E67 
 942      00
 943 0009 000000   		.space	3
 944              	.LC1:
 945 000c 256C7500 		.ascii	"%lu\000"
 946              	.LC2:
 947 0010 256400   		.ascii	"%d\000"
 948 0013 00       		.space	1
 949              	.LC3:
 950 0014 5020256C 		.ascii	"P %lu\000"
 950      7500
 951 001a 0000     		.space	2
 952              	.LC4:
 953 001c 4420256C 		.ascii	"D %lu\000"
 953      7500
 954 0022 0000     		.space	2
 955              	.LC5:
 956 0024 4920256C 		.ascii	"I %lu\000"
 956      7500
 957 002a 0000     		.space	2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 25


 958              	.LC6:
 959 002c 4C3A2025 		.ascii	"L: %lu\000"
 959      6C7500
 960 0033 00       		.space	1
 961              	.LC7:
 962 0034 523A2025 		.ascii	"R: %lu\000"
 962      6C7500
 963 003b 00       		.space	1
 964              	.LC8:
 965 003c 5372632F 		.ascii	"Src/main.c\000"
 965      6D61696E 
 965      2E6300
 966              		.section	.bss.PUSH_BUTTON_STATE,"aw",%nobits
 969              	PUSH_BUTTON_STATE:
 970 0000 00       		.space	1
 971              		.text
 972              	.Letext0:
 973              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 974              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 975              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 976              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 977              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 978              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 979              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 980              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 981              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 982              		.file 11 "Inc/fonts.h"
 983              		.file 12 "Inc/ssd1306.h"
 984              		.file 13 "Inc/pid.h"
 985              		.file 14 "Inc/encoder.h"
 986              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 987              		.file 16 "Inc/tim.h"
 988              		.file 17 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 989              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 990              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 991              		.file 20 "Inc/gpio.h"
 992              		.file 21 "Inc/usart.h"
 993              		.file 22 "Inc/adc.h"
 994              		.file 23 "Inc/i2c.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:21     .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:26     .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:74     .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:79     .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:84     .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:358    .text.menu:0000000000000184 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:374    .text.do_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:379    .text.do_pid:0000000000000000 do_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:511    .text.do_pid:00000000000000a4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:524    .text.update_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:529    .text.update_motor_speed:0000000000000000 update_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:618    .text.update_motor_speed:0000000000000078 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:627    .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:632    .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:648    .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:653    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:779    .text.SystemClock_Config:00000000000000b0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:787    .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:792    .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:913    .text.main:00000000000000a4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:930    .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:937    .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:969    .bss.PUSH_BUTTON_STATE:0000000000000000 PUSH_BUTTON_STATE
                            *COM*:0000000000000004 last_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:926    .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:933    .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:940    .rodata.str1.4:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s:970    .bss.PUSH_BUTTON_STATE:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
HAL_GPIO_ReadPin
sprintf
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
pid_Init
htim1
__aeabi_d2iz
pid_GetGain
htim9
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccvnrC66.s 			page 27


HAL_Init
MX_GPIO_Init
MX_TIM3_Init
MX_TIM5_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
ssd1306_Init
HAL_TIM_Encoder_Start
HAL_TIM_Base_Start
encoder_Init
update_encoder
htim4
htim5
