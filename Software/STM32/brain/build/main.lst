ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  ** This notice applies to any and all portions of this file
   8:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****  * inserted by the user or by software development tools
  11:Src/main.c    ****  * are owned by their respective copyright owners.
  12:Src/main.c    ****  *
  13:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****  *
  15:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****  * are permitted provided that the following conditions are met:
  17:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****  *      and/or other materials provided with the distribution.
  22:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****  *      without specific prior written permission.
  25:Src/main.c    ****  *
  26:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 2


  31:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****  *
  37:Src/main.c    ****  ******************************************************************************
  38:Src/main.c    ****  */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED;
  66:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  67:Src/main.c    **** uint32_t dma_buffer[2048];
  68:Src/main.c    **** uint32_t adc_values[2048];
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PV */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  73:Src/main.c    **** void SystemClock_Config(void);
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN PFP */
  76:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  77:Src/main.c    **** void print(char msg[], int row);
  78:Src/main.c    **** PID_t menu();
  79:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  80:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  81:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  82:Src/main.c    **** void turn();
  83:Src/main.c    **** void turn_deg(uint8_t);
  84:Src/main.c    **** void alarm_detect();
  85:Src/main.c    **** void drive_straight(PID_t *enc_pid);
  86:Src/main.c    **** void square_edge(PID_t *enc_pid);
  87:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 3


  88:Src/main.c    **** /* USER CODE END PFP */
  89:Src/main.c    **** 
  90:Src/main.c    **** /* USER CODE BEGIN 0 */
  91:Src/main.c    **** /**
  92:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
  93:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
  94:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
  95:Src/main.c    ****  */
  96:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
  97:Src/main.c    **** {
  29              		.loc 1 97 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  98:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 98 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF40052 		mov	r2, #8192
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB130:
  99:Src/main.c    **** }
 100:Src/main.c    **** /* USER CODE END 0 */
 101:Src/main.c    **** 
 102:Src/main.c    **** /**
 103:Src/main.c    ****  * @brief  The application entry point.
 104:Src/main.c    ****  *
 105:Src/main.c    ****  * @retval None
 106:Src/main.c    ****  */
 107:Src/main.c    **** int main(void)
 108:Src/main.c    **** {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 4


 109:Src/main.c    ****     /* USER CODE BEGIN 1 */
 110:Src/main.c    **** 
 111:Src/main.c    ****     /* USER CODE END 1 */
 112:Src/main.c    **** 
 113:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 114:Src/main.c    **** 
 115:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 116:Src/main.c    ****     HAL_Init();
 117:Src/main.c    **** 
 118:Src/main.c    ****     /* USER CODE BEGIN Init */
 119:Src/main.c    **** 
 120:Src/main.c    ****     /* USER CODE END Init */
 121:Src/main.c    **** 
 122:Src/main.c    ****     /* Configure the system clock */
 123:Src/main.c    ****     SystemClock_Config();
 124:Src/main.c    **** 
 125:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 126:Src/main.c    **** 
 127:Src/main.c    ****     /* USER CODE END SysInit */
 128:Src/main.c    **** 
 129:Src/main.c    ****     /* Initialize all configured peripherals */
 130:Src/main.c    ****     MX_GPIO_Init();
 131:Src/main.c    ****     MX_DMA_Init();
 132:Src/main.c    ****     MX_TIM3_Init();
 133:Src/main.c    ****     MX_TIM1_Init();
 134:Src/main.c    ****     MX_TIM2_Init();
 135:Src/main.c    ****     MX_USART6_UART_Init();
 136:Src/main.c    ****     MX_ADC1_Init();
 137:Src/main.c    ****     MX_I2C1_Init();
 138:Src/main.c    ****     MX_TIM4_Init();
 139:Src/main.c    ****     MX_TIM9_Init();
 140:Src/main.c    ****     MX_TIM5_Init();
 141:Src/main.c    ****     /* USER CODE BEGIN 2 */
 142:Src/main.c    **** 
 143:Src/main.c    ****     /* Initialize peripherals */
 144:Src/main.c    ****     /* 
 145:Src/main.c    ****      * Claw jaw: TIM3 CH1
 146:Src/main.c    ****      * Claw arm: TIM3 CH2
 147:Src/main.c    ****      * Basket: TIM3 CH3
 148:Src/main.c    ****      * left forward: TIM1 CH1
 149:Src/main.c    ****      * left backward: TIM1 CH2
 150:Src/main.c    ****      * right forward: TIM1 CH3
 151:Src/main.c    ****      * right backward: TIM1 CH4
 152:Src/main.c    ****      * left encoder: TIM4
 153:Src/main.c    ****      * right encoderL TIM5
 154:Src/main.c    ****      * spare clocks: TIM2, TIM9
 155:Src/main.c    ****      */
 156:Src/main.c    **** 
 157:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 159:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 5


 166:Src/main.c    **** 
 167:Src/main.c    ****     /* Initialize other stuffs */
 168:Src/main.c    ****     ssd1306_Init();
 169:Src/main.c    ****     print("Starting", 0);
 170:Src/main.c    ****     claw_init(&htim3);
 171:Src/main.c    ****     ///basket_init(&htim3);
 172:Src/main.c    **** 
 173:Src/main.c    ****     uint8_t ewok_cnt=0;
 174:Src/main.c    ****     PID_t enc_pid = pid_Init(1,0,0,1,1);
 175:Src/main.c    **** 
 176:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 177:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 178:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 179:Src/main.c    ****     while((HAL_GetTick() - temp_time) < 4000){
 180:Src/main.c    ****         drive_straight(&enc_pid);
 181:Src/main.c    ****     }
 182:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 183:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 184:Src/main.c    **** 
 185:Src/main.c    ****     /* Initially disabled interrupts */
 186:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 187:Src/main.c    ****     /* USER CODE END 2 */
 188:Src/main.c    **** 
 189:Src/main.c    ****     /* Infinite loop */
 190:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 191:Src/main.c    ****     while (1)
 192:Src/main.c    ****     {
 193:Src/main.c    ****         /*
 194:Src/main.c    ****          * Pi Turning
 195:Src/main.c    ****          */
 196:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 197:Src/main.c    ****         {
 198:Src/main.c    ****             print("in pi int", 0);
 199:Src/main.c    ****             turn();
 200:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 201:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 202:Src/main.c    ****             uint32_t start = HAL_GetTick();
 203:Src/main.c    ****             HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 204:Src/main.c    ****             while ((HAL_GetTick() - start) < 4000)
 205:Src/main.c    ****             {
 206:Src/main.c    ****                 drive_straight(&enc_pid);
 207:Src/main.c    ****                 if (CLAW_INT_STATE == FLAGGED)
 208:Src/main.c    ****                 {
 209:Src/main.c    ****                     HAL_Delay(200);
 210:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 211:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 212:Src/main.c    ****                     close_claw(&htim3);
 213:Src/main.c    ****                     arm_up(&htim3);
 214:Src/main.c    ****                     HAL_NVIC_DisableIRQ(CLAW_INT_EXTI_IRQn);
 215:Src/main.c    ****                     CLAW_INT_STATE = NOT_FLAGGED;
 216:Src/main.c    ****                     ++ewok_cnt;
 217:Src/main.c    ****                     char msg[18] = "";
 218:Src/main.c    ****                     sprintf(msg, "wok_cnt: %d", ewok_cnt);
 219:Src/main.c    ****                     print(msg, 0);
 220:Src/main.c    ****                     if (ewok_cnt == 1)
 221:Src/main.c    ****                     {
 222:Src/main.c    ****                         turn_deg(-120);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 6


 223:Src/main.c    ****                         open_claw(&htim3);
 224:Src/main.c    ****                         square_edge(&enc_pid);
 225:Src/main.c    ****                         start = HAL_GetTick();
 226:Src/main.c    ****                         while((HAL_GetTick() - start) < 2000){
 227:Src/main.c    ****                             drive_straight(&enc_pid);
 228:Src/main.c    ****                         }
 229:Src/main.c    ****                         arm_down(&htim3);
 230:Src/main.c    ****                     }
 231:Src/main.c    ****                     break;
 232:Src/main.c    ****                 }
 233:Src/main.c    ****             }
 234:Src/main.c    ****             // char pic_plz = "1";
 235:Src/main.c    ****             // HAL_UART_Transmit(&huart2, pic_plz, sizeof(pic_plz), 10000);
 236:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 237:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 238:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 239:Src/main.c    ****         }else{
 240:Src/main.c    ****         /*
 241:Src/main.c    ****          * Look for Ewok
 242:Src/main.c    ****          */
 243:Src/main.c    ****         temp_time = HAL_GetTick();
 244:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 245:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 246:Src/main.c    ****         while((HAL_GetTick() - temp_time) < 200){
 247:Src/main.c    ****             drive_straight(&enc_pid);
 248:Src/main.c    ****         }
 249:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 250:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 251:Src/main.c    ****         }
 252:Src/main.c    **** 
 253:Src/main.c    ****         /*
 254:Src/main.c    ****          * IR DETECTION
 255:Src/main.c    ****          *
 256:Src/main.c    ****          if (IR_INT_STATE == FLAGGED)
 257:Src/main.c    ****          {
 258:Src/main.c    ****          alarm_detect();
 259:Src/main.c    ****         //drive past sensor, enough so as to not trigger interrupt again
 260:Src/main.c    ****         HAL_Delay(2000);
 261:Src/main.c    ****         }*/
 262:Src/main.c    **** 
 263:Src/main.c    ****         /* USER CODE END WHILE */
 264:Src/main.c    **** 
 265:Src/main.c    ****         /* USER CODE BEGIN 3 */
 266:Src/main.c    ****     }
 267:Src/main.c    ****     /* USER CODE END 3 */
 268:Src/main.c    **** 
 269:Src/main.c    **** }
 270:Src/main.c    **** 
 271:Src/main.c    **** /**
 272:Src/main.c    ****  * @brief System Clock Configuration
 273:Src/main.c    ****  * @retval None
 274:Src/main.c    ****  */
 275:Src/main.c    **** void SystemClock_Config(void)
 276:Src/main.c    **** {
 277:Src/main.c    **** 
 278:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 279:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 7


 280:Src/main.c    **** 
 281:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 282:Src/main.c    ****     */
 283:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 284:Src/main.c    **** 
 285:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 286:Src/main.c    **** 
 287:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 288:Src/main.c    ****     */
 289:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 290:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 291:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 292:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 293:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 294:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 295:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 296:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 297:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 298:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 299:Src/main.c    ****     {
 300:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 301:Src/main.c    ****     }
 302:Src/main.c    **** 
 303:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 304:Src/main.c    ****     */
 305:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 306:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 307:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 308:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 309:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 310:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 311:Src/main.c    **** 
 312:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 313:Src/main.c    ****     {
 314:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 315:Src/main.c    ****     }
 316:Src/main.c    **** 
 317:Src/main.c    ****     /**Configure the Systick interrupt time 
 318:Src/main.c    ****     */
 319:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 320:Src/main.c    **** 
 321:Src/main.c    ****     /**Configure the Systick 
 322:Src/main.c    ****     */
 323:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 324:Src/main.c    **** 
 325:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 326:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 327:Src/main.c    **** }
 328:Src/main.c    **** 
 329:Src/main.c    **** /* USER CODE BEGIN 4 */
 330:Src/main.c    **** 
 331:Src/main.c    **** void square_edge(PID_t *enc_pid){
 332:Src/main.c    ****     while(1){
 333:Src/main.c    ****         drive_straight(enc_pid);
 334:Src/main.c    ****         if(EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED){
 335:Src/main.c    ****             if(EDGE_LEFT_STATE== FLAGGED){
 336:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 8


 337:Src/main.c    ****             }
 338:Src/main.c    ****             if(EDGE_RIGHT_STATE == FLAGGED){
 339:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 340:Src/main.c    ****             }
 341:Src/main.c    ****         }else if(EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == FLAGGED){
 342:Src/main.c    ****             break;
 343:Src/main.c    ****         }
 344:Src/main.c    ****     }
 345:Src/main.c    **** }
 346:Src/main.c    **** 
 347:Src/main.c    **** void drive_straight(PID_t *enc_pid){
 348:Src/main.c    ****     encoder_pid(enc_pid);
 349:Src/main.c    ****     HAL_Delay(10);
 350:Src/main.c    **** }
 351:Src/main.c    **** 
 352:Src/main.c    **** /*
 353:Src/main.c    ****  * Assume motors are not on.
 354:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 355:Src/main.c    ****  */
 356:Src/main.c    **** void turn()
 357:Src/main.c    **** {
 358:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 359:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 360:Src/main.c    ****     HAL_Delay(50);
 361:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 362:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 363:Src/main.c    ****     TIM4->CNT = 0;
 364:Src/main.c    ****     TIM5->CNT = 0;
 365:Src/main.c    **** 
 366:Src/main.c    ****     char msg[18] = "";
 367:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 368:Src/main.c    ****     print(msg, 0);
 369:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 370:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 371:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 372:Src/main.c    ****     print(msg, 2);
 373:Src/main.c    **** 
 374:Src/main.c    ****     if (volts < -TURN_TOLERANCE)  // FIXME: Ben changed this
 375:Src/main.c    ****     {
 376:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 377:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 378:Src/main.c    ****         while (TIM5->CNT < counts)
 379:Src/main.c    ****         {
 380:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 381:Src/main.c    ****             print(msg, 4);
 382:Src/main.c    ****         }
 383:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 384:Src/main.c    ****         print(msg, 4);
 385:Src/main.c    ****         TIM5->CNT = 0;
 386:Src/main.c    ****     }
 387:Src/main.c    ****     else if (volts > TURN_TOLERANCE) // FIXME: Ben changed this
 388:Src/main.c    ****     {
 389:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 390:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 391:Src/main.c    ****         while (TIM4->CNT < counts)
 392:Src/main.c    ****         {
 393:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 9


 394:Src/main.c    ****             print(msg, 4);
 395:Src/main.c    ****         }
 396:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 397:Src/main.c    ****         print(msg, 4);
 398:Src/main.c    ****         TIM4->CNT = 0;
 399:Src/main.c    ****     }
 400:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 401:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 402:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 403:Src/main.c    **** }
 404:Src/main.c    **** 
 405:Src/main.c    **** /*
 406:Src/main.c    ****  * Assume motors are not on.
 407:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 408:Src/main.c    ****  */
 409:Src/main.c    **** void turn_deg(uint8_t deg)
 410:Src/main.c    **** {
 411:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 412:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg-90) + 50;
 413:Src/main.c    ****     TIM4->CNT = 0;
 414:Src/main.c    ****     TIM5->CNT = 0;
 415:Src/main.c    **** 
 416:Src/main.c    ****     char msg[18] = "";
 417:Src/main.c    **** 
 418:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 419:Src/main.c    ****     {
 420:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 421:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 422:Src/main.c    ****         while (TIM5->CNT < counts)
 423:Src/main.c    ****         {
 424:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 425:Src/main.c    ****             print(msg, 4);
 426:Src/main.c    ****         }
 427:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 428:Src/main.c    ****         print(msg, 4);
 429:Src/main.c    ****         TIM5->CNT = 0;
 430:Src/main.c    ****     }
 431:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 432:Src/main.c    ****     {
 433:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 30000);
 434:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 435:Src/main.c    ****         while (TIM4->CNT < counts)
 436:Src/main.c    ****         {
 437:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 438:Src/main.c    ****             print(msg, 4);
 439:Src/main.c    ****         }
 440:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 441:Src/main.c    ****         print(msg, 4);
 442:Src/main.c    ****         TIM4->CNT = 0;
 443:Src/main.c    ****     }
 444:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 445:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 446:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 447:Src/main.c    **** }
 448:Src/main.c    **** 
 449:Src/main.c    **** 
 450:Src/main.c    **** /**
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 10


 451:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 452:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 453:Src/main.c    ****  *
 454:Src/main.c    ****  * @param adc_val, value read from ADC.
 455:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 456:Src/main.c    ****  **/
 457:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 458:Src/main.c    **** {
  67              		.loc 1 458 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 459:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 459 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 460:Src/main.c    **** }
  90              		.loc 1 460 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE130:
 101              		.global	__aeabi_dcmplt
 102              		.global	__aeabi_dcmpgt
 103              		.section	.text.alarm_detect,"ax",%progbits
 104              		.align	2
 105              		.global	alarm_detect
 106              		.thumb
 107              		.thumb_func
 109              	alarm_detect:
 110              	.LFB131:
 461:Src/main.c    **** 
 462:Src/main.c    **** // Sampling frequency: 72e6/2/(495*3)
 463:Src/main.c    **** void alarm_detect()
 464:Src/main.c    **** {
 111              		.loc 1 464 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 11


 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115 0000 00B5     		push	{lr}
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 14, -4
 119 0002 83B0     		sub	sp, sp, #12
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 16
 465:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 122              		.loc 1 465 0
 123 0004 1C48     		ldr	r0, .L13
 124 0006 1D49     		ldr	r1, .L13+4
 125 0008 4FF40062 		mov	r2, #2048
 126 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 127              	.LVL8:
 466:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 467:Src/main.c    ****     HAL_Delay(500);
 128              		.loc 1 467 0
 129 0010 4FF4FA70 		mov	r0, #500
 130 0014 FFF7FEFF 		bl	HAL_Delay
 131              	.LVL9:
 132              	.L10:
 468:Src/main.c    ****     while(goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 100);
 133              		.loc 1 468 0 discriminator 1
 134 0018 0023     		movs	r3, #0
 135 001a 0093     		str	r3, [sp]
 136 001c 1848     		ldr	r0, .L13+8
 137 001e 45F6B261 		movw	r1, #24242
 138 0022 4FF47A72 		mov	r2, #1000
 139 0026 4FF40063 		mov	r3, #2048
 140 002a FFF7FEFF 		bl	goertzel
 141              	.LVL10:
 142 002e 51EC100B 		fmrrd	r0, r1, d0
 143 0032 0022     		movs	r2, #0
 144 0034 134B     		ldr	r3, .L13+12
 145 0036 FFF7FEFF 		bl	__aeabi_dcmplt
 146              	.LVL11:
 147 003a 0028     		cmp	r0, #0
 148 003c ECD1     		bne	.L10
 149              	.L11:
 469:Src/main.c    ****     while(goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 100);
 150              		.loc 1 469 0 discriminator 1
 151 003e 0023     		movs	r3, #0
 152 0040 0093     		str	r3, [sp]
 153 0042 0F48     		ldr	r0, .L13+8
 154 0044 45F6B261 		movw	r1, #24242
 155 0048 4FF47A72 		mov	r2, #1000
 156 004c 4FF40063 		mov	r3, #2048
 157 0050 FFF7FEFF 		bl	goertzel
 158              	.LVL12:
 159 0054 51EC100B 		fmrrd	r0, r1, d0
 160 0058 0022     		movs	r2, #0
 161 005a 0A4B     		ldr	r3, .L13+12
 162 005c FFF7FEFF 		bl	__aeabi_dcmpgt
 163              	.LVL13:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 12


 164 0060 0028     		cmp	r0, #0
 165 0062 ECD1     		bne	.L11
 470:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 166              		.loc 1 470 0
 167 0064 0448     		ldr	r0, .L13
 168 0066 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 169              	.LVL14:
 471:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 170              		.loc 1 471 0
 171 006a 0022     		movs	r2, #0
 172 006c 064B     		ldr	r3, .L13+16
 173 006e 1A70     		strb	r2, [r3]
 472:Src/main.c    **** }
 174              		.loc 1 472 0
 175 0070 03B0     		add	sp, sp, #12
 176              	.LCFI4:
 177              		.cfi_def_cfa_offset 4
 178              		@ sp needed
 179 0072 5DF804FB 		ldr	pc, [sp], #4
 180              	.L14:
 181 0076 00BF     		.align	2
 182              	.L13:
 183 0078 00000000 		.word	hadc1
 184 007c 00000000 		.word	dma_buffer
 185 0080 00000000 		.word	adc_values
 186 0084 00005940 		.word	1079574528
 187 0088 00000000 		.word	IR_INT_STATE
 188              		.cfi_endproc
 189              	.LFE131:
 191              		.section	.text.print,"ax",%progbits
 192              		.align	2
 193              		.global	print
 194              		.thumb
 195              		.thumb_func
 197              	print:
 198              	.LFB132:
 473:Src/main.c    **** 
 474:Src/main.c    **** 
 475:Src/main.c    **** /**
 476:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 477:Src/main.c    ****  * @param msg, string to print
 478:Src/main.c    ****  * @param row, row to print msg to
 479:Src/main.c    ****  */
 480:Src/main.c    **** void print(char *msg, int row)
 481:Src/main.c    **** {
 199              		.loc 1 481 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL15:
 204 0000 38B5     		push	{r3, r4, r5, lr}
 205              	.LCFI5:
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 3, -16
 208              		.cfi_offset 4, -12
 209              		.cfi_offset 5, -8
 210              		.cfi_offset 14, -4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 13


 211 0002 0546     		mov	r5, r0
 482:Src/main.c    ****     if (row == 0)
 212              		.loc 1 482 0
 213 0004 0C46     		mov	r4, r1
 214 0006 11B9     		cbnz	r1, .L16
 483:Src/main.c    ****     {
 484:Src/main.c    ****         ssd1306_Fill(Black);
 215              		.loc 1 484 0
 216 0008 0020     		movs	r0, #0
 217              	.LVL16:
 218 000a FFF7FEFF 		bl	ssd1306_Fill
 219              	.LVL17:
 220              	.L16:
 485:Src/main.c    ****     }
 486:Src/main.c    ****     ssd1306_SetCursor(0, row * 10);
 221              		.loc 1 486 0
 222 000e 04EB8404 		add	r4, r4, r4, lsl #2
 223              	.LVL18:
 224 0012 6100     		lsls	r1, r4, #1
 225 0014 0020     		movs	r0, #0
 226 0016 01F0FE01 		and	r1, r1, #254
 227 001a FFF7FEFF 		bl	ssd1306_SetCursor
 228              	.LVL19:
 487:Src/main.c    ****     ssd1306_WriteString(msg, Font_7x10, White);
 229              		.loc 1 487 0
 230 001e 054B     		ldr	r3, .L18
 231 0020 2846     		mov	r0, r5
 232 0022 93E80600 		ldmia	r3, {r1, r2}
 233 0026 0123     		movs	r3, #1
 234 0028 FFF7FEFF 		bl	ssd1306_WriteString
 235              	.LVL20:
 488:Src/main.c    ****     ssd1306_UpdateScreen();
 236              		.loc 1 488 0
 237 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 238              	.LVL21:
 239 0030 38BD     		pop	{r3, r4, r5, pc}
 240              	.LVL22:
 241              	.L19:
 242 0032 00BF     		.align	2
 243              	.L18:
 244 0034 00000000 		.word	Font_7x10
 245              		.cfi_endproc
 246              	.LFE132:
 248              		.section	.text.menu,"ax",%progbits
 249              		.align	2
 250              		.global	menu
 251              		.thumb
 252              		.thumb_func
 254              	menu:
 255              	.LFB133:
 489:Src/main.c    **** }
 490:Src/main.c    **** 
 491:Src/main.c    **** PID_t menu()
 492:Src/main.c    **** {
 256              		.loc 1 492 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 14


 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL23:
 261 0000 30B5     		push	{r4, r5, lr}
 262              	.LCFI6:
 263              		.cfi_def_cfa_offset 12
 264              		.cfi_offset 4, -12
 265              		.cfi_offset 5, -8
 266              		.cfi_offset 14, -4
 267 0002 8BB0     		sub	sp, sp, #44
 268              	.LCFI7:
 269              		.cfi_def_cfa_offset 56
 270 0004 0546     		mov	r5, r0
 493:Src/main.c    ****     print("Starting", 0);
 271              		.loc 1 493 0
 272 0006 2548     		ldr	r0, .L26
 273              	.LVL24:
 274 0008 0021     		movs	r1, #0
 275 000a FFF7FEFF 		bl	print
 276              	.LVL25:
 494:Src/main.c    ****     char msg[20] = "";
 277              		.loc 1 494 0
 278 000e 0024     		movs	r4, #0
 279 0010 0594     		str	r4, [sp, #20]
 280 0012 0694     		str	r4, [sp, #24]
 281 0014 0794     		str	r4, [sp, #28]
 282 0016 0894     		str	r4, [sp, #32]
 283 0018 0994     		str	r4, [sp, #36]
 284              	.LVL26:
 495:Src/main.c    ****     int pid_select = 0;
 496:Src/main.c    ****     uint32_t values[2] = {0, 0};
 285              		.loc 1 496 0
 286 001a 0394     		str	r4, [sp, #12]
 287 001c 0494     		str	r4, [sp, #16]
 288              	.LVL27:
 289              	.L24:
 497:Src/main.c    ****     while (1)
 498:Src/main.c    ****     {
 499:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 290              		.loc 1 499 0
 291 001e 2048     		ldr	r0, .L26+4
 292 0020 4FF40051 		mov	r1, #8192
 293 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 294              	.LVL28:
 295 0028 48BB     		cbnz	r0, .L21
 500:Src/main.c    ****         {
 501:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 296              		.loc 1 501 0
 297 002a 05A8     		add	r0, sp, #20
 298 002c 1D49     		ldr	r1, .L26+8
 299 002e 0AAB     		add	r3, sp, #40
 300 0030 03EB8403 		add	r3, r3, r4, lsl #2
 301 0034 53F81C2C 		ldr	r2, [r3, #-28]
 302 0038 FFF7FEFF 		bl	sprintf
 303              	.LVL29:
 502:Src/main.c    ****             print(msg, 0);
 304              		.loc 1 502 0
 305 003c 05A8     		add	r0, sp, #20
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 15


 306 003e 0021     		movs	r1, #0
 307 0040 FFF7FEFF 		bl	print
 308              	.LVL30:
 503:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 309              		.loc 1 503 0
 310 0044 13E0     		b	.L22
 311              	.L23:
 504:Src/main.c    ****             {
 505:Src/main.c    ****                 values[pid_select]++;
 312              		.loc 1 505 0
 313 0046 0AAB     		add	r3, sp, #40
 314 0048 03EB8403 		add	r3, r3, r4, lsl #2
 315 004c 53F81C2C 		ldr	r2, [r3, #-28]
 316 0050 0132     		adds	r2, r2, #1
 317 0052 43F81C2C 		str	r2, [r3, #-28]
 506:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 318              		.loc 1 506 0
 319 0056 05A8     		add	r0, sp, #20
 320 0058 1249     		ldr	r1, .L26+8
 321 005a FFF7FEFF 		bl	sprintf
 322              	.LVL31:
 507:Src/main.c    ****                 print(msg, 0);
 323              		.loc 1 507 0
 324 005e 05A8     		add	r0, sp, #20
 325 0060 0021     		movs	r1, #0
 326 0062 FFF7FEFF 		bl	print
 327              	.LVL32:
 508:Src/main.c    ****                 HAL_Delay(500);
 328              		.loc 1 508 0
 329 0066 4FF4FA70 		mov	r0, #500
 330 006a FFF7FEFF 		bl	HAL_Delay
 331              	.LVL33:
 332              	.L22:
 503:Src/main.c    ****             {
 333              		.loc 1 503 0
 334 006e 0C48     		ldr	r0, .L26+4
 335 0070 4FF40051 		mov	r1, #8192
 336 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 337              	.LVL34:
 338 0078 0028     		cmp	r0, #0
 339 007a E4D0     		beq	.L23
 509:Src/main.c    ****             }
 510:Src/main.c    ****             ++pid_select;
 340              		.loc 1 510 0
 341 007c 0134     		adds	r4, r4, #1
 342              	.LVL35:
 343              	.L21:
 511:Src/main.c    ****         }
 512:Src/main.c    ****         if (pid_select == 2)
 344              		.loc 1 512 0
 345 007e 022C     		cmp	r4, #2
 346 0080 CDD1     		bne	.L24
 513:Src/main.c    ****             break;
 514:Src/main.c    ****     }
 515:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 347              		.loc 1 515 0
 348 0082 BDF80C10 		ldrh	r1, [sp, #12]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 16


 349 0086 BDF81020 		ldrh	r2, [sp, #16]
 350 008a 0123     		movs	r3, #1
 351 008c 0093     		str	r3, [sp]
 352 008e 0193     		str	r3, [sp, #4]
 353 0090 2846     		mov	r0, r5
 354 0092 FFF7FEFF 		bl	pid_Init
 355              	.LVL36:
 516:Src/main.c    **** }
 356              		.loc 1 516 0
 357 0096 2846     		mov	r0, r5
 358 0098 0BB0     		add	sp, sp, #44
 359              	.LCFI8:
 360              		.cfi_def_cfa_offset 12
 361              		@ sp needed
 362 009a 30BD     		pop	{r4, r5, pc}
 363              	.LVL37:
 364              	.L27:
 365              		.align	2
 366              	.L26:
 367 009c 00000000 		.word	.LC0
 368 00a0 00080240 		.word	1073874944
 369 00a4 0C000000 		.word	.LC1
 370              		.cfi_endproc
 371              	.LFE133:
 373              		.section	.text.set_motor_speed,"ax",%progbits
 374              		.align	2
 375              		.global	set_motor_speed
 376              		.thumb
 377              		.thumb_func
 379              	set_motor_speed:
 380              	.LFB134:
 517:Src/main.c    **** 
 518:Src/main.c    **** 
 519:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 520:Src/main.c    **** {
 381              		.loc 1 520 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 386              	.LVL38:
 521:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 387              		.loc 1 521 0
 388 0000 0346     		mov	r3, r0
 389 0002 18B9     		cbnz	r0, .L29
 522:Src/main.c    ****     {
 523:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 390              		.loc 1 523 0
 391 0004 114A     		ldr	r2, .L33
 392 0006 1268     		ldr	r2, [r2]
 393 0008 9063     		str	r0, [r2, #56]
 394 000a 13E0     		b	.L30
 395              	.L29:
 524:Src/main.c    ****     }
 525:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 396              		.loc 1 525 0
 397 000c 0428     		cmp	r0, #4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 17


 398 000e 04D1     		bne	.L31
 526:Src/main.c    ****     {
 527:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 399              		.loc 1 527 0
 400 0010 0E4A     		ldr	r2, .L33
 401 0012 1268     		ldr	r2, [r2]
 402 0014 0020     		movs	r0, #0
 403              	.LVL39:
 404 0016 5063     		str	r0, [r2, #52]
 405 0018 0CE0     		b	.L30
 406              	.LVL40:
 407              	.L31:
 528:Src/main.c    ****     }
 529:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 408              		.loc 1 529 0
 409 001a 0828     		cmp	r0, #8
 410 001c 04D1     		bne	.L32
 530:Src/main.c    ****     {
 531:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 411              		.loc 1 531 0
 412 001e 0B4A     		ldr	r2, .L33
 413 0020 1268     		ldr	r2, [r2]
 414 0022 0020     		movs	r0, #0
 415              	.LVL41:
 416 0024 1064     		str	r0, [r2, #64]
 417 0026 05E0     		b	.L30
 418              	.LVL42:
 419              	.L32:
 532:Src/main.c    ****     }
 533:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 420              		.loc 1 533 0
 421 0028 0C28     		cmp	r0, #12
 422 002a 03D1     		bne	.L30
 534:Src/main.c    ****     {
 535:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 423              		.loc 1 535 0
 424 002c 074A     		ldr	r2, .L33
 425 002e 1268     		ldr	r2, [r2]
 426 0030 0020     		movs	r0, #0
 427              	.LVL43:
 428 0032 D063     		str	r0, [r2, #60]
 429              	.L30:
 536:Src/main.c    ****     }
 537:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed>1000?1000:speed);
 430              		.loc 1 537 0
 431 0034 054A     		ldr	r2, .L33
 432 0036 1268     		ldr	r2, [r2]
 433 0038 3432     		adds	r2, r2, #52
 434 003a 9B08     		lsrs	r3, r3, #2
 435              	.LVL44:
 436 003c B1F57A7F 		cmp	r1, #1000
 437 0040 28BF     		it	cs
 438 0042 4FF47A71 		movcs	r1, #1000
 439              	.LVL45:
 440 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 441 004a 7047     		bx	lr
 442              	.L34:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 18


 443              		.align	2
 444              	.L33:
 445 004c 00000000 		.word	htim1
 446              		.cfi_endproc
 447              	.LFE134:
 449              		.global	__aeabi_f2d
 450              		.global	__aeabi_d2uiz
 451              		.section	.text.turn,"ax",%progbits
 452              		.align	2
 453              		.global	turn
 454              		.thumb
 455              		.thumb_func
 457              	turn:
 458              	.LFB128:
 357:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 459              		.loc 1 357 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 24
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 464              	.LCFI9:
 465              		.cfi_def_cfa_offset 20
 466              		.cfi_offset 4, -20
 467              		.cfi_offset 5, -16
 468              		.cfi_offset 6, -12
 469              		.cfi_offset 7, -8
 470              		.cfi_offset 14, -4
 471 0002 2DED028B 		fstmfdd	sp!, {d8}
 472              	.LCFI10:
 473              		.cfi_def_cfa_offset 28
 474              		.cfi_offset 80, -28
 475              		.cfi_offset 81, -24
 476 0006 87B0     		sub	sp, sp, #28
 477              	.LCFI11:
 478              		.cfi_def_cfa_offset 56
 358:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 479              		.loc 1 358 0
 480 0008 5F48     		ldr	r0, .L48+16
 481 000a 6049     		ldr	r1, .L48+20
 482 000c 4FF40062 		mov	r2, #2048
 483 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 484              	.LVL46:
 360:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 485              		.loc 1 360 0
 486 0014 3220     		movs	r0, #50
 487 0016 FFF7FEFF 		bl	HAL_Delay
 488              	.LVL47:
 361:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 489              		.loc 1 361 0
 490 001a 5D4B     		ldr	r3, .L48+24
 491 001c 5869     		ldr	r0, [r3, #20]
 492 001e FFF7FEFF 		bl	calculate_heading
 493              	.LVL48:
 494 0022 B0EE408A 		fcpys	s16, s0
 495              	.LVL49:
 362:Src/main.c    ****     TIM4->CNT = 0;
 496              		.loc 1 362 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 19


 497 0026 F0EEC07A 		fabss	s15, s0
 498 002a 17EE900A 		fmrs	r0, s15
 499 002e FFF7FEFF 		bl	__aeabi_f2d
 500              	.LVL50:
 501 0032 0022     		movs	r2, #0
 502 0034 574B     		ldr	r3, .L48+28
 503 0036 FFF7FEFF 		bl	__aeabi_dmul
 504              	.LVL51:
 505 003a FFF7FEFF 		bl	__aeabi_d2uiz
 506              	.LVL52:
 507 003e 85B2     		uxth	r5, r0
 508              	.LVL53:
 363:Src/main.c    ****     TIM5->CNT = 0;
 509              		.loc 1 363 0
 510 0040 0024     		movs	r4, #0
 511 0042 554B     		ldr	r3, .L48+32
 512 0044 5C62     		str	r4, [r3, #36]
 364:Src/main.c    **** 
 513              		.loc 1 364 0
 514 0046 03F58063 		add	r3, r3, #1024
 515 004a 5C62     		str	r4, [r3, #36]
 366:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 516              		.loc 1 366 0
 517 004c 0194     		str	r4, [sp, #4]
 518 004e 0294     		str	r4, [sp, #8]
 519 0050 0394     		str	r4, [sp, #12]
 520 0052 0494     		str	r4, [sp, #16]
 521 0054 ADF81440 		strh	r4, [sp, #20]	@ movhi
 367:Src/main.c    ****     print(msg, 0);
 522              		.loc 1 367 0
 523 0058 01A8     		add	r0, sp, #4
 524 005a 5049     		ldr	r1, .L48+36
 525 005c 2A46     		mov	r2, r5
 526 005e FFF7FEFF 		bl	sprintf
 527              	.LVL54:
 368:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 528              		.loc 1 368 0
 529 0062 01A8     		add	r0, sp, #4
 530 0064 2146     		mov	r1, r4
 531 0066 FFF7FEFF 		bl	print
 532              	.LVL55:
 369:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 533              		.loc 1 369 0
 534 006a BDEEC87A 		ftosizs	s14, s16
 535              	.LVL56:
 370:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 536              		.loc 1 370 0
 537 006e F8EEC77A 		fsitos	s15, s14
 538 0072 78EE677A 		fsubs	s15, s16, s15
 539 0076 DFED4A6A 		flds	s13, .L48+40
 540 007a 67EEA67A 		fmuls	s15, s15, s13
 541              	.LVL57:
 371:Src/main.c    ****     print(msg, 2);
 542              		.loc 1 371 0
 543 007e 01A8     		add	r0, sp, #4
 544 0080 4849     		ldr	r1, .L48+44
 545 0082 17EE102A 		fmrs	r2, s14	@ int
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 20


 546 0086 FDEEE77A 		ftosizs	s15, s15
 547              	.LVL58:
 548 008a 17EE903A 		fmrs	r3, s15	@ int
 549 008e FFF7FEFF 		bl	sprintf
 550              	.LVL59:
 372:Src/main.c    **** 
 551              		.loc 1 372 0
 552 0092 01A8     		add	r0, sp, #4
 553 0094 0221     		movs	r1, #2
 554 0096 FFF7FEFF 		bl	print
 555              	.LVL60:
 374:Src/main.c    ****     {
 556              		.loc 1 374 0
 557 009a 18EE100A 		fmrs	r0, s16
 558 009e FFF7FEFF 		bl	__aeabi_f2d
 559              	.LVL61:
 560 00a2 0646     		mov	r6, r0
 561 00a4 0F46     		mov	r7, r1
 562 00a6 34A3     		adr	r3, .L48
 563 00a8 D3E90023 		ldrd	r2, [r3]
 564 00ac FFF7FEFF 		bl	__aeabi_dcmplt
 565              	.LVL62:
 566 00b0 20B3     		cbz	r0, .L46
 376:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 567              		.loc 1 376 0
 568 00b2 2046     		mov	r0, r4
 569 00b4 2146     		mov	r1, r4
 570 00b6 FFF7FEFF 		bl	set_motor_speed
 571              	.LVL63:
 377:Src/main.c    ****         while (TIM5->CNT < counts)
 572              		.loc 1 377 0
 573 00ba 0820     		movs	r0, #8
 574 00bc 3A4B     		ldr	r3, .L48+48
 575 00be 1988     		ldrh	r1, [r3]
 576 00c0 FFF7FEFF 		bl	set_motor_speed
 577              	.LVL64:
 378:Src/main.c    ****         {
 578              		.loc 1 378 0
 579 00c4 09E0     		b	.L38
 580              	.L39:
 380:Src/main.c    ****             print(msg, 4);
 581              		.loc 1 380 0
 582 00c6 394B     		ldr	r3, .L48+52
 583 00c8 5A6A     		ldr	r2, [r3, #36]
 584 00ca 01A8     		add	r0, sp, #4
 585 00cc 3849     		ldr	r1, .L48+56
 586 00ce FFF7FEFF 		bl	sprintf
 587              	.LVL65:
 381:Src/main.c    ****         }
 588              		.loc 1 381 0
 589 00d2 01A8     		add	r0, sp, #4
 590 00d4 0421     		movs	r1, #4
 591 00d6 FFF7FEFF 		bl	print
 592              	.LVL66:
 593              	.L38:
 378:Src/main.c    ****         {
 594              		.loc 1 378 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 21


 595 00da 344B     		ldr	r3, .L48+52
 596 00dc 5B6A     		ldr	r3, [r3, #36]
 597 00de AB42     		cmp	r3, r5
 598 00e0 F1D3     		bcc	.L39
 383:Src/main.c    ****         print(msg, 4);
 599              		.loc 1 383 0
 600 00e2 324C     		ldr	r4, .L48+52
 601 00e4 626A     		ldr	r2, [r4, #36]
 602 00e6 01A8     		add	r0, sp, #4
 603 00e8 3149     		ldr	r1, .L48+56
 604 00ea FFF7FEFF 		bl	sprintf
 605              	.LVL67:
 384:Src/main.c    ****         TIM5->CNT = 0;
 606              		.loc 1 384 0
 607 00ee 01A8     		add	r0, sp, #4
 608 00f0 0421     		movs	r1, #4
 609 00f2 FFF7FEFF 		bl	print
 610              	.LVL68:
 385:Src/main.c    ****     }
 611              		.loc 1 385 0
 612 00f6 0023     		movs	r3, #0
 613 00f8 6362     		str	r3, [r4, #36]
 614 00fa 2BE0     		b	.L40
 615              	.L46:
 387:Src/main.c    ****     {
 616              		.loc 1 387 0
 617 00fc 3046     		mov	r0, r6
 618 00fe 3946     		mov	r1, r7
 619 0100 1FA3     		adr	r3, .L48+8
 620 0102 D3E90023 		ldrd	r2, [r3]
 621 0106 FFF7FEFF 		bl	__aeabi_dcmpgt
 622              	.LVL69:
 623 010a 18B3     		cbz	r0, .L40
 389:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 624              		.loc 1 389 0
 625 010c 0020     		movs	r0, #0
 626 010e 294B     		ldr	r3, .L48+60
 627 0110 1988     		ldrh	r1, [r3]
 628 0112 FFF7FEFF 		bl	set_motor_speed
 629              	.LVL70:
 390:Src/main.c    ****         while (TIM4->CNT < counts)
 630              		.loc 1 390 0
 631 0116 0820     		movs	r0, #8
 632 0118 0021     		movs	r1, #0
 633 011a FFF7FEFF 		bl	set_motor_speed
 634              	.LVL71:
 391:Src/main.c    ****         {
 635              		.loc 1 391 0
 636 011e 09E0     		b	.L42
 637              	.L43:
 393:Src/main.c    ****             print(msg, 4);
 638              		.loc 1 393 0
 639 0120 1D4B     		ldr	r3, .L48+32
 640 0122 5A6A     		ldr	r2, [r3, #36]
 641 0124 01A8     		add	r0, sp, #4
 642 0126 2449     		ldr	r1, .L48+64
 643 0128 FFF7FEFF 		bl	sprintf
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 22


 644              	.LVL72:
 394:Src/main.c    ****         }
 645              		.loc 1 394 0
 646 012c 01A8     		add	r0, sp, #4
 647 012e 0421     		movs	r1, #4
 648 0130 FFF7FEFF 		bl	print
 649              	.LVL73:
 650              	.L42:
 391:Src/main.c    ****         {
 651              		.loc 1 391 0
 652 0134 184B     		ldr	r3, .L48+32
 653 0136 5B6A     		ldr	r3, [r3, #36]
 654 0138 AB42     		cmp	r3, r5
 655 013a F1D3     		bcc	.L43
 396:Src/main.c    ****         print(msg, 4);
 656              		.loc 1 396 0
 657 013c 164C     		ldr	r4, .L48+32
 658 013e 626A     		ldr	r2, [r4, #36]
 659 0140 01A8     		add	r0, sp, #4
 660 0142 1D49     		ldr	r1, .L48+64
 661 0144 FFF7FEFF 		bl	sprintf
 662              	.LVL74:
 397:Src/main.c    ****         TIM4->CNT = 0;
 663              		.loc 1 397 0
 664 0148 01A8     		add	r0, sp, #4
 665 014a 0421     		movs	r1, #4
 666 014c FFF7FEFF 		bl	print
 667              	.LVL75:
 398:Src/main.c    ****     }
 668              		.loc 1 398 0
 669 0150 0023     		movs	r3, #0
 670 0152 6362     		str	r3, [r4, #36]
 671              	.L40:
 400:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 672              		.loc 1 400 0
 673 0154 0020     		movs	r0, #0
 674 0156 0146     		mov	r1, r0
 675 0158 FFF7FEFF 		bl	set_motor_speed
 676              	.LVL76:
 401:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 677              		.loc 1 401 0
 678 015c 0820     		movs	r0, #8
 679 015e 0021     		movs	r1, #0
 680 0160 FFF7FEFF 		bl	set_motor_speed
 681              	.LVL77:
 402:Src/main.c    **** }
 682              		.loc 1 402 0
 683 0164 0848     		ldr	r0, .L48+16
 684 0166 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 685              	.LVL78:
 403:Src/main.c    **** 
 686              		.loc 1 403 0
 687 016a 07B0     		add	sp, sp, #28
 688              	.LCFI12:
 689              		.cfi_def_cfa_offset 28
 690              		@ sp needed
 691 016c BDEC028B 		fldmfdd	sp!, {d8}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 23


 692              	.LCFI13:
 693              		.cfi_restore 80
 694              		.cfi_restore 81
 695              		.cfi_def_cfa_offset 20
 696              	.LVL79:
 697 0170 F0BD     		pop	{r4, r5, r6, r7, pc}
 698              	.LVL80:
 699              	.L49:
 700 0172 00BFAFF3 		.align	3
 700      0080
 701              	.L48:
 702 0178 7B14AE47 		.word	1202590843
 703 017c E17AA4BF 		.word	-1079739679
 704 0180 7B14AE47 		.word	1202590843
 705 0184 E17AA43F 		.word	1067743969
 706 0188 00000000 		.word	hadc1
 707 018c 00000000 		.word	dma_buffer
 708 0190 00000000 		.word	adc_values
 709 0194 00005940 		.word	1079574528
 710 0198 00080040 		.word	1073743872
 711 019c 10000000 		.word	.LC2
 712 01a0 00007A44 		.word	1148846080
 713 01a4 1C000000 		.word	.LC3
 714 01a8 00000000 		.word	.LANCHOR0
 715 01ac 000C0040 		.word	1073744896
 716 01b0 28000000 		.word	.LC4
 717 01b4 00000000 		.word	.LANCHOR1
 718 01b8 38000000 		.word	.LC5
 719              		.cfi_endproc
 720              	.LFE128:
 722              		.global	__aeabi_i2d
 723              		.global	__aeabi_dadd
 724              		.section	.text.turn_deg,"ax",%progbits
 725              		.align	2
 726              		.global	turn_deg
 727              		.thumb
 728              		.thumb_func
 730              	turn_deg:
 731              	.LFB129:
 410:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 732              		.loc 1 410 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 24
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              	.LVL81:
 737 0000 30B5     		push	{r4, r5, lr}
 738              	.LCFI14:
 739              		.cfi_def_cfa_offset 12
 740              		.cfi_offset 4, -12
 741              		.cfi_offset 5, -8
 742              		.cfi_offset 14, -4
 743 0002 87B0     		sub	sp, sp, #28
 744              	.LCFI15:
 745              		.cfi_def_cfa_offset 40
 746 0004 0546     		mov	r5, r0
 411:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg-90) + 50;
 747              		.loc 1 411 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 24


 748 0006 2C48     		ldr	r0, .L55+8
 749              	.LVL82:
 750 0008 2C49     		ldr	r1, .L55+12
 751 000a 4FF40062 		mov	r2, #2048
 752 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 753              	.LVL83:
 412:Src/main.c    ****     TIM4->CNT = 0;
 754              		.loc 1 412 0
 755 0012 A5F15A00 		sub	r0, r5, #90
 756 0016 FFF7FEFF 		bl	__aeabi_i2d
 757              	.LVL84:
 758 001a 25A3     		adr	r3, .L55
 759 001c D3E90023 		ldrd	r2, [r3]
 760 0020 FFF7FEFF 		bl	__aeabi_dmul
 761              	.LVL85:
 762 0024 0022     		movs	r2, #0
 763 0026 264B     		ldr	r3, .L55+16
 764 0028 FFF7FEFF 		bl	__aeabi_dadd
 765              	.LVL86:
 766 002c FFF7FEFF 		bl	__aeabi_d2uiz
 767              	.LVL87:
 768 0030 84B2     		uxth	r4, r0
 769              	.LVL88:
 413:Src/main.c    ****     TIM5->CNT = 0;
 770              		.loc 1 413 0
 771 0032 0023     		movs	r3, #0
 772 0034 234A     		ldr	r2, .L55+20
 773 0036 5362     		str	r3, [r2, #36]
 414:Src/main.c    **** 
 774              		.loc 1 414 0
 775 0038 02F58062 		add	r2, r2, #1024
 776 003c 5362     		str	r3, [r2, #36]
 416:Src/main.c    **** 
 777              		.loc 1 416 0
 778 003e 0193     		str	r3, [sp, #4]
 779 0040 0293     		str	r3, [sp, #8]
 780 0042 0393     		str	r3, [sp, #12]
 781 0044 0493     		str	r3, [sp, #16]
 782 0046 ADF81430 		strh	r3, [sp, #20]	@ movhi
 418:Src/main.c    ****     {
 783              		.loc 1 418 0
 784 004a 1DB3     		cbz	r5, .L51
 420:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 785              		.loc 1 420 0
 786 004c 1846     		mov	r0, r3
 787 004e 1946     		mov	r1, r3
 788 0050 FFF7FEFF 		bl	set_motor_speed
 789              	.LVL89:
 421:Src/main.c    ****         while (TIM5->CNT < counts)
 790              		.loc 1 421 0
 791 0054 0820     		movs	r0, #8
 792 0056 47F23051 		movw	r1, #30000
 793 005a FFF7FEFF 		bl	set_motor_speed
 794              	.LVL90:
 422:Src/main.c    ****         {
 795              		.loc 1 422 0
 796 005e 09E0     		b	.L52
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 25


 797              	.L53:
 424:Src/main.c    ****             print(msg, 4);
 798              		.loc 1 424 0
 799 0060 194B     		ldr	r3, .L55+24
 800 0062 5A6A     		ldr	r2, [r3, #36]
 801 0064 01A8     		add	r0, sp, #4
 802 0066 1949     		ldr	r1, .L55+28
 803 0068 FFF7FEFF 		bl	sprintf
 804              	.LVL91:
 425:Src/main.c    ****         }
 805              		.loc 1 425 0
 806 006c 01A8     		add	r0, sp, #4
 807 006e 0421     		movs	r1, #4
 808 0070 FFF7FEFF 		bl	print
 809              	.LVL92:
 810              	.L52:
 422:Src/main.c    ****         {
 811              		.loc 1 422 0
 812 0074 144B     		ldr	r3, .L55+24
 813 0076 5B6A     		ldr	r3, [r3, #36]
 814 0078 A342     		cmp	r3, r4
 815 007a F1D3     		bcc	.L53
 427:Src/main.c    ****         print(msg, 4);
 816              		.loc 1 427 0
 817 007c 124C     		ldr	r4, .L55+24
 818              	.LVL93:
 819 007e 626A     		ldr	r2, [r4, #36]
 820 0080 01A8     		add	r0, sp, #4
 821 0082 1249     		ldr	r1, .L55+28
 822 0084 FFF7FEFF 		bl	sprintf
 823              	.LVL94:
 428:Src/main.c    ****         TIM5->CNT = 0;
 824              		.loc 1 428 0
 825 0088 01A8     		add	r0, sp, #4
 826 008a 0421     		movs	r1, #4
 827 008c FFF7FEFF 		bl	print
 828              	.LVL95:
 429:Src/main.c    ****     }
 829              		.loc 1 429 0
 830 0090 0023     		movs	r3, #0
 831 0092 6362     		str	r3, [r4, #36]
 832              	.L51:
 444:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 833              		.loc 1 444 0
 834 0094 0020     		movs	r0, #0
 835 0096 0146     		mov	r1, r0
 836 0098 FFF7FEFF 		bl	set_motor_speed
 837              	.LVL96:
 445:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 838              		.loc 1 445 0
 839 009c 0820     		movs	r0, #8
 840 009e 0021     		movs	r1, #0
 841 00a0 FFF7FEFF 		bl	set_motor_speed
 842              	.LVL97:
 446:Src/main.c    **** }
 843              		.loc 1 446 0
 844 00a4 0448     		ldr	r0, .L55+8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 26


 845 00a6 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 846              	.LVL98:
 447:Src/main.c    **** 
 847              		.loc 1 447 0
 848 00aa 07B0     		add	sp, sp, #28
 849              	.LCFI16:
 850              		.cfi_def_cfa_offset 12
 851              		@ sp needed
 852 00ac 30BD     		pop	{r4, r5, pc}
 853              	.L56:
 854 00ae 00BF     		.align	3
 855              	.L55:
 856 00b0 721CC771 		.word	1908874354
 857 00b4 1CC7E13F 		.word	1071761180
 858 00b8 00000000 		.word	hadc1
 859 00bc 00000000 		.word	dma_buffer
 860 00c0 00004940 		.word	1078525952
 861 00c4 00080040 		.word	1073743872
 862 00c8 000C0040 		.word	1073744896
 863 00cc 28000000 		.word	.LC4
 864              		.cfi_endproc
 865              	.LFE129:
 867              		.section	.text.encoder_pid,"ax",%progbits
 868              		.align	2
 869              		.global	encoder_pid
 870              		.thumb
 871              		.thumb_func
 873              	encoder_pid:
 874              	.LFB135:
 538:Src/main.c    **** }
 539:Src/main.c    **** 
 540:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 541:Src/main.c    **** {
 875              		.loc 1 541 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 24
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879              	.LVL99:
 880 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 881              	.LCFI17:
 882              		.cfi_def_cfa_offset 24
 883              		.cfi_offset 4, -24
 884              		.cfi_offset 5, -20
 885              		.cfi_offset 6, -16
 886              		.cfi_offset 7, -12
 887              		.cfi_offset 8, -8
 888              		.cfi_offset 14, -4
 889 0004 86B0     		sub	sp, sp, #24
 890              	.LCFI18:
 891              		.cfi_def_cfa_offset 48
 542:Src/main.c    ****     /* Get error */
 543:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
 892              		.loc 1 543 0
 893 0006 264B     		ldr	r3, .L63
 894 0008 5F6A     		ldr	r7, [r3, #36]
 895              	.LVL100:
 544:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 27


 896              		.loc 1 544 0
 897 000a 03F58063 		add	r3, r3, #1024
 898 000e D3F82480 		ldr	r8, [r3, #36]
 899              	.LVL101:
 545:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
 900              		.loc 1 545 0
 901 0012 C8EB0703 		rsb	r3, r8, r7
 902 0016 0361     		str	r3, [r0, #16]
 546:Src/main.c    **** 
 547:Src/main.c    ****     /* Get gain */
 548:Src/main.c    ****     // Gain <0 for ride side faster
 549:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
 903              		.loc 1 549 0
 904 0018 FFF7FEFF 		bl	pid_GetGain
 905              	.LVL102:
 550:Src/main.c    **** 
 551:Src/main.c    ****     /* Set Motor Speeds*/
 552:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 906              		.loc 1 552 0
 907 001c 214B     		ldr	r3, .L63+4
 908 001e 1E88     		ldrh	r6, [r3]
 909              	.LVL103:
 553:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 910              		.loc 1 553 0
 911 0020 214B     		ldr	r3, .L63+8
 912 0022 1D88     		ldrh	r5, [r3]
 913              	.LVL104:
 554:Src/main.c    ****     if(gain<0){
 914              		.loc 1 554 0
 915 0024 0028     		cmp	r0, #0
 916 0026 01DA     		bge	.L58
 555:Src/main.c    ****         lspeed -= gain;
 917              		.loc 1 555 0
 918 0028 361A     		subs	r6, r6, r0
 919              	.LVL105:
 920 002a 02E0     		b	.L59
 921              	.L58:
 556:Src/main.c    ****     }else if(gain>0){
 922              		.loc 1 556 0
 923 002c 0028     		cmp	r0, #0
 924 002e 00DD     		ble	.L59
 557:Src/main.c    ****         rspeed += gain;
 925              		.loc 1 557 0
 926 0030 0544     		add	r5, r5, r0
 927              	.LVL106:
 928              	.L59:
 558:Src/main.c    ****     }
 559:Src/main.c    **** 
 560:Src/main.c    ****     char msg[18] = "";
 929              		.loc 1 560 0
 930 0032 0024     		movs	r4, #0
 931 0034 0194     		str	r4, [sp, #4]
 932 0036 0294     		str	r4, [sp, #8]
 933 0038 0394     		str	r4, [sp, #12]
 934 003a 0494     		str	r4, [sp, #16]
 935 003c ADF81440 		strh	r4, [sp, #20]	@ movhi
 561:Src/main.c    ****     sprintf(msg, "LS: %lu", lspeed);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 28


 936              		.loc 1 561 0
 937 0040 01A8     		add	r0, sp, #4
 938              	.LVL107:
 939 0042 1A49     		ldr	r1, .L63+12
 940 0044 3246     		mov	r2, r6
 941 0046 FFF7FEFF 		bl	sprintf
 942              	.LVL108:
 562:Src/main.c    ****     print(msg, 0);
 943              		.loc 1 562 0
 944 004a 01A8     		add	r0, sp, #4
 945 004c 2146     		mov	r1, r4
 946 004e FFF7FEFF 		bl	print
 947              	.LVL109:
 563:Src/main.c    ****     sprintf(msg, "RS: %lu", rspeed);
 948              		.loc 1 563 0
 949 0052 01A8     		add	r0, sp, #4
 950 0054 1649     		ldr	r1, .L63+16
 951 0056 2A46     		mov	r2, r5
 952 0058 FFF7FEFF 		bl	sprintf
 953              	.LVL110:
 564:Src/main.c    ****     print(msg, 1);
 954              		.loc 1 564 0
 955 005c 01A8     		add	r0, sp, #4
 956 005e 0121     		movs	r1, #1
 957 0060 FFF7FEFF 		bl	print
 958              	.LVL111:
 565:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 959              		.loc 1 565 0
 960 0064 2046     		mov	r0, r4
 961 0066 3146     		mov	r1, r6
 962 0068 FFF7FEFF 		bl	set_motor_speed
 963              	.LVL112:
 566:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 964              		.loc 1 566 0
 965 006c 0820     		movs	r0, #8
 966 006e 2946     		mov	r1, r5
 967 0070 FFF7FEFF 		bl	set_motor_speed
 968              	.LVL113:
 567:Src/main.c    **** 
 568:Src/main.c    ****     /* Prevent weird overflow shit */
 569:Src/main.c    ****     if(lcnt>60000 || rcnt>60000){
 969              		.loc 1 569 0
 970 0074 4EF66023 		movw	r3, #60000
 971 0078 9F42     		cmp	r7, r3
 972 007a 01D8     		bhi	.L60
 973              		.loc 1 569 0 is_stmt 0 discriminator 1
 974 007c 9845     		cmp	r8, r3
 975 007e 0CD9     		bls	.L57
 976              	.L60:
 570:Src/main.c    ****         TIM4->CNT -= 50000;
 977              		.loc 1 570 0 is_stmt 1
 978 0080 074A     		ldr	r2, .L63
 979 0082 536A     		ldr	r3, [r2, #36]
 980 0084 A3F54343 		sub	r3, r3, #49920
 981 0088 503B     		subs	r3, r3, #80
 982 008a 5362     		str	r3, [r2, #36]
 571:Src/main.c    ****         TIM5->CNT -= 50000;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 29


 983              		.loc 1 571 0
 984 008c 02F58062 		add	r2, r2, #1024
 985 0090 536A     		ldr	r3, [r2, #36]
 986 0092 A3F54343 		sub	r3, r3, #49920
 987 0096 503B     		subs	r3, r3, #80
 988 0098 5362     		str	r3, [r2, #36]
 989              	.L57:
 572:Src/main.c    ****     }
 573:Src/main.c    **** }
 990              		.loc 1 573 0
 991 009a 06B0     		add	sp, sp, #24
 992              	.LCFI19:
 993              		.cfi_def_cfa_offset 24
 994              		@ sp needed
 995 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 996              	.LVL114:
 997              	.L64:
 998              		.align	2
 999              	.L63:
 1000 00a0 00080040 		.word	1073743872
 1001 00a4 00000000 		.word	.LANCHOR1
 1002 00a8 00000000 		.word	.LANCHOR0
 1003 00ac 48000000 		.word	.LC6
 1004 00b0 50000000 		.word	.LC7
 1005              		.cfi_endproc
 1006              	.LFE135:
 1008              		.section	.text.drive_straight,"ax",%progbits
 1009              		.align	2
 1010              		.global	drive_straight
 1011              		.thumb
 1012              		.thumb_func
 1014              	drive_straight:
 1015              	.LFB127:
 347:Src/main.c    ****     encoder_pid(enc_pid);
 1016              		.loc 1 347 0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 0
 1019              		@ frame_needed = 0, uses_anonymous_args = 0
 1020              	.LVL115:
 1021 0000 08B5     		push	{r3, lr}
 1022              	.LCFI20:
 1023              		.cfi_def_cfa_offset 8
 1024              		.cfi_offset 3, -8
 1025              		.cfi_offset 14, -4
 348:Src/main.c    ****     HAL_Delay(10);
 1026              		.loc 1 348 0
 1027 0002 FFF7FEFF 		bl	encoder_pid
 1028              	.LVL116:
 349:Src/main.c    **** }
 1029              		.loc 1 349 0
 1030 0006 0A20     		movs	r0, #10
 1031 0008 FFF7FEFF 		bl	HAL_Delay
 1032              	.LVL117:
 1033 000c 08BD     		pop	{r3, pc}
 1034              		.cfi_endproc
 1035              	.LFE127:
 1037 000e 00BF     		.section	.text.square_edge,"ax",%progbits
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 30


 1038              		.align	2
 1039              		.global	square_edge
 1040              		.thumb
 1041              		.thumb_func
 1043              	square_edge:
 1044              	.LFB126:
 331:Src/main.c    ****     while(1){
 1045              		.loc 1 331 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049              	.LVL118:
 1050 0000 10B5     		push	{r4, lr}
 1051              	.LCFI21:
 1052              		.cfi_def_cfa_offset 8
 1053              		.cfi_offset 4, -8
 1054              		.cfi_offset 14, -4
 1055 0002 0446     		mov	r4, r0
 1056              	.LVL119:
 1057              	.L68:
 333:Src/main.c    ****         if(EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED){
 1058              		.loc 1 333 0
 1059 0004 2046     		mov	r0, r4
 1060 0006 FFF7FEFF 		bl	drive_straight
 1061              	.LVL120:
 334:Src/main.c    ****             if(EDGE_LEFT_STATE== FLAGGED){
 1062              		.loc 1 334 0
 1063 000a 0E4B     		ldr	r3, .L74
 1064 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1065 000e 012B     		cmp	r3, #1
 1066 0010 03D0     		beq	.L69
 334:Src/main.c    ****             if(EDGE_LEFT_STATE== FLAGGED){
 1067              		.loc 1 334 0 is_stmt 0 discriminator 1
 1068 0012 0D4A     		ldr	r2, .L74+4
 1069 0014 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1070 0016 012A     		cmp	r2, #1
 1071 0018 0ED1     		bne	.L70
 1072              	.L69:
 335:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 1073              		.loc 1 335 0 is_stmt 1
 1074 001a 012B     		cmp	r3, #1
 1075 001c 03D1     		bne	.L71
 336:Src/main.c    ****             }
 1076              		.loc 1 336 0
 1077 001e 0020     		movs	r0, #0
 1078 0020 0146     		mov	r1, r0
 1079 0022 FFF7FEFF 		bl	set_motor_speed
 1080              	.LVL121:
 1081              	.L71:
 338:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 1082              		.loc 1 338 0
 1083 0026 084B     		ldr	r3, .L74+4
 1084 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1085 002a 012B     		cmp	r3, #1
 1086 002c EAD1     		bne	.L68
 339:Src/main.c    ****             }
 1087              		.loc 1 339 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 31


 1088 002e 0820     		movs	r0, #8
 1089 0030 0021     		movs	r1, #0
 1090 0032 FFF7FEFF 		bl	set_motor_speed
 1091              	.LVL122:
 1092 0036 E5E7     		b	.L68
 1093              	.L70:
 341:Src/main.c    ****             break;
 1094              		.loc 1 341 0
 1095 0038 012B     		cmp	r3, #1
 1096 003a E3D1     		bne	.L68
 341:Src/main.c    ****             break;
 1097              		.loc 1 341 0 is_stmt 0 discriminator 1
 1098 003c 012A     		cmp	r2, #1
 1099 003e E1D1     		bne	.L68
 345:Src/main.c    **** 
 1100              		.loc 1 345 0 is_stmt 1
 1101 0040 10BD     		pop	{r4, pc}
 1102              	.LVL123:
 1103              	.L75:
 1104 0042 00BF     		.align	2
 1105              	.L74:
 1106 0044 00000000 		.word	EDGE_LEFT_STATE
 1107 0048 00000000 		.word	EDGE_RIGHT_STATE
 1108              		.cfi_endproc
 1109              	.LFE126:
 1111              		.section	.text._Error_Handler,"ax",%progbits
 1112              		.align	2
 1113              		.global	_Error_Handler
 1114              		.thumb
 1115              		.thumb_func
 1117              	_Error_Handler:
 1118              	.LFB136:
 574:Src/main.c    **** 
 575:Src/main.c    **** /* USER CODE END 4 */
 576:Src/main.c    **** 
 577:Src/main.c    **** /**
 578:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 579:Src/main.c    ****  * @param  file: The file name as string.
 580:Src/main.c    ****  * @param  line: The line in file as a number.
 581:Src/main.c    ****  * @retval None
 582:Src/main.c    ****  */
 583:Src/main.c    **** void _Error_Handler(char *file, int line)
 584:Src/main.c    **** {
 1119              		.loc 1 584 0
 1120              		.cfi_startproc
 1121              		@ Volatile: function does not return.
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124              		@ link register save eliminated.
 1125              	.LVL124:
 1126              	.L77:
 585:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 586:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 587:Src/main.c    ****     while (1)
 588:Src/main.c    ****     {
 589:Src/main.c    ****     }
 1127              		.loc 1 589 0 discriminator 1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 32


 1128 0000 FEE7     		b	.L77
 1129              		.cfi_endproc
 1130              	.LFE136:
 1132 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1133              		.align	2
 1134              		.global	SystemClock_Config
 1135              		.thumb
 1136              		.thumb_func
 1138              	SystemClock_Config:
 1139              	.LFB125:
 276:Src/main.c    **** 
 1140              		.loc 1 276 0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 80
 1143              		@ frame_needed = 0, uses_anonymous_args = 0
 1144 0000 00B5     		push	{lr}
 1145              	.LCFI22:
 1146              		.cfi_def_cfa_offset 4
 1147              		.cfi_offset 14, -4
 1148 0002 95B0     		sub	sp, sp, #84
 1149              	.LCFI23:
 1150              		.cfi_def_cfa_offset 88
 1151              	.LBB2:
 283:Src/main.c    **** 
 1152              		.loc 1 283 0
 1153 0004 0022     		movs	r2, #0
 1154 0006 0192     		str	r2, [sp, #4]
 1155 0008 2A4B     		ldr	r3, .L82
 1156 000a 196C     		ldr	r1, [r3, #64]
 1157 000c 41F08051 		orr	r1, r1, #268435456
 1158 0010 1964     		str	r1, [r3, #64]
 1159 0012 1B6C     		ldr	r3, [r3, #64]
 1160 0014 03F08053 		and	r3, r3, #268435456
 1161 0018 0193     		str	r3, [sp, #4]
 1162 001a 019B     		ldr	r3, [sp, #4]
 1163              	.LBE2:
 1164              	.LBB3:
 285:Src/main.c    **** 
 1165              		.loc 1 285 0
 1166 001c 0292     		str	r2, [sp, #8]
 1167 001e 2649     		ldr	r1, .L82+4
 1168 0020 0B68     		ldr	r3, [r1]
 1169 0022 23F44043 		bic	r3, r3, #49152
 1170 0026 43F40043 		orr	r3, r3, #32768
 1171 002a 0B60     		str	r3, [r1]
 1172 002c 0B68     		ldr	r3, [r1]
 1173 002e 03F44043 		and	r3, r3, #49152
 1174 0032 0293     		str	r3, [sp, #8]
 1175 0034 029B     		ldr	r3, [sp, #8]
 1176              	.LBE3:
 289:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1177              		.loc 1 289 0
 1178 0036 0223     		movs	r3, #2
 1179 0038 0893     		str	r3, [sp, #32]
 290:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 1180              		.loc 1 290 0
 1181 003a 0121     		movs	r1, #1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 33


 1182 003c 0B91     		str	r1, [sp, #44]
 291:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1183              		.loc 1 291 0
 1184 003e 1021     		movs	r1, #16
 1185 0040 0C91     		str	r1, [sp, #48]
 292:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1186              		.loc 1 292 0
 1187 0042 0E93     		str	r3, [sp, #56]
 293:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 1188              		.loc 1 293 0
 1189 0044 0F92     		str	r2, [sp, #60]
 294:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 1190              		.loc 1 294 0
 1191 0046 0822     		movs	r2, #8
 1192 0048 1092     		str	r2, [sp, #64]
 295:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1193              		.loc 1 295 0
 1194 004a 4822     		movs	r2, #72
 1195 004c 1192     		str	r2, [sp, #68]
 296:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 1196              		.loc 1 296 0
 1197 004e 1293     		str	r3, [sp, #72]
 297:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1198              		.loc 1 297 0
 1199 0050 0423     		movs	r3, #4
 1200 0052 1393     		str	r3, [sp, #76]
 298:Src/main.c    ****     {
 1201              		.loc 1 298 0
 1202 0054 08A8     		add	r0, sp, #32
 1203 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1204              	.LVL125:
 1205 005a 20B1     		cbz	r0, .L79
 300:Src/main.c    ****     }
 1206              		.loc 1 300 0
 1207 005c 1748     		ldr	r0, .L82+8
 1208 005e 4FF49671 		mov	r1, #300
 1209 0062 FFF7FEFF 		bl	_Error_Handler
 1210              	.LVL126:
 1211              	.L79:
 305:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1212              		.loc 1 305 0
 1213 0066 0F23     		movs	r3, #15
 1214 0068 0393     		str	r3, [sp, #12]
 307:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1215              		.loc 1 307 0
 1216 006a 0221     		movs	r1, #2
 1217 006c 0491     		str	r1, [sp, #16]
 308:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1218              		.loc 1 308 0
 1219 006e 0023     		movs	r3, #0
 1220 0070 0593     		str	r3, [sp, #20]
 309:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1221              		.loc 1 309 0
 1222 0072 4FF48052 		mov	r2, #4096
 1223 0076 0692     		str	r2, [sp, #24]
 310:Src/main.c    **** 
 1224              		.loc 1 310 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 34


 1225 0078 0793     		str	r3, [sp, #28]
 312:Src/main.c    ****     {
 1226              		.loc 1 312 0
 1227 007a 03A8     		add	r0, sp, #12
 1228 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1229              	.LVL127:
 1230 0080 20B1     		cbz	r0, .L80
 314:Src/main.c    ****     }
 1231              		.loc 1 314 0
 1232 0082 0E48     		ldr	r0, .L82+8
 1233 0084 4FF49D71 		mov	r1, #314
 1234 0088 FFF7FEFF 		bl	_Error_Handler
 1235              	.LVL128:
 1236              	.L80:
 319:Src/main.c    **** 
 1237              		.loc 1 319 0
 1238 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1239              	.LVL129:
 1240 0090 0B4B     		ldr	r3, .L82+12
 1241 0092 A3FB0030 		umull	r3, r0, r3, r0
 1242 0096 8009     		lsrs	r0, r0, #6
 1243 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1244              	.LVL130:
 323:Src/main.c    **** 
 1245              		.loc 1 323 0
 1246 009c 0420     		movs	r0, #4
 1247 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1248              	.LVL131:
 326:Src/main.c    **** }
 1249              		.loc 1 326 0
 1250 00a2 4FF0FF30 		mov	r0, #-1
 1251 00a6 0021     		movs	r1, #0
 1252 00a8 0A46     		mov	r2, r1
 1253 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1254              	.LVL132:
 327:Src/main.c    **** 
 1255              		.loc 1 327 0
 1256 00ae 15B0     		add	sp, sp, #84
 1257              	.LCFI24:
 1258              		.cfi_def_cfa_offset 4
 1259              		@ sp needed
 1260 00b0 5DF804FB 		ldr	pc, [sp], #4
 1261              	.L83:
 1262              		.align	2
 1263              	.L82:
 1264 00b4 00380240 		.word	1073887232
 1265 00b8 00700040 		.word	1073770496
 1266 00bc 58000000 		.word	.LC8
 1267 00c0 D34D6210 		.word	274877907
 1268              		.cfi_endproc
 1269              	.LFE125:
 1271              		.section	.text.main,"ax",%progbits
 1272              		.align	2
 1273              		.global	main
 1274              		.thumb
 1275              		.thumb_func
 1277              	main:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 35


 1278              	.LFB124:
 108:Src/main.c    ****     /* USER CODE BEGIN 1 */
 1279              		.loc 1 108 0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 48
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
 1283 0000 30B5     		push	{r4, r5, lr}
 1284              	.LCFI25:
 1285              		.cfi_def_cfa_offset 12
 1286              		.cfi_offset 4, -12
 1287              		.cfi_offset 5, -8
 1288              		.cfi_offset 14, -4
 1289 0002 8FB0     		sub	sp, sp, #60
 1290              	.LCFI26:
 1291              		.cfi_def_cfa_offset 72
 116:Src/main.c    **** 
 1292              		.loc 1 116 0
 1293 0004 FFF7FEFF 		bl	HAL_Init
 1294              	.LVL133:
 123:Src/main.c    **** 
 1295              		.loc 1 123 0
 1296 0008 FFF7FEFF 		bl	SystemClock_Config
 1297              	.LVL134:
 130:Src/main.c    ****     MX_DMA_Init();
 1298              		.loc 1 130 0
 1299 000c FFF7FEFF 		bl	MX_GPIO_Init
 1300              	.LVL135:
 131:Src/main.c    ****     MX_TIM3_Init();
 1301              		.loc 1 131 0
 1302 0010 FFF7FEFF 		bl	MX_DMA_Init
 1303              	.LVL136:
 132:Src/main.c    ****     MX_TIM1_Init();
 1304              		.loc 1 132 0
 1305 0014 FFF7FEFF 		bl	MX_TIM3_Init
 1306              	.LVL137:
 133:Src/main.c    ****     MX_TIM2_Init();
 1307              		.loc 1 133 0
 1308 0018 FFF7FEFF 		bl	MX_TIM1_Init
 1309              	.LVL138:
 134:Src/main.c    ****     MX_USART6_UART_Init();
 1310              		.loc 1 134 0
 1311 001c FFF7FEFF 		bl	MX_TIM2_Init
 1312              	.LVL139:
 135:Src/main.c    ****     MX_ADC1_Init();
 1313              		.loc 1 135 0
 1314 0020 FFF7FEFF 		bl	MX_USART6_UART_Init
 1315              	.LVL140:
 136:Src/main.c    ****     MX_I2C1_Init();
 1316              		.loc 1 136 0
 1317 0024 FFF7FEFF 		bl	MX_ADC1_Init
 1318              	.LVL141:
 137:Src/main.c    ****     MX_TIM4_Init();
 1319              		.loc 1 137 0
 1320 0028 FFF7FEFF 		bl	MX_I2C1_Init
 1321              	.LVL142:
 138:Src/main.c    ****     MX_TIM9_Init();
 1322              		.loc 1 138 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 36


 1323 002c FFF7FEFF 		bl	MX_TIM4_Init
 1324              	.LVL143:
 139:Src/main.c    ****     MX_TIM5_Init();
 1325              		.loc 1 139 0
 1326 0030 FFF7FEFF 		bl	MX_TIM9_Init
 1327              	.LVL144:
 140:Src/main.c    ****     /* USER CODE BEGIN 2 */
 1328              		.loc 1 140 0
 1329 0034 FFF7FEFF 		bl	MX_TIM5_Init
 1330              	.LVL145:
 157:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1331              		.loc 1 157 0
 1332 0038 7848     		ldr	r0, .L99
 1333 003a 1821     		movs	r1, #24
 1334 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1335              	.LVL146:
 158:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1336              		.loc 1 158 0
 1337 0040 7748     		ldr	r0, .L99+4
 1338 0042 1821     		movs	r1, #24
 1339 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1340              	.LVL147:
 159:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 1341              		.loc 1 159 0
 1342 0048 764C     		ldr	r4, .L99+8
 1343 004a 2046     		mov	r0, r4
 1344 004c 0021     		movs	r1, #0
 1345 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1346              	.LVL148:
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1347              		.loc 1 160 0
 1348 0052 2046     		mov	r0, r4
 1349 0054 0421     		movs	r1, #4
 1350 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1351              	.LVL149:
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 1352              		.loc 1 161 0
 1353 005a 2046     		mov	r0, r4
 1354 005c 0821     		movs	r1, #8
 1355 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1356              	.LVL150:
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1357              		.loc 1 162 0
 1358 0062 2046     		mov	r0, r4
 1359 0064 0C21     		movs	r1, #12
 1360 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1361              	.LVL151:
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1362              		.loc 1 163 0
 1363 006a 6F4C     		ldr	r4, .L99+12
 1364 006c 2046     		mov	r0, r4
 1365 006e 0021     		movs	r1, #0
 1366 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1367              	.LVL152:
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1368              		.loc 1 164 0
 1369 0074 2046     		mov	r0, r4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 37


 1370 0076 0421     		movs	r1, #4
 1371 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1372              	.LVL153:
 165:Src/main.c    **** 
 1373              		.loc 1 165 0
 1374 007c 2046     		mov	r0, r4
 1375 007e 0821     		movs	r1, #8
 1376 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1377              	.LVL154:
 168:Src/main.c    ****     print("Starting", 0);
 1378              		.loc 1 168 0
 1379 0084 FFF7FEFF 		bl	ssd1306_Init
 1380              	.LVL155:
 169:Src/main.c    ****     claw_init(&htim3);
 1381              		.loc 1 169 0
 1382 0088 6848     		ldr	r0, .L99+16
 1383 008a 0021     		movs	r1, #0
 1384 008c FFF7FEFF 		bl	print
 1385              	.LVL156:
 170:Src/main.c    ****     ///basket_init(&htim3);
 1386              		.loc 1 170 0
 1387 0090 2046     		mov	r0, r4
 1388 0092 FFF7FEFF 		bl	claw_init
 1389              	.LVL157:
 174:Src/main.c    **** 
 1390              		.loc 1 174 0
 1391 0096 0121     		movs	r1, #1
 1392 0098 0091     		str	r1, [sp]
 1393 009a 0191     		str	r1, [sp, #4]
 1394 009c 08A8     		add	r0, sp, #32
 1395 009e 0022     		movs	r2, #0
 1396 00a0 1346     		mov	r3, r2
 1397 00a2 FFF7FEFF 		bl	pid_Init
 1398              	.LVL158:
 176:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1399              		.loc 1 176 0
 1400 00a6 0020     		movs	r0, #0
 1401 00a8 614B     		ldr	r3, .L99+20
 1402 00aa 1988     		ldrh	r1, [r3]
 1403 00ac FFF7FEFF 		bl	set_motor_speed
 1404              	.LVL159:
 177:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 1405              		.loc 1 177 0
 1406 00b0 0820     		movs	r0, #8
 1407 00b2 604B     		ldr	r3, .L99+24
 1408 00b4 1988     		ldrh	r1, [r3]
 1409 00b6 FFF7FEFF 		bl	set_motor_speed
 1410              	.LVL160:
 178:Src/main.c    ****     while((HAL_GetTick() - temp_time) < 4000){
 1411              		.loc 1 178 0
 1412 00ba FFF7FEFF 		bl	HAL_GetTick
 1413              	.LVL161:
 1414 00be 0446     		mov	r4, r0
 1415              	.LVL162:
 179:Src/main.c    ****         drive_straight(&enc_pid);
 1416              		.loc 1 179 0
 1417 00c0 02E0     		b	.L85
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 38


 1418              	.LVL163:
 1419              	.L86:
 180:Src/main.c    ****     }
 1420              		.loc 1 180 0
 1421 00c2 08A8     		add	r0, sp, #32
 1422 00c4 FFF7FEFF 		bl	drive_straight
 1423              	.LVL164:
 1424              	.L85:
 179:Src/main.c    ****         drive_straight(&enc_pid);
 1425              		.loc 1 179 0
 1426 00c8 FFF7FEFF 		bl	HAL_GetTick
 1427              	.LVL165:
 1428 00cc 001B     		subs	r0, r0, r4
 1429 00ce B0F57A6F 		cmp	r0, #4000
 1430 00d2 F6D3     		bcc	.L86
 182:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1431              		.loc 1 182 0
 1432 00d4 0020     		movs	r0, #0
 1433 00d6 0146     		mov	r1, r0
 1434 00d8 FFF7FEFF 		bl	set_motor_speed
 1435              	.LVL166:
 183:Src/main.c    **** 
 1436              		.loc 1 183 0
 1437 00dc 0820     		movs	r0, #8
 1438 00de 0021     		movs	r1, #0
 1439 00e0 FFF7FEFF 		bl	set_motor_speed
 1440              	.LVL167:
 186:Src/main.c    ****     /* USER CODE END 2 */
 1441              		.loc 1 186 0
 1442 00e4 0620     		movs	r0, #6
 1443 00e6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1444              	.LVL168:
 173:Src/main.c    ****     PID_t enc_pid = pid_Init(1,0,0,1,1);
 1445              		.loc 1 173 0
 1446 00ea 0025     		movs	r5, #0
 1447              	.LVL169:
 1448              	.L87:
 196:Src/main.c    ****         {
 1449              		.loc 1 196 0
 1450 00ec 524B     		ldr	r3, .L99+28
 1451 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1452 00f0 012B     		cmp	r3, #1
 1453 00f2 74D1     		bne	.L88
 1454              	.LBB4:
 198:Src/main.c    ****             turn();
 1455              		.loc 1 198 0
 1456 00f4 5148     		ldr	r0, .L99+32
 1457 00f6 0021     		movs	r1, #0
 1458 00f8 FFF7FEFF 		bl	print
 1459              	.LVL170:
 199:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1460              		.loc 1 199 0
 1461 00fc FFF7FEFF 		bl	turn
 1462              	.LVL171:
 200:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1463              		.loc 1 200 0
 1464 0100 0020     		movs	r0, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 39


 1465 0102 4B4B     		ldr	r3, .L99+20
 1466 0104 1988     		ldrh	r1, [r3]
 1467 0106 FFF7FEFF 		bl	set_motor_speed
 1468              	.LVL172:
 201:Src/main.c    ****             uint32_t start = HAL_GetTick();
 1469              		.loc 1 201 0
 1470 010a 0820     		movs	r0, #8
 1471 010c 494B     		ldr	r3, .L99+24
 1472 010e 1988     		ldrh	r1, [r3]
 1473 0110 FFF7FEFF 		bl	set_motor_speed
 1474              	.LVL173:
 202:Src/main.c    ****             HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 1475              		.loc 1 202 0
 1476 0114 FFF7FEFF 		bl	HAL_GetTick
 1477              	.LVL174:
 1478 0118 0446     		mov	r4, r0
 1479              	.LVL175:
 203:Src/main.c    ****             while ((HAL_GetTick() - start) < 4000)
 1480              		.loc 1 203 0
 1481 011a 0A20     		movs	r0, #10
 1482              	.LVL176:
 1483 011c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1484              	.LVL177:
 204:Src/main.c    ****             {
 1485              		.loc 1 204 0
 1486 0120 4BE0     		b	.L89
 1487              	.L94:
 206:Src/main.c    ****                 if (CLAW_INT_STATE == FLAGGED)
 1488              		.loc 1 206 0
 1489 0122 08A8     		add	r0, sp, #32
 1490 0124 FFF7FEFF 		bl	drive_straight
 1491              	.LVL178:
 207:Src/main.c    ****                 {
 1492              		.loc 1 207 0
 1493 0128 454B     		ldr	r3, .L99+36
 1494 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1495 012c 012B     		cmp	r3, #1
 1496 012e 44D1     		bne	.L89
 1497              	.LBB5:
 209:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 1498              		.loc 1 209 0
 1499 0130 C820     		movs	r0, #200
 1500 0132 FFF7FEFF 		bl	HAL_Delay
 1501              	.LVL179:
 210:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 1502              		.loc 1 210 0
 1503 0136 0020     		movs	r0, #0
 1504 0138 0146     		mov	r1, r0
 1505 013a FFF7FEFF 		bl	set_motor_speed
 1506              	.LVL180:
 211:Src/main.c    ****                     close_claw(&htim3);
 1507              		.loc 1 211 0
 1508 013e 0820     		movs	r0, #8
 1509 0140 0021     		movs	r1, #0
 1510 0142 FFF7FEFF 		bl	set_motor_speed
 1511              	.LVL181:
 212:Src/main.c    ****                     arm_up(&htim3);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 40


 1512              		.loc 1 212 0
 1513 0146 384C     		ldr	r4, .L99+12
 1514              	.LVL182:
 1515 0148 2046     		mov	r0, r4
 1516 014a FFF7FEFF 		bl	close_claw
 1517              	.LVL183:
 213:Src/main.c    ****                     HAL_NVIC_DisableIRQ(CLAW_INT_EXTI_IRQn);
 1518              		.loc 1 213 0
 1519 014e 2046     		mov	r0, r4
 1520 0150 FFF7FEFF 		bl	arm_up
 1521              	.LVL184:
 214:Src/main.c    ****                     CLAW_INT_STATE = NOT_FLAGGED;
 1522              		.loc 1 214 0
 1523 0154 0A20     		movs	r0, #10
 1524 0156 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1525              	.LVL185:
 215:Src/main.c    ****                     ++ewok_cnt;
 1526              		.loc 1 215 0
 1527 015a 0024     		movs	r4, #0
 1528 015c 384B     		ldr	r3, .L99+36
 1529 015e 1C70     		strb	r4, [r3]
 216:Src/main.c    ****                     char msg[18] = "";
 1530              		.loc 1 216 0
 1531 0160 0135     		adds	r5, r5, #1
 1532              	.LVL186:
 1533 0162 EDB2     		uxtb	r5, r5
 1534              	.LVL187:
 217:Src/main.c    ****                     sprintf(msg, "wok_cnt: %d", ewok_cnt);
 1535              		.loc 1 217 0
 1536 0164 0394     		str	r4, [sp, #12]
 1537 0166 0494     		str	r4, [sp, #16]
 1538 0168 0594     		str	r4, [sp, #20]
 1539 016a 0694     		str	r4, [sp, #24]
 1540 016c ADF81C40 		strh	r4, [sp, #28]	@ movhi
 218:Src/main.c    ****                     print(msg, 0);
 1541              		.loc 1 218 0
 1542 0170 03A8     		add	r0, sp, #12
 1543 0172 3449     		ldr	r1, .L99+40
 1544 0174 2A46     		mov	r2, r5
 1545 0176 FFF7FEFF 		bl	sprintf
 1546              	.LVL188:
 219:Src/main.c    ****                     if (ewok_cnt == 1)
 1547              		.loc 1 219 0
 1548 017a 03A8     		add	r0, sp, #12
 1549 017c 2146     		mov	r1, r4
 1550 017e FFF7FEFF 		bl	print
 1551              	.LVL189:
 220:Src/main.c    ****                     {
 1552              		.loc 1 220 0
 1553 0182 012D     		cmp	r5, #1
 1554 0184 1FD1     		bne	.L93
 222:Src/main.c    ****                         open_claw(&htim3);
 1555              		.loc 1 222 0
 1556 0186 8820     		movs	r0, #136
 1557 0188 FFF7FEFF 		bl	turn_deg
 1558              	.LVL190:
 223:Src/main.c    ****                         square_edge(&enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 41


 1559              		.loc 1 223 0
 1560 018c 2648     		ldr	r0, .L99+12
 1561 018e FFF7FEFF 		bl	open_claw
 1562              	.LVL191:
 224:Src/main.c    ****                         start = HAL_GetTick();
 1563              		.loc 1 224 0
 1564 0192 08A8     		add	r0, sp, #32
 1565 0194 FFF7FEFF 		bl	square_edge
 1566              	.LVL192:
 225:Src/main.c    ****                         while((HAL_GetTick() - start) < 2000){
 1567              		.loc 1 225 0
 1568 0198 FFF7FEFF 		bl	HAL_GetTick
 1569              	.LVL193:
 1570 019c 0446     		mov	r4, r0
 1571              	.LVL194:
 226:Src/main.c    ****                             drive_straight(&enc_pid);
 1572              		.loc 1 226 0
 1573 019e 02E0     		b	.L91
 1574              	.LVL195:
 1575              	.L92:
 227:Src/main.c    ****                         }
 1576              		.loc 1 227 0
 1577 01a0 08A8     		add	r0, sp, #32
 1578 01a2 FFF7FEFF 		bl	drive_straight
 1579              	.LVL196:
 1580              	.L91:
 226:Src/main.c    ****                             drive_straight(&enc_pid);
 1581              		.loc 1 226 0
 1582 01a6 FFF7FEFF 		bl	HAL_GetTick
 1583              	.LVL197:
 1584 01aa 001B     		subs	r0, r0, r4
 1585 01ac B0F5FA6F 		cmp	r0, #2000
 1586 01b0 F6D3     		bcc	.L92
 229:Src/main.c    ****                     }
 1587              		.loc 1 229 0
 1588 01b2 1D48     		ldr	r0, .L99+12
 1589 01b4 FFF7FEFF 		bl	arm_down
 1590              	.LVL198:
 1591 01b8 05E0     		b	.L93
 1592              	.L89:
 1593              	.LBE5:
 204:Src/main.c    ****             {
 1594              		.loc 1 204 0
 1595 01ba FFF7FEFF 		bl	HAL_GetTick
 1596              	.LVL199:
 1597 01be 001B     		subs	r0, r0, r4
 1598 01c0 B0F57A6F 		cmp	r0, #4000
 1599 01c4 ADD3     		bcc	.L94
 1600              	.LVL200:
 1601              	.L93:
 236:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 1602              		.loc 1 236 0
 1603 01c6 0024     		movs	r4, #0
 1604 01c8 1B4B     		ldr	r3, .L99+28
 1605 01ca 1C70     		strb	r4, [r3]
 237:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 1606              		.loc 1 237 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 42


 1607 01cc 2046     		mov	r0, r4
 1608 01ce 2146     		mov	r1, r4
 1609 01d0 FFF7FEFF 		bl	set_motor_speed
 1610              	.LVL201:
 238:Src/main.c    ****         }else{
 1611              		.loc 1 238 0
 1612 01d4 0820     		movs	r0, #8
 1613 01d6 2146     		mov	r1, r4
 1614 01d8 FFF7FEFF 		bl	set_motor_speed
 1615              	.LVL202:
 1616              	.LBE4:
 1617 01dc 86E7     		b	.L87
 1618              	.L88:
 243:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1619              		.loc 1 243 0
 1620 01de FFF7FEFF 		bl	HAL_GetTick
 1621              	.LVL203:
 1622 01e2 0446     		mov	r4, r0
 1623              	.LVL204:
 244:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1624              		.loc 1 244 0
 1625 01e4 0020     		movs	r0, #0
 1626              	.LVL205:
 1627 01e6 124B     		ldr	r3, .L99+20
 1628 01e8 1988     		ldrh	r1, [r3]
 1629 01ea FFF7FEFF 		bl	set_motor_speed
 1630              	.LVL206:
 245:Src/main.c    ****         while((HAL_GetTick() - temp_time) < 200){
 1631              		.loc 1 245 0
 1632 01ee 0820     		movs	r0, #8
 1633 01f0 104B     		ldr	r3, .L99+24
 1634 01f2 1988     		ldrh	r1, [r3]
 1635 01f4 FFF7FEFF 		bl	set_motor_speed
 1636              	.LVL207:
 246:Src/main.c    ****             drive_straight(&enc_pid);
 1637              		.loc 1 246 0
 1638 01f8 02E0     		b	.L96
 1639              	.L97:
 247:Src/main.c    ****         }
 1640              		.loc 1 247 0
 1641 01fa 08A8     		add	r0, sp, #32
 1642 01fc FFF7FEFF 		bl	drive_straight
 1643              	.LVL208:
 1644              	.L96:
 246:Src/main.c    ****             drive_straight(&enc_pid);
 1645              		.loc 1 246 0
 1646 0200 FFF7FEFF 		bl	HAL_GetTick
 1647              	.LVL209:
 1648 0204 001B     		subs	r0, r0, r4
 1649 0206 C728     		cmp	r0, #199
 1650 0208 F7D9     		bls	.L97
 249:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1651              		.loc 1 249 0
 1652 020a 0020     		movs	r0, #0
 1653 020c 0146     		mov	r1, r0
 1654 020e FFF7FEFF 		bl	set_motor_speed
 1655              	.LVL210:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 43


 250:Src/main.c    ****         }
 1656              		.loc 1 250 0
 1657 0212 0820     		movs	r0, #8
 1658 0214 0021     		movs	r1, #0
 1659 0216 FFF7FEFF 		bl	set_motor_speed
 1660              	.LVL211:
 1661 021a 67E7     		b	.L87
 1662              	.L100:
 1663              		.align	2
 1664              	.L99:
 1665 021c 00000000 		.word	htim4
 1666 0220 00000000 		.word	htim5
 1667 0224 00000000 		.word	htim1
 1668 0228 00000000 		.word	htim3
 1669 022c 00000000 		.word	.LC0
 1670 0230 00000000 		.word	.LANCHOR1
 1671 0234 00000000 		.word	.LANCHOR0
 1672 0238 00000000 		.word	PI_INT_STATE
 1673 023c 64000000 		.word	.LC9
 1674 0240 00000000 		.word	CLAW_INT_STATE
 1675 0244 70000000 		.word	.LC10
 1676              		.cfi_endproc
 1677              	.LFE124:
 1679              		.comm	adc_values,8192,4
 1680              		.comm	dma_buffer,8192,4
 1681              		.global	RIGHT_SPEED
 1682              		.global	LEFT_SPEED
 1683              		.section	.data.RIGHT_SPEED,"aw",%progbits
 1684              		.align	1
 1685              		.set	.LANCHOR0,. + 0
 1688              	RIGHT_SPEED:
 1689 0000 5802     		.short	600
 1690              		.section	.data.LEFT_SPEED,"aw",%progbits
 1691              		.align	1
 1692              		.set	.LANCHOR1,. + 0
 1695              	LEFT_SPEED:
 1696 0000 5802     		.short	600
 1697              		.section	.rodata.str1.4,"aMS",%progbits,1
 1698              		.align	2
 1699              	.LC0:
 1700 0000 53746172 		.ascii	"Starting\000"
 1700      74696E67 
 1700      00
 1701 0009 000000   		.space	3
 1702              	.LC1:
 1703 000c 256C7500 		.ascii	"%lu\000"
 1704              	.LC2:
 1705 0010 636E7473 		.ascii	"cnts: %d\000"
 1705      3A202564 
 1705      00
 1706 0019 000000   		.space	3
 1707              	.LC3:
 1708 001c 766C7473 		.ascii	"vlts: %d.%d\000"
 1708      3A202564 
 1708      2E256400 
 1709              	.LC4:
 1710 0028 54494D35 		.ascii	"TIM5->CNT: %lu\000"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 44


 1710      2D3E434E 
 1710      543A2025 
 1710      6C7500
 1711 0037 00       		.space	1
 1712              	.LC5:
 1713 0038 54494D34 		.ascii	"TIM4->CNT: %lu\000"
 1713      2D3E434E 
 1713      543A2025 
 1713      6C7500
 1714 0047 00       		.space	1
 1715              	.LC6:
 1716 0048 4C533A20 		.ascii	"LS: %lu\000"
 1716      256C7500 
 1717              	.LC7:
 1718 0050 52533A20 		.ascii	"RS: %lu\000"
 1718      256C7500 
 1719              	.LC8:
 1720 0058 5372632F 		.ascii	"Src/main.c\000"
 1720      6D61696E 
 1720      2E6300
 1721 0063 00       		.space	1
 1722              	.LC9:
 1723 0064 696E2070 		.ascii	"in pi int\000"
 1723      6920696E 
 1723      7400
 1724 006e 0000     		.space	2
 1725              	.LC10:
 1726 0070 776F6B5F 		.ascii	"wok_cnt: %d\000"
 1726      636E743A 
 1726      20256400 
 1727              		.text
 1728              	.Letext0:
 1729              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1730              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 1731              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 1732              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1733              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1734              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1735              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1736              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1737              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1738              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1739              		.file 12 "Inc/fonts.h"
 1740              		.file 13 "Inc/ssd1306.h"
 1741              		.file 14 "Inc/pid.h"
 1742              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 1743              		.file 16 "Inc/adc.h"
 1744              		.file 17 "Inc/tim.h"
 1745              		.file 18 "Inc/extern_vars.h"
 1746              		.file 19 "Inc/filter.h"
 1747              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1748              		.file 21 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 1749              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1750              		.file 23 "Inc/claw.h"
 1751              		.file 24 "Inc/gpio.h"
 1752              		.file 25 "Inc/dma.h"
 1753              		.file 26 "Inc/usart.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 45


 1754              		.file 27 "Inc/i2c.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:104    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:109    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:183    .text.alarm_detect:0000000000000078 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:192    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:197    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:244    .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:249    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:254    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:367    .text.menu:000000000000009c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:374    .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:379    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:445    .text.set_motor_speed:000000000000004c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:452    .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:457    .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:702    .text.turn:0000000000000178 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:725    .text.turn_deg:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:730    .text.turn_deg:0000000000000000 turn_deg
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:856    .text.turn_deg:00000000000000b0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:868    .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:873    .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1000   .text.encoder_pid:00000000000000a0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1009   .text.drive_straight:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1014   .text.drive_straight:0000000000000000 drive_straight
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1038   .text.square_edge:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1043   .text.square_edge:0000000000000000 square_edge
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1106   .text.square_edge:0000000000000044 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1112   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1117   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1133   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1138   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1264   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1272   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1277   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1665   .text.main:000000000000021c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1688   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1695   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1684   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1691   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s:1698   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 47


__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
HAL_GPIO_ReadPin
sprintf
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dadd
pid_GetGain
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
HAL_TIM_Encoder_Start
HAL_TIM_PWM_Start
ssd1306_Init
claw_init
HAL_GetTick
HAL_NVIC_EnableIRQ
close_claw
arm_up
HAL_NVIC_DisableIRQ
open_claw
arm_down
htim4
htim5
htim3
PI_INT_STATE
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccCNljGT.s 			page 48


CLAW_INT_STATE
