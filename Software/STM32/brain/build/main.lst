ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** uint16_t LEFT_SPEED = 0.55 * MOTOR_SPEED;
  66:Src/main.c    **** uint16_t RIGHT_SPEED = 0.60 * MOTOR_SPEED;
  67:Src/main.c    **** uint32_t dma_buffer[1];
  68:Src/main.c    **** uint32_t adc_values[1];
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PV */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  73:Src/main.c    **** void SystemClock_Config(void);
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN PFP */
  76:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  77:Src/main.c    **** void print(char msg[], int row);
  78:Src/main.c    **** void do_pid(PID_t *pid_struct);
  79:Src/main.c    **** PID_t menu();
  80:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin);
  81:Src/main.c    **** void pi_navigation();
  82:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  83:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc);
  84:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  85:Src/main.c    **** void turn();
  86:Src/main.c    **** void turn_deg(uint8_t);
  87:Src/main.c    **** void alarm_detect();
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END PFP */
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE BEGIN 0 */
  92:Src/main.c    **** /**
  93:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
  94:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
  95:Src/main.c    ****  * Order of buffer: ir1, ir2, pi, ir1, ir2...
  96:Src/main.c    ****  */
  97:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
  98:Src/main.c    **** {
  29              		.loc 1 98 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  99:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  35              		.loc 1 99 0
  36 0000 024B     		ldr	r3, .L2
  37 0002 1A68     		ldr	r2, [r3]
  38 0004 024B     		ldr	r3, .L2+4
  39 0006 1A60     		str	r2, [r3]
  40 0008 7047     		bx	lr
  41              	.L3:
  42 000a 00BF     		.align	2
  43              	.L2:
  44 000c 00000000 		.word	dma_buffer
  45 0010 00000000 		.word	adc_values
  46              		.cfi_endproc
  47              	.LFE123:
  49              		.global	__aeabi_ui2d
  50              		.global	__aeabi_dmul
  51              		.global	__aeabi_dsub
  52              		.global	__aeabi_d2f
  53              		.section	.text.calculate_heading,"ax",%progbits
  54              		.align	2
  55              		.global	calculate_heading
  56              		.thumb
  57              		.thumb_func
  59              	calculate_heading:
  60              	.LFB129:
 100:Src/main.c    **** }
 101:Src/main.c    **** /* USER CODE END 0 */
 102:Src/main.c    **** 
 103:Src/main.c    **** /**
 104:Src/main.c    ****   * @brief  The application entry point.
 105:Src/main.c    ****   *
 106:Src/main.c    ****   * @retval None
 107:Src/main.c    ****   */
 108:Src/main.c    **** int main(void)
 109:Src/main.c    **** {
 110:Src/main.c    ****     /* USER CODE BEGIN 1 */
 111:Src/main.c    **** 
 112:Src/main.c    ****     /* USER CODE END 1 */
 113:Src/main.c    **** 
 114:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 4


 115:Src/main.c    **** 
 116:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 117:Src/main.c    ****     HAL_Init();
 118:Src/main.c    **** 
 119:Src/main.c    ****     /* USER CODE BEGIN Init */
 120:Src/main.c    **** 
 121:Src/main.c    ****     /* USER CODE END Init */
 122:Src/main.c    **** 
 123:Src/main.c    ****     /* Configure the system clock */
 124:Src/main.c    ****     SystemClock_Config();
 125:Src/main.c    **** 
 126:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 127:Src/main.c    **** 
 128:Src/main.c    ****     /* USER CODE END SysInit */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* Initialize all configured peripherals */
 131:Src/main.c    ****     MX_GPIO_Init();
 132:Src/main.c    ****     MX_DMA_Init();
 133:Src/main.c    ****     MX_TIM3_Init();
 134:Src/main.c    ****     MX_TIM1_Init();
 135:Src/main.c    ****     MX_TIM2_Init();
 136:Src/main.c    ****     MX_USART6_UART_Init();
 137:Src/main.c    ****     MX_ADC1_Init();
 138:Src/main.c    ****     MX_I2C1_Init();
 139:Src/main.c    ****     MX_TIM4_Init();
 140:Src/main.c    ****     MX_TIM9_Init();
 141:Src/main.c    ****     MX_TIM5_Init();
 142:Src/main.c    ****     /* USER CODE BEGIN 2 */
 143:Src/main.c    **** 
 144:Src/main.c    ****     /* Initialize peripherals */
 145:Src/main.c    ****     /* 
 146:Src/main.c    ****      * Claw jaw: TIM3 CH1
 147:Src/main.c    ****      * Claw arm: TIM3 CH2
 148:Src/main.c    ****      * Basket: TIM3 CH3
 149:Src/main.c    ****      * left forward: TIM1 CH1
 150:Src/main.c    ****      * left backward: TIM1 CH2
 151:Src/main.c    ****      * right forward: TIM1 CH3
 152:Src/main.c    ****      * right backward: TIM1 CH4
 153:Src/main.c    ****      * left encoder: TIM4
 154:Src/main.c    ****      * right encoderL TIM5
 155:Src/main.c    ****      * spare clocks: TIM2, TIM9
 156:Src/main.c    ****      */
 157:Src/main.c    **** 
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 159:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 167:Src/main.c    **** 
 168:Src/main.c    ****     /* Initialize other stuffs */
 169:Src/main.c    ****     ssd1306_Init();
 170:Src/main.c    ****     print("Starting", 0);
 171:Src/main.c    ****     claw_init(&htim3);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 5


 172:Src/main.c    ****     ///basket_init(&htim3);
 173:Src/main.c    **** 
 174:Src/main.c    ****     /*
 175:Src/main.c    ****     ENCODER_t left_enc = encoder_Init(TIM4);
 176:Src/main.c    ****     ENCODER_t right_enc = encoder_Init(TIM5);
 177:Src/main.c    ****     PID_t left_pid = pid_Init(5, 12, 0, 2, 2);
 178:Src/main.c    ****     PID_t right_pid = pid_Init(30, 25, 0, 2, 2);
 179:Src/main.c    ****     */
 180:Src/main.c    ****     uint8_t ewok_cnt = 0;
 181:Src/main.c    **** 
 182:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 183:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 184:Src/main.c    ****     // HAL_Delay(5000);
 185:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, 0);
 186:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, 0);
 187:Src/main.c    ****     /* Initially disabled IR, PI and Claw INT*/
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 189:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 190:Src/main.c    ****     // HAL_NVIC_EnableIRQ(EXTI1_IRQn); IR INT
 191:Src/main.c    ****     HAL_Delay(500);
 192:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 193:Src/main.c    ****     /* USER CODE END 2 */
 194:Src/main.c    **** 
 195:Src/main.c    ****     /* Infinite loop */
 196:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 197:Src/main.c    ****     while (1)
 198:Src/main.c    ****     {
 199:Src/main.c    ****         /*
 200:Src/main.c    ****          * Servo Stuff
 201:Src/main.c    ****          */
 202:Src/main.c    ****         // actuatengo(&htim3, TIM_CHANNEL_2, TIM_CHANNEL_3);
 203:Src/main.c    ****         // HAL_Delay(500);
 204:Src/main.c    ****         /*
 205:Src/main.c    ****          * Drive Straight
 206:Src/main.c    ****          *
 207:Src/main.c    ****          encoder_pid(&left_pid, &left_enc, &right_pid, &right_enc);
 208:Src/main.c    ****          */
 209:Src/main.c    ****         uint8_t aRxBuffer[] = "Not working";
 210:Src/main.c    ****         HAL_UART_Receive(&huart6, (uint8_t *)aRxBuffer, 15, 100);
 211:Src/main.c    ****         char msg[15]="";
 212:Src/main.c    ****         sprintf(msg, "%d", aRxBuffer);
 213:Src/main.c    ****         print(msg, 0);
 214:Src/main.c    **** 
 215:Src/main.c    ****         /*
 216:Src/main.c    ****          * Pi Turning
 217:Src/main.c    ****         //  */
 218:Src/main.c    ****         // if (PI_INT_STATE == FLAGGED)
 219:Src/main.c    ****         // {
 220:Src/main.c    ****         //     print("in pi int", 0);
 221:Src/main.c    ****         //     turn();
 222:Src/main.c    **** 
 223:Src/main.c    ****         //     // set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 224:Src/main.c    ****         //     // set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 225:Src/main.c    ****         //     // int start = HAL_GetTick();
 226:Src/main.c    ****         //     // while (HAL_GetTick() - start < 4000)
 227:Src/main.c    ****         //     // {
 228:Src/main.c    ****         //     //     // encoder_dist_pid(&left_pid);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 6


 229:Src/main.c    ****         //     //     if (CLAW_INT_STATE == FLAGGED)
 230:Src/main.c    ****         //     //     {
 231:Src/main.c    ****         //     //         HAL_Delay(200);
 232:Src/main.c    ****         //     //         set_motor_speed(TIM_CHANNEL_1, 0);
 233:Src/main.c    ****         //     //         set_motor_speed(TIM_CHANNEL_3, 0);
 234:Src/main.c    ****         //     //         actuatengo(&htim3, TIM_CHANNEL_2, TIM_CHANNEL_3);
 235:Src/main.c    ****         //     //         CLAW_INT_STATE = NOT_FLAGGED;
 236:Src/main.c    ****         //     //         ++ewok_cnt;
 237:Src/main.c    ****         //     //         char msg[18] = "";
 238:Src/main.c    ****         //     //         sprintf(msg, "wok_cnt: %d", ewok_cnt);
 239:Src/main.c    ****         //     //         print(msg, 0);
 240:Src/main.c    ****         //     //         // if (ewok_cnt == 1)
 241:Src/main.c    ****         //     //         // {
 242:Src/main.c    ****         //     //         //     turn_deg(-120);
 243:Src/main.c    ****         //     //         //     arm_up_to_deg(&htim3, 80);
 244:Src/main.c    ****         //     //         //     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 245:Src/main.c    ****         //     //         //     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 246:Src/main.c    ****         //     //         //     HAL_Delay(3000);
 247:Src/main.c    ****         //     //         //     CLAW_INT_STATE = NOT_FLAGGED;
 248:Src/main.c    ****         //     //         // }
 249:Src/main.c    ****         //     //         // if (ewok_cnt == 2)
 250:Src/main.c    ****         //     //         // {
 251:Src/main.c    ****         //     //         //     close_claw(&htim3);
 252:Src/main.c    ****         //     //         //     arm_up_to_deg(&htim3, 80);
 253:Src/main.c    ****         //     //         //     turn_deg(-120);
 254:Src/main.c    ****         //     //         //     alarm_detect();
 255:Src/main.c    ****         //     //         //     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 256:Src/main.c    ****         //     //         //     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 257:Src/main.c    ****         //     //         //     HAL_Delay(1000);
 258:Src/main.c    ****         //     //         //     CLAW_INT_STATE = NOT_FLAGGED;
 259:Src/main.c    ****         //     //         // }
 260:Src/main.c    ****         //     //         break;
 261:Src/main.c    ****         //     //     }
 262:Src/main.c    ****         //     // }
 263:Src/main.c    ****         //     PI_INT_STATE = NOT_FLAGGED;
 264:Src/main.c    ****             // set_motor_speed(TIM_CHANNEL_1, 0);
 265:Src/main.c    ****             // set_motor_speed(TIM_CHANNEL_3, 0);
 266:Src/main.c    ****         //}
 267:Src/main.c    **** 
 268:Src/main.c    ****         /*
 269:Src/main.c    ****          * EDGE and Object detection
 270:Src/main.c    ****          *
 271:Src/main.c    ****          if(EDGE_RIGHT_STATE == FLAGGED){
 272:Src/main.c    ****          print("ER",0);
 273:Src/main.c    ****          EDGE_RIGHT_STATE = NOT_FLAGGED;
 274:Src/main.c    ****          }
 275:Src/main.c    ****          if(TAPE_RIGHT_STATE == FLAGGED){
 276:Src/main.c    ****          print("TR",0);
 277:Src/main.c    ****          TAPE_RIGHT_STATE = NOT_FLAGGED;
 278:Src/main.c    ****          }
 279:Src/main.c    ****          if(EDGE_LEFT_STATE == FLAGGED){
 280:Src/main.c    ****          print("EL",0);
 281:Src/main.c    ****          EDGE_LEFT_STATE = NOT_FLAGGED;
 282:Src/main.c    ****          }
 283:Src/main.c    **** 
 284:Src/main.c    ****          if(TAPE_LEFT_STATE == FLAGGED){
 285:Src/main.c    ****          print("TL",0);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 7


 286:Src/main.c    ****          TAPE_LEFT_STATE = NOT_FLAGGED;
 287:Src/main.c    ****          }
 288:Src/main.c    ****          */
 289:Src/main.c    **** 
 290:Src/main.c    ****         /*
 291:Src/main.c    ****          * IR DETECTION
 292:Src/main.c    ****          */
 293:Src/main.c    ****         // print("preprint", 0);
 294:Src/main.c    ****         // if (IR_INT_STATE == FLAGGED)
 295:Src/main.c    ****         // {
 296:Src/main.c    ****         //     print("in ir int", 0);
 297:Src/main.c    ****         //     alarm_detect();
 298:Src/main.c    ****         //     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 299:Src/main.c    ****         //     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 300:Src/main.c    ****         //     //drive past sensor, enough so as to not trigger interrupt again
 301:Src/main.c    ****         //     HAL_Delay(2000);
 302:Src/main.c    ****         // }
 303:Src/main.c    **** 
 304:Src/main.c    ****         /* USER CODE END WHILE */
 305:Src/main.c    **** 
 306:Src/main.c    ****         /* USER CODE BEGIN 3 */
 307:Src/main.c    ****     }
 308:Src/main.c    ****     /* USER CODE END 3 */
 309:Src/main.c    **** }
 310:Src/main.c    **** 
 311:Src/main.c    **** /**
 312:Src/main.c    ****   * @brief System Clock Configuration
 313:Src/main.c    ****   * @retval None
 314:Src/main.c    ****   */
 315:Src/main.c    **** void SystemClock_Config(void)
 316:Src/main.c    **** {
 317:Src/main.c    **** 
 318:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 319:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 320:Src/main.c    **** 
 321:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 322:Src/main.c    ****     */
 323:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 324:Src/main.c    **** 
 325:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 326:Src/main.c    **** 
 327:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 328:Src/main.c    ****     */
 329:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 330:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 331:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 332:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 333:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 334:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 335:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 336:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 337:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 338:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 339:Src/main.c    ****     {
 340:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 341:Src/main.c    ****     }
 342:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 8


 343:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 344:Src/main.c    ****     */
 345:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 346:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 347:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 348:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 349:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 350:Src/main.c    **** 
 351:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 352:Src/main.c    ****     {
 353:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 354:Src/main.c    ****     }
 355:Src/main.c    **** 
 356:Src/main.c    ****     /**Configure the Systick interrupt time 
 357:Src/main.c    ****     */
 358:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 359:Src/main.c    **** 
 360:Src/main.c    ****     /**Configure the Systick 
 361:Src/main.c    ****     */
 362:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 363:Src/main.c    **** 
 364:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 365:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 366:Src/main.c    **** }
 367:Src/main.c    **** 
 368:Src/main.c    **** /* USER CODE BEGIN 4 */
 369:Src/main.c    **** 
 370:Src/main.c    **** /*
 371:Src/main.c    ****  * Assume motors are not on.
 372:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 373:Src/main.c    ****  */
 374:Src/main.c    **** void turn()
 375:Src/main.c    **** {
 376:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 377:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 378:Src/main.c    ****     HAL_Delay(50);
 379:Src/main.c    ****     float volts = calculate_heading(adc_values[0]);
 380:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 381:Src/main.c    ****     TIM4->CNT = 0;
 382:Src/main.c    ****     TIM5->CNT = 0;
 383:Src/main.c    **** 
 384:Src/main.c    ****     char msg[18] = "";
 385:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 386:Src/main.c    ****     print(msg, 0);
 387:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 388:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 389:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 390:Src/main.c    ****     print(msg, 2);
 391:Src/main.c    ****     sprintf(msg, "adc_val: %d", adc_values[0]);
 392:Src/main.c    ****     print(msg, 3);
 393:Src/main.c    **** 
 394:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
 395:Src/main.c    ****     {
 396:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 397:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 500);
 398:Src/main.c    ****         while (TIM5->CNT < counts)
 399:Src/main.c    ****         {
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 9


 400:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 401:Src/main.c    ****             print(msg, 4);
 402:Src/main.c    ****         }
 403:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 404:Src/main.c    ****         print(msg, 4);
 405:Src/main.c    ****         TIM5->CNT = 0;
 406:Src/main.c    ****     }
 407:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 408:Src/main.c    ****     {
 409:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 500);
 410:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 411:Src/main.c    ****         while (TIM4->CNT < counts)
 412:Src/main.c    ****         {
 413:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 414:Src/main.c    ****             print(msg, 4);
 415:Src/main.c    ****         }
 416:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 417:Src/main.c    ****         print(msg, 4);
 418:Src/main.c    ****         TIM4->CNT = 0;
 419:Src/main.c    ****     }
 420:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 421:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 422:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 423:Src/main.c    **** }
 424:Src/main.c    **** 
 425:Src/main.c    **** /*
 426:Src/main.c    ****  * Assume motors are not on.
 427:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 428:Src/main.c    ****  */
 429:Src/main.c    **** void turn_deg(uint8_t deg)
 430:Src/main.c    **** {
 431:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 432:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 433:Src/main.c    ****     TIM4->CNT = 0;
 434:Src/main.c    ****     TIM5->CNT = 0;
 435:Src/main.c    **** 
 436:Src/main.c    ****     char msg[18] = "";
 437:Src/main.c    **** 
 438:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 439:Src/main.c    ****     {
 440:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 441:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 442:Src/main.c    ****         while (TIM5->CNT < counts)
 443:Src/main.c    ****         {
 444:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 445:Src/main.c    ****             print(msg, 4);
 446:Src/main.c    ****         }
 447:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 448:Src/main.c    ****         print(msg, 4);
 449:Src/main.c    ****         TIM5->CNT = 0;
 450:Src/main.c    ****     }
 451:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 452:Src/main.c    ****     {
 453:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 30000);
 454:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 455:Src/main.c    ****         while (TIM4->CNT < counts)
 456:Src/main.c    ****         {
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 10


 457:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 458:Src/main.c    ****             print(msg, 4);
 459:Src/main.c    ****         }
 460:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 461:Src/main.c    ****         print(msg, 4);
 462:Src/main.c    ****         TIM4->CNT = 0;
 463:Src/main.c    ****     }
 464:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 465:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 466:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 467:Src/main.c    **** }
 468:Src/main.c    **** 
 469:Src/main.c    **** void pi_navigation()
 470:Src/main.c    **** {
 471:Src/main.c    ****     print("Pi nav", 0);
 472:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 473:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 474:Src/main.c    ****     HAL_Delay(500);
 475:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
 476:Src/main.c    ****     if (heading < 0)
 477:Src/main.c    ****     {
 478:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_2, 0.3 * MOTOR_SPEED);
 479:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0.3 * MOTOR_SPEED);
 480:Src/main.c    ****         heading *= -1;
 481:Src/main.c    ****     }
 482:Src/main.c    ****     else if (heading > 0)
 483:Src/main.c    ****     {
 484:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0.3 * MOTOR_SPEED);
 485:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 0.3 * MOTOR_SPEED);
 486:Src/main.c    ****     }
 487:Src/main.c    ****     HAL_Delay(2000 * heading);
 488:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0.3 * MOTOR_SPEED);
 489:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0.3 * MOTOR_SPEED);
 490:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 491:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 492:Src/main.c    **** }
 493:Src/main.c    **** 
 494:Src/main.c    **** /**
 495:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 496:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 497:Src/main.c    ****  *
 498:Src/main.c    ****  * @param adc_val, value read from ADC.
 499:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 500:Src/main.c    ****  **/
 501:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 502:Src/main.c    **** {
  61              		.loc 1 502 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              	.LVL1:
  66 0000 08B5     		push	{r3, lr}
  67              	.LCFI0:
  68              		.cfi_def_cfa_offset 8
  69              		.cfi_offset 3, -8
  70              		.cfi_offset 14, -4
 503:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 11


  71              		.loc 1 503 0
  72 0002 FFF7FEFF 		bl	__aeabi_ui2d
  73              	.LVL2:
  74 0006 0022     		movs	r2, #0
  75 0008 054B     		ldr	r3, .L6
  76 000a FFF7FEFF 		bl	__aeabi_dmul
  77              	.LVL3:
  78 000e 0022     		movs	r2, #0
  79 0010 044B     		ldr	r3, .L6+4
  80 0012 FFF7FEFF 		bl	__aeabi_dsub
  81              	.LVL4:
  82 0016 FFF7FEFF 		bl	__aeabi_d2f
  83              	.LVL5:
 504:Src/main.c    **** }
  84              		.loc 1 504 0
  85 001a 00EE100A 		fmsr	s0, r0
  86 001e 08BD     		pop	{r3, pc}
  87              	.L7:
  88              		.align	2
  89              	.L6:
  90 0020 0000303F 		.word	1060110336
  91 0024 0000E03F 		.word	1071644672
  92              		.cfi_endproc
  93              	.LFE129:
  95              		.global	__aeabi_dcmplt
  96              		.global	__aeabi_dcmpgt
  97              		.section	.text.alarm_detect,"ax",%progbits
  98              		.align	2
  99              		.global	alarm_detect
 100              		.thumb
 101              		.thumb_func
 103              	alarm_detect:
 104              	.LFB130:
 505:Src/main.c    **** 
 506:Src/main.c    **** void alarm_detect()
 507:Src/main.c    **** {
 105              		.loc 1 507 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109 0000 00B5     		push	{lr}
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 4
 112              		.cfi_offset 14, -4
 113 0002 83B0     		sub	sp, sp, #12
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 16
 508:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 116              		.loc 1 508 0
 117 0004 1C48     		ldr	r0, .L12
 118 0006 1D49     		ldr	r1, .L12+4
 119 0008 0122     		movs	r2, #1
 120 000a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 121              	.LVL6:
 509:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 510:Src/main.c    ****     //HAL_NVIC_DisableIRQ (IRQn_Type IRQn) disbale ir interrupt
 511:Src/main.c    ****     //char msg[20] = "";
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 12


 512:Src/main.c    ****     HAL_Delay(500);
 122              		.loc 1 512 0
 123 000e 4FF4FA70 		mov	r0, #500
 124 0012 FFF7FEFF 		bl	HAL_Delay
 125              	.LVL7:
 126              	.L9:
 513:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 30)
 127              		.loc 1 513 0 discriminator 1
 128 0016 0023     		movs	r3, #0
 129 0018 0093     		str	r3, [sp]
 130 001a 1948     		ldr	r0, .L12+8
 131 001c 45F6B261 		movw	r1, #24242
 132 0020 4FF47A72 		mov	r2, #1000
 133 0024 0123     		movs	r3, #1
 134 0026 FFF7FEFF 		bl	goertzel
 135              	.LVL8:
 136 002a 51EC100B 		fmrrd	r0, r1, d0
 137 002e 0022     		movs	r2, #0
 138 0030 144B     		ldr	r3, .L12+12
 139 0032 FFF7FEFF 		bl	__aeabi_dcmplt
 140              	.LVL9:
 141 0036 0028     		cmp	r0, #0
 142 0038 EDD1     		bne	.L9
 143              	.L10:
 514:Src/main.c    ****         ;
 515:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 30)
 144              		.loc 1 515 0 discriminator 1
 145 003a 0023     		movs	r3, #0
 146 003c 0093     		str	r3, [sp]
 147 003e 1048     		ldr	r0, .L12+8
 148 0040 45F6B261 		movw	r1, #24242
 149 0044 4FF47A72 		mov	r2, #1000
 150 0048 0123     		movs	r3, #1
 151 004a FFF7FEFF 		bl	goertzel
 152              	.LVL10:
 153 004e 51EC100B 		fmrrd	r0, r1, d0
 154 0052 0022     		movs	r2, #0
 155 0054 0B4B     		ldr	r3, .L12+12
 156 0056 FFF7FEFF 		bl	__aeabi_dcmpgt
 157              	.LVL11:
 158 005a 0028     		cmp	r0, #0
 159 005c EDD1     		bne	.L10
 516:Src/main.c    ****         ;
 517:Src/main.c    ****     // {
 518:Src/main.c    ****     //     //
 519:Src/main.c    ****     //     // Sampling frequency: 72e6/2/(495*3)
 520:Src/main.c    ****     //     // offset 0 : IR1
 521:Src/main.c    ****     //     val = goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0);
 522:Src/main.c    ****     //     /*
 523:Src/main.c    ****     //        int predec = (int)(val / 1);
 524:Src/main.c    ****     //        int postdec = (int)((val - predec) * 1000);
 525:Src/main.c    ****     //        sprintf(msg, "%d.%d\n", predec, postdec);
 526:Src/main.c    ****     //        HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 527:Src/main.c    ****     //        */
 528:Src/main.c    **** 
 529:Src/main.c    ****     //     //compare
 530:Src/main.c    ****     //     // 1000 Hz: ranges to about 60, 9850 Hz: ranges to 20
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 13


 531:Src/main.c    ****     //     if (val < 30)
 532:Src/main.c    ****     //     {
 533:Src/main.c    ****     //         break;
 534:Src/main.c    ****     //     }
 535:Src/main.c    ****     // }
 536:Src/main.c    **** 
 537:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 160              		.loc 1 537 0
 161 005e 0648     		ldr	r0, .L12
 162 0060 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 163              	.LVL12:
 538:Src/main.c    ****     HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 164              		.loc 1 538 0
 165 0064 0720     		movs	r0, #7
 166 0066 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 167              	.LVL13:
 539:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 168              		.loc 1 539 0
 169 006a 0022     		movs	r2, #0
 170 006c 064B     		ldr	r3, .L12+16
 171 006e 1A70     		strb	r2, [r3]
 540:Src/main.c    **** }
 172              		.loc 1 540 0
 173 0070 03B0     		add	sp, sp, #12
 174              	.LCFI3:
 175              		.cfi_def_cfa_offset 4
 176              		@ sp needed
 177 0072 5DF804FB 		ldr	pc, [sp], #4
 178              	.L13:
 179 0076 00BF     		.align	2
 180              	.L12:
 181 0078 00000000 		.word	hadc1
 182 007c 00000000 		.word	dma_buffer
 183 0080 00000000 		.word	adc_values
 184 0084 00003E40 		.word	1077805056
 185 0088 00000000 		.word	IR_INT_STATE
 186              		.cfi_endproc
 187              	.LFE130:
 189              		.section	.text.print,"ax",%progbits
 190              		.align	2
 191              		.global	print
 192              		.thumb
 193              		.thumb_func
 195              	print:
 196              	.LFB132:
 541:Src/main.c    **** 
 542:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin)
 543:Src/main.c    **** {
 544:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 545:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 546:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 547:Src/main.c    ****     HAL_Delay(500);
 548:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 549:Src/main.c    ****     while (1)
 550:Src/main.c    ****     {
 551:Src/main.c    ****         char msg[18] = "";
 552:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 14


 553:Src/main.c    ****         // freq one
 554:Src/main.c    ****         double val1 = goertzel(adc_values, 20956, freq1, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 555:Src/main.c    ****         int predec = (int)(val1 / 1);
 556:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 557:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 558:Src/main.c    ****         print(msg, 0);
 559:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 560:Src/main.c    ****         //freq2
 561:Src/main.c    ****         double val2 = goertzel(adc_values, 20956, freq2, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 562:Src/main.c    ****         predec = (int)(val2 / 1);
 563:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 564:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 565:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 566:Src/main.c    ****         //compare
 567:Src/main.c    ****         if (val1 > val2)
 568:Src/main.c    ****         {
 569:Src/main.c    ****             break;
 570:Src/main.c    ****         }
 571:Src/main.c    ****     }
 572:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 573:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 574:Src/main.c    **** }
 575:Src/main.c    **** 
 576:Src/main.c    **** /**
 577:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 578:Src/main.c    ****  * @param msg, string to print
 579:Src/main.c    ****  * @param row, row to print msg to
 580:Src/main.c    ****  */
 581:Src/main.c    **** void print(char *msg, int row)
 582:Src/main.c    **** {
 197              		.loc 1 582 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              	.LVL14:
 202 0000 38B5     		push	{r3, r4, r5, lr}
 203              	.LCFI4:
 204              		.cfi_def_cfa_offset 16
 205              		.cfi_offset 3, -16
 206              		.cfi_offset 4, -12
 207              		.cfi_offset 5, -8
 208              		.cfi_offset 14, -4
 209 0002 0546     		mov	r5, r0
 583:Src/main.c    ****     if (row == 0)
 210              		.loc 1 583 0
 211 0004 0C46     		mov	r4, r1
 212 0006 11B9     		cbnz	r1, .L15
 584:Src/main.c    ****     {
 585:Src/main.c    ****         ssd1306_Fill(Black);
 213              		.loc 1 585 0
 214 0008 0020     		movs	r0, #0
 215              	.LVL15:
 216 000a FFF7FEFF 		bl	ssd1306_Fill
 217              	.LVL16:
 218              	.L15:
 586:Src/main.c    ****     }
 587:Src/main.c    ****     ssd1306_SetCursor(0, row * 10);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 15


 219              		.loc 1 587 0
 220 000e 04EB8404 		add	r4, r4, r4, lsl #2
 221              	.LVL17:
 222 0012 6100     		lsls	r1, r4, #1
 223 0014 0020     		movs	r0, #0
 224 0016 01F0FE01 		and	r1, r1, #254
 225 001a FFF7FEFF 		bl	ssd1306_SetCursor
 226              	.LVL18:
 588:Src/main.c    ****     ssd1306_WriteString(msg, Font_7x10, White);
 227              		.loc 1 588 0
 228 001e 054B     		ldr	r3, .L17
 229 0020 2846     		mov	r0, r5
 230 0022 93E80600 		ldmia	r3, {r1, r2}
 231 0026 0123     		movs	r3, #1
 232 0028 FFF7FEFF 		bl	ssd1306_WriteString
 233              	.LVL19:
 589:Src/main.c    ****     ssd1306_UpdateScreen();
 234              		.loc 1 589 0
 235 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 236              	.LVL20:
 237 0030 38BD     		pop	{r3, r4, r5, pc}
 238              	.LVL21:
 239              	.L18:
 240 0032 00BF     		.align	2
 241              	.L17:
 242 0034 00000000 		.word	Font_7x10
 243              		.cfi_endproc
 244              	.LFE132:
 246              		.global	__aeabi_d2iz
 247              		.global	__aeabi_i2d
 248              		.section	.text.frequency_comparison,"ax",%progbits
 249              		.align	2
 250              		.global	frequency_comparison
 251              		.thumb
 252              		.thumb_func
 254              	frequency_comparison:
 255              	.LFB131:
 543:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 256              		.loc 1 543 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 32
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL22:
 261 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 262              	.LCFI5:
 263              		.cfi_def_cfa_offset 36
 264              		.cfi_offset 4, -36
 265              		.cfi_offset 5, -32
 266              		.cfi_offset 6, -28
 267              		.cfi_offset 7, -24
 268              		.cfi_offset 8, -20
 269              		.cfi_offset 9, -16
 270              		.cfi_offset 10, -12
 271              		.cfi_offset 11, -8
 272              		.cfi_offset 14, -4
 273 0004 8BB0     		sub	sp, sp, #44
 274              	.LCFI6:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 16


 275              		.cfi_def_cfa_offset 80
 276 0006 0390     		str	r0, [sp, #12]
 277 0008 8946     		mov	r9, r1
 544:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 278              		.loc 1 544 0
 279 000a 202A     		cmp	r2, #32
 280 000c 07D0     		beq	.L24
 544:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 281              		.loc 1 544 0 is_stmt 0 discriminator 1
 282 000e 102A     		cmp	r2, #16
 283 0010 02D1     		bne	.L25
 544:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 284              		.loc 1 544 0
 285 0012 4FF00108 		mov	r8, #1
 286 0016 04E0     		b	.L20
 287              	.L25:
 288 0018 4FF00208 		mov	r8, #2
 289 001c 01E0     		b	.L20
 290              	.L24:
 291 001e 4FF00008 		mov	r8, #0
 292              	.L20:
 293              	.LVL23:
 545:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 294              		.loc 1 545 0 is_stmt 1 discriminator 8
 295 0022 4348     		ldr	r0, .L27
 296              	.LVL24:
 297 0024 4349     		ldr	r1, .L27+4
 298              	.LVL25:
 299 0026 0122     		movs	r2, #1
 300              	.LVL26:
 301 0028 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 302              	.LVL27:
 547:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 303              		.loc 1 547 0 discriminator 8
 304 002c 4FF4FA70 		mov	r0, #500
 305 0030 FFF7FEFF 		bl	HAL_Delay
 306              	.LVL28:
 307              	.L23:
 308              	.LBB2:
 551:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
 309              		.loc 1 551 0
 310 0034 0026     		movs	r6, #0
 311 0036 0596     		str	r6, [sp, #20]
 312 0038 0696     		str	r6, [sp, #24]
 313 003a 0796     		str	r6, [sp, #28]
 314 003c 0896     		str	r6, [sp, #32]
 315 003e ADF82460 		strh	r6, [sp, #36]	@ movhi
 554:Src/main.c    ****         int predec = (int)(val1 / 1);
 316              		.loc 1 554 0
 317 0042 5FFA88F7 		uxtb	r7, r8
 318 0046 DFF800B1 		ldr	fp, .L27+24
 319 004a 0097     		str	r7, [sp]
 320 004c 5846     		mov	r0, fp
 321 004e 45F2DC11 		movw	r1, #20956
 322 0052 039A     		ldr	r2, [sp, #12]
 323 0054 0123     		movs	r3, #1
 324 0056 FFF7FEFF 		bl	goertzel
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 17


 325              	.LVL29:
 326 005a 55EC104B 		fmrrd	r4, r5, d0
 327              	.LVL30:
 555:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 328              		.loc 1 555 0
 329 005e 10EE100A 		fmrs	r0, s0	@ int
 330 0062 2946     		mov	r1, r5
 331 0064 FFF7FEFF 		bl	__aeabi_d2iz
 332              	.LVL31:
 333 0068 8246     		mov	r10, r0
 334              	.LVL32:
 556:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 335              		.loc 1 556 0
 336 006a FFF7FEFF 		bl	__aeabi_i2d
 337              	.LVL33:
 338 006e 0246     		mov	r2, r0
 339 0070 0B46     		mov	r3, r1
 340 0072 2046     		mov	r0, r4
 341 0074 2946     		mov	r1, r5
 342 0076 FFF7FEFF 		bl	__aeabi_dsub
 343              	.LVL34:
 344 007a 0022     		movs	r2, #0
 345 007c 2E4B     		ldr	r3, .L27+8
 346 007e FFF7FEFF 		bl	__aeabi_dmul
 347              	.LVL35:
 348 0082 FFF7FEFF 		bl	__aeabi_d2iz
 349              	.LVL36:
 350 0086 0346     		mov	r3, r0
 351              	.LVL37:
 557:Src/main.c    ****         print(msg, 0);
 352              		.loc 1 557 0
 353 0088 05A8     		add	r0, sp, #20
 354              	.LVL38:
 355 008a 2C49     		ldr	r1, .L27+12
 356 008c 5246     		mov	r2, r10
 357 008e FFF7FEFF 		bl	sprintf
 358              	.LVL39:
 558:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 359              		.loc 1 558 0
 360 0092 05A8     		add	r0, sp, #20
 361 0094 3146     		mov	r1, r6
 362 0096 FFF7FEFF 		bl	print
 363              	.LVL40:
 559:Src/main.c    ****         //freq2
 364              		.loc 1 559 0
 365 009a 05A8     		add	r0, sp, #20
 366 009c FFF7FEFF 		bl	strlen
 367              	.LVL41:
 368 00a0 DFF8A8A0 		ldr	r10, .L27+28
 369              	.LVL42:
 370 00a4 82B2     		uxth	r2, r0
 371 00a6 5046     		mov	r0, r10
 372 00a8 05A9     		add	r1, sp, #20
 373 00aa 4FF6FF73 		movw	r3, #65535
 374 00ae FFF7FEFF 		bl	HAL_UART_Transmit
 375              	.LVL43:
 561:Src/main.c    ****         predec = (int)(val2 / 1);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 18


 376              		.loc 1 561 0
 377 00b2 0097     		str	r7, [sp]
 378 00b4 5846     		mov	r0, fp
 379 00b6 45F2DC11 		movw	r1, #20956
 380 00ba 4A46     		mov	r2, r9
 381 00bc 0123     		movs	r3, #1
 382 00be FFF7FEFF 		bl	goertzel
 383              	.LVL44:
 384 00c2 57EC106B 		fmrrd	r6, r7, d0
 385              	.LVL45:
 562:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 386              		.loc 1 562 0
 387 00c6 10EE100A 		fmrs	r0, s0	@ int
 388 00ca 3946     		mov	r1, r7
 389 00cc FFF7FEFF 		bl	__aeabi_d2iz
 390              	.LVL46:
 391 00d0 8346     		mov	fp, r0
 392              	.LVL47:
 563:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 393              		.loc 1 563 0
 394 00d2 FFF7FEFF 		bl	__aeabi_i2d
 395              	.LVL48:
 396 00d6 0246     		mov	r2, r0
 397 00d8 0B46     		mov	r3, r1
 398 00da 3046     		mov	r0, r6
 399 00dc 3946     		mov	r1, r7
 400 00de FFF7FEFF 		bl	__aeabi_dsub
 401              	.LVL49:
 402 00e2 0022     		movs	r2, #0
 403 00e4 144B     		ldr	r3, .L27+8
 404 00e6 FFF7FEFF 		bl	__aeabi_dmul
 405              	.LVL50:
 406 00ea FFF7FEFF 		bl	__aeabi_d2iz
 407              	.LVL51:
 408 00ee 0346     		mov	r3, r0
 409              	.LVL52:
 564:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 410              		.loc 1 564 0
 411 00f0 05A8     		add	r0, sp, #20
 412              	.LVL53:
 413 00f2 1349     		ldr	r1, .L27+16
 414 00f4 5A46     		mov	r2, fp
 415 00f6 FFF7FEFF 		bl	sprintf
 416              	.LVL54:
 565:Src/main.c    ****         //compare
 417              		.loc 1 565 0
 418 00fa 05A8     		add	r0, sp, #20
 419 00fc FFF7FEFF 		bl	strlen
 420              	.LVL55:
 421 0100 82B2     		uxth	r2, r0
 422 0102 5046     		mov	r0, r10
 423 0104 05A9     		add	r1, sp, #20
 424 0106 4FF6FF73 		movw	r3, #65535
 425 010a FFF7FEFF 		bl	HAL_UART_Transmit
 426              	.LVL56:
 567:Src/main.c    ****         {
 427              		.loc 1 567 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 19


 428 010e 2046     		mov	r0, r4
 429 0110 2946     		mov	r1, r5
 430 0112 3246     		mov	r2, r6
 431 0114 3B46     		mov	r3, r7
 432 0116 FFF7FEFF 		bl	__aeabi_dcmpgt
 433              	.LVL57:
 434 011a 0028     		cmp	r0, #0
 435 011c 8AD0     		beq	.L23
 436              	.LBE2:
 572:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 437              		.loc 1 572 0
 438 011e 0448     		ldr	r0, .L27
 439 0120 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 440              	.LVL58:
 573:Src/main.c    **** }
 441              		.loc 1 573 0
 442 0124 0022     		movs	r2, #0
 443 0126 074B     		ldr	r3, .L27+20
 444 0128 1A70     		strb	r2, [r3]
 574:Src/main.c    **** 
 445              		.loc 1 574 0
 446 012a 0BB0     		add	sp, sp, #44
 447              	.LCFI7:
 448              		.cfi_def_cfa_offset 36
 449              		@ sp needed
 450 012c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 451              	.LVL59:
 452              	.L28:
 453              		.align	2
 454              	.L27:
 455 0130 00000000 		.word	hadc1
 456 0134 00000000 		.word	dma_buffer
 457 0138 00408F40 		.word	1083129856
 458 013c 00000000 		.word	.LC0
 459 0140 08000000 		.word	.LC1
 460 0144 00000000 		.word	IR_INT_STATE
 461 0148 00000000 		.word	adc_values
 462 014c 00000000 		.word	huart6
 463              		.cfi_endproc
 464              	.LFE131:
 466              		.section	.text.set_motor_speed,"ax",%progbits
 467              		.align	2
 468              		.global	set_motor_speed
 469              		.thumb
 470              		.thumb_func
 472              	set_motor_speed:
 473              	.LFB135:
 590:Src/main.c    **** }
 591:Src/main.c    **** 
 592:Src/main.c    **** PID_t menu()
 593:Src/main.c    **** {
 594:Src/main.c    ****     print("Starting", 0);
 595:Src/main.c    ****     char msg[20] = "";
 596:Src/main.c    ****     int pid_select = 0;
 597:Src/main.c    ****     uint32_t values[3] = {0, 0, 0};
 598:Src/main.c    ****     while (1)
 599:Src/main.c    ****     {
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 20


 600:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 601:Src/main.c    ****         {
 602:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 603:Src/main.c    ****             print(msg, 0);
 604:Src/main.c    ****             TIM4->CNT = values[pid_select];
 605:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 606:Src/main.c    ****             {
 607:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 608:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 609:Src/main.c    ****                 print(msg, 0);
 610:Src/main.c    ****             }
 611:Src/main.c    ****             ++pid_select;
 612:Src/main.c    ****         }
 613:Src/main.c    ****         if (pid_select == 3)
 614:Src/main.c    ****             break;
 615:Src/main.c    ****     }
 616:Src/main.c    ****     while (1)
 617:Src/main.c    ****     {
 618:Src/main.c    ****         int speed = 0.3 * MOTOR_SPEED;
 619:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 620:Src/main.c    ****         {
 621:Src/main.c    ****             if (pid_select == 3)
 622:Src/main.c    ****             {
 623:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 624:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 625:Src/main.c    ****             }
 626:Src/main.c    ****             else
 627:Src/main.c    ****             {
 628:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 629:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 630:Src/main.c    ****             }
 631:Src/main.c    ****             sprintf(msg, "%d", speed);
 632:Src/main.c    ****             print(msg, 0);
 633:Src/main.c    ****             TIM4->CNT = speed;
 634:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 635:Src/main.c    ****             {
 636:Src/main.c    ****                 speed = TIM4->CNT;
 637:Src/main.c    ****                 sprintf(msg, "%d", speed);
 638:Src/main.c    ****                 print(msg, 0);
 639:Src/main.c    ****                 if (pid_select == 3)
 640:Src/main.c    ****                 {
 641:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, speed);
 642:Src/main.c    ****                     LEFT_SPEED = speed;
 643:Src/main.c    ****                 }
 644:Src/main.c    ****                 else
 645:Src/main.c    ****                 {
 646:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, speed);
 647:Src/main.c    ****                     RIGHT_SPEED = speed;
 648:Src/main.c    ****                 }
 649:Src/main.c    ****             }
 650:Src/main.c    ****             ++pid_select;
 651:Src/main.c    ****         }
 652:Src/main.c    ****         if (pid_select == 5)
 653:Src/main.c    ****         {
 654:Src/main.c    ****             break;
 655:Src/main.c    ****         }
 656:Src/main.c    ****     }
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 21


 657:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 658:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 659:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 660:Src/main.c    ****     print(msg, 0);
 661:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 662:Src/main.c    ****     print(msg, 1);
 663:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 664:Src/main.c    ****     print(msg, 2);
 665:Src/main.c    ****     sprintf(msg, "L %u", LEFT_SPEED);
 666:Src/main.c    ****     print(msg, 3);
 667:Src/main.c    ****     sprintf(msg, "R %u", RIGHT_SPEED);
 668:Src/main.c    ****     print(msg, 4);
 669:Src/main.c    ****     HAL_Delay(1000);
 670:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 671:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 672:Src/main.c    ****     return pid_Init(values[0], values[1], values[2], 5, 100);
 673:Src/main.c    **** }
 674:Src/main.c    **** 
 675:Src/main.c    **** void do_pid(PID_t *pid_struct)
 676:Src/main.c    **** {
 677:Src/main.c    ****     /* Read sensors */
 678:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) ? 0 : 1;
 679:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 680:Src/main.c    **** 
 681:Src/main.c    ****     /* Get error */
 682:Src/main.c    ****     if (left && right)
 683:Src/main.c    ****     {
 684:Src/main.c    ****         pid_struct->err = 0;
 685:Src/main.c    ****     }
 686:Src/main.c    ****     else if (left && !right)
 687:Src/main.c    ****     {
 688:Src/main.c    ****         pid_struct->err = 1;
 689:Src/main.c    ****     }
 690:Src/main.c    ****     else if (!left && right)
 691:Src/main.c    ****     {
 692:Src/main.c    ****         pid_struct->err = -1;
 693:Src/main.c    ****     }
 694:Src/main.c    ****     else if (!left && !right && (pid_struct->err < 0))
 695:Src/main.c    ****     {
 696:Src/main.c    ****         pid_struct->err = -5;
 697:Src/main.c    ****     }
 698:Src/main.c    ****     else if (!left && !right && (pid_struct->err > 0))
 699:Src/main.c    ****     {
 700:Src/main.c    ****         pid_struct->err = 5;
 701:Src/main.c    ****     }
 702:Src/main.c    **** 
 703:Src/main.c    ****     /* Get gain */
 704:Src/main.c    ****     int16_t gain = pid_GetGain(pid_struct);
 705:Src/main.c    ****     char msg[20] = "";
 706:Src/main.c    ****     sprintf(msg, "%d", (int)gain);
 707:Src/main.c    ****     print(msg, 0);
 708:Src/main.c    ****     /* Set Motor Speeds*/
 709:Src/main.c    ****     int lspeed = LEFT_SPEED;
 710:Src/main.c    ****     int rspeed = RIGHT_SPEED;
 711:Src/main.c    ****     if (gain < 0)
 712:Src/main.c    ****     {
 713:Src/main.c    ****         lspeed = LEFT_SPEED - gain;
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 22


 714:Src/main.c    ****     }
 715:Src/main.c    ****     else if (gain > 0)
 716:Src/main.c    ****     {
 717:Src/main.c    ****         rspeed = RIGHT_SPEED + gain;
 718:Src/main.c    ****     }
 719:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 720:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 721:Src/main.c    **** }
 722:Src/main.c    **** 
 723:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 724:Src/main.c    **** {
 474              		.loc 1 724 0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
 479              	.LVL60:
 725:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 480              		.loc 1 725 0
 481 0000 0346     		mov	r3, r0
 482 0002 18B9     		cbnz	r0, .L30
 726:Src/main.c    ****     {
 727:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 483              		.loc 1 727 0
 484 0004 0F4A     		ldr	r2, .L34
 485 0006 1268     		ldr	r2, [r2]
 486 0008 9063     		str	r0, [r2, #56]
 487 000a 13E0     		b	.L31
 488              	.L30:
 728:Src/main.c    ****     }
 729:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 489              		.loc 1 729 0
 490 000c 0428     		cmp	r0, #4
 491 000e 04D1     		bne	.L32
 730:Src/main.c    ****     {
 731:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 492              		.loc 1 731 0
 493 0010 0C4A     		ldr	r2, .L34
 494 0012 1268     		ldr	r2, [r2]
 495 0014 0020     		movs	r0, #0
 496              	.LVL61:
 497 0016 5063     		str	r0, [r2, #52]
 498 0018 0CE0     		b	.L31
 499              	.LVL62:
 500              	.L32:
 732:Src/main.c    ****     }
 733:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 501              		.loc 1 733 0
 502 001a 0828     		cmp	r0, #8
 503 001c 04D1     		bne	.L33
 734:Src/main.c    ****     {
 735:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 504              		.loc 1 735 0
 505 001e 094A     		ldr	r2, .L34
 506 0020 1268     		ldr	r2, [r2]
 507 0022 0020     		movs	r0, #0
 508              	.LVL63:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 23


 509 0024 1064     		str	r0, [r2, #64]
 510 0026 05E0     		b	.L31
 511              	.LVL64:
 512              	.L33:
 736:Src/main.c    ****     }
 737:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 513              		.loc 1 737 0
 514 0028 0C28     		cmp	r0, #12
 515 002a 03D1     		bne	.L31
 738:Src/main.c    ****     {
 739:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 516              		.loc 1 739 0
 517 002c 054A     		ldr	r2, .L34
 518 002e 1268     		ldr	r2, [r2]
 519 0030 0020     		movs	r0, #0
 520              	.LVL65:
 521 0032 D063     		str	r0, [r2, #60]
 522              	.L31:
 740:Src/main.c    ****     }
 741:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 523              		.loc 1 741 0
 524 0034 034A     		ldr	r2, .L34
 525 0036 1268     		ldr	r2, [r2]
 526 0038 3432     		adds	r2, r2, #52
 527 003a 9B08     		lsrs	r3, r3, #2
 528              	.LVL66:
 529 003c 42F82310 		str	r1, [r2, r3, lsl #2]
 530 0040 7047     		bx	lr
 531              	.L35:
 532 0042 00BF     		.align	2
 533              	.L34:
 534 0044 00000000 		.word	htim1
 535              		.cfi_endproc
 536              	.LFE135:
 538              		.global	__aeabi_f2d
 539              		.global	__aeabi_d2uiz
 540              		.section	.text.turn,"ax",%progbits
 541              		.align	2
 542              		.global	turn
 543              		.thumb
 544              		.thumb_func
 546              	turn:
 547              	.LFB126:
 375:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 548              		.loc 1 375 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 24
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 553              	.LCFI8:
 554              		.cfi_def_cfa_offset 20
 555              		.cfi_offset 4, -20
 556              		.cfi_offset 5, -16
 557              		.cfi_offset 6, -12
 558              		.cfi_offset 7, -8
 559              		.cfi_offset 14, -4
 560 0002 2DED028B 		fstmfdd	sp!, {d8}
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 24


 561              	.LCFI9:
 562              		.cfi_def_cfa_offset 28
 563              		.cfi_offset 80, -28
 564              		.cfi_offset 81, -24
 565 0006 87B0     		sub	sp, sp, #28
 566              	.LCFI10:
 567              		.cfi_def_cfa_offset 56
 376:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 568              		.loc 1 376 0
 569 0008 6348     		ldr	r0, .L49+16
 570 000a 6449     		ldr	r1, .L49+20
 571 000c 0122     		movs	r2, #1
 572 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 573              	.LVL67:
 378:Src/main.c    ****     float volts = calculate_heading(adc_values[0]);
 574              		.loc 1 378 0
 575 0012 3220     		movs	r0, #50
 576 0014 FFF7FEFF 		bl	HAL_Delay
 577              	.LVL68:
 379:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 578              		.loc 1 379 0
 579 0018 614E     		ldr	r6, .L49+24
 580 001a 3068     		ldr	r0, [r6]
 581 001c FFF7FEFF 		bl	calculate_heading
 582              	.LVL69:
 583 0020 B0EE408A 		fcpys	s16, s0
 584              	.LVL70:
 380:Src/main.c    ****     TIM4->CNT = 0;
 585              		.loc 1 380 0
 586 0024 F0EEC07A 		fabss	s15, s0
 587 0028 17EE900A 		fmrs	r0, s15
 588 002c FFF7FEFF 		bl	__aeabi_f2d
 589              	.LVL71:
 590 0030 0022     		movs	r2, #0
 591 0032 5C4B     		ldr	r3, .L49+28
 592 0034 FFF7FEFF 		bl	__aeabi_dmul
 593              	.LVL72:
 594 0038 FFF7FEFF 		bl	__aeabi_d2uiz
 595              	.LVL73:
 596 003c 85B2     		uxth	r5, r0
 597              	.LVL74:
 381:Src/main.c    ****     TIM5->CNT = 0;
 598              		.loc 1 381 0
 599 003e 0024     		movs	r4, #0
 600 0040 594B     		ldr	r3, .L49+32
 601 0042 5C62     		str	r4, [r3, #36]
 382:Src/main.c    **** 
 602              		.loc 1 382 0
 603 0044 03F58063 		add	r3, r3, #1024
 604 0048 5C62     		str	r4, [r3, #36]
 384:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 605              		.loc 1 384 0
 606 004a 0194     		str	r4, [sp, #4]
 607 004c 0294     		str	r4, [sp, #8]
 608 004e 0394     		str	r4, [sp, #12]
 609 0050 0494     		str	r4, [sp, #16]
 610 0052 ADF81440 		strh	r4, [sp, #20]	@ movhi
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 25


 385:Src/main.c    ****     print(msg, 0);
 611              		.loc 1 385 0
 612 0056 01A8     		add	r0, sp, #4
 613 0058 5449     		ldr	r1, .L49+36
 614 005a 2A46     		mov	r2, r5
 615 005c FFF7FEFF 		bl	sprintf
 616              	.LVL75:
 386:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 617              		.loc 1 386 0
 618 0060 01A8     		add	r0, sp, #4
 619 0062 2146     		mov	r1, r4
 620 0064 FFF7FEFF 		bl	print
 621              	.LVL76:
 387:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 622              		.loc 1 387 0
 623 0068 BDEEC87A 		ftosizs	s14, s16
 624              	.LVL77:
 388:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 625              		.loc 1 388 0
 626 006c F8EEC77A 		fsitos	s15, s14
 627 0070 78EE677A 		fsubs	s15, s16, s15
 628 0074 DFED4E6A 		flds	s13, .L49+40
 629 0078 67EEA67A 		fmuls	s15, s15, s13
 630              	.LVL78:
 389:Src/main.c    ****     print(msg, 2);
 631              		.loc 1 389 0
 632 007c 01A8     		add	r0, sp, #4
 633 007e 4D49     		ldr	r1, .L49+44
 634 0080 17EE102A 		fmrs	r2, s14	@ int
 635 0084 FDEEE77A 		ftosizs	s15, s15
 636              	.LVL79:
 637 0088 17EE903A 		fmrs	r3, s15	@ int
 638 008c FFF7FEFF 		bl	sprintf
 639              	.LVL80:
 390:Src/main.c    ****     sprintf(msg, "adc_val: %d", adc_values[0]);
 640              		.loc 1 390 0
 641 0090 01A8     		add	r0, sp, #4
 642 0092 0221     		movs	r1, #2
 643 0094 FFF7FEFF 		bl	print
 644              	.LVL81:
 391:Src/main.c    ****     print(msg, 3);
 645              		.loc 1 391 0
 646 0098 01A8     		add	r0, sp, #4
 647 009a 4749     		ldr	r1, .L49+48
 648 009c 3268     		ldr	r2, [r6]
 649 009e FFF7FEFF 		bl	sprintf
 650              	.LVL82:
 392:Src/main.c    **** 
 651              		.loc 1 392 0
 652 00a2 01A8     		add	r0, sp, #4
 653 00a4 0321     		movs	r1, #3
 654 00a6 FFF7FEFF 		bl	print
 655              	.LVL83:
 394:Src/main.c    ****     {
 656              		.loc 1 394 0
 657 00aa 18EE100A 		fmrs	r0, s16
 658 00ae FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 26


 659              	.LVL84:
 660 00b2 0646     		mov	r6, r0
 661 00b4 0F46     		mov	r7, r1
 662 00b6 34A3     		adr	r3, .L49
 663 00b8 D3E90023 		ldrd	r2, [r3]
 664 00bc FFF7FEFF 		bl	__aeabi_dcmplt
 665              	.LVL85:
 666 00c0 20B3     		cbz	r0, .L47
 396:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 500);
 667              		.loc 1 396 0
 668 00c2 2046     		mov	r0, r4
 669 00c4 2146     		mov	r1, r4
 670 00c6 FFF7FEFF 		bl	set_motor_speed
 671              	.LVL86:
 397:Src/main.c    ****         while (TIM5->CNT < counts)
 672              		.loc 1 397 0
 673 00ca 0820     		movs	r0, #8
 674 00cc 4FF4FA71 		mov	r1, #500
 675 00d0 FFF7FEFF 		bl	set_motor_speed
 676              	.LVL87:
 398:Src/main.c    ****         {
 677              		.loc 1 398 0
 678 00d4 09E0     		b	.L39
 679              	.L40:
 400:Src/main.c    ****             print(msg, 4);
 680              		.loc 1 400 0
 681 00d6 394B     		ldr	r3, .L49+52
 682 00d8 5A6A     		ldr	r2, [r3, #36]
 683 00da 01A8     		add	r0, sp, #4
 684 00dc 3849     		ldr	r1, .L49+56
 685 00de FFF7FEFF 		bl	sprintf
 686              	.LVL88:
 401:Src/main.c    ****         }
 687              		.loc 1 401 0
 688 00e2 01A8     		add	r0, sp, #4
 689 00e4 0421     		movs	r1, #4
 690 00e6 FFF7FEFF 		bl	print
 691              	.LVL89:
 692              	.L39:
 398:Src/main.c    ****         {
 693              		.loc 1 398 0
 694 00ea 344B     		ldr	r3, .L49+52
 695 00ec 5B6A     		ldr	r3, [r3, #36]
 696 00ee AB42     		cmp	r3, r5
 697 00f0 F1D3     		bcc	.L40
 403:Src/main.c    ****         print(msg, 4);
 698              		.loc 1 403 0
 699 00f2 324C     		ldr	r4, .L49+52
 700 00f4 626A     		ldr	r2, [r4, #36]
 701 00f6 01A8     		add	r0, sp, #4
 702 00f8 3149     		ldr	r1, .L49+56
 703 00fa FFF7FEFF 		bl	sprintf
 704              	.LVL90:
 404:Src/main.c    ****         TIM5->CNT = 0;
 705              		.loc 1 404 0
 706 00fe 01A8     		add	r0, sp, #4
 707 0100 0421     		movs	r1, #4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 27


 708 0102 FFF7FEFF 		bl	print
 709              	.LVL91:
 405:Src/main.c    ****     }
 710              		.loc 1 405 0
 711 0106 0023     		movs	r3, #0
 712 0108 6362     		str	r3, [r4, #36]
 713 010a 2BE0     		b	.L41
 714              	.L47:
 407:Src/main.c    ****     {
 715              		.loc 1 407 0
 716 010c 3046     		mov	r0, r6
 717 010e 3946     		mov	r1, r7
 718 0110 1FA3     		adr	r3, .L49+8
 719 0112 D3E90023 		ldrd	r2, [r3]
 720 0116 FFF7FEFF 		bl	__aeabi_dcmpgt
 721              	.LVL92:
 722 011a 18B3     		cbz	r0, .L41
 409:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 723              		.loc 1 409 0
 724 011c 0020     		movs	r0, #0
 725 011e 4FF4FA71 		mov	r1, #500
 726 0122 FFF7FEFF 		bl	set_motor_speed
 727              	.LVL93:
 410:Src/main.c    ****         while (TIM4->CNT < counts)
 728              		.loc 1 410 0
 729 0126 0820     		movs	r0, #8
 730 0128 0021     		movs	r1, #0
 731 012a FFF7FEFF 		bl	set_motor_speed
 732              	.LVL94:
 411:Src/main.c    ****         {
 733              		.loc 1 411 0
 734 012e 09E0     		b	.L43
 735              	.L44:
 413:Src/main.c    ****             print(msg, 4);
 736              		.loc 1 413 0
 737 0130 1D4B     		ldr	r3, .L49+32
 738 0132 5A6A     		ldr	r2, [r3, #36]
 739 0134 01A8     		add	r0, sp, #4
 740 0136 2349     		ldr	r1, .L49+60
 741 0138 FFF7FEFF 		bl	sprintf
 742              	.LVL95:
 414:Src/main.c    ****         }
 743              		.loc 1 414 0
 744 013c 01A8     		add	r0, sp, #4
 745 013e 0421     		movs	r1, #4
 746 0140 FFF7FEFF 		bl	print
 747              	.LVL96:
 748              	.L43:
 411:Src/main.c    ****         {
 749              		.loc 1 411 0
 750 0144 184B     		ldr	r3, .L49+32
 751 0146 5B6A     		ldr	r3, [r3, #36]
 752 0148 AB42     		cmp	r3, r5
 753 014a F1D3     		bcc	.L44
 416:Src/main.c    ****         print(msg, 4);
 754              		.loc 1 416 0
 755 014c 164C     		ldr	r4, .L49+32
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 28


 756 014e 626A     		ldr	r2, [r4, #36]
 757 0150 01A8     		add	r0, sp, #4
 758 0152 1C49     		ldr	r1, .L49+60
 759 0154 FFF7FEFF 		bl	sprintf
 760              	.LVL97:
 417:Src/main.c    ****         TIM4->CNT = 0;
 761              		.loc 1 417 0
 762 0158 01A8     		add	r0, sp, #4
 763 015a 0421     		movs	r1, #4
 764 015c FFF7FEFF 		bl	print
 765              	.LVL98:
 418:Src/main.c    ****     }
 766              		.loc 1 418 0
 767 0160 0023     		movs	r3, #0
 768 0162 6362     		str	r3, [r4, #36]
 769              	.L41:
 420:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 770              		.loc 1 420 0
 771 0164 0020     		movs	r0, #0
 772 0166 0146     		mov	r1, r0
 773 0168 FFF7FEFF 		bl	set_motor_speed
 774              	.LVL99:
 421:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 775              		.loc 1 421 0
 776 016c 0820     		movs	r0, #8
 777 016e 0021     		movs	r1, #0
 778 0170 FFF7FEFF 		bl	set_motor_speed
 779              	.LVL100:
 422:Src/main.c    **** }
 780              		.loc 1 422 0
 781 0174 0848     		ldr	r0, .L49+16
 782 0176 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 783              	.LVL101:
 423:Src/main.c    **** 
 784              		.loc 1 423 0
 785 017a 07B0     		add	sp, sp, #28
 786              	.LCFI11:
 787              		.cfi_def_cfa_offset 28
 788              		@ sp needed
 789 017c BDEC028B 		fldmfdd	sp!, {d8}
 790              	.LCFI12:
 791              		.cfi_restore 80
 792              		.cfi_restore 81
 793              		.cfi_def_cfa_offset 20
 794              	.LVL102:
 795 0180 F0BD     		pop	{r4, r5, r6, r7, pc}
 796              	.LVL103:
 797              	.L50:
 798 0182 00BFAFF3 		.align	3
 798      0080
 799              	.L49:
 800 0188 7B14AE47 		.word	1202590843
 801 018c E17AA4BF 		.word	-1079739679
 802 0190 7B14AE47 		.word	1202590843
 803 0194 E17AA43F 		.word	1067743969
 804 0198 00000000 		.word	hadc1
 805 019c 00000000 		.word	dma_buffer
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 29


 806 01a0 00000000 		.word	adc_values
 807 01a4 00805140 		.word	1079083008
 808 01a8 00080040 		.word	1073743872
 809 01ac 10000000 		.word	.LC2
 810 01b0 00007A44 		.word	1148846080
 811 01b4 1C000000 		.word	.LC3
 812 01b8 28000000 		.word	.LC4
 813 01bc 000C0040 		.word	1073744896
 814 01c0 34000000 		.word	.LC5
 815 01c4 44000000 		.word	.LC6
 816              		.cfi_endproc
 817              	.LFE126:
 819              		.global	__aeabi_dadd
 820              		.section	.text.turn_deg,"ax",%progbits
 821              		.align	2
 822              		.global	turn_deg
 823              		.thumb
 824              		.thumb_func
 826              	turn_deg:
 827              	.LFB127:
 430:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 828              		.loc 1 430 0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 24
 831              		@ frame_needed = 0, uses_anonymous_args = 0
 832              	.LVL104:
 833 0000 30B5     		push	{r4, r5, lr}
 834              	.LCFI13:
 835              		.cfi_def_cfa_offset 12
 836              		.cfi_offset 4, -12
 837              		.cfi_offset 5, -8
 838              		.cfi_offset 14, -4
 839 0002 87B0     		sub	sp, sp, #28
 840              	.LCFI14:
 841              		.cfi_def_cfa_offset 40
 842 0004 0546     		mov	r5, r0
 431:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 843              		.loc 1 431 0
 844 0006 2C48     		ldr	r0, .L56+8
 845              	.LVL105:
 846 0008 2C49     		ldr	r1, .L56+12
 847 000a 0122     		movs	r2, #1
 848 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 849              	.LVL106:
 432:Src/main.c    ****     TIM4->CNT = 0;
 850              		.loc 1 432 0
 851 0010 A5F15A00 		sub	r0, r5, #90
 852 0014 FFF7FEFF 		bl	__aeabi_i2d
 853              	.LVL107:
 854 0018 25A3     		adr	r3, .L56
 855 001a D3E90023 		ldrd	r2, [r3]
 856 001e FFF7FEFF 		bl	__aeabi_dmul
 857              	.LVL108:
 858 0022 0022     		movs	r2, #0
 859 0024 264B     		ldr	r3, .L56+16
 860 0026 FFF7FEFF 		bl	__aeabi_dadd
 861              	.LVL109:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 30


 862 002a FFF7FEFF 		bl	__aeabi_d2uiz
 863              	.LVL110:
 864 002e 84B2     		uxth	r4, r0
 865              	.LVL111:
 433:Src/main.c    ****     TIM5->CNT = 0;
 866              		.loc 1 433 0
 867 0030 0023     		movs	r3, #0
 868 0032 244A     		ldr	r2, .L56+20
 869 0034 5362     		str	r3, [r2, #36]
 434:Src/main.c    **** 
 870              		.loc 1 434 0
 871 0036 02F58062 		add	r2, r2, #1024
 872 003a 5362     		str	r3, [r2, #36]
 436:Src/main.c    **** 
 873              		.loc 1 436 0
 874 003c 0193     		str	r3, [sp, #4]
 875 003e 0293     		str	r3, [sp, #8]
 876 0040 0393     		str	r3, [sp, #12]
 877 0042 0493     		str	r3, [sp, #16]
 878 0044 ADF81430 		strh	r3, [sp, #20]	@ movhi
 438:Src/main.c    ****     {
 879              		.loc 1 438 0
 880 0048 1DB3     		cbz	r5, .L52
 440:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 881              		.loc 1 440 0
 882 004a 1846     		mov	r0, r3
 883 004c 1946     		mov	r1, r3
 884 004e FFF7FEFF 		bl	set_motor_speed
 885              	.LVL112:
 441:Src/main.c    ****         while (TIM5->CNT < counts)
 886              		.loc 1 441 0
 887 0052 0820     		movs	r0, #8
 888 0054 47F23051 		movw	r1, #30000
 889 0058 FFF7FEFF 		bl	set_motor_speed
 890              	.LVL113:
 442:Src/main.c    ****         {
 891              		.loc 1 442 0
 892 005c 09E0     		b	.L53
 893              	.L54:
 444:Src/main.c    ****             print(msg, 4);
 894              		.loc 1 444 0
 895 005e 1A4B     		ldr	r3, .L56+24
 896 0060 5A6A     		ldr	r2, [r3, #36]
 897 0062 01A8     		add	r0, sp, #4
 898 0064 1949     		ldr	r1, .L56+28
 899 0066 FFF7FEFF 		bl	sprintf
 900              	.LVL114:
 445:Src/main.c    ****         }
 901              		.loc 1 445 0
 902 006a 01A8     		add	r0, sp, #4
 903 006c 0421     		movs	r1, #4
 904 006e FFF7FEFF 		bl	print
 905              	.LVL115:
 906              	.L53:
 442:Src/main.c    ****         {
 907              		.loc 1 442 0
 908 0072 154B     		ldr	r3, .L56+24
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 31


 909 0074 5B6A     		ldr	r3, [r3, #36]
 910 0076 A342     		cmp	r3, r4
 911 0078 F1D3     		bcc	.L54
 447:Src/main.c    ****         print(msg, 4);
 912              		.loc 1 447 0
 913 007a 134C     		ldr	r4, .L56+24
 914              	.LVL116:
 915 007c 626A     		ldr	r2, [r4, #36]
 916 007e 01A8     		add	r0, sp, #4
 917 0080 1249     		ldr	r1, .L56+28
 918 0082 FFF7FEFF 		bl	sprintf
 919              	.LVL117:
 448:Src/main.c    ****         TIM5->CNT = 0;
 920              		.loc 1 448 0
 921 0086 01A8     		add	r0, sp, #4
 922 0088 0421     		movs	r1, #4
 923 008a FFF7FEFF 		bl	print
 924              	.LVL118:
 449:Src/main.c    ****     }
 925              		.loc 1 449 0
 926 008e 0023     		movs	r3, #0
 927 0090 6362     		str	r3, [r4, #36]
 928              	.L52:
 464:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 929              		.loc 1 464 0
 930 0092 0020     		movs	r0, #0
 931 0094 0146     		mov	r1, r0
 932 0096 FFF7FEFF 		bl	set_motor_speed
 933              	.LVL119:
 465:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 934              		.loc 1 465 0
 935 009a 0820     		movs	r0, #8
 936 009c 0021     		movs	r1, #0
 937 009e FFF7FEFF 		bl	set_motor_speed
 938              	.LVL120:
 466:Src/main.c    **** }
 939              		.loc 1 466 0
 940 00a2 0548     		ldr	r0, .L56+8
 941 00a4 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 942              	.LVL121:
 467:Src/main.c    **** 
 943              		.loc 1 467 0
 944 00a8 07B0     		add	sp, sp, #28
 945              	.LCFI15:
 946              		.cfi_def_cfa_offset 12
 947              		@ sp needed
 948 00aa 30BD     		pop	{r4, r5, pc}
 949              	.L57:
 950 00ac AFF30080 		.align	3
 951              	.L56:
 952 00b0 721CC771 		.word	1908874354
 953 00b4 1CC7E13F 		.word	1071761180
 954 00b8 00000000 		.word	hadc1
 955 00bc 00000000 		.word	dma_buffer
 956 00c0 00004940 		.word	1078525952
 957 00c4 00080040 		.word	1073743872
 958 00c8 000C0040 		.word	1073744896
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 32


 959 00cc 34000000 		.word	.LC5
 960              		.cfi_endproc
 961              	.LFE127:
 963              		.section	.text.pi_navigation,"ax",%progbits
 964              		.align	2
 965              		.global	pi_navigation
 966              		.thumb
 967              		.thumb_func
 969              	pi_navigation:
 970              	.LFB128:
 470:Src/main.c    ****     print("Pi nav", 0);
 971              		.loc 1 470 0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 0
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 975 0000 08B5     		push	{r3, lr}
 976              	.LCFI16:
 977              		.cfi_def_cfa_offset 8
 978              		.cfi_offset 3, -8
 979              		.cfi_offset 14, -4
 980 0002 2DED028B 		fstmfdd	sp!, {d8}
 981              	.LCFI17:
 982              		.cfi_def_cfa_offset 16
 983              		.cfi_offset 80, -16
 984              		.cfi_offset 81, -12
 471:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 985              		.loc 1 471 0
 986 0006 2848     		ldr	r0, .L67
 987 0008 0021     		movs	r1, #0
 988 000a FFF7FEFF 		bl	print
 989              	.LVL122:
 472:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 990              		.loc 1 472 0
 991 000e 2748     		ldr	r0, .L67+4
 992 0010 2749     		ldr	r1, .L67+8
 993 0012 0122     		movs	r2, #1
 994 0014 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 995              	.LVL123:
 474:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
 996              		.loc 1 474 0
 997 0018 4FF4FA70 		mov	r0, #500
 998 001c FFF7FEFF 		bl	HAL_Delay
 999              	.LVL124:
 475:Src/main.c    ****     if (heading < 0)
 1000              		.loc 1 475 0
 1001 0020 244B     		ldr	r3, .L67+12
 1002 0022 5869     		ldr	r0, [r3, #20]
 1003 0024 FFF7FEFF 		bl	calculate_heading
 1004              	.LVL125:
 1005 0028 B0EE408A 		fcpys	s16, s0
 1006              	.LVL126:
 476:Src/main.c    ****     {
 1007              		.loc 1 476 0
 1008 002c B5EEC00A 		fcmpezs	s0
 1009 0030 F1EE10FA 		fmstat
 1010 0034 0CD5     		bpl	.L65
 478:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0.3 * MOTOR_SPEED);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 33


 1011              		.loc 1 478 0
 1012 0036 0420     		movs	r0, #4
 1013 0038 4FF49671 		mov	r1, #300
 1014 003c FFF7FEFF 		bl	set_motor_speed
 1015              	.LVL127:
 479:Src/main.c    ****         heading *= -1;
 1016              		.loc 1 479 0
 1017 0040 0820     		movs	r0, #8
 1018 0042 4FF49671 		mov	r1, #300
 1019 0046 FFF7FEFF 		bl	set_motor_speed
 1020              	.LVL128:
 480:Src/main.c    ****     }
 1021              		.loc 1 480 0
 1022 004a B1EE488A 		fnegs	s16, s16
 1023              	.LVL129:
 1024 004e 0EE0     		b	.L61
 1025              	.LVL130:
 1026              	.L65:
 482:Src/main.c    ****     {
 1027              		.loc 1 482 0
 1028 0050 B5EEC00A 		fcmpezs	s0
 1029 0054 F1EE10FA 		fmstat
 1030 0058 09DD     		ble	.L61
 484:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 0.3 * MOTOR_SPEED);
 1031              		.loc 1 484 0
 1032 005a 0020     		movs	r0, #0
 1033 005c 4FF49671 		mov	r1, #300
 1034 0060 FFF7FEFF 		bl	set_motor_speed
 1035              	.LVL131:
 485:Src/main.c    ****     }
 1036              		.loc 1 485 0
 1037 0064 0C20     		movs	r0, #12
 1038 0066 4FF49671 		mov	r1, #300
 1039 006a FFF7FEFF 		bl	set_motor_speed
 1040              	.LVL132:
 1041              	.L61:
 487:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0.3 * MOTOR_SPEED);
 1042              		.loc 1 487 0
 1043 006e DFED127A 		flds	s15, .L67+16
 1044 0072 28EE278A 		fmuls	s16, s16, s15
 1045              	.LVL133:
 1046 0076 FCEEC87A 		ftouizs	s15, s16
 1047 007a 17EE900A 		fmrs	r0, s15	@ int
 1048 007e FFF7FEFF 		bl	HAL_Delay
 1049              	.LVL134:
 488:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0.3 * MOTOR_SPEED);
 1050              		.loc 1 488 0
 1051 0082 0020     		movs	r0, #0
 1052 0084 4FF49671 		mov	r1, #300
 1053 0088 FFF7FEFF 		bl	set_motor_speed
 1054              	.LVL135:
 489:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 1055              		.loc 1 489 0
 1056 008c 0820     		movs	r0, #8
 1057 008e 4FF49671 		mov	r1, #300
 1058 0092 FFF7FEFF 		bl	set_motor_speed
 1059              	.LVL136:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 34


 490:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 1060              		.loc 1 490 0
 1061 0096 0548     		ldr	r0, .L67+4
 1062 0098 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1063              	.LVL137:
 491:Src/main.c    **** }
 1064              		.loc 1 491 0
 1065 009c 0022     		movs	r2, #0
 1066 009e 074B     		ldr	r3, .L67+20
 1067 00a0 1A70     		strb	r2, [r3]
 492:Src/main.c    **** 
 1068              		.loc 1 492 0
 1069 00a2 BDEC028B 		fldmfdd	sp!, {d8}
 1070              	.LCFI18:
 1071              		.cfi_restore 80
 1072              		.cfi_restore 81
 1073              		.cfi_def_cfa_offset 8
 1074 00a6 08BD     		pop	{r3, pc}
 1075              	.L68:
 1076              		.align	2
 1077              	.L67:
 1078 00a8 54000000 		.word	.LC7
 1079 00ac 00000000 		.word	hadc1
 1080 00b0 00000000 		.word	dma_buffer
 1081 00b4 00000000 		.word	adc_values
 1082 00b8 0000FA44 		.word	1157234688
 1083 00bc 00000000 		.word	PI_INT_STATE
 1084              		.cfi_endproc
 1085              	.LFE128:
 1087              		.section	.text.menu,"ax",%progbits
 1088              		.align	2
 1089              		.global	menu
 1090              		.thumb
 1091              		.thumb_func
 1093              	menu:
 1094              	.LFB133:
 593:Src/main.c    ****     print("Starting", 0);
 1095              		.loc 1 593 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 32
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              	.LVL138:
 1100 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1101              	.LCFI19:
 1102              		.cfi_def_cfa_offset 24
 1103              		.cfi_offset 4, -24
 1104              		.cfi_offset 5, -20
 1105              		.cfi_offset 6, -16
 1106              		.cfi_offset 7, -12
 1107              		.cfi_offset 8, -8
 1108              		.cfi_offset 14, -4
 1109 0004 8AB0     		sub	sp, sp, #40
 1110              	.LCFI20:
 1111              		.cfi_def_cfa_offset 64
 1112 0006 0646     		mov	r6, r0
 594:Src/main.c    ****     char msg[20] = "";
 1113              		.loc 1 594 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 35


 1114 0008 7148     		ldr	r0, .L83
 1115              	.LVL139:
 1116 000a 0021     		movs	r1, #0
 1117 000c FFF7FEFF 		bl	print
 1118              	.LVL140:
 595:Src/main.c    ****     int pid_select = 0;
 1119              		.loc 1 595 0
 1120 0010 0025     		movs	r5, #0
 1121 0012 0595     		str	r5, [sp, #20]
 1122 0014 0695     		str	r5, [sp, #24]
 1123 0016 0795     		str	r5, [sp, #28]
 1124 0018 0895     		str	r5, [sp, #32]
 1125 001a 0995     		str	r5, [sp, #36]
 1126              	.LVL141:
 597:Src/main.c    ****     while (1)
 1127              		.loc 1 597 0
 1128 001c 0295     		str	r5, [sp, #8]
 1129 001e 0395     		str	r5, [sp, #12]
 1130 0020 0495     		str	r5, [sp, #16]
 1131              	.LVL142:
 1132              	.L73:
 600:Src/main.c    ****         {
 1133              		.loc 1 600 0
 1134 0022 6C48     		ldr	r0, .L83+4
 1135 0024 4FF40051 		mov	r1, #8192
 1136 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1137              	.LVL143:
 1138 002c 38BB     		cbnz	r0, .L70
 602:Src/main.c    ****             print(msg, 0);
 1139              		.loc 1 602 0
 1140 002e 0AAB     		add	r3, sp, #40
 1141 0030 03EB8503 		add	r3, r3, r5, lsl #2
 1142 0034 53F8204C 		ldr	r4, [r3, #-32]
 1143 0038 05A8     		add	r0, sp, #20
 1144 003a 6749     		ldr	r1, .L83+8
 1145 003c 2246     		mov	r2, r4
 1146 003e FFF7FEFF 		bl	sprintf
 1147              	.LVL144:
 603:Src/main.c    ****             TIM4->CNT = values[pid_select];
 1148              		.loc 1 603 0
 1149 0042 05A8     		add	r0, sp, #20
 1150 0044 0021     		movs	r1, #0
 1151 0046 FFF7FEFF 		bl	print
 1152              	.LVL145:
 604:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 1153              		.loc 1 604 0
 1154 004a 644B     		ldr	r3, .L83+12
 1155 004c 5C62     		str	r4, [r3, #36]
 605:Src/main.c    ****             {
 1156              		.loc 1 605 0
 1157 004e 0EE0     		b	.L71
 1158              	.L72:
 607:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 1159              		.loc 1 607 0
 1160 0050 624B     		ldr	r3, .L83+12
 1161 0052 5A6A     		ldr	r2, [r3, #36]
 1162 0054 0AAB     		add	r3, sp, #40
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 36


 1163 0056 03EB8503 		add	r3, r3, r5, lsl #2
 1164 005a 43F8202C 		str	r2, [r3, #-32]
 608:Src/main.c    ****                 print(msg, 0);
 1165              		.loc 1 608 0
 1166 005e 05A8     		add	r0, sp, #20
 1167 0060 5D49     		ldr	r1, .L83+8
 1168 0062 FFF7FEFF 		bl	sprintf
 1169              	.LVL146:
 609:Src/main.c    ****             }
 1170              		.loc 1 609 0
 1171 0066 05A8     		add	r0, sp, #20
 1172 0068 0021     		movs	r1, #0
 1173 006a FFF7FEFF 		bl	print
 1174              	.LVL147:
 1175              	.L71:
 605:Src/main.c    ****             {
 1176              		.loc 1 605 0
 1177 006e 5948     		ldr	r0, .L83+4
 1178 0070 4FF40051 		mov	r1, #8192
 1179 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1180              	.LVL148:
 1181 0078 0028     		cmp	r0, #0
 1182 007a E9D0     		beq	.L72
 611:Src/main.c    ****         }
 1183              		.loc 1 611 0
 1184 007c 0135     		adds	r5, r5, #1
 1185              	.LVL149:
 1186              	.L70:
 613:Src/main.c    ****             break;
 1187              		.loc 1 613 0
 1188 007e 032D     		cmp	r5, #3
 1189 0080 CFD1     		bne	.L73
 1190              	.L81:
 1191              	.LVL150:
 1192              	.LBB3:
 619:Src/main.c    ****         {
 1193              		.loc 1 619 0
 1194 0082 5448     		ldr	r0, .L83+4
 1195 0084 4FF40051 		mov	r1, #8192
 1196 0088 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1197              	.LVL151:
 1198 008c 0028     		cmp	r0, #0
 1199 008e 45D1     		bne	.L74
 621:Src/main.c    ****             {
 1200              		.loc 1 621 0
 1201 0090 032D     		cmp	r5, #3
 1202 0092 09D1     		bne	.L75
 623:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 1203              		.loc 1 623 0
 1204 0094 524C     		ldr	r4, .L83+16
 1205 0096 2046     		mov	r0, r4
 1206 0098 0021     		movs	r1, #0
 1207 009a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1208              	.LVL152:
 624:Src/main.c    ****             }
 1209              		.loc 1 624 0
 1210 009e 2046     		mov	r0, r4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 37


 1211 00a0 0821     		movs	r1, #8
 1212 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1213              	.LVL153:
 1214 00a6 08E0     		b	.L76
 1215              	.L75:
 628:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1216              		.loc 1 628 0
 1217 00a8 4D4C     		ldr	r4, .L83+16
 1218 00aa 2046     		mov	r0, r4
 1219 00ac 0021     		movs	r1, #0
 1220 00ae FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1221              	.LVL154:
 629:Src/main.c    ****             }
 1222              		.loc 1 629 0
 1223 00b2 2046     		mov	r0, r4
 1224 00b4 0821     		movs	r1, #8
 1225 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1226              	.LVL155:
 1227              	.L76:
 631:Src/main.c    ****             print(msg, 0);
 1228              		.loc 1 631 0
 1229 00ba 05A8     		add	r0, sp, #20
 1230 00bc 4949     		ldr	r1, .L83+20
 1231 00be 4FF49672 		mov	r2, #300
 1232 00c2 FFF7FEFF 		bl	sprintf
 1233              	.LVL156:
 632:Src/main.c    ****             TIM4->CNT = speed;
 1234              		.loc 1 632 0
 1235 00c6 05A8     		add	r0, sp, #20
 1236 00c8 0021     		movs	r1, #0
 1237 00ca FFF7FEFF 		bl	print
 1238              	.LVL157:
 633:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 1239              		.loc 1 633 0
 1240 00ce 4FF49672 		mov	r2, #300
 1241 00d2 424B     		ldr	r3, .L83+12
 1242 00d4 5A62     		str	r2, [r3, #36]
 634:Src/main.c    ****             {
 1243              		.loc 1 634 0
 1244 00d6 19E0     		b	.L77
 1245              	.LVL158:
 1246              	.L80:
 636:Src/main.c    ****                 sprintf(msg, "%d", speed);
 1247              		.loc 1 636 0
 1248 00d8 404B     		ldr	r3, .L83+12
 1249 00da 5C6A     		ldr	r4, [r3, #36]
 1250              	.LVL159:
 637:Src/main.c    ****                 print(msg, 0);
 1251              		.loc 1 637 0
 1252 00dc 05A8     		add	r0, sp, #20
 1253 00de 4149     		ldr	r1, .L83+20
 1254 00e0 2246     		mov	r2, r4
 1255 00e2 FFF7FEFF 		bl	sprintf
 1256              	.LVL160:
 638:Src/main.c    ****                 if (pid_select == 3)
 1257              		.loc 1 638 0
 1258 00e6 05A8     		add	r0, sp, #20
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 38


 1259 00e8 0021     		movs	r1, #0
 1260 00ea FFF7FEFF 		bl	print
 1261              	.LVL161:
 639:Src/main.c    ****                 {
 1262              		.loc 1 639 0
 1263 00ee 032D     		cmp	r5, #3
 1264 00f0 06D1     		bne	.L78
 641:Src/main.c    ****                     LEFT_SPEED = speed;
 1265              		.loc 1 641 0
 1266 00f2 0020     		movs	r0, #0
 1267 00f4 2146     		mov	r1, r4
 1268 00f6 FFF7FEFF 		bl	set_motor_speed
 1269              	.LVL162:
 642:Src/main.c    ****                 }
 1270              		.loc 1 642 0
 1271 00fa 3B4B     		ldr	r3, .L83+24
 1272 00fc 1C80     		strh	r4, [r3]	@ movhi
 1273 00fe 05E0     		b	.L77
 1274              	.L78:
 646:Src/main.c    ****                     RIGHT_SPEED = speed;
 1275              		.loc 1 646 0
 1276 0100 0820     		movs	r0, #8
 1277 0102 2146     		mov	r1, r4
 1278 0104 FFF7FEFF 		bl	set_motor_speed
 1279              	.LVL163:
 647:Src/main.c    ****                 }
 1280              		.loc 1 647 0
 1281 0108 384B     		ldr	r3, .L83+28
 1282 010a 1C80     		strh	r4, [r3]	@ movhi
 1283              	.LVL164:
 1284              	.L77:
 634:Src/main.c    ****             {
 1285              		.loc 1 634 0
 1286 010c 3148     		ldr	r0, .L83+4
 1287 010e 4FF40051 		mov	r1, #8192
 1288 0112 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1289              	.LVL165:
 1290 0116 0028     		cmp	r0, #0
 1291 0118 DED0     		beq	.L80
 650:Src/main.c    ****         }
 1292              		.loc 1 650 0
 1293 011a 0135     		adds	r5, r5, #1
 1294              	.LVL166:
 1295              	.L74:
 652:Src/main.c    ****         {
 1296              		.loc 1 652 0
 1297 011c 052D     		cmp	r5, #5
 1298 011e B0D1     		bne	.L81
 1299              	.LBE3:
 657:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 1300              		.loc 1 657 0
 1301 0120 2F4C     		ldr	r4, .L83+16
 1302 0122 2046     		mov	r0, r4
 1303 0124 0021     		movs	r1, #0
 1304 0126 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1305              	.LVL167:
 658:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 39


 1306              		.loc 1 658 0
 1307 012a 2046     		mov	r0, r4
 1308 012c 0821     		movs	r1, #8
 1309 012e FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1310              	.LVL168:
 659:Src/main.c    ****     print(msg, 0);
 1311              		.loc 1 659 0
 1312 0132 DDF80880 		ldr	r8, [sp, #8]
 1313 0136 05A8     		add	r0, sp, #20
 1314 0138 2D49     		ldr	r1, .L83+32
 1315 013a 4246     		mov	r2, r8
 1316 013c FFF7FEFF 		bl	sprintf
 1317              	.LVL169:
 660:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 1318              		.loc 1 660 0
 1319 0140 05A8     		add	r0, sp, #20
 1320 0142 0021     		movs	r1, #0
 1321 0144 FFF7FEFF 		bl	print
 1322              	.LVL170:
 661:Src/main.c    ****     print(msg, 1);
 1323              		.loc 1 661 0
 1324 0148 039F     		ldr	r7, [sp, #12]
 1325 014a 05A8     		add	r0, sp, #20
 1326 014c 2949     		ldr	r1, .L83+36
 1327 014e 3A46     		mov	r2, r7
 1328 0150 FFF7FEFF 		bl	sprintf
 1329              	.LVL171:
 662:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 1330              		.loc 1 662 0
 1331 0154 05A8     		add	r0, sp, #20
 1332 0156 0121     		movs	r1, #1
 1333 0158 FFF7FEFF 		bl	print
 1334              	.LVL172:
 663:Src/main.c    ****     print(msg, 2);
 1335              		.loc 1 663 0
 1336 015c 049D     		ldr	r5, [sp, #16]
 1337              	.LVL173:
 1338 015e 05A8     		add	r0, sp, #20
 1339 0160 2549     		ldr	r1, .L83+40
 1340 0162 2A46     		mov	r2, r5
 1341 0164 FFF7FEFF 		bl	sprintf
 1342              	.LVL174:
 664:Src/main.c    ****     sprintf(msg, "L %u", LEFT_SPEED);
 1343              		.loc 1 664 0
 1344 0168 05A8     		add	r0, sp, #20
 1345 016a 0221     		movs	r1, #2
 1346 016c FFF7FEFF 		bl	print
 1347              	.LVL175:
 665:Src/main.c    ****     print(msg, 3);
 1348              		.loc 1 665 0
 1349 0170 05A8     		add	r0, sp, #20
 1350 0172 2249     		ldr	r1, .L83+44
 1351 0174 1C4B     		ldr	r3, .L83+24
 1352 0176 1A88     		ldrh	r2, [r3]
 1353 0178 FFF7FEFF 		bl	sprintf
 1354              	.LVL176:
 666:Src/main.c    ****     sprintf(msg, "R %u", RIGHT_SPEED);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 40


 1355              		.loc 1 666 0
 1356 017c 05A8     		add	r0, sp, #20
 1357 017e 0321     		movs	r1, #3
 1358 0180 FFF7FEFF 		bl	print
 1359              	.LVL177:
 667:Src/main.c    ****     print(msg, 4);
 1360              		.loc 1 667 0
 1361 0184 05A8     		add	r0, sp, #20
 1362 0186 1E49     		ldr	r1, .L83+48
 1363 0188 184B     		ldr	r3, .L83+28
 1364 018a 1A88     		ldrh	r2, [r3]
 1365 018c FFF7FEFF 		bl	sprintf
 1366              	.LVL178:
 668:Src/main.c    ****     HAL_Delay(1000);
 1367              		.loc 1 668 0
 1368 0190 05A8     		add	r0, sp, #20
 1369 0192 0421     		movs	r1, #4
 1370 0194 FFF7FEFF 		bl	print
 1371              	.LVL179:
 669:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1372              		.loc 1 669 0
 1373 0198 4FF47A70 		mov	r0, #1000
 1374 019c FFF7FEFF 		bl	HAL_Delay
 1375              	.LVL180:
 670:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1376              		.loc 1 670 0
 1377 01a0 2046     		mov	r0, r4
 1378 01a2 0021     		movs	r1, #0
 1379 01a4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1380              	.LVL181:
 671:Src/main.c    ****     return pid_Init(values[0], values[1], values[2], 5, 100);
 1381              		.loc 1 671 0
 1382 01a8 2046     		mov	r0, r4
 1383 01aa 0821     		movs	r1, #8
 1384 01ac FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1385              	.LVL182:
 672:Src/main.c    **** }
 1386              		.loc 1 672 0
 1387 01b0 0523     		movs	r3, #5
 1388 01b2 0093     		str	r3, [sp]
 1389 01b4 6423     		movs	r3, #100
 1390 01b6 0193     		str	r3, [sp, #4]
 1391 01b8 3046     		mov	r0, r6
 1392 01ba 1FFA88F1 		uxth	r1, r8
 1393 01be BAB2     		uxth	r2, r7
 1394 01c0 ABB2     		uxth	r3, r5
 1395 01c2 FFF7FEFF 		bl	pid_Init
 1396              	.LVL183:
 673:Src/main.c    **** 
 1397              		.loc 1 673 0
 1398 01c6 3046     		mov	r0, r6
 1399 01c8 0AB0     		add	sp, sp, #40
 1400              	.LCFI21:
 1401              		.cfi_def_cfa_offset 24
 1402              		@ sp needed
 1403 01ca BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1404              	.LVL184:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 41


 1405              	.L84:
 1406 01ce 00BF     		.align	2
 1407              	.L83:
 1408 01d0 5C000000 		.word	.LC8
 1409 01d4 00080240 		.word	1073874944
 1410 01d8 68000000 		.word	.LC9
 1411 01dc 00080040 		.word	1073743872
 1412 01e0 00000000 		.word	htim1
 1413 01e4 6C000000 		.word	.LC10
 1414 01e8 00000000 		.word	.LANCHOR0
 1415 01ec 00000000 		.word	.LANCHOR1
 1416 01f0 70000000 		.word	.LC11
 1417 01f4 78000000 		.word	.LC12
 1418 01f8 80000000 		.word	.LC13
 1419 01fc 88000000 		.word	.LC14
 1420 0200 90000000 		.word	.LC15
 1421              		.cfi_endproc
 1422              	.LFE133:
 1424              		.section	.text.do_pid,"ax",%progbits
 1425              		.align	2
 1426              		.global	do_pid
 1427              		.thumb
 1428              		.thumb_func
 1430              	do_pid:
 1431              	.LFB134:
 676:Src/main.c    ****     /* Read sensors */
 1432              		.loc 1 676 0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 24
 1435              		@ frame_needed = 0, uses_anonymous_args = 0
 1436              	.LVL185:
 1437 0000 70B5     		push	{r4, r5, r6, lr}
 1438              	.LCFI22:
 1439              		.cfi_def_cfa_offset 16
 1440              		.cfi_offset 4, -16
 1441              		.cfi_offset 5, -12
 1442              		.cfi_offset 6, -8
 1443              		.cfi_offset 14, -4
 1444 0002 86B0     		sub	sp, sp, #24
 1445              	.LCFI23:
 1446              		.cfi_def_cfa_offset 40
 1447 0004 0646     		mov	r6, r0
 678:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 1448              		.loc 1 678 0
 1449 0006 2D4D     		ldr	r5, .L94
 1450 0008 2846     		mov	r0, r5
 1451              	.LVL186:
 1452 000a 4FF48041 		mov	r1, #16384
 1453 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1454              	.LVL187:
 1455 0012 B0FA80F4 		clz	r4, r0
 1456 0016 6409     		lsrs	r4, r4, #5
 1457              	.LVL188:
 679:Src/main.c    **** 
 1458              		.loc 1 679 0
 1459 0018 2846     		mov	r0, r5
 1460 001a 4FF40041 		mov	r1, #32768
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 42


 1461 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1462              	.LVL189:
 1463 0022 B0FA80F0 		clz	r0, r0
 1464 0026 4009     		lsrs	r0, r0, #5
 1465              	.LVL190:
 682:Src/main.c    ****     {
 1466              		.loc 1 682 0
 1467 0028 1CB1     		cbz	r4, .L86
 682:Src/main.c    ****     {
 1468              		.loc 1 682 0 is_stmt 0 discriminator 1
 1469 002a 10B1     		cbz	r0, .L86
 684:Src/main.c    ****     }
 1470              		.loc 1 684 0 is_stmt 1
 1471 002c 0023     		movs	r3, #0
 1472 002e 3361     		str	r3, [r6, #16]
 1473 0030 1AE0     		b	.L87
 1474              	.L86:
 686:Src/main.c    ****     {
 1475              		.loc 1 686 0
 1476 0032 1CB1     		cbz	r4, .L88
 686:Src/main.c    ****     {
 1477              		.loc 1 686 0 is_stmt 0 discriminator 1
 1478 0034 10B9     		cbnz	r0, .L88
 688:Src/main.c    ****     }
 1479              		.loc 1 688 0 is_stmt 1
 1480 0036 0123     		movs	r3, #1
 1481 0038 3361     		str	r3, [r6, #16]
 1482 003a 15E0     		b	.L87
 1483              	.L88:
 690:Src/main.c    ****     {
 1484              		.loc 1 690 0
 1485 003c 24B9     		cbnz	r4, .L89
 690:Src/main.c    ****     {
 1486              		.loc 1 690 0 is_stmt 0 discriminator 1
 1487 003e 18B1     		cbz	r0, .L89
 692:Src/main.c    ****     }
 1488              		.loc 1 692 0 is_stmt 1
 1489 0040 4FF0FF33 		mov	r3, #-1
 1490 0044 3361     		str	r3, [r6, #16]
 1491 0046 0FE0     		b	.L87
 1492              	.L89:
 694:Src/main.c    ****     {
 1493              		.loc 1 694 0
 1494 0048 3CB9     		cbnz	r4, .L90
 694:Src/main.c    ****     {
 1495              		.loc 1 694 0 is_stmt 0 discriminator 1
 1496 004a 30B9     		cbnz	r0, .L90
 694:Src/main.c    ****     {
 1497              		.loc 1 694 0 discriminator 2
 1498 004c 3369     		ldr	r3, [r6, #16]
 1499 004e 002B     		cmp	r3, #0
 1500 0050 03DA     		bge	.L90
 696:Src/main.c    ****     }
 1501              		.loc 1 696 0 is_stmt 1
 1502 0052 6FF00403 		mvn	r3, #4
 1503 0056 3361     		str	r3, [r6, #16]
 1504 0058 06E0     		b	.L87
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 43


 1505              	.L90:
 698:Src/main.c    ****     {
 1506              		.loc 1 698 0
 1507 005a 2CB9     		cbnz	r4, .L87
 698:Src/main.c    ****     {
 1508              		.loc 1 698 0 is_stmt 0 discriminator 1
 1509 005c 20B9     		cbnz	r0, .L87
 698:Src/main.c    ****     {
 1510              		.loc 1 698 0 discriminator 2
 1511 005e 3369     		ldr	r3, [r6, #16]
 1512 0060 002B     		cmp	r3, #0
 1513 0062 01DD     		ble	.L87
 700:Src/main.c    ****     }
 1514              		.loc 1 700 0 is_stmt 1
 1515 0064 0523     		movs	r3, #5
 1516 0066 3361     		str	r3, [r6, #16]
 1517              	.L87:
 704:Src/main.c    ****     char msg[20] = "";
 1518              		.loc 1 704 0
 1519 0068 3046     		mov	r0, r6
 1520              	.LVL191:
 1521 006a FFF7FEFF 		bl	pid_GetGain
 1522              	.LVL192:
 1523 006e 85B2     		uxth	r5, r0
 1524              	.LVL193:
 705:Src/main.c    ****     sprintf(msg, "%d", (int)gain);
 1525              		.loc 1 705 0
 1526 0070 0024     		movs	r4, #0
 1527              	.LVL194:
 1528 0072 0194     		str	r4, [sp, #4]
 1529 0074 0294     		str	r4, [sp, #8]
 1530 0076 0394     		str	r4, [sp, #12]
 1531 0078 0494     		str	r4, [sp, #16]
 1532 007a 0594     		str	r4, [sp, #20]
 706:Src/main.c    ****     print(msg, 0);
 1533              		.loc 1 706 0
 1534 007c 2EB2     		sxth	r6, r5
 1535              	.LVL195:
 1536 007e 01A8     		add	r0, sp, #4
 1537 0080 0F49     		ldr	r1, .L94+4
 1538 0082 3246     		mov	r2, r6
 1539 0084 FFF7FEFF 		bl	sprintf
 1540              	.LVL196:
 707:Src/main.c    ****     /* Set Motor Speeds*/
 1541              		.loc 1 707 0
 1542 0088 01A8     		add	r0, sp, #4
 1543 008a 2146     		mov	r1, r4
 1544 008c FFF7FEFF 		bl	print
 1545              	.LVL197:
 709:Src/main.c    ****     int rspeed = RIGHT_SPEED;
 1546              		.loc 1 709 0
 1547 0090 0C4B     		ldr	r3, .L94+8
 1548 0092 1988     		ldrh	r1, [r3]
 1549              	.LVL198:
 710:Src/main.c    ****     if (gain < 0)
 1550              		.loc 1 710 0
 1551 0094 0C4B     		ldr	r3, .L94+12
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 44


 1552 0096 1C88     		ldrh	r4, [r3]
 1553              	.LVL199:
 711:Src/main.c    ****     {
 1554              		.loc 1 711 0
 1555 0098 002E     		cmp	r6, #0
 1556 009a 01DA     		bge	.L91
 713:Src/main.c    ****     }
 1557              		.loc 1 713 0
 1558 009c 891B     		subs	r1, r1, r6
 1559              	.LVL200:
 1560 009e 03E0     		b	.L92
 1561              	.L91:
 715:Src/main.c    ****     {
 1562              		.loc 1 715 0
 1563 00a0 2DB2     		sxth	r5, r5
 1564 00a2 002D     		cmp	r5, #0
 1565 00a4 00DD     		ble	.L92
 717:Src/main.c    ****     }
 1566              		.loc 1 717 0
 1567 00a6 3444     		add	r4, r4, r6
 1568              	.LVL201:
 1569              	.L92:
 719:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1570              		.loc 1 719 0
 1571 00a8 0020     		movs	r0, #0
 1572 00aa FFF7FEFF 		bl	set_motor_speed
 1573              	.LVL202:
 720:Src/main.c    **** }
 1574              		.loc 1 720 0
 1575 00ae 0820     		movs	r0, #8
 1576 00b0 2146     		mov	r1, r4
 1577 00b2 FFF7FEFF 		bl	set_motor_speed
 1578              	.LVL203:
 721:Src/main.c    **** 
 1579              		.loc 1 721 0
 1580 00b6 06B0     		add	sp, sp, #24
 1581              	.LCFI24:
 1582              		.cfi_def_cfa_offset 16
 1583              		@ sp needed
 1584 00b8 70BD     		pop	{r4, r5, r6, pc}
 1585              	.LVL204:
 1586              	.L95:
 1587 00ba 00BF     		.align	2
 1588              	.L94:
 1589 00bc 00040240 		.word	1073873920
 1590 00c0 6C000000 		.word	.LC10
 1591 00c4 00000000 		.word	.LANCHOR0
 1592 00c8 00000000 		.word	.LANCHOR1
 1593              		.cfi_endproc
 1594              	.LFE134:
 1596              		.section	.text.encoder_pid,"ax",%progbits
 1597              		.align	2
 1598              		.global	encoder_pid
 1599              		.thumb
 1600              		.thumb_func
 1602              	encoder_pid:
 1603              	.LFB136:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 45


 742:Src/main.c    **** }
 743:Src/main.c    **** 
 744:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc)
 745:Src/main.c    **** {
 1604              		.loc 1 745 0
 1605              		.cfi_startproc
 1606              		@ args = 0, pretend = 0, frame = 24
 1607              		@ frame_needed = 0, uses_anonymous_args = 0
 1608              	.LVL205:
 1609 0000 70B5     		push	{r4, r5, r6, lr}
 1610              	.LCFI25:
 1611              		.cfi_def_cfa_offset 16
 1612              		.cfi_offset 4, -16
 1613              		.cfi_offset 5, -12
 1614              		.cfi_offset 6, -8
 1615              		.cfi_offset 14, -4
 1616 0002 2DED048B 		fstmfdd	sp!, {d8, d9}
 1617              	.LCFI26:
 1618              		.cfi_def_cfa_offset 32
 1619              		.cfi_offset 80, -32
 1620              		.cfi_offset 81, -28
 1621              		.cfi_offset 82, -24
 1622              		.cfi_offset 83, -20
 1623 0006 86B0     		sub	sp, sp, #24
 1624              	.LCFI27:
 1625              		.cfi_def_cfa_offset 56
 1626 0008 0546     		mov	r5, r0
 1627 000a 1446     		mov	r4, r2
 1628 000c 1E46     		mov	r6, r3
 746:Src/main.c    ****     /* Get error */
 747:Src/main.c    ****     float l_enc = update_encoder(left_enc);
 1629              		.loc 1 747 0
 1630 000e 0846     		mov	r0, r1
 1631              	.LVL206:
 1632 0010 FFF7FEFF 		bl	update_encoder
 1633              	.LVL207:
 1634 0014 F0EE408A 		fcpys	s17, s0
 1635              	.LVL208:
 748:Src/main.c    ****     float r_enc = update_encoder(right_enc);
 1636              		.loc 1 748 0
 1637 0018 3046     		mov	r0, r6
 1638 001a FFF7FEFF 		bl	update_encoder
 1639              	.LVL209:
 1640 001e B0EE408A 		fcpys	s16, s0
 1641              	.LVL210:
 749:Src/main.c    ****     left_pid->err = ENCODER_GOAL - l_enc;
 1642              		.loc 1 749 0
 1643 0022 F0EE007A 		fconsts	s15, #0
 1644 0026 37EEE87A 		fsubs	s14, s15, s17
 1645 002a BDEEC77A 		ftosizs	s14, s14
 1646 002e 85ED047A 		fsts	s14, [r5, #16]	@ int
 750:Src/main.c    ****     right_pid->err = ENCODER_GOAL - r_enc;
 1647              		.loc 1 750 0
 1648 0032 77EEC07A 		fsubs	s15, s15, s0
 1649 0036 FDEEE77A 		ftosizs	s15, s15
 1650 003a C4ED047A 		fsts	s15, [r4, #16]	@ int
 751:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 46


 752:Src/main.c    ****     /* Get gain */
 753:Src/main.c    ****     int32_t left_gain = pid_GetGain(left_pid);
 1651              		.loc 1 753 0
 1652 003e 2846     		mov	r0, r5
 1653 0040 FFF7FEFF 		bl	pid_GetGain
 1654              	.LVL211:
 1655 0044 0646     		mov	r6, r0
 1656              	.LVL212:
 754:Src/main.c    ****     int32_t right_gain = pid_GetGain(right_pid);
 1657              		.loc 1 754 0
 1658 0046 2046     		mov	r0, r4
 1659              	.LVL213:
 1660 0048 FFF7FEFF 		bl	pid_GetGain
 1661              	.LVL214:
 1662 004c 0546     		mov	r5, r0
 1663              	.LVL215:
 755:Src/main.c    **** 
 756:Src/main.c    ****     int l_predec = (int)(l_enc / 1);
 1664              		.loc 1 756 0
 1665 004e FDEEE87A 		ftosizs	s15, s17
 1666              	.LVL216:
 757:Src/main.c    ****     int l_postdec = (int)((l_enc - l_predec) * 1000);
 1667              		.loc 1 757 0
 1668 0052 B8EEE77A 		fsitos	s14, s15
 1669 0056 78EEC78A 		fsubs	s17, s17, s14
 1670              	.LVL217:
 1671 005a 9FED297A 		flds	s14, .L98
 1672 005e 68EE878A 		fmuls	s17, s17, s14
 1673              	.LVL218:
 758:Src/main.c    ****     int r_predec = (int)(r_enc / 1);
 1674              		.loc 1 758 0
 1675 0062 BDEEC89A 		ftosizs	s18, s16
 1676              	.LVL219:
 759:Src/main.c    ****     int r_postdec = (int)((r_enc - r_predec) * 1000);
 1677              		.loc 1 759 0
 1678 0066 F8EEC96A 		fsitos	s13, s18
 1679 006a 38EE668A 		fsubs	s16, s16, s13
 1680              	.LVL220:
 1681 006e 28EE078A 		fmuls	s16, s16, s14
 1682 0072 BDEEC88A 		ftosizs	s16, s16
 1683              	.LVL221:
 760:Src/main.c    ****     char msg[18] = "";
 1684              		.loc 1 760 0
 1685 0076 0024     		movs	r4, #0
 1686              	.LVL222:
 1687 0078 0194     		str	r4, [sp, #4]
 1688 007a 0294     		str	r4, [sp, #8]
 1689 007c 0394     		str	r4, [sp, #12]
 1690 007e 0494     		str	r4, [sp, #16]
 1691 0080 ADF81440 		strh	r4, [sp, #20]	@ movhi
 761:Src/main.c    ****     sprintf(msg, "LG: %d.%d", l_predec, l_postdec);
 1692              		.loc 1 761 0
 1693 0084 01A8     		add	r0, sp, #4
 1694              	.LVL223:
 1695 0086 1F49     		ldr	r1, .L98+4
 1696 0088 17EE902A 		fmrs	r2, s15	@ int
 1697 008c FDEEE87A 		ftosizs	s15, s17
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 47


 1698              	.LVL224:
 1699 0090 17EE903A 		fmrs	r3, s15	@ int
 1700 0094 FFF7FEFF 		bl	sprintf
 1701              	.LVL225:
 762:Src/main.c    ****     print(msg, 0);
 1702              		.loc 1 762 0
 1703 0098 01A8     		add	r0, sp, #4
 1704 009a 2146     		mov	r1, r4
 1705 009c FFF7FEFF 		bl	print
 1706              	.LVL226:
 763:Src/main.c    ****     sprintf(msg, "RG: %d.%d", r_predec, r_postdec);
 1707              		.loc 1 763 0
 1708 00a0 01A8     		add	r0, sp, #4
 1709 00a2 1949     		ldr	r1, .L98+8
 1710 00a4 19EE102A 		fmrs	r2, s18	@ int
 1711 00a8 18EE103A 		fmrs	r3, s16	@ int
 1712 00ac FFF7FEFF 		bl	sprintf
 1713              	.LVL227:
 764:Src/main.c    ****     print(msg, 1);
 1714              		.loc 1 764 0
 1715 00b0 01A8     		add	r0, sp, #4
 1716 00b2 0121     		movs	r1, #1
 1717 00b4 FFF7FEFF 		bl	print
 1718              	.LVL228:
 765:Src/main.c    **** 
 766:Src/main.c    ****     /* Set Motor Speeds*/
 767:Src/main.c    ****     int lspeed = LEFT_SPEED + left_gain;
 1719              		.loc 1 767 0
 1720 00b8 144B     		ldr	r3, .L98+12
 1721 00ba 1B88     		ldrh	r3, [r3]
 1722 00bc 1E44     		add	r6, r6, r3
 1723              	.LVL229:
 768:Src/main.c    ****     int rspeed = RIGHT_SPEED + right_gain;
 1724              		.loc 1 768 0
 1725 00be 144B     		ldr	r3, .L98+16
 1726 00c0 1B88     		ldrh	r3, [r3]
 1727 00c2 1D44     		add	r5, r5, r3
 1728              	.LVL230:
 769:Src/main.c    **** 
 770:Src/main.c    ****     sprintf(msg, "LS: %d", (int)lspeed);
 1729              		.loc 1 770 0
 1730 00c4 01A8     		add	r0, sp, #4
 1731 00c6 1349     		ldr	r1, .L98+20
 1732 00c8 3246     		mov	r2, r6
 1733 00ca FFF7FEFF 		bl	sprintf
 1734              	.LVL231:
 771:Src/main.c    ****     print(msg, 3);
 1735              		.loc 1 771 0
 1736 00ce 01A8     		add	r0, sp, #4
 1737 00d0 0321     		movs	r1, #3
 1738 00d2 FFF7FEFF 		bl	print
 1739              	.LVL232:
 772:Src/main.c    ****     sprintf(msg, "RS: %d", (int)rspeed);
 1740              		.loc 1 772 0
 1741 00d6 01A8     		add	r0, sp, #4
 1742 00d8 0F49     		ldr	r1, .L98+24
 1743 00da 2A46     		mov	r2, r5
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 48


 1744 00dc FFF7FEFF 		bl	sprintf
 1745              	.LVL233:
 773:Src/main.c    ****     print(msg, 4);
 1746              		.loc 1 773 0
 1747 00e0 01A8     		add	r0, sp, #4
 1748 00e2 0421     		movs	r1, #4
 1749 00e4 FFF7FEFF 		bl	print
 1750              	.LVL234:
 774:Src/main.c    ****     // set_motor_speed
 775:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 1751              		.loc 1 775 0
 1752 00e8 2046     		mov	r0, r4
 1753 00ea 3146     		mov	r1, r6
 1754 00ec FFF7FEFF 		bl	set_motor_speed
 1755              	.LVL235:
 776:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1756              		.loc 1 776 0
 1757 00f0 0820     		movs	r0, #8
 1758 00f2 2946     		mov	r1, r5
 1759 00f4 FFF7FEFF 		bl	set_motor_speed
 1760              	.LVL236:
 777:Src/main.c    **** }
 1761              		.loc 1 777 0
 1762 00f8 06B0     		add	sp, sp, #24
 1763              	.LCFI28:
 1764              		.cfi_def_cfa_offset 32
 1765              		@ sp needed
 1766 00fa BDEC048B 		fldmfdd	sp!, {d8-d9}
 1767              	.LCFI29:
 1768              		.cfi_restore 82
 1769              		.cfi_restore 83
 1770              		.cfi_restore 80
 1771              		.cfi_restore 81
 1772              		.cfi_def_cfa_offset 16
 1773              	.LVL237:
 1774 00fe 70BD     		pop	{r4, r5, r6, pc}
 1775              	.LVL238:
 1776              	.L99:
 1777              		.align	2
 1778              	.L98:
 1779 0100 00007A44 		.word	1148846080
 1780 0104 98000000 		.word	.LC16
 1781 0108 A4000000 		.word	.LC17
 1782 010c 00000000 		.word	.LANCHOR0
 1783 0110 00000000 		.word	.LANCHOR1
 1784 0114 B0000000 		.word	.LC18
 1785 0118 B8000000 		.word	.LC19
 1786              		.cfi_endproc
 1787              	.LFE136:
 1789              		.section	.text._Error_Handler,"ax",%progbits
 1790              		.align	2
 1791              		.global	_Error_Handler
 1792              		.thumb
 1793              		.thumb_func
 1795              	_Error_Handler:
 1796              	.LFB137:
 778:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 49


 779:Src/main.c    **** /* USER CODE END 4 */
 780:Src/main.c    **** 
 781:Src/main.c    **** /**
 782:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 783:Src/main.c    ****   * @param  file: The file name as string.
 784:Src/main.c    ****   * @param  line: The line in file as a number.
 785:Src/main.c    ****   * @retval None
 786:Src/main.c    ****   */
 787:Src/main.c    **** void _Error_Handler(char *file, int line)
 788:Src/main.c    **** {
 1797              		.loc 1 788 0
 1798              		.cfi_startproc
 1799              		@ Volatile: function does not return.
 1800              		@ args = 0, pretend = 0, frame = 0
 1801              		@ frame_needed = 0, uses_anonymous_args = 0
 1802              		@ link register save eliminated.
 1803              	.LVL239:
 1804              	.L101:
 789:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 790:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 791:Src/main.c    ****     while (1)
 792:Src/main.c    ****     {
 793:Src/main.c    ****     }
 1805              		.loc 1 793 0 discriminator 1
 1806 0000 FEE7     		b	.L101
 1807              		.cfi_endproc
 1808              	.LFE137:
 1810 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1811              		.align	2
 1812              		.global	SystemClock_Config
 1813              		.thumb
 1814              		.thumb_func
 1816              	SystemClock_Config:
 1817              	.LFB125:
 316:Src/main.c    **** 
 1818              		.loc 1 316 0
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 80
 1821              		@ frame_needed = 0, uses_anonymous_args = 0
 1822 0000 00B5     		push	{lr}
 1823              	.LCFI30:
 1824              		.cfi_def_cfa_offset 4
 1825              		.cfi_offset 14, -4
 1826 0002 95B0     		sub	sp, sp, #84
 1827              	.LCFI31:
 1828              		.cfi_def_cfa_offset 88
 1829              	.LBB4:
 323:Src/main.c    **** 
 1830              		.loc 1 323 0
 1831 0004 0022     		movs	r2, #0
 1832 0006 0192     		str	r2, [sp, #4]
 1833 0008 2A4B     		ldr	r3, .L106
 1834 000a 196C     		ldr	r1, [r3, #64]
 1835 000c 41F08051 		orr	r1, r1, #268435456
 1836 0010 1964     		str	r1, [r3, #64]
 1837 0012 1B6C     		ldr	r3, [r3, #64]
 1838 0014 03F08053 		and	r3, r3, #268435456
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 50


 1839 0018 0193     		str	r3, [sp, #4]
 1840 001a 019B     		ldr	r3, [sp, #4]
 1841              	.LBE4:
 1842              	.LBB5:
 325:Src/main.c    **** 
 1843              		.loc 1 325 0
 1844 001c 0292     		str	r2, [sp, #8]
 1845 001e 2649     		ldr	r1, .L106+4
 1846 0020 0B68     		ldr	r3, [r1]
 1847 0022 23F44043 		bic	r3, r3, #49152
 1848 0026 43F40043 		orr	r3, r3, #32768
 1849 002a 0B60     		str	r3, [r1]
 1850 002c 0B68     		ldr	r3, [r1]
 1851 002e 03F44043 		and	r3, r3, #49152
 1852 0032 0293     		str	r3, [sp, #8]
 1853 0034 029B     		ldr	r3, [sp, #8]
 1854              	.LBE5:
 329:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1855              		.loc 1 329 0
 1856 0036 0223     		movs	r3, #2
 1857 0038 0893     		str	r3, [sp, #32]
 330:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 1858              		.loc 1 330 0
 1859 003a 0121     		movs	r1, #1
 1860 003c 0B91     		str	r1, [sp, #44]
 331:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1861              		.loc 1 331 0
 1862 003e 1021     		movs	r1, #16
 1863 0040 0C91     		str	r1, [sp, #48]
 332:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1864              		.loc 1 332 0
 1865 0042 0E93     		str	r3, [sp, #56]
 333:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 1866              		.loc 1 333 0
 1867 0044 0F92     		str	r2, [sp, #60]
 334:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 1868              		.loc 1 334 0
 1869 0046 0822     		movs	r2, #8
 1870 0048 1092     		str	r2, [sp, #64]
 335:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1871              		.loc 1 335 0
 1872 004a 4822     		movs	r2, #72
 1873 004c 1192     		str	r2, [sp, #68]
 336:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 1874              		.loc 1 336 0
 1875 004e 1293     		str	r3, [sp, #72]
 337:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1876              		.loc 1 337 0
 1877 0050 0423     		movs	r3, #4
 1878 0052 1393     		str	r3, [sp, #76]
 338:Src/main.c    ****     {
 1879              		.loc 1 338 0
 1880 0054 08A8     		add	r0, sp, #32
 1881 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1882              	.LVL240:
 1883 005a 20B1     		cbz	r0, .L103
 340:Src/main.c    ****     }
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 51


 1884              		.loc 1 340 0
 1885 005c 1748     		ldr	r0, .L106+8
 1886 005e 4FF4AA71 		mov	r1, #340
 1887 0062 FFF7FEFF 		bl	_Error_Handler
 1888              	.LVL241:
 1889              	.L103:
 345:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1890              		.loc 1 345 0
 1891 0066 0F23     		movs	r3, #15
 1892 0068 0393     		str	r3, [sp, #12]
 346:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1893              		.loc 1 346 0
 1894 006a 0221     		movs	r1, #2
 1895 006c 0491     		str	r1, [sp, #16]
 347:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1896              		.loc 1 347 0
 1897 006e 0023     		movs	r3, #0
 1898 0070 0593     		str	r3, [sp, #20]
 348:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1899              		.loc 1 348 0
 1900 0072 4FF48052 		mov	r2, #4096
 1901 0076 0692     		str	r2, [sp, #24]
 349:Src/main.c    **** 
 1902              		.loc 1 349 0
 1903 0078 0793     		str	r3, [sp, #28]
 351:Src/main.c    ****     {
 1904              		.loc 1 351 0
 1905 007a 03A8     		add	r0, sp, #12
 1906 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1907              	.LVL242:
 1908 0080 20B1     		cbz	r0, .L104
 353:Src/main.c    ****     }
 1909              		.loc 1 353 0
 1910 0082 0E48     		ldr	r0, .L106+8
 1911 0084 40F26111 		movw	r1, #353
 1912 0088 FFF7FEFF 		bl	_Error_Handler
 1913              	.LVL243:
 1914              	.L104:
 358:Src/main.c    **** 
 1915              		.loc 1 358 0
 1916 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1917              	.LVL244:
 1918 0090 0B4B     		ldr	r3, .L106+12
 1919 0092 A3FB0030 		umull	r3, r0, r3, r0
 1920 0096 8009     		lsrs	r0, r0, #6
 1921 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1922              	.LVL245:
 362:Src/main.c    **** 
 1923              		.loc 1 362 0
 1924 009c 0420     		movs	r0, #4
 1925 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1926              	.LVL246:
 365:Src/main.c    **** }
 1927              		.loc 1 365 0
 1928 00a2 4FF0FF30 		mov	r0, #-1
 1929 00a6 0021     		movs	r1, #0
 1930 00a8 0A46     		mov	r2, r1
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 52


 1931 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1932              	.LVL247:
 366:Src/main.c    **** 
 1933              		.loc 1 366 0
 1934 00ae 15B0     		add	sp, sp, #84
 1935              	.LCFI32:
 1936              		.cfi_def_cfa_offset 4
 1937              		@ sp needed
 1938 00b0 5DF804FB 		ldr	pc, [sp], #4
 1939              	.L107:
 1940              		.align	2
 1941              	.L106:
 1942 00b4 00380240 		.word	1073887232
 1943 00b8 00700040 		.word	1073770496
 1944 00bc C0000000 		.word	.LC20
 1945 00c0 D34D6210 		.word	274877907
 1946              		.cfi_endproc
 1947              	.LFE125:
 1949              		.section	.text.main,"ax",%progbits
 1950              		.align	2
 1951              		.global	main
 1952              		.thumb
 1953              		.thumb_func
 1955              	main:
 1956              	.LFB124:
 109:Src/main.c    ****     /* USER CODE BEGIN 1 */
 1957              		.loc 1 109 0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 32
 1960              		@ frame_needed = 0, uses_anonymous_args = 0
 1961 0000 30B5     		push	{r4, r5, lr}
 1962              	.LCFI33:
 1963              		.cfi_def_cfa_offset 12
 1964              		.cfi_offset 4, -12
 1965              		.cfi_offset 5, -8
 1966              		.cfi_offset 14, -4
 1967 0002 89B0     		sub	sp, sp, #36
 1968              	.LCFI34:
 1969              		.cfi_def_cfa_offset 48
 117:Src/main.c    **** 
 1970              		.loc 1 117 0
 1971 0004 FFF7FEFF 		bl	HAL_Init
 1972              	.LVL248:
 124:Src/main.c    **** 
 1973              		.loc 1 124 0
 1974 0008 FFF7FEFF 		bl	SystemClock_Config
 1975              	.LVL249:
 131:Src/main.c    ****     MX_DMA_Init();
 1976              		.loc 1 131 0
 1977 000c FFF7FEFF 		bl	MX_GPIO_Init
 1978              	.LVL250:
 132:Src/main.c    ****     MX_TIM3_Init();
 1979              		.loc 1 132 0
 1980 0010 FFF7FEFF 		bl	MX_DMA_Init
 1981              	.LVL251:
 133:Src/main.c    ****     MX_TIM1_Init();
 1982              		.loc 1 133 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 53


 1983 0014 FFF7FEFF 		bl	MX_TIM3_Init
 1984              	.LVL252:
 134:Src/main.c    ****     MX_TIM2_Init();
 1985              		.loc 1 134 0
 1986 0018 FFF7FEFF 		bl	MX_TIM1_Init
 1987              	.LVL253:
 135:Src/main.c    ****     MX_USART6_UART_Init();
 1988              		.loc 1 135 0
 1989 001c FFF7FEFF 		bl	MX_TIM2_Init
 1990              	.LVL254:
 136:Src/main.c    ****     MX_ADC1_Init();
 1991              		.loc 1 136 0
 1992 0020 FFF7FEFF 		bl	MX_USART6_UART_Init
 1993              	.LVL255:
 137:Src/main.c    ****     MX_I2C1_Init();
 1994              		.loc 1 137 0
 1995 0024 FFF7FEFF 		bl	MX_ADC1_Init
 1996              	.LVL256:
 138:Src/main.c    ****     MX_TIM4_Init();
 1997              		.loc 1 138 0
 1998 0028 FFF7FEFF 		bl	MX_I2C1_Init
 1999              	.LVL257:
 139:Src/main.c    ****     MX_TIM9_Init();
 2000              		.loc 1 139 0
 2001 002c FFF7FEFF 		bl	MX_TIM4_Init
 2002              	.LVL258:
 140:Src/main.c    ****     MX_TIM5_Init();
 2003              		.loc 1 140 0
 2004 0030 FFF7FEFF 		bl	MX_TIM9_Init
 2005              	.LVL259:
 141:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2006              		.loc 1 141 0
 2007 0034 FFF7FEFF 		bl	MX_TIM5_Init
 2008              	.LVL260:
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 2009              		.loc 1 158 0
 2010 0038 2D48     		ldr	r0, .L111
 2011 003a 1821     		movs	r1, #24
 2012 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2013              	.LVL261:
 159:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 2014              		.loc 1 159 0
 2015 0040 2C48     		ldr	r0, .L111+4
 2016 0042 1821     		movs	r1, #24
 2017 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2018              	.LVL262:
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 2019              		.loc 1 160 0
 2020 0048 2B4C     		ldr	r4, .L111+8
 2021 004a 2046     		mov	r0, r4
 2022 004c 0021     		movs	r1, #0
 2023 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2024              	.LVL263:
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 2025              		.loc 1 161 0
 2026 0052 2046     		mov	r0, r4
 2027 0054 0421     		movs	r1, #4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 54


 2028 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2029              	.LVL264:
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 2030              		.loc 1 162 0
 2031 005a 2046     		mov	r0, r4
 2032 005c 0821     		movs	r1, #8
 2033 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2034              	.LVL265:
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2035              		.loc 1 163 0
 2036 0062 2046     		mov	r0, r4
 2037 0064 0C21     		movs	r1, #12
 2038 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2039              	.LVL266:
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 2040              		.loc 1 164 0
 2041 006a 244C     		ldr	r4, .L111+12
 2042 006c 2046     		mov	r0, r4
 2043 006e 0021     		movs	r1, #0
 2044 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2045              	.LVL267:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 2046              		.loc 1 165 0
 2047 0074 2046     		mov	r0, r4
 2048 0076 0421     		movs	r1, #4
 2049 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2050              	.LVL268:
 166:Src/main.c    **** 
 2051              		.loc 1 166 0
 2052 007c 2046     		mov	r0, r4
 2053 007e 0821     		movs	r1, #8
 2054 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2055              	.LVL269:
 169:Src/main.c    ****     print("Starting", 0);
 2056              		.loc 1 169 0
 2057 0084 FFF7FEFF 		bl	ssd1306_Init
 2058              	.LVL270:
 170:Src/main.c    ****     claw_init(&htim3);
 2059              		.loc 1 170 0
 2060 0088 1D48     		ldr	r0, .L111+16
 2061 008a 0021     		movs	r1, #0
 2062 008c FFF7FEFF 		bl	print
 2063              	.LVL271:
 171:Src/main.c    ****     ///basket_init(&htim3);
 2064              		.loc 1 171 0
 2065 0090 2046     		mov	r0, r4
 2066 0092 FFF7FEFF 		bl	claw_init
 2067              	.LVL272:
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 2068              		.loc 1 188 0
 2069 0096 0620     		movs	r0, #6
 2070 0098 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2071              	.LVL273:
 189:Src/main.c    ****     // HAL_NVIC_EnableIRQ(EXTI1_IRQn); IR INT
 2072              		.loc 1 189 0
 2073 009c 0A20     		movs	r0, #10
 2074 009e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 55


 2075              	.LVL274:
 191:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 2076              		.loc 1 191 0
 2077 00a2 4FF4FA70 		mov	r0, #500
 2078 00a6 FFF7FEFF 		bl	HAL_Delay
 2079              	.LVL275:
 192:Src/main.c    ****     /* USER CODE END 2 */
 2080              		.loc 1 192 0
 2081 00aa 1648     		ldr	r0, .L111+20
 2082 00ac 1649     		ldr	r1, .L111+24
 2083 00ae 0122     		movs	r2, #1
 2084 00b0 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2085              	.LVL276:
 2086              	.L109:
 2087              	.LBB6:
 209:Src/main.c    ****         HAL_UART_Receive(&huart6, (uint8_t *)aRxBuffer, 15, 100);
 2088              		.loc 1 209 0 discriminator 1
 2089 00b4 154B     		ldr	r3, .L111+28
 2090 00b6 01AD     		add	r5, sp, #4
 2091 00b8 93E80700 		ldmia	r3, {r0, r1, r2}
 2092 00bc 85E80700 		stmia	r5, {r0, r1, r2}
 210:Src/main.c    ****         char msg[15]="";
 2093              		.loc 1 210 0 discriminator 1
 2094 00c0 1348     		ldr	r0, .L111+32
 2095 00c2 2946     		mov	r1, r5
 2096 00c4 0F22     		movs	r2, #15
 2097 00c6 6423     		movs	r3, #100
 2098 00c8 FFF7FEFF 		bl	HAL_UART_Receive
 2099              	.LVL277:
 211:Src/main.c    ****         sprintf(msg, "%d", aRxBuffer);
 2100              		.loc 1 211 0 discriminator 1
 2101 00cc 0024     		movs	r4, #0
 2102 00ce 0494     		str	r4, [sp, #16]
 2103 00d0 0594     		str	r4, [sp, #20]
 2104 00d2 0694     		str	r4, [sp, #24]
 2105 00d4 ADF81C40 		strh	r4, [sp, #28]	@ movhi
 2106 00d8 8DF81E40 		strb	r4, [sp, #30]
 212:Src/main.c    ****         print(msg, 0);
 2107              		.loc 1 212 0 discriminator 1
 2108 00dc 04A8     		add	r0, sp, #16
 2109 00de 0D49     		ldr	r1, .L111+36
 2110 00e0 2A46     		mov	r2, r5
 2111 00e2 FFF7FEFF 		bl	sprintf
 2112              	.LVL278:
 213:Src/main.c    **** 
 2113              		.loc 1 213 0 discriminator 1
 2114 00e6 04A8     		add	r0, sp, #16
 2115 00e8 2146     		mov	r1, r4
 2116 00ea FFF7FEFF 		bl	print
 2117              	.LVL279:
 2118              	.LBE6:
 307:Src/main.c    ****     /* USER CODE END 3 */
 2119              		.loc 1 307 0 discriminator 1
 2120 00ee E1E7     		b	.L109
 2121              	.L112:
 2122              		.align	2
 2123              	.L111:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 56


 2124 00f0 00000000 		.word	htim4
 2125 00f4 00000000 		.word	htim5
 2126 00f8 00000000 		.word	htim1
 2127 00fc 00000000 		.word	htim3
 2128 0100 5C000000 		.word	.LC8
 2129 0104 00000000 		.word	hadc1
 2130 0108 00000000 		.word	dma_buffer
 2131 010c CC000000 		.word	.LC21
 2132 0110 00000000 		.word	huart6
 2133 0114 6C000000 		.word	.LC10
 2134              		.cfi_endproc
 2135              	.LFE124:
 2137              		.comm	adc_values,4,4
 2138              		.comm	dma_buffer,4,4
 2139              		.global	RIGHT_SPEED
 2140              		.global	LEFT_SPEED
 2141              		.section	.data.RIGHT_SPEED,"aw",%progbits
 2142              		.align	1
 2143              		.set	.LANCHOR1,. + 0
 2146              	RIGHT_SPEED:
 2147 0000 5802     		.short	600
 2148              		.section	.data.LEFT_SPEED,"aw",%progbits
 2149              		.align	1
 2150              		.set	.LANCHOR0,. + 0
 2153              	LEFT_SPEED:
 2154 0000 2602     		.short	550
 2155              		.section	.rodata.str1.4,"aMS",%progbits,1
 2156              		.align	2
 2157              	.LC0:
 2158 0000 25642E25 		.ascii	"%d.%d\012\000"
 2158      640A00
 2159 0007 00       		.space	1
 2160              	.LC1:
 2161 0008 25642E25 		.ascii	"%d.%d\000"
 2161      6400
 2162 000e 0000     		.space	2
 2163              	.LC2:
 2164 0010 636E7473 		.ascii	"cnts: %d\000"
 2164      3A202564 
 2164      00
 2165 0019 000000   		.space	3
 2166              	.LC3:
 2167 001c 766C7473 		.ascii	"vlts: %d.%d\000"
 2167      3A202564 
 2167      2E256400 
 2168              	.LC4:
 2169 0028 6164635F 		.ascii	"adc_val: %d\000"
 2169      76616C3A 
 2169      20256400 
 2170              	.LC5:
 2171 0034 54494D35 		.ascii	"TIM5->CNT: %lu\000"
 2171      2D3E434E 
 2171      543A2025 
 2171      6C7500
 2172 0043 00       		.space	1
 2173              	.LC6:
 2174 0044 54494D34 		.ascii	"TIM4->CNT: %lu\000"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 57


 2174      2D3E434E 
 2174      543A2025 
 2174      6C7500
 2175 0053 00       		.space	1
 2176              	.LC7:
 2177 0054 5069206E 		.ascii	"Pi nav\000"
 2177      617600
 2178 005b 00       		.space	1
 2179              	.LC8:
 2180 005c 53746172 		.ascii	"Starting\000"
 2180      74696E67 
 2180      00
 2181 0065 000000   		.space	3
 2182              	.LC9:
 2183 0068 256C7500 		.ascii	"%lu\000"
 2184              	.LC10:
 2185 006c 256400   		.ascii	"%d\000"
 2186 006f 00       		.space	1
 2187              	.LC11:
 2188 0070 5020256C 		.ascii	"P %lu\000"
 2188      7500
 2189 0076 0000     		.space	2
 2190              	.LC12:
 2191 0078 4420256C 		.ascii	"D %lu\000"
 2191      7500
 2192 007e 0000     		.space	2
 2193              	.LC13:
 2194 0080 4920256C 		.ascii	"I %lu\000"
 2194      7500
 2195 0086 0000     		.space	2
 2196              	.LC14:
 2197 0088 4C202575 		.ascii	"L %u\000"
 2197      00
 2198 008d 000000   		.space	3
 2199              	.LC15:
 2200 0090 52202575 		.ascii	"R %u\000"
 2200      00
 2201 0095 000000   		.space	3
 2202              	.LC16:
 2203 0098 4C473A20 		.ascii	"LG: %d.%d\000"
 2203      25642E25 
 2203      6400
 2204 00a2 0000     		.space	2
 2205              	.LC17:
 2206 00a4 52473A20 		.ascii	"RG: %d.%d\000"
 2206      25642E25 
 2206      6400
 2207 00ae 0000     		.space	2
 2208              	.LC18:
 2209 00b0 4C533A20 		.ascii	"LS: %d\000"
 2209      256400
 2210 00b7 00       		.space	1
 2211              	.LC19:
 2212 00b8 52533A20 		.ascii	"RS: %d\000"
 2212      256400
 2213 00bf 00       		.space	1
 2214              	.LC20:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 58


 2215 00c0 5372632F 		.ascii	"Src/main.c\000"
 2215      6D61696E 
 2215      2E6300
 2216 00cb 00       		.space	1
 2217              	.LC21:
 2218 00cc 4E6F7420 		.ascii	"Not working\000"
 2218      776F726B 
 2218      696E6700 
 2219              		.text
 2220              	.Letext0:
 2221              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2222              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2223              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2224              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 2225              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2226              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2227              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2228              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2229              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2230              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2231              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2232              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2233              		.file 14 "Inc/fonts.h"
 2234              		.file 15 "Inc/ssd1306.h"
 2235              		.file 16 "Inc/encoder.h"
 2236              		.file 17 "Inc/pid.h"
 2237              		.file 18 "Drivers/CMSIS/Include/core_cm4.h"
 2238              		.file 19 "Inc/adc.h"
 2239              		.file 20 "Inc/tim.h"
 2240              		.file 21 "Inc/usart.h"
 2241              		.file 22 "Inc/extern_vars.h"
 2242              		.file 23 "Inc/filter.h"
 2243              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2244              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2245              		.file 26 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2246              		.file 27 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 2247              		.file 28 "Inc/gpio.h"
 2248              		.file 29 "Inc/dma.h"
 2249              		.file 30 "Inc/i2c.h"
 2250              		.file 31 "Inc/claw.h"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 59


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:44     .text.HAL_ADC_ConvCpltCallback:000000000000000c $d
                            *COM*:0000000000000004 dma_buffer
                            *COM*:0000000000000004 adc_values
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:54     .text.calculate_heading:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:59     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:90     .text.calculate_heading:0000000000000020 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:98     .text.alarm_detect:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:103    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:181    .text.alarm_detect:0000000000000078 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:190    .text.print:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:195    .text.print:0000000000000000 print
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:242    .text.print:0000000000000034 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:249    .text.frequency_comparison:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:254    .text.frequency_comparison:0000000000000000 frequency_comparison
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:455    .text.frequency_comparison:0000000000000130 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:467    .text.set_motor_speed:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:472    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:534    .text.set_motor_speed:0000000000000044 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:541    .text.turn:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:546    .text.turn:0000000000000000 turn
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:800    .text.turn:0000000000000188 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:821    .text.turn_deg:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:826    .text.turn_deg:0000000000000000 turn_deg
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:952    .text.turn_deg:00000000000000b0 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:964    .text.pi_navigation:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:969    .text.pi_navigation:0000000000000000 pi_navigation
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1078   .text.pi_navigation:00000000000000a8 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1088   .text.menu:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1093   .text.menu:0000000000000000 menu
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1408   .text.menu:00000000000001d0 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1425   .text.do_pid:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1430   .text.do_pid:0000000000000000 do_pid
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1589   .text.do_pid:00000000000000bc $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1597   .text.encoder_pid:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1602   .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1779   .text.encoder_pid:0000000000000100 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1790   .text._Error_Handler:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1795   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1811   .text.SystemClock_Config:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1816   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1942   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1950   .text.main:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:1955   .text.main:0000000000000000 main
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:2124   .text.main:00000000000000f0 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:2146   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:2153   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:2142   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:2149   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s:2156   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_ui2d
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 60


__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
HAL_NVIC_DisableIRQ
hadc1
IR_INT_STATE
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
__aeabi_d2iz
__aeabi_i2d
sprintf
strlen
HAL_UART_Transmit
huart6
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_dadd
PI_INT_STATE
HAL_GPIO_ReadPin
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
pid_Init
pid_GetGain
update_encoder
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
HAL_NVIC_EnableIRQ
HAL_UART_Receive
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJah3Fe.s 			page 61


htim4
htim5
htim3
