ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED+SPEED_DIFF;
  66:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  67:Src/main.c    **** uint32_t dma_buffer[2048];
  68:Src/main.c    **** uint32_t adc_values[2048];
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PV */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  73:Src/main.c    **** void SystemClock_Config(void);
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN PFP */
  76:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  77:Src/main.c    **** void print(char msg[], int row);
  78:Src/main.c    **** PID_t menu();
  79:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  80:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  81:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  82:Src/main.c    **** void turn();
  83:Src/main.c    **** void turn_deg(uint8_t);
  84:Src/main.c    **** void alarm_detect();
  85:Src/main.c    **** void drive_straight(PID_t *enc_pid);
  86:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis);
  87:Src/main.c    **** void square_edge(PID_t *enc_pid);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 3


  88:Src/main.c    **** void test_All();
  89:Src/main.c    **** void test_PWM_htim1();
  90:Src/main.c    **** void test_PWM_htim3();
  91:Src/main.c    **** 
  92:Src/main.c    **** /* USER CODE END PFP */
  93:Src/main.c    **** 
  94:Src/main.c    **** /* USER CODE BEGIN 0 */
  95:Src/main.c    **** /**
  96:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
  97:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
  98:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
  99:Src/main.c    ****  */
 100:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 101:Src/main.c    **** {
  29              		.loc 1 101 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 102:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 102 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF40052 		mov	r2, #8192
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB131:
 103:Src/main.c    **** }
 104:Src/main.c    **** /* USER CODE END 0 */
 105:Src/main.c    **** 
 106:Src/main.c    **** /**
 107:Src/main.c    ****   * @brief  The application entry point.
 108:Src/main.c    ****   *
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 4


 109:Src/main.c    ****   * @retval None
 110:Src/main.c    ****   */
 111:Src/main.c    **** int main(void)
 112:Src/main.c    **** {
 113:Src/main.c    ****   /* USER CODE BEGIN 1 */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* USER CODE END 1 */
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 120:Src/main.c    ****   HAL_Init();
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE BEGIN Init */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* USER CODE END Init */
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* Configure the system clock */
 127:Src/main.c    ****   SystemClock_Config();
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* USER CODE END SysInit */
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* Initialize all configured peripherals */
 134:Src/main.c    ****   MX_GPIO_Init();
 135:Src/main.c    ****   MX_DMA_Init();
 136:Src/main.c    ****   MX_TIM3_Init();
 137:Src/main.c    ****   MX_TIM1_Init();
 138:Src/main.c    ****   MX_TIM2_Init();
 139:Src/main.c    ****   MX_ADC1_Init();
 140:Src/main.c    ****   MX_TIM4_Init();
 141:Src/main.c    ****   MX_TIM9_Init();
 142:Src/main.c    ****   MX_TIM5_Init();
 143:Src/main.c    ****   MX_I2C1_Init();
 144:Src/main.c    ****   MX_USART6_UART_Init();
 145:Src/main.c    ****   /* USER CODE BEGIN 2 */
 146:Src/main.c    **** 
 147:Src/main.c    ****     /* Initialize peripherals */
 148:Src/main.c    ****     /* 
 149:Src/main.c    ****      * Claw jaw: TIM3 CH1
 150:Src/main.c    ****      * Claw arm: TIM3 CH2
 151:Src/main.c    ****      * Basket: TIM3 CH3
 152:Src/main.c    ****      * left forward: TIM1 CH1
 153:Src/main.c    ****      * left backward: TIM1 CH2
 154:Src/main.c    ****      * right forward: TIM1 CH3
 155:Src/main.c    ****      * right backward: TIM1 CH4
 156:Src/main.c    ****      * left encoder: TIM4
 157:Src/main.c    ****      * right encoderL TIM5
 158:Src/main.c    ****      * spare clocks: TIM2, TIM9
 159:Src/main.c    ****      */
 160:Src/main.c    **** 
 161:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 162:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 5


 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 170:Src/main.c    **** 
 171:Src/main.c    ****     /* Initialize other stuffs */
 172:Src/main.c    ****     ssd1306_Init();
 173:Src/main.c    ****     print("Starting\n", 0);
 174:Src/main.c    ****     claw_init(&htim3);
 175:Src/main.c    ****     basket_init(&htim3);
 176:Src/main.c    **** 
 177:Src/main.c    ****     uint8_t ewok_cnt = 0;
 178:Src/main.c    ****     PID_t enc_pid = pid_Init(1, 0, 0, 2, 1);
 179:Src/main.c    **** 
 180:Src/main.c    ****     // drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 8 * 1000);
 181:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 182:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 183:Src/main.c    **** 
 184:Src/main.c    ****     /* Initially disabled interrupts and ADC */
 185:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 186:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 187:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 188:Src/main.c    **** 
 189:Src/main.c    ****     print("ewok\n", 0);
 190:Src/main.c    ****   /* USER CODE END 2 */
 191:Src/main.c    **** 
 192:Src/main.c    ****   /* Infinite loop */
 193:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 194:Src/main.c    **** 
 195:Src/main.c    ****     while (1)
 196:Src/main.c    ****     {
 197:Src/main.c    ****         // /*
 198:Src/main.c    ****         //  * Pi Turning
 199:Src/main.c    ****         //  */
 200:Src/main.c    ****         // if (PI_INT_STATE == FLAGGED)
 201:Src/main.c    ****         // {
 202:Src/main.c    ****         //     // Stop Requesting Images
 203:Src/main.c    ****         //     print("in pi int\n", 0);
 204:Src/main.c    ****         //     // Turn to ewok
 205:Src/main.c    ****         //     turn();
 206:Src/main.c    ****         //     // Drive forward w/ PID for 2.5 s, enable claw interrupt
 207:Src/main.c    ****         //     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 208:Src/main.c    ****         //     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 209:Src/main.c    ****             HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 210:Src/main.c    ****         //     uint32_t start = HAL_GetTick();
 211:Src/main.c    **** 
 212:Src/main.c    ****             // while ((HAL_GetTick() - start) < 2500)
 213:Src/main.c    ****             // {
 214:Src/main.c    ****                 drive_straight(&enc_pid);
 215:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 216:Src/main.c    ****                 if (CLAW_INT_STATE == FLAGGED)
 217:Src/main.c    ****                 {
 218:Src/main.c    ****                     uint32_t timeee = HAL_GetTick();
 219:Src/main.c    ****                     while (HAL_GetTick() - timeee < 30)
 220:Src/main.c    ****                     {
 221:Src/main.c    ****                         HAL_Delay(5);
 222:Src/main.c    ****                         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 6


 223:Src/main.c    ****                         {
 224:Src/main.c    ****                             CLAW_INT_STATE = NOT_FLAGGED;
 225:Src/main.c    ****                         }
 226:Src/main.c    ****                     }
 227:Src/main.c    ****                     // If claw is still high, we have an ewok. Stop, grab it, continue on
 228:Src/main.c    ****                     // hardcoded procedure
 229:Src/main.c    ****                     if (CLAW_INT_STATE == FLAGGED)
 230:Src/main.c    ****                     {
 231:Src/main.c    ****                         HAL_Delay(400);
 232:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_1, 0);
 233:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_3, 0);
 234:Src/main.c    ****                         close_claw(&htim3);
 235:Src/main.c    ****                         arm_up(&htim3);
 236:Src/main.c    ****                         // TODO: delete next line, there for testing!!!
 237:Src/main.c    ****                         HAL_Delay(1000);
 238:Src/main.c    ****                         HAL_NVIC_DisableIRQ(CLAW_INT_EXTI_IRQn);
 239:Src/main.c    ****                         CLAW_INT_STATE = NOT_FLAGGED;
 240:Src/main.c    ****                         ++ewok_cnt;
 241:Src/main.c    ****                         // char msg[18] = "";
 242:Src/main.c    ****                         // sprintf(msg, "wok_cnt: %d\n", ewok_cnt);
 243:Src/main.c    ****                         // print(msg, 0);
 244:Src/main.c    ****                         /*
 245:Src/main.c    ****                          * Claw is up and closed
 246:Src/main.c    ****                          * Ewok Count incremented
 247:Src/main.c    ****                          * Motors not powered
 248:Src/main.c    ****                          * CLAW_INT_STATE not FLAGGED, interrupt disabled
 249:Src/main.c    ****                          */
 250:Src/main.c    **** 
 251:Src/main.c    ****                         // For the first ewok, turn left, arm up, square robot w/ edge,
 252:Src/main.c    ****                         // drive straight for 3 s, bring arm down
 253:Src/main.c    ****                         if (ewok_cnt == 1)
 254:Src/main.c    ****                         {
 255:Src/main.c    ****                             turn_deg(-100);
 256:Src/main.c    ****                             open_claw(&htim3);
 257:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 258:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 259:Src/main.c    ****                             square_edge(&enc_pid);
 260:Src/main.c    ****                             drive_straight_time(&enc_pid, LEFT_SPEED + 50, RIGHT_SPEED + 50, 3000);
 261:Src/main.c    ****                             arm_down(&htim3);
 262:Src/main.c    ****                         }
 263:Src/main.c    **** 
 264:Src/main.c    ****                         if (ewok_cnt == 2)
 265:Src/main.c    ****                         {
 266:Src/main.c    ****                             turn_deg(-110); //  Prolly have to change this
 267:Src/main.c    ****                             alarm_detect();
 268:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 269:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 270:Src/main.c    ****                             open_claw(&htim3);
 271:Src/main.c    ****                             timeee = HAL_GetTick();
 272:Src/main.c    ****                             while (HAL_GetTick() - timeee < 7000)
 273:Src/main.c    ****                             {
 274:Src/main.c    ****                                 if (TAPE_LEFT_STATE == FLAGGED && TAPE_RIGHT_STATE != FLAGGED)
 275:Src/main.c    ****                                 {
 276:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, 0);
 277:Src/main.c    ****                                     // Tape detects object when high
 278:Src/main.c    ****                                     while (HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) == 
 279:Src/main.c    ****                                         ;
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 7


 280:Src/main.c    ****                                     HAL_Delay(100);
 281:Src/main.c    ****                                     TAPE_LEFT_STATE = NOT_FLAGGED;
 282:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 283:Src/main.c    ****                                 }
 284:Src/main.c    ****                                 else if (TAPE_RIGHT_STATE == FLAGGED && TAPE_LEFT_STATE != FLAGGED)
 285:Src/main.c    ****                                 {
 286:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, 0);
 287:Src/main.c    ****                                     while (HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) =
 288:Src/main.c    ****                                         ;
 289:Src/main.c    ****                                     HAL_Delay(100);
 290:Src/main.c    ****                                     TAPE_RIGHT_STATE = NOT_FLAGGED;
 291:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 292:Src/main.c    ****                                 }
 293:Src/main.c    ****                             }
 294:Src/main.c    ****                             arm_down(&htim3);
 295:Src/main.c    ****                         }
 296:Src/main.c    **** 
 297:Src/main.c    ****                         if (ewok_cnt == 3)
 298:Src/main.c    ****                         {
 299:Src/main.c    ****                             turn_deg(110);
 300:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 301:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 302:Src/main.c    ****                             open_claw(&htim3);
 303:Src/main.c    ****                             drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 1500);
 304:Src/main.c    ****                             drive_straight_time(&enc_pid, 600, 600, 1500);
 305:Src/main.c    ****                             arm_down(&htim3);
 306:Src/main.c    ****                             // todo delete below
 307:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 308:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 309:Src/main.c    ****                         }
 310:Src/main.c    **** 
 311:Src/main.c    ****                         if (ewok_cnt == 4)
 312:Src/main.c    ****                         {
 313:Src/main.c    ****                             turn_deg(150);
 314:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 315:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 316:Src/main.c    ****                             open_claw(&htim3);
 317:Src/main.c    ****                             while (HAL_GetTick() - timeee < 8000)
 318:Src/main.c    ****                             {
 319:Src/main.c    ****                                 if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 320:Src/main.c    ****                                 {
 321:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, 0);
 322:Src/main.c    ****                                     // Edge detected when LOW
 323:Src/main.c    ****                                     while (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == 
 324:Src/main.c    ****                                         ;
 325:Src/main.c    ****                                     HAL_Delay(200);
 326:Src/main.c    ****                                     EDGE_LEFT_STATE = NOT_FLAGGED;
 327:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 328:Src/main.c    ****                                 }
 329:Src/main.c    ****                                 if (EDGE_RIGHT_STATE == FLAGGED)
 330:Src/main.c    ****                                 {
 331:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, 0);
 332:Src/main.c    ****                                     while (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) =
 333:Src/main.c    ****                                         ;
 334:Src/main.c    ****                                     HAL_Delay(200);
 335:Src/main.c    ****                                     EDGE_RIGHT_STATE = NOT_FLAGGED;
 336:Src/main.c    ****                                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 8


 337:Src/main.c    ****                                 }
 338:Src/main.c    ****                             }
 339:Src/main.c    ****                             arm_down(&htim3);
 340:Src/main.c    ****                         }
 341:Src/main.c    **** 
 342:Src/main.c    ****                         if (ewok_cnt == 5)
 343:Src/main.c    ****                         {
 344:Src/main.c    ****                             turn_deg(50);
 345:Src/main.c    ****                             open_claw(&htim3);
 346:Src/main.c    ****                             HAL_Delay(750);
 347:Src/main.c    ****                             arm_down(&htim3);
 348:Src/main.c    ****                             slow_actuate(&htim3, BASKET_CH, 10, 180);
 349:Src/main.c    ****                             drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 3000);
 350:Src/main.c    ****                             slow_actuate(&htim3, BASKET_CH, 180, 20);
 351:Src/main.c    ****                         }
 352:Src/main.c    ****                         break;
 353:Src/main.c    ****                     }
 354:Src/main.c    ****                 }
 355:Src/main.c    ****         //     }
 356:Src/main.c    **** 
 357:Src/main.c    ****         //     HAL_NVIC_DisableIRQ(CLAW_INT_EXTI_IRQn);
 358:Src/main.c    ****         //     PI_INT_STATE = NOT_FLAGGED;
 359:Src/main.c    ****         //     print("ewok\n", 0);
 360:Src/main.c    ****         //     set_motor_speed(TIM_CHANNEL_1, 0);
 361:Src/main.c    ****         //     set_motor_speed(TIM_CHANNEL_3, 0);
 362:Src/main.c    ****         //     HAL_Delay(3000);
 363:Src/main.c    ****         // }
 364:Src/main.c    ****         // else
 365:Src/main.c    ****         // {
 366:Src/main.c    ****         //     /*
 367:Src/main.c    ****         //      * Look for Ewok
 368:Src/main.c    ****         //      */
 369:Src/main.c    ****         //     print("ewok\n", 0);
 370:Src/main.c    **** 
 371:Src/main.c    ****         //     if (ewok_cnt == 4 || ewok_cnt == 5)
 372:Src/main.c    ****         //     {
 373:Src/main.c    ****         //         if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 374:Src/main.c    ****         //         {
 375:Src/main.c    ****         //             drive_straight_time(&enc_pid, 0, RIGHT_SPEED - 100, 400);
 376:Src/main.c    ****         //             uint32_t temp_time = HAL_GetTick();
 377:Src/main.c    ****         //             while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED)
 378:Src/main.c    ****         //                 ;
 379:Src/main.c    ****         //         }
 380:Src/main.c    ****         //         else if (EDGE_LEFT_STATE == NOT_FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 381:Src/main.c    ****         //         {
 382:Src/main.c    ****         //             drive_straight_time(&enc_pid, LEFT_SPEED - 100, 0, 400);
 383:Src/main.c    ****         //             uint32_t temp_time = HAL_GetTick();
 384:Src/main.c    ****         //             while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED)
 385:Src/main.c    ****         //                 ;
 386:Src/main.c    ****         //         }
 387:Src/main.c    ****         //     }
 388:Src/main.c    ****         //     drive_straight_time(&enc_pid, LEFT_SPEED - 100, RIGHT_SPEED - 100, 500);
 389:Src/main.c    ****         //     uint32_t temp_time = HAL_GetTick();
 390:Src/main.c    ****         //     while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED)
 391:Src/main.c    ****         //         ;
 392:Src/main.c    ****         // }
 393:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 9


 394:Src/main.c    ****   /* USER CODE END WHILE */
 395:Src/main.c    **** 
 396:Src/main.c    ****   /* USER CODE BEGIN 3 */
 397:Src/main.c    ****     }
 398:Src/main.c    ****   /* USER CODE END 3 */
 399:Src/main.c    **** 
 400:Src/main.c    **** }
 401:Src/main.c    **** 
 402:Src/main.c    **** /**
 403:Src/main.c    ****   * @brief System Clock Configuration
 404:Src/main.c    ****   * @retval None
 405:Src/main.c    ****   */
 406:Src/main.c    **** void SystemClock_Config(void)
 407:Src/main.c    **** {
 408:Src/main.c    **** 
 409:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 410:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 411:Src/main.c    **** 
 412:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 413:Src/main.c    ****     */
 414:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 415:Src/main.c    **** 
 416:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 417:Src/main.c    **** 
 418:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 419:Src/main.c    ****     */
 420:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 421:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 422:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 423:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 424:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 425:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 426:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 427:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 428:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 429:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 430:Src/main.c    ****   {
 431:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 432:Src/main.c    ****   }
 433:Src/main.c    **** 
 434:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 435:Src/main.c    ****     */
 436:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 437:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 438:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 439:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 440:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 441:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 442:Src/main.c    **** 
 443:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 444:Src/main.c    ****   {
 445:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 446:Src/main.c    ****   }
 447:Src/main.c    **** 
 448:Src/main.c    ****     /**Configure the Systick interrupt time 
 449:Src/main.c    ****     */
 450:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 10


 451:Src/main.c    **** 
 452:Src/main.c    ****     /**Configure the Systick 
 453:Src/main.c    ****     */
 454:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 455:Src/main.c    **** 
 456:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 457:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 458:Src/main.c    **** }
 459:Src/main.c    **** 
 460:Src/main.c    **** /* USER CODE BEGIN 4 */
 461:Src/main.c    **** 
 462:Src/main.c    **** void square_edge(PID_t *enc_pid)
 463:Src/main.c    **** {
 464:Src/main.c    ****     while (1)
 465:Src/main.c    ****     {
 466:Src/main.c    ****         char msg[18] = "";
 467:Src/main.c    ****         sprintf(msg, "EL: %d\n", EDGE_LEFT_STATE == FLAGGED ? 1 : 0);
 468:Src/main.c    ****         print(msg, 0);
 469:Src/main.c    ****         sprintf(msg, "ER: %d\n", EDGE_RIGHT_STATE == FLAGGED ? 1 : 0);
 470:Src/main.c    ****         print(msg, 0);
 471:Src/main.c    ****         print("\n", 0);
 472:Src/main.c    ****         drive_straight(enc_pid);
 473:Src/main.c    ****         if (EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED)
 474:Src/main.c    ****         {
 475:Src/main.c    ****             
 476:Src/main.c    ****             if (EDGE_LEFT_STATE == FLAGGED)
 477:Src/main.c    ****             {
 478:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 479:Src/main.c    ****             }
 480:Src/main.c    ****             if (EDGE_RIGHT_STATE == FLAGGED)
 481:Src/main.c    ****             {
 482:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 483:Src/main.c    ****             }
 484:Src/main.c    ****         }
 485:Src/main.c    ****         else if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 486:Src/main.c    ****         {
 487:Src/main.c    ****             break;
 488:Src/main.c    ****         }
 489:Src/main.c    ****     }
 490:Src/main.c    **** }
 491:Src/main.c    **** 
 492:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis)
 493:Src/main.c    **** {
 494:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 495:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 496:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 497:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 498:Src/main.c    ****     {
 499:Src/main.c    ****         drive_straight(enc_pid);
 500:Src/main.c    ****     }
 501:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 502:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 503:Src/main.c    **** }
 504:Src/main.c    **** 
 505:Src/main.c    **** void drive_straight(PID_t *enc_pid)
 506:Src/main.c    **** {
 507:Src/main.c    ****     encoder_pid(enc_pid);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 11


 508:Src/main.c    ****     HAL_Delay(10);
 509:Src/main.c    **** }
 510:Src/main.c    **** 
 511:Src/main.c    **** /*
 512:Src/main.c    ****  * Assume motors are not on.
 513:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 514:Src/main.c    ****  */
 515:Src/main.c    **** void turn()
 516:Src/main.c    **** {
 517:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 518:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 519:Src/main.c    ****     HAL_Delay(100);
 520:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 521:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 522:Src/main.c    ****     TIM4->CNT = 0;
 523:Src/main.c    ****     TIM5->CNT = 0;
 524:Src/main.c    **** 
 525:Src/main.c    ****     char msg[18] = "";
 526:Src/main.c    ****     sprintf(msg, "cnts: %d\n", counts);
 527:Src/main.c    ****     print(msg, 0);
 528:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 529:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 530:Src/main.c    ****     sprintf(msg, "vlts: %d.%d\n", pre_dec, post_dec);
 531:Src/main.c    ****     print(msg, 2);
 532:Src/main.c    **** 
 533:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
 534:Src/main.c    ****     {
 535:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 536:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 537:Src/main.c    ****         while (TIM5->CNT < counts)
 538:Src/main.c    ****         {
 539:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 540:Src/main.c    ****             // print(msg, 4);
 541:Src/main.c    ****         }
 542:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 543:Src/main.c    ****         print(msg, 4);
 544:Src/main.c    ****         TIM5->CNT = 0;
 545:Src/main.c    ****     }
 546:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 547:Src/main.c    ****     {
 548:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 549:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 550:Src/main.c    ****         while (TIM4->CNT < counts)
 551:Src/main.c    ****         {
 552:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 553:Src/main.c    ****             // print(msg, 4);
 554:Src/main.c    ****         }
 555:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 556:Src/main.c    ****         print(msg, 4);
 557:Src/main.c    ****         TIM4->CNT = 0;
 558:Src/main.c    ****     }
 559:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 560:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 561:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 562:Src/main.c    **** }
 563:Src/main.c    **** 
 564:Src/main.c    **** /*
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 12


 565:Src/main.c    ****  * Assume motors are not on.
 566:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 567:Src/main.c    ****  */
 568:Src/main.c    **** void turn_deg(uint8_t deg)
 569:Src/main.c    **** {
 570:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 571:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 572:Src/main.c    ****     TIM4->CNT = 0;
 573:Src/main.c    ****     TIM5->CNT = 0;
 574:Src/main.c    **** 
 575:Src/main.c    ****     char msg[18] = "";
 576:Src/main.c    **** 
 577:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 578:Src/main.c    ****     {
 579:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 580:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, LEFT_SPEED);
 581:Src/main.c    ****         while (TIM5->CNT < counts)
 582:Src/main.c    ****         {
 583:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 584:Src/main.c    ****             print(msg, 4);
 585:Src/main.c    ****         }
 586:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 587:Src/main.c    ****         print(msg, 4);
 588:Src/main.c    ****         TIM5->CNT = 0;
 589:Src/main.c    ****     }
 590:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 591:Src/main.c    ****     {
 592:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, RIGHT_SPEED);
 593:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 594:Src/main.c    ****         while (TIM4->CNT < counts)
 595:Src/main.c    ****         {
 596:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 597:Src/main.c    ****             print(msg, 4);
 598:Src/main.c    ****         }
 599:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 600:Src/main.c    ****         print(msg, 4);
 601:Src/main.c    ****         TIM4->CNT = 0;
 602:Src/main.c    ****     }
 603:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 604:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 605:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 606:Src/main.c    **** }
 607:Src/main.c    **** 
 608:Src/main.c    **** /**
 609:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 610:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 611:Src/main.c    ****  *
 612:Src/main.c    ****  * @param adc_val, value read from ADC.
 613:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 614:Src/main.c    ****  **/
 615:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 616:Src/main.c    **** {
  67              		.loc 1 616 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 13


  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 617:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 617 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 618:Src/main.c    **** }
  90              		.loc 1 618 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE131:
 101              		.global	__aeabi_dcmplt
 102              		.global	__aeabi_dcmpgt
 103              		.section	.text.alarm_detect,"ax",%progbits
 104              		.align	2
 105              		.global	alarm_detect
 106              		.thumb
 107              		.thumb_func
 109              	alarm_detect:
 110              	.LFB132:
 619:Src/main.c    **** 
 620:Src/main.c    **** // Sampling frequency: 72e6/2/(495*3)
 621:Src/main.c    **** void alarm_detect()
 622:Src/main.c    **** {
 111              		.loc 1 622 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115 0000 00B5     		push	{lr}
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 14, -4
 119 0002 83B0     		sub	sp, sp, #12
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 16
 623:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 122              		.loc 1 623 0
 123 0004 1C48     		ldr	r0, .L13
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 14


 124 0006 1D49     		ldr	r1, .L13+4
 125 0008 4FF40062 		mov	r2, #2048
 126 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 127              	.LVL8:
 624:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 625:Src/main.c    ****     HAL_Delay(500);
 128              		.loc 1 625 0
 129 0010 4FF4FA70 		mov	r0, #500
 130 0014 FFF7FEFF 		bl	HAL_Delay
 131              	.LVL9:
 132              	.L10:
 626:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 100)
 133              		.loc 1 626 0 discriminator 1
 134 0018 0023     		movs	r3, #0
 135 001a 0093     		str	r3, [sp]
 136 001c 1848     		ldr	r0, .L13+8
 137 001e 45F6B261 		movw	r1, #24242
 138 0022 4FF47A72 		mov	r2, #1000
 139 0026 4FF40063 		mov	r3, #2048
 140 002a FFF7FEFF 		bl	goertzel
 141              	.LVL10:
 142 002e 51EC100B 		fmrrd	r0, r1, d0
 143 0032 0022     		movs	r2, #0
 144 0034 134B     		ldr	r3, .L13+12
 145 0036 FFF7FEFF 		bl	__aeabi_dcmplt
 146              	.LVL11:
 147 003a 0028     		cmp	r0, #0
 148 003c ECD1     		bne	.L10
 149              	.L11:
 627:Src/main.c    ****         ;
 628:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 100)
 150              		.loc 1 628 0 discriminator 1
 151 003e 0023     		movs	r3, #0
 152 0040 0093     		str	r3, [sp]
 153 0042 0F48     		ldr	r0, .L13+8
 154 0044 45F6B261 		movw	r1, #24242
 155 0048 4FF47A72 		mov	r2, #1000
 156 004c 4FF40063 		mov	r3, #2048
 157 0050 FFF7FEFF 		bl	goertzel
 158              	.LVL12:
 159 0054 51EC100B 		fmrrd	r0, r1, d0
 160 0058 0022     		movs	r2, #0
 161 005a 0A4B     		ldr	r3, .L13+12
 162 005c FFF7FEFF 		bl	__aeabi_dcmpgt
 163              	.LVL13:
 164 0060 0028     		cmp	r0, #0
 165 0062 ECD1     		bne	.L11
 629:Src/main.c    ****         ;
 630:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 166              		.loc 1 630 0
 167 0064 0448     		ldr	r0, .L13
 168 0066 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 169              	.LVL14:
 631:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 170              		.loc 1 631 0
 171 006a 0022     		movs	r2, #0
 172 006c 064B     		ldr	r3, .L13+16
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 15


 173 006e 1A70     		strb	r2, [r3]
 632:Src/main.c    **** }
 174              		.loc 1 632 0
 175 0070 03B0     		add	sp, sp, #12
 176              	.LCFI4:
 177              		.cfi_def_cfa_offset 4
 178              		@ sp needed
 179 0072 5DF804FB 		ldr	pc, [sp], #4
 180              	.L14:
 181 0076 00BF     		.align	2
 182              	.L13:
 183 0078 00000000 		.word	hadc1
 184 007c 00000000 		.word	dma_buffer
 185 0080 00000000 		.word	adc_values
 186 0084 00005940 		.word	1079574528
 187 0088 00000000 		.word	IR_INT_STATE
 188              		.cfi_endproc
 189              	.LFE132:
 191              		.section	.text.print,"ax",%progbits
 192              		.align	2
 193              		.global	print
 194              		.thumb
 195              		.thumb_func
 197              	print:
 198              	.LFB133:
 633:Src/main.c    **** 
 634:Src/main.c    **** /**
 635:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 636:Src/main.c    ****  * @param msg, string to print
 637:Src/main.c    ****  * @param row, row to print msg to
 638:Src/main.c    ****  */
 639:Src/main.c    **** void print(char *msg, int row)
 640:Src/main.c    **** {
 199              		.loc 1 640 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL15:
 204 0000 10B5     		push	{r4, lr}
 205              	.LCFI5:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
 209 0002 0446     		mov	r4, r0
 641:Src/main.c    ****     // if (row == 0)
 642:Src/main.c    ****     // {
 643:Src/main.c    ****     //     ssd1306_Fill(Black);
 644:Src/main.c    ****     // }
 645:Src/main.c    ****     // ssd1306_SetCursor(0, row * 10);
 646:Src/main.c    ****     // ssd1306_WriteString(msg, Font_7x10, White);
 647:Src/main.c    ****     // ssd1306_UpdateScreen();
 648:Src/main.c    ****     HAL_UART_Transmit(&huart6, (uint8_t *) msg, strlen(msg), 100);
 210              		.loc 1 648 0
 211 0004 FFF7FEFF 		bl	strlen
 212              	.LVL16:
 213 0008 82B2     		uxth	r2, r0
 214 000a 0348     		ldr	r0, .L17
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 16


 215 000c 2146     		mov	r1, r4
 216 000e 6423     		movs	r3, #100
 217 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 218              	.LVL17:
 219 0014 10BD     		pop	{r4, pc}
 220              	.LVL18:
 221              	.L18:
 222 0016 00BF     		.align	2
 223              	.L17:
 224 0018 00000000 		.word	huart6
 225              		.cfi_endproc
 226              	.LFE133:
 228              		.section	.text.menu,"ax",%progbits
 229              		.align	2
 230              		.global	menu
 231              		.thumb
 232              		.thumb_func
 234              	menu:
 235              	.LFB134:
 649:Src/main.c    **** }
 650:Src/main.c    **** 
 651:Src/main.c    **** PID_t menu()
 652:Src/main.c    **** {
 236              		.loc 1 652 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 32
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              	.LVL19:
 241 0000 30B5     		push	{r4, r5, lr}
 242              	.LCFI6:
 243              		.cfi_def_cfa_offset 12
 244              		.cfi_offset 4, -12
 245              		.cfi_offset 5, -8
 246              		.cfi_offset 14, -4
 247 0002 8BB0     		sub	sp, sp, #44
 248              	.LCFI7:
 249              		.cfi_def_cfa_offset 56
 250 0004 0546     		mov	r5, r0
 653:Src/main.c    ****     print("Starting\n", 0);
 251              		.loc 1 653 0
 252 0006 2548     		ldr	r0, .L25
 253              	.LVL20:
 254 0008 0021     		movs	r1, #0
 255 000a FFF7FEFF 		bl	print
 256              	.LVL21:
 654:Src/main.c    ****     char msg[20] = "";
 257              		.loc 1 654 0
 258 000e 0024     		movs	r4, #0
 259 0010 0594     		str	r4, [sp, #20]
 260 0012 0694     		str	r4, [sp, #24]
 261 0014 0794     		str	r4, [sp, #28]
 262 0016 0894     		str	r4, [sp, #32]
 263 0018 0994     		str	r4, [sp, #36]
 264              	.LVL22:
 655:Src/main.c    ****     int pid_select = 0;
 656:Src/main.c    ****     uint32_t values[2] = {0, 0};
 265              		.loc 1 656 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 17


 266 001a 0394     		str	r4, [sp, #12]
 267 001c 0494     		str	r4, [sp, #16]
 268              	.LVL23:
 269              	.L23:
 657:Src/main.c    ****     while (1)
 658:Src/main.c    ****     {
 659:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 270              		.loc 1 659 0
 271 001e 2048     		ldr	r0, .L25+4
 272 0020 4FF40051 		mov	r1, #8192
 273 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 274              	.LVL24:
 275 0028 48BB     		cbnz	r0, .L20
 660:Src/main.c    ****         {
 661:Src/main.c    ****             sprintf(msg, "%lu\n", values[pid_select]);
 276              		.loc 1 661 0
 277 002a 05A8     		add	r0, sp, #20
 278 002c 1D49     		ldr	r1, .L25+8
 279 002e 0AAB     		add	r3, sp, #40
 280 0030 03EB8403 		add	r3, r3, r4, lsl #2
 281 0034 53F81C2C 		ldr	r2, [r3, #-28]
 282 0038 FFF7FEFF 		bl	sprintf
 283              	.LVL25:
 662:Src/main.c    ****             print(msg, 0);
 284              		.loc 1 662 0
 285 003c 05A8     		add	r0, sp, #20
 286 003e 0021     		movs	r1, #0
 287 0040 FFF7FEFF 		bl	print
 288              	.LVL26:
 663:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 289              		.loc 1 663 0
 290 0044 13E0     		b	.L21
 291              	.L22:
 664:Src/main.c    ****             {
 665:Src/main.c    ****                 values[pid_select]++;
 292              		.loc 1 665 0
 293 0046 0AAB     		add	r3, sp, #40
 294 0048 03EB8403 		add	r3, r3, r4, lsl #2
 295 004c 53F81C2C 		ldr	r2, [r3, #-28]
 296 0050 0132     		adds	r2, r2, #1
 297 0052 43F81C2C 		str	r2, [r3, #-28]
 666:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
 298              		.loc 1 666 0
 299 0056 05A8     		add	r0, sp, #20
 300 0058 1249     		ldr	r1, .L25+8
 301 005a FFF7FEFF 		bl	sprintf
 302              	.LVL27:
 667:Src/main.c    ****                 print(msg, 0);
 303              		.loc 1 667 0
 304 005e 05A8     		add	r0, sp, #20
 305 0060 0021     		movs	r1, #0
 306 0062 FFF7FEFF 		bl	print
 307              	.LVL28:
 668:Src/main.c    ****                 HAL_Delay(500);
 308              		.loc 1 668 0
 309 0066 4FF4FA70 		mov	r0, #500
 310 006a FFF7FEFF 		bl	HAL_Delay
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 18


 311              	.LVL29:
 312              	.L21:
 663:Src/main.c    ****             {
 313              		.loc 1 663 0
 314 006e 0C48     		ldr	r0, .L25+4
 315 0070 4FF40051 		mov	r1, #8192
 316 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 317              	.LVL30:
 318 0078 0028     		cmp	r0, #0
 319 007a E4D0     		beq	.L22
 669:Src/main.c    ****             }
 670:Src/main.c    ****             ++pid_select;
 320              		.loc 1 670 0
 321 007c 0134     		adds	r4, r4, #1
 322              	.LVL31:
 323              	.L20:
 671:Src/main.c    ****         }
 672:Src/main.c    ****         if (pid_select == 2)
 324              		.loc 1 672 0
 325 007e 022C     		cmp	r4, #2
 326 0080 CDD1     		bne	.L23
 673:Src/main.c    ****             break;
 674:Src/main.c    ****     }
 675:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 327              		.loc 1 675 0
 328 0082 BDF80C10 		ldrh	r1, [sp, #12]
 329 0086 BDF81020 		ldrh	r2, [sp, #16]
 330 008a 0123     		movs	r3, #1
 331 008c 0093     		str	r3, [sp]
 332 008e 0193     		str	r3, [sp, #4]
 333 0090 2846     		mov	r0, r5
 334 0092 FFF7FEFF 		bl	pid_Init
 335              	.LVL32:
 676:Src/main.c    **** }
 336              		.loc 1 676 0
 337 0096 2846     		mov	r0, r5
 338 0098 0BB0     		add	sp, sp, #44
 339              	.LCFI8:
 340              		.cfi_def_cfa_offset 12
 341              		@ sp needed
 342 009a 30BD     		pop	{r4, r5, pc}
 343              	.LVL33:
 344              	.L26:
 345              		.align	2
 346              	.L25:
 347 009c 00000000 		.word	.LC0
 348 00a0 00080240 		.word	1073874944
 349 00a4 0C000000 		.word	.LC1
 350              		.cfi_endproc
 351              	.LFE134:
 353              		.section	.text.set_motor_speed,"ax",%progbits
 354              		.align	2
 355              		.global	set_motor_speed
 356              		.thumb
 357              		.thumb_func
 359              	set_motor_speed:
 360              	.LFB135:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 19


 677:Src/main.c    **** 
 678:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 679:Src/main.c    **** {
 361              		.loc 1 679 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              		@ link register save eliminated.
 366              	.LVL34:
 680:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 367              		.loc 1 680 0
 368 0000 0346     		mov	r3, r0
 369 0002 18B9     		cbnz	r0, .L28
 681:Src/main.c    ****     {
 682:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 370              		.loc 1 682 0
 371 0004 114A     		ldr	r2, .L32
 372 0006 1268     		ldr	r2, [r2]
 373 0008 9063     		str	r0, [r2, #56]
 374 000a 13E0     		b	.L29
 375              	.L28:
 683:Src/main.c    ****     }
 684:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 376              		.loc 1 684 0
 377 000c 0428     		cmp	r0, #4
 378 000e 04D1     		bne	.L30
 685:Src/main.c    ****     {
 686:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 379              		.loc 1 686 0
 380 0010 0E4A     		ldr	r2, .L32
 381 0012 1268     		ldr	r2, [r2]
 382 0014 0020     		movs	r0, #0
 383              	.LVL35:
 384 0016 5063     		str	r0, [r2, #52]
 385 0018 0CE0     		b	.L29
 386              	.LVL36:
 387              	.L30:
 687:Src/main.c    ****     }
 688:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 388              		.loc 1 688 0
 389 001a 0828     		cmp	r0, #8
 390 001c 04D1     		bne	.L31
 689:Src/main.c    ****     {
 690:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 391              		.loc 1 690 0
 392 001e 0B4A     		ldr	r2, .L32
 393 0020 1268     		ldr	r2, [r2]
 394 0022 0020     		movs	r0, #0
 395              	.LVL37:
 396 0024 1064     		str	r0, [r2, #64]
 397 0026 05E0     		b	.L29
 398              	.LVL38:
 399              	.L31:
 691:Src/main.c    ****     }
 692:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 400              		.loc 1 692 0
 401 0028 0C28     		cmp	r0, #12
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 20


 402 002a 03D1     		bne	.L29
 693:Src/main.c    ****     {
 694:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 403              		.loc 1 694 0
 404 002c 074A     		ldr	r2, .L32
 405 002e 1268     		ldr	r2, [r2]
 406 0030 0020     		movs	r0, #0
 407              	.LVL39:
 408 0032 D063     		str	r0, [r2, #60]
 409              	.L29:
 695:Src/main.c    ****     }
 696:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed > 1000 ? 1000 : speed);
 410              		.loc 1 696 0
 411 0034 054A     		ldr	r2, .L32
 412 0036 1268     		ldr	r2, [r2]
 413 0038 3432     		adds	r2, r2, #52
 414 003a 9B08     		lsrs	r3, r3, #2
 415              	.LVL40:
 416 003c B1F57A7F 		cmp	r1, #1000
 417 0040 28BF     		it	cs
 418 0042 4FF47A71 		movcs	r1, #1000
 419              	.LVL41:
 420 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 421 004a 7047     		bx	lr
 422              	.L33:
 423              		.align	2
 424              	.L32:
 425 004c 00000000 		.word	htim1
 426              		.cfi_endproc
 427              	.LFE135:
 429              		.global	__aeabi_f2d
 430              		.global	__aeabi_d2uiz
 431              		.section	.text.turn,"ax",%progbits
 432              		.align	2
 433              		.global	turn
 434              		.thumb
 435              		.thumb_func
 437              	turn:
 438              	.LFB129:
 516:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 439              		.loc 1 516 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 24
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 444              	.LCFI9:
 445              		.cfi_def_cfa_offset 20
 446              		.cfi_offset 4, -20
 447              		.cfi_offset 5, -16
 448              		.cfi_offset 6, -12
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 0002 2DED028B 		fstmfdd	sp!, {d8}
 452              	.LCFI10:
 453              		.cfi_def_cfa_offset 28
 454              		.cfi_offset 80, -28
 455              		.cfi_offset 81, -24
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 21


 456 0006 87B0     		sub	sp, sp, #28
 457              	.LCFI11:
 458              		.cfi_def_cfa_offset 56
 517:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 459              		.loc 1 517 0
 460 0008 5348     		ldr	r0, .L45+16
 461 000a 5449     		ldr	r1, .L45+20
 462 000c 4FF40062 		mov	r2, #2048
 463 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 464              	.LVL42:
 519:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 465              		.loc 1 519 0
 466 0014 6420     		movs	r0, #100
 467 0016 FFF7FEFF 		bl	HAL_Delay
 468              	.LVL43:
 520:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 469              		.loc 1 520 0
 470 001a 514B     		ldr	r3, .L45+24
 471 001c 5869     		ldr	r0, [r3, #20]
 472 001e 4000     		lsls	r0, r0, #1
 473 0020 FFF7FEFF 		bl	calculate_heading
 474              	.LVL44:
 475 0024 B0EE408A 		fcpys	s16, s0
 476              	.LVL45:
 521:Src/main.c    ****     TIM4->CNT = 0;
 477              		.loc 1 521 0
 478 0028 F0EEC07A 		fabss	s15, s0
 479 002c 17EE900A 		fmrs	r0, s15
 480 0030 FFF7FEFF 		bl	__aeabi_f2d
 481              	.LVL46:
 482 0034 0022     		movs	r2, #0
 483 0036 4B4B     		ldr	r3, .L45+28
 484 0038 FFF7FEFF 		bl	__aeabi_dmul
 485              	.LVL47:
 486 003c FFF7FEFF 		bl	__aeabi_d2uiz
 487              	.LVL48:
 488 0040 85B2     		uxth	r5, r0
 489              	.LVL49:
 522:Src/main.c    ****     TIM5->CNT = 0;
 490              		.loc 1 522 0
 491 0042 0024     		movs	r4, #0
 492 0044 484B     		ldr	r3, .L45+32
 493 0046 5C62     		str	r4, [r3, #36]
 523:Src/main.c    **** 
 494              		.loc 1 523 0
 495 0048 03F58063 		add	r3, r3, #1024
 496 004c 5C62     		str	r4, [r3, #36]
 525:Src/main.c    ****     sprintf(msg, "cnts: %d\n", counts);
 497              		.loc 1 525 0
 498 004e 0194     		str	r4, [sp, #4]
 499 0050 0294     		str	r4, [sp, #8]
 500 0052 0394     		str	r4, [sp, #12]
 501 0054 0494     		str	r4, [sp, #16]
 502 0056 ADF81440 		strh	r4, [sp, #20]	@ movhi
 526:Src/main.c    ****     print(msg, 0);
 503              		.loc 1 526 0
 504 005a 01A8     		add	r0, sp, #4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 22


 505 005c 4349     		ldr	r1, .L45+36
 506 005e 2A46     		mov	r2, r5
 507 0060 FFF7FEFF 		bl	sprintf
 508              	.LVL50:
 527:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 509              		.loc 1 527 0
 510 0064 01A8     		add	r0, sp, #4
 511 0066 2146     		mov	r1, r4
 512 0068 FFF7FEFF 		bl	print
 513              	.LVL51:
 528:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 514              		.loc 1 528 0
 515 006c BDEEC87A 		ftosizs	s14, s16
 516              	.LVL52:
 529:Src/main.c    ****     sprintf(msg, "vlts: %d.%d\n", pre_dec, post_dec);
 517              		.loc 1 529 0
 518 0070 F8EEC77A 		fsitos	s15, s14
 519 0074 78EE677A 		fsubs	s15, s16, s15
 520 0078 DFED3D6A 		flds	s13, .L45+40
 521 007c 67EEA67A 		fmuls	s15, s15, s13
 522              	.LVL53:
 530:Src/main.c    ****     print(msg, 2);
 523              		.loc 1 530 0
 524 0080 01A8     		add	r0, sp, #4
 525 0082 3C49     		ldr	r1, .L45+44
 526 0084 17EE102A 		fmrs	r2, s14	@ int
 527 0088 FDEEE77A 		ftosizs	s15, s15
 528              	.LVL54:
 529 008c 17EE903A 		fmrs	r3, s15	@ int
 530 0090 FFF7FEFF 		bl	sprintf
 531              	.LVL55:
 531:Src/main.c    **** 
 532              		.loc 1 531 0
 533 0094 01A8     		add	r0, sp, #4
 534 0096 0221     		movs	r1, #2
 535 0098 FFF7FEFF 		bl	print
 536              	.LVL56:
 533:Src/main.c    ****     {
 537              		.loc 1 533 0
 538 009c 18EE100A 		fmrs	r0, s16
 539 00a0 FFF7FEFF 		bl	__aeabi_f2d
 540              	.LVL57:
 541 00a4 0646     		mov	r6, r0
 542 00a6 0F46     		mov	r7, r1
 543 00a8 27A3     		adr	r3, .L45
 544 00aa D3E90023 		ldrd	r2, [r3]
 545 00ae FFF7FEFF 		bl	__aeabi_dcmplt
 546              	.LVL58:
 547 00b2 C8B1     		cbz	r0, .L43
 535:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 548              		.loc 1 535 0
 549 00b4 2046     		mov	r0, r4
 550 00b6 2146     		mov	r1, r4
 551 00b8 FFF7FEFF 		bl	set_motor_speed
 552              	.LVL59:
 536:Src/main.c    ****         while (TIM5->CNT < counts)
 553              		.loc 1 536 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 23


 554 00bc 0820     		movs	r0, #8
 555 00be 2E4B     		ldr	r3, .L45+48
 556 00c0 1988     		ldrh	r1, [r3]
 557 00c2 FFF7FEFF 		bl	set_motor_speed
 558              	.LVL60:
 559              	.L37:
 537:Src/main.c    ****         {
 560              		.loc 1 537 0 discriminator 1
 561 00c6 2D4B     		ldr	r3, .L45+52
 562 00c8 5B6A     		ldr	r3, [r3, #36]
 563 00ca AB42     		cmp	r3, r5
 564 00cc FBD3     		bcc	.L37
 542:Src/main.c    ****         print(msg, 4);
 565              		.loc 1 542 0
 566 00ce 2B4C     		ldr	r4, .L45+52
 567 00d0 626A     		ldr	r2, [r4, #36]
 568 00d2 01A8     		add	r0, sp, #4
 569 00d4 2A49     		ldr	r1, .L45+56
 570 00d6 FFF7FEFF 		bl	sprintf
 571              	.LVL61:
 543:Src/main.c    ****         TIM5->CNT = 0;
 572              		.loc 1 543 0
 573 00da 01A8     		add	r0, sp, #4
 574 00dc 0421     		movs	r1, #4
 575 00de FFF7FEFF 		bl	print
 576              	.LVL62:
 544:Src/main.c    ****     }
 577              		.loc 1 544 0
 578 00e2 0023     		movs	r3, #0
 579 00e4 6362     		str	r3, [r4, #36]
 580 00e6 20E0     		b	.L38
 581              	.L43:
 546:Src/main.c    ****     {
 582              		.loc 1 546 0
 583 00e8 3046     		mov	r0, r6
 584 00ea 3946     		mov	r1, r7
 585 00ec 18A3     		adr	r3, .L45+8
 586 00ee D3E90023 		ldrd	r2, [r3]
 587 00f2 FFF7FEFF 		bl	__aeabi_dcmpgt
 588              	.LVL63:
 589 00f6 C0B1     		cbz	r0, .L38
 548:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 590              		.loc 1 548 0
 591 00f8 0020     		movs	r0, #0
 592 00fa 224B     		ldr	r3, .L45+60
 593 00fc 1988     		ldrh	r1, [r3]
 594 00fe FFF7FEFF 		bl	set_motor_speed
 595              	.LVL64:
 549:Src/main.c    ****         while (TIM4->CNT < counts)
 596              		.loc 1 549 0
 597 0102 0820     		movs	r0, #8
 598 0104 0021     		movs	r1, #0
 599 0106 FFF7FEFF 		bl	set_motor_speed
 600              	.LVL65:
 601              	.L40:
 550:Src/main.c    ****         {
 602              		.loc 1 550 0 discriminator 1
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 24


 603 010a 174B     		ldr	r3, .L45+32
 604 010c 5B6A     		ldr	r3, [r3, #36]
 605 010e AB42     		cmp	r3, r5
 606 0110 FBD3     		bcc	.L40
 555:Src/main.c    ****         print(msg, 4);
 607              		.loc 1 555 0
 608 0112 154C     		ldr	r4, .L45+32
 609 0114 626A     		ldr	r2, [r4, #36]
 610 0116 01A8     		add	r0, sp, #4
 611 0118 1B49     		ldr	r1, .L45+64
 612 011a FFF7FEFF 		bl	sprintf
 613              	.LVL66:
 556:Src/main.c    ****         TIM4->CNT = 0;
 614              		.loc 1 556 0
 615 011e 01A8     		add	r0, sp, #4
 616 0120 0421     		movs	r1, #4
 617 0122 FFF7FEFF 		bl	print
 618              	.LVL67:
 557:Src/main.c    ****     }
 619              		.loc 1 557 0
 620 0126 0023     		movs	r3, #0
 621 0128 6362     		str	r3, [r4, #36]
 622              	.L38:
 559:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 623              		.loc 1 559 0
 624 012a 0020     		movs	r0, #0
 625 012c 0146     		mov	r1, r0
 626 012e FFF7FEFF 		bl	set_motor_speed
 627              	.LVL68:
 560:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 628              		.loc 1 560 0
 629 0132 0820     		movs	r0, #8
 630 0134 0021     		movs	r1, #0
 631 0136 FFF7FEFF 		bl	set_motor_speed
 632              	.LVL69:
 561:Src/main.c    **** }
 633              		.loc 1 561 0
 634 013a 0748     		ldr	r0, .L45+16
 635 013c FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 636              	.LVL70:
 562:Src/main.c    **** 
 637              		.loc 1 562 0
 638 0140 07B0     		add	sp, sp, #28
 639              	.LCFI12:
 640              		.cfi_def_cfa_offset 28
 641              		@ sp needed
 642 0142 BDEC028B 		fldmfdd	sp!, {d8}
 643              	.LCFI13:
 644              		.cfi_restore 80
 645              		.cfi_restore 81
 646              		.cfi_def_cfa_offset 20
 647              	.LVL71:
 648 0146 F0BD     		pop	{r4, r5, r6, r7, pc}
 649              	.LVL72:
 650              	.L46:
 651              		.align	3
 652              	.L45:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 25


 653 0148 7B14AE47 		.word	1202590843
 654 014c E17AA4BF 		.word	-1079739679
 655 0150 7B14AE47 		.word	1202590843
 656 0154 E17AA43F 		.word	1067743969
 657 0158 00000000 		.word	hadc1
 658 015c 00000000 		.word	dma_buffer
 659 0160 00000000 		.word	adc_values
 660 0164 00005940 		.word	1079574528
 661 0168 00080040 		.word	1073743872
 662 016c 14000000 		.word	.LC2
 663 0170 00007A44 		.word	1148846080
 664 0174 20000000 		.word	.LC3
 665 0178 00000000 		.word	.LANCHOR0
 666 017c 000C0040 		.word	1073744896
 667 0180 30000000 		.word	.LC4
 668 0184 00000000 		.word	.LANCHOR1
 669 0188 40000000 		.word	.LC5
 670              		.cfi_endproc
 671              	.LFE129:
 673              		.global	__aeabi_i2d
 674              		.global	__aeabi_dadd
 675              		.section	.text.turn_deg,"ax",%progbits
 676              		.align	2
 677              		.global	turn_deg
 678              		.thumb
 679              		.thumb_func
 681              	turn_deg:
 682              	.LFB130:
 569:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 683              		.loc 1 569 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 24
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL73:
 688 0000 30B5     		push	{r4, r5, lr}
 689              	.LCFI14:
 690              		.cfi_def_cfa_offset 12
 691              		.cfi_offset 4, -12
 692              		.cfi_offset 5, -8
 693              		.cfi_offset 14, -4
 694 0002 87B0     		sub	sp, sp, #28
 695              	.LCFI15:
 696              		.cfi_def_cfa_offset 40
 697 0004 0546     		mov	r5, r0
 570:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 698              		.loc 1 570 0
 699 0006 2C48     		ldr	r0, .L52+8
 700              	.LVL74:
 701 0008 2C49     		ldr	r1, .L52+12
 702 000a 4FF40062 		mov	r2, #2048
 703 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 704              	.LVL75:
 571:Src/main.c    ****     TIM4->CNT = 0;
 705              		.loc 1 571 0
 706 0012 A5F15A00 		sub	r0, r5, #90
 707 0016 FFF7FEFF 		bl	__aeabi_i2d
 708              	.LVL76:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 26


 709 001a 25A3     		adr	r3, .L52
 710 001c D3E90023 		ldrd	r2, [r3]
 711 0020 FFF7FEFF 		bl	__aeabi_dmul
 712              	.LVL77:
 713 0024 0022     		movs	r2, #0
 714 0026 264B     		ldr	r3, .L52+16
 715 0028 FFF7FEFF 		bl	__aeabi_dadd
 716              	.LVL78:
 717 002c FFF7FEFF 		bl	__aeabi_d2uiz
 718              	.LVL79:
 719 0030 84B2     		uxth	r4, r0
 720              	.LVL80:
 572:Src/main.c    ****     TIM5->CNT = 0;
 721              		.loc 1 572 0
 722 0032 0023     		movs	r3, #0
 723 0034 234A     		ldr	r2, .L52+20
 724 0036 5362     		str	r3, [r2, #36]
 573:Src/main.c    **** 
 725              		.loc 1 573 0
 726 0038 02F58062 		add	r2, r2, #1024
 727 003c 5362     		str	r3, [r2, #36]
 575:Src/main.c    **** 
 728              		.loc 1 575 0
 729 003e 0193     		str	r3, [sp, #4]
 730 0040 0293     		str	r3, [sp, #8]
 731 0042 0393     		str	r3, [sp, #12]
 732 0044 0493     		str	r3, [sp, #16]
 733 0046 ADF81430 		strh	r3, [sp, #20]	@ movhi
 577:Src/main.c    ****     {
 734              		.loc 1 577 0
 735 004a 1DB3     		cbz	r5, .L48
 579:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, LEFT_SPEED);
 736              		.loc 1 579 0
 737 004c 1846     		mov	r0, r3
 738 004e 1946     		mov	r1, r3
 739 0050 FFF7FEFF 		bl	set_motor_speed
 740              	.LVL81:
 580:Src/main.c    ****         while (TIM5->CNT < counts)
 741              		.loc 1 580 0
 742 0054 0820     		movs	r0, #8
 743 0056 1C4B     		ldr	r3, .L52+24
 744 0058 1988     		ldrh	r1, [r3]
 745 005a FFF7FEFF 		bl	set_motor_speed
 746              	.LVL82:
 581:Src/main.c    ****         {
 747              		.loc 1 581 0
 748 005e 09E0     		b	.L49
 749              	.L50:
 583:Src/main.c    ****             print(msg, 4);
 750              		.loc 1 583 0
 751 0060 1A4B     		ldr	r3, .L52+28
 752 0062 5A6A     		ldr	r2, [r3, #36]
 753 0064 01A8     		add	r0, sp, #4
 754 0066 1A49     		ldr	r1, .L52+32
 755 0068 FFF7FEFF 		bl	sprintf
 756              	.LVL83:
 584:Src/main.c    ****         }
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 27


 757              		.loc 1 584 0
 758 006c 01A8     		add	r0, sp, #4
 759 006e 0421     		movs	r1, #4
 760 0070 FFF7FEFF 		bl	print
 761              	.LVL84:
 762              	.L49:
 581:Src/main.c    ****         {
 763              		.loc 1 581 0
 764 0074 154B     		ldr	r3, .L52+28
 765 0076 5B6A     		ldr	r3, [r3, #36]
 766 0078 A342     		cmp	r3, r4
 767 007a F1D3     		bcc	.L50
 586:Src/main.c    ****         print(msg, 4);
 768              		.loc 1 586 0
 769 007c 134C     		ldr	r4, .L52+28
 770              	.LVL85:
 771 007e 626A     		ldr	r2, [r4, #36]
 772 0080 01A8     		add	r0, sp, #4
 773 0082 1349     		ldr	r1, .L52+32
 774 0084 FFF7FEFF 		bl	sprintf
 775              	.LVL86:
 587:Src/main.c    ****         TIM5->CNT = 0;
 776              		.loc 1 587 0
 777 0088 01A8     		add	r0, sp, #4
 778 008a 0421     		movs	r1, #4
 779 008c FFF7FEFF 		bl	print
 780              	.LVL87:
 588:Src/main.c    ****     }
 781              		.loc 1 588 0
 782 0090 0023     		movs	r3, #0
 783 0092 6362     		str	r3, [r4, #36]
 784              	.L48:
 603:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 785              		.loc 1 603 0
 786 0094 0020     		movs	r0, #0
 787 0096 0146     		mov	r1, r0
 788 0098 FFF7FEFF 		bl	set_motor_speed
 789              	.LVL88:
 604:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 790              		.loc 1 604 0
 791 009c 0820     		movs	r0, #8
 792 009e 0021     		movs	r1, #0
 793 00a0 FFF7FEFF 		bl	set_motor_speed
 794              	.LVL89:
 605:Src/main.c    **** }
 795              		.loc 1 605 0
 796 00a4 0448     		ldr	r0, .L52+8
 797 00a6 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 798              	.LVL90:
 606:Src/main.c    **** 
 799              		.loc 1 606 0
 800 00aa 07B0     		add	sp, sp, #28
 801              	.LCFI16:
 802              		.cfi_def_cfa_offset 12
 803              		@ sp needed
 804 00ac 30BD     		pop	{r4, r5, pc}
 805              	.L53:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 28


 806 00ae 00BF     		.align	3
 807              	.L52:
 808 00b0 721CC771 		.word	1908874354
 809 00b4 1CC7E13F 		.word	1071761180
 810 00b8 00000000 		.word	hadc1
 811 00bc 00000000 		.word	dma_buffer
 812 00c0 00004940 		.word	1078525952
 813 00c4 00080040 		.word	1073743872
 814 00c8 00000000 		.word	.LANCHOR1
 815 00cc 000C0040 		.word	1073744896
 816 00d0 30000000 		.word	.LC4
 817              		.cfi_endproc
 818              	.LFE130:
 820              		.section	.text.encoder_pid,"ax",%progbits
 821              		.align	2
 822              		.global	encoder_pid
 823              		.thumb
 824              		.thumb_func
 826              	encoder_pid:
 827              	.LFB136:
 697:Src/main.c    **** }
 698:Src/main.c    **** 
 699:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 700:Src/main.c    **** {
 828              		.loc 1 700 0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 0, uses_anonymous_args = 0
 832              	.LVL91:
 833 0000 38B5     		push	{r3, r4, r5, lr}
 834              	.LCFI17:
 835              		.cfi_def_cfa_offset 16
 836              		.cfi_offset 3, -16
 837              		.cfi_offset 4, -12
 838              		.cfi_offset 5, -8
 839              		.cfi_offset 14, -4
 701:Src/main.c    ****     /* Get error */
 702:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
 840              		.loc 1 702 0
 841 0002 0E4B     		ldr	r3, .L58
 842 0004 5C6A     		ldr	r4, [r3, #36]
 843              	.LVL92:
 703:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
 844              		.loc 1 703 0
 845 0006 03F58063 		add	r3, r3, #1024
 846 000a 5D6A     		ldr	r5, [r3, #36]
 847              	.LVL93:
 704:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
 848              		.loc 1 704 0
 849 000c 631B     		subs	r3, r4, r5
 850 000e 0361     		str	r3, [r0, #16]
 705:Src/main.c    **** 
 706:Src/main.c    ****     /* Get gain */
 707:Src/main.c    ****     // Gain <0 for ride side faster
 708:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
 851              		.loc 1 708 0
 852 0010 FFF7FEFF 		bl	pid_GetGain
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 29


 853              	.LVL94:
 709:Src/main.c    **** 
 710:Src/main.c    ****     /* Set Motor Speeds*/
 711:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 712:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 713:Src/main.c    ****     if (gain < 0)
 714:Src/main.c    ****     {
 715:Src/main.c    ****         lspeed -= gain;
 716:Src/main.c    ****     }
 717:Src/main.c    ****     else if (gain > 0)
 718:Src/main.c    ****     {
 719:Src/main.c    ****         rspeed += gain;
 720:Src/main.c    ****     }
 721:Src/main.c    **** 
 722:Src/main.c    ****     // char msg[18] = "";
 723:Src/main.c    ****     // sprintf(msg, "LS: %lu", lspeed);
 724:Src/main.c    ****     // print(msg, 0);
 725:Src/main.c    ****     // sprintf(msg, "RS: %lu", rspeed);
 726:Src/main.c    ****     // print(msg, 1);
 727:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, lspeed);
 728:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, rspeed);
 729:Src/main.c    **** 
 730:Src/main.c    ****     /* Prevent weird overflow shit */
 731:Src/main.c    ****     if (lcnt > 60000 || rcnt > 60000)
 854              		.loc 1 731 0
 855 0014 4EF66023 		movw	r3, #60000
 856 0018 9C42     		cmp	r4, r3
 857 001a 01D8     		bhi	.L55
 858              		.loc 1 731 0 is_stmt 0 discriminator 1
 859 001c 9D42     		cmp	r5, r3
 860 001e 0CD9     		bls	.L54
 861              	.L55:
 732:Src/main.c    ****     {
 733:Src/main.c    ****         TIM4->CNT -= 50000;
 862              		.loc 1 733 0 is_stmt 1
 863 0020 064A     		ldr	r2, .L58
 864 0022 536A     		ldr	r3, [r2, #36]
 865 0024 A3F54343 		sub	r3, r3, #49920
 866 0028 503B     		subs	r3, r3, #80
 867 002a 5362     		str	r3, [r2, #36]
 868              	.LVL95:
 734:Src/main.c    ****         TIM5->CNT -= 50000;
 869              		.loc 1 734 0
 870 002c 02F58062 		add	r2, r2, #1024
 871 0030 536A     		ldr	r3, [r2, #36]
 872 0032 A3F54343 		sub	r3, r3, #49920
 873 0036 503B     		subs	r3, r3, #80
 874 0038 5362     		str	r3, [r2, #36]
 875              	.L54:
 876 003a 38BD     		pop	{r3, r4, r5, pc}
 877              	.LVL96:
 878              	.L59:
 879              		.align	2
 880              	.L58:
 881 003c 00080040 		.word	1073743872
 882              		.cfi_endproc
 883              	.LFE136:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 30


 885              		.section	.text.drive_straight,"ax",%progbits
 886              		.align	2
 887              		.global	drive_straight
 888              		.thumb
 889              		.thumb_func
 891              	drive_straight:
 892              	.LFB128:
 506:Src/main.c    ****     encoder_pid(enc_pid);
 893              		.loc 1 506 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 0
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 897              	.LVL97:
 898 0000 08B5     		push	{r3, lr}
 899              	.LCFI18:
 900              		.cfi_def_cfa_offset 8
 901              		.cfi_offset 3, -8
 902              		.cfi_offset 14, -4
 507:Src/main.c    ****     HAL_Delay(10);
 903              		.loc 1 507 0
 904 0002 FFF7FEFF 		bl	encoder_pid
 905              	.LVL98:
 508:Src/main.c    **** }
 906              		.loc 1 508 0
 907 0006 0A20     		movs	r0, #10
 908 0008 FFF7FEFF 		bl	HAL_Delay
 909              	.LVL99:
 910 000c 08BD     		pop	{r3, pc}
 911              		.cfi_endproc
 912              	.LFE128:
 914 000e 00BF     		.section	.text.square_edge,"ax",%progbits
 915              		.align	2
 916              		.global	square_edge
 917              		.thumb
 918              		.thumb_func
 920              	square_edge:
 921              	.LFB126:
 463:Src/main.c    ****     while (1)
 922              		.loc 1 463 0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 24
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926              	.LVL100:
 927 0000 70B5     		push	{r4, r5, r6, lr}
 928              	.LCFI19:
 929              		.cfi_def_cfa_offset 16
 930              		.cfi_offset 4, -16
 931              		.cfi_offset 5, -12
 932              		.cfi_offset 6, -8
 933              		.cfi_offset 14, -4
 934 0002 86B0     		sub	sp, sp, #24
 935              	.LCFI20:
 936              		.cfi_def_cfa_offset 40
 937 0004 0646     		mov	r6, r0
 938              	.LVL101:
 939              	.L68:
 940              	.LBB2:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 31


 466:Src/main.c    ****         sprintf(msg, "EL: %d\n", EDGE_LEFT_STATE == FLAGGED ? 1 : 0);
 941              		.loc 1 466 0
 942 0006 0024     		movs	r4, #0
 943 0008 0194     		str	r4, [sp, #4]
 944 000a 0294     		str	r4, [sp, #8]
 945 000c 0394     		str	r4, [sp, #12]
 946 000e 0494     		str	r4, [sp, #16]
 947 0010 ADF81440 		strh	r4, [sp, #20]	@ movhi
 467:Src/main.c    ****         print(msg, 0);
 948              		.loc 1 467 0
 949 0014 1F4D     		ldr	r5, .L70
 950 0016 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 951 0018 01A8     		add	r0, sp, #4
 952 001a 1F49     		ldr	r1, .L70+4
 953 001c 012A     		cmp	r2, #1
 954 001e 14BF     		ite	ne
 955 0020 0022     		movne	r2, #0
 956 0022 0122     		moveq	r2, #1
 957 0024 FFF7FEFF 		bl	sprintf
 958              	.LVL102:
 468:Src/main.c    ****         sprintf(msg, "ER: %d\n", EDGE_RIGHT_STATE == FLAGGED ? 1 : 0);
 959              		.loc 1 468 0
 960 0028 01A8     		add	r0, sp, #4
 961 002a 2146     		mov	r1, r4
 962 002c FFF7FEFF 		bl	print
 963              	.LVL103:
 469:Src/main.c    ****         print(msg, 0);
 964              		.loc 1 469 0
 965 0030 1A4B     		ldr	r3, .L70+8
 966 0032 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 967 0034 01A8     		add	r0, sp, #4
 968 0036 1A49     		ldr	r1, .L70+12
 969 0038 012A     		cmp	r2, #1
 970 003a 14BF     		ite	ne
 971 003c 0022     		movne	r2, #0
 972 003e 0122     		moveq	r2, #1
 973 0040 FFF7FEFF 		bl	sprintf
 974              	.LVL104:
 470:Src/main.c    ****         print("\n", 0);
 975              		.loc 1 470 0
 976 0044 01A8     		add	r0, sp, #4
 977 0046 2146     		mov	r1, r4
 978 0048 FFF7FEFF 		bl	print
 979              	.LVL105:
 471:Src/main.c    ****         drive_straight(enc_pid);
 980              		.loc 1 471 0
 981 004c 1548     		ldr	r0, .L70+16
 982 004e 2146     		mov	r1, r4
 983 0050 FFF7FEFF 		bl	print
 984              	.LVL106:
 472:Src/main.c    ****         if (EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED)
 985              		.loc 1 472 0
 986 0054 3046     		mov	r0, r6
 987 0056 FFF7FEFF 		bl	drive_straight
 988              	.LVL107:
 473:Src/main.c    ****         {
 989              		.loc 1 473 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 32


 990 005a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 991 005c 012B     		cmp	r3, #1
 992 005e 03D0     		beq	.L63
 473:Src/main.c    ****         {
 993              		.loc 1 473 0 is_stmt 0 discriminator 1
 994 0060 0E4A     		ldr	r2, .L70+8
 995 0062 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 996 0064 012A     		cmp	r2, #1
 997 0066 0ED1     		bne	.L64
 998              	.L63:
 476:Src/main.c    ****             {
 999              		.loc 1 476 0 is_stmt 1
 1000 0068 012B     		cmp	r3, #1
 1001 006a 03D1     		bne	.L65
 478:Src/main.c    ****             }
 1002              		.loc 1 478 0
 1003 006c 0020     		movs	r0, #0
 1004 006e 0146     		mov	r1, r0
 1005 0070 FFF7FEFF 		bl	set_motor_speed
 1006              	.LVL108:
 1007              	.L65:
 480:Src/main.c    ****             {
 1008              		.loc 1 480 0
 1009 0074 094B     		ldr	r3, .L70+8
 1010 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1011 0078 012B     		cmp	r3, #1
 1012 007a C4D1     		bne	.L68
 482:Src/main.c    ****             }
 1013              		.loc 1 482 0
 1014 007c 0820     		movs	r0, #8
 1015 007e 0021     		movs	r1, #0
 1016 0080 FFF7FEFF 		bl	set_motor_speed
 1017              	.LVL109:
 1018 0084 BFE7     		b	.L68
 1019              	.L64:
 485:Src/main.c    ****         {
 1020              		.loc 1 485 0
 1021 0086 012B     		cmp	r3, #1
 1022 0088 BDD1     		bne	.L68
 485:Src/main.c    ****         {
 1023              		.loc 1 485 0 is_stmt 0 discriminator 1
 1024 008a 012A     		cmp	r2, #1
 1025 008c BBD1     		bne	.L68
 1026              	.LBE2:
 490:Src/main.c    **** 
 1027              		.loc 1 490 0 is_stmt 1
 1028 008e 06B0     		add	sp, sp, #24
 1029              	.LCFI21:
 1030              		.cfi_def_cfa_offset 16
 1031              		@ sp needed
 1032 0090 70BD     		pop	{r4, r5, r6, pc}
 1033              	.LVL110:
 1034              	.L71:
 1035 0092 00BF     		.align	2
 1036              	.L70:
 1037 0094 00000000 		.word	EDGE_LEFT_STATE
 1038 0098 50000000 		.word	.LC6
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 33


 1039 009c 00000000 		.word	EDGE_RIGHT_STATE
 1040 00a0 58000000 		.word	.LC7
 1041 00a4 60000000 		.word	.LC8
 1042              		.cfi_endproc
 1043              	.LFE126:
 1045              		.section	.text.drive_straight_time,"ax",%progbits
 1046              		.align	2
 1047              		.global	drive_straight_time
 1048              		.thumb
 1049              		.thumb_func
 1051              	drive_straight_time:
 1052              	.LFB127:
 493:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 1053              		.loc 1 493 0
 1054              		.cfi_startproc
 1055              		@ args = 0, pretend = 0, frame = 0
 1056              		@ frame_needed = 0, uses_anonymous_args = 0
 1057              	.LVL111:
 1058 0000 70B5     		push	{r4, r5, r6, lr}
 1059              	.LCFI22:
 1060              		.cfi_def_cfa_offset 16
 1061              		.cfi_offset 4, -16
 1062              		.cfi_offset 5, -12
 1063              		.cfi_offset 6, -8
 1064              		.cfi_offset 14, -4
 1065 0002 0646     		mov	r6, r0
 1066 0004 1446     		mov	r4, r2
 1067 0006 1D46     		mov	r5, r3
 494:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1068              		.loc 1 494 0
 1069 0008 0020     		movs	r0, #0
 1070              	.LVL112:
 1071 000a FFF7FEFF 		bl	set_motor_speed
 1072              	.LVL113:
 495:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 1073              		.loc 1 495 0
 1074 000e 0820     		movs	r0, #8
 1075 0010 2146     		mov	r1, r4
 1076 0012 FFF7FEFF 		bl	set_motor_speed
 1077              	.LVL114:
 496:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 1078              		.loc 1 496 0
 1079 0016 FFF7FEFF 		bl	HAL_GetTick
 1080              	.LVL115:
 1081 001a 0446     		mov	r4, r0
 1082              	.LVL116:
 497:Src/main.c    ****     {
 1083              		.loc 1 497 0
 1084 001c 02E0     		b	.L73
 1085              	.LVL117:
 1086              	.L74:
 499:Src/main.c    ****     }
 1087              		.loc 1 499 0
 1088 001e 3046     		mov	r0, r6
 1089 0020 FFF7FEFF 		bl	drive_straight
 1090              	.LVL118:
 1091              	.L73:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 34


 497:Src/main.c    ****     {
 1092              		.loc 1 497 0
 1093 0024 FFF7FEFF 		bl	HAL_GetTick
 1094              	.LVL119:
 1095 0028 001B     		subs	r0, r0, r4
 1096 002a A842     		cmp	r0, r5
 1097 002c F7D3     		bcc	.L74
 501:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1098              		.loc 1 501 0
 1099 002e 0020     		movs	r0, #0
 1100 0030 0146     		mov	r1, r0
 1101 0032 FFF7FEFF 		bl	set_motor_speed
 1102              	.LVL120:
 502:Src/main.c    **** }
 1103              		.loc 1 502 0
 1104 0036 0820     		movs	r0, #8
 1105 0038 0021     		movs	r1, #0
 1106 003a FFF7FEFF 		bl	set_motor_speed
 1107              	.LVL121:
 1108 003e 70BD     		pop	{r4, r5, r6, pc}
 1109              		.cfi_endproc
 1110              	.LFE127:
 1112              		.section	.text.test_PWM_htim1,"ax",%progbits
 1113              		.align	2
 1114              		.global	test_PWM_htim1
 1115              		.thumb
 1116              		.thumb_func
 1118              	test_PWM_htim1:
 1119              	.LFB137:
 735:Src/main.c    ****     }
 736:Src/main.c    **** }
 737:Src/main.c    **** 
 738:Src/main.c    **** // ******
 739:Src/main.c    **** // TESTS
 740:Src/main.c    **** // ******
 741:Src/main.c    **** 
 742:Src/main.c    **** /*
 743:Src/main.c    ****  * Instructions:
 744:Src/main.c    ****  *      Run test_All() before the main while loop
 745:Src/main.c    ****  *      - Put a pull up resistor on htim3 PWM waves, measure voltage on pin
 746:Src/main.c    ****  *      - Measure voltage on pin of htim1
 747:Src/main.c    ****  *      - Give ADC pins values and read off of screen
 748:Src/main.c    ****  */
 749:Src/main.c    **** 
 750:Src/main.c    **** /*
 751:Src/main.c    ****  * Test PWM
 752:Src/main.c    ****  * Output: htim1 channel 1 through 4, PWM wave. Confirm these
 753:Src/main.c    ****  *         PWM waves via an oscilliscope.
 754:Src/main.c    ****  */
 755:Src/main.c    **** void test_PWM_htim1()
 756:Src/main.c    **** {
 1120              		.loc 1 756 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124 0000 10B5     		push	{r4, lr}
 1125              	.LCFI23:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 35


 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 4, -8
 1128              		.cfi_offset 14, -4
 757:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1129              		.loc 1 757 0
 1130 0002 0C4C     		ldr	r4, .L80
 1131 0004 2046     		mov	r0, r4
 1132 0006 0021     		movs	r1, #0
 1133 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1134              	.LVL122:
 758:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 759:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1135              		.loc 1 759 0
 1136 000c 2046     		mov	r0, r4
 1137 000e 0821     		movs	r1, #8
 1138 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1139              	.LVL123:
 760:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 761:Src/main.c    ****     int s = 0;
 1140              		.loc 1 761 0
 1141 0014 0024     		movs	r4, #0
 762:Src/main.c    ****     while (s < 1000)
 1142              		.loc 1 762 0
 1143 0016 08E0     		b	.L77
 1144              	.LVL124:
 1145              	.L78:
 763:Src/main.c    ****     {
 764:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, s);
 1146              		.loc 1 764 0
 1147 0018 064B     		ldr	r3, .L80
 1148 001a 1B68     		ldr	r3, [r3]
 1149 001c 5C63     		str	r4, [r3, #52]
 765:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 766:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, s);
 1150              		.loc 1 766 0
 1151 001e DC63     		str	r4, [r3, #60]
 767:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 768:Src/main.c    ****         s += 100;
 1152              		.loc 1 768 0
 1153 0020 6434     		adds	r4, r4, #100
 1154              	.LVL125:
 769:Src/main.c    ****         HAL_Delay(1000);
 1155              		.loc 1 769 0
 1156 0022 4FF47A70 		mov	r0, #1000
 1157 0026 FFF7FEFF 		bl	HAL_Delay
 1158              	.LVL126:
 1159              	.L77:
 762:Src/main.c    ****     {
 1160              		.loc 1 762 0
 1161 002a B4F57A7F 		cmp	r4, #1000
 1162 002e F3DB     		blt	.L78
 770:Src/main.c    ****     }
 771:Src/main.c    **** }
 1163              		.loc 1 771 0
 1164 0030 10BD     		pop	{r4, pc}
 1165              	.LVL127:
 1166              	.L81:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 36


 1167 0032 00BF     		.align	2
 1168              	.L80:
 1169 0034 00000000 		.word	htim1
 1170              		.cfi_endproc
 1171              	.LFE137:
 1173              		.section	.text.test_PWM_htim3,"ax",%progbits
 1174              		.align	2
 1175              		.global	test_PWM_htim3
 1176              		.thumb
 1177              		.thumb_func
 1179              	test_PWM_htim3:
 1180              	.LFB138:
 772:Src/main.c    **** 
 773:Src/main.c    **** /*
 774:Src/main.c    ****  * Test PWM
 775:Src/main.c    ****  * Output: htim3 channel 1 through 3, PWM wave. Confirm these
 776:Src/main.c    ****  *         PWM waves via an oscilliscope.
 777:Src/main.c    ****  */
 778:Src/main.c    **** void test_PWM_htim3()
 779:Src/main.c    **** {
 1181              		.loc 1 779 0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 0, uses_anonymous_args = 0
 1185 0000 10B5     		push	{r4, lr}
 1186              	.LCFI24:
 1187              		.cfi_def_cfa_offset 8
 1188              		.cfi_offset 4, -8
 1189              		.cfi_offset 14, -4
 780:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1190              		.loc 1 780 0
 1191 0002 0F4C     		ldr	r4, .L86
 1192 0004 2046     		mov	r0, r4
 1193 0006 0021     		movs	r1, #0
 1194 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1195              	.LVL128:
 781:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1196              		.loc 1 781 0
 1197 000c 2046     		mov	r0, r4
 1198 000e 0421     		movs	r1, #4
 1199 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1200              	.LVL129:
 782:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1201              		.loc 1 782 0
 1202 0014 2046     		mov	r0, r4
 1203 0016 0821     		movs	r1, #8
 1204 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1205              	.LVL130:
 783:Src/main.c    **** 
 784:Src/main.c    ****     int s = 500;
 1206              		.loc 1 784 0
 1207 001c 4FF4FA74 		mov	r4, #500
 785:Src/main.c    ****     while (s < 2400)
 1208              		.loc 1 785 0
 1209 0020 09E0     		b	.L83
 1210              	.LVL131:
 1211              	.L84:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 37


 786:Src/main.c    ****     {
 787:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s);
 1212              		.loc 1 787 0
 1213 0022 074B     		ldr	r3, .L86
 1214 0024 1B68     		ldr	r3, [r3]
 1215 0026 5C63     		str	r4, [r3, #52]
 788:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s);
 1216              		.loc 1 788 0
 1217 0028 9C63     		str	r4, [r3, #56]
 789:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, s);
 1218              		.loc 1 789 0
 1219 002a DC63     		str	r4, [r3, #60]
 790:Src/main.c    ****         s += 100;
 1220              		.loc 1 790 0
 1221 002c 6434     		adds	r4, r4, #100
 1222              	.LVL132:
 791:Src/main.c    ****         HAL_Delay(500);
 1223              		.loc 1 791 0
 1224 002e 4FF4FA70 		mov	r0, #500
 1225 0032 FFF7FEFF 		bl	HAL_Delay
 1226              	.LVL133:
 1227              	.L83:
 785:Src/main.c    ****     {
 1228              		.loc 1 785 0
 1229 0036 B4F5166F 		cmp	r4, #2400
 1230 003a F2DB     		blt	.L84
 792:Src/main.c    ****     }
 793:Src/main.c    **** }
 1231              		.loc 1 793 0
 1232 003c 10BD     		pop	{r4, pc}
 1233              	.LVL134:
 1234              	.L87:
 1235 003e 00BF     		.align	2
 1236              	.L86:
 1237 0040 00000000 		.word	htim3
 1238              		.cfi_endproc
 1239              	.LFE138:
 1241              		.section	.text.test_ADC,"ax",%progbits
 1242              		.align	2
 1243              		.global	test_ADC
 1244              		.thumb
 1245              		.thumb_func
 1247              	test_ADC:
 1248              	.LFB139:
 794:Src/main.c    **** 
 795:Src/main.c    **** void test_ADC()
 796:Src/main.c    **** {
 1249              		.loc 1 796 0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 24
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 1253 0000 10B5     		push	{r4, lr}
 1254              	.LCFI25:
 1255              		.cfi_def_cfa_offset 8
 1256              		.cfi_offset 4, -8
 1257              		.cfi_offset 14, -4
 1258 0002 86B0     		sub	sp, sp, #24
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 38


 1259              	.LCFI26:
 1260              		.cfi_def_cfa_offset 32
 797:Src/main.c    ****     char msg[18] = "";
 1261              		.loc 1 797 0
 1262 0004 0023     		movs	r3, #0
 1263 0006 0193     		str	r3, [sp, #4]
 1264 0008 0293     		str	r3, [sp, #8]
 1265 000a 0393     		str	r3, [sp, #12]
 1266 000c 0493     		str	r3, [sp, #16]
 1267 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
 798:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1268              		.loc 1 798 0
 1269 0012 0F48     		ldr	r0, .L91
 1270 0014 0F49     		ldr	r1, .L91+4
 1271 0016 4FF40062 		mov	r2, #2048
 1272 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1273              	.LVL135:
 1274              	.L89:
 1275              	.LBB3:
 799:Src/main.c    **** 
 800:Src/main.c    ****     while (1)
 801:Src/main.c    ****     {
 802:Src/main.c    ****         int ch_5 = adc_values[0];
 1276              		.loc 1 802 0 discriminator 1
 1277 001e 0E4B     		ldr	r3, .L91+8
 1278              	.LVL136:
 803:Src/main.c    ****         int ch_4 = adc_values[1];
 1279              		.loc 1 803 0 discriminator 1
 1280 0020 5C68     		ldr	r4, [r3, #4]
 1281              	.LVL137:
 804:Src/main.c    **** 
 805:Src/main.c    ****         sprintf(msg, "ch_5: %d\n", ch_5);
 1282              		.loc 1 805 0 discriminator 1
 1283 0022 01A8     		add	r0, sp, #4
 1284 0024 0D49     		ldr	r1, .L91+12
 1285 0026 1A68     		ldr	r2, [r3]
 1286 0028 FFF7FEFF 		bl	sprintf
 1287              	.LVL138:
 806:Src/main.c    ****         print(msg, 0);
 1288              		.loc 1 806 0 discriminator 1
 1289 002c 01A8     		add	r0, sp, #4
 1290 002e 0021     		movs	r1, #0
 1291 0030 FFF7FEFF 		bl	print
 1292              	.LVL139:
 807:Src/main.c    **** 
 808:Src/main.c    ****         sprintf(msg, "ch_4: %d\n", ch_4);
 1293              		.loc 1 808 0 discriminator 1
 1294 0034 01A8     		add	r0, sp, #4
 1295 0036 0A49     		ldr	r1, .L91+16
 1296 0038 2246     		mov	r2, r4
 1297 003a FFF7FEFF 		bl	sprintf
 1298              	.LVL140:
 809:Src/main.c    ****         print(msg, 2);
 1299              		.loc 1 809 0 discriminator 1
 1300 003e 01A8     		add	r0, sp, #4
 1301 0040 0221     		movs	r1, #2
 1302 0042 FFF7FEFF 		bl	print
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 39


 1303              	.LVL141:
 810:Src/main.c    **** 
 811:Src/main.c    ****         HAL_Delay(100);
 1304              		.loc 1 811 0 discriminator 1
 1305 0046 6420     		movs	r0, #100
 1306 0048 FFF7FEFF 		bl	HAL_Delay
 1307              	.LVL142:
 1308              	.LBE3:
 812:Src/main.c    ****     }
 1309              		.loc 1 812 0 discriminator 1
 1310 004c E7E7     		b	.L89
 1311              	.L92:
 1312 004e 00BF     		.align	2
 1313              	.L91:
 1314 0050 00000000 		.word	hadc1
 1315 0054 00000000 		.word	dma_buffer
 1316 0058 00000000 		.word	adc_values
 1317 005c 64000000 		.word	.LC9
 1318 0060 70000000 		.word	.LC10
 1319              		.cfi_endproc
 1320              	.LFE139:
 1322              		.section	.text.test_All,"ax",%progbits
 1323              		.align	2
 1324              		.global	test_All
 1325              		.thumb
 1326              		.thumb_func
 1328              	test_All:
 1329              	.LFB140:
 813:Src/main.c    **** }
 814:Src/main.c    **** 
 815:Src/main.c    **** /**
 816:Src/main.c    ****  * Test all PWM and ADC - Read PWM waves, input ADC voltages 
 817:Src/main.c    ****  * and read values on OLED
 818:Src/main.c    ****  *      htim1 -> CH1, CH2, CH3, CH4
 819:Src/main.c    ****  *      htim3 -> CH1, CH2, CH3
 820:Src/main.c    ****  *      ADC   -> CH5, CH4
 821:Src/main.c    ****  */
 822:Src/main.c    **** void test_All()
 823:Src/main.c    **** {
 1330              		.loc 1 823 0
 1331              		.cfi_startproc
 1332              		@ Volatile: function does not return.
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335 0000 08B5     		push	{r3, lr}
 1336              	.LCFI27:
 1337              		.cfi_def_cfa_offset 8
 1338              		.cfi_offset 3, -8
 1339              		.cfi_offset 14, -4
 824:Src/main.c    ****     test_PWM_htim1();
 1340              		.loc 1 824 0
 1341 0002 FFF7FEFF 		bl	test_PWM_htim1
 1342              	.LVL143:
 825:Src/main.c    ****     test_PWM_htim3();
 1343              		.loc 1 825 0
 1344 0006 FFF7FEFF 		bl	test_PWM_htim3
 1345              	.LVL144:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 40


 826:Src/main.c    ****     test_ADC();
 1346              		.loc 1 826 0
 1347 000a FFF7FEFF 		bl	test_ADC
 1348              	.LVL145:
 1349              		.cfi_endproc
 1350              	.LFE140:
 1352 000e 00BF     		.section	.text._Error_Handler,"ax",%progbits
 1353              		.align	2
 1354              		.global	_Error_Handler
 1355              		.thumb
 1356              		.thumb_func
 1358              	_Error_Handler:
 1359              	.LFB141:
 827:Src/main.c    **** }
 828:Src/main.c    **** // ******
 829:Src/main.c    **** // END TESTS
 830:Src/main.c    **** // ******
 831:Src/main.c    **** 
 832:Src/main.c    **** /* USER CODE END 4 */
 833:Src/main.c    **** 
 834:Src/main.c    **** /**
 835:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 836:Src/main.c    ****   * @param  file: The file name as string.
 837:Src/main.c    ****   * @param  line: The line in file as a number.
 838:Src/main.c    ****   * @retval None
 839:Src/main.c    ****   */
 840:Src/main.c    **** void _Error_Handler(char *file, int line)
 841:Src/main.c    **** {
 1360              		.loc 1 841 0
 1361              		.cfi_startproc
 1362              		@ Volatile: function does not return.
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365              		@ link register save eliminated.
 1366              	.LVL146:
 1367              	.L96:
 842:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 843:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 844:Src/main.c    ****     while (1)
 845:Src/main.c    ****     {
 846:Src/main.c    ****     }
 1368              		.loc 1 846 0 discriminator 1
 1369 0000 FEE7     		b	.L96
 1370              		.cfi_endproc
 1371              	.LFE141:
 1373 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1374              		.align	2
 1375              		.global	SystemClock_Config
 1376              		.thumb
 1377              		.thumb_func
 1379              	SystemClock_Config:
 1380              	.LFB125:
 407:Src/main.c    **** 
 1381              		.loc 1 407 0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 80
 1384              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 41


 1385 0000 00B5     		push	{lr}
 1386              	.LCFI28:
 1387              		.cfi_def_cfa_offset 4
 1388              		.cfi_offset 14, -4
 1389 0002 95B0     		sub	sp, sp, #84
 1390              	.LCFI29:
 1391              		.cfi_def_cfa_offset 88
 1392              	.LBB4:
 414:Src/main.c    **** 
 1393              		.loc 1 414 0
 1394 0004 0022     		movs	r2, #0
 1395 0006 0192     		str	r2, [sp, #4]
 1396 0008 2A4B     		ldr	r3, .L101
 1397 000a 196C     		ldr	r1, [r3, #64]
 1398 000c 41F08051 		orr	r1, r1, #268435456
 1399 0010 1964     		str	r1, [r3, #64]
 1400 0012 1B6C     		ldr	r3, [r3, #64]
 1401 0014 03F08053 		and	r3, r3, #268435456
 1402 0018 0193     		str	r3, [sp, #4]
 1403 001a 019B     		ldr	r3, [sp, #4]
 1404              	.LBE4:
 1405              	.LBB5:
 416:Src/main.c    **** 
 1406              		.loc 1 416 0
 1407 001c 0292     		str	r2, [sp, #8]
 1408 001e 2649     		ldr	r1, .L101+4
 1409 0020 0B68     		ldr	r3, [r1]
 1410 0022 23F44043 		bic	r3, r3, #49152
 1411 0026 43F40043 		orr	r3, r3, #32768
 1412 002a 0B60     		str	r3, [r1]
 1413 002c 0B68     		ldr	r3, [r1]
 1414 002e 03F44043 		and	r3, r3, #49152
 1415 0032 0293     		str	r3, [sp, #8]
 1416 0034 029B     		ldr	r3, [sp, #8]
 1417              	.LBE5:
 420:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1418              		.loc 1 420 0
 1419 0036 0223     		movs	r3, #2
 1420 0038 0893     		str	r3, [sp, #32]
 421:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 1421              		.loc 1 421 0
 1422 003a 0121     		movs	r1, #1
 1423 003c 0B91     		str	r1, [sp, #44]
 422:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1424              		.loc 1 422 0
 1425 003e 1021     		movs	r1, #16
 1426 0040 0C91     		str	r1, [sp, #48]
 423:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1427              		.loc 1 423 0
 1428 0042 0E93     		str	r3, [sp, #56]
 424:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1429              		.loc 1 424 0
 1430 0044 0F92     		str	r2, [sp, #60]
 425:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 1431              		.loc 1 425 0
 1432 0046 0822     		movs	r2, #8
 1433 0048 1092     		str	r2, [sp, #64]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 42


 426:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1434              		.loc 1 426 0
 1435 004a 4822     		movs	r2, #72
 1436 004c 1192     		str	r2, [sp, #68]
 427:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1437              		.loc 1 427 0
 1438 004e 1293     		str	r3, [sp, #72]
 428:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1439              		.loc 1 428 0
 1440 0050 0423     		movs	r3, #4
 1441 0052 1393     		str	r3, [sp, #76]
 429:Src/main.c    ****   {
 1442              		.loc 1 429 0
 1443 0054 08A8     		add	r0, sp, #32
 1444 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1445              	.LVL147:
 1446 005a 20B1     		cbz	r0, .L98
 431:Src/main.c    ****   }
 1447              		.loc 1 431 0
 1448 005c 1748     		ldr	r0, .L101+8
 1449 005e 40F2AF11 		movw	r1, #431
 1450 0062 FFF7FEFF 		bl	_Error_Handler
 1451              	.LVL148:
 1452              	.L98:
 436:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1453              		.loc 1 436 0
 1454 0066 0F23     		movs	r3, #15
 1455 0068 0393     		str	r3, [sp, #12]
 438:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1456              		.loc 1 438 0
 1457 006a 0221     		movs	r1, #2
 1458 006c 0491     		str	r1, [sp, #16]
 439:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1459              		.loc 1 439 0
 1460 006e 0023     		movs	r3, #0
 1461 0070 0593     		str	r3, [sp, #20]
 440:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1462              		.loc 1 440 0
 1463 0072 4FF48052 		mov	r2, #4096
 1464 0076 0692     		str	r2, [sp, #24]
 441:Src/main.c    **** 
 1465              		.loc 1 441 0
 1466 0078 0793     		str	r3, [sp, #28]
 443:Src/main.c    ****   {
 1467              		.loc 1 443 0
 1468 007a 03A8     		add	r0, sp, #12
 1469 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1470              	.LVL149:
 1471 0080 20B1     		cbz	r0, .L99
 445:Src/main.c    ****   }
 1472              		.loc 1 445 0
 1473 0082 0E48     		ldr	r0, .L101+8
 1474 0084 40F2BD11 		movw	r1, #445
 1475 0088 FFF7FEFF 		bl	_Error_Handler
 1476              	.LVL150:
 1477              	.L99:
 450:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 43


 1478              		.loc 1 450 0
 1479 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1480              	.LVL151:
 1481 0090 0B4B     		ldr	r3, .L101+12
 1482 0092 A3FB0030 		umull	r3, r0, r3, r0
 1483 0096 8009     		lsrs	r0, r0, #6
 1484 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1485              	.LVL152:
 454:Src/main.c    **** 
 1486              		.loc 1 454 0
 1487 009c 0420     		movs	r0, #4
 1488 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1489              	.LVL153:
 457:Src/main.c    **** }
 1490              		.loc 1 457 0
 1491 00a2 4FF0FF30 		mov	r0, #-1
 1492 00a6 0021     		movs	r1, #0
 1493 00a8 0A46     		mov	r2, r1
 1494 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1495              	.LVL154:
 458:Src/main.c    **** 
 1496              		.loc 1 458 0
 1497 00ae 15B0     		add	sp, sp, #84
 1498              	.LCFI30:
 1499              		.cfi_def_cfa_offset 4
 1500              		@ sp needed
 1501 00b0 5DF804FB 		ldr	pc, [sp], #4
 1502              	.L102:
 1503              		.align	2
 1504              	.L101:
 1505 00b4 00380240 		.word	1073887232
 1506 00b8 00700040 		.word	1073770496
 1507 00bc 7C000000 		.word	.LC11
 1508 00c0 D34D6210 		.word	274877907
 1509              		.cfi_endproc
 1510              	.LFE125:
 1512              		.section	.text.main,"ax",%progbits
 1513              		.align	2
 1514              		.global	main
 1515              		.thumb
 1516              		.thumb_func
 1518              	main:
 1519              	.LFB124:
 112:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1520              		.loc 1 112 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 24
 1523              		@ frame_needed = 0, uses_anonymous_args = 0
 1524 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1525              	.LCFI31:
 1526              		.cfi_def_cfa_offset 20
 1527              		.cfi_offset 4, -20
 1528              		.cfi_offset 5, -16
 1529              		.cfi_offset 6, -12
 1530              		.cfi_offset 7, -8
 1531              		.cfi_offset 14, -4
 1532 0002 89B0     		sub	sp, sp, #36
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 44


 1533              	.LCFI32:
 1534              		.cfi_def_cfa_offset 56
 120:Src/main.c    **** 
 1535              		.loc 1 120 0
 1536 0004 FFF7FEFF 		bl	HAL_Init
 1537              	.LVL155:
 127:Src/main.c    **** 
 1538              		.loc 1 127 0
 1539 0008 FFF7FEFF 		bl	SystemClock_Config
 1540              	.LVL156:
 134:Src/main.c    ****   MX_DMA_Init();
 1541              		.loc 1 134 0
 1542 000c FFF7FEFF 		bl	MX_GPIO_Init
 1543              	.LVL157:
 135:Src/main.c    ****   MX_TIM3_Init();
 1544              		.loc 1 135 0
 1545 0010 FFF7FEFF 		bl	MX_DMA_Init
 1546              	.LVL158:
 136:Src/main.c    ****   MX_TIM1_Init();
 1547              		.loc 1 136 0
 1548 0014 FFF7FEFF 		bl	MX_TIM3_Init
 1549              	.LVL159:
 137:Src/main.c    ****   MX_TIM2_Init();
 1550              		.loc 1 137 0
 1551 0018 FFF7FEFF 		bl	MX_TIM1_Init
 1552              	.LVL160:
 138:Src/main.c    ****   MX_ADC1_Init();
 1553              		.loc 1 138 0
 1554 001c FFF7FEFF 		bl	MX_TIM2_Init
 1555              	.LVL161:
 139:Src/main.c    ****   MX_TIM4_Init();
 1556              		.loc 1 139 0
 1557 0020 FFF7FEFF 		bl	MX_ADC1_Init
 1558              	.LVL162:
 140:Src/main.c    ****   MX_TIM9_Init();
 1559              		.loc 1 140 0
 1560 0024 FFF7FEFF 		bl	MX_TIM4_Init
 1561              	.LVL163:
 141:Src/main.c    ****   MX_TIM5_Init();
 1562              		.loc 1 141 0
 1563 0028 FFF7FEFF 		bl	MX_TIM9_Init
 1564              	.LVL164:
 142:Src/main.c    ****   MX_I2C1_Init();
 1565              		.loc 1 142 0
 1566 002c FFF7FEFF 		bl	MX_TIM5_Init
 1567              	.LVL165:
 143:Src/main.c    ****   MX_USART6_UART_Init();
 1568              		.loc 1 143 0
 1569 0030 FFF7FEFF 		bl	MX_I2C1_Init
 1570              	.LVL166:
 144:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1571              		.loc 1 144 0
 1572 0034 FFF7FEFF 		bl	MX_USART6_UART_Init
 1573              	.LVL167:
 161:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1574              		.loc 1 161 0
 1575 0038 5848     		ldr	r0, .L110
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 45


 1576 003a 1821     		movs	r1, #24
 1577 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1578              	.LVL168:
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1579              		.loc 1 162 0
 1580 0040 5748     		ldr	r0, .L110+4
 1581 0042 1821     		movs	r1, #24
 1582 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1583              	.LVL169:
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 1584              		.loc 1 163 0
 1585 0048 564C     		ldr	r4, .L110+8
 1586 004a 2046     		mov	r0, r4
 1587 004c 0021     		movs	r1, #0
 1588 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1589              	.LVL170:
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1590              		.loc 1 164 0
 1591 0052 2046     		mov	r0, r4
 1592 0054 0421     		movs	r1, #4
 1593 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1594              	.LVL171:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 1595              		.loc 1 165 0
 1596 005a 2046     		mov	r0, r4
 1597 005c 0821     		movs	r1, #8
 1598 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1599              	.LVL172:
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1600              		.loc 1 166 0
 1601 0062 2046     		mov	r0, r4
 1602 0064 0C21     		movs	r1, #12
 1603 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1604              	.LVL173:
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1605              		.loc 1 167 0
 1606 006a 4F4C     		ldr	r4, .L110+12
 1607 006c 2046     		mov	r0, r4
 1608 006e 0021     		movs	r1, #0
 1609 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1610              	.LVL174:
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1611              		.loc 1 168 0
 1612 0074 2046     		mov	r0, r4
 1613 0076 0421     		movs	r1, #4
 1614 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1615              	.LVL175:
 169:Src/main.c    **** 
 1616              		.loc 1 169 0
 1617 007c 2046     		mov	r0, r4
 1618 007e 0821     		movs	r1, #8
 1619 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1620              	.LVL176:
 172:Src/main.c    ****     print("Starting\n", 0);
 1621              		.loc 1 172 0
 1622 0084 FFF7FEFF 		bl	ssd1306_Init
 1623              	.LVL177:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 46


 173:Src/main.c    ****     claw_init(&htim3);
 1624              		.loc 1 173 0
 1625 0088 4848     		ldr	r0, .L110+16
 1626 008a 0021     		movs	r1, #0
 1627 008c FFF7FEFF 		bl	print
 1628              	.LVL178:
 174:Src/main.c    ****     basket_init(&htim3);
 1629              		.loc 1 174 0
 1630 0090 2046     		mov	r0, r4
 1631 0092 FFF7FEFF 		bl	claw_init
 1632              	.LVL179:
 175:Src/main.c    **** 
 1633              		.loc 1 175 0
 1634 0096 2046     		mov	r0, r4
 1635 0098 FFF7FEFF 		bl	basket_init
 1636              	.LVL180:
 178:Src/main.c    **** 
 1637              		.loc 1 178 0
 1638 009c 0223     		movs	r3, #2
 1639 009e 0093     		str	r3, [sp]
 1640 00a0 0121     		movs	r1, #1
 1641 00a2 0191     		str	r1, [sp, #4]
 1642 00a4 02A8     		add	r0, sp, #8
 1643 00a6 0022     		movs	r2, #0
 1644 00a8 1346     		mov	r3, r2
 1645 00aa FFF7FEFF 		bl	pid_Init
 1646              	.LVL181:
 181:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1647              		.loc 1 181 0
 1648 00ae 0020     		movs	r0, #0
 1649 00b0 3F4B     		ldr	r3, .L110+20
 1650 00b2 1988     		ldrh	r1, [r3]
 1651 00b4 FFF7FEFF 		bl	set_motor_speed
 1652              	.LVL182:
 182:Src/main.c    **** 
 1653              		.loc 1 182 0
 1654 00b8 0820     		movs	r0, #8
 1655 00ba 3E4B     		ldr	r3, .L110+24
 1656 00bc 1988     		ldrh	r1, [r3]
 1657 00be FFF7FEFF 		bl	set_motor_speed
 1658              	.LVL183:
 185:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 1659              		.loc 1 185 0
 1660 00c2 0620     		movs	r0, #6
 1661 00c4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1662              	.LVL184:
 186:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 1663              		.loc 1 186 0
 1664 00c8 0021     		movs	r1, #0
 1665 00ca 3B4B     		ldr	r3, .L110+28
 1666 00cc 1970     		strb	r1, [r3]
 187:Src/main.c    **** 
 1667              		.loc 1 187 0
 1668 00ce 3B4B     		ldr	r3, .L110+32
 1669 00d0 1970     		strb	r1, [r3]
 189:Src/main.c    ****   /* USER CODE END 2 */
 1670              		.loc 1 189 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 47


 1671 00d2 3B48     		ldr	r0, .L110+36
 1672 00d4 FFF7FEFF 		bl	print
 1673              	.LVL185:
 1674              	.L104:
 209:Src/main.c    ****         //     uint32_t start = HAL_GetTick();
 1675              		.loc 1 209 0
 1676 00d8 0A20     		movs	r0, #10
 1677 00da FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1678              	.LVL186:
 214:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 1679              		.loc 1 214 0
 1680 00de 02A8     		add	r0, sp, #8
 1681 00e0 FFF7FEFF 		bl	drive_straight
 1682              	.LVL187:
 216:Src/main.c    ****                 {
 1683              		.loc 1 216 0
 1684 00e4 354B     		ldr	r3, .L110+32
 1685 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1686 00e8 012B     		cmp	r3, #1
 1687 00ea F5D1     		bne	.L104
 1688              	.LBB6:
 218:Src/main.c    ****                     while (HAL_GetTick() - timeee < 30)
 1689              		.loc 1 218 0
 1690 00ec FFF7FEFF 		bl	HAL_GetTick
 1691              	.LVL188:
 1692 00f0 0446     		mov	r4, r0
 1693              	.LVL189:
 219:Src/main.c    ****                     {
 1694              		.loc 1 219 0
 1695 00f2 0BE0     		b	.L106
 1696              	.LVL190:
 1697              	.L107:
 221:Src/main.c    ****                         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 1698              		.loc 1 221 0
 1699 00f4 0520     		movs	r0, #5
 1700 00f6 FFF7FEFF 		bl	HAL_Delay
 1701              	.LVL191:
 222:Src/main.c    ****                         {
 1702              		.loc 1 222 0
 1703 00fa 3248     		ldr	r0, .L110+40
 1704 00fc 1021     		movs	r1, #16
 1705 00fe FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1706              	.LVL192:
 1707 0102 0128     		cmp	r0, #1
 1708 0104 02D1     		bne	.L106
 224:Src/main.c    ****                         }
 1709              		.loc 1 224 0
 1710 0106 0022     		movs	r2, #0
 1711 0108 2C4B     		ldr	r3, .L110+32
 1712 010a 1A70     		strb	r2, [r3]
 1713              	.L106:
 219:Src/main.c    ****                     {
 1714              		.loc 1 219 0
 1715 010c FFF7FEFF 		bl	HAL_GetTick
 1716              	.LVL193:
 1717 0110 001B     		subs	r0, r0, r4
 1718 0112 1D28     		cmp	r0, #29
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 48


 1719 0114 EED9     		bls	.L107
 229:Src/main.c    ****                     {
 1720              		.loc 1 229 0
 1721 0116 294B     		ldr	r3, .L110+32
 1722 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1723 011a 012B     		cmp	r3, #1
 1724 011c DCD1     		bne	.L104
 231:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_1, 0);
 1725              		.loc 1 231 0
 1726 011e 4FF4C870 		mov	r0, #400
 1727 0122 FFF7FEFF 		bl	HAL_Delay
 1728              	.LVL194:
 232:Src/main.c    ****                         set_motor_speed(TIM_CHANNEL_3, 0);
 1729              		.loc 1 232 0
 1730 0126 0020     		movs	r0, #0
 1731 0128 0146     		mov	r1, r0
 1732 012a FFF7FEFF 		bl	set_motor_speed
 1733              	.LVL195:
 233:Src/main.c    ****                         close_claw(&htim3);
 1734              		.loc 1 233 0
 1735 012e 0820     		movs	r0, #8
 1736 0130 0021     		movs	r1, #0
 1737 0132 FFF7FEFF 		bl	set_motor_speed
 1738              	.LVL196:
 234:Src/main.c    ****                         arm_up(&htim3);
 1739              		.loc 1 234 0
 1740 0136 1C4C     		ldr	r4, .L110+12
 1741              	.LVL197:
 1742 0138 2046     		mov	r0, r4
 1743 013a FFF7FEFF 		bl	close_claw
 1744              	.LVL198:
 235:Src/main.c    ****                         // TODO: delete next line, there for testing!!!
 1745              		.loc 1 235 0
 1746 013e 2046     		mov	r0, r4
 1747 0140 FFF7FEFF 		bl	arm_up
 1748              	.LVL199:
 237:Src/main.c    ****                         HAL_NVIC_DisableIRQ(CLAW_INT_EXTI_IRQn);
 1749              		.loc 1 237 0
 1750 0144 4FF47A70 		mov	r0, #1000
 1751 0148 FFF7FEFF 		bl	HAL_Delay
 1752              	.LVL200:
 238:Src/main.c    ****                         CLAW_INT_STATE = NOT_FLAGGED;
 1753              		.loc 1 238 0
 1754 014c 0A20     		movs	r0, #10
 1755 014e FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1756              	.LVL201:
 239:Src/main.c    ****                         ++ewok_cnt;
 1757              		.loc 1 239 0
 1758 0152 0027     		movs	r7, #0
 1759 0154 194B     		ldr	r3, .L110+32
 1760 0156 1F70     		strb	r7, [r3]
 1761              	.LVL202:
 255:Src/main.c    ****                             open_claw(&htim3);
 1762              		.loc 1 255 0
 1763 0158 9C20     		movs	r0, #156
 1764 015a FFF7FEFF 		bl	turn_deg
 1765              	.LVL203:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 49


 256:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1766              		.loc 1 256 0
 1767 015e 2046     		mov	r0, r4
 1768 0160 FFF7FEFF 		bl	open_claw
 1769              	.LVL204:
 257:Src/main.c    ****                             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1770              		.loc 1 257 0
 1771 0164 134D     		ldr	r5, .L110+24
 1772 0166 0820     		movs	r0, #8
 1773 0168 2988     		ldrh	r1, [r5]
 1774 016a FFF7FEFF 		bl	set_motor_speed
 1775              	.LVL205:
 258:Src/main.c    ****                             square_edge(&enc_pid);
 1776              		.loc 1 258 0
 1777 016e 104E     		ldr	r6, .L110+20
 1778 0170 3846     		mov	r0, r7
 1779 0172 3188     		ldrh	r1, [r6]
 1780 0174 FFF7FEFF 		bl	set_motor_speed
 1781              	.LVL206:
 259:Src/main.c    ****                             drive_straight_time(&enc_pid, LEFT_SPEED + 50, RIGHT_SPEED + 50, 3000);
 1782              		.loc 1 259 0
 1783 0178 02A8     		add	r0, sp, #8
 1784 017a FFF7FEFF 		bl	square_edge
 1785              	.LVL207:
 260:Src/main.c    ****                             arm_down(&htim3);
 1786              		.loc 1 260 0
 1787 017e 3188     		ldrh	r1, [r6]
 1788 0180 2A88     		ldrh	r2, [r5]
 1789 0182 02A8     		add	r0, sp, #8
 1790 0184 3231     		adds	r1, r1, #50
 1791 0186 3232     		adds	r2, r2, #50
 1792 0188 40F6B833 		movw	r3, #3000
 1793 018c FFF7FEFF 		bl	drive_straight_time
 1794              	.LVL208:
 261:Src/main.c    ****                         }
 1795              		.loc 1 261 0
 1796 0190 2046     		mov	r0, r4
 1797 0192 FFF7FEFF 		bl	arm_down
 1798              	.LVL209:
 1799              	.LBE6:
 400:Src/main.c    **** 
 1800              		.loc 1 400 0
 1801 0196 09B0     		add	sp, sp, #36
 1802              	.LCFI33:
 1803              		.cfi_def_cfa_offset 20
 1804              		@ sp needed
 1805 0198 F0BD     		pop	{r4, r5, r6, r7, pc}
 1806              	.L111:
 1807 019a 00BF     		.align	2
 1808              	.L110:
 1809 019c 00000000 		.word	htim4
 1810 01a0 00000000 		.word	htim5
 1811 01a4 00000000 		.word	htim1
 1812 01a8 00000000 		.word	htim3
 1813 01ac 00000000 		.word	.LC0
 1814 01b0 00000000 		.word	.LANCHOR1
 1815 01b4 00000000 		.word	.LANCHOR0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 50


 1816 01b8 00000000 		.word	PI_INT_STATE
 1817 01bc 00000000 		.word	CLAW_INT_STATE
 1818 01c0 88000000 		.word	.LC12
 1819 01c4 00040240 		.word	1073873920
 1820              		.cfi_endproc
 1821              	.LFE124:
 1823              		.comm	adc_values,8192,4
 1824              		.comm	dma_buffer,8192,4
 1825              		.global	RIGHT_SPEED
 1826              		.global	LEFT_SPEED
 1827              		.section	.data.RIGHT_SPEED,"aw",%progbits
 1828              		.align	1
 1829              		.set	.LANCHOR0,. + 0
 1832              	RIGHT_SPEED:
 1833 0000 5802     		.short	600
 1834              		.section	.data.LEFT_SPEED,"aw",%progbits
 1835              		.align	1
 1836              		.set	.LANCHOR1,. + 0
 1839              	LEFT_SPEED:
 1840 0000 8A02     		.short	650
 1841              		.section	.rodata.str1.4,"aMS",%progbits,1
 1842              		.align	2
 1843              	.LC0:
 1844 0000 53746172 		.ascii	"Starting\012\000"
 1844      74696E67 
 1844      0A00
 1845 000a 0000     		.space	2
 1846              	.LC1:
 1847 000c 256C750A 		.ascii	"%lu\012\000"
 1847      00
 1848 0011 000000   		.space	3
 1849              	.LC2:
 1850 0014 636E7473 		.ascii	"cnts: %d\012\000"
 1850      3A202564 
 1850      0A00
 1851 001e 0000     		.space	2
 1852              	.LC3:
 1853 0020 766C7473 		.ascii	"vlts: %d.%d\012\000"
 1853      3A202564 
 1853      2E25640A 
 1853      00
 1854 002d 000000   		.space	3
 1855              	.LC4:
 1856 0030 54494D35 		.ascii	"TIM5->CNT: %lu\012\000"
 1856      2D3E434E 
 1856      543A2025 
 1856      6C750A00 
 1857              	.LC5:
 1858 0040 54494D34 		.ascii	"TIM4->CNT: %lu\012\000"
 1858      2D3E434E 
 1858      543A2025 
 1858      6C750A00 
 1859              	.LC6:
 1860 0050 454C3A20 		.ascii	"EL: %d\012\000"
 1860      25640A00 
 1861              	.LC7:
 1862 0058 45523A20 		.ascii	"ER: %d\012\000"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 51


 1862      25640A00 
 1863              	.LC8:
 1864 0060 0A00     		.ascii	"\012\000"
 1865 0062 0000     		.space	2
 1866              	.LC9:
 1867 0064 63685F35 		.ascii	"ch_5: %d\012\000"
 1867      3A202564 
 1867      0A00
 1868 006e 0000     		.space	2
 1869              	.LC10:
 1870 0070 63685F34 		.ascii	"ch_4: %d\012\000"
 1870      3A202564 
 1870      0A00
 1871 007a 0000     		.space	2
 1872              	.LC11:
 1873 007c 5372632F 		.ascii	"Src/main.c\000"
 1873      6D61696E 
 1873      2E6300
 1874 0087 00       		.space	1
 1875              	.LC12:
 1876 0088 65776F6B 		.ascii	"ewok\012\000"
 1876      0A00
 1877              		.text
 1878              	.Letext0:
 1879              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1880              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 1881              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 1882              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 1883              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1884              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1885              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1886              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1887              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1888              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1889              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1890              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1891              		.file 14 "Inc/pid.h"
 1892              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 1893              		.file 16 "Inc/adc.h"
 1894              		.file 17 "Inc/tim.h"
 1895              		.file 18 "Inc/usart.h"
 1896              		.file 19 "Inc/extern_vars.h"
 1897              		.file 20 "Inc/filter.h"
 1898              		.file 21 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 1899              		.file 22 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 1900              		.file 23 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1901              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1902              		.file 25 "Inc/claw.h"
 1903              		.file 26 "Inc/gpio.h"
 1904              		.file 27 "Inc/dma.h"
 1905              		.file 28 "Inc/i2c.h"
 1906              		.file 29 "Inc/ssd1306.h"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 52


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:104    .text.alarm_detect:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:109    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:183    .text.alarm_detect:0000000000000078 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:192    .text.print:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:197    .text.print:0000000000000000 print
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:224    .text.print:0000000000000018 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:229    .text.menu:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:234    .text.menu:0000000000000000 menu
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:347    .text.menu:000000000000009c $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:354    .text.set_motor_speed:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:359    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:425    .text.set_motor_speed:000000000000004c $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:432    .text.turn:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:437    .text.turn:0000000000000000 turn
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:653    .text.turn:0000000000000148 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:676    .text.turn_deg:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:681    .text.turn_deg:0000000000000000 turn_deg
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:808    .text.turn_deg:00000000000000b0 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:821    .text.encoder_pid:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:826    .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:881    .text.encoder_pid:000000000000003c $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:886    .text.drive_straight:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:891    .text.drive_straight:0000000000000000 drive_straight
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:915    .text.square_edge:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:920    .text.square_edge:0000000000000000 square_edge
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1037   .text.square_edge:0000000000000094 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1046   .text.drive_straight_time:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1051   .text.drive_straight_time:0000000000000000 drive_straight_time
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1113   .text.test_PWM_htim1:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1118   .text.test_PWM_htim1:0000000000000000 test_PWM_htim1
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1169   .text.test_PWM_htim1:0000000000000034 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1174   .text.test_PWM_htim3:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1179   .text.test_PWM_htim3:0000000000000000 test_PWM_htim3
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1237   .text.test_PWM_htim3:0000000000000040 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1242   .text.test_ADC:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1247   .text.test_ADC:0000000000000000 test_ADC
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1314   .text.test_ADC:0000000000000050 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1323   .text.test_All:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1328   .text.test_All:0000000000000000 test_All
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1353   .text._Error_Handler:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1358   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1374   .text.SystemClock_Config:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1379   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1505   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1513   .text.main:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1518   .text.main:0000000000000000 main
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1809   .text.main:000000000000019c $d
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 53


/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1832   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1839   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1828   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1835   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s:1842   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
strlen
HAL_UART_Transmit
huart6
HAL_GPIO_ReadPin
sprintf
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dadd
pid_GetGain
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
HAL_GetTick
HAL_TIM_PWM_Start
htim3
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_ADC1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
MX_I2C1_Init
MX_USART6_UART_Init
HAL_TIM_Encoder_Start
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccO7O5F1.s 			page 54


ssd1306_Init
claw_init
basket_init
HAL_NVIC_EnableIRQ
close_claw
arm_up
HAL_NVIC_DisableIRQ
open_claw
arm_down
htim4
htim5
PI_INT_STATE
CLAW_INT_STATE
