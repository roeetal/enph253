ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.encoder_pid,"ax",%progbits
  21              		.align	2
  22              		.global	encoder_pid
  23              		.thumb
  24              		.thumb_func
  26              	encoder_pid:
  27              	.LFB136:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****  ******************************************************************************
   3:Src/main.c    ****  * @file           : main.c
   4:Src/main.c    ****  * @brief          : Main program body
   5:Src/main.c    ****  ******************************************************************************
   6:Src/main.c    ****  ** This notice applies to any and all portions of this file
   7:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****  * inserted by the user or by software development tools
  10:Src/main.c    ****  * are owned by their respective copyright owners.
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  13:Src/main.c    ****  *
  14:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****  * are permitted provided that the following conditions are met:
  16:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****  *      and/or other materials provided with the distribution.
  21:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****  *      without specific prior written permission.
  24:Src/main.c    ****  *
  25:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 2


  31:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****  *
  36:Src/main.c    ****  ******************************************************************************
  37:Src/main.c    ****  */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** #include "main.h"
  40:Src/main.c    **** #include "stm32f4xx_hal.h"
  41:Src/main.c    **** #include "adc.h"
  42:Src/main.c    **** #include "dma.h"
  43:Src/main.c    **** #include "i2c.h"
  44:Src/main.c    **** #include "tim.h"
  45:Src/main.c    **** #include "usart.h"
  46:Src/main.c    **** #include "gpio.h"
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** #include "fonts.h"
  50:Src/main.c    **** #include "ssd1306.h"
  51:Src/main.c    **** #include "encoder.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "filter.h"
  54:Src/main.c    **** #include "extern_vars.h"
  55:Src/main.c    **** #include <String.h>
  56:Src/main.c    **** #include "claw.h"
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END Includes */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** // uint16_t LEFT_SPEED = BASE_SPEED+SPEED_DIFF;
  65:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED;
  66:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  67:Src/main.c    **** uint32_t dma_buffer[2048];
  68:Src/main.c    **** uint32_t adc_values[2048];
  69:Src/main.c    **** int ewok_cnt = 0;
  70:Src/main.c    **** int searches = 0;
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  79:Src/main.c    **** void print(char msg[], int row);
  80:Src/main.c    **** PID_t menu();
  81:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  82:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  83:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  84:Src/main.c    **** void turn();
  85:Src/main.c    **** void turn_deg(int16_t);
  86:Src/main.c    **** void alarm_detect();
  87:Src/main.c    **** void drive_straight(PID_t *enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 3


  88:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis);
  89:Src/main.c    **** void square_edge(PID_t *enc_pid);
  90:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid);
  91:Src/main.c    **** void test_All();
  92:Src/main.c    **** void test_PWM_htim1();
  93:Src/main.c    **** void test_PWM_htim3();
  94:Src/main.c    **** 
  95:Src/main.c    **** /* USER CODE END PFP */
  96:Src/main.c    **** 
  97:Src/main.c    **** /* USER CODE BEGIN 0 */
  98:Src/main.c    **** /**
  99:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
 100:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
 101:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
 102:Src/main.c    ****  */
 103:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 104:Src/main.c    **** {
 105:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
 106:Src/main.c    **** }
 107:Src/main.c    **** /* USER CODE END 0 */
 108:Src/main.c    **** 
 109:Src/main.c    **** /**
 110:Src/main.c    ****  * @brief  The application entry point.
 111:Src/main.c    ****  *
 112:Src/main.c    ****  * @retval None
 113:Src/main.c    ****  */
 114:Src/main.c    **** int main(void)
 115:Src/main.c    **** {
 116:Src/main.c    ****     /* USER CODE BEGIN 1 */
 117:Src/main.c    **** 
 118:Src/main.c    ****     /* USER CODE END 1 */
 119:Src/main.c    **** 
 120:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 121:Src/main.c    **** 
 122:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 123:Src/main.c    ****     HAL_Init();
 124:Src/main.c    **** 
 125:Src/main.c    ****     /* USER CODE BEGIN Init */
 126:Src/main.c    **** 
 127:Src/main.c    ****     /* USER CODE END Init */
 128:Src/main.c    **** 
 129:Src/main.c    ****     /* Configure the system clock */
 130:Src/main.c    ****     SystemClock_Config();
 131:Src/main.c    **** 
 132:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 133:Src/main.c    **** 
 134:Src/main.c    ****     /* USER CODE END SysInit */
 135:Src/main.c    **** 
 136:Src/main.c    ****     /* Initialize all configured peripherals */
 137:Src/main.c    ****     MX_GPIO_Init();
 138:Src/main.c    ****     MX_DMA_Init();
 139:Src/main.c    ****     MX_TIM3_Init();
 140:Src/main.c    ****     MX_TIM1_Init();
 141:Src/main.c    ****     MX_TIM2_Init();
 142:Src/main.c    ****     MX_ADC1_Init();
 143:Src/main.c    ****     MX_TIM4_Init();
 144:Src/main.c    ****     MX_TIM9_Init();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 4


 145:Src/main.c    ****     MX_TIM5_Init();
 146:Src/main.c    ****     MX_I2C1_Init();
 147:Src/main.c    ****     MX_USART6_UART_Init();
 148:Src/main.c    ****     /* USER CODE BEGIN 2 */
 149:Src/main.c    **** 
 150:Src/main.c    ****     /* Initialize peripherals */
 151:Src/main.c    ****     /* 
 152:Src/main.c    ****      * Claw jaw: TIM3 CH1
 153:Src/main.c    ****      * Claw arm: TIM3 CH2
 154:Src/main.c    ****      * Basket: TIM3 CH3
 155:Src/main.c    ****      * left forward: TIM1 CH1
 156:Src/main.c    ****      * left backward: TIM1 CH2
 157:Src/main.c    ****      * right forward: TIM1 CH3
 158:Src/main.c    ****      * right backward: TIM1 CH4
 159:Src/main.c    ****      * left encoder: TIM4
 160:Src/main.c    ****      * right encoderL TIM5
 161:Src/main.c    ****      * spare clocks: TIM2, TIM9
 162:Src/main.c    ****      */
 163:Src/main.c    **** 
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 165:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 172:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 173:Src/main.c    **** 
 174:Src/main.c    ****     /* Initialize other stuffs */
 175:Src/main.c    ****     ssd1306_Init();
 176:Src/main.c    ****     print("Starting\n", 0);
 177:Src/main.c    ****     claw_init(&htim3);
 178:Src/main.c    ****     // basket_init(&htim3);
 179:Src/main.c    **** 
 180:Src/main.c    ****     PID_t enc_pid = pid_Init(2, 0, 0, 2, 1);
 181:Src/main.c    **** 
 182:Src/main.c    ****     EDGE_LEFT_STATE = NOT_FLAGGED;
 183:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 184:Src/main.c    **** 
 185:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED+80, RIGHT_SPEED, 2000);
 186:Src/main.c    **** 
 187:Src/main.c    ****     /* Initially disabled interrupts and ADC */
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 189:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 190:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 191:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 192:Src/main.c    **** 
 193:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED+10, 5000);
 194:Src/main.c    ****     print("ewok\n", 0);
 195:Src/main.c    **** 
 196:Src/main.c    ****     /* USER CODE END 2 */
 197:Src/main.c    **** 
 198:Src/main.c    ****     /* Infinite loop */
 199:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 200:Src/main.c    ****     while (1)
 201:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 5


 202:Src/main.c    ****         // /*
 203:Src/main.c    ****         //  * Pi Turning
 204:Src/main.c    ****         //  */
 205:Src/main.c    **** 
 206:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 207:Src/main.c    ****         {
 208:Src/main.c    ****             // Stop Requesting Images
 209:Src/main.c    ****             print("Pi interrupt\n", 0);
 210:Src/main.c    ****             // Turn to ewok
 211:Src/main.c    ****             turn();
 212:Src/main.c    **** 
 213:Src/main.c    ****             // Drive forward w/ PID for 2.5 s, enable claw interrupt
 214:Src/main.c    ****             //    uint32_t start = HAL_GetTick();
 215:Src/main.c    ****             uint32_t time = HAL_GetTick();
 216:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 217:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 218:Src/main.c    ****             while(HAL_GetTick()-time<2800){
 219:Src/main.c    ****                 drive_straight(&enc_pid);
 220:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 221:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 222:Src/main.c    ****                 {
 223:Src/main.c    ****                     print("Claw interrupt\n", 0);
 224:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 225:Src/main.c    ****                     break;
 226:Src/main.c    ****                 }
 227:Src/main.c    ****             }
 228:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 229:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 230:Src/main.c    ****             print("ewok\n", 0);
 231:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 232:Src/main.c    **** 
 233:Src/main.c    ****         }else{
 234:Src/main.c    **** 
 235:Src/main.c    ****             ++searches;
 236:Src/main.c    ****             if(searches == 4 && ewok_cnt == 0){
 237:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 238:Src/main.c    ****             }
 239:Src/main.c    ****             else if(searches == 3 && ewok_cnt == 1){
 240:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 241:Src/main.c    ****             }
 242:Src/main.c    ****             else if(searches == 8 && ewok_cnt == 2){
 243:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 244:Src/main.c    ****             }else{
 245:Src/main.c    ****                 uint32_t time = HAL_GetTick();
 246:Src/main.c    ****                 while(HAL_GetTick()-time<3000 && PI_INT_STATE == NOT_FLAGGED);
 247:Src/main.c    ****                 int thresh = ewok_cnt==1? 500:750;
 248:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 249:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 250:Src/main.c    ****                 time = HAL_GetTick();
 251:Src/main.c    ****                 while(HAL_GetTick()-time<thresh){
 252:Src/main.c    ****                     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 253:Src/main.c    ****                     {
 254:Src/main.c    ****                         print("Claw interrupt\n", 0);
 255:Src/main.c    ****                         debounce_and_grab(&enc_pid);
 256:Src/main.c    ****                         break;
 257:Src/main.c    ****                     }
 258:Src/main.c    ****                     drive_straight(&enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 6


 259:Src/main.c    ****                 }
 260:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 261:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 262:Src/main.c    ****                 print("ewok\n", 0);
 263:Src/main.c    ****             }
 264:Src/main.c    ****         }
 265:Src/main.c    ****         /* 
 266:Src/main.c    ****         // Reset Claw Interrupt before driving forward
 267:Src/main.c    ****         print("MAIN | CLAW_INT UNFLAGGED\n", 0);
 268:Src/main.c    ****         while (HAL_GetTick()-start<3000)
 269:Src/main.c    ****         {
 270:Src/main.c    ****         drive_straight(&enc_pid);
 271:Src/main.c    ****         // If we trip claw interrupt, debounce and grab it
 272:Src/main.c    ****         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 273:Src/main.c    ****         {
 274:Src/main.c    ****         print("Claw interrupt\n", 0);
 275:Src/main.c    ****         if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 276:Src/main.c    ****         }
 277:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 278:Src/main.c    ****         {
 279:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 280:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 281:Src/main.c    ****         print("Edge left triggered", 0);
 282:Src/main.c    ****         turn_deg(30);
 283:Src/main.c    ****         }
 284:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 285:Src/main.c    ****         print("Edge right triggered", 0);
 286:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 287:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 288:Src/main.c    ****         turn_deg(-30);
 289:Src/main.c    ****         }
 290:Src/main.c    ****         }
 291:Src/main.c    **** 
 292:Src/main.c    ****         }
 293:Src/main.c    ****         else
 294:Src/main.c    ****         {
 295:Src/main.c    **** 
 296:Src/main.c    **** */
 297:Src/main.c    ****         /*
 298:Src/main.c    ****          * Look for Ewok
 299:Src/main.c    ****          */
 300:Src/main.c    ****         // CLAW_INT_STATE = NOT_FLAGGED;
 301:Src/main.c    **** 
 302:Src/main.c    ****         // if (ewok_cnt == 4 || ewok_cnt == 5)
 303:Src/main.c    ****         // {
 304:Src/main.c    ****         //     if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 305:Src/main.c    ****         //     {
 306:Src/main.c    ****         //         drive_straight_time(&enc_pid, 0, RIGHT_SPEED - 100, 400);
 307:Src/main.c    ****         //         uint32_t temp_time = HAL_GetTick();
 308:Src/main.c    ****         //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 309:Src/main.c    ****         //     }
 310:Src/main.c    ****         //     else if (EDGE_LEFT_STATE == NOT_FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 311:Src/main.c    ****         //     {
 312:Src/main.c    ****         //         drive_straight_time(&enc_pid, LEFT_SPEED - 100, 0, 400);
 313:Src/main.c    ****         //         uint32_t temp_time = HAL_GetTick();
 314:Src/main.c    ****         //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 315:Src/main.c    ****         //     }
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 7


 316:Src/main.c    ****         // }
 317:Src/main.c    ****         /*
 318:Src/main.c    **** 
 319:Src/main.c    ****            drive_straight_time(&enc_pid, LEFT_SPEED - 100, RIGHT_SPEED - 100, 500);
 320:Src/main.c    ****            print("ewok\n", 0);
 321:Src/main.c    ****            if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 322:Src/main.c    ****            {
 323:Src/main.c    ****            print("Claw interrupt\n", 0);
 324:Src/main.c    ****            if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 325:Src/main.c    ****            }
 326:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 327:Src/main.c    ****            {
 328:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 329:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 330:Src/main.c    ****            print("Edge left triggered", 0);
 331:Src/main.c    ****            turn_deg(30);
 332:Src/main.c    ****            }
 333:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 334:Src/main.c    ****            print("Edge right triggered", 0);
 335:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 336:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 337:Src/main.c    ****            turn_deg(-30);
 338:Src/main.c    ****            }
 339:Src/main.c    ****            uint32_t temp_time = HAL_GetTick();
 340:Src/main.c    ****            */
 341:Src/main.c    ****         /*
 342:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 343:Src/main.c    ****            {
 344:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 345:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 346:Src/main.c    ****            print("Edge left triggered", 0);
 347:Src/main.c    ****            turn_deg(30);
 348:Src/main.c    ****            }
 349:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 350:Src/main.c    ****            print("Edge right triggered", 0);
 351:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 352:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 353:Src/main.c    ****            turn_deg(-30);
 354:Src/main.c    ****            }
 355:Src/main.c    ****            */
 356:Src/main.c    **** 
 357:Src/main.c    ****         /* USER CODE END WHILE */
 358:Src/main.c    **** 
 359:Src/main.c    ****         /* USER CODE BEGIN 3 */
 360:Src/main.c    ****     }
 361:Src/main.c    ****     /* USER CODE END 3 */
 362:Src/main.c    **** 
 363:Src/main.c    **** }
 364:Src/main.c    **** 
 365:Src/main.c    **** /**
 366:Src/main.c    ****  * @brief System Clock Configuration
 367:Src/main.c    ****  * @retval None
 368:Src/main.c    ****  */
 369:Src/main.c    **** void SystemClock_Config(void)
 370:Src/main.c    **** {
 371:Src/main.c    **** 
 372:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 8


 373:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 374:Src/main.c    **** 
 375:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 376:Src/main.c    ****     */
 377:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 378:Src/main.c    **** 
 379:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 380:Src/main.c    **** 
 381:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 382:Src/main.c    ****     */
 383:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 384:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 385:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 386:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 387:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 388:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 389:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 390:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 391:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 392:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 393:Src/main.c    ****     {
 394:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 395:Src/main.c    ****     }
 396:Src/main.c    **** 
 397:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 398:Src/main.c    ****     */
 399:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 400:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 401:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 402:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 403:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 404:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 405:Src/main.c    **** 
 406:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 407:Src/main.c    ****     {
 408:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 409:Src/main.c    ****     }
 410:Src/main.c    **** 
 411:Src/main.c    ****     /**Configure the Systick interrupt time 
 412:Src/main.c    ****     */
 413:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 414:Src/main.c    **** 
 415:Src/main.c    ****     /**Configure the Systick 
 416:Src/main.c    ****     */
 417:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 418:Src/main.c    **** 
 419:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 420:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 421:Src/main.c    **** }
 422:Src/main.c    **** 
 423:Src/main.c    **** /* USER CODE BEGIN 4 */
 424:Src/main.c    **** 
 425:Src/main.c    **** void square_edge(PID_t *enc_pid)
 426:Src/main.c    **** {
 427:Src/main.c    ****     while (1)
 428:Src/main.c    ****     {
 429:Src/main.c    ****         drive_straight(enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 9


 430:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_Read
 431:Src/main.c    ****         {
 432:Src/main.c    ****             break;
 433:Src/main.c    ****         }
 434:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET || HAL_GPIO
 435:Src/main.c    ****         {
 436:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 437:Src/main.c    ****             {
 438:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 439:Src/main.c    ****             }
 440:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET)
 441:Src/main.c    ****             {
 442:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 443:Src/main.c    ****             }
 444:Src/main.c    ****         }
 445:Src/main.c    ****     }
 446:Src/main.c    **** }
 447:Src/main.c    **** 
 448:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis)
 449:Src/main.c    **** {
 450:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 451:Src/main.c    ****     char msg[50] = "";
 452:Src/main.c    ****     uint8_t count = 0; // FIXME: Remove to speed up
 453:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 454:Src/main.c    ****     {
 455:Src/main.c    ****         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 456:Src/main.c    ****         {
 457:Src/main.c    ****             print("Claw interrupt\n", 0);
 458:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 459:Src/main.c    ****         }
 460:Src/main.c    ****         /*
 461:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 462:Src/main.c    ****            {
 463:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 464:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 465:Src/main.c    ****            print("Edge left triggered", 0);
 466:Src/main.c    ****            turn_deg(30);
 467:Src/main.c    ****            }
 468:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 469:Src/main.c    ****            print("Edge right triggered", 0);
 470:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 471:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 472:Src/main.c    ****            turn_deg(-30);
 473:Src/main.c    ****            }
 474:Src/main.c    ****            */
 475:Src/main.c    ****         else 
 476:Src/main.c    ****         {
 477:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, lspeed);
 478:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 479:Src/main.c    ****             drive_straight(enc_pid);
 480:Src/main.c    **** 
 481:Src/main.c    ****         }
 482:Src/main.c    ****     }
 483:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 484:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 485:Src/main.c    **** }
 486:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 10


 487:Src/main.c    **** void drive_straight(PID_t *enc_pid)
 488:Src/main.c    **** {
 489:Src/main.c    ****     encoder_pid(enc_pid);
 490:Src/main.c    ****     HAL_Delay(10);
 491:Src/main.c    **** 
 492:Src/main.c    **** }
 493:Src/main.c    **** 
 494:Src/main.c    **** /*
 495:Src/main.c    ****  * Assume motors are not on.
 496:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 497:Src/main.c    ****  */
 498:Src/main.c    **** void turn()
 499:Src/main.c    **** {
 500:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 501:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 502:Src/main.c    ****     HAL_Delay(500);
 503:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 504:Src/main.c    ****     //double r = atan(1.57*tan()/())
 505:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 506:Src/main.c    ****     TIM4->CNT = 0;
 507:Src/main.c    ****     TIM5->CNT = 0;
 508:Src/main.c    **** 
 509:Src/main.c    ****     char msg[18] = "";
 510:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", (int)counts);
 511:Src/main.c    ****     print(msg, 0);
 512:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 513:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 514:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 515:Src/main.c    ****     print(msg, 2);
 516:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %lu\n", 2 * adc_values[5]);
 517:Src/main.c    ****     print(msg, 0);
 518:Src/main.c    **** 
 519:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
 520:Src/main.c    ****     {
 521:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 522:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 523:Src/main.c    ****         while (TIM5->CNT < counts)
 524:Src/main.c    ****         {
 525:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 526:Src/main.c    ****             // print(msg, 4);
 527:Src/main.c    ****         }
 528:Src/main.c    ****         sprintf(msg, "TURN | TIM5->CNT: %lu\n", TIM5->CNT);
 529:Src/main.c    ****         print(msg, 4);
 530:Src/main.c    ****         TIM5->CNT = 0;
 531:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 532:Src/main.c    ****     }
 533:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 534:Src/main.c    ****     {
 535:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 536:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 537:Src/main.c    ****         while (TIM4->CNT < counts)
 538:Src/main.c    ****         {
 539:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 540:Src/main.c    ****             // print(msg, 4);
 541:Src/main.c    ****         }
 542:Src/main.c    ****         sprintf(msg, "TURN | TIM4->CNT: %lu\n", TIM4->CNT);
 543:Src/main.c    ****         print(msg, 4);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 11


 544:Src/main.c    ****         TIM4->CNT = 0;
 545:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 546:Src/main.c    ****     }
 547:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 548:Src/main.c    **** }
 549:Src/main.c    **** 
 550:Src/main.c    **** /*
 551:Src/main.c    ****  * Assume motors are not on.
 552:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 553:Src/main.c    ****  */
 554:Src/main.c    **** void turn_deg(int16_t deg)
 555:Src/main.c    **** {
 556:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 557:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 558:Src/main.c    ****     if (counts < 0) counts = -counts;
 559:Src/main.c    ****     TIM4->CNT = 0;
 560:Src/main.c    ****     TIM5->CNT = 0;
 561:Src/main.c    **** 
 562:Src/main.c    ****     char msg[50] = "";
 563:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 564:Src/main.c    ****     print(msg, 0);
 565:Src/main.c    **** 
 566:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 567:Src/main.c    ****     {
 568:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 569:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 570:Src/main.c    ****         while (TIM4->CNT < counts)
 571:Src/main.c    ****         {
 572:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 573:Src/main.c    ****             // print(msg, 4);
 574:Src/main.c    ****         }
 575:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM5->CNT: %lu\n", TIM5->CNT);
 576:Src/main.c    ****         print(msg, 4);
 577:Src/main.c    ****         TIM5->CNT = 0;
 578:Src/main.c    ****     }
 579:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 580:Src/main.c    ****     {
 581:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 582:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 583:Src/main.c    ****         while (TIM5->CNT < counts)
 584:Src/main.c    ****         {
 585:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 586:Src/main.c    ****             // print(msg, 4);
 587:Src/main.c    ****         }
 588:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM4->CNT: %lu\n", TIM4->CNT);
 589:Src/main.c    ****         print(msg, 4);
 590:Src/main.c    ****         TIM4->CNT = 0;
 591:Src/main.c    ****     }
 592:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 593:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 594:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 595:Src/main.c    **** }
 596:Src/main.c    **** 
 597:Src/main.c    **** /**
 598:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 599:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 600:Src/main.c    ****  *
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 12


 601:Src/main.c    ****  * @param adc_val, value read from ADC.
 602:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 603:Src/main.c    ****  **/
 604:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 605:Src/main.c    **** {
 606:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
 607:Src/main.c    **** }
 608:Src/main.c    **** 
 609:Src/main.c    **** // Sampling frequency: 72e6/2/(495*2)
 610:Src/main.c    **** void alarm_detect() {
 611:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 612:Src/main.c    ****     HAL_Delay(500);
 613:Src/main.c    ****     char msg[20]="";
 614:Src/main.c    ****     int count = 0;
 615:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 10);
 616:Src/main.c    ****     HAL_Delay(100);
 617:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 10);
 618:Src/main.c    ****     HAL_Delay(100);
 619:Src/main.c    ****     print("worcs", 0);
 620:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 621:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 622:Src/main.c    **** }
 623:Src/main.c    **** 
 624:Src/main.c    **** /**
 625:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 626:Src/main.c    ****  * @param msg, string to print
 627:Src/main.c    ****  * @param row, row to print msg to
 628:Src/main.c    ****  */
 629:Src/main.c    **** void print(char *msg, int row)
 630:Src/main.c    **** {
 631:Src/main.c    ****     // if (row == 0)
 632:Src/main.c    ****     // {
 633:Src/main.c    ****     //     ssd1306_Fill(Black);
 634:Src/main.c    ****     // }
 635:Src/main.c    ****     // ssd1306_SetCursor(0, row * 10);
 636:Src/main.c    ****     // ssd1306_WriteString(msg, Font_7x10, White);
 637:Src/main.c    ****     // ssd1306_UpdateScreen();
 638:Src/main.c    ****     HAL_UART_Transmit(&huart6, (uint8_t *) msg, strlen(msg), 100);
 639:Src/main.c    **** }
 640:Src/main.c    **** 
 641:Src/main.c    **** PID_t menu()
 642:Src/main.c    **** {
 643:Src/main.c    ****     print("Starting\n", 0);
 644:Src/main.c    ****     char msg[20] = "";
 645:Src/main.c    ****     int pid_select = 0;
 646:Src/main.c    ****     uint32_t values[2] = {0, 0};
 647:Src/main.c    ****     while (1)
 648:Src/main.c    ****     {
 649:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 650:Src/main.c    ****         {
 651:Src/main.c    ****             sprintf(msg, "%lu\n", values[pid_select]);
 652:Src/main.c    ****             print(msg, 0);
 653:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 654:Src/main.c    ****             {
 655:Src/main.c    ****                 values[pid_select]++;
 656:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
 657:Src/main.c    ****                 print(msg, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 13


 658:Src/main.c    ****                 HAL_Delay(500);
 659:Src/main.c    ****             }
 660:Src/main.c    ****             ++pid_select;
 661:Src/main.c    ****         }
 662:Src/main.c    ****         if (pid_select == 2)
 663:Src/main.c    ****             break;
 664:Src/main.c    ****     }
 665:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 666:Src/main.c    **** }
 667:Src/main.c    **** 
 668:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 669:Src/main.c    **** {
 670:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 671:Src/main.c    ****     {
 672:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 673:Src/main.c    ****     }
 674:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 675:Src/main.c    ****     {
 676:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 677:Src/main.c    ****     }
 678:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 679:Src/main.c    ****     {
 680:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 681:Src/main.c    ****     }
 682:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 683:Src/main.c    ****     {
 684:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 685:Src/main.c    ****     }
 686:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed > 1000 ? 1000 : speed);
 687:Src/main.c    **** }
 688:Src/main.c    **** 
 689:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 690:Src/main.c    **** {
  29              		.loc 1 690 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 38B5     		push	{r3, r4, r5, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 3, -16
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 14, -4
 691:Src/main.c    ****     /* Get error */
 692:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
  41              		.loc 1 692 0
  42 0002 0E4B     		ldr	r3, .L5
  43 0004 5C6A     		ldr	r4, [r3, #36]
  44              	.LVL1:
 693:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
  45              		.loc 1 693 0
  46 0006 03F58063 		add	r3, r3, #1024
  47 000a 5D6A     		ldr	r5, [r3, #36]
  48              	.LVL2:
 694:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 14


  49              		.loc 1 694 0
  50 000c 631B     		subs	r3, r4, r5
  51 000e 0361     		str	r3, [r0, #16]
 695:Src/main.c    **** 
 696:Src/main.c    ****     /* Get gain */
 697:Src/main.c    ****     // Gain <0 for ride side faster
 698:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
  52              		.loc 1 698 0
  53 0010 FFF7FEFF 		bl	pid_GetGain
  54              	.LVL3:
 699:Src/main.c    **** 
 700:Src/main.c    ****     /* Set Motor Speeds*/
 701:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 702:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 703:Src/main.c    ****     if (gain < 0)
 704:Src/main.c    ****     {
 705:Src/main.c    ****         lspeed -= gain;
 706:Src/main.c    ****     }
 707:Src/main.c    ****     else if (gain > 0)
 708:Src/main.c    ****     {
 709:Src/main.c    ****         rspeed += gain;
 710:Src/main.c    ****     }
 711:Src/main.c    **** 
 712:Src/main.c    ****     // char msg[18] = "";
 713:Src/main.c    ****     // sprintf(msg, "LS: %lu", lspeed);
 714:Src/main.c    ****     // print(msg, 0);
 715:Src/main.c    ****     // sprintf(msg, "RS: %lu", rspeed);
 716:Src/main.c    ****     // print(msg, 1);
 717:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, lspeed);
 718:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, rspeed);
 719:Src/main.c    **** 
 720:Src/main.c    ****     /* Prevent weird overflow shit */
 721:Src/main.c    ****     if (lcnt > 60000 || rcnt > 60000)
  55              		.loc 1 721 0
  56 0014 4EF66023 		movw	r3, #60000
  57 0018 9C42     		cmp	r4, r3
  58 001a 01D8     		bhi	.L2
  59              		.loc 1 721 0 is_stmt 0 discriminator 1
  60 001c 9D42     		cmp	r5, r3
  61 001e 0CD9     		bls	.L1
  62              	.L2:
 722:Src/main.c    ****     {
 723:Src/main.c    ****         TIM4->CNT -= 50000;
  63              		.loc 1 723 0 is_stmt 1
  64 0020 064A     		ldr	r2, .L5
  65 0022 536A     		ldr	r3, [r2, #36]
  66 0024 A3F54343 		sub	r3, r3, #49920
  67 0028 503B     		subs	r3, r3, #80
  68 002a 5362     		str	r3, [r2, #36]
  69              	.LVL4:
 724:Src/main.c    ****         TIM5->CNT -= 50000;
  70              		.loc 1 724 0
  71 002c 02F58062 		add	r2, r2, #1024
  72 0030 536A     		ldr	r3, [r2, #36]
  73 0032 A3F54343 		sub	r3, r3, #49920
  74 0036 503B     		subs	r3, r3, #80
  75 0038 5362     		str	r3, [r2, #36]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 15


  76              	.L1:
  77 003a 38BD     		pop	{r3, r4, r5, pc}
  78              	.LVL5:
  79              	.L6:
  80              		.align	2
  81              	.L5:
  82 003c 00080040 		.word	1073743872
  83              		.cfi_endproc
  84              	.LFE136:
  86              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  87              		.align	2
  88              		.global	HAL_ADC_ConvCpltCallback
  89              		.thumb
  90              		.thumb_func
  92              	HAL_ADC_ConvCpltCallback:
  93              	.LFB123:
 104:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  94              		.loc 1 104 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL6:
  99 0000 08B5     		push	{r3, lr}
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 3, -8
 103              		.cfi_offset 14, -4
 105:Src/main.c    **** }
 104              		.loc 1 105 0
 105 0002 0348     		ldr	r0, .L9
 106              	.LVL7:
 107 0004 0349     		ldr	r1, .L9+4
 108 0006 4FF40052 		mov	r2, #8192
 109 000a FFF7FEFF 		bl	memcpy
 110              	.LVL8:
 111 000e 08BD     		pop	{r3, pc}
 112              	.L10:
 113              		.align	2
 114              	.L9:
 115 0010 00000000 		.word	adc_values
 116 0014 00000000 		.word	dma_buffer
 117              		.cfi_endproc
 118              	.LFE123:
 120              		.section	.text.drive_straight,"ax",%progbits
 121              		.align	2
 122              		.global	drive_straight
 123              		.thumb
 124              		.thumb_func
 126              	drive_straight:
 127              	.LFB128:
 488:Src/main.c    ****     encoder_pid(enc_pid);
 128              		.loc 1 488 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              	.LVL9:
 133 0000 08B5     		push	{r3, lr}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 16


 134              	.LCFI2:
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 3, -8
 137              		.cfi_offset 14, -4
 489:Src/main.c    ****     HAL_Delay(10);
 138              		.loc 1 489 0
 139 0002 FFF7FEFF 		bl	encoder_pid
 140              	.LVL10:
 490:Src/main.c    **** 
 141              		.loc 1 490 0
 142 0006 0A20     		movs	r0, #10
 143 0008 FFF7FEFF 		bl	HAL_Delay
 144              	.LVL11:
 145 000c 08BD     		pop	{r3, pc}
 146              		.cfi_endproc
 147              	.LFE128:
 149              		.global	__aeabi_ui2d
 150              		.global	__aeabi_dmul
 151              		.global	__aeabi_dsub
 152              		.global	__aeabi_d2f
 153 000e 00BF     		.section	.text.calculate_heading,"ax",%progbits
 154              		.align	2
 155              		.global	calculate_heading
 156              		.thumb
 157              		.thumb_func
 159              	calculate_heading:
 160              	.LFB131:
 605:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
 161              		.loc 1 605 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL12:
 166 0000 08B5     		push	{r3, lr}
 167              	.LCFI3:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 3, -8
 170              		.cfi_offset 14, -4
 606:Src/main.c    **** }
 171              		.loc 1 606 0
 172 0002 FFF7FEFF 		bl	__aeabi_ui2d
 173              	.LVL13:
 174 0006 0022     		movs	r2, #0
 175 0008 054B     		ldr	r3, .L15
 176 000a FFF7FEFF 		bl	__aeabi_dmul
 177              	.LVL14:
 178 000e 0022     		movs	r2, #0
 179 0010 044B     		ldr	r3, .L15+4
 180 0012 FFF7FEFF 		bl	__aeabi_dsub
 181              	.LVL15:
 182 0016 FFF7FEFF 		bl	__aeabi_d2f
 183              	.LVL16:
 607:Src/main.c    **** 
 184              		.loc 1 607 0
 185 001a 00EE100A 		fmsr	s0, r0
 186 001e 08BD     		pop	{r3, pc}
 187              	.L16:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 17


 188              		.align	2
 189              	.L15:
 190 0020 0000303F 		.word	1060110336
 191 0024 0000E03F 		.word	1071644672
 192              		.cfi_endproc
 193              	.LFE131:
 195              		.section	.text.print,"ax",%progbits
 196              		.align	2
 197              		.global	print
 198              		.thumb
 199              		.thumb_func
 201              	print:
 202              	.LFB133:
 630:Src/main.c    ****     // if (row == 0)
 203              		.loc 1 630 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              	.LVL17:
 208 0000 10B5     		push	{r4, lr}
 209              	.LCFI4:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 4, -8
 212              		.cfi_offset 14, -4
 213 0002 0446     		mov	r4, r0
 638:Src/main.c    **** }
 214              		.loc 1 638 0
 215 0004 FFF7FEFF 		bl	strlen
 216              	.LVL18:
 217 0008 82B2     		uxth	r2, r0
 218 000a 0348     		ldr	r0, .L19
 219 000c 2146     		mov	r1, r4
 220 000e 6423     		movs	r3, #100
 221 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 222              	.LVL19:
 223 0014 10BD     		pop	{r4, pc}
 224              	.LVL20:
 225              	.L20:
 226 0016 00BF     		.align	2
 227              	.L19:
 228 0018 00000000 		.word	huart6
 229              		.cfi_endproc
 230              	.LFE133:
 232              		.global	__aeabi_dcmplt
 233              		.global	__aeabi_dcmpgt
 234              		.section	.text.alarm_detect,"ax",%progbits
 235              		.align	2
 236              		.global	alarm_detect
 237              		.thumb
 238              		.thumb_func
 240              	alarm_detect:
 241              	.LFB132:
 610:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 242              		.loc 1 610 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 18


 246 0000 00B5     		push	{lr}
 247              	.LCFI5:
 248              		.cfi_def_cfa_offset 4
 249              		.cfi_offset 14, -4
 250 0002 83B0     		sub	sp, sp, #12
 251              	.LCFI6:
 252              		.cfi_def_cfa_offset 16
 611:Src/main.c    ****     HAL_Delay(500);
 253              		.loc 1 611 0
 254 0004 2148     		ldr	r0, .L25
 255 0006 2249     		ldr	r1, .L25+4
 256 0008 4FF40062 		mov	r2, #2048
 257 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 258              	.LVL21:
 612:Src/main.c    ****     char msg[20]="";
 259              		.loc 1 612 0
 260 0010 4FF4FA70 		mov	r0, #500
 261 0014 FFF7FEFF 		bl	HAL_Delay
 262              	.LVL22:
 263              	.L22:
 615:Src/main.c    ****     HAL_Delay(100);
 264              		.loc 1 615 0 discriminator 1
 265 0018 0023     		movs	r3, #0
 266 001a 0093     		str	r3, [sp]
 267 001c 1D48     		ldr	r0, .L25+8
 268 001e 48F60B61 		movw	r1, #36363
 269 0022 4FF47A72 		mov	r2, #1000
 270 0026 4FF40063 		mov	r3, #2048
 271 002a FFF7FEFF 		bl	goertzel
 272              	.LVL23:
 273 002e 51EC100B 		fmrrd	r0, r1, d0
 274 0032 0022     		movs	r2, #0
 275 0034 184B     		ldr	r3, .L25+12
 276 0036 FFF7FEFF 		bl	__aeabi_dcmplt
 277              	.LVL24:
 278 003a 0028     		cmp	r0, #0
 279 003c ECD1     		bne	.L22
 616:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 10);
 280              		.loc 1 616 0
 281 003e 6420     		movs	r0, #100
 282 0040 FFF7FEFF 		bl	HAL_Delay
 283              	.LVL25:
 284              	.L23:
 617:Src/main.c    ****     HAL_Delay(100);
 285              		.loc 1 617 0 discriminator 1
 286 0044 0023     		movs	r3, #0
 287 0046 0093     		str	r3, [sp]
 288 0048 1248     		ldr	r0, .L25+8
 289 004a 48F60B61 		movw	r1, #36363
 290 004e 4FF47A72 		mov	r2, #1000
 291 0052 4FF40063 		mov	r3, #2048
 292 0056 FFF7FEFF 		bl	goertzel
 293              	.LVL26:
 294 005a 51EC100B 		fmrrd	r0, r1, d0
 295 005e 0022     		movs	r2, #0
 296 0060 0D4B     		ldr	r3, .L25+12
 297 0062 FFF7FEFF 		bl	__aeabi_dcmpgt
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 19


 298              	.LVL27:
 299 0066 0028     		cmp	r0, #0
 300 0068 ECD1     		bne	.L23
 618:Src/main.c    ****     print("worcs", 0);
 301              		.loc 1 618 0
 302 006a 6420     		movs	r0, #100
 303 006c FFF7FEFF 		bl	HAL_Delay
 304              	.LVL28:
 619:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 305              		.loc 1 619 0
 306 0070 0A48     		ldr	r0, .L25+16
 307 0072 0021     		movs	r1, #0
 308 0074 FFF7FEFF 		bl	print
 309              	.LVL29:
 620:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 310              		.loc 1 620 0
 311 0078 0448     		ldr	r0, .L25
 312 007a FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 313              	.LVL30:
 621:Src/main.c    **** }
 314              		.loc 1 621 0
 315 007e 0022     		movs	r2, #0
 316 0080 074B     		ldr	r3, .L25+20
 317 0082 1A70     		strb	r2, [r3]
 622:Src/main.c    **** 
 318              		.loc 1 622 0
 319 0084 03B0     		add	sp, sp, #12
 320              	.LCFI7:
 321              		.cfi_def_cfa_offset 4
 322              		@ sp needed
 323 0086 5DF804FB 		ldr	pc, [sp], #4
 324              	.L26:
 325 008a 00BF     		.align	2
 326              	.L25:
 327 008c 00000000 		.word	hadc1
 328 0090 00000000 		.word	dma_buffer
 329 0094 00000000 		.word	adc_values
 330 0098 00002440 		.word	1076101120
 331 009c 00000000 		.word	.LC0
 332 00a0 00000000 		.word	IR_INT_STATE
 333              		.cfi_endproc
 334              	.LFE132:
 336              		.section	.text.menu,"ax",%progbits
 337              		.align	2
 338              		.global	menu
 339              		.thumb
 340              		.thumb_func
 342              	menu:
 343              	.LFB134:
 642:Src/main.c    ****     print("Starting\n", 0);
 344              		.loc 1 642 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 32
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              	.LVL31:
 349 0000 30B5     		push	{r4, r5, lr}
 350              	.LCFI8:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 20


 351              		.cfi_def_cfa_offset 12
 352              		.cfi_offset 4, -12
 353              		.cfi_offset 5, -8
 354              		.cfi_offset 14, -4
 355 0002 8BB0     		sub	sp, sp, #44
 356              	.LCFI9:
 357              		.cfi_def_cfa_offset 56
 358 0004 0546     		mov	r5, r0
 643:Src/main.c    ****     char msg[20] = "";
 359              		.loc 1 643 0
 360 0006 2548     		ldr	r0, .L33
 361              	.LVL32:
 362 0008 0021     		movs	r1, #0
 363 000a FFF7FEFF 		bl	print
 364              	.LVL33:
 644:Src/main.c    ****     int pid_select = 0;
 365              		.loc 1 644 0
 366 000e 0024     		movs	r4, #0
 367 0010 0594     		str	r4, [sp, #20]
 368 0012 0694     		str	r4, [sp, #24]
 369 0014 0794     		str	r4, [sp, #28]
 370 0016 0894     		str	r4, [sp, #32]
 371 0018 0994     		str	r4, [sp, #36]
 372              	.LVL34:
 646:Src/main.c    ****     while (1)
 373              		.loc 1 646 0
 374 001a 0394     		str	r4, [sp, #12]
 375 001c 0494     		str	r4, [sp, #16]
 376              	.LVL35:
 377              	.L31:
 649:Src/main.c    ****         {
 378              		.loc 1 649 0
 379 001e 2048     		ldr	r0, .L33+4
 380 0020 4FF40051 		mov	r1, #8192
 381 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 382              	.LVL36:
 383 0028 48BB     		cbnz	r0, .L28
 651:Src/main.c    ****             print(msg, 0);
 384              		.loc 1 651 0
 385 002a 05A8     		add	r0, sp, #20
 386 002c 1D49     		ldr	r1, .L33+8
 387 002e 0AAB     		add	r3, sp, #40
 388 0030 03EB8403 		add	r3, r3, r4, lsl #2
 389 0034 53F81C2C 		ldr	r2, [r3, #-28]
 390 0038 FFF7FEFF 		bl	sprintf
 391              	.LVL37:
 652:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 392              		.loc 1 652 0
 393 003c 05A8     		add	r0, sp, #20
 394 003e 0021     		movs	r1, #0
 395 0040 FFF7FEFF 		bl	print
 396              	.LVL38:
 653:Src/main.c    ****             {
 397              		.loc 1 653 0
 398 0044 13E0     		b	.L29
 399              	.L30:
 655:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 21


 400              		.loc 1 655 0
 401 0046 0AAB     		add	r3, sp, #40
 402 0048 03EB8403 		add	r3, r3, r4, lsl #2
 403 004c 53F81C2C 		ldr	r2, [r3, #-28]
 404 0050 0132     		adds	r2, r2, #1
 405 0052 43F81C2C 		str	r2, [r3, #-28]
 656:Src/main.c    ****                 print(msg, 0);
 406              		.loc 1 656 0
 407 0056 05A8     		add	r0, sp, #20
 408 0058 1249     		ldr	r1, .L33+8
 409 005a FFF7FEFF 		bl	sprintf
 410              	.LVL39:
 657:Src/main.c    ****                 HAL_Delay(500);
 411              		.loc 1 657 0
 412 005e 05A8     		add	r0, sp, #20
 413 0060 0021     		movs	r1, #0
 414 0062 FFF7FEFF 		bl	print
 415              	.LVL40:
 658:Src/main.c    ****             }
 416              		.loc 1 658 0
 417 0066 4FF4FA70 		mov	r0, #500
 418 006a FFF7FEFF 		bl	HAL_Delay
 419              	.LVL41:
 420              	.L29:
 653:Src/main.c    ****             {
 421              		.loc 1 653 0
 422 006e 0C48     		ldr	r0, .L33+4
 423 0070 4FF40051 		mov	r1, #8192
 424 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 425              	.LVL42:
 426 0078 0028     		cmp	r0, #0
 427 007a E4D0     		beq	.L30
 660:Src/main.c    ****         }
 428              		.loc 1 660 0
 429 007c 0134     		adds	r4, r4, #1
 430              	.LVL43:
 431              	.L28:
 662:Src/main.c    ****             break;
 432              		.loc 1 662 0
 433 007e 022C     		cmp	r4, #2
 434 0080 CDD1     		bne	.L31
 665:Src/main.c    **** }
 435              		.loc 1 665 0
 436 0082 BDF80C10 		ldrh	r1, [sp, #12]
 437 0086 BDF81020 		ldrh	r2, [sp, #16]
 438 008a 0123     		movs	r3, #1
 439 008c 0093     		str	r3, [sp]
 440 008e 0193     		str	r3, [sp, #4]
 441 0090 2846     		mov	r0, r5
 442 0092 FFF7FEFF 		bl	pid_Init
 443              	.LVL44:
 666:Src/main.c    **** 
 444              		.loc 1 666 0
 445 0096 2846     		mov	r0, r5
 446 0098 0BB0     		add	sp, sp, #44
 447              	.LCFI10:
 448              		.cfi_def_cfa_offset 12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 22


 449              		@ sp needed
 450 009a 30BD     		pop	{r4, r5, pc}
 451              	.LVL45:
 452              	.L34:
 453              		.align	2
 454              	.L33:
 455 009c 08000000 		.word	.LC1
 456 00a0 00080240 		.word	1073874944
 457 00a4 14000000 		.word	.LC2
 458              		.cfi_endproc
 459              	.LFE134:
 461              		.section	.text.set_motor_speed,"ax",%progbits
 462              		.align	2
 463              		.global	set_motor_speed
 464              		.thumb
 465              		.thumb_func
 467              	set_motor_speed:
 468              	.LFB135:
 669:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 469              		.loc 1 669 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473              		@ link register save eliminated.
 474              	.LVL46:
 670:Src/main.c    ****     {
 475              		.loc 1 670 0
 476 0000 0346     		mov	r3, r0
 477 0002 18B9     		cbnz	r0, .L36
 672:Src/main.c    ****     }
 478              		.loc 1 672 0
 479 0004 114A     		ldr	r2, .L40
 480 0006 1268     		ldr	r2, [r2]
 481 0008 9063     		str	r0, [r2, #56]
 482 000a 13E0     		b	.L37
 483              	.L36:
 674:Src/main.c    ****     {
 484              		.loc 1 674 0
 485 000c 0428     		cmp	r0, #4
 486 000e 04D1     		bne	.L38
 676:Src/main.c    ****     }
 487              		.loc 1 676 0
 488 0010 0E4A     		ldr	r2, .L40
 489 0012 1268     		ldr	r2, [r2]
 490 0014 0020     		movs	r0, #0
 491              	.LVL47:
 492 0016 5063     		str	r0, [r2, #52]
 493 0018 0CE0     		b	.L37
 494              	.LVL48:
 495              	.L38:
 678:Src/main.c    ****     {
 496              		.loc 1 678 0
 497 001a 0828     		cmp	r0, #8
 498 001c 04D1     		bne	.L39
 680:Src/main.c    ****     }
 499              		.loc 1 680 0
 500 001e 0B4A     		ldr	r2, .L40
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 23


 501 0020 1268     		ldr	r2, [r2]
 502 0022 0020     		movs	r0, #0
 503              	.LVL49:
 504 0024 1064     		str	r0, [r2, #64]
 505 0026 05E0     		b	.L37
 506              	.LVL50:
 507              	.L39:
 682:Src/main.c    ****     {
 508              		.loc 1 682 0
 509 0028 0C28     		cmp	r0, #12
 510 002a 03D1     		bne	.L37
 684:Src/main.c    ****     }
 511              		.loc 1 684 0
 512 002c 074A     		ldr	r2, .L40
 513 002e 1268     		ldr	r2, [r2]
 514 0030 0020     		movs	r0, #0
 515              	.LVL51:
 516 0032 D063     		str	r0, [r2, #60]
 517              	.L37:
 686:Src/main.c    **** }
 518              		.loc 1 686 0
 519 0034 054A     		ldr	r2, .L40
 520 0036 1268     		ldr	r2, [r2]
 521 0038 3432     		adds	r2, r2, #52
 522 003a 9B08     		lsrs	r3, r3, #2
 523              	.LVL52:
 524 003c B1F57A7F 		cmp	r1, #1000
 525 0040 28BF     		it	cs
 526 0042 4FF47A71 		movcs	r1, #1000
 527              	.LVL53:
 528 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 529 004a 7047     		bx	lr
 530              	.L41:
 531              		.align	2
 532              	.L40:
 533 004c 00000000 		.word	htim1
 534              		.cfi_endproc
 535              	.LFE135:
 537              		.section	.text.square_edge,"ax",%progbits
 538              		.align	2
 539              		.global	square_edge
 540              		.thumb
 541              		.thumb_func
 543              	square_edge:
 544              	.LFB126:
 426:Src/main.c    ****     while (1)
 545              		.loc 1 426 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549              	.LVL54:
 550 0000 10B5     		push	{r4, lr}
 551              	.LCFI11:
 552              		.cfi_def_cfa_offset 8
 553              		.cfi_offset 4, -8
 554              		.cfi_offset 14, -4
 555 0002 0446     		mov	r4, r0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 24


 556              	.LVL55:
 557              	.L43:
 429:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_Read
 558              		.loc 1 429 0
 559 0004 2046     		mov	r0, r4
 560 0006 FFF7FEFF 		bl	drive_straight
 561              	.LVL56:
 430:Src/main.c    ****         {
 562              		.loc 1 430 0
 563 000a 1648     		ldr	r0, .L50
 564 000c 0421     		movs	r1, #4
 565 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 566              	.LVL57:
 567 0012 38B9     		cbnz	r0, .L44
 430:Src/main.c    ****         {
 568              		.loc 1 430 0 is_stmt 0 discriminator 1
 569 0014 00F18040 		add	r0, r0, #1073741824
 570 0018 00F50230 		add	r0, r0, #133120
 571 001c 0821     		movs	r1, #8
 572 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 573              	.LVL58:
 574 0022 E8B1     		cbz	r0, .L42
 575              	.L44:
 434:Src/main.c    ****         {
 576              		.loc 1 434 0 is_stmt 1
 577 0024 0F48     		ldr	r0, .L50
 578 0026 0421     		movs	r1, #4
 579 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 580              	.LVL59:
 581 002c 28B1     		cbz	r0, .L46
 434:Src/main.c    ****         {
 582              		.loc 1 434 0 is_stmt 0 discriminator 1
 583 002e 0E48     		ldr	r0, .L50+4
 584 0030 0821     		movs	r1, #8
 585 0032 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 586              	.LVL60:
 587 0036 0028     		cmp	r0, #0
 588 0038 E4D1     		bne	.L43
 589              	.L46:
 436:Src/main.c    ****             {
 590              		.loc 1 436 0 is_stmt 1
 591 003a 0A48     		ldr	r0, .L50
 592 003c 0421     		movs	r1, #4
 593 003e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 594              	.LVL61:
 595 0042 10B9     		cbnz	r0, .L48
 438:Src/main.c    ****             }
 596              		.loc 1 438 0
 597 0044 0146     		mov	r1, r0
 598 0046 FFF7FEFF 		bl	set_motor_speed
 599              	.LVL62:
 600              	.L48:
 440:Src/main.c    ****             {
 601              		.loc 1 440 0
 602 004a 0748     		ldr	r0, .L50+4
 603 004c 0821     		movs	r1, #8
 604 004e FFF7FEFF 		bl	HAL_GPIO_ReadPin
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 25


 605              	.LVL63:
 606 0052 0028     		cmp	r0, #0
 607 0054 D6D1     		bne	.L43
 442:Src/main.c    ****             }
 608              		.loc 1 442 0
 609 0056 0820     		movs	r0, #8
 610 0058 0021     		movs	r1, #0
 611 005a FFF7FEFF 		bl	set_motor_speed
 612              	.LVL64:
 613 005e D1E7     		b	.L43
 614              	.L42:
 615 0060 10BD     		pop	{r4, pc}
 616              	.LVL65:
 617              	.L51:
 618 0062 00BF     		.align	2
 619              	.L50:
 620 0064 000C0240 		.word	1073875968
 621 0068 00080240 		.word	1073874944
 622              		.cfi_endproc
 623              	.LFE126:
 625              		.global	__aeabi_f2d
 626              		.global	__aeabi_d2uiz
 627              		.section	.text.turn,"ax",%progbits
 628              		.align	2
 629              		.global	turn
 630              		.thumb
 631              		.thumb_func
 633              	turn:
 634              	.LFB129:
 499:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 635              		.loc 1 499 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 24
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 640              	.LCFI12:
 641              		.cfi_def_cfa_offset 20
 642              		.cfi_offset 4, -20
 643              		.cfi_offset 5, -16
 644              		.cfi_offset 6, -12
 645              		.cfi_offset 7, -8
 646              		.cfi_offset 14, -4
 647 0002 2DED028B 		fstmfdd	sp!, {d8}
 648              	.LCFI13:
 649              		.cfi_def_cfa_offset 28
 650              		.cfi_offset 80, -28
 651              		.cfi_offset 81, -24
 652 0006 87B0     		sub	sp, sp, #28
 653              	.LCFI14:
 654              		.cfi_def_cfa_offset 56
 500:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 655              		.loc 1 500 0
 656 0008 5948     		ldr	r0, .L63+16
 657 000a 5A49     		ldr	r1, .L63+20
 658 000c 4FF40062 		mov	r2, #2048
 659 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 660              	.LVL66:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 26


 502:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 661              		.loc 1 502 0
 662 0014 4FF4FA70 		mov	r0, #500
 663 0018 FFF7FEFF 		bl	HAL_Delay
 664              	.LVL67:
 503:Src/main.c    ****     //double r = atan(1.57*tan()/())
 665              		.loc 1 503 0
 666 001c 564E     		ldr	r6, .L63+24
 667 001e 7069     		ldr	r0, [r6, #20]
 668 0020 4000     		lsls	r0, r0, #1
 669 0022 FFF7FEFF 		bl	calculate_heading
 670              	.LVL68:
 671 0026 B0EE408A 		fcpys	s16, s0
 672              	.LVL69:
 505:Src/main.c    ****     TIM4->CNT = 0;
 673              		.loc 1 505 0
 674 002a F0EEC07A 		fabss	s15, s0
 675 002e 17EE900A 		fmrs	r0, s15
 676 0032 FFF7FEFF 		bl	__aeabi_f2d
 677              	.LVL70:
 678 0036 0022     		movs	r2, #0
 679 0038 504B     		ldr	r3, .L63+28
 680 003a FFF7FEFF 		bl	__aeabi_dmul
 681              	.LVL71:
 682 003e FFF7FEFF 		bl	__aeabi_d2uiz
 683              	.LVL72:
 684 0042 85B2     		uxth	r5, r0
 685              	.LVL73:
 506:Src/main.c    ****     TIM5->CNT = 0;
 686              		.loc 1 506 0
 687 0044 0024     		movs	r4, #0
 688 0046 4E4B     		ldr	r3, .L63+32
 689 0048 5C62     		str	r4, [r3, #36]
 507:Src/main.c    **** 
 690              		.loc 1 507 0
 691 004a 03F58063 		add	r3, r3, #1024
 692 004e 5C62     		str	r4, [r3, #36]
 509:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", (int)counts);
 693              		.loc 1 509 0
 694 0050 0194     		str	r4, [sp, #4]
 695 0052 0294     		str	r4, [sp, #8]
 696 0054 0394     		str	r4, [sp, #12]
 697 0056 0494     		str	r4, [sp, #16]
 698 0058 ADF81440 		strh	r4, [sp, #20]	@ movhi
 510:Src/main.c    ****     print(msg, 0);
 699              		.loc 1 510 0
 700 005c 01A8     		add	r0, sp, #4
 701 005e 4949     		ldr	r1, .L63+36
 702 0060 2A46     		mov	r2, r5
 703 0062 FFF7FEFF 		bl	sprintf
 704              	.LVL74:
 511:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 705              		.loc 1 511 0
 706 0066 01A8     		add	r0, sp, #4
 707 0068 2146     		mov	r1, r4
 708 006a FFF7FEFF 		bl	print
 709              	.LVL75:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 27


 512:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 710              		.loc 1 512 0
 711 006e BDEEC87A 		ftosizs	s14, s16
 712              	.LVL76:
 513:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 713              		.loc 1 513 0
 714 0072 F8EEC77A 		fsitos	s15, s14
 715 0076 78EE677A 		fsubs	s15, s16, s15
 716 007a DFED436A 		flds	s13, .L63+40
 717 007e 67EEA67A 		fmuls	s15, s15, s13
 718              	.LVL77:
 514:Src/main.c    ****     print(msg, 2);
 719              		.loc 1 514 0
 720 0082 01A8     		add	r0, sp, #4
 721 0084 4149     		ldr	r1, .L63+44
 722 0086 17EE102A 		fmrs	r2, s14	@ int
 723 008a FDEEE77A 		ftosizs	s15, s15
 724              	.LVL78:
 725 008e 17EE903A 		fmrs	r3, s15	@ int
 726 0092 FFF7FEFF 		bl	sprintf
 727              	.LVL79:
 515:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %lu\n", 2 * adc_values[5]);
 728              		.loc 1 515 0
 729 0096 01A8     		add	r0, sp, #4
 730 0098 0221     		movs	r1, #2
 731 009a FFF7FEFF 		bl	print
 732              	.LVL80:
 516:Src/main.c    ****     print(msg, 0);
 733              		.loc 1 516 0
 734 009e 7269     		ldr	r2, [r6, #20]
 735 00a0 01A8     		add	r0, sp, #4
 736 00a2 3B49     		ldr	r1, .L63+48
 737 00a4 5200     		lsls	r2, r2, #1
 738 00a6 FFF7FEFF 		bl	sprintf
 739              	.LVL81:
 517:Src/main.c    **** 
 740              		.loc 1 517 0
 741 00aa 01A8     		add	r0, sp, #4
 742 00ac 2146     		mov	r1, r4
 743 00ae FFF7FEFF 		bl	print
 744              	.LVL82:
 519:Src/main.c    ****     {
 745              		.loc 1 519 0
 746 00b2 18EE100A 		fmrs	r0, s16
 747 00b6 FFF7FEFF 		bl	__aeabi_f2d
 748              	.LVL83:
 749 00ba 0646     		mov	r6, r0
 750 00bc 0F46     		mov	r7, r1
 751 00be 28A3     		adr	r3, .L63
 752 00c0 D3E90023 		ldrd	r2, [r3]
 753 00c4 FFF7FEFF 		bl	__aeabi_dcmplt
 754              	.LVL84:
 755 00c8 E8B1     		cbz	r0, .L61
 521:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 756              		.loc 1 521 0
 757 00ca 2046     		mov	r0, r4
 758 00cc 2146     		mov	r1, r4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 28


 759 00ce FFF7FEFF 		bl	set_motor_speed
 760              	.LVL85:
 522:Src/main.c    ****         while (TIM5->CNT < counts)
 761              		.loc 1 522 0
 762 00d2 0820     		movs	r0, #8
 763 00d4 2F4B     		ldr	r3, .L63+52
 764 00d6 1988     		ldrh	r1, [r3]
 765 00d8 FFF7FEFF 		bl	set_motor_speed
 766              	.LVL86:
 767              	.L55:
 523:Src/main.c    ****         {
 768              		.loc 1 523 0 discriminator 1
 769 00dc 2E4B     		ldr	r3, .L63+56
 770 00de 5B6A     		ldr	r3, [r3, #36]
 771 00e0 AB42     		cmp	r3, r5
 772 00e2 FBD3     		bcc	.L55
 528:Src/main.c    ****         print(msg, 4);
 773              		.loc 1 528 0
 774 00e4 2C4C     		ldr	r4, .L63+56
 775 00e6 626A     		ldr	r2, [r4, #36]
 776 00e8 01A8     		add	r0, sp, #4
 777 00ea 2C49     		ldr	r1, .L63+60
 778 00ec FFF7FEFF 		bl	sprintf
 779              	.LVL87:
 529:Src/main.c    ****         TIM5->CNT = 0;
 780              		.loc 1 529 0
 781 00f0 01A8     		add	r0, sp, #4
 782 00f2 0421     		movs	r1, #4
 783 00f4 FFF7FEFF 		bl	print
 784              	.LVL88:
 530:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 785              		.loc 1 530 0
 786 00f8 0020     		movs	r0, #0
 787 00fa 6062     		str	r0, [r4, #36]
 531:Src/main.c    ****     }
 788              		.loc 1 531 0
 789 00fc 284B     		ldr	r3, .L63+64
 790 00fe 1988     		ldrh	r1, [r3]
 791 0100 FFF7FEFF 		bl	set_motor_speed
 792              	.LVL89:
 793 0104 25E0     		b	.L56
 794              	.L61:
 533:Src/main.c    ****     {
 795              		.loc 1 533 0
 796 0106 3046     		mov	r0, r6
 797 0108 3946     		mov	r1, r7
 798 010a 17A3     		adr	r3, .L63+8
 799 010c D3E90023 		ldrd	r2, [r3]
 800 0110 FFF7FEFF 		bl	__aeabi_dcmpgt
 801              	.LVL90:
 802 0114 E8B1     		cbz	r0, .L56
 535:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 803              		.loc 1 535 0
 804 0116 0020     		movs	r0, #0
 805 0118 214B     		ldr	r3, .L63+64
 806 011a 1988     		ldrh	r1, [r3]
 807 011c FFF7FEFF 		bl	set_motor_speed
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 29


 808              	.LVL91:
 536:Src/main.c    ****         while (TIM4->CNT < counts)
 809              		.loc 1 536 0
 810 0120 0820     		movs	r0, #8
 811 0122 0021     		movs	r1, #0
 812 0124 FFF7FEFF 		bl	set_motor_speed
 813              	.LVL92:
 814              	.L58:
 537:Src/main.c    ****         {
 815              		.loc 1 537 0 discriminator 1
 816 0128 154B     		ldr	r3, .L63+32
 817 012a 5B6A     		ldr	r3, [r3, #36]
 818 012c AB42     		cmp	r3, r5
 819 012e FBD3     		bcc	.L58
 542:Src/main.c    ****         print(msg, 4);
 820              		.loc 1 542 0
 821 0130 134C     		ldr	r4, .L63+32
 822 0132 626A     		ldr	r2, [r4, #36]
 823 0134 01A8     		add	r0, sp, #4
 824 0136 1B49     		ldr	r1, .L63+68
 825 0138 FFF7FEFF 		bl	sprintf
 826              	.LVL93:
 543:Src/main.c    ****         TIM4->CNT = 0;
 827              		.loc 1 543 0
 828 013c 01A8     		add	r0, sp, #4
 829 013e 0421     		movs	r1, #4
 830 0140 FFF7FEFF 		bl	print
 831              	.LVL94:
 544:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 832              		.loc 1 544 0
 833 0144 0023     		movs	r3, #0
 834 0146 6362     		str	r3, [r4, #36]
 545:Src/main.c    ****     }
 835              		.loc 1 545 0
 836 0148 0820     		movs	r0, #8
 837 014a 124B     		ldr	r3, .L63+52
 838 014c 1988     		ldrh	r1, [r3]
 839 014e FFF7FEFF 		bl	set_motor_speed
 840              	.LVL95:
 841              	.L56:
 547:Src/main.c    **** }
 842              		.loc 1 547 0
 843 0152 0748     		ldr	r0, .L63+16
 844 0154 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 845              	.LVL96:
 548:Src/main.c    **** 
 846              		.loc 1 548 0
 847 0158 07B0     		add	sp, sp, #28
 848              	.LCFI15:
 849              		.cfi_def_cfa_offset 28
 850              		@ sp needed
 851 015a BDEC028B 		fldmfdd	sp!, {d8}
 852              	.LCFI16:
 853              		.cfi_restore 80
 854              		.cfi_restore 81
 855              		.cfi_def_cfa_offset 20
 856              	.LVL97:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 30


 857 015e F0BD     		pop	{r4, r5, r6, r7, pc}
 858              	.LVL98:
 859              	.L64:
 860              		.align	3
 861              	.L63:
 862 0160 7B14AE47 		.word	1202590843
 863 0164 E17AA4BF 		.word	-1079739679
 864 0168 7B14AE47 		.word	1202590843
 865 016c E17AA43F 		.word	1067743969
 866 0170 00000000 		.word	hadc1
 867 0174 00000000 		.word	dma_buffer
 868 0178 00000000 		.word	adc_values
 869 017c 00806140 		.word	1080131584
 870 0180 00080040 		.word	1073743872
 871 0184 1C000000 		.word	.LC3
 872 0188 00007A44 		.word	1148846080
 873 018c 30000000 		.word	.LC4
 874 0190 44000000 		.word	.LC5
 875 0194 00000000 		.word	.LANCHOR0
 876 0198 000C0040 		.word	1073744896
 877 019c 5C000000 		.word	.LC6
 878 01a0 00000000 		.word	.LANCHOR1
 879 01a4 74000000 		.word	.LC7
 880              		.cfi_endproc
 881              	.LFE129:
 883              		.global	__aeabi_i2d
 884              		.global	__aeabi_dadd
 885              		.global	__aeabi_d2iz
 886              		.section	.text.turn_deg,"ax",%progbits
 887              		.align	2
 888              		.global	turn_deg
 889              		.thumb
 890              		.thumb_func
 892              	turn_deg:
 893              	.LFB130:
 555:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 894              		.loc 1 555 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 56
 897              		@ frame_needed = 0, uses_anonymous_args = 0
 898              	.LVL99:
 899 0000 70B5     		push	{r4, r5, r6, lr}
 900              	.LCFI17:
 901              		.cfi_def_cfa_offset 16
 902              		.cfi_offset 4, -16
 903              		.cfi_offset 5, -12
 904              		.cfi_offset 6, -8
 905              		.cfi_offset 14, -4
 906 0002 8EB0     		sub	sp, sp, #56
 907              	.LCFI18:
 908              		.cfi_def_cfa_offset 72
 909 0004 0646     		mov	r6, r0
 556:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 910              		.loc 1 556 0
 911 0006 4248     		ldr	r0, .L72+8
 912              	.LVL100:
 913 0008 4249     		ldr	r1, .L72+12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 31


 914 000a 4FF40062 		mov	r2, #2048
 915 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 916              	.LVL101:
 557:Src/main.c    ****     if (counts < 0) counts = -counts;
 917              		.loc 1 557 0
 918 0012 A6F15A00 		sub	r0, r6, #90
 919 0016 FFF7FEFF 		bl	__aeabi_i2d
 920              	.LVL102:
 921 001a 3BA3     		adr	r3, .L72
 922 001c D3E90023 		ldrd	r2, [r3]
 923 0020 FFF7FEFF 		bl	__aeabi_dmul
 924              	.LVL103:
 925 0024 0022     		movs	r2, #0
 926 0026 3C4B     		ldr	r3, .L72+16
 927 0028 FFF7FEFF 		bl	__aeabi_dadd
 928              	.LVL104:
 929 002c FFF7FEFF 		bl	__aeabi_d2iz
 930              	.LVL105:
 931 0030 85B2     		uxth	r5, r0
 932              	.LVL106:
 558:Src/main.c    ****     TIM4->CNT = 0;
 933              		.loc 1 558 0
 934 0032 15F4004F 		tst	r5, #32768
 935 0036 01D0     		beq	.L66
 558:Src/main.c    ****     TIM4->CNT = 0;
 936              		.loc 1 558 0 is_stmt 0 discriminator 1
 937 0038 6D42     		negs	r5, r5
 938              	.LVL107:
 939 003a ADB2     		uxth	r5, r5
 940              	.LVL108:
 941              	.L66:
 559:Src/main.c    ****     TIM5->CNT = 0;
 942              		.loc 1 559 0 is_stmt 1
 943 003c 0024     		movs	r4, #0
 944 003e 374B     		ldr	r3, .L72+20
 945 0040 5C62     		str	r4, [r3, #36]
 560:Src/main.c    **** 
 946              		.loc 1 560 0
 947 0042 03F58063 		add	r3, r3, #1024
 948 0046 5C62     		str	r4, [r3, #36]
 562:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 949              		.loc 1 562 0
 950 0048 0194     		str	r4, [sp, #4]
 951 004a 0294     		str	r4, [sp, #8]
 952 004c 0394     		str	r4, [sp, #12]
 953 004e 0494     		str	r4, [sp, #16]
 954 0050 0594     		str	r4, [sp, #20]
 955 0052 0694     		str	r4, [sp, #24]
 956 0054 0794     		str	r4, [sp, #28]
 957 0056 0894     		str	r4, [sp, #32]
 958 0058 0994     		str	r4, [sp, #36]
 959 005a 0A94     		str	r4, [sp, #40]
 960 005c 0B94     		str	r4, [sp, #44]
 961 005e 0C94     		str	r4, [sp, #48]
 962 0060 ADF83440 		strh	r4, [sp, #52]	@ movhi
 563:Src/main.c    ****     print(msg, 0);
 963              		.loc 1 563 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 32


 964 0064 01A8     		add	r0, sp, #4
 965 0066 2E49     		ldr	r1, .L72+24
 966 0068 2AB2     		sxth	r2, r5
 967 006a FFF7FEFF 		bl	sprintf
 968              	.LVL109:
 564:Src/main.c    **** 
 969              		.loc 1 564 0
 970 006e 01A8     		add	r0, sp, #4
 971 0070 2146     		mov	r1, r4
 972 0072 FFF7FEFF 		bl	print
 973              	.LVL110:
 566:Src/main.c    ****     {
 974              		.loc 1 566 0
 975 0076 A642     		cmp	r6, r4
 976 0078 1ADD     		ble	.L67
 568:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 977              		.loc 1 568 0
 978 007a 2046     		mov	r0, r4
 979 007c 294B     		ldr	r3, .L72+28
 980 007e 1988     		ldrh	r1, [r3]
 981 0080 FFF7FEFF 		bl	set_motor_speed
 982              	.LVL111:
 569:Src/main.c    ****         while (TIM4->CNT < counts)
 983              		.loc 1 569 0
 984 0084 0820     		movs	r0, #8
 985 0086 2146     		mov	r1, r4
 986 0088 FFF7FEFF 		bl	set_motor_speed
 987              	.LVL112:
 988              	.L68:
 570:Src/main.c    ****         {
 989              		.loc 1 570 0 discriminator 1
 990 008c 234B     		ldr	r3, .L72+20
 991 008e 5A6A     		ldr	r2, [r3, #36]
 992 0090 2BB2     		sxth	r3, r5
 993 0092 9A42     		cmp	r2, r3
 994 0094 FAD3     		bcc	.L68
 575:Src/main.c    ****         print(msg, 4);
 995              		.loc 1 575 0
 996 0096 244C     		ldr	r4, .L72+32
 997 0098 626A     		ldr	r2, [r4, #36]
 998 009a 01A8     		add	r0, sp, #4
 999 009c 2349     		ldr	r1, .L72+36
 1000 009e FFF7FEFF 		bl	sprintf
 1001              	.LVL113:
 576:Src/main.c    ****         TIM5->CNT = 0;
 1002              		.loc 1 576 0
 1003 00a2 01A8     		add	r0, sp, #4
 1004 00a4 0421     		movs	r1, #4
 1005 00a6 FFF7FEFF 		bl	print
 1006              	.LVL114:
 577:Src/main.c    ****     }
 1007              		.loc 1 577 0
 1008 00aa 0023     		movs	r3, #0
 1009 00ac 6362     		str	r3, [r4, #36]
 1010 00ae 1BE0     		b	.L69
 1011              	.L67:
 579:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 33


 1012              		.loc 1 579 0
 1013 00b0 002E     		cmp	r6, #0
 1014 00b2 19DA     		bge	.L69
 581:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1015              		.loc 1 581 0
 1016 00b4 0020     		movs	r0, #0
 1017 00b6 0146     		mov	r1, r0
 1018 00b8 FFF7FEFF 		bl	set_motor_speed
 1019              	.LVL115:
 582:Src/main.c    ****         while (TIM5->CNT < counts)
 1020              		.loc 1 582 0
 1021 00bc 0820     		movs	r0, #8
 1022 00be 1C4B     		ldr	r3, .L72+40
 1023 00c0 1988     		ldrh	r1, [r3]
 1024 00c2 FFF7FEFF 		bl	set_motor_speed
 1025              	.LVL116:
 1026              	.L70:
 583:Src/main.c    ****         {
 1027              		.loc 1 583 0 discriminator 1
 1028 00c6 184B     		ldr	r3, .L72+32
 1029 00c8 5A6A     		ldr	r2, [r3, #36]
 1030 00ca 2BB2     		sxth	r3, r5
 1031 00cc 9A42     		cmp	r2, r3
 1032 00ce FAD3     		bcc	.L70
 588:Src/main.c    ****         print(msg, 4);
 1033              		.loc 1 588 0
 1034 00d0 124C     		ldr	r4, .L72+20
 1035 00d2 626A     		ldr	r2, [r4, #36]
 1036 00d4 01A8     		add	r0, sp, #4
 1037 00d6 1749     		ldr	r1, .L72+44
 1038 00d8 FFF7FEFF 		bl	sprintf
 1039              	.LVL117:
 589:Src/main.c    ****         TIM4->CNT = 0;
 1040              		.loc 1 589 0
 1041 00dc 01A8     		add	r0, sp, #4
 1042 00de 0421     		movs	r1, #4
 1043 00e0 FFF7FEFF 		bl	print
 1044              	.LVL118:
 590:Src/main.c    ****     }
 1045              		.loc 1 590 0
 1046 00e4 0023     		movs	r3, #0
 1047 00e6 6362     		str	r3, [r4, #36]
 1048              	.L69:
 592:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1049              		.loc 1 592 0
 1050 00e8 0020     		movs	r0, #0
 1051 00ea 0146     		mov	r1, r0
 1052 00ec FFF7FEFF 		bl	set_motor_speed
 1053              	.LVL119:
 593:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 1054              		.loc 1 593 0
 1055 00f0 0820     		movs	r0, #8
 1056 00f2 0021     		movs	r1, #0
 1057 00f4 FFF7FEFF 		bl	set_motor_speed
 1058              	.LVL120:
 594:Src/main.c    **** }
 1059              		.loc 1 594 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 34


 1060 00f8 0548     		ldr	r0, .L72+8
 1061 00fa FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1062              	.LVL121:
 595:Src/main.c    **** 
 1063              		.loc 1 595 0
 1064 00fe 0EB0     		add	sp, sp, #56
 1065              	.LCFI19:
 1066              		.cfi_def_cfa_offset 16
 1067              		@ sp needed
 1068 0100 70BD     		pop	{r4, r5, r6, pc}
 1069              	.LVL122:
 1070              	.L73:
 1071 0102 00BFAFF3 		.align	3
 1071      0080
 1072              	.L72:
 1073 0108 721CC771 		.word	1908874354
 1074 010c 1CC7E13F 		.word	1071761180
 1075 0110 00000000 		.word	hadc1
 1076 0114 00000000 		.word	dma_buffer
 1077 0118 00004940 		.word	1078525952
 1078 011c 00080040 		.word	1073743872
 1079 0120 8C000000 		.word	.LC8
 1080 0124 00000000 		.word	.LANCHOR1
 1081 0128 000C0040 		.word	1073744896
 1082 012c A8000000 		.word	.LC9
 1083 0130 00000000 		.word	.LANCHOR0
 1084 0134 C4000000 		.word	.LC10
 1085              		.cfi_endproc
 1086              	.LFE130:
 1088              		.section	.text.debounce_and_grab,"ax",%progbits
 1089              		.align	2
 1090              		.global	debounce_and_grab
 1091              		.thumb
 1092              		.thumb_func
 1094              	debounce_and_grab:
 1095              	.LFB137:
 725:Src/main.c    ****     }
 726:Src/main.c    **** }
 727:Src/main.c    **** 
 728:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid)
 729:Src/main.c    **** {
 1096              		.loc 1 729 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 0
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              	.LVL123:
 1101 0000 38B5     		push	{r3, r4, r5, lr}
 1102              	.LCFI20:
 1103              		.cfi_def_cfa_offset 16
 1104              		.cfi_offset 3, -16
 1105              		.cfi_offset 4, -12
 1106              		.cfi_offset 5, -8
 1107              		.cfi_offset 14, -4
 1108 0002 0446     		mov	r4, r0
 730:Src/main.c    ****     uint32_t timeee = HAL_GetTick();
 1109              		.loc 1 730 0
 1110 0004 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 35


 1111              	.LVL124:
 731:Src/main.c    ****     // int count = 0;
 732:Src/main.c    ****     // while (HAL_GetTick() - timeee < 50)
 733:Src/main.c    ****     // {
 734:Src/main.c    ****     //     ++count;
 735:Src/main.c    ****     //     HAL_Delay(5);
 736:Src/main.c    ****     //     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_RESET)
 737:Src/main.c    ****     //     {
 738:Src/main.c    ****     //         print("CLAW_GRAB | Claw debounced. No ewok found\n", 0);
 739:Src/main.c    ****     //         ewok = FALSE;
 740:Src/main.c    ****     //         break;
 741:Src/main.c    ****     //     }
 742:Src/main.c    ****     // }
 743:Src/main.c    ****     // char msg[50] = "";
 744:Src/main.c    ****     // sprintf(msg, "CLAW_GRAB | Debounced with %d checks\n", count);
 745:Src/main.c    ****     // print(msg, 0);
 746:Src/main.c    ****     // If claw is still high, we have an ewok. Stop, grab it, continue on
 747:Src/main.c    ****     // hardcoded procedure
 748:Src/main.c    ****     print("CLAW_GRAB | grabbing ewok\n", 0);
 1112              		.loc 1 748 0
 1113 0008 B248     		ldr	r0, .L101
 1114 000a 0021     		movs	r1, #0
 1115 000c FFF7FEFF 		bl	print
 1116              	.LVL125:
 749:Src/main.c    ****     HAL_Delay(500);
 1117              		.loc 1 749 0
 1118 0010 4FF4FA70 		mov	r0, #500
 1119 0014 FFF7FEFF 		bl	HAL_Delay
 1120              	.LVL126:
 750:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 1121              		.loc 1 750 0
 1122 0018 0020     		movs	r0, #0
 1123 001a 0146     		mov	r1, r0
 1124 001c FFF7FEFF 		bl	set_motor_speed
 1125              	.LVL127:
 751:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1126              		.loc 1 751 0
 1127 0020 0820     		movs	r0, #8
 1128 0022 0021     		movs	r1, #0
 1129 0024 FFF7FEFF 		bl	set_motor_speed
 1130              	.LVL128:
 752:Src/main.c    ****     close_claw(&htim3);
 1131              		.loc 1 752 0
 1132 0028 AB4D     		ldr	r5, .L101+4
 1133 002a 2846     		mov	r0, r5
 1134 002c FFF7FEFF 		bl	close_claw
 1135              	.LVL129:
 753:Src/main.c    ****     arm_up(&htim3);
 1136              		.loc 1 753 0
 1137 0030 2846     		mov	r0, r5
 1138 0032 FFF7FEFF 		bl	arm_up
 1139              	.LVL130:
 754:Src/main.c    ****     // TODO: delete next line, there for testing!!!
 755:Src/main.c    ****     HAL_Delay(100);
 1140              		.loc 1 755 0
 1141 0036 6420     		movs	r0, #100
 1142 0038 FFF7FEFF 		bl	HAL_Delay
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 36


 1143              	.LVL131:
 756:Src/main.c    ****     ++ewok_cnt;
 1144              		.loc 1 756 0
 1145 003c A74A     		ldr	r2, .L101+8
 1146 003e 1368     		ldr	r3, [r2]
 1147 0040 0133     		adds	r3, r3, #1
 1148 0042 1360     		str	r3, [r2]
 757:Src/main.c    ****     // char msg[18] = "";
 758:Src/main.c    ****     // sprintf(msg, "wok_cnt: %d\n", ewok_cnt);
 759:Src/main.c    ****     // print(msg, 0);
 760:Src/main.c    ****     /*
 761:Src/main.c    ****      * Claw is up and closed
 762:Src/main.c    ****      * Ewok Count incremented
 763:Src/main.c    ****      * Motors not powered
 764:Src/main.c    ****      * CLAW_INT_STATE not FLAGGED, interrupt disabled
 765:Src/main.c    ****      */
 766:Src/main.c    **** 
 767:Src/main.c    ****     // For the first ewok, turn left, arm up, square robot w/ edge,
 768:Src/main.c    ****     // drive straight for 3 s, bring arm down
 769:Src/main.c    ****     if (ewok_cnt == 1)
 1149              		.loc 1 769 0
 1150 0044 012B     		cmp	r3, #1
 1151 0046 4CD1     		bne	.L75
 1152              	.LBB2:
 770:Src/main.c    ****     {
 771:Src/main.c    ****         print("First ewok captured\n", 0);
 1153              		.loc 1 771 0
 1154 0048 A548     		ldr	r0, .L101+12
 1155 004a 0021     		movs	r1, #0
 1156 004c FFF7FEFF 		bl	print
 1157              	.LVL132:
 772:Src/main.c    ****         turn_deg(-170);
 1158              		.loc 1 772 0
 1159 0050 6FF0A900 		mvn	r0, #169
 1160 0054 FFF7FEFF 		bl	turn_deg
 1161              	.LVL133:
 773:Src/main.c    ****         open_claw(&htim3);
 1162              		.loc 1 773 0
 1163 0058 2846     		mov	r0, r5
 1164 005a FFF7FEFF 		bl	open_claw
 1165              	.LVL134:
 774:Src/main.c    ****         LEFT_SPEED+=100;
 1166              		.loc 1 774 0
 1167 005e A14D     		ldr	r5, .L101+16
 1168 0060 2B88     		ldrh	r3, [r5]
 1169 0062 6433     		adds	r3, r3, #100
 1170 0064 2B80     		strh	r3, [r5]	@ movhi
 775:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED-50);
 1171              		.loc 1 775 0
 1172 0066 A04B     		ldr	r3, .L101+20
 1173 0068 1988     		ldrh	r1, [r3]
 1174 006a 0820     		movs	r0, #8
 1175 006c 3239     		subs	r1, r1, #50
 1176 006e FFF7FEFF 		bl	set_motor_speed
 1177              	.LVL135:
 776:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED-50);
 1178              		.loc 1 776 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 37


 1179 0072 2988     		ldrh	r1, [r5]
 1180 0074 0020     		movs	r0, #0
 1181 0076 3239     		subs	r1, r1, #50
 1182 0078 FFF7FEFF 		bl	set_motor_speed
 1183              	.LVL136:
 777:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1184              		.loc 1 777 0
 1185 007c FFF7FEFF 		bl	HAL_GetTick
 1186              	.LVL137:
 1187 0080 0546     		mov	r5, r0
 1188              	.LVL138:
 778:Src/main.c    ****         while(HAL_GetTick()-time < 1000){
 1189              		.loc 1 778 0
 1190 0082 02E0     		b	.L76
 1191              	.LVL139:
 1192              	.L77:
 779:Src/main.c    ****             drive_straight(enc_pid);
 1193              		.loc 1 779 0
 1194 0084 2046     		mov	r0, r4
 1195 0086 FFF7FEFF 		bl	drive_straight
 1196              	.LVL140:
 1197              	.L76:
 778:Src/main.c    ****         while(HAL_GetTick()-time < 1000){
 1198              		.loc 1 778 0
 1199 008a FFF7FEFF 		bl	HAL_GetTick
 1200              	.LVL141:
 1201 008e 401B     		subs	r0, r0, r5
 1202 0090 B0F57A7F 		cmp	r0, #1000
 1203 0094 F6D3     		bcc	.L77
 780:Src/main.c    ****         }
 781:Src/main.c    ****         square_edge(enc_pid);
 1204              		.loc 1 781 0
 1205 0096 2046     		mov	r0, r4
 1206 0098 FFF7FEFF 		bl	square_edge
 1207              	.LVL142:
 782:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1208              		.loc 1 782 0
 1209 009c 0820     		movs	r0, #8
 1210 009e 924B     		ldr	r3, .L101+20
 1211 00a0 1988     		ldrh	r1, [r3]
 1212 00a2 FFF7FEFF 		bl	set_motor_speed
 1213              	.LVL143:
 783:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1214              		.loc 1 783 0
 1215 00a6 0020     		movs	r0, #0
 1216 00a8 8E4B     		ldr	r3, .L101+16
 1217 00aa 1988     		ldrh	r1, [r3]
 1218 00ac FFF7FEFF 		bl	set_motor_speed
 1219              	.LVL144:
 784:Src/main.c    ****         time = HAL_GetTick();
 1220              		.loc 1 784 0
 1221 00b0 FFF7FEFF 		bl	HAL_GetTick
 1222              	.LVL145:
 1223 00b4 0546     		mov	r5, r0
 1224              	.LVL146:
 785:Src/main.c    ****         while(HAL_GetTick()-time < 2500){
 1225              		.loc 1 785 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 38


 1226 00b6 02E0     		b	.L78
 1227              	.LVL147:
 1228              	.L79:
 786:Src/main.c    ****             drive_straight(enc_pid);
 1229              		.loc 1 786 0
 1230 00b8 2046     		mov	r0, r4
 1231 00ba FFF7FEFF 		bl	drive_straight
 1232              	.LVL148:
 1233              	.L78:
 785:Src/main.c    ****         while(HAL_GetTick()-time < 2500){
 1234              		.loc 1 785 0
 1235 00be FFF7FEFF 		bl	HAL_GetTick
 1236              	.LVL149:
 1237 00c2 401B     		subs	r0, r0, r5
 1238 00c4 40F6C313 		movw	r3, #2499
 1239 00c8 9842     		cmp	r0, r3
 1240 00ca F5D9     		bls	.L79
 787:Src/main.c    ****         }
 788:Src/main.c    ****         arm_down(&htim3);
 1241              		.loc 1 788 0
 1242 00cc 8248     		ldr	r0, .L101+4
 1243 00ce FFF7FEFF 		bl	arm_down
 1244              	.LVL150:
 789:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1245              		.loc 1 789 0
 1246 00d2 0820     		movs	r0, #8
 1247 00d4 0021     		movs	r1, #0
 1248 00d6 FFF7FEFF 		bl	set_motor_speed
 1249              	.LVL151:
 790:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1250              		.loc 1 790 0
 1251 00da 0020     		movs	r0, #0
 1252 00dc 0146     		mov	r1, r0
 1253 00de FFF7FEFF 		bl	set_motor_speed
 1254              	.LVL152:
 1255              	.L75:
 1256              	.LBE2:
 791:Src/main.c    ****         // square_edge(&enc_pid);
 792:Src/main.c    ****         //        drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 10000);
 793:Src/main.c    ****     }
 794:Src/main.c    **** 
 795:Src/main.c    ****     if (ewok_cnt == 2)
 1257              		.loc 1 795 0
 1258 00e2 7E4B     		ldr	r3, .L101+8
 1259 00e4 1B68     		ldr	r3, [r3]
 1260 00e6 022B     		cmp	r3, #2
 1261 00e8 44D1     		bne	.L80
 1262              	.LBB3:
 796:Src/main.c    ****     {
 797:Src/main.c    ****         print("Second ewok captured\n",0);
 1263              		.loc 1 797 0
 1264 00ea 8048     		ldr	r0, .L101+24
 1265 00ec 0021     		movs	r1, #0
 1266 00ee FFF7FEFF 		bl	print
 1267              	.LVL153:
 798:Src/main.c    ****         if(ewok_cnt==2 && searches == 3){
 1268              		.loc 1 798 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 39


 1269 00f2 7A4B     		ldr	r3, .L101+8
 1270 00f4 1B68     		ldr	r3, [r3]
 1271 00f6 022B     		cmp	r3, #2
 1272 00f8 08D1     		bne	.L81
 1273              		.loc 1 798 0 is_stmt 0 discriminator 1
 1274 00fa 7D4B     		ldr	r3, .L101+28
 1275 00fc 1B68     		ldr	r3, [r3]
 1276 00fe 032B     		cmp	r3, #3
 1277 0100 04D1     		bne	.L81
 799:Src/main.c    ****             turn_deg(-200); //  Prolly have to change this
 1278              		.loc 1 799 0 is_stmt 1
 1279 0102 6FF0C700 		mvn	r0, #199
 1280 0106 FFF7FEFF 		bl	turn_deg
 1281              	.LVL154:
 1282 010a 03E0     		b	.L82
 1283              	.L81:
 800:Src/main.c    ****         }else{
 801:Src/main.c    ****             turn_deg(-180); //  Prolly have to change this
 1284              		.loc 1 801 0
 1285 010c 6FF0B300 		mvn	r0, #179
 1286 0110 FFF7FEFF 		bl	turn_deg
 1287              	.LVL155:
 1288              	.L82:
 802:Src/main.c    ****         }
 803:Src/main.c    ****         HAL_Delay(10);
 1289              		.loc 1 803 0
 1290 0114 0A20     		movs	r0, #10
 1291 0116 FFF7FEFF 		bl	HAL_Delay
 1292              	.LVL156:
 804:Src/main.c    ****         alarm_detect();
 1293              		.loc 1 804 0
 1294 011a FFF7FEFF 		bl	alarm_detect
 1295              	.LVL157:
 805:Src/main.c    ****         HAL_Delay(10);
 1296              		.loc 1 805 0
 1297 011e 0A20     		movs	r0, #10
 1298 0120 FFF7FEFF 		bl	HAL_Delay
 1299              	.LVL158:
 806:Src/main.c    ****         open_claw(&htim3);
 1300              		.loc 1 806 0
 1301 0124 6C48     		ldr	r0, .L101+4
 1302 0126 FFF7FEFF 		bl	open_claw
 1303              	.LVL159:
 807:Src/main.c    ****         HAL_Delay(10);
 1304              		.loc 1 807 0
 1305 012a 0A20     		movs	r0, #10
 1306 012c FFF7FEFF 		bl	HAL_Delay
 1307              	.LVL160:
 808:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1308              		.loc 1 808 0
 1309 0130 FFF7FEFF 		bl	HAL_GetTick
 1310              	.LVL161:
 1311 0134 0546     		mov	r5, r0
 1312              	.LVL162:
 809:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1313              		.loc 1 809 0
 1314 0136 0820     		movs	r0, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 40


 1315              	.LVL163:
 1316 0138 6B4B     		ldr	r3, .L101+20
 1317 013a 1988     		ldrh	r1, [r3]
 1318 013c FFF7FEFF 		bl	set_motor_speed
 1319              	.LVL164:
 810:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1320              		.loc 1 810 0
 1321 0140 0020     		movs	r0, #0
 1322 0142 684B     		ldr	r3, .L101+16
 1323 0144 1988     		ldrh	r1, [r3]
 1324 0146 FFF7FEFF 		bl	set_motor_speed
 1325              	.LVL165:
 811:Src/main.c    ****         while(HAL_GetTick()-time < 8000){
 1326              		.loc 1 811 0
 1327 014a 02E0     		b	.L83
 1328              	.L84:
 812:Src/main.c    ****             drive_straight(enc_pid);
 1329              		.loc 1 812 0
 1330 014c 2046     		mov	r0, r4
 1331 014e FFF7FEFF 		bl	drive_straight
 1332              	.LVL166:
 1333              	.L83:
 811:Src/main.c    ****         while(HAL_GetTick()-time < 8000){
 1334              		.loc 1 811 0
 1335 0152 FFF7FEFF 		bl	HAL_GetTick
 1336              	.LVL167:
 1337 0156 401B     		subs	r0, r0, r5
 1338 0158 B0F5FA5F 		cmp	r0, #8000
 1339 015c F6D3     		bcc	.L84
 813:Src/main.c    ****         }
 814:Src/main.c    ****         arm_down(&htim3);
 1340              		.loc 1 814 0
 1341 015e 5E48     		ldr	r0, .L101+4
 1342 0160 FFF7FEFF 		bl	arm_down
 1343              	.LVL168:
 815:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1344              		.loc 1 815 0
 1345 0164 0820     		movs	r0, #8
 1346 0166 0021     		movs	r1, #0
 1347 0168 FFF7FEFF 		bl	set_motor_speed
 1348              	.LVL169:
 816:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1349              		.loc 1 816 0
 1350 016c 0020     		movs	r0, #0
 1351 016e 0146     		mov	r1, r0
 1352 0170 FFF7FEFF 		bl	set_motor_speed
 1353              	.LVL170:
 1354              	.L80:
 1355              	.LBE3:
 817:Src/main.c    ****         /*
 818:Src/main.c    ****            timeee = HAL_GetTick();
 819:Src/main.c    ****            while (HAL_GetTick() - timeee < 7000)
 820:Src/main.c    ****            {
 821:Src/main.c    ****            if (TAPE_LEFT_STATE == FLAGGED && TAPE_RIGHT_STATE != FLAGGED)
 822:Src/main.c    ****            {
 823:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 824:Src/main.c    ****         // Tape detects object when high
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 41


 825:Src/main.c    ****         while (HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) == GPIO_PIN_SET);
 826:Src/main.c    ****         HAL_Delay(100);
 827:Src/main.c    ****         TAPE_LEFT_STATE = NOT_FLAGGED;
 828:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 829:Src/main.c    ****         }
 830:Src/main.c    ****         else if (TAPE_RIGHT_STATE == FLAGGED && TAPE_LEFT_STATE != FLAGGED)
 831:Src/main.c    ****         {
 832:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 833:Src/main.c    ****         while (HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) == GPIO_PIN_SET);
 834:Src/main.c    ****         HAL_Delay(100);
 835:Src/main.c    ****         TAPE_RIGHT_STATE = NOT_FLAGGED;
 836:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 837:Src/main.c    ****         }
 838:Src/main.c    ****         }
 839:Src/main.c    ****         */
 840:Src/main.c    ****     }
 841:Src/main.c    **** 
 842:Src/main.c    **** 
 843:Src/main.c    ****     if (ewok_cnt == 3)
 1356              		.loc 1 843 0
 1357 0174 594B     		ldr	r3, .L101+8
 1358 0176 1B68     		ldr	r3, [r3]
 1359 0178 032B     		cmp	r3, #3
 1360 017a 54D1     		bne	.L85
 1361              	.LBB4:
 844:Src/main.c    ****     {
 845:Src/main.c    ****         print("Third ewok captured\n", 0);
 1362              		.loc 1 845 0
 1363 017c 5D48     		ldr	r0, .L101+32
 1364 017e 0021     		movs	r1, #0
 1365 0180 FFF7FEFF 		bl	print
 1366              	.LVL171:
 846:Src/main.c    ****         turn_deg(170);
 1367              		.loc 1 846 0
 1368 0184 AA20     		movs	r0, #170
 1369 0186 FFF7FEFF 		bl	turn_deg
 1370              	.LVL172:
 847:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1371              		.loc 1 847 0
 1372 018a 0820     		movs	r0, #8
 1373 018c 564B     		ldr	r3, .L101+20
 1374 018e 1988     		ldrh	r1, [r3]
 1375 0190 FFF7FEFF 		bl	set_motor_speed
 1376              	.LVL173:
 848:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1377              		.loc 1 848 0
 1378 0194 0020     		movs	r0, #0
 1379 0196 534B     		ldr	r3, .L101+16
 1380 0198 1988     		ldrh	r1, [r3]
 1381 019a FFF7FEFF 		bl	set_motor_speed
 1382              	.LVL174:
 849:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1383              		.loc 1 849 0
 1384 019e FFF7FEFF 		bl	HAL_GetTick
 1385              	.LVL175:
 1386 01a2 0546     		mov	r5, r0
 1387              	.LVL176:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 42


 850:Src/main.c    ****         while(HAL_GetTick()-time < 1500){
 1388              		.loc 1 850 0
 1389 01a4 02E0     		b	.L86
 1390              	.LVL177:
 1391              	.L87:
 851:Src/main.c    ****             drive_straight(enc_pid);
 1392              		.loc 1 851 0
 1393 01a6 2046     		mov	r0, r4
 1394 01a8 FFF7FEFF 		bl	drive_straight
 1395              	.LVL178:
 1396              	.L86:
 850:Src/main.c    ****         while(HAL_GetTick()-time < 1500){
 1397              		.loc 1 850 0
 1398 01ac FFF7FEFF 		bl	HAL_GetTick
 1399              	.LVL179:
 1400 01b0 401B     		subs	r0, r0, r5
 1401 01b2 40F2DB53 		movw	r3, #1499
 1402 01b6 9842     		cmp	r0, r3
 1403 01b8 F5D9     		bls	.L87
 852:Src/main.c    ****         }
 853:Src/main.c    ****         square_edge(enc_pid);
 1404              		.loc 1 853 0
 1405 01ba 2046     		mov	r0, r4
 1406 01bc FFF7FEFF 		bl	square_edge
 1407              	.LVL180:
 854:Src/main.c    ****         open_claw(&htim3);
 1408              		.loc 1 854 0
 1409 01c0 4548     		ldr	r0, .L101+4
 1410 01c2 FFF7FEFF 		bl	open_claw
 1411              	.LVL181:
 855:Src/main.c    ****         time = HAL_GetTick();
 1412              		.loc 1 855 0
 1413 01c6 FFF7FEFF 		bl	HAL_GetTick
 1414              	.LVL182:
 1415 01ca 0546     		mov	r5, r0
 1416              	.LVL183:
 856:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED+100);
 1417              		.loc 1 856 0
 1418 01cc 464B     		ldr	r3, .L101+20
 1419 01ce 1988     		ldrh	r1, [r3]
 1420 01d0 0820     		movs	r0, #8
 1421              	.LVL184:
 1422 01d2 6431     		adds	r1, r1, #100
 1423 01d4 FFF7FEFF 		bl	set_motor_speed
 1424              	.LVL185:
 857:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED+100);
 1425              		.loc 1 857 0
 1426 01d8 424B     		ldr	r3, .L101+16
 1427 01da 1988     		ldrh	r1, [r3]
 1428 01dc 0020     		movs	r0, #0
 1429 01de 6431     		adds	r1, r1, #100
 1430 01e0 FFF7FEFF 		bl	set_motor_speed
 1431              	.LVL186:
 858:Src/main.c    ****         while(HAL_GetTick()-time < 2000){
 1432              		.loc 1 858 0
 1433 01e4 02E0     		b	.L88
 1434              	.L89:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 43


 859:Src/main.c    ****             drive_straight(enc_pid);
 1435              		.loc 1 859 0
 1436 01e6 2046     		mov	r0, r4
 1437 01e8 FFF7FEFF 		bl	drive_straight
 1438              	.LVL187:
 1439              	.L88:
 858:Src/main.c    ****         while(HAL_GetTick()-time < 2000){
 1440              		.loc 1 858 0
 1441 01ec FFF7FEFF 		bl	HAL_GetTick
 1442              	.LVL188:
 1443 01f0 401B     		subs	r0, r0, r5
 1444 01f2 B0F5FA6F 		cmp	r0, #2000
 1445 01f6 F6D3     		bcc	.L89
 860:Src/main.c    ****         }
 861:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1446              		.loc 1 861 0
 1447 01f8 0820     		movs	r0, #8
 1448 01fa 0021     		movs	r1, #0
 1449 01fc FFF7FEFF 		bl	set_motor_speed
 1450              	.LVL189:
 862:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1451              		.loc 1 862 0
 1452 0200 0020     		movs	r0, #0
 1453 0202 0146     		mov	r1, r0
 1454 0204 FFF7FEFF 		bl	set_motor_speed
 1455              	.LVL190:
 863:Src/main.c    ****         HAL_Delay(700);
 1456              		.loc 1 863 0
 1457 0208 4FF42F70 		mov	r0, #700
 1458 020c FFF7FEFF 		bl	HAL_Delay
 1459              	.LVL191:
 864:Src/main.c    ****         arm_down(&htim3);
 1460              		.loc 1 864 0
 1461 0210 3148     		ldr	r0, .L101+4
 1462 0212 FFF7FEFF 		bl	arm_down
 1463              	.LVL192:
 865:Src/main.c    ****         HAL_Delay(700);
 1464              		.loc 1 865 0
 1465 0216 4FF42F70 		mov	r0, #700
 1466 021a FFF7FEFF 		bl	HAL_Delay
 1467              	.LVL193:
 866:Src/main.c    ****         print("ewok\n", 0);
 1468              		.loc 1 866 0
 1469 021e 3648     		ldr	r0, .L101+36
 1470 0220 0021     		movs	r1, #0
 1471 0222 FFF7FEFF 		bl	print
 1472              	.LVL194:
 1473              	.L85:
 1474              	.LBE4:
 867:Src/main.c    ****     }
 868:Src/main.c    **** 
 869:Src/main.c    **** 
 870:Src/main.c    ****     if (ewok_cnt == 4)
 1475              		.loc 1 870 0
 1476 0226 2D4B     		ldr	r3, .L101+8
 1477 0228 1B68     		ldr	r3, [r3]
 1478 022a 042B     		cmp	r3, #4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 44


 1479 022c 40F08280 		bne	.L90
 871:Src/main.c    ****     {
 872:Src/main.c    ****         print("Fourth ewok captured\n", 0);
 1480              		.loc 1 872 0
 1481 0230 3248     		ldr	r0, .L101+40
 1482 0232 0021     		movs	r1, #0
 1483 0234 FFF7FEFF 		bl	print
 1484              	.LVL195:
 873:Src/main.c    ****         turn_deg(180);
 1485              		.loc 1 873 0
 1486 0238 B420     		movs	r0, #180
 1487 023a FFF7FEFF 		bl	turn_deg
 1488              	.LVL196:
 874:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1489              		.loc 1 874 0
 1490 023e 0820     		movs	r0, #8
 1491 0240 294B     		ldr	r3, .L101+20
 1492 0242 1988     		ldrh	r1, [r3]
 1493 0244 FFF7FEFF 		bl	set_motor_speed
 1494              	.LVL197:
 875:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1495              		.loc 1 875 0
 1496 0248 264D     		ldr	r5, .L101+16
 1497 024a 0020     		movs	r0, #0
 1498 024c 2988     		ldrh	r1, [r5]
 1499 024e FFF7FEFF 		bl	set_motor_speed
 1500              	.LVL198:
 876:Src/main.c    ****         open_claw(&htim3);
 1501              		.loc 1 876 0
 1502 0252 2148     		ldr	r0, .L101+4
 1503 0254 FFF7FEFF 		bl	open_claw
 1504              	.LVL199:
 877:Src/main.c    ****         LEFT_SPEED -= 100;
 1505              		.loc 1 877 0
 1506 0258 2B88     		ldrh	r3, [r5]
 1507 025a 643B     		subs	r3, r3, #100
 1508 025c 2B80     		strh	r3, [r5]	@ movhi
 878:Src/main.c    ****         timeee = HAL_GetTick();
 1509              		.loc 1 878 0
 1510 025e FFF7FEFF 		bl	HAL_GetTick
 1511              	.LVL200:
 1512 0262 0546     		mov	r5, r0
 1513              	.LVL201:
 879:Src/main.c    ****         while (HAL_GetTick() - timeee < 8000)
 1514              		.loc 1 879 0
 1515 0264 5DE0     		b	.L91
 1516              	.LVL202:
 1517              	.L96:
 880:Src/main.c    ****         {
 881:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_
 1518              		.loc 1 881 0
 1519 0266 2648     		ldr	r0, .L101+44
 1520 0268 0421     		movs	r1, #4
 1521 026a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1522              	.LVL203:
 1523 026e 68B9     		cbnz	r0, .L92
 1524              		.loc 1 881 0 is_stmt 0 discriminator 1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 45


 1525 0270 00F18040 		add	r0, r0, #1073741824
 1526 0274 00F50230 		add	r0, r0, #133120
 1527 0278 0821     		movs	r1, #8
 1528 027a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1529              	.LVL204:
 1530 027e 0128     		cmp	r0, #1
 1531 0280 04D1     		bne	.L92
 882:Src/main.c    ****             {
 883:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 1532              		.loc 1 883 0 is_stmt 1
 1533 0282 0820     		movs	r0, #8
 1534 0284 0021     		movs	r1, #0
 1535 0286 FFF7FEFF 		bl	set_motor_speed
 1536              	.LVL205:
 1537 028a 47E0     		b	.L93
 1538              	.L92:
 884:Src/main.c    ****             }else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_SET && HAL_G
 1539              		.loc 1 884 0
 1540 028c 1C48     		ldr	r0, .L101+44
 1541 028e 0421     		movs	r1, #4
 1542 0290 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1543              	.LVL206:
 1544 0294 0128     		cmp	r0, #1
 1545 0296 08D1     		bne	.L94
 1546              		.loc 1 884 0 is_stmt 0 discriminator 1
 1547 0298 1A48     		ldr	r0, .L101+48
 1548 029a 0821     		movs	r1, #8
 1549 029c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1550              	.LVL207:
 1551 02a0 18B9     		cbnz	r0, .L94
 885:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 1552              		.loc 1 885 0 is_stmt 1
 1553 02a2 0146     		mov	r1, r0
 1554 02a4 FFF7FEFF 		bl	set_motor_speed
 1555              	.LVL208:
 1556 02a8 38E0     		b	.L93
 1557              	.L94:
 886:Src/main.c    ****             }else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL
 1558              		.loc 1 886 0
 1559 02aa 1548     		ldr	r0, .L101+44
 1560 02ac 0421     		movs	r1, #4
 1561 02ae FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1562              	.LVL209:
 1563 02b2 48BB     		cbnz	r0, .L95
 1564              		.loc 1 886 0 is_stmt 0 discriminator 1
 1565 02b4 00F18040 		add	r0, r0, #1073741824
 1566 02b8 00F50230 		add	r0, r0, #133120
 1567 02bc 0821     		movs	r1, #8
 1568 02be FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1569              	.LVL210:
 1570 02c2 08BB     		cbnz	r0, .L95
 887:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 1571              		.loc 1 887 0 is_stmt 1
 1572 02c4 0146     		mov	r1, r0
 1573 02c6 FFF7FEFF 		bl	set_motor_speed
 1574              	.LVL211:
 888:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 46


 1575              		.loc 1 888 0
 1576 02ca 0820     		movs	r0, #8
 1577 02cc 0021     		movs	r1, #0
 1578 02ce FFF7FEFF 		bl	set_motor_speed
 1579              	.LVL212:
 1580 02d2 23E0     		b	.L93
 1581              	.L102:
 1582              		.align	2
 1583              	.L101:
 1584 02d4 E0000000 		.word	.LC11
 1585 02d8 00000000 		.word	htim3
 1586 02dc 00000000 		.word	.LANCHOR2
 1587 02e0 FC000000 		.word	.LC12
 1588 02e4 00000000 		.word	.LANCHOR1
 1589 02e8 00000000 		.word	.LANCHOR0
 1590 02ec 14010000 		.word	.LC13
 1591 02f0 00000000 		.word	.LANCHOR3
 1592 02f4 2C010000 		.word	.LC14
 1593 02f8 44010000 		.word	.LC15
 1594 02fc 4C010000 		.word	.LC16
 1595 0300 000C0240 		.word	1073875968
 1596 0304 00080240 		.word	1073874944
 1597              	.L95:
 889:Src/main.c    ****             }else{
 890:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1598              		.loc 1 890 0
 1599 0308 0820     		movs	r0, #8
 1600 030a 2B4B     		ldr	r3, .L103
 1601 030c 1988     		ldrh	r1, [r3]
 1602 030e FFF7FEFF 		bl	set_motor_speed
 1603              	.LVL213:
 891:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1604              		.loc 1 891 0
 1605 0312 0020     		movs	r0, #0
 1606 0314 294B     		ldr	r3, .L103+4
 1607 0316 1988     		ldrh	r1, [r3]
 1608 0318 FFF7FEFF 		bl	set_motor_speed
 1609              	.LVL214:
 1610              	.L93:
 892:Src/main.c    ****             }
 893:Src/main.c    ****             drive_straight(enc_pid);
 1611              		.loc 1 893 0
 1612 031c 2046     		mov	r0, r4
 1613 031e FFF7FEFF 		bl	drive_straight
 1614              	.LVL215:
 1615              	.L91:
 879:Src/main.c    ****         {
 1616              		.loc 1 879 0
 1617 0322 FFF7FEFF 		bl	HAL_GetTick
 1618              	.LVL216:
 1619 0326 401B     		subs	r0, r0, r5
 1620 0328 B0F5FA5F 		cmp	r0, #8000
 1621 032c 9BD3     		bcc	.L96
 894:Src/main.c    ****         }
 895:Src/main.c    ****         arm_down(&htim3);
 1622              		.loc 1 895 0
 1623 032e 2448     		ldr	r0, .L103+8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 47


 1624 0330 FFF7FEFF 		bl	arm_down
 1625              	.LVL217:
 1626              	.L90:
 896:Src/main.c    ****     }
 897:Src/main.c    **** 
 898:Src/main.c    ****     if (ewok_cnt == 5)
 1627              		.loc 1 898 0
 1628 0334 234B     		ldr	r3, .L103+12
 1629 0336 1B68     		ldr	r3, [r3]
 1630 0338 052B     		cmp	r3, #5
 1631 033a 35D1     		bne	.L97
 1632              	.LBB5:
 899:Src/main.c    ****     {
 900:Src/main.c    ****         print("Chewie captured\n", 0);
 1633              		.loc 1 900 0
 1634 033c 2248     		ldr	r0, .L103+16
 1635 033e 0021     		movs	r1, #0
 1636 0340 FFF7FEFF 		bl	print
 1637              	.LVL218:
 901:Src/main.c    ****         turn_deg(50);
 1638              		.loc 1 901 0
 1639 0344 3220     		movs	r0, #50
 1640 0346 FFF7FEFF 		bl	turn_deg
 1641              	.LVL219:
 902:Src/main.c    ****         open_claw(&htim3);
 1642              		.loc 1 902 0
 1643 034a 1D4D     		ldr	r5, .L103+8
 1644 034c 2846     		mov	r0, r5
 1645 034e FFF7FEFF 		bl	open_claw
 1646              	.LVL220:
 903:Src/main.c    ****         HAL_Delay(750);
 1647              		.loc 1 903 0
 1648 0352 40F2EE20 		movw	r0, #750
 1649 0356 FFF7FEFF 		bl	HAL_Delay
 1650              	.LVL221:
 904:Src/main.c    ****         arm_down(&htim3);
 1651              		.loc 1 904 0
 1652 035a 2846     		mov	r0, r5
 1653 035c FFF7FEFF 		bl	arm_down
 1654              	.LVL222:
 905:Src/main.c    ****         slow_actuate(&htim3, BASKET_CH, 10, 180);
 1655              		.loc 1 905 0
 1656 0360 2846     		mov	r0, r5
 1657 0362 0821     		movs	r1, #8
 1658 0364 0A22     		movs	r2, #10
 1659 0366 B423     		movs	r3, #180
 1660 0368 FFF7FEFF 		bl	slow_actuate
 1661              	.LVL223:
 906:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1662              		.loc 1 906 0
 1663 036c FFF7FEFF 		bl	HAL_GetTick
 1664              	.LVL224:
 1665 0370 0546     		mov	r5, r0
 1666              	.LVL225:
 907:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1667              		.loc 1 907 0
 1668 0372 0820     		movs	r0, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 48


 1669              	.LVL226:
 1670 0374 104B     		ldr	r3, .L103
 1671 0376 1988     		ldrh	r1, [r3]
 1672 0378 FFF7FEFF 		bl	set_motor_speed
 1673              	.LVL227:
 908:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1674              		.loc 1 908 0
 1675 037c 0020     		movs	r0, #0
 1676 037e 0F4B     		ldr	r3, .L103+4
 1677 0380 1988     		ldrh	r1, [r3]
 1678 0382 FFF7FEFF 		bl	set_motor_speed
 1679              	.LVL228:
 909:Src/main.c    ****         while(HAL_GetTick()-time < 5000){
 1680              		.loc 1 909 0
 1681 0386 02E0     		b	.L98
 1682              	.L99:
 910:Src/main.c    ****             drive_straight(enc_pid);
 1683              		.loc 1 910 0
 1684 0388 2046     		mov	r0, r4
 1685 038a FFF7FEFF 		bl	drive_straight
 1686              	.LVL229:
 1687              	.L98:
 909:Src/main.c    ****         while(HAL_GetTick()-time < 5000){
 1688              		.loc 1 909 0
 1689 038e FFF7FEFF 		bl	HAL_GetTick
 1690              	.LVL230:
 1691 0392 401B     		subs	r0, r0, r5
 1692 0394 41F28733 		movw	r3, #4999
 1693 0398 9842     		cmp	r0, r3
 1694 039a F5D9     		bls	.L99
 911:Src/main.c    ****         }
 912:Src/main.c    ****         slow_actuate(&htim3, BASKET_CH, 180, 20);
 1695              		.loc 1 912 0
 1696 039c 0848     		ldr	r0, .L103+8
 1697 039e 0821     		movs	r1, #8
 1698 03a0 B422     		movs	r2, #180
 1699 03a2 1423     		movs	r3, #20
 1700 03a4 FFF7FEFF 		bl	slow_actuate
 1701              	.LVL231:
 1702              	.L97:
 1703              	.LBE5:
 913:Src/main.c    ****     }
 914:Src/main.c    ****     searches = 0;
 1704              		.loc 1 914 0
 1705 03a8 0023     		movs	r3, #0
 1706 03aa 084A     		ldr	r2, .L103+20
 1707 03ac 1360     		str	r3, [r2]
 915:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 1708              		.loc 1 915 0
 1709 03ae 084A     		ldr	r2, .L103+24
 1710 03b0 1370     		strb	r3, [r2]
 916:Src/main.c    ****     return TRUE;
 917:Src/main.c    **** }
 1711              		.loc 1 917 0
 1712 03b2 0120     		movs	r0, #1
 1713 03b4 38BD     		pop	{r3, r4, r5, pc}
 1714              	.LVL232:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 49


 1715              	.L104:
 1716 03b6 00BF     		.align	2
 1717              	.L103:
 1718 03b8 00000000 		.word	.LANCHOR0
 1719 03bc 00000000 		.word	.LANCHOR1
 1720 03c0 00000000 		.word	htim3
 1721 03c4 00000000 		.word	.LANCHOR2
 1722 03c8 64010000 		.word	.LC17
 1723 03cc 00000000 		.word	.LANCHOR3
 1724 03d0 00000000 		.word	CLAW_INT_STATE
 1725              		.cfi_endproc
 1726              	.LFE137:
 1728              		.section	.text.drive_straight_time,"ax",%progbits
 1729              		.align	2
 1730              		.global	drive_straight_time
 1731              		.thumb
 1732              		.thumb_func
 1734              	drive_straight_time:
 1735              	.LFB127:
 449:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 1736              		.loc 1 449 0
 1737              		.cfi_startproc
 1738              		@ args = 0, pretend = 0, frame = 0
 1739              		@ frame_needed = 0, uses_anonymous_args = 0
 1740              	.LVL233:
 1741 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1742              	.LCFI21:
 1743              		.cfi_def_cfa_offset 24
 1744              		.cfi_offset 4, -24
 1745              		.cfi_offset 5, -20
 1746              		.cfi_offset 6, -16
 1747              		.cfi_offset 7, -12
 1748              		.cfi_offset 8, -8
 1749              		.cfi_offset 14, -4
 1750 0004 0646     		mov	r6, r0
 1751 0006 8846     		mov	r8, r1
 1752 0008 1746     		mov	r7, r2
 1753 000a 1D46     		mov	r5, r3
 450:Src/main.c    ****     char msg[50] = "";
 1754              		.loc 1 450 0
 1755 000c FFF7FEFF 		bl	HAL_GetTick
 1756              	.LVL234:
 1757 0010 0446     		mov	r4, r0
 1758              	.LVL235:
 453:Src/main.c    ****     {
 1759              		.loc 1 453 0
 1760 0012 19E0     		b	.L106
 1761              	.LVL236:
 1762              	.L110:
 455:Src/main.c    ****         {
 1763              		.loc 1 455 0
 1764 0014 1448     		ldr	r0, .L112
 1765 0016 1021     		movs	r1, #16
 1766 0018 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1767              	.LVL237:
 1768 001c 0128     		cmp	r0, #1
 1769 001e 08D1     		bne	.L107
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 50


 457:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 1770              		.loc 1 457 0
 1771 0020 1248     		ldr	r0, .L112+4
 1772 0022 0021     		movs	r1, #0
 1773 0024 FFF7FEFF 		bl	print
 1774              	.LVL238:
 458:Src/main.c    ****         }
 1775              		.loc 1 458 0
 1776 0028 3046     		mov	r0, r6
 1777 002a FFF7FEFF 		bl	debounce_and_grab
 1778              	.LVL239:
 1779 002e 58B1     		cbz	r0, .L106
 1780 0030 0FE0     		b	.L108
 1781              	.L107:
 477:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 1782              		.loc 1 477 0
 1783 0032 0020     		movs	r0, #0
 1784 0034 4146     		mov	r1, r8
 1785 0036 FFF7FEFF 		bl	set_motor_speed
 1786              	.LVL240:
 478:Src/main.c    ****             drive_straight(enc_pid);
 1787              		.loc 1 478 0
 1788 003a 0820     		movs	r0, #8
 1789 003c 3946     		mov	r1, r7
 1790 003e FFF7FEFF 		bl	set_motor_speed
 1791              	.LVL241:
 479:Src/main.c    **** 
 1792              		.loc 1 479 0
 1793 0042 3046     		mov	r0, r6
 1794 0044 FFF7FEFF 		bl	drive_straight
 1795              	.LVL242:
 1796              	.L106:
 453:Src/main.c    ****     {
 1797              		.loc 1 453 0
 1798 0048 FFF7FEFF 		bl	HAL_GetTick
 1799              	.LVL243:
 1800 004c 001B     		subs	r0, r0, r4
 1801 004e A842     		cmp	r0, r5
 1802 0050 E0D3     		bcc	.L110
 1803              	.L108:
 483:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1804              		.loc 1 483 0
 1805 0052 0020     		movs	r0, #0
 1806 0054 0146     		mov	r1, r0
 1807 0056 FFF7FEFF 		bl	set_motor_speed
 1808              	.LVL244:
 484:Src/main.c    **** }
 1809              		.loc 1 484 0
 1810 005a 0820     		movs	r0, #8
 1811 005c 0021     		movs	r1, #0
 1812 005e FFF7FEFF 		bl	set_motor_speed
 1813              	.LVL245:
 1814 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1815              	.LVL246:
 1816              	.L113:
 1817 0066 00BF     		.align	2
 1818              	.L112:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 51


 1819 0068 00040240 		.word	1073873920
 1820 006c 78010000 		.word	.LC18
 1821              		.cfi_endproc
 1822              	.LFE127:
 1824              		.section	.text.test_PWM_htim1,"ax",%progbits
 1825              		.align	2
 1826              		.global	test_PWM_htim1
 1827              		.thumb
 1828              		.thumb_func
 1830              	test_PWM_htim1:
 1831              	.LFB138:
 918:Src/main.c    **** 
 919:Src/main.c    **** // ******
 920:Src/main.c    **** // TESTS
 921:Src/main.c    **** // ******
 922:Src/main.c    **** 
 923:Src/main.c    **** /*
 924:Src/main.c    ****  * Instructions:
 925:Src/main.c    ****  *      Run test_All() before the main while loop
 926:Src/main.c    ****  *      - Put a pull up resistor on htim3 PWM waves, measure voltage on pin
 927:Src/main.c    ****  *      - Measure voltage on pin of htim1
 928:Src/main.c    ****  *      - Give ADC pins values and read off of screen
 929:Src/main.c    ****  */
 930:Src/main.c    **** 
 931:Src/main.c    **** /*
 932:Src/main.c    ****  * Test PWM
 933:Src/main.c    ****  * Output: htim1 channel 1 through 4, PWM wave. Confirm these
 934:Src/main.c    ****  *         PWM waves via an oscilliscope.
 935:Src/main.c    ****  */
 936:Src/main.c    **** void test_PWM_htim1()
 937:Src/main.c    **** {
 1832              		.loc 1 937 0
 1833              		.cfi_startproc
 1834              		@ args = 0, pretend = 0, frame = 0
 1835              		@ frame_needed = 0, uses_anonymous_args = 0
 1836 0000 10B5     		push	{r4, lr}
 1837              	.LCFI22:
 1838              		.cfi_def_cfa_offset 8
 1839              		.cfi_offset 4, -8
 1840              		.cfi_offset 14, -4
 938:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1841              		.loc 1 938 0
 1842 0002 0C4C     		ldr	r4, .L118
 1843 0004 2046     		mov	r0, r4
 1844 0006 0021     		movs	r1, #0
 1845 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1846              	.LVL247:
 939:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 940:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1847              		.loc 1 940 0
 1848 000c 2046     		mov	r0, r4
 1849 000e 0821     		movs	r1, #8
 1850 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1851              	.LVL248:
 941:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 942:Src/main.c    ****     int s = 0;
 1852              		.loc 1 942 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 52


 1853 0014 0024     		movs	r4, #0
 943:Src/main.c    ****     while (s < 1000)
 1854              		.loc 1 943 0
 1855 0016 08E0     		b	.L115
 1856              	.LVL249:
 1857              	.L116:
 944:Src/main.c    ****     {
 945:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, s);
 1858              		.loc 1 945 0
 1859 0018 064B     		ldr	r3, .L118
 1860 001a 1B68     		ldr	r3, [r3]
 1861 001c 5C63     		str	r4, [r3, #52]
 946:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 947:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, s);
 1862              		.loc 1 947 0
 1863 001e DC63     		str	r4, [r3, #60]
 948:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 949:Src/main.c    ****         s += 100;
 1864              		.loc 1 949 0
 1865 0020 6434     		adds	r4, r4, #100
 1866              	.LVL250:
 950:Src/main.c    ****         HAL_Delay(1000);
 1867              		.loc 1 950 0
 1868 0022 4FF47A70 		mov	r0, #1000
 1869 0026 FFF7FEFF 		bl	HAL_Delay
 1870              	.LVL251:
 1871              	.L115:
 943:Src/main.c    ****     {
 1872              		.loc 1 943 0
 1873 002a B4F57A7F 		cmp	r4, #1000
 1874 002e F3DB     		blt	.L116
 951:Src/main.c    ****     }
 952:Src/main.c    **** }
 1875              		.loc 1 952 0
 1876 0030 10BD     		pop	{r4, pc}
 1877              	.LVL252:
 1878              	.L119:
 1879 0032 00BF     		.align	2
 1880              	.L118:
 1881 0034 00000000 		.word	htim1
 1882              		.cfi_endproc
 1883              	.LFE138:
 1885              		.section	.text.test_PWM_htim3,"ax",%progbits
 1886              		.align	2
 1887              		.global	test_PWM_htim3
 1888              		.thumb
 1889              		.thumb_func
 1891              	test_PWM_htim3:
 1892              	.LFB139:
 953:Src/main.c    **** 
 954:Src/main.c    **** /*
 955:Src/main.c    ****  * Test PWM
 956:Src/main.c    ****  * Output: htim3 channel 1 through 3, PWM wave. Confirm these
 957:Src/main.c    ****  *         PWM waves via an oscilliscope.
 958:Src/main.c    ****  */
 959:Src/main.c    **** void test_PWM_htim3()
 960:Src/main.c    **** {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 53


 1893              		.loc 1 960 0
 1894              		.cfi_startproc
 1895              		@ args = 0, pretend = 0, frame = 0
 1896              		@ frame_needed = 0, uses_anonymous_args = 0
 1897 0000 10B5     		push	{r4, lr}
 1898              	.LCFI23:
 1899              		.cfi_def_cfa_offset 8
 1900              		.cfi_offset 4, -8
 1901              		.cfi_offset 14, -4
 961:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1902              		.loc 1 961 0
 1903 0002 0F4C     		ldr	r4, .L124
 1904 0004 2046     		mov	r0, r4
 1905 0006 0021     		movs	r1, #0
 1906 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1907              	.LVL253:
 962:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1908              		.loc 1 962 0
 1909 000c 2046     		mov	r0, r4
 1910 000e 0421     		movs	r1, #4
 1911 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1912              	.LVL254:
 963:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1913              		.loc 1 963 0
 1914 0014 2046     		mov	r0, r4
 1915 0016 0821     		movs	r1, #8
 1916 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1917              	.LVL255:
 964:Src/main.c    **** 
 965:Src/main.c    ****     int s = 500;
 1918              		.loc 1 965 0
 1919 001c 4FF4FA74 		mov	r4, #500
 966:Src/main.c    ****     while (s < 2400)
 1920              		.loc 1 966 0
 1921 0020 09E0     		b	.L121
 1922              	.LVL256:
 1923              	.L122:
 967:Src/main.c    ****     {
 968:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s);
 1924              		.loc 1 968 0
 1925 0022 074B     		ldr	r3, .L124
 1926 0024 1B68     		ldr	r3, [r3]
 1927 0026 5C63     		str	r4, [r3, #52]
 969:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s);
 1928              		.loc 1 969 0
 1929 0028 9C63     		str	r4, [r3, #56]
 970:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, s);
 1930              		.loc 1 970 0
 1931 002a DC63     		str	r4, [r3, #60]
 971:Src/main.c    ****         s += 100;
 1932              		.loc 1 971 0
 1933 002c 6434     		adds	r4, r4, #100
 1934              	.LVL257:
 972:Src/main.c    ****         HAL_Delay(500);
 1935              		.loc 1 972 0
 1936 002e 4FF4FA70 		mov	r0, #500
 1937 0032 FFF7FEFF 		bl	HAL_Delay
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 54


 1938              	.LVL258:
 1939              	.L121:
 966:Src/main.c    ****     {
 1940              		.loc 1 966 0
 1941 0036 B4F5166F 		cmp	r4, #2400
 1942 003a F2DB     		blt	.L122
 973:Src/main.c    ****     }
 974:Src/main.c    **** }
 1943              		.loc 1 974 0
 1944 003c 10BD     		pop	{r4, pc}
 1945              	.LVL259:
 1946              	.L125:
 1947 003e 00BF     		.align	2
 1948              	.L124:
 1949 0040 00000000 		.word	htim3
 1950              		.cfi_endproc
 1951              	.LFE139:
 1953              		.section	.text.test_ADC,"ax",%progbits
 1954              		.align	2
 1955              		.global	test_ADC
 1956              		.thumb
 1957              		.thumb_func
 1959              	test_ADC:
 1960              	.LFB140:
 975:Src/main.c    **** 
 976:Src/main.c    **** void test_ADC()
 977:Src/main.c    **** {
 1961              		.loc 1 977 0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 24
 1964              		@ frame_needed = 0, uses_anonymous_args = 0
 1965 0000 10B5     		push	{r4, lr}
 1966              	.LCFI24:
 1967              		.cfi_def_cfa_offset 8
 1968              		.cfi_offset 4, -8
 1969              		.cfi_offset 14, -4
 1970 0002 86B0     		sub	sp, sp, #24
 1971              	.LCFI25:
 1972              		.cfi_def_cfa_offset 32
 978:Src/main.c    ****     char msg[18] = "";
 1973              		.loc 1 978 0
 1974 0004 0023     		movs	r3, #0
 1975 0006 0193     		str	r3, [sp, #4]
 1976 0008 0293     		str	r3, [sp, #8]
 1977 000a 0393     		str	r3, [sp, #12]
 1978 000c 0493     		str	r3, [sp, #16]
 1979 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
 979:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1980              		.loc 1 979 0
 1981 0012 0F48     		ldr	r0, .L129
 1982 0014 0F49     		ldr	r1, .L129+4
 1983 0016 4FF40062 		mov	r2, #2048
 1984 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1985              	.LVL260:
 1986              	.L127:
 1987              	.LBB6:
 980:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 55


 981:Src/main.c    ****     while (1)
 982:Src/main.c    ****     {
 983:Src/main.c    ****         int ch_5 = adc_values[0];
 1988              		.loc 1 983 0 discriminator 1
 1989 001e 0E4B     		ldr	r3, .L129+8
 1990              	.LVL261:
 984:Src/main.c    ****         int ch_4 = adc_values[1];
 1991              		.loc 1 984 0 discriminator 1
 1992 0020 5C68     		ldr	r4, [r3, #4]
 1993              	.LVL262:
 985:Src/main.c    **** 
 986:Src/main.c    ****         sprintf(msg, "ch_5: %d\n", ch_5);
 1994              		.loc 1 986 0 discriminator 1
 1995 0022 01A8     		add	r0, sp, #4
 1996 0024 0D49     		ldr	r1, .L129+12
 1997 0026 1A68     		ldr	r2, [r3]
 1998 0028 FFF7FEFF 		bl	sprintf
 1999              	.LVL263:
 987:Src/main.c    ****         print(msg, 0);
 2000              		.loc 1 987 0 discriminator 1
 2001 002c 01A8     		add	r0, sp, #4
 2002 002e 0021     		movs	r1, #0
 2003 0030 FFF7FEFF 		bl	print
 2004              	.LVL264:
 988:Src/main.c    **** 
 989:Src/main.c    ****         sprintf(msg, "ch_4: %d\n", ch_4);
 2005              		.loc 1 989 0 discriminator 1
 2006 0034 01A8     		add	r0, sp, #4
 2007 0036 0A49     		ldr	r1, .L129+16
 2008 0038 2246     		mov	r2, r4
 2009 003a FFF7FEFF 		bl	sprintf
 2010              	.LVL265:
 990:Src/main.c    ****         print(msg, 2);
 2011              		.loc 1 990 0 discriminator 1
 2012 003e 01A8     		add	r0, sp, #4
 2013 0040 0221     		movs	r1, #2
 2014 0042 FFF7FEFF 		bl	print
 2015              	.LVL266:
 991:Src/main.c    **** 
 992:Src/main.c    ****         HAL_Delay(100);
 2016              		.loc 1 992 0 discriminator 1
 2017 0046 6420     		movs	r0, #100
 2018 0048 FFF7FEFF 		bl	HAL_Delay
 2019              	.LVL267:
 2020              	.LBE6:
 993:Src/main.c    ****     }
 2021              		.loc 1 993 0 discriminator 1
 2022 004c E7E7     		b	.L127
 2023              	.L130:
 2024 004e 00BF     		.align	2
 2025              	.L129:
 2026 0050 00000000 		.word	hadc1
 2027 0054 00000000 		.word	dma_buffer
 2028 0058 00000000 		.word	adc_values
 2029 005c 88010000 		.word	.LC19
 2030 0060 94010000 		.word	.LC20
 2031              		.cfi_endproc
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 56


 2032              	.LFE140:
 2034              		.section	.text.test_All,"ax",%progbits
 2035              		.align	2
 2036              		.global	test_All
 2037              		.thumb
 2038              		.thumb_func
 2040              	test_All:
 2041              	.LFB141:
 994:Src/main.c    **** }
 995:Src/main.c    **** 
 996:Src/main.c    **** /**
 997:Src/main.c    ****  * Test all PWM and ADC - Read PWM waves, input ADC voltages 
 998:Src/main.c    ****  * and read values on OLED
 999:Src/main.c    ****  *      htim1 -> CH1, CH2, CH3, CH4
1000:Src/main.c    ****  *      htim3 -> CH1, CH2, CH3
1001:Src/main.c    ****  *      ADC   -> CH5, CH4
1002:Src/main.c    ****  */
1003:Src/main.c    **** void test_All()
1004:Src/main.c    **** {
 2042              		.loc 1 1004 0
 2043              		.cfi_startproc
 2044              		@ Volatile: function does not return.
 2045              		@ args = 0, pretend = 0, frame = 0
 2046              		@ frame_needed = 0, uses_anonymous_args = 0
 2047 0000 08B5     		push	{r3, lr}
 2048              	.LCFI26:
 2049              		.cfi_def_cfa_offset 8
 2050              		.cfi_offset 3, -8
 2051              		.cfi_offset 14, -4
1005:Src/main.c    ****     test_PWM_htim1();
 2052              		.loc 1 1005 0
 2053 0002 FFF7FEFF 		bl	test_PWM_htim1
 2054              	.LVL268:
1006:Src/main.c    ****     test_PWM_htim3();
 2055              		.loc 1 1006 0
 2056 0006 FFF7FEFF 		bl	test_PWM_htim3
 2057              	.LVL269:
1007:Src/main.c    ****     test_ADC();
 2058              		.loc 1 1007 0
 2059 000a FFF7FEFF 		bl	test_ADC
 2060              	.LVL270:
 2061              		.cfi_endproc
 2062              	.LFE141:
 2064 000e 00BF     		.section	.text._Error_Handler,"ax",%progbits
 2065              		.align	2
 2066              		.global	_Error_Handler
 2067              		.thumb
 2068              		.thumb_func
 2070              	_Error_Handler:
 2071              	.LFB142:
1008:Src/main.c    **** }
1009:Src/main.c    **** // ******
1010:Src/main.c    **** // END TESTS
1011:Src/main.c    **** // ******
1012:Src/main.c    **** 
1013:Src/main.c    **** /* USER CODE END 4 */
1014:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 57


1015:Src/main.c    **** /**
1016:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
1017:Src/main.c    ****  * @param  file: The file name as string.
1018:Src/main.c    ****  * @param  line: The line in file as a number.
1019:Src/main.c    ****  * @retval None
1020:Src/main.c    ****  */
1021:Src/main.c    **** void _Error_Handler(char *file, int line)
1022:Src/main.c    **** {
 2072              		.loc 1 1022 0
 2073              		.cfi_startproc
 2074              		@ Volatile: function does not return.
 2075              		@ args = 0, pretend = 0, frame = 0
 2076              		@ frame_needed = 0, uses_anonymous_args = 0
 2077              		@ link register save eliminated.
 2078              	.LVL271:
 2079              	.L134:
1023:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
1024:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
1025:Src/main.c    ****     while (1)
1026:Src/main.c    ****     {
1027:Src/main.c    ****     }
 2080              		.loc 1 1027 0 discriminator 1
 2081 0000 FEE7     		b	.L134
 2082              		.cfi_endproc
 2083              	.LFE142:
 2085 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 2086              		.align	2
 2087              		.global	SystemClock_Config
 2088              		.thumb
 2089              		.thumb_func
 2091              	SystemClock_Config:
 2092              	.LFB125:
 370:Src/main.c    **** 
 2093              		.loc 1 370 0
 2094              		.cfi_startproc
 2095              		@ args = 0, pretend = 0, frame = 80
 2096              		@ frame_needed = 0, uses_anonymous_args = 0
 2097 0000 00B5     		push	{lr}
 2098              	.LCFI27:
 2099              		.cfi_def_cfa_offset 4
 2100              		.cfi_offset 14, -4
 2101 0002 95B0     		sub	sp, sp, #84
 2102              	.LCFI28:
 2103              		.cfi_def_cfa_offset 88
 2104              	.LBB7:
 377:Src/main.c    **** 
 2105              		.loc 1 377 0
 2106 0004 0022     		movs	r2, #0
 2107 0006 0192     		str	r2, [sp, #4]
 2108 0008 2A4B     		ldr	r3, .L139
 2109 000a 196C     		ldr	r1, [r3, #64]
 2110 000c 41F08051 		orr	r1, r1, #268435456
 2111 0010 1964     		str	r1, [r3, #64]
 2112 0012 1B6C     		ldr	r3, [r3, #64]
 2113 0014 03F08053 		and	r3, r3, #268435456
 2114 0018 0193     		str	r3, [sp, #4]
 2115 001a 019B     		ldr	r3, [sp, #4]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 58


 2116              	.LBE7:
 2117              	.LBB8:
 379:Src/main.c    **** 
 2118              		.loc 1 379 0
 2119 001c 0292     		str	r2, [sp, #8]
 2120 001e 2649     		ldr	r1, .L139+4
 2121 0020 0B68     		ldr	r3, [r1]
 2122 0022 23F44043 		bic	r3, r3, #49152
 2123 0026 43F40043 		orr	r3, r3, #32768
 2124 002a 0B60     		str	r3, [r1]
 2125 002c 0B68     		ldr	r3, [r1]
 2126 002e 03F44043 		and	r3, r3, #49152
 2127 0032 0293     		str	r3, [sp, #8]
 2128 0034 029B     		ldr	r3, [sp, #8]
 2129              	.LBE8:
 383:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2130              		.loc 1 383 0
 2131 0036 0223     		movs	r3, #2
 2132 0038 0893     		str	r3, [sp, #32]
 384:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 2133              		.loc 1 384 0
 2134 003a 0121     		movs	r1, #1
 2135 003c 0B91     		str	r1, [sp, #44]
 385:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2136              		.loc 1 385 0
 2137 003e 1021     		movs	r1, #16
 2138 0040 0C91     		str	r1, [sp, #48]
 386:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2139              		.loc 1 386 0
 2140 0042 0E93     		str	r3, [sp, #56]
 387:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 2141              		.loc 1 387 0
 2142 0044 0F92     		str	r2, [sp, #60]
 388:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 2143              		.loc 1 388 0
 2144 0046 0822     		movs	r2, #8
 2145 0048 1092     		str	r2, [sp, #64]
 389:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2146              		.loc 1 389 0
 2147 004a 4822     		movs	r2, #72
 2148 004c 1192     		str	r2, [sp, #68]
 390:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 2149              		.loc 1 390 0
 2150 004e 1293     		str	r3, [sp, #72]
 391:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2151              		.loc 1 391 0
 2152 0050 0423     		movs	r3, #4
 2153 0052 1393     		str	r3, [sp, #76]
 392:Src/main.c    ****     {
 2154              		.loc 1 392 0
 2155 0054 08A8     		add	r0, sp, #32
 2156 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2157              	.LVL272:
 2158 005a 20B1     		cbz	r0, .L136
 394:Src/main.c    ****     }
 2159              		.loc 1 394 0
 2160 005c 1748     		ldr	r0, .L139+8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 59


 2161 005e 4FF4C571 		mov	r1, #394
 2162 0062 FFF7FEFF 		bl	_Error_Handler
 2163              	.LVL273:
 2164              	.L136:
 399:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2165              		.loc 1 399 0
 2166 0066 0F23     		movs	r3, #15
 2167 0068 0393     		str	r3, [sp, #12]
 401:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2168              		.loc 1 401 0
 2169 006a 0221     		movs	r1, #2
 2170 006c 0491     		str	r1, [sp, #16]
 402:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2171              		.loc 1 402 0
 2172 006e 0023     		movs	r3, #0
 2173 0070 0593     		str	r3, [sp, #20]
 403:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2174              		.loc 1 403 0
 2175 0072 4FF48052 		mov	r2, #4096
 2176 0076 0692     		str	r2, [sp, #24]
 404:Src/main.c    **** 
 2177              		.loc 1 404 0
 2178 0078 0793     		str	r3, [sp, #28]
 406:Src/main.c    ****     {
 2179              		.loc 1 406 0
 2180 007a 03A8     		add	r0, sp, #12
 2181 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2182              	.LVL274:
 2183 0080 20B1     		cbz	r0, .L137
 408:Src/main.c    ****     }
 2184              		.loc 1 408 0
 2185 0082 0E48     		ldr	r0, .L139+8
 2186 0084 4FF4CC71 		mov	r1, #408
 2187 0088 FFF7FEFF 		bl	_Error_Handler
 2188              	.LVL275:
 2189              	.L137:
 413:Src/main.c    **** 
 2190              		.loc 1 413 0
 2191 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2192              	.LVL276:
 2193 0090 0B4B     		ldr	r3, .L139+12
 2194 0092 A3FB0030 		umull	r3, r0, r3, r0
 2195 0096 8009     		lsrs	r0, r0, #6
 2196 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 2197              	.LVL277:
 417:Src/main.c    **** 
 2198              		.loc 1 417 0
 2199 009c 0420     		movs	r0, #4
 2200 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 2201              	.LVL278:
 420:Src/main.c    **** }
 2202              		.loc 1 420 0
 2203 00a2 4FF0FF30 		mov	r0, #-1
 2204 00a6 0021     		movs	r1, #0
 2205 00a8 0A46     		mov	r2, r1
 2206 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 2207              	.LVL279:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 60


 421:Src/main.c    **** 
 2208              		.loc 1 421 0
 2209 00ae 15B0     		add	sp, sp, #84
 2210              	.LCFI29:
 2211              		.cfi_def_cfa_offset 4
 2212              		@ sp needed
 2213 00b0 5DF804FB 		ldr	pc, [sp], #4
 2214              	.L140:
 2215              		.align	2
 2216              	.L139:
 2217 00b4 00380240 		.word	1073887232
 2218 00b8 00700040 		.word	1073770496
 2219 00bc A0010000 		.word	.LC21
 2220 00c0 D34D6210 		.word	274877907
 2221              		.cfi_endproc
 2222              	.LFE125:
 2224              		.section	.text.main,"ax",%progbits
 2225              		.align	2
 2226              		.global	main
 2227              		.thumb
 2228              		.thumb_func
 2230              	main:
 2231              	.LFB124:
 115:Src/main.c    ****     /* USER CODE BEGIN 1 */
 2232              		.loc 1 115 0
 2233              		.cfi_startproc
 2234              		@ args = 0, pretend = 0, frame = 24
 2235              		@ frame_needed = 0, uses_anonymous_args = 0
 2236 0000 70B5     		push	{r4, r5, r6, lr}
 2237              	.LCFI30:
 2238              		.cfi_def_cfa_offset 16
 2239              		.cfi_offset 4, -16
 2240              		.cfi_offset 5, -12
 2241              		.cfi_offset 6, -8
 2242              		.cfi_offset 14, -4
 2243 0002 88B0     		sub	sp, sp, #32
 2244              	.LCFI31:
 2245              		.cfi_def_cfa_offset 48
 123:Src/main.c    **** 
 2246              		.loc 1 123 0
 2247 0004 FFF7FEFF 		bl	HAL_Init
 2248              	.LVL280:
 130:Src/main.c    **** 
 2249              		.loc 1 130 0
 2250 0008 FFF7FEFF 		bl	SystemClock_Config
 2251              	.LVL281:
 137:Src/main.c    ****     MX_DMA_Init();
 2252              		.loc 1 137 0
 2253 000c FFF7FEFF 		bl	MX_GPIO_Init
 2254              	.LVL282:
 138:Src/main.c    ****     MX_TIM3_Init();
 2255              		.loc 1 138 0
 2256 0010 FFF7FEFF 		bl	MX_DMA_Init
 2257              	.LVL283:
 139:Src/main.c    ****     MX_TIM1_Init();
 2258              		.loc 1 139 0
 2259 0014 FFF7FEFF 		bl	MX_TIM3_Init
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 61


 2260              	.LVL284:
 140:Src/main.c    ****     MX_TIM2_Init();
 2261              		.loc 1 140 0
 2262 0018 FFF7FEFF 		bl	MX_TIM1_Init
 2263              	.LVL285:
 141:Src/main.c    ****     MX_ADC1_Init();
 2264              		.loc 1 141 0
 2265 001c FFF7FEFF 		bl	MX_TIM2_Init
 2266              	.LVL286:
 142:Src/main.c    ****     MX_TIM4_Init();
 2267              		.loc 1 142 0
 2268 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2269              	.LVL287:
 143:Src/main.c    ****     MX_TIM9_Init();
 2270              		.loc 1 143 0
 2271 0024 FFF7FEFF 		bl	MX_TIM4_Init
 2272              	.LVL288:
 144:Src/main.c    ****     MX_TIM5_Init();
 2273              		.loc 1 144 0
 2274 0028 FFF7FEFF 		bl	MX_TIM9_Init
 2275              	.LVL289:
 145:Src/main.c    ****     MX_I2C1_Init();
 2276              		.loc 1 145 0
 2277 002c FFF7FEFF 		bl	MX_TIM5_Init
 2278              	.LVL290:
 146:Src/main.c    ****     MX_USART6_UART_Init();
 2279              		.loc 1 146 0
 2280 0030 FFF7FEFF 		bl	MX_I2C1_Init
 2281              	.LVL291:
 147:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2282              		.loc 1 147 0
 2283 0034 FFF7FEFF 		bl	MX_USART6_UART_Init
 2284              	.LVL292:
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 2285              		.loc 1 164 0
 2286 0038 8248     		ldr	r0, .L160
 2287 003a 1821     		movs	r1, #24
 2288 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2289              	.LVL293:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 2290              		.loc 1 165 0
 2291 0040 8148     		ldr	r0, .L160+4
 2292 0042 1821     		movs	r1, #24
 2293 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2294              	.LVL294:
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 2295              		.loc 1 166 0
 2296 0048 804C     		ldr	r4, .L160+8
 2297 004a 2046     		mov	r0, r4
 2298 004c 0021     		movs	r1, #0
 2299 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2300              	.LVL295:
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 2301              		.loc 1 167 0
 2302 0052 2046     		mov	r0, r4
 2303 0054 0421     		movs	r1, #4
 2304 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 62


 2305              	.LVL296:
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 2306              		.loc 1 168 0
 2307 005a 2046     		mov	r0, r4
 2308 005c 0821     		movs	r1, #8
 2309 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2310              	.LVL297:
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2311              		.loc 1 169 0
 2312 0062 2046     		mov	r0, r4
 2313 0064 0C21     		movs	r1, #12
 2314 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2315              	.LVL298:
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 2316              		.loc 1 170 0
 2317 006a 794C     		ldr	r4, .L160+12
 2318 006c 2046     		mov	r0, r4
 2319 006e 0021     		movs	r1, #0
 2320 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2321              	.LVL299:
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 2322              		.loc 1 171 0
 2323 0074 2046     		mov	r0, r4
 2324 0076 0421     		movs	r1, #4
 2325 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2326              	.LVL300:
 172:Src/main.c    **** 
 2327              		.loc 1 172 0
 2328 007c 2046     		mov	r0, r4
 2329 007e 0821     		movs	r1, #8
 2330 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2331              	.LVL301:
 175:Src/main.c    ****     print("Starting\n", 0);
 2332              		.loc 1 175 0
 2333 0084 FFF7FEFF 		bl	ssd1306_Init
 2334              	.LVL302:
 176:Src/main.c    ****     claw_init(&htim3);
 2335              		.loc 1 176 0
 2336 0088 7248     		ldr	r0, .L160+16
 2337 008a 0021     		movs	r1, #0
 2338 008c FFF7FEFF 		bl	print
 2339              	.LVL303:
 177:Src/main.c    ****     // basket_init(&htim3);
 2340              		.loc 1 177 0
 2341 0090 2046     		mov	r0, r4
 2342 0092 FFF7FEFF 		bl	claw_init
 2343              	.LVL304:
 180:Src/main.c    **** 
 2344              		.loc 1 180 0
 2345 0096 0221     		movs	r1, #2
 2346 0098 0091     		str	r1, [sp]
 2347 009a 0123     		movs	r3, #1
 2348 009c 0193     		str	r3, [sp, #4]
 2349 009e 02A8     		add	r0, sp, #8
 2350 00a0 0022     		movs	r2, #0
 2351 00a2 1346     		mov	r3, r2
 2352 00a4 FFF7FEFF 		bl	pid_Init
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 63


 2353              	.LVL305:
 182:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 2354              		.loc 1 182 0
 2355 00a8 0024     		movs	r4, #0
 2356 00aa 6B4B     		ldr	r3, .L160+20
 2357 00ac 1C70     		strb	r4, [r3]
 183:Src/main.c    **** 
 2358              		.loc 1 183 0
 2359 00ae 6B4B     		ldr	r3, .L160+24
 2360 00b0 1C70     		strb	r4, [r3]
 185:Src/main.c    **** 
 2361              		.loc 1 185 0
 2362 00b2 6B4D     		ldr	r5, .L160+28
 2363 00b4 2988     		ldrh	r1, [r5]
 2364 00b6 6B4E     		ldr	r6, .L160+32
 2365 00b8 02A8     		add	r0, sp, #8
 2366 00ba 5031     		adds	r1, r1, #80
 2367 00bc 3288     		ldrh	r2, [r6]
 2368 00be 4FF4FA63 		mov	r3, #2000
 2369 00c2 FFF7FEFF 		bl	drive_straight_time
 2370              	.LVL306:
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 2371              		.loc 1 188 0
 2372 00c6 0620     		movs	r0, #6
 2373 00c8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2374              	.LVL307:
 189:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 2375              		.loc 1 189 0
 2376 00cc 0A20     		movs	r0, #10
 2377 00ce FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2378              	.LVL308:
 190:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 2379              		.loc 1 190 0
 2380 00d2 654B     		ldr	r3, .L160+36
 2381 00d4 1C70     		strb	r4, [r3]
 191:Src/main.c    **** 
 2382              		.loc 1 191 0
 2383 00d6 654B     		ldr	r3, .L160+40
 2384 00d8 1C70     		strb	r4, [r3]
 193:Src/main.c    ****     print("ewok\n", 0);
 2385              		.loc 1 193 0
 2386 00da 3288     		ldrh	r2, [r6]
 2387 00dc 02A8     		add	r0, sp, #8
 2388 00de 2988     		ldrh	r1, [r5]
 2389 00e0 0A32     		adds	r2, r2, #10
 2390 00e2 41F28833 		movw	r3, #5000
 2391 00e6 FFF7FEFF 		bl	drive_straight_time
 2392              	.LVL309:
 194:Src/main.c    **** 
 2393              		.loc 1 194 0
 2394 00ea 6148     		ldr	r0, .L160+44
 2395 00ec 2146     		mov	r1, r4
 2396 00ee FFF7FEFF 		bl	print
 2397              	.LVL310:
 2398              	.L142:
 206:Src/main.c    ****         {
 2399              		.loc 1 206 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 64


 2400 00f2 5D4B     		ldr	r3, .L160+36
 2401 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2402 00f6 012B     		cmp	r3, #1
 2403 00f8 3AD1     		bne	.L143
 2404              	.LBB9:
 209:Src/main.c    ****             // Turn to ewok
 2405              		.loc 1 209 0
 2406 00fa 5E48     		ldr	r0, .L160+48
 2407 00fc 0021     		movs	r1, #0
 2408 00fe FFF7FEFF 		bl	print
 2409              	.LVL311:
 211:Src/main.c    **** 
 2410              		.loc 1 211 0
 2411 0102 FFF7FEFF 		bl	turn
 2412              	.LVL312:
 215:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2413              		.loc 1 215 0
 2414 0106 FFF7FEFF 		bl	HAL_GetTick
 2415              	.LVL313:
 2416 010a 0446     		mov	r4, r0
 2417              	.LVL314:
 216:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2418              		.loc 1 216 0
 2419 010c 0020     		movs	r0, #0
 2420              	.LVL315:
 2421 010e 544B     		ldr	r3, .L160+28
 2422 0110 1988     		ldrh	r1, [r3]
 2423 0112 FFF7FEFF 		bl	set_motor_speed
 2424              	.LVL316:
 217:Src/main.c    ****             while(HAL_GetTick()-time<2800){
 2425              		.loc 1 217 0
 2426 0116 0820     		movs	r0, #8
 2427 0118 524B     		ldr	r3, .L160+32
 2428 011a 1988     		ldrh	r1, [r3]
 2429 011c FFF7FEFF 		bl	set_motor_speed
 2430              	.LVL317:
 218:Src/main.c    ****                 drive_straight(&enc_pid);
 2431              		.loc 1 218 0
 2432 0120 10E0     		b	.L144
 2433              	.L146:
 219:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 2434              		.loc 1 219 0
 2435 0122 02A8     		add	r0, sp, #8
 2436 0124 FFF7FEFF 		bl	drive_straight
 2437              	.LVL318:
 221:Src/main.c    ****                 {
 2438              		.loc 1 221 0
 2439 0128 5348     		ldr	r0, .L160+52
 2440 012a 1021     		movs	r1, #16
 2441 012c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2442              	.LVL319:
 2443 0130 0128     		cmp	r0, #1
 2444 0132 07D1     		bne	.L144
 223:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 2445              		.loc 1 223 0
 2446 0134 5148     		ldr	r0, .L160+56
 2447 0136 0021     		movs	r1, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 65


 2448 0138 FFF7FEFF 		bl	print
 2449              	.LVL320:
 224:Src/main.c    ****                     break;
 2450              		.loc 1 224 0
 2451 013c 02A8     		add	r0, sp, #8
 2452 013e FFF7FEFF 		bl	debounce_and_grab
 2453              	.LVL321:
 225:Src/main.c    ****                 }
 2454              		.loc 1 225 0
 2455 0142 05E0     		b	.L145
 2456              	.L144:
 218:Src/main.c    ****                 drive_straight(&enc_pid);
 2457              		.loc 1 218 0
 2458 0144 FFF7FEFF 		bl	HAL_GetTick
 2459              	.LVL322:
 2460 0148 001B     		subs	r0, r0, r4
 2461 014a B0F52F6F 		cmp	r0, #2800
 2462 014e E8D3     		bcc	.L146
 2463              	.L145:
 228:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 2464              		.loc 1 228 0
 2465 0150 0020     		movs	r0, #0
 2466 0152 0146     		mov	r1, r0
 2467 0154 FFF7FEFF 		bl	set_motor_speed
 2468              	.LVL323:
 229:Src/main.c    ****             print("ewok\n", 0);
 2469              		.loc 1 229 0
 2470 0158 0820     		movs	r0, #8
 2471 015a 0021     		movs	r1, #0
 2472 015c FFF7FEFF 		bl	set_motor_speed
 2473              	.LVL324:
 230:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 2474              		.loc 1 230 0
 2475 0160 4348     		ldr	r0, .L160+44
 2476 0162 0021     		movs	r1, #0
 2477 0164 FFF7FEFF 		bl	print
 2478              	.LVL325:
 231:Src/main.c    **** 
 2479              		.loc 1 231 0
 2480 0168 0022     		movs	r2, #0
 2481 016a 3F4B     		ldr	r3, .L160+36
 2482 016c 1A70     		strb	r2, [r3]
 2483              	.LBE9:
 2484 016e C0E7     		b	.L142
 2485              	.LVL326:
 2486              	.L143:
 235:Src/main.c    ****             if(searches == 4 && ewok_cnt == 0){
 2487              		.loc 1 235 0
 2488 0170 434A     		ldr	r2, .L160+60
 2489 0172 1368     		ldr	r3, [r2]
 2490 0174 0133     		adds	r3, r3, #1
 2491 0176 1360     		str	r3, [r2]
 236:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2492              		.loc 1 236 0
 2493 0178 042B     		cmp	r3, #4
 2494 017a 06D1     		bne	.L148
 236:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 66


 2495              		.loc 1 236 0 is_stmt 0 discriminator 1
 2496 017c 414A     		ldr	r2, .L160+64
 2497 017e 1268     		ldr	r2, [r2]
 2498 0180 1AB9     		cbnz	r2, .L148
 237:Src/main.c    ****             }
 2499              		.loc 1 237 0 is_stmt 1
 2500 0182 4148     		ldr	r0, .L160+68
 2501 0184 FFF7FEFF 		bl	debounce_and_grab
 2502              	.LVL327:
 2503 0188 B3E7     		b	.L142
 2504              	.L148:
 239:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2505              		.loc 1 239 0
 2506 018a 032B     		cmp	r3, #3
 2507 018c 07D1     		bne	.L149
 239:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2508              		.loc 1 239 0 is_stmt 0 discriminator 1
 2509 018e 3D4A     		ldr	r2, .L160+64
 2510 0190 1268     		ldr	r2, [r2]
 2511 0192 012A     		cmp	r2, #1
 2512 0194 03D1     		bne	.L149
 240:Src/main.c    ****             }
 2513              		.loc 1 240 0 is_stmt 1
 2514 0196 3C48     		ldr	r0, .L160+68
 2515 0198 FFF7FEFF 		bl	debounce_and_grab
 2516              	.LVL328:
 2517 019c A9E7     		b	.L142
 2518              	.L149:
 242:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2519              		.loc 1 242 0
 2520 019e 082B     		cmp	r3, #8
 2521 01a0 07D1     		bne	.L150
 242:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2522              		.loc 1 242 0 is_stmt 0 discriminator 1
 2523 01a2 384B     		ldr	r3, .L160+64
 2524 01a4 1B68     		ldr	r3, [r3]
 2525 01a6 022B     		cmp	r3, #2
 2526 01a8 03D1     		bne	.L150
 243:Src/main.c    ****             }else{
 2527              		.loc 1 243 0 is_stmt 1
 2528 01aa 3748     		ldr	r0, .L160+68
 2529 01ac FFF7FEFF 		bl	debounce_and_grab
 2530              	.LVL329:
 2531 01b0 9FE7     		b	.L142
 2532              	.L150:
 2533              	.LBB10:
 245:Src/main.c    ****                 while(HAL_GetTick()-time<3000 && PI_INT_STATE == NOT_FLAGGED);
 2534              		.loc 1 245 0
 2535 01b2 FFF7FEFF 		bl	HAL_GetTick
 2536              	.LVL330:
 2537 01b6 0446     		mov	r4, r0
 2538              	.LVL331:
 2539              	.L152:
 246:Src/main.c    ****                 int thresh = ewok_cnt==1? 500:750;
 2540              		.loc 1 246 0 discriminator 2
 2541 01b8 FFF7FEFF 		bl	HAL_GetTick
 2542              	.LVL332:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 67


 2543 01bc 001B     		subs	r0, r0, r4
 2544 01be 40F6B733 		movw	r3, #2999
 2545 01c2 9842     		cmp	r0, r3
 2546 01c4 03D8     		bhi	.L151
 246:Src/main.c    ****                 int thresh = ewok_cnt==1? 500:750;
 2547              		.loc 1 246 0 is_stmt 0 discriminator 1
 2548 01c6 284B     		ldr	r3, .L160+36
 2549 01c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2550 01ca 002B     		cmp	r3, #0
 2551 01cc F4D0     		beq	.L152
 2552              	.L151:
 247:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2553              		.loc 1 247 0 is_stmt 1
 2554 01ce 2D4B     		ldr	r3, .L160+64
 2555 01d0 1B68     		ldr	r3, [r3]
 2556 01d2 012B     		cmp	r3, #1
 2557 01d4 02D1     		bne	.L158
 2558 01d6 4FF4FA75 		mov	r5, #500
 2559 01da 01E0     		b	.L153
 2560              	.L158:
 2561 01dc 40F2EE25 		movw	r5, #750
 2562              	.L153:
 2563              	.LVL333:
 248:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2564              		.loc 1 248 0 discriminator 4
 2565 01e0 0020     		movs	r0, #0
 2566 01e2 1F4B     		ldr	r3, .L160+28
 2567 01e4 1988     		ldrh	r1, [r3]
 2568 01e6 FFF7FEFF 		bl	set_motor_speed
 2569              	.LVL334:
 249:Src/main.c    ****                 time = HAL_GetTick();
 2570              		.loc 1 249 0 discriminator 4
 2571 01ea 0820     		movs	r0, #8
 2572 01ec 1D4B     		ldr	r3, .L160+32
 2573 01ee 1988     		ldrh	r1, [r3]
 2574 01f0 FFF7FEFF 		bl	set_motor_speed
 2575              	.LVL335:
 250:Src/main.c    ****                 while(HAL_GetTick()-time<thresh){
 2576              		.loc 1 250 0 discriminator 4
 2577 01f4 FFF7FEFF 		bl	HAL_GetTick
 2578              	.LVL336:
 2579 01f8 0446     		mov	r4, r0
 2580              	.LVL337:
 251:Src/main.c    ****                     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 2581              		.loc 1 251 0 discriminator 4
 2582 01fa 10E0     		b	.L154
 2583              	.LVL338:
 2584              	.L157:
 252:Src/main.c    ****                     {
 2585              		.loc 1 252 0
 2586 01fc 1E48     		ldr	r0, .L160+52
 2587 01fe 1021     		movs	r1, #16
 2588 0200 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2589              	.LVL339:
 2590 0204 0128     		cmp	r0, #1
 2591 0206 07D1     		bne	.L155
 254:Src/main.c    ****                         debounce_and_grab(&enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 68


 2592              		.loc 1 254 0
 2593 0208 1C48     		ldr	r0, .L160+56
 2594 020a 0021     		movs	r1, #0
 2595 020c FFF7FEFF 		bl	print
 2596              	.LVL340:
 255:Src/main.c    ****                         break;
 2597              		.loc 1 255 0
 2598 0210 02A8     		add	r0, sp, #8
 2599 0212 FFF7FEFF 		bl	debounce_and_grab
 2600              	.LVL341:
 256:Src/main.c    ****                     }
 2601              		.loc 1 256 0
 2602 0216 07E0     		b	.L156
 2603              	.L155:
 258:Src/main.c    ****                 }
 2604              		.loc 1 258 0
 2605 0218 02A8     		add	r0, sp, #8
 2606 021a FFF7FEFF 		bl	drive_straight
 2607              	.LVL342:
 2608              	.L154:
 251:Src/main.c    ****                     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 2609              		.loc 1 251 0
 2610 021e FFF7FEFF 		bl	HAL_GetTick
 2611              	.LVL343:
 2612 0222 001B     		subs	r0, r0, r4
 2613 0224 A842     		cmp	r0, r5
 2614 0226 E9D3     		bcc	.L157
 2615              	.L156:
 260:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 2616              		.loc 1 260 0
 2617 0228 0020     		movs	r0, #0
 2618 022a 0146     		mov	r1, r0
 2619 022c FFF7FEFF 		bl	set_motor_speed
 2620              	.LVL344:
 261:Src/main.c    ****                 print("ewok\n", 0);
 2621              		.loc 1 261 0
 2622 0230 0820     		movs	r0, #8
 2623 0232 0021     		movs	r1, #0
 2624 0234 FFF7FEFF 		bl	set_motor_speed
 2625              	.LVL345:
 262:Src/main.c    ****             }
 2626              		.loc 1 262 0
 2627 0238 0D48     		ldr	r0, .L160+44
 2628 023a 0021     		movs	r1, #0
 2629 023c FFF7FEFF 		bl	print
 2630              	.LVL346:
 2631 0240 57E7     		b	.L142
 2632              	.L161:
 2633 0242 00BF     		.align	2
 2634              	.L160:
 2635 0244 00000000 		.word	htim4
 2636 0248 00000000 		.word	htim5
 2637 024c 00000000 		.word	htim1
 2638 0250 00000000 		.word	htim3
 2639 0254 08000000 		.word	.LC1
 2640 0258 00000000 		.word	EDGE_LEFT_STATE
 2641 025c 00000000 		.word	EDGE_RIGHT_STATE
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 69


 2642 0260 00000000 		.word	.LANCHOR1
 2643 0264 00000000 		.word	.LANCHOR0
 2644 0268 00000000 		.word	PI_INT_STATE
 2645 026c 00000000 		.word	CLAW_INT_STATE
 2646 0270 44010000 		.word	.LC15
 2647 0274 AC010000 		.word	.LC22
 2648 0278 00040240 		.word	1073873920
 2649 027c 78010000 		.word	.LC18
 2650 0280 00000000 		.word	.LANCHOR3
 2651 0284 00000000 		.word	.LANCHOR2
 2652 0288 00000000 		.word	encoder_pid
 2653              	.LBE10:
 2654              		.cfi_endproc
 2655              	.LFE124:
 2657              		.global	searches
 2658              		.global	ewok_cnt
 2659              		.comm	adc_values,8192,4
 2660              		.comm	dma_buffer,8192,4
 2661              		.global	RIGHT_SPEED
 2662              		.global	LEFT_SPEED
 2663              		.section	.data.RIGHT_SPEED,"aw",%progbits
 2664              		.align	1
 2665              		.set	.LANCHOR0,. + 0
 2668              	RIGHT_SPEED:
 2669 0000 5802     		.short	600
 2670              		.section	.bss.searches,"aw",%nobits
 2671              		.align	2
 2672              		.set	.LANCHOR3,. + 0
 2675              	searches:
 2676 0000 00000000 		.space	4
 2677              		.section	.data.LEFT_SPEED,"aw",%progbits
 2678              		.align	1
 2679              		.set	.LANCHOR1,. + 0
 2682              	LEFT_SPEED:
 2683 0000 5802     		.short	600
 2684              		.section	.rodata.str1.4,"aMS",%progbits,1
 2685              		.align	2
 2686              	.LC0:
 2687 0000 776F7263 		.ascii	"worcs\000"
 2687      7300
 2688 0006 0000     		.space	2
 2689              	.LC1:
 2690 0008 53746172 		.ascii	"Starting\012\000"
 2690      74696E67 
 2690      0A00
 2691 0012 0000     		.space	2
 2692              	.LC2:
 2693 0014 256C750A 		.ascii	"%lu\012\000"
 2693      00
 2694 0019 000000   		.space	3
 2695              	.LC3:
 2696 001c 5455524E 		.ascii	"TURN | cnts: %d\012\000"
 2696      207C2063 
 2696      6E74733A 
 2696      2025640A 
 2696      00
 2697 002d 000000   		.space	3
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 70


 2698              	.LC4:
 2699 0030 5455524E 		.ascii	"TURN | vlts: %d.%d\012\000"
 2699      207C2076 
 2699      6C74733A 
 2699      2025642E 
 2699      25640A00 
 2700              	.LC5:
 2701 0044 5455524E 		.ascii	"TURN | ADC_VAL: %lu\012\000"
 2701      207C2041 
 2701      44435F56 
 2701      414C3A20 
 2701      256C750A 
 2702 0059 000000   		.space	3
 2703              	.LC6:
 2704 005c 5455524E 		.ascii	"TURN | TIM5->CNT: %lu\012\000"
 2704      207C2054 
 2704      494D352D 
 2704      3E434E54 
 2704      3A20256C 
 2705 0073 00       		.space	1
 2706              	.LC7:
 2707 0074 5455524E 		.ascii	"TURN | TIM4->CNT: %lu\012\000"
 2707      207C2054 
 2707      494D342D 
 2707      3E434E54 
 2707      3A20256C 
 2708 008b 00       		.space	1
 2709              	.LC8:
 2710 008c 5455524E 		.ascii	"TURN_DEG | turn count: %d\012\000"
 2710      5F444547 
 2710      207C2074 
 2710      75726E20 
 2710      636F756E 
 2711 00a7 00       		.space	1
 2712              	.LC9:
 2713 00a8 5455524E 		.ascii	"TURN_DEG | TIM5->CNT: %lu\012\000"
 2713      5F444547 
 2713      207C2054 
 2713      494D352D 
 2713      3E434E54 
 2714 00c3 00       		.space	1
 2715              	.LC10:
 2716 00c4 5455524E 		.ascii	"TURN_DEG | TIM4->CNT: %lu\012\000"
 2716      5F444547 
 2716      207C2054 
 2716      494D342D 
 2716      3E434E54 
 2717 00df 00       		.space	1
 2718              	.LC11:
 2719 00e0 434C4157 		.ascii	"CLAW_GRAB | grabbing ewok\012\000"
 2719      5F475241 
 2719      42207C20 
 2719      67726162 
 2719      62696E67 
 2720 00fb 00       		.space	1
 2721              	.LC12:
 2722 00fc 46697273 		.ascii	"First ewok captured\012\000"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 71


 2722      74206577 
 2722      6F6B2063 
 2722      61707475 
 2722      7265640A 
 2723 0111 000000   		.space	3
 2724              	.LC13:
 2725 0114 5365636F 		.ascii	"Second ewok captured\012\000"
 2725      6E642065 
 2725      776F6B20 
 2725      63617074 
 2725      75726564 
 2726 012a 0000     		.space	2
 2727              	.LC14:
 2728 012c 54686972 		.ascii	"Third ewok captured\012\000"
 2728      64206577 
 2728      6F6B2063 
 2728      61707475 
 2728      7265640A 
 2729 0141 000000   		.space	3
 2730              	.LC15:
 2731 0144 65776F6B 		.ascii	"ewok\012\000"
 2731      0A00
 2732 014a 0000     		.space	2
 2733              	.LC16:
 2734 014c 466F7572 		.ascii	"Fourth ewok captured\012\000"
 2734      74682065 
 2734      776F6B20 
 2734      63617074 
 2734      75726564 
 2735 0162 0000     		.space	2
 2736              	.LC17:
 2737 0164 43686577 		.ascii	"Chewie captured\012\000"
 2737      69652063 
 2737      61707475 
 2737      7265640A 
 2737      00
 2738 0175 000000   		.space	3
 2739              	.LC18:
 2740 0178 436C6177 		.ascii	"Claw interrupt\012\000"
 2740      20696E74 
 2740      65727275 
 2740      70740A00 
 2741              	.LC19:
 2742 0188 63685F35 		.ascii	"ch_5: %d\012\000"
 2742      3A202564 
 2742      0A00
 2743 0192 0000     		.space	2
 2744              	.LC20:
 2745 0194 63685F34 		.ascii	"ch_4: %d\012\000"
 2745      3A202564 
 2745      0A00
 2746 019e 0000     		.space	2
 2747              	.LC21:
 2748 01a0 5372632F 		.ascii	"Src/main.c\000"
 2748      6D61696E 
 2748      2E6300
 2749 01ab 00       		.space	1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 72


 2750              	.LC22:
 2751 01ac 50692069 		.ascii	"Pi interrupt\012\000"
 2751      6E746572 
 2751      72757074 
 2751      0A00
 2752              		.section	.bss.ewok_cnt,"aw",%nobits
 2753              		.align	2
 2754              		.set	.LANCHOR2,. + 0
 2757              	ewok_cnt:
 2758 0000 00000000 		.space	4
 2759              		.text
 2760              	.Letext0:
 2761              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2762              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2763              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2764              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 2765              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2766              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2767              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2768              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2769              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2770              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2771              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2772              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2773              		.file 14 "Inc/pid.h"
 2774              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 2775              		.file 16 "Inc/adc.h"
 2776              		.file 17 "Inc/tim.h"
 2777              		.file 18 "Inc/usart.h"
 2778              		.file 19 "Inc/extern_vars.h"
 2779              		.file 20 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 2780              		.file 21 "Inc/filter.h"
 2781              		.file 22 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2782              		.file 23 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2783              		.file 24 "Inc/claw.h"
 2784              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2785              		.file 26 "Inc/gpio.h"
 2786              		.file 27 "Inc/dma.h"
 2787              		.file 28 "Inc/i2c.h"
 2788              		.file 29 "Inc/ssd1306.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:21     .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:26     .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:82     .text.encoder_pid:000000000000003c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:87     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:92     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:115    .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:121    .text.drive_straight:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:126    .text.drive_straight:0000000000000000 drive_straight
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:154    .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:159    .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:190    .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:196    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:201    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:228    .text.print:0000000000000018 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:235    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:240    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:327    .text.alarm_detect:000000000000008c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:337    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:342    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:455    .text.menu:000000000000009c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:462    .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:467    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:533    .text.set_motor_speed:000000000000004c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:538    .text.square_edge:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:543    .text.square_edge:0000000000000000 square_edge
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:620    .text.square_edge:0000000000000064 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:628    .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:633    .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:862    .text.turn:0000000000000160 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:887    .text.turn_deg:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:892    .text.turn_deg:0000000000000000 turn_deg
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1073   .text.turn_deg:0000000000000108 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1089   .text.debounce_and_grab:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1094   .text.debounce_and_grab:0000000000000000 debounce_and_grab
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1584   .text.debounce_and_grab:00000000000002d4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1599   .text.debounce_and_grab:0000000000000308 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1718   .text.debounce_and_grab:00000000000003b8 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1729   .text.drive_straight_time:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1734   .text.drive_straight_time:0000000000000000 drive_straight_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1819   .text.drive_straight_time:0000000000000068 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1825   .text.test_PWM_htim1:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1830   .text.test_PWM_htim1:0000000000000000 test_PWM_htim1
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1881   .text.test_PWM_htim1:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1886   .text.test_PWM_htim3:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1891   .text.test_PWM_htim3:0000000000000000 test_PWM_htim3
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1949   .text.test_PWM_htim3:0000000000000040 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1954   .text.test_ADC:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:1959   .text.test_ADC:0000000000000000 test_ADC
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2026   .text.test_ADC:0000000000000050 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2035   .text.test_All:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2040   .text.test_All:0000000000000000 test_All
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2065   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2070   .text._Error_Handler:0000000000000000 _Error_Handler
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 74


/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2086   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2091   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2217   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2225   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2230   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2635   .text.main:0000000000000244 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2675   .bss.searches:0000000000000000 searches
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2757   .bss.ewok_cnt:0000000000000000 ewok_cnt
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2668   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2682   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2664   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2671   .bss.searches:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2678   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2685   .rodata.str1.4:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s:2753   .bss.ewok_cnt:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pid_GetGain
memcpy
HAL_Delay
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
strlen
HAL_UART_Transmit
huart6
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
HAL_GPIO_ReadPin
sprintf
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dadd
__aeabi_d2iz
HAL_GetTick
close_claw
arm_up
open_claw
arm_down
htim3
slow_actuate
CLAW_INT_STATE
HAL_TIM_PWM_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccANAfOJ.s 			page 75


HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_ADC1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
MX_I2C1_Init
MX_USART6_UART_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
HAL_NVIC_EnableIRQ
htim4
htim5
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
PI_INT_STATE
