ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.print,"ax",%progbits
  21              		.align	2
  22              		.global	print
  23              		.thumb
  24              		.thumb_func
  26              	print:
  27              	.LFB127:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  ** This notice applies to any and all portions of this file
   8:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****  * inserted by the user or by software development tools
  11:Src/main.c    ****  * are owned by their respective copyright owners.
  12:Src/main.c    ****  *
  13:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****  *
  15:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****  * are permitted provided that the following conditions are met:
  17:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****  *      and/or other materials provided with the distribution.
  22:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****  *      without specific prior written permission.
  25:Src/main.c    ****  *
  26:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 2


  31:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****  *
  37:Src/main.c    ****  ******************************************************************************
  38:Src/main.c    ****  */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "stm32f4xx_it.h"
  43:Src/main.c    **** #include "adc.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE END Includes */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE BEGIN GV */
  57:Src/main.c    **** /* Global variables ---------------------------------------------------------*/
  58:Src/main.c    **** uint8_t PUSH_BUTTON_STATE = 0;
  59:Src/main.c    **** /* USER CODE END GV */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* USER CODE BEGIN PV */
  62:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PV */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  67:Src/main.c    **** void SystemClock_Config(void);
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN PFP */
  70:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  71:Src/main.c    **** void print(char msg[], int row);
  72:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]);
  73:Src/main.c    **** void do_pid(PID_t *pid_struct);
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE END PFP */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE BEGIN 0 */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* USER CODE END 0 */
  80:Src/main.c    **** 
  81:Src/main.c    **** /**
  82:Src/main.c    ****  * @brief  The application entry point.
  83:Src/main.c    ****  *
  84:Src/main.c    ****  * @retval None
  85:Src/main.c    ****  */
  86:Src/main.c    **** int main(void)
  87:Src/main.c    **** {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 3


  88:Src/main.c    ****     /* USER CODE BEGIN 1 */
  89:Src/main.c    **** 
  90:Src/main.c    ****     /* USER CODE END 1 */
  91:Src/main.c    **** 
  92:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
  93:Src/main.c    **** 
  94:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  95:Src/main.c    ****     HAL_Init();
  96:Src/main.c    **** 
  97:Src/main.c    ****     /* USER CODE BEGIN Init */
  98:Src/main.c    **** 
  99:Src/main.c    ****     /* USER CODE END Init */
 100:Src/main.c    **** 
 101:Src/main.c    ****     /* Configure the system clock */
 102:Src/main.c    ****     SystemClock_Config();
 103:Src/main.c    **** 
 104:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 105:Src/main.c    **** 
 106:Src/main.c    ****     /* USER CODE END SysInit */
 107:Src/main.c    **** 
 108:Src/main.c    ****     /* Initialize all configured peripherals */
 109:Src/main.c    ****     MX_GPIO_Init();
 110:Src/main.c    ****     MX_TIM3_Init();
 111:Src/main.c    ****     MX_TIM5_Init();
 112:Src/main.c    ****     MX_TIM1_Init();
 113:Src/main.c    ****     MX_TIM2_Init();
 114:Src/main.c    ****     MX_USART6_UART_Init();
 115:Src/main.c    ****     MX_ADC1_Init();
 116:Src/main.c    ****     MX_I2C1_Init();
 117:Src/main.c    ****     MX_TIM4_Init();
 118:Src/main.c    ****     MX_TIM9_Init();
 119:Src/main.c    ****     ssd1306_Init();
 120:Src/main.c    ****     /* USER CODE BEGIN 2 */
 121:Src/main.c    **** 
 122:Src/main.c    ****     /* Initialize all timer related stuffs*/
 123:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 124:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 125:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 126:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 127:Src/main.c    **** 
 128:Src/main.c    ****     // declare external variables for use with interrupts
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* USER CODE END 2 */
 131:Src/main.c    ****     print("Starting", 0);
 132:Src/main.c    ****     char msg[20] = "";
 133:Src/main.c    ****     int pid_select = 0;
 134:Src/main.c    ****     uint32_t values[3] = {10,200,0};
 135:Src/main.c    ****     PID_t pid_s = pid_Init(values[0],values[1],values[2],5,2);
 136:Src/main.c    ****     print("P: 10", 0);
 137:Src/main.c    ****     print("I: 200", 1);
 138:Src/main.c    ****     print("D: 0", 1);
 139:Src/main.c    ****     /* Infinite loop */
 140:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 141:Src/main.c    ****     while (1)
 142:Src/main.c    ****     {
 143:Src/main.c    ****         if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 144:Src/main.c    ****             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 4


 145:Src/main.c    ****             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 146:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 147:Src/main.c    ****             print(msg, 0);
 148:Src/main.c    ****             TIM4->CNT = values[pid_select];
 149:Src/main.c    ****             while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 150:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 151:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 152:Src/main.c    ****                 print(msg, 0);
 153:Src/main.c    ****             }
 154:Src/main.c    ****             pid_s = pid_Init(values[0],values[1],values[2],5,2);
 155:Src/main.c    ****             pid_select = pid_select==0? 1: pid_select==1? 2: 0;
 156:Src/main.c    ****             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 157:Src/main.c    ****             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 158:Src/main.c    ****         }
 159:Src/main.c    ****         do_pid(&pid_s);
 160:Src/main.c    **** 
 161:Src/main.c    ****         /* USER CODE END WHILE */
 162:Src/main.c    **** 
 163:Src/main.c    ****         /* USER CODE BEGIN 3 */
 164:Src/main.c    **** 
 165:Src/main.c    ****     }
 166:Src/main.c    ****     /* USER CODE END 3 */
 167:Src/main.c    **** 
 168:Src/main.c    **** }
 169:Src/main.c    **** 
 170:Src/main.c    **** void do_pid(PID_t *pid_struct){
 171:Src/main.c    ****     /* Read sensors */
 172:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin)? 0 : 1;
 173:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin)? 0 : 1;
 174:Src/main.c    ****     char msg[20] = "";
 175:Src/main.c    **** 
 176:Src/main.c    ****     /* Get error */
 177:Src/main.c    ****     if(left && right){ pid_struct->err = 0; }
 178:Src/main.c    ****     else if(left && !right){ pid_struct->err = 1; }
 179:Src/main.c    ****     else if(!left && right){ pid_struct->err = -1; }
 180:Src/main.c    ****     else if(!left && !right && (pid_struct->err < 0)){ pid_struct->err = -5; }
 181:Src/main.c    ****     else if(!left && !right && (pid_struct->err > 0)){ pid_struct->err = 5; }
 182:Src/main.c    **** 
 183:Src/main.c    ****     /* Get gain */
 184:Src/main.c    ****     double gain = pid_GetGain(pid_struct, &htim9);
 185:Src/main.c    ****     sprintf(msg, "G: %d", (int) gain);
 186:Src/main.c    ****     print(msg, 0);
 187:Src/main.c    **** 
 188:Src/main.c    ****     /* Set Motor Speeds*/
 189:Src/main.c    ****     if(gain<0){
 190:Src/main.c    ****     
 191:Src/main.c    ****     }
 192:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0.85*MOTOR_SPEED);
 193:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0.85*MOTOR_SPEED);
 194:Src/main.c    **** }
 195:Src/main.c    **** 
 196:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]){
 197:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[0]/100.0*MOTOR_SPEED);
 198:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[1]/100.0*MOTOR_SPEED);
 199:Src/main.c    ****     char msg[20] = "";
 200:Src/main.c    ****     sprintf(msg, "L: %lu", speed[0]);
 201:Src/main.c    ****     print(msg, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 5


 202:Src/main.c    ****     sprintf(msg, "R: %lu", speed[1]);
 203:Src/main.c    ****     print(msg, 1);
 204:Src/main.c    **** }
 205:Src/main.c    **** 
 206:Src/main.c    **** /**
 207:Src/main.c    ****  * @brief System Clock Configuration
 208:Src/main.c    ****  * @retval None
 209:Src/main.c    ****  */
 210:Src/main.c    **** void SystemClock_Config(void)
 211:Src/main.c    **** {
 212:Src/main.c    **** 
 213:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 214:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 215:Src/main.c    **** 
 216:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 217:Src/main.c    ****     */
 218:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 219:Src/main.c    **** 
 220:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 221:Src/main.c    **** 
 222:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 223:Src/main.c    ****     */
 224:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 225:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 226:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 227:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 228:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 229:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 230:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 231:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 232:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 233:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 234:Src/main.c    ****     {
 235:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 236:Src/main.c    ****     }
 237:Src/main.c    **** 
 238:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 239:Src/main.c    ****     */
 240:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 241:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 242:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 243:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 244:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 245:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 246:Src/main.c    **** 
 247:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 248:Src/main.c    ****     {
 249:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 250:Src/main.c    ****     }
 251:Src/main.c    **** 
 252:Src/main.c    ****     /**Configure the Systick interrupt time 
 253:Src/main.c    ****     */
 254:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 255:Src/main.c    **** 
 256:Src/main.c    ****     /**Configure the Systick 
 257:Src/main.c    ****     */
 258:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 6


 259:Src/main.c    **** 
 260:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 261:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 262:Src/main.c    **** }
 263:Src/main.c    **** 
 264:Src/main.c    **** /* USER CODE BEGIN 4 */
 265:Src/main.c    **** /*
 266:Src/main.c    ****  * Rows from 0 - 6
 267:Src/main.c    ****  * Reset screen when printing from row 0
 268:Src/main.c    ****  */
 269:Src/main.c    **** void print(char* msg, int row){
  29              		.loc 1 269 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 38B5     		push	{r3, r4, r5, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 3, -16
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 14, -4
  41 0002 0546     		mov	r5, r0
 270:Src/main.c    ****     if(row==0){
  42              		.loc 1 270 0
  43 0004 0C46     		mov	r4, r1
  44 0006 11B9     		cbnz	r1, .L2
 271:Src/main.c    ****         ssd1306_Fill(Black);
  45              		.loc 1 271 0
  46 0008 0020     		movs	r0, #0
  47              	.LVL1:
  48 000a FFF7FEFF 		bl	ssd1306_Fill
  49              	.LVL2:
  50              	.L2:
 272:Src/main.c    ****     }
 273:Src/main.c    ****     ssd1306_SetCursor(0,row*10);
  51              		.loc 1 273 0
  52 000e 04EB8404 		add	r4, r4, r4, lsl #2
  53              	.LVL3:
  54 0012 6100     		lsls	r1, r4, #1
  55 0014 0020     		movs	r0, #0
  56 0016 01F0FE01 		and	r1, r1, #254
  57 001a FFF7FEFF 		bl	ssd1306_SetCursor
  58              	.LVL4:
 274:Src/main.c    ****     ssd1306_WriteString(msg,Font_7x10,White);
  59              		.loc 1 274 0
  60 001e 054B     		ldr	r3, .L4
  61 0020 2846     		mov	r0, r5
  62 0022 93E80600 		ldmia	r3, {r1, r2}
  63 0026 0123     		movs	r3, #1
  64 0028 FFF7FEFF 		bl	ssd1306_WriteString
  65              	.LVL5:
 275:Src/main.c    ****     ssd1306_UpdateScreen();
  66              		.loc 1 275 0
  67 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
  68              	.LVL6:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 7


  69 0030 38BD     		pop	{r3, r4, r5, pc}
  70              	.LVL7:
  71              	.L5:
  72 0032 00BF     		.align	2
  73              	.L4:
  74 0034 00000000 		.word	Font_7x10
  75              		.cfi_endproc
  76              	.LFE127:
  78              		.global	__aeabi_d2iz
  79              		.section	.text.do_pid,"ax",%progbits
  80              		.align	2
  81              		.global	do_pid
  82              		.thumb
  83              		.thumb_func
  85              	do_pid:
  86              	.LFB124:
 170:Src/main.c    ****     /* Read sensors */
  87              		.loc 1 170 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 24
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              	.LVL8:
  92 0000 70B5     		push	{r4, r5, r6, lr}
  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 16
  95              		.cfi_offset 4, -16
  96              		.cfi_offset 5, -12
  97              		.cfi_offset 6, -8
  98              		.cfi_offset 14, -4
  99 0002 86B0     		sub	sp, sp, #24
 100              	.LCFI2:
 101              		.cfi_def_cfa_offset 40
 102 0004 0646     		mov	r6, r0
 172:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin)? 0 : 1;
 103              		.loc 1 172 0
 104 0006 274D     		ldr	r5, .L13
 105 0008 2846     		mov	r0, r5
 106              	.LVL9:
 107 000a 4FF48041 		mov	r1, #16384
 108 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 109              	.LVL10:
 110 0012 B0FA80F4 		clz	r4, r0
 111 0016 6409     		lsrs	r4, r4, #5
 112              	.LVL11:
 173:Src/main.c    ****     char msg[20] = "";
 113              		.loc 1 173 0
 114 0018 2846     		mov	r0, r5
 115 001a 4FF40041 		mov	r1, #32768
 116 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 117              	.LVL12:
 118 0022 B0FA80F0 		clz	r0, r0
 119 0026 4009     		lsrs	r0, r0, #5
 120              	.LVL13:
 174:Src/main.c    **** 
 121              		.loc 1 174 0
 122 0028 0023     		movs	r3, #0
 123 002a 0193     		str	r3, [sp, #4]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 8


 124 002c 0293     		str	r3, [sp, #8]
 125 002e 0393     		str	r3, [sp, #12]
 126 0030 0493     		str	r3, [sp, #16]
 127 0032 0593     		str	r3, [sp, #20]
 177:Src/main.c    ****     else if(left && !right){ pid_struct->err = 1; }
 128              		.loc 1 177 0
 129 0034 14B1     		cbz	r4, .L7
 177:Src/main.c    ****     else if(left && !right){ pid_struct->err = 1; }
 130              		.loc 1 177 0 is_stmt 0 discriminator 1
 131 0036 08B1     		cbz	r0, .L7
 177:Src/main.c    ****     else if(left && !right){ pid_struct->err = 1; }
 132              		.loc 1 177 0 discriminator 2
 133 0038 3362     		str	r3, [r6, #32]
 134 003a 1AE0     		b	.L8
 135              	.L7:
 178:Src/main.c    ****     else if(!left && right){ pid_struct->err = -1; }
 136              		.loc 1 178 0 is_stmt 1
 137 003c 1CB1     		cbz	r4, .L9
 178:Src/main.c    ****     else if(!left && right){ pid_struct->err = -1; }
 138              		.loc 1 178 0 is_stmt 0 discriminator 1
 139 003e 10B9     		cbnz	r0, .L9
 178:Src/main.c    ****     else if(!left && right){ pid_struct->err = -1; }
 140              		.loc 1 178 0 discriminator 2
 141 0040 0123     		movs	r3, #1
 142 0042 3362     		str	r3, [r6, #32]
 143 0044 15E0     		b	.L8
 144              	.L9:
 179:Src/main.c    ****     else if(!left && !right && (pid_struct->err < 0)){ pid_struct->err = -5; }
 145              		.loc 1 179 0 is_stmt 1
 146 0046 24B9     		cbnz	r4, .L10
 179:Src/main.c    ****     else if(!left && !right && (pid_struct->err < 0)){ pid_struct->err = -5; }
 147              		.loc 1 179 0 is_stmt 0 discriminator 1
 148 0048 18B1     		cbz	r0, .L10
 179:Src/main.c    ****     else if(!left && !right && (pid_struct->err < 0)){ pid_struct->err = -5; }
 149              		.loc 1 179 0 discriminator 2
 150 004a 4FF0FF33 		mov	r3, #-1
 151 004e 3362     		str	r3, [r6, #32]
 152 0050 0FE0     		b	.L8
 153              	.L10:
 180:Src/main.c    ****     else if(!left && !right && (pid_struct->err > 0)){ pid_struct->err = 5; }
 154              		.loc 1 180 0 is_stmt 1
 155 0052 3CB9     		cbnz	r4, .L11
 180:Src/main.c    ****     else if(!left && !right && (pid_struct->err > 0)){ pid_struct->err = 5; }
 156              		.loc 1 180 0 is_stmt 0 discriminator 1
 157 0054 30B9     		cbnz	r0, .L11
 180:Src/main.c    ****     else if(!left && !right && (pid_struct->err > 0)){ pid_struct->err = 5; }
 158              		.loc 1 180 0 discriminator 2
 159 0056 336A     		ldr	r3, [r6, #32]
 160 0058 002B     		cmp	r3, #0
 161 005a 03DA     		bge	.L11
 180:Src/main.c    ****     else if(!left && !right && (pid_struct->err > 0)){ pid_struct->err = 5; }
 162              		.loc 1 180 0 discriminator 3
 163 005c 6FF00403 		mvn	r3, #4
 164 0060 3362     		str	r3, [r6, #32]
 165 0062 06E0     		b	.L8
 166              	.L11:
 181:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 9


 167              		.loc 1 181 0 is_stmt 1
 168 0064 2CB9     		cbnz	r4, .L8
 181:Src/main.c    **** 
 169              		.loc 1 181 0 is_stmt 0 discriminator 1
 170 0066 20B9     		cbnz	r0, .L8
 181:Src/main.c    **** 
 171              		.loc 1 181 0 discriminator 2
 172 0068 336A     		ldr	r3, [r6, #32]
 173 006a 002B     		cmp	r3, #0
 174 006c 01DD     		ble	.L8
 181:Src/main.c    **** 
 175              		.loc 1 181 0 discriminator 3
 176 006e 0523     		movs	r3, #5
 177 0070 3362     		str	r3, [r6, #32]
 178              	.L8:
 184:Src/main.c    ****     sprintf(msg, "G: %d", (int) gain);
 179              		.loc 1 184 0 is_stmt 1
 180 0072 3046     		mov	r0, r6
 181              	.LVL14:
 182 0074 0C49     		ldr	r1, .L13+4
 183 0076 FFF7FEFF 		bl	pid_GetGain
 184              	.LVL15:
 185:Src/main.c    ****     print(msg, 0);
 185              		.loc 1 185 0
 186 007a 51EC100B 		fmrrd	r0, r1, d0
 187 007e FFF7FEFF 		bl	__aeabi_d2iz
 188              	.LVL16:
 189 0082 0246     		mov	r2, r0
 190 0084 01A8     		add	r0, sp, #4
 191 0086 0949     		ldr	r1, .L13+8
 192 0088 FFF7FEFF 		bl	sprintf
 193              	.LVL17:
 186:Src/main.c    **** 
 194              		.loc 1 186 0
 195 008c 01A8     		add	r0, sp, #4
 196 008e 0021     		movs	r1, #0
 197 0090 FFF7FEFF 		bl	print
 198              	.LVL18:
 192:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0.85*MOTOR_SPEED);
 199              		.loc 1 192 0
 200 0094 064B     		ldr	r3, .L13+12
 201 0096 1B68     		ldr	r3, [r3]
 202 0098 40F25232 		movw	r2, #850
 203 009c 5A63     		str	r2, [r3, #52]
 193:Src/main.c    **** }
 204              		.loc 1 193 0
 205 009e DA63     		str	r2, [r3, #60]
 194:Src/main.c    **** 
 206              		.loc 1 194 0
 207 00a0 06B0     		add	sp, sp, #24
 208              	.LCFI3:
 209              		.cfi_def_cfa_offset 16
 210              		@ sp needed
 211 00a2 70BD     		pop	{r4, r5, r6, pc}
 212              	.LVL19:
 213              	.L14:
 214              		.align	2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 10


 215              	.L13:
 216 00a4 00040240 		.word	1073873920
 217 00a8 00000000 		.word	htim9
 218 00ac 00000000 		.word	.LC1
 219 00b0 00000000 		.word	htim1
 220              		.cfi_endproc
 221              	.LFE124:
 223              		.global	__aeabi_ui2d
 224              		.global	__aeabi_ddiv
 225              		.global	__aeabi_dmul
 226              		.global	__aeabi_d2uiz
 227              		.section	.text.update_motor_speed,"ax",%progbits
 228              		.align	2
 229              		.global	update_motor_speed
 230              		.thumb
 231              		.thumb_func
 233              	update_motor_speed:
 234              	.LFB125:
 196:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[0]/100.0*MOTOR_SPEED);
 235              		.loc 1 196 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 24
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              	.LVL20:
 240 0000 30B5     		push	{r4, r5, lr}
 241              	.LCFI4:
 242              		.cfi_def_cfa_offset 12
 243              		.cfi_offset 4, -12
 244              		.cfi_offset 5, -8
 245              		.cfi_offset 14, -4
 246 0002 87B0     		sub	sp, sp, #28
 247              	.LCFI5:
 248              		.cfi_def_cfa_offset 40
 249 0004 0D46     		mov	r5, r1
 197:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[1]/100.0*MOTOR_SPEED);
 250              		.loc 1 197 0
 251 0006 1C4B     		ldr	r3, .L17
 252 0008 1C68     		ldr	r4, [r3]
 253 000a 0868     		ldr	r0, [r1]
 254              	.LVL21:
 255 000c FFF7FEFF 		bl	__aeabi_ui2d
 256              	.LVL22:
 257 0010 0022     		movs	r2, #0
 258 0012 1A4B     		ldr	r3, .L17+4
 259 0014 FFF7FEFF 		bl	__aeabi_ddiv
 260              	.LVL23:
 261 0018 0022     		movs	r2, #0
 262 001a 194B     		ldr	r3, .L17+8
 263 001c FFF7FEFF 		bl	__aeabi_dmul
 264              	.LVL24:
 265 0020 FFF7FEFF 		bl	__aeabi_d2uiz
 266              	.LVL25:
 267 0024 6063     		str	r0, [r4, #52]
 198:Src/main.c    ****     char msg[20] = "";
 268              		.loc 1 198 0
 269 0026 6868     		ldr	r0, [r5, #4]
 270 0028 FFF7FEFF 		bl	__aeabi_ui2d
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 11


 271              	.LVL26:
 272 002c 0022     		movs	r2, #0
 273 002e 134B     		ldr	r3, .L17+4
 274 0030 FFF7FEFF 		bl	__aeabi_ddiv
 275              	.LVL27:
 276 0034 0022     		movs	r2, #0
 277 0036 124B     		ldr	r3, .L17+8
 278 0038 FFF7FEFF 		bl	__aeabi_dmul
 279              	.LVL28:
 280 003c FFF7FEFF 		bl	__aeabi_d2uiz
 281              	.LVL29:
 282 0040 E063     		str	r0, [r4, #60]
 199:Src/main.c    ****     sprintf(msg, "L: %lu", speed[0]);
 283              		.loc 1 199 0
 284 0042 0024     		movs	r4, #0
 285 0044 0194     		str	r4, [sp, #4]
 286 0046 0294     		str	r4, [sp, #8]
 287 0048 0394     		str	r4, [sp, #12]
 288 004a 0494     		str	r4, [sp, #16]
 289 004c 0594     		str	r4, [sp, #20]
 200:Src/main.c    ****     print(msg, 0);
 290              		.loc 1 200 0
 291 004e 01A8     		add	r0, sp, #4
 292 0050 0C49     		ldr	r1, .L17+12
 293 0052 2A68     		ldr	r2, [r5]
 294 0054 FFF7FEFF 		bl	sprintf
 295              	.LVL30:
 201:Src/main.c    ****     sprintf(msg, "R: %lu", speed[1]);
 296              		.loc 1 201 0
 297 0058 01A8     		add	r0, sp, #4
 298 005a 2146     		mov	r1, r4
 299 005c FFF7FEFF 		bl	print
 300              	.LVL31:
 202:Src/main.c    ****     print(msg, 1);
 301              		.loc 1 202 0
 302 0060 01A8     		add	r0, sp, #4
 303 0062 0949     		ldr	r1, .L17+16
 304 0064 6A68     		ldr	r2, [r5, #4]
 305 0066 FFF7FEFF 		bl	sprintf
 306              	.LVL32:
 203:Src/main.c    **** }
 307              		.loc 1 203 0
 308 006a 01A8     		add	r0, sp, #4
 309 006c 0121     		movs	r1, #1
 310 006e FFF7FEFF 		bl	print
 311              	.LVL33:
 204:Src/main.c    **** 
 312              		.loc 1 204 0
 313 0072 07B0     		add	sp, sp, #28
 314              	.LCFI6:
 315              		.cfi_def_cfa_offset 12
 316              		@ sp needed
 317 0074 30BD     		pop	{r4, r5, pc}
 318              	.LVL34:
 319              	.L18:
 320 0076 00BF     		.align	2
 321              	.L17:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 12


 322 0078 00000000 		.word	htim1
 323 007c 00005940 		.word	1079574528
 324 0080 00408F40 		.word	1083129856
 325 0084 08000000 		.word	.LC2
 326 0088 10000000 		.word	.LC3
 327              		.cfi_endproc
 328              	.LFE125:
 330              		.section	.text._Error_Handler,"ax",%progbits
 331              		.align	2
 332              		.global	_Error_Handler
 333              		.thumb
 334              		.thumb_func
 336              	_Error_Handler:
 337              	.LFB128:
 276:Src/main.c    **** }
 277:Src/main.c    **** 
 278:Src/main.c    **** /* USER CODE END 4 */
 279:Src/main.c    **** 
 280:Src/main.c    **** /**
 281:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 282:Src/main.c    ****  * @param  file: The file name as string.
 283:Src/main.c    ****  * @param  line: The line in file as a number.
 284:Src/main.c    ****  * @retval None
 285:Src/main.c    ****  */
 286:Src/main.c    **** void _Error_Handler(char *file, int line)
 287:Src/main.c    **** {
 338              		.loc 1 287 0
 339              		.cfi_startproc
 340              		@ Volatile: function does not return.
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 344              	.LVL35:
 345              	.L20:
 288:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 289:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 290:Src/main.c    ****     while(1)
 291:Src/main.c    ****     {
 292:Src/main.c    ****     }
 346              		.loc 1 292 0 discriminator 1
 347 0000 FEE7     		b	.L20
 348              		.cfi_endproc
 349              	.LFE128:
 351 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 352              		.align	2
 353              		.global	SystemClock_Config
 354              		.thumb
 355              		.thumb_func
 357              	SystemClock_Config:
 358              	.LFB126:
 211:Src/main.c    **** 
 359              		.loc 1 211 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 80
 362              		@ frame_needed = 0, uses_anonymous_args = 0
 363 0000 00B5     		push	{lr}
 364              	.LCFI7:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 13


 365              		.cfi_def_cfa_offset 4
 366              		.cfi_offset 14, -4
 367 0002 95B0     		sub	sp, sp, #84
 368              	.LCFI8:
 369              		.cfi_def_cfa_offset 88
 370              	.LBB2:
 218:Src/main.c    **** 
 371              		.loc 1 218 0
 372 0004 0022     		movs	r2, #0
 373 0006 0192     		str	r2, [sp, #4]
 374 0008 294B     		ldr	r3, .L25
 375 000a 196C     		ldr	r1, [r3, #64]
 376 000c 41F08051 		orr	r1, r1, #268435456
 377 0010 1964     		str	r1, [r3, #64]
 378 0012 1B6C     		ldr	r3, [r3, #64]
 379 0014 03F08053 		and	r3, r3, #268435456
 380 0018 0193     		str	r3, [sp, #4]
 381 001a 019B     		ldr	r3, [sp, #4]
 382              	.LBE2:
 383              	.LBB3:
 220:Src/main.c    **** 
 384              		.loc 1 220 0
 385 001c 0292     		str	r2, [sp, #8]
 386 001e 2549     		ldr	r1, .L25+4
 387 0020 0B68     		ldr	r3, [r1]
 388 0022 23F44043 		bic	r3, r3, #49152
 389 0026 43F40043 		orr	r3, r3, #32768
 390 002a 0B60     		str	r3, [r1]
 391 002c 0B68     		ldr	r3, [r1]
 392 002e 03F44043 		and	r3, r3, #49152
 393 0032 0293     		str	r3, [sp, #8]
 394 0034 029B     		ldr	r3, [sp, #8]
 395              	.LBE3:
 224:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 396              		.loc 1 224 0
 397 0036 0223     		movs	r3, #2
 398 0038 0893     		str	r3, [sp, #32]
 225:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 399              		.loc 1 225 0
 400 003a 0121     		movs	r1, #1
 401 003c 0B91     		str	r1, [sp, #44]
 226:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 402              		.loc 1 226 0
 403 003e 1021     		movs	r1, #16
 404 0040 0C91     		str	r1, [sp, #48]
 227:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 405              		.loc 1 227 0
 406 0042 0E93     		str	r3, [sp, #56]
 228:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 407              		.loc 1 228 0
 408 0044 0F92     		str	r2, [sp, #60]
 229:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 409              		.loc 1 229 0
 410 0046 0822     		movs	r2, #8
 411 0048 1092     		str	r2, [sp, #64]
 230:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 412              		.loc 1 230 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 14


 413 004a 4822     		movs	r2, #72
 414 004c 1192     		str	r2, [sp, #68]
 231:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 415              		.loc 1 231 0
 416 004e 1293     		str	r3, [sp, #72]
 232:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 417              		.loc 1 232 0
 418 0050 0423     		movs	r3, #4
 419 0052 1393     		str	r3, [sp, #76]
 233:Src/main.c    ****     {
 420              		.loc 1 233 0
 421 0054 08A8     		add	r0, sp, #32
 422 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 423              	.LVL36:
 424 005a 18B1     		cbz	r0, .L22
 235:Src/main.c    ****     }
 425              		.loc 1 235 0
 426 005c 1648     		ldr	r0, .L25+8
 427 005e EB21     		movs	r1, #235
 428 0060 FFF7FEFF 		bl	_Error_Handler
 429              	.LVL37:
 430              	.L22:
 240:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 431              		.loc 1 240 0
 432 0064 0F23     		movs	r3, #15
 433 0066 0393     		str	r3, [sp, #12]
 242:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 434              		.loc 1 242 0
 435 0068 0221     		movs	r1, #2
 436 006a 0491     		str	r1, [sp, #16]
 243:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 437              		.loc 1 243 0
 438 006c 0023     		movs	r3, #0
 439 006e 0593     		str	r3, [sp, #20]
 244:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 440              		.loc 1 244 0
 441 0070 4FF48052 		mov	r2, #4096
 442 0074 0692     		str	r2, [sp, #24]
 245:Src/main.c    **** 
 443              		.loc 1 245 0
 444 0076 0793     		str	r3, [sp, #28]
 247:Src/main.c    ****     {
 445              		.loc 1 247 0
 446 0078 03A8     		add	r0, sp, #12
 447 007a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 448              	.LVL38:
 449 007e 18B1     		cbz	r0, .L23
 249:Src/main.c    ****     }
 450              		.loc 1 249 0
 451 0080 0D48     		ldr	r0, .L25+8
 452 0082 F921     		movs	r1, #249
 453 0084 FFF7FEFF 		bl	_Error_Handler
 454              	.LVL39:
 455              	.L23:
 254:Src/main.c    **** 
 456              		.loc 1 254 0
 457 0088 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 15


 458              	.LVL40:
 459 008c 0B4B     		ldr	r3, .L25+12
 460 008e A3FB0030 		umull	r3, r0, r3, r0
 461 0092 8009     		lsrs	r0, r0, #6
 462 0094 FFF7FEFF 		bl	HAL_SYSTICK_Config
 463              	.LVL41:
 258:Src/main.c    **** 
 464              		.loc 1 258 0
 465 0098 0420     		movs	r0, #4
 466 009a FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 467              	.LVL42:
 261:Src/main.c    **** }
 468              		.loc 1 261 0
 469 009e 4FF0FF30 		mov	r0, #-1
 470 00a2 0021     		movs	r1, #0
 471 00a4 0A46     		mov	r2, r1
 472 00a6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 473              	.LVL43:
 262:Src/main.c    **** 
 474              		.loc 1 262 0
 475 00aa 15B0     		add	sp, sp, #84
 476              	.LCFI9:
 477              		.cfi_def_cfa_offset 4
 478              		@ sp needed
 479 00ac 5DF804FB 		ldr	pc, [sp], #4
 480              	.L26:
 481              		.align	2
 482              	.L25:
 483 00b0 00380240 		.word	1073887232
 484 00b4 00700040 		.word	1073770496
 485 00b8 18000000 		.word	.LC4
 486 00bc D34D6210 		.word	274877907
 487              		.cfi_endproc
 488              	.LFE126:
 490              		.section	.text.main,"ax",%progbits
 491              		.align	2
 492              		.global	main
 493              		.thumb
 494              		.thumb_func
 496              	main:
 497              	.LFB123:
  87:Src/main.c    ****     /* USER CODE BEGIN 1 */
 498              		.loc 1 87 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 112
 501              		@ frame_needed = 0, uses_anonymous_args = 0
 502 0000 70B5     		push	{r4, r5, r6, lr}
 503              	.LCFI10:
 504              		.cfi_def_cfa_offset 16
 505              		.cfi_offset 4, -16
 506              		.cfi_offset 5, -12
 507              		.cfi_offset 6, -8
 508              		.cfi_offset 14, -4
 509 0002 9EB0     		sub	sp, sp, #120
 510              	.LCFI11:
 511              		.cfi_def_cfa_offset 136
  95:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 16


 512              		.loc 1 95 0
 513 0004 FFF7FEFF 		bl	HAL_Init
 514              	.LVL44:
 102:Src/main.c    **** 
 515              		.loc 1 102 0
 516 0008 FFF7FEFF 		bl	SystemClock_Config
 517              	.LVL45:
 109:Src/main.c    ****     MX_TIM3_Init();
 518              		.loc 1 109 0
 519 000c FFF7FEFF 		bl	MX_GPIO_Init
 520              	.LVL46:
 110:Src/main.c    ****     MX_TIM5_Init();
 521              		.loc 1 110 0
 522 0010 FFF7FEFF 		bl	MX_TIM3_Init
 523              	.LVL47:
 111:Src/main.c    ****     MX_TIM1_Init();
 524              		.loc 1 111 0
 525 0014 FFF7FEFF 		bl	MX_TIM5_Init
 526              	.LVL48:
 112:Src/main.c    ****     MX_TIM2_Init();
 527              		.loc 1 112 0
 528 0018 FFF7FEFF 		bl	MX_TIM1_Init
 529              	.LVL49:
 113:Src/main.c    ****     MX_USART6_UART_Init();
 530              		.loc 1 113 0
 531 001c FFF7FEFF 		bl	MX_TIM2_Init
 532              	.LVL50:
 114:Src/main.c    ****     MX_ADC1_Init();
 533              		.loc 1 114 0
 534 0020 FFF7FEFF 		bl	MX_USART6_UART_Init
 535              	.LVL51:
 115:Src/main.c    ****     MX_I2C1_Init();
 536              		.loc 1 115 0
 537 0024 FFF7FEFF 		bl	MX_ADC1_Init
 538              	.LVL52:
 116:Src/main.c    ****     MX_TIM4_Init();
 539              		.loc 1 116 0
 540 0028 FFF7FEFF 		bl	MX_I2C1_Init
 541              	.LVL53:
 117:Src/main.c    ****     MX_TIM9_Init();
 542              		.loc 1 117 0
 543 002c FFF7FEFF 		bl	MX_TIM4_Init
 544              	.LVL54:
 118:Src/main.c    ****     ssd1306_Init();
 545              		.loc 1 118 0
 546 0030 FFF7FEFF 		bl	MX_TIM9_Init
 547              	.LVL55:
 119:Src/main.c    ****     /* USER CODE BEGIN 2 */
 548              		.loc 1 119 0
 549 0034 FFF7FEFF 		bl	ssd1306_Init
 550              	.LVL56:
 123:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 551              		.loc 1 123 0
 552 0038 4A48     		ldr	r0, .L37
 553 003a 1821     		movs	r1, #24
 554 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 555              	.LVL57:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 17


 124:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 556              		.loc 1 124 0
 557 0040 494C     		ldr	r4, .L37+4
 558 0042 2046     		mov	r0, r4
 559 0044 0021     		movs	r1, #0
 560 0046 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 561              	.LVL58:
 125:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 562              		.loc 1 125 0
 563 004a 2046     		mov	r0, r4
 564 004c 0821     		movs	r1, #8
 565 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 566              	.LVL59:
 126:Src/main.c    **** 
 567              		.loc 1 126 0
 568 0052 4648     		ldr	r0, .L37+8
 569 0054 FFF7FEFF 		bl	HAL_TIM_Base_Start
 570              	.LVL60:
 131:Src/main.c    ****     char msg[20] = "";
 571              		.loc 1 131 0
 572 0058 4548     		ldr	r0, .L37+12
 573 005a 0021     		movs	r1, #0
 574 005c FFF7FEFF 		bl	print
 575              	.LVL61:
 132:Src/main.c    ****     int pid_select = 0;
 576              		.loc 1 132 0
 577 0060 0024     		movs	r4, #0
 578 0062 1994     		str	r4, [sp, #100]
 579 0064 1A94     		str	r4, [sp, #104]
 580 0066 1B94     		str	r4, [sp, #108]
 581 0068 1C94     		str	r4, [sp, #112]
 582 006a 1D94     		str	r4, [sp, #116]
 583              	.LVL62:
 134:Src/main.c    ****     PID_t pid_s = pid_Init(values[0],values[1],values[2],5,2);
 584              		.loc 1 134 0
 585 006c 414A     		ldr	r2, .L37+16
 586 006e 16AB     		add	r3, sp, #88
 587 0070 07CA     		ldmia	r2, {r0, r1, r2}
 588 0072 83E80700 		stmia	r3, {r0, r1, r2}
 135:Src/main.c    ****     print("P: 10", 0);
 589              		.loc 1 135 0
 590 0076 0523     		movs	r3, #5
 591 0078 0093     		str	r3, [sp]
 592 007a 0223     		movs	r3, #2
 593 007c 0193     		str	r3, [sp, #4]
 594 007e 0CA8     		add	r0, sp, #48
 595 0080 1699     		ldr	r1, [sp, #88]
 596 0082 179A     		ldr	r2, [sp, #92]
 597 0084 189B     		ldr	r3, [sp, #96]
 598 0086 FFF7FEFF 		bl	pid_Init
 599              	.LVL63:
 136:Src/main.c    ****     print("I: 200", 1);
 600              		.loc 1 136 0
 601 008a 3B48     		ldr	r0, .L37+20
 602 008c 2146     		mov	r1, r4
 603 008e FFF7FEFF 		bl	print
 604              	.LVL64:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 18


 137:Src/main.c    ****     print("D: 0", 1);
 605              		.loc 1 137 0
 606 0092 3A48     		ldr	r0, .L37+24
 607 0094 0121     		movs	r1, #1
 608 0096 FFF7FEFF 		bl	print
 609              	.LVL65:
 138:Src/main.c    ****     /* Infinite loop */
 610              		.loc 1 138 0
 611 009a 3948     		ldr	r0, .L37+28
 612 009c 0121     		movs	r1, #1
 613 009e FFF7FEFF 		bl	print
 614              	.LVL66:
 615              	.L33:
 143:Src/main.c    ****             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 616              		.loc 1 143 0
 617 00a2 3848     		ldr	r0, .L37+32
 618 00a4 4FF40051 		mov	r1, #8192
 619 00a8 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 620              	.LVL67:
 621 00ac 0028     		cmp	r0, #0
 622 00ae 54D1     		bne	.L28
 144:Src/main.c    ****             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 623              		.loc 1 144 0
 624 00b0 2D4D     		ldr	r5, .L37+4
 625 00b2 2846     		mov	r0, r5
 626 00b4 0021     		movs	r1, #0
 627 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 628              	.LVL68:
 145:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 629              		.loc 1 145 0
 630 00ba 2846     		mov	r0, r5
 631 00bc 0821     		movs	r1, #8
 632 00be FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 633              	.LVL69:
 146:Src/main.c    ****             print(msg, 0);
 634              		.loc 1 146 0
 635 00c2 1EAB     		add	r3, sp, #120
 636 00c4 03EB8403 		add	r3, r3, r4, lsl #2
 637 00c8 53F8205C 		ldr	r5, [r3, #-32]
 638 00cc 19A8     		add	r0, sp, #100
 639 00ce 2E49     		ldr	r1, .L37+36
 640 00d0 2A46     		mov	r2, r5
 641 00d2 FFF7FEFF 		bl	sprintf
 642              	.LVL70:
 147:Src/main.c    ****             TIM4->CNT = values[pid_select];
 643              		.loc 1 147 0
 644 00d6 19A8     		add	r0, sp, #100
 645 00d8 0021     		movs	r1, #0
 646 00da FFF7FEFF 		bl	print
 647              	.LVL71:
 148:Src/main.c    ****             while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 648              		.loc 1 148 0
 649 00de 2B4B     		ldr	r3, .L37+40
 650 00e0 5D62     		str	r5, [r3, #36]
 149:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 651              		.loc 1 149 0
 652 00e2 0EE0     		b	.L29
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 19


 653              	.L30:
 150:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 654              		.loc 1 150 0
 655 00e4 294B     		ldr	r3, .L37+40
 656 00e6 5A6A     		ldr	r2, [r3, #36]
 657 00e8 1EAB     		add	r3, sp, #120
 658 00ea 03EB8403 		add	r3, r3, r4, lsl #2
 659 00ee 43F8202C 		str	r2, [r3, #-32]
 151:Src/main.c    ****                 print(msg, 0);
 660              		.loc 1 151 0
 661 00f2 19A8     		add	r0, sp, #100
 662 00f4 2449     		ldr	r1, .L37+36
 663 00f6 FFF7FEFF 		bl	sprintf
 664              	.LVL72:
 152:Src/main.c    ****             }
 665              		.loc 1 152 0
 666 00fa 19A8     		add	r0, sp, #100
 667 00fc 0021     		movs	r1, #0
 668 00fe FFF7FEFF 		bl	print
 669              	.LVL73:
 670              	.L29:
 149:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 671              		.loc 1 149 0
 672 0102 2048     		ldr	r0, .L37+32
 673 0104 4FF40051 		mov	r1, #8192
 674 0108 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 675              	.LVL74:
 676 010c 0028     		cmp	r0, #0
 677 010e E9D0     		beq	.L30
 154:Src/main.c    ****             pid_select = pid_select==0? 1: pid_select==1? 2: 0;
 678              		.loc 1 154 0
 679 0110 0523     		movs	r3, #5
 680 0112 0093     		str	r3, [sp]
 681 0114 0223     		movs	r3, #2
 682 0116 0193     		str	r3, [sp, #4]
 683 0118 02A8     		add	r0, sp, #8
 684 011a 1699     		ldr	r1, [sp, #88]
 685 011c 179A     		ldr	r2, [sp, #92]
 686 011e 189B     		ldr	r3, [sp, #96]
 687 0120 FFF7FEFF 		bl	pid_Init
 688              	.LVL75:
 689 0124 0CAE     		add	r6, sp, #48
 690 0126 02AD     		add	r5, sp, #8
 691 0128 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 692 012a 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 693 012c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 694 012e 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 695 0130 95E80300 		ldmia	r5, {r0, r1}
 696 0134 86E80300 		stmia	r6, {r0, r1}
 155:Src/main.c    ****             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 697              		.loc 1 155 0
 698 0138 2CB1     		cbz	r4, .L34
 155:Src/main.c    ****             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 699              		.loc 1 155 0 is_stmt 0 discriminator 1
 700 013a 012C     		cmp	r4, #1
 701 013c 01D1     		bne	.L35
 155:Src/main.c    ****             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 20


 702              		.loc 1 155 0
 703 013e 0224     		movs	r4, #2
 704              	.LVL76:
 705 0140 02E0     		b	.L31
 706              	.LVL77:
 707              	.L35:
 708 0142 0024     		movs	r4, #0
 709              	.LVL78:
 710 0144 00E0     		b	.L31
 711              	.LVL79:
 712              	.L34:
 713 0146 0124     		movs	r4, #1
 714              	.LVL80:
 715              	.L31:
 156:Src/main.c    ****             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 716              		.loc 1 156 0 is_stmt 1 discriminator 8
 717 0148 074D     		ldr	r5, .L37+4
 718 014a 2846     		mov	r0, r5
 719 014c 0021     		movs	r1, #0
 720 014e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 721              	.LVL81:
 157:Src/main.c    ****         }
 722              		.loc 1 157 0 discriminator 8
 723 0152 2846     		mov	r0, r5
 724 0154 0821     		movs	r1, #8
 725 0156 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 726              	.LVL82:
 727              	.L28:
 159:Src/main.c    **** 
 728              		.loc 1 159 0
 729 015a 0CA8     		add	r0, sp, #48
 730 015c FFF7FEFF 		bl	do_pid
 731              	.LVL83:
 165:Src/main.c    ****     /* USER CODE END 3 */
 732              		.loc 1 165 0
 733 0160 9FE7     		b	.L33
 734              	.L38:
 735 0162 00BF     		.align	2
 736              	.L37:
 737 0164 00000000 		.word	htim4
 738 0168 00000000 		.word	htim1
 739 016c 00000000 		.word	htim9
 740 0170 24000000 		.word	.LC5
 741 0174 00000000 		.word	.LANCHOR0
 742 0178 30000000 		.word	.LC6
 743 017c 38000000 		.word	.LC7
 744 0180 40000000 		.word	.LC8
 745 0184 00080240 		.word	1073874944
 746 0188 48000000 		.word	.LC9
 747 018c 00080040 		.word	1073743872
 748              		.cfi_endproc
 749              	.LFE123:
 751              		.global	PUSH_BUTTON_STATE
 752              		.comm	last_time,4,4
 753              		.section	.rodata
 754              		.align	2
 755              		.set	.LANCHOR0,. + 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 21


 756              	.LC0:
 757 0000 0A000000 		.word	10
 758 0004 C8000000 		.word	200
 759 0008 00000000 		.word	0
 760              		.section	.rodata.str1.4,"aMS",%progbits,1
 761              		.align	2
 762              	.LC1:
 763 0000 473A2025 		.ascii	"G: %d\000"
 763      6400
 764 0006 0000     		.space	2
 765              	.LC2:
 766 0008 4C3A2025 		.ascii	"L: %lu\000"
 766      6C7500
 767 000f 00       		.space	1
 768              	.LC3:
 769 0010 523A2025 		.ascii	"R: %lu\000"
 769      6C7500
 770 0017 00       		.space	1
 771              	.LC4:
 772 0018 5372632F 		.ascii	"Src/main.c\000"
 772      6D61696E 
 772      2E6300
 773 0023 00       		.space	1
 774              	.LC5:
 775 0024 53746172 		.ascii	"Starting\000"
 775      74696E67 
 775      00
 776 002d 000000   		.space	3
 777              	.LC6:
 778 0030 503A2031 		.ascii	"P: 10\000"
 778      3000
 779 0036 0000     		.space	2
 780              	.LC7:
 781 0038 493A2032 		.ascii	"I: 200\000"
 781      303000
 782 003f 00       		.space	1
 783              	.LC8:
 784 0040 443A2030 		.ascii	"D: 0\000"
 784      00
 785 0045 000000   		.space	3
 786              	.LC9:
 787 0048 256C7500 		.ascii	"%lu\000"
 788              		.section	.bss.PUSH_BUTTON_STATE,"aw",%nobits
 791              	PUSH_BUTTON_STATE:
 792 0000 00       		.space	1
 793              		.text
 794              	.Letext0:
 795              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 796              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 797              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 798              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 799              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 800              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 801              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 802              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 803              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 804              		.file 11 "Inc/fonts.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 22


 805              		.file 12 "Inc/ssd1306.h"
 806              		.file 13 "Inc/pid.h"
 807              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
 808              		.file 15 "Inc/tim.h"
 809              		.file 16 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 810              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 811              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 812              		.file 19 "Inc/gpio.h"
 813              		.file 20 "Inc/usart.h"
 814              		.file 21 "Inc/adc.h"
 815              		.file 22 "Inc/i2c.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:21     .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:26     .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:74     .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:80     .text.do_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:85     .text.do_pid:0000000000000000 do_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:216    .text.do_pid:00000000000000a4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:228    .text.update_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:233    .text.update_motor_speed:0000000000000000 update_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:322    .text.update_motor_speed:0000000000000078 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:331    .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:336    .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:352    .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:357    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:483    .text.SystemClock_Config:00000000000000b0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:491    .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:496    .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:737    .text.main:0000000000000164 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:791    .bss.PUSH_BUTTON_STATE:0000000000000000 PUSH_BUTTON_STATE
                            *COM*:0000000000000004 last_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:754    .rodata:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:761    .rodata.str1.4:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s:792    .bss.PUSH_BUTTON_STATE:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
__aeabi_d2iz
HAL_GPIO_ReadPin
pid_GetGain
sprintf
htim9
htim1
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_TIM3_Init
MX_TIM5_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccy94oVa.s 			page 24


MX_TIM4_Init
MX_TIM9_Init
ssd1306_Init
HAL_TIM_Encoder_Start
HAL_TIM_PWM_Start
HAL_TIM_Base_Start
pid_Init
HAL_TIM_PWM_Stop
htim4
