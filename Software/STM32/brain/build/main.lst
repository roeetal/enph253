ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.encoder_pid,"ax",%progbits
  21              		.align	2
  22              		.global	encoder_pid
  23              		.thumb
  24              		.thumb_func
  26              	encoder_pid:
  27              	.LFB136:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****  ******************************************************************************
   3:Src/main.c    ****  * @file           : main.c
   4:Src/main.c    ****  * @brief          : Main program body
   5:Src/main.c    ****  ******************************************************************************
   6:Src/main.c    ****  ** This notice applies to any and all portions of this file
   7:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****  * inserted by the user or by software development tools
  10:Src/main.c    ****  * are owned by their respective copyright owners.
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  13:Src/main.c    ****  *
  14:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****  * are permitted provided that the following conditions are met:
  16:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****  *      and/or other materials provided with the distribution.
  21:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****  *      without specific prior written permission.
  24:Src/main.c    ****  *
  25:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 2


  31:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****  *
  36:Src/main.c    ****  ******************************************************************************
  37:Src/main.c    ****  */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** #include "main.h"
  40:Src/main.c    **** #include "stm32f4xx_hal.h"
  41:Src/main.c    **** #include "adc.h"
  42:Src/main.c    **** #include "dma.h"
  43:Src/main.c    **** #include "i2c.h"
  44:Src/main.c    **** #include "tim.h"
  45:Src/main.c    **** #include "usart.h"
  46:Src/main.c    **** #include "gpio.h"
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** #include "fonts.h"
  50:Src/main.c    **** #include "ssd1306.h"
  51:Src/main.c    **** #include "encoder.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "filter.h"
  54:Src/main.c    **** #include "extern_vars.h"
  55:Src/main.c    **** #include <String.h>
  56:Src/main.c    **** #include "claw.h"
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END Includes */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** // uint16_t LEFT_SPEED = BASE_SPEED+SPEED_DIFF;
  65:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED;
  66:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  67:Src/main.c    **** uint32_t dma_buffer[2048];
  68:Src/main.c    **** uint32_t adc_values[2048];
  69:Src/main.c    **** int ewok_cnt = 0;
  70:Src/main.c    **** int searches = 0;
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  79:Src/main.c    **** void print(char msg[], int row);
  80:Src/main.c    **** PID_t menu();
  81:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  82:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  83:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  84:Src/main.c    **** void turn();
  85:Src/main.c    **** void turn_deg(int16_t);
  86:Src/main.c    **** void alarm_detect();
  87:Src/main.c    **** void drive_straight(PID_t *enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 3


  88:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis);
  89:Src/main.c    **** void square_edge(PID_t *enc_pid);
  90:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid);
  91:Src/main.c    **** void test_All();
  92:Src/main.c    **** void test_PWM_htim1();
  93:Src/main.c    **** void test_PWM_htim3();
  94:Src/main.c    **** 
  95:Src/main.c    **** /* USER CODE END PFP */
  96:Src/main.c    **** 
  97:Src/main.c    **** /* USER CODE BEGIN 0 */
  98:Src/main.c    **** /**
  99:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
 100:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
 101:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
 102:Src/main.c    ****  */
 103:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 104:Src/main.c    **** {
 105:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
 106:Src/main.c    **** }
 107:Src/main.c    **** /* USER CODE END 0 */
 108:Src/main.c    **** 
 109:Src/main.c    **** /**
 110:Src/main.c    ****  * @brief  The application entry point.
 111:Src/main.c    ****  *
 112:Src/main.c    ****  * @retval None
 113:Src/main.c    ****  */
 114:Src/main.c    **** int main(void)
 115:Src/main.c    **** {
 116:Src/main.c    ****     /* USER CODE BEGIN 1 */
 117:Src/main.c    **** 
 118:Src/main.c    ****     /* USER CODE END 1 */
 119:Src/main.c    **** 
 120:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 121:Src/main.c    **** 
 122:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 123:Src/main.c    ****     HAL_Init();
 124:Src/main.c    **** 
 125:Src/main.c    ****     /* USER CODE BEGIN Init */
 126:Src/main.c    **** 
 127:Src/main.c    ****     /* USER CODE END Init */
 128:Src/main.c    **** 
 129:Src/main.c    ****     /* Configure the system clock */
 130:Src/main.c    ****     SystemClock_Config();
 131:Src/main.c    **** 
 132:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 133:Src/main.c    **** 
 134:Src/main.c    ****     /* USER CODE END SysInit */
 135:Src/main.c    **** 
 136:Src/main.c    ****     /* Initialize all configured peripherals */
 137:Src/main.c    ****     MX_GPIO_Init();
 138:Src/main.c    ****     MX_DMA_Init();
 139:Src/main.c    ****     MX_TIM3_Init();
 140:Src/main.c    ****     MX_TIM1_Init();
 141:Src/main.c    ****     MX_TIM2_Init();
 142:Src/main.c    ****     MX_ADC1_Init();
 143:Src/main.c    ****     MX_TIM4_Init();
 144:Src/main.c    ****     MX_TIM9_Init();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 4


 145:Src/main.c    ****     MX_TIM5_Init();
 146:Src/main.c    ****     MX_I2C1_Init();
 147:Src/main.c    ****     MX_USART6_UART_Init();
 148:Src/main.c    ****     /* USER CODE BEGIN 2 */
 149:Src/main.c    **** 
 150:Src/main.c    ****     /* Initialize peripherals */
 151:Src/main.c    ****     /* 
 152:Src/main.c    ****      * Claw jaw: TIM3 CH1
 153:Src/main.c    ****      * Claw arm: TIM3 CH2
 154:Src/main.c    ****      * Basket: TIM3 CH3
 155:Src/main.c    ****      * left forward: TIM1 CH1
 156:Src/main.c    ****      * left backward: TIM1 CH2
 157:Src/main.c    ****      * right forward: TIM1 CH3
 158:Src/main.c    ****      * right backward: TIM1 CH4
 159:Src/main.c    ****      * left encoder: TIM4
 160:Src/main.c    ****      * right encoderL TIM5
 161:Src/main.c    ****      * spare clocks: TIM2, TIM9
 162:Src/main.c    ****      */
 163:Src/main.c    **** 
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 165:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 172:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 173:Src/main.c    **** 
 174:Src/main.c    ****     /* Initialize other stuffs */
 175:Src/main.c    ****     ssd1306_Init();
 176:Src/main.c    ****     print("Starting\n", 0);
 177:Src/main.c    ****     claw_init(&htim3);
 178:Src/main.c    ****     // basket_init(&htim3);
 179:Src/main.c    **** 
 180:Src/main.c    ****     PID_t enc_pid = pid_Init(2, 0, 0, 2, 1);
 181:Src/main.c    **** 
 182:Src/main.c    ****     EDGE_LEFT_STATE = NOT_FLAGGED;
 183:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 184:Src/main.c    **** 
 185:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED+80, RIGHT_SPEED, 2000);
 186:Src/main.c    **** 
 187:Src/main.c    ****     /* Initially disabled interrupts and ADC */
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 189:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 190:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 191:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 192:Src/main.c    **** 
 193:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED+10, 5000);
 194:Src/main.c    ****     print("ewok\n", 0);
 195:Src/main.c    **** 
 196:Src/main.c    ****     /* USER CODE END 2 */
 197:Src/main.c    **** 
 198:Src/main.c    ****     /* Infinite loop */
 199:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 200:Src/main.c    ****     while (1)
 201:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 5


 202:Src/main.c    ****         // /*
 203:Src/main.c    ****         //  * Pi Turning
 204:Src/main.c    ****         //  */
 205:Src/main.c    **** 
 206:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 207:Src/main.c    ****         {
 208:Src/main.c    ****             // Stop Requesting Images
 209:Src/main.c    ****             print("Pi interrupt\n", 0);
 210:Src/main.c    ****             // Turn to ewok
 211:Src/main.c    ****             turn();
 212:Src/main.c    **** 
 213:Src/main.c    ****             // Drive forward w/ PID for 2.5 s, enable claw interrupt
 214:Src/main.c    ****             //    uint32_t start = HAL_GetTick();
 215:Src/main.c    ****             uint32_t time = HAL_GetTick();
 216:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 217:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 218:Src/main.c    ****             while(HAL_GetTick()-time<2800){
 219:Src/main.c    ****                 drive_straight(&enc_pid);
 220:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 221:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 222:Src/main.c    ****                 {
 223:Src/main.c    ****                     print("Claw interrupt\n", 0);
 224:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 225:Src/main.c    ****                     break;
 226:Src/main.c    ****                 }
 227:Src/main.c    ****             }
 228:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 229:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 230:Src/main.c    ****             print("ewok\n", 0);
 231:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 232:Src/main.c    **** 
 233:Src/main.c    ****         }else{
 234:Src/main.c    **** 
 235:Src/main.c    ****             ++searches;
 236:Src/main.c    ****             if(searches == 4 && ewok_cnt == 0){
 237:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 238:Src/main.c    ****             }
 239:Src/main.c    ****             else if(searches == 3 && ewok_cnt == 1){
 240:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 241:Src/main.c    ****             }
 242:Src/main.c    ****             else if(searches == 4 && ewok_cnt == 2){
 243:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 244:Src/main.c    ****             }else{
 245:Src/main.c    ****                 uint32_t time = HAL_GetTick();
 246:Src/main.c    ****                 while(HAL_GetTick()-time<3000 && PI_INT_STATE == NOT_FLAGGED);
 247:Src/main.c    ****                 int thresh = ewok_cnt==1? 500:750;
 248:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 249:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 250:Src/main.c    ****                 time = HAL_GetTick();
 251:Src/main.c    ****                 while(HAL_GetTick()-time<thresh){
 252:Src/main.c    ****                     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 253:Src/main.c    ****                     {
 254:Src/main.c    ****                         print("Claw interrupt\n", 0);
 255:Src/main.c    ****                         debounce_and_grab(&enc_pid);
 256:Src/main.c    ****                         break;
 257:Src/main.c    ****                     }
 258:Src/main.c    ****                     drive_straight(&enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 6


 259:Src/main.c    ****                 }
 260:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 261:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 262:Src/main.c    ****                 print("ewok\n", 0);
 263:Src/main.c    ****             }
 264:Src/main.c    ****         }
 265:Src/main.c    ****         /* 
 266:Src/main.c    ****         // Reset Claw Interrupt before driving forward
 267:Src/main.c    ****         print("MAIN | CLAW_INT UNFLAGGED\n", 0);
 268:Src/main.c    ****         while (HAL_GetTick()-start<3000)
 269:Src/main.c    ****         {
 270:Src/main.c    ****         drive_straight(&enc_pid);
 271:Src/main.c    ****         // If we trip claw interrupt, debounce and grab it
 272:Src/main.c    ****         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 273:Src/main.c    ****         {
 274:Src/main.c    ****         print("Claw interrupt\n", 0);
 275:Src/main.c    ****         if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 276:Src/main.c    ****         }
 277:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 278:Src/main.c    ****         {
 279:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 280:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 281:Src/main.c    ****         print("Edge left triggered", 0);
 282:Src/main.c    ****         turn_deg(30);
 283:Src/main.c    ****         }
 284:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 285:Src/main.c    ****         print("Edge right triggered", 0);
 286:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 287:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 288:Src/main.c    ****         turn_deg(-30);
 289:Src/main.c    ****         }
 290:Src/main.c    ****         }
 291:Src/main.c    **** 
 292:Src/main.c    ****         }
 293:Src/main.c    ****         else
 294:Src/main.c    ****         {
 295:Src/main.c    **** 
 296:Src/main.c    **** */
 297:Src/main.c    ****         /*
 298:Src/main.c    ****          * Look for Ewok
 299:Src/main.c    ****          */
 300:Src/main.c    ****         // CLAW_INT_STATE = NOT_FLAGGED;
 301:Src/main.c    **** 
 302:Src/main.c    ****         // if (ewok_cnt == 4 || ewok_cnt == 5)
 303:Src/main.c    ****         // {
 304:Src/main.c    ****         //     if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 305:Src/main.c    ****         //     {
 306:Src/main.c    ****         //         drive_straight_time(&enc_pid, 0, RIGHT_SPEED - 100, 400);
 307:Src/main.c    ****         //         uint32_t temp_time = HAL_GetTick();
 308:Src/main.c    ****         //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 309:Src/main.c    ****         //     }
 310:Src/main.c    ****         //     else if (EDGE_LEFT_STATE == NOT_FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 311:Src/main.c    ****         //     {
 312:Src/main.c    ****         //         drive_straight_time(&enc_pid, LEFT_SPEED - 100, 0, 400);
 313:Src/main.c    ****         //         uint32_t temp_time = HAL_GetTick();
 314:Src/main.c    ****         //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 315:Src/main.c    ****         //     }
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 7


 316:Src/main.c    ****         // }
 317:Src/main.c    ****         /*
 318:Src/main.c    **** 
 319:Src/main.c    ****            drive_straight_time(&enc_pid, LEFT_SPEED - 100, RIGHT_SPEED - 100, 500);
 320:Src/main.c    ****            print("ewok\n", 0);
 321:Src/main.c    ****            if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 322:Src/main.c    ****            {
 323:Src/main.c    ****            print("Claw interrupt\n", 0);
 324:Src/main.c    ****            if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 325:Src/main.c    ****            }
 326:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 327:Src/main.c    ****            {
 328:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 329:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 330:Src/main.c    ****            print("Edge left triggered", 0);
 331:Src/main.c    ****            turn_deg(30);
 332:Src/main.c    ****            }
 333:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 334:Src/main.c    ****            print("Edge right triggered", 0);
 335:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 336:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 337:Src/main.c    ****            turn_deg(-30);
 338:Src/main.c    ****            }
 339:Src/main.c    ****            uint32_t temp_time = HAL_GetTick();
 340:Src/main.c    ****            */
 341:Src/main.c    ****         /*
 342:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 343:Src/main.c    ****            {
 344:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 345:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 346:Src/main.c    ****            print("Edge left triggered", 0);
 347:Src/main.c    ****            turn_deg(30);
 348:Src/main.c    ****            }
 349:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 350:Src/main.c    ****            print("Edge right triggered", 0);
 351:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 352:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 353:Src/main.c    ****            turn_deg(-30);
 354:Src/main.c    ****            }
 355:Src/main.c    ****            */
 356:Src/main.c    **** 
 357:Src/main.c    ****         /* USER CODE END WHILE */
 358:Src/main.c    **** 
 359:Src/main.c    ****         /* USER CODE BEGIN 3 */
 360:Src/main.c    ****     }
 361:Src/main.c    ****     /* USER CODE END 3 */
 362:Src/main.c    **** 
 363:Src/main.c    **** }
 364:Src/main.c    **** 
 365:Src/main.c    **** /**
 366:Src/main.c    ****  * @brief System Clock Configuration
 367:Src/main.c    ****  * @retval None
 368:Src/main.c    ****  */
 369:Src/main.c    **** void SystemClock_Config(void)
 370:Src/main.c    **** {
 371:Src/main.c    **** 
 372:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 8


 373:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 374:Src/main.c    **** 
 375:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 376:Src/main.c    ****     */
 377:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 378:Src/main.c    **** 
 379:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 380:Src/main.c    **** 
 381:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 382:Src/main.c    ****     */
 383:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 384:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 385:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 386:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 387:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 388:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 389:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 390:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 391:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 392:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 393:Src/main.c    ****     {
 394:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 395:Src/main.c    ****     }
 396:Src/main.c    **** 
 397:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 398:Src/main.c    ****     */
 399:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 400:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 401:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 402:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 403:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 404:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 405:Src/main.c    **** 
 406:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 407:Src/main.c    ****     {
 408:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 409:Src/main.c    ****     }
 410:Src/main.c    **** 
 411:Src/main.c    ****     /**Configure the Systick interrupt time 
 412:Src/main.c    ****     */
 413:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 414:Src/main.c    **** 
 415:Src/main.c    ****     /**Configure the Systick 
 416:Src/main.c    ****     */
 417:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 418:Src/main.c    **** 
 419:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 420:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 421:Src/main.c    **** }
 422:Src/main.c    **** 
 423:Src/main.c    **** /* USER CODE BEGIN 4 */
 424:Src/main.c    **** 
 425:Src/main.c    **** void square_edge(PID_t *enc_pid)
 426:Src/main.c    **** {
 427:Src/main.c    ****     while (1)
 428:Src/main.c    ****     {
 429:Src/main.c    ****         drive_straight(enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 9


 430:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_Read
 431:Src/main.c    ****         {
 432:Src/main.c    ****             break;
 433:Src/main.c    ****         }
 434:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET || HAL_GPIO
 435:Src/main.c    ****         {
 436:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 437:Src/main.c    ****             {
 438:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 439:Src/main.c    ****             }
 440:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET)
 441:Src/main.c    ****             {
 442:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 443:Src/main.c    ****             }
 444:Src/main.c    ****         }
 445:Src/main.c    ****     }
 446:Src/main.c    **** }
 447:Src/main.c    **** 
 448:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis)
 449:Src/main.c    **** {
 450:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 451:Src/main.c    ****     char msg[50] = "";
 452:Src/main.c    ****     uint8_t count = 0; // FIXME: Remove to speed up
 453:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 454:Src/main.c    ****     {
 455:Src/main.c    ****         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 456:Src/main.c    ****         {
 457:Src/main.c    ****             print("Claw interrupt\n", 0);
 458:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 459:Src/main.c    ****         }
 460:Src/main.c    ****         /*
 461:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 462:Src/main.c    ****            {
 463:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 464:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 465:Src/main.c    ****            print("Edge left triggered", 0);
 466:Src/main.c    ****            turn_deg(30);
 467:Src/main.c    ****            }
 468:Src/main.c    ****            else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 469:Src/main.c    ****            print("Edge right triggered", 0);
 470:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_1, 0);
 471:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 472:Src/main.c    ****            turn_deg(-30);
 473:Src/main.c    ****            }
 474:Src/main.c    ****            */
 475:Src/main.c    ****         else 
 476:Src/main.c    ****         {
 477:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, lspeed);
 478:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 479:Src/main.c    ****             drive_straight(enc_pid);
 480:Src/main.c    **** 
 481:Src/main.c    ****         }
 482:Src/main.c    ****     }
 483:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 484:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 485:Src/main.c    **** }
 486:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 10


 487:Src/main.c    **** void drive_straight(PID_t *enc_pid)
 488:Src/main.c    **** {
 489:Src/main.c    ****     encoder_pid(enc_pid);
 490:Src/main.c    ****     HAL_Delay(10);
 491:Src/main.c    **** 
 492:Src/main.c    **** }
 493:Src/main.c    **** 
 494:Src/main.c    **** /*
 495:Src/main.c    ****  * Assume motors are not on.
 496:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 497:Src/main.c    ****  */
 498:Src/main.c    **** void turn()
 499:Src/main.c    **** {
 500:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 501:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 502:Src/main.c    ****     HAL_Delay(500);
 503:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 504:Src/main.c    ****     //double r = atan(1.57*tan()/())
 505:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 506:Src/main.c    ****     TIM4->CNT = 0;
 507:Src/main.c    ****     TIM5->CNT = 0;
 508:Src/main.c    **** 
 509:Src/main.c    ****     char msg[18] = "";
 510:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", (int)counts);
 511:Src/main.c    ****     print(msg, 0);
 512:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 513:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 514:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 515:Src/main.c    ****     print(msg, 2);
 516:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %lu\n", 2 * adc_values[5]);
 517:Src/main.c    ****     print(msg, 0);
 518:Src/main.c    **** 
 519:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
 520:Src/main.c    ****     {
 521:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 522:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 523:Src/main.c    ****         while (TIM5->CNT < counts)
 524:Src/main.c    ****         {
 525:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 526:Src/main.c    ****             // print(msg, 4);
 527:Src/main.c    ****         }
 528:Src/main.c    ****         sprintf(msg, "TURN | TIM5->CNT: %lu\n", TIM5->CNT);
 529:Src/main.c    ****         print(msg, 4);
 530:Src/main.c    ****         TIM5->CNT = 0;
 531:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 532:Src/main.c    ****     }
 533:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 534:Src/main.c    ****     {
 535:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 536:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 537:Src/main.c    ****         while (TIM4->CNT < counts)
 538:Src/main.c    ****         {
 539:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 540:Src/main.c    ****             // print(msg, 4);
 541:Src/main.c    ****         }
 542:Src/main.c    ****         sprintf(msg, "TURN | TIM4->CNT: %lu\n", TIM4->CNT);
 543:Src/main.c    ****         print(msg, 4);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 11


 544:Src/main.c    ****         TIM4->CNT = 0;
 545:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 546:Src/main.c    ****     }
 547:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 548:Src/main.c    **** }
 549:Src/main.c    **** 
 550:Src/main.c    **** /*
 551:Src/main.c    ****  * Assume motors are not on.
 552:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 553:Src/main.c    ****  */
 554:Src/main.c    **** void turn_deg(int16_t deg)
 555:Src/main.c    **** {
 556:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 557:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 558:Src/main.c    ****     if (counts < 0) counts = -counts;
 559:Src/main.c    ****     TIM4->CNT = 0;
 560:Src/main.c    ****     TIM5->CNT = 0;
 561:Src/main.c    **** 
 562:Src/main.c    ****     char msg[50] = "";
 563:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 564:Src/main.c    ****     print(msg, 0);
 565:Src/main.c    **** 
 566:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 567:Src/main.c    ****     {
 568:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 569:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 570:Src/main.c    ****         while (TIM4->CNT < counts)
 571:Src/main.c    ****         {
 572:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 573:Src/main.c    ****             // print(msg, 4);
 574:Src/main.c    ****         }
 575:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM5->CNT: %lu\n", TIM5->CNT);
 576:Src/main.c    ****         print(msg, 4);
 577:Src/main.c    ****         TIM5->CNT = 0;
 578:Src/main.c    ****     }
 579:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 580:Src/main.c    ****     {
 581:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 582:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 583:Src/main.c    ****         while (TIM5->CNT < counts)
 584:Src/main.c    ****         {
 585:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 586:Src/main.c    ****             // print(msg, 4);
 587:Src/main.c    ****         }
 588:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM4->CNT: %lu\n", TIM4->CNT);
 589:Src/main.c    ****         print(msg, 4);
 590:Src/main.c    ****         TIM4->CNT = 0;
 591:Src/main.c    ****     }
 592:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 593:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 594:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 595:Src/main.c    **** }
 596:Src/main.c    **** 
 597:Src/main.c    **** /**
 598:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 599:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 600:Src/main.c    ****  *
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 12


 601:Src/main.c    ****  * @param adc_val, value read from ADC.
 602:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 603:Src/main.c    ****  **/
 604:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 605:Src/main.c    **** {
 606:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
 607:Src/main.c    **** }
 608:Src/main.c    **** 
 609:Src/main.c    **** // Sampling frequency: 72e6/2/(495*2)
 610:Src/main.c    **** void alarm_detect() {
 611:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 612:Src/main.c    ****     HAL_Delay(500);
 613:Src/main.c    ****     char msg[20]="";
 614:Src/main.c    ****     int count = 0;
 615:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 10);
 616:Src/main.c    ****     HAL_Delay(100);
 617:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 10);
 618:Src/main.c    ****     HAL_Delay(100);
 619:Src/main.c    ****     print("worcs", 0);
 620:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 621:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 622:Src/main.c    **** }
 623:Src/main.c    **** 
 624:Src/main.c    **** /**
 625:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 626:Src/main.c    ****  * @param msg, string to print
 627:Src/main.c    ****  * @param row, row to print msg to
 628:Src/main.c    ****  */
 629:Src/main.c    **** void print(char *msg, int row)
 630:Src/main.c    **** {
 631:Src/main.c    ****     // if (row == 0)
 632:Src/main.c    ****     // {
 633:Src/main.c    ****     //     ssd1306_Fill(Black);
 634:Src/main.c    ****     // }
 635:Src/main.c    ****     // ssd1306_SetCursor(0, row * 10);
 636:Src/main.c    ****     // ssd1306_WriteString(msg, Font_7x10, White);
 637:Src/main.c    ****     // ssd1306_UpdateScreen();
 638:Src/main.c    ****     HAL_UART_Transmit(&huart6, (uint8_t *) msg, strlen(msg), 100);
 639:Src/main.c    **** }
 640:Src/main.c    **** 
 641:Src/main.c    **** PID_t menu()
 642:Src/main.c    **** {
 643:Src/main.c    ****     print("Starting\n", 0);
 644:Src/main.c    ****     char msg[20] = "";
 645:Src/main.c    ****     int pid_select = 0;
 646:Src/main.c    ****     uint32_t values[2] = {0, 0};
 647:Src/main.c    ****     while (1)
 648:Src/main.c    ****     {
 649:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 650:Src/main.c    ****         {
 651:Src/main.c    ****             sprintf(msg, "%lu\n", values[pid_select]);
 652:Src/main.c    ****             print(msg, 0);
 653:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 654:Src/main.c    ****             {
 655:Src/main.c    ****                 values[pid_select]++;
 656:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
 657:Src/main.c    ****                 print(msg, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 13


 658:Src/main.c    ****                 HAL_Delay(500);
 659:Src/main.c    ****             }
 660:Src/main.c    ****             ++pid_select;
 661:Src/main.c    ****         }
 662:Src/main.c    ****         if (pid_select == 2)
 663:Src/main.c    ****             break;
 664:Src/main.c    ****     }
 665:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 666:Src/main.c    **** }
 667:Src/main.c    **** 
 668:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 669:Src/main.c    **** {
 670:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 671:Src/main.c    ****     {
 672:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 673:Src/main.c    ****     }
 674:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 675:Src/main.c    ****     {
 676:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 677:Src/main.c    ****     }
 678:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 679:Src/main.c    ****     {
 680:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 681:Src/main.c    ****     }
 682:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 683:Src/main.c    ****     {
 684:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 685:Src/main.c    ****     }
 686:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed > 1000 ? 1000 : speed);
 687:Src/main.c    **** }
 688:Src/main.c    **** 
 689:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 690:Src/main.c    **** {
  29              		.loc 1 690 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 38B5     		push	{r3, r4, r5, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 3, -16
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 14, -4
 691:Src/main.c    ****     /* Get error */
 692:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
  41              		.loc 1 692 0
  42 0002 0E4B     		ldr	r3, .L5
  43 0004 5C6A     		ldr	r4, [r3, #36]
  44              	.LVL1:
 693:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
  45              		.loc 1 693 0
  46 0006 03F58063 		add	r3, r3, #1024
  47 000a 5D6A     		ldr	r5, [r3, #36]
  48              	.LVL2:
 694:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 14


  49              		.loc 1 694 0
  50 000c 631B     		subs	r3, r4, r5
  51 000e 0361     		str	r3, [r0, #16]
 695:Src/main.c    **** 
 696:Src/main.c    ****     /* Get gain */
 697:Src/main.c    ****     // Gain <0 for ride side faster
 698:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
  52              		.loc 1 698 0
  53 0010 FFF7FEFF 		bl	pid_GetGain
  54              	.LVL3:
 699:Src/main.c    **** 
 700:Src/main.c    ****     /* Set Motor Speeds*/
 701:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 702:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 703:Src/main.c    ****     if (gain < 0)
 704:Src/main.c    ****     {
 705:Src/main.c    ****         lspeed -= gain;
 706:Src/main.c    ****     }
 707:Src/main.c    ****     else if (gain > 0)
 708:Src/main.c    ****     {
 709:Src/main.c    ****         rspeed += gain;
 710:Src/main.c    ****     }
 711:Src/main.c    **** 
 712:Src/main.c    ****     // char msg[18] = "";
 713:Src/main.c    ****     // sprintf(msg, "LS: %lu", lspeed);
 714:Src/main.c    ****     // print(msg, 0);
 715:Src/main.c    ****     // sprintf(msg, "RS: %lu", rspeed);
 716:Src/main.c    ****     // print(msg, 1);
 717:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, lspeed);
 718:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, rspeed);
 719:Src/main.c    **** 
 720:Src/main.c    ****     /* Prevent weird overflow shit */
 721:Src/main.c    ****     if (lcnt > 60000 || rcnt > 60000)
  55              		.loc 1 721 0
  56 0014 4EF66023 		movw	r3, #60000
  57 0018 9C42     		cmp	r4, r3
  58 001a 01D8     		bhi	.L2
  59              		.loc 1 721 0 is_stmt 0 discriminator 1
  60 001c 9D42     		cmp	r5, r3
  61 001e 0CD9     		bls	.L1
  62              	.L2:
 722:Src/main.c    ****     {
 723:Src/main.c    ****         TIM4->CNT -= 50000;
  63              		.loc 1 723 0 is_stmt 1
  64 0020 064A     		ldr	r2, .L5
  65 0022 536A     		ldr	r3, [r2, #36]
  66 0024 A3F54343 		sub	r3, r3, #49920
  67 0028 503B     		subs	r3, r3, #80
  68 002a 5362     		str	r3, [r2, #36]
  69              	.LVL4:
 724:Src/main.c    ****         TIM5->CNT -= 50000;
  70              		.loc 1 724 0
  71 002c 02F58062 		add	r2, r2, #1024
  72 0030 536A     		ldr	r3, [r2, #36]
  73 0032 A3F54343 		sub	r3, r3, #49920
  74 0036 503B     		subs	r3, r3, #80
  75 0038 5362     		str	r3, [r2, #36]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 15


  76              	.L1:
  77 003a 38BD     		pop	{r3, r4, r5, pc}
  78              	.LVL5:
  79              	.L6:
  80              		.align	2
  81              	.L5:
  82 003c 00080040 		.word	1073743872
  83              		.cfi_endproc
  84              	.LFE136:
  86              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  87              		.align	2
  88              		.global	HAL_ADC_ConvCpltCallback
  89              		.thumb
  90              		.thumb_func
  92              	HAL_ADC_ConvCpltCallback:
  93              	.LFB123:
 104:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  94              		.loc 1 104 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL6:
  99 0000 08B5     		push	{r3, lr}
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 3, -8
 103              		.cfi_offset 14, -4
 105:Src/main.c    **** }
 104              		.loc 1 105 0
 105 0002 0348     		ldr	r0, .L9
 106              	.LVL7:
 107 0004 0349     		ldr	r1, .L9+4
 108 0006 4FF40052 		mov	r2, #8192
 109 000a FFF7FEFF 		bl	memcpy
 110              	.LVL8:
 111 000e 08BD     		pop	{r3, pc}
 112              	.L10:
 113              		.align	2
 114              	.L9:
 115 0010 00000000 		.word	adc_values
 116 0014 00000000 		.word	dma_buffer
 117              		.cfi_endproc
 118              	.LFE123:
 120              		.section	.text.drive_straight,"ax",%progbits
 121              		.align	2
 122              		.global	drive_straight
 123              		.thumb
 124              		.thumb_func
 126              	drive_straight:
 127              	.LFB128:
 488:Src/main.c    ****     encoder_pid(enc_pid);
 128              		.loc 1 488 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              	.LVL9:
 133 0000 08B5     		push	{r3, lr}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 16


 134              	.LCFI2:
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 3, -8
 137              		.cfi_offset 14, -4
 489:Src/main.c    ****     HAL_Delay(10);
 138              		.loc 1 489 0
 139 0002 FFF7FEFF 		bl	encoder_pid
 140              	.LVL10:
 490:Src/main.c    **** 
 141              		.loc 1 490 0
 142 0006 0A20     		movs	r0, #10
 143 0008 FFF7FEFF 		bl	HAL_Delay
 144              	.LVL11:
 145 000c 08BD     		pop	{r3, pc}
 146              		.cfi_endproc
 147              	.LFE128:
 149              		.global	__aeabi_ui2d
 150              		.global	__aeabi_dmul
 151              		.global	__aeabi_dsub
 152              		.global	__aeabi_d2f
 153 000e 00BF     		.section	.text.calculate_heading,"ax",%progbits
 154              		.align	2
 155              		.global	calculate_heading
 156              		.thumb
 157              		.thumb_func
 159              	calculate_heading:
 160              	.LFB131:
 605:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
 161              		.loc 1 605 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL12:
 166 0000 08B5     		push	{r3, lr}
 167              	.LCFI3:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 3, -8
 170              		.cfi_offset 14, -4
 606:Src/main.c    **** }
 171              		.loc 1 606 0
 172 0002 FFF7FEFF 		bl	__aeabi_ui2d
 173              	.LVL13:
 174 0006 0022     		movs	r2, #0
 175 0008 054B     		ldr	r3, .L15
 176 000a FFF7FEFF 		bl	__aeabi_dmul
 177              	.LVL14:
 178 000e 0022     		movs	r2, #0
 179 0010 044B     		ldr	r3, .L15+4
 180 0012 FFF7FEFF 		bl	__aeabi_dsub
 181              	.LVL15:
 182 0016 FFF7FEFF 		bl	__aeabi_d2f
 183              	.LVL16:
 607:Src/main.c    **** 
 184              		.loc 1 607 0
 185 001a 00EE100A 		fmsr	s0, r0
 186 001e 08BD     		pop	{r3, pc}
 187              	.L16:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 17


 188              		.align	2
 189              	.L15:
 190 0020 0000303F 		.word	1060110336
 191 0024 0000E03F 		.word	1071644672
 192              		.cfi_endproc
 193              	.LFE131:
 195              		.section	.text.print,"ax",%progbits
 196              		.align	2
 197              		.global	print
 198              		.thumb
 199              		.thumb_func
 201              	print:
 202              	.LFB133:
 630:Src/main.c    ****     // if (row == 0)
 203              		.loc 1 630 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              	.LVL17:
 208 0000 10B5     		push	{r4, lr}
 209              	.LCFI4:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 4, -8
 212              		.cfi_offset 14, -4
 213 0002 0446     		mov	r4, r0
 638:Src/main.c    **** }
 214              		.loc 1 638 0
 215 0004 FFF7FEFF 		bl	strlen
 216              	.LVL18:
 217 0008 82B2     		uxth	r2, r0
 218 000a 0348     		ldr	r0, .L19
 219 000c 2146     		mov	r1, r4
 220 000e 6423     		movs	r3, #100
 221 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 222              	.LVL19:
 223 0014 10BD     		pop	{r4, pc}
 224              	.LVL20:
 225              	.L20:
 226 0016 00BF     		.align	2
 227              	.L19:
 228 0018 00000000 		.word	huart6
 229              		.cfi_endproc
 230              	.LFE133:
 232              		.global	__aeabi_dcmplt
 233              		.global	__aeabi_dcmpgt
 234              		.section	.text.alarm_detect,"ax",%progbits
 235              		.align	2
 236              		.global	alarm_detect
 237              		.thumb
 238              		.thumb_func
 240              	alarm_detect:
 241              	.LFB132:
 610:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 242              		.loc 1 610 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 18


 246 0000 00B5     		push	{lr}
 247              	.LCFI5:
 248              		.cfi_def_cfa_offset 4
 249              		.cfi_offset 14, -4
 250 0002 83B0     		sub	sp, sp, #12
 251              	.LCFI6:
 252              		.cfi_def_cfa_offset 16
 611:Src/main.c    ****     HAL_Delay(500);
 253              		.loc 1 611 0
 254 0004 2148     		ldr	r0, .L25
 255 0006 2249     		ldr	r1, .L25+4
 256 0008 4FF40062 		mov	r2, #2048
 257 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 258              	.LVL21:
 612:Src/main.c    ****     char msg[20]="";
 259              		.loc 1 612 0
 260 0010 4FF4FA70 		mov	r0, #500
 261 0014 FFF7FEFF 		bl	HAL_Delay
 262              	.LVL22:
 263              	.L22:
 615:Src/main.c    ****     HAL_Delay(100);
 264              		.loc 1 615 0 discriminator 1
 265 0018 0023     		movs	r3, #0
 266 001a 0093     		str	r3, [sp]
 267 001c 1D48     		ldr	r0, .L25+8
 268 001e 48F60B61 		movw	r1, #36363
 269 0022 4FF47A72 		mov	r2, #1000
 270 0026 4FF40063 		mov	r3, #2048
 271 002a FFF7FEFF 		bl	goertzel
 272              	.LVL23:
 273 002e 51EC100B 		fmrrd	r0, r1, d0
 274 0032 0022     		movs	r2, #0
 275 0034 184B     		ldr	r3, .L25+12
 276 0036 FFF7FEFF 		bl	__aeabi_dcmplt
 277              	.LVL24:
 278 003a 0028     		cmp	r0, #0
 279 003c ECD1     		bne	.L22
 616:Src/main.c    ****     while (goertzel(adc_values, 36363, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 10);
 280              		.loc 1 616 0
 281 003e 6420     		movs	r0, #100
 282 0040 FFF7FEFF 		bl	HAL_Delay
 283              	.LVL25:
 284              	.L23:
 617:Src/main.c    ****     HAL_Delay(100);
 285              		.loc 1 617 0 discriminator 1
 286 0044 0023     		movs	r3, #0
 287 0046 0093     		str	r3, [sp]
 288 0048 1248     		ldr	r0, .L25+8
 289 004a 48F60B61 		movw	r1, #36363
 290 004e 4FF47A72 		mov	r2, #1000
 291 0052 4FF40063 		mov	r3, #2048
 292 0056 FFF7FEFF 		bl	goertzel
 293              	.LVL26:
 294 005a 51EC100B 		fmrrd	r0, r1, d0
 295 005e 0022     		movs	r2, #0
 296 0060 0D4B     		ldr	r3, .L25+12
 297 0062 FFF7FEFF 		bl	__aeabi_dcmpgt
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 19


 298              	.LVL27:
 299 0066 0028     		cmp	r0, #0
 300 0068 ECD1     		bne	.L23
 618:Src/main.c    ****     print("worcs", 0);
 301              		.loc 1 618 0
 302 006a 6420     		movs	r0, #100
 303 006c FFF7FEFF 		bl	HAL_Delay
 304              	.LVL28:
 619:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 305              		.loc 1 619 0
 306 0070 0A48     		ldr	r0, .L25+16
 307 0072 0021     		movs	r1, #0
 308 0074 FFF7FEFF 		bl	print
 309              	.LVL29:
 620:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 310              		.loc 1 620 0
 311 0078 0448     		ldr	r0, .L25
 312 007a FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 313              	.LVL30:
 621:Src/main.c    **** }
 314              		.loc 1 621 0
 315 007e 0022     		movs	r2, #0
 316 0080 074B     		ldr	r3, .L25+20
 317 0082 1A70     		strb	r2, [r3]
 622:Src/main.c    **** 
 318              		.loc 1 622 0
 319 0084 03B0     		add	sp, sp, #12
 320              	.LCFI7:
 321              		.cfi_def_cfa_offset 4
 322              		@ sp needed
 323 0086 5DF804FB 		ldr	pc, [sp], #4
 324              	.L26:
 325 008a 00BF     		.align	2
 326              	.L25:
 327 008c 00000000 		.word	hadc1
 328 0090 00000000 		.word	dma_buffer
 329 0094 00000000 		.word	adc_values
 330 0098 00002440 		.word	1076101120
 331 009c 00000000 		.word	.LC0
 332 00a0 00000000 		.word	IR_INT_STATE
 333              		.cfi_endproc
 334              	.LFE132:
 336              		.section	.text.menu,"ax",%progbits
 337              		.align	2
 338              		.global	menu
 339              		.thumb
 340              		.thumb_func
 342              	menu:
 343              	.LFB134:
 642:Src/main.c    ****     print("Starting\n", 0);
 344              		.loc 1 642 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 32
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              	.LVL31:
 349 0000 30B5     		push	{r4, r5, lr}
 350              	.LCFI8:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 20


 351              		.cfi_def_cfa_offset 12
 352              		.cfi_offset 4, -12
 353              		.cfi_offset 5, -8
 354              		.cfi_offset 14, -4
 355 0002 8BB0     		sub	sp, sp, #44
 356              	.LCFI9:
 357              		.cfi_def_cfa_offset 56
 358 0004 0546     		mov	r5, r0
 643:Src/main.c    ****     char msg[20] = "";
 359              		.loc 1 643 0
 360 0006 2548     		ldr	r0, .L33
 361              	.LVL32:
 362 0008 0021     		movs	r1, #0
 363 000a FFF7FEFF 		bl	print
 364              	.LVL33:
 644:Src/main.c    ****     int pid_select = 0;
 365              		.loc 1 644 0
 366 000e 0024     		movs	r4, #0
 367 0010 0594     		str	r4, [sp, #20]
 368 0012 0694     		str	r4, [sp, #24]
 369 0014 0794     		str	r4, [sp, #28]
 370 0016 0894     		str	r4, [sp, #32]
 371 0018 0994     		str	r4, [sp, #36]
 372              	.LVL34:
 646:Src/main.c    ****     while (1)
 373              		.loc 1 646 0
 374 001a 0394     		str	r4, [sp, #12]
 375 001c 0494     		str	r4, [sp, #16]
 376              	.LVL35:
 377              	.L31:
 649:Src/main.c    ****         {
 378              		.loc 1 649 0
 379 001e 2048     		ldr	r0, .L33+4
 380 0020 4FF40051 		mov	r1, #8192
 381 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 382              	.LVL36:
 383 0028 48BB     		cbnz	r0, .L28
 651:Src/main.c    ****             print(msg, 0);
 384              		.loc 1 651 0
 385 002a 05A8     		add	r0, sp, #20
 386 002c 1D49     		ldr	r1, .L33+8
 387 002e 0AAB     		add	r3, sp, #40
 388 0030 03EB8403 		add	r3, r3, r4, lsl #2
 389 0034 53F81C2C 		ldr	r2, [r3, #-28]
 390 0038 FFF7FEFF 		bl	sprintf
 391              	.LVL37:
 652:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 392              		.loc 1 652 0
 393 003c 05A8     		add	r0, sp, #20
 394 003e 0021     		movs	r1, #0
 395 0040 FFF7FEFF 		bl	print
 396              	.LVL38:
 653:Src/main.c    ****             {
 397              		.loc 1 653 0
 398 0044 13E0     		b	.L29
 399              	.L30:
 655:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 21


 400              		.loc 1 655 0
 401 0046 0AAB     		add	r3, sp, #40
 402 0048 03EB8403 		add	r3, r3, r4, lsl #2
 403 004c 53F81C2C 		ldr	r2, [r3, #-28]
 404 0050 0132     		adds	r2, r2, #1
 405 0052 43F81C2C 		str	r2, [r3, #-28]
 656:Src/main.c    ****                 print(msg, 0);
 406              		.loc 1 656 0
 407 0056 05A8     		add	r0, sp, #20
 408 0058 1249     		ldr	r1, .L33+8
 409 005a FFF7FEFF 		bl	sprintf
 410              	.LVL39:
 657:Src/main.c    ****                 HAL_Delay(500);
 411              		.loc 1 657 0
 412 005e 05A8     		add	r0, sp, #20
 413 0060 0021     		movs	r1, #0
 414 0062 FFF7FEFF 		bl	print
 415              	.LVL40:
 658:Src/main.c    ****             }
 416              		.loc 1 658 0
 417 0066 4FF4FA70 		mov	r0, #500
 418 006a FFF7FEFF 		bl	HAL_Delay
 419              	.LVL41:
 420              	.L29:
 653:Src/main.c    ****             {
 421              		.loc 1 653 0
 422 006e 0C48     		ldr	r0, .L33+4
 423 0070 4FF40051 		mov	r1, #8192
 424 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 425              	.LVL42:
 426 0078 0028     		cmp	r0, #0
 427 007a E4D0     		beq	.L30
 660:Src/main.c    ****         }
 428              		.loc 1 660 0
 429 007c 0134     		adds	r4, r4, #1
 430              	.LVL43:
 431              	.L28:
 662:Src/main.c    ****             break;
 432              		.loc 1 662 0
 433 007e 022C     		cmp	r4, #2
 434 0080 CDD1     		bne	.L31
 665:Src/main.c    **** }
 435              		.loc 1 665 0
 436 0082 BDF80C10 		ldrh	r1, [sp, #12]
 437 0086 BDF81020 		ldrh	r2, [sp, #16]
 438 008a 0123     		movs	r3, #1
 439 008c 0093     		str	r3, [sp]
 440 008e 0193     		str	r3, [sp, #4]
 441 0090 2846     		mov	r0, r5
 442 0092 FFF7FEFF 		bl	pid_Init
 443              	.LVL44:
 666:Src/main.c    **** 
 444              		.loc 1 666 0
 445 0096 2846     		mov	r0, r5
 446 0098 0BB0     		add	sp, sp, #44
 447              	.LCFI10:
 448              		.cfi_def_cfa_offset 12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 22


 449              		@ sp needed
 450 009a 30BD     		pop	{r4, r5, pc}
 451              	.LVL45:
 452              	.L34:
 453              		.align	2
 454              	.L33:
 455 009c 08000000 		.word	.LC1
 456 00a0 00080240 		.word	1073874944
 457 00a4 14000000 		.word	.LC2
 458              		.cfi_endproc
 459              	.LFE134:
 461              		.section	.text.set_motor_speed,"ax",%progbits
 462              		.align	2
 463              		.global	set_motor_speed
 464              		.thumb
 465              		.thumb_func
 467              	set_motor_speed:
 468              	.LFB135:
 669:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 469              		.loc 1 669 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473              		@ link register save eliminated.
 474              	.LVL46:
 670:Src/main.c    ****     {
 475              		.loc 1 670 0
 476 0000 0346     		mov	r3, r0
 477 0002 18B9     		cbnz	r0, .L36
 672:Src/main.c    ****     }
 478              		.loc 1 672 0
 479 0004 114A     		ldr	r2, .L40
 480 0006 1268     		ldr	r2, [r2]
 481 0008 9063     		str	r0, [r2, #56]
 482 000a 13E0     		b	.L37
 483              	.L36:
 674:Src/main.c    ****     {
 484              		.loc 1 674 0
 485 000c 0428     		cmp	r0, #4
 486 000e 04D1     		bne	.L38
 676:Src/main.c    ****     }
 487              		.loc 1 676 0
 488 0010 0E4A     		ldr	r2, .L40
 489 0012 1268     		ldr	r2, [r2]
 490 0014 0020     		movs	r0, #0
 491              	.LVL47:
 492 0016 5063     		str	r0, [r2, #52]
 493 0018 0CE0     		b	.L37
 494              	.LVL48:
 495              	.L38:
 678:Src/main.c    ****     {
 496              		.loc 1 678 0
 497 001a 0828     		cmp	r0, #8
 498 001c 04D1     		bne	.L39
 680:Src/main.c    ****     }
 499              		.loc 1 680 0
 500 001e 0B4A     		ldr	r2, .L40
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 23


 501 0020 1268     		ldr	r2, [r2]
 502 0022 0020     		movs	r0, #0
 503              	.LVL49:
 504 0024 1064     		str	r0, [r2, #64]
 505 0026 05E0     		b	.L37
 506              	.LVL50:
 507              	.L39:
 682:Src/main.c    ****     {
 508              		.loc 1 682 0
 509 0028 0C28     		cmp	r0, #12
 510 002a 03D1     		bne	.L37
 684:Src/main.c    ****     }
 511              		.loc 1 684 0
 512 002c 074A     		ldr	r2, .L40
 513 002e 1268     		ldr	r2, [r2]
 514 0030 0020     		movs	r0, #0
 515              	.LVL51:
 516 0032 D063     		str	r0, [r2, #60]
 517              	.L37:
 686:Src/main.c    **** }
 518              		.loc 1 686 0
 519 0034 054A     		ldr	r2, .L40
 520 0036 1268     		ldr	r2, [r2]
 521 0038 3432     		adds	r2, r2, #52
 522 003a 9B08     		lsrs	r3, r3, #2
 523              	.LVL52:
 524 003c B1F57A7F 		cmp	r1, #1000
 525 0040 28BF     		it	cs
 526 0042 4FF47A71 		movcs	r1, #1000
 527              	.LVL53:
 528 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 529 004a 7047     		bx	lr
 530              	.L41:
 531              		.align	2
 532              	.L40:
 533 004c 00000000 		.word	htim1
 534              		.cfi_endproc
 535              	.LFE135:
 537              		.section	.text.square_edge,"ax",%progbits
 538              		.align	2
 539              		.global	square_edge
 540              		.thumb
 541              		.thumb_func
 543              	square_edge:
 544              	.LFB126:
 426:Src/main.c    ****     while (1)
 545              		.loc 1 426 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549              	.LVL54:
 550 0000 10B5     		push	{r4, lr}
 551              	.LCFI11:
 552              		.cfi_def_cfa_offset 8
 553              		.cfi_offset 4, -8
 554              		.cfi_offset 14, -4
 555 0002 0446     		mov	r4, r0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 24


 556              	.LVL55:
 557              	.L43:
 429:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_Read
 558              		.loc 1 429 0
 559 0004 2046     		mov	r0, r4
 560 0006 FFF7FEFF 		bl	drive_straight
 561              	.LVL56:
 430:Src/main.c    ****         {
 562              		.loc 1 430 0
 563 000a 1648     		ldr	r0, .L50
 564 000c 0421     		movs	r1, #4
 565 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 566              	.LVL57:
 567 0012 38B9     		cbnz	r0, .L44
 430:Src/main.c    ****         {
 568              		.loc 1 430 0 is_stmt 0 discriminator 1
 569 0014 00F18040 		add	r0, r0, #1073741824
 570 0018 00F50230 		add	r0, r0, #133120
 571 001c 0821     		movs	r1, #8
 572 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 573              	.LVL58:
 574 0022 E8B1     		cbz	r0, .L42
 575              	.L44:
 434:Src/main.c    ****         {
 576              		.loc 1 434 0 is_stmt 1
 577 0024 0F48     		ldr	r0, .L50
 578 0026 0421     		movs	r1, #4
 579 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 580              	.LVL59:
 581 002c 28B1     		cbz	r0, .L46
 434:Src/main.c    ****         {
 582              		.loc 1 434 0 is_stmt 0 discriminator 1
 583 002e 0E48     		ldr	r0, .L50+4
 584 0030 0821     		movs	r1, #8
 585 0032 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 586              	.LVL60:
 587 0036 0028     		cmp	r0, #0
 588 0038 E4D1     		bne	.L43
 589              	.L46:
 436:Src/main.c    ****             {
 590              		.loc 1 436 0 is_stmt 1
 591 003a 0A48     		ldr	r0, .L50
 592 003c 0421     		movs	r1, #4
 593 003e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 594              	.LVL61:
 595 0042 10B9     		cbnz	r0, .L48
 438:Src/main.c    ****             }
 596              		.loc 1 438 0
 597 0044 0146     		mov	r1, r0
 598 0046 FFF7FEFF 		bl	set_motor_speed
 599              	.LVL62:
 600              	.L48:
 440:Src/main.c    ****             {
 601              		.loc 1 440 0
 602 004a 0748     		ldr	r0, .L50+4
 603 004c 0821     		movs	r1, #8
 604 004e FFF7FEFF 		bl	HAL_GPIO_ReadPin
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 25


 605              	.LVL63:
 606 0052 0028     		cmp	r0, #0
 607 0054 D6D1     		bne	.L43
 442:Src/main.c    ****             }
 608              		.loc 1 442 0
 609 0056 0820     		movs	r0, #8
 610 0058 0021     		movs	r1, #0
 611 005a FFF7FEFF 		bl	set_motor_speed
 612              	.LVL64:
 613 005e D1E7     		b	.L43
 614              	.L42:
 615 0060 10BD     		pop	{r4, pc}
 616              	.LVL65:
 617              	.L51:
 618 0062 00BF     		.align	2
 619              	.L50:
 620 0064 000C0240 		.word	1073875968
 621 0068 00080240 		.word	1073874944
 622              		.cfi_endproc
 623              	.LFE126:
 625              		.global	__aeabi_f2d
 626              		.global	__aeabi_d2uiz
 627              		.section	.text.turn,"ax",%progbits
 628              		.align	2
 629              		.global	turn
 630              		.thumb
 631              		.thumb_func
 633              	turn:
 634              	.LFB129:
 499:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 635              		.loc 1 499 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 24
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 640              	.LCFI12:
 641              		.cfi_def_cfa_offset 20
 642              		.cfi_offset 4, -20
 643              		.cfi_offset 5, -16
 644              		.cfi_offset 6, -12
 645              		.cfi_offset 7, -8
 646              		.cfi_offset 14, -4
 647 0002 2DED028B 		fstmfdd	sp!, {d8}
 648              	.LCFI13:
 649              		.cfi_def_cfa_offset 28
 650              		.cfi_offset 80, -28
 651              		.cfi_offset 81, -24
 652 0006 87B0     		sub	sp, sp, #28
 653              	.LCFI14:
 654              		.cfi_def_cfa_offset 56
 500:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 655              		.loc 1 500 0
 656 0008 5948     		ldr	r0, .L63+16
 657 000a 5A49     		ldr	r1, .L63+20
 658 000c 4FF40062 		mov	r2, #2048
 659 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 660              	.LVL66:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 26


 502:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 661              		.loc 1 502 0
 662 0014 4FF4FA70 		mov	r0, #500
 663 0018 FFF7FEFF 		bl	HAL_Delay
 664              	.LVL67:
 503:Src/main.c    ****     //double r = atan(1.57*tan()/())
 665              		.loc 1 503 0
 666 001c 564E     		ldr	r6, .L63+24
 667 001e 7069     		ldr	r0, [r6, #20]
 668 0020 4000     		lsls	r0, r0, #1
 669 0022 FFF7FEFF 		bl	calculate_heading
 670              	.LVL68:
 671 0026 B0EE408A 		fcpys	s16, s0
 672              	.LVL69:
 505:Src/main.c    ****     TIM4->CNT = 0;
 673              		.loc 1 505 0
 674 002a F0EEC07A 		fabss	s15, s0
 675 002e 17EE900A 		fmrs	r0, s15
 676 0032 FFF7FEFF 		bl	__aeabi_f2d
 677              	.LVL70:
 678 0036 0022     		movs	r2, #0
 679 0038 504B     		ldr	r3, .L63+28
 680 003a FFF7FEFF 		bl	__aeabi_dmul
 681              	.LVL71:
 682 003e FFF7FEFF 		bl	__aeabi_d2uiz
 683              	.LVL72:
 684 0042 85B2     		uxth	r5, r0
 685              	.LVL73:
 506:Src/main.c    ****     TIM5->CNT = 0;
 686              		.loc 1 506 0
 687 0044 0024     		movs	r4, #0
 688 0046 4E4B     		ldr	r3, .L63+32
 689 0048 5C62     		str	r4, [r3, #36]
 507:Src/main.c    **** 
 690              		.loc 1 507 0
 691 004a 03F58063 		add	r3, r3, #1024
 692 004e 5C62     		str	r4, [r3, #36]
 509:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", (int)counts);
 693              		.loc 1 509 0
 694 0050 0194     		str	r4, [sp, #4]
 695 0052 0294     		str	r4, [sp, #8]
 696 0054 0394     		str	r4, [sp, #12]
 697 0056 0494     		str	r4, [sp, #16]
 698 0058 ADF81440 		strh	r4, [sp, #20]	@ movhi
 510:Src/main.c    ****     print(msg, 0);
 699              		.loc 1 510 0
 700 005c 01A8     		add	r0, sp, #4
 701 005e 4949     		ldr	r1, .L63+36
 702 0060 2A46     		mov	r2, r5
 703 0062 FFF7FEFF 		bl	sprintf
 704              	.LVL74:
 511:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 705              		.loc 1 511 0
 706 0066 01A8     		add	r0, sp, #4
 707 0068 2146     		mov	r1, r4
 708 006a FFF7FEFF 		bl	print
 709              	.LVL75:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 27


 512:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 710              		.loc 1 512 0
 711 006e BDEEC87A 		ftosizs	s14, s16
 712              	.LVL76:
 513:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 713              		.loc 1 513 0
 714 0072 F8EEC77A 		fsitos	s15, s14
 715 0076 78EE677A 		fsubs	s15, s16, s15
 716 007a DFED436A 		flds	s13, .L63+40
 717 007e 67EEA67A 		fmuls	s15, s15, s13
 718              	.LVL77:
 514:Src/main.c    ****     print(msg, 2);
 719              		.loc 1 514 0
 720 0082 01A8     		add	r0, sp, #4
 721 0084 4149     		ldr	r1, .L63+44
 722 0086 17EE102A 		fmrs	r2, s14	@ int
 723 008a FDEEE77A 		ftosizs	s15, s15
 724              	.LVL78:
 725 008e 17EE903A 		fmrs	r3, s15	@ int
 726 0092 FFF7FEFF 		bl	sprintf
 727              	.LVL79:
 515:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %lu\n", 2 * adc_values[5]);
 728              		.loc 1 515 0
 729 0096 01A8     		add	r0, sp, #4
 730 0098 0221     		movs	r1, #2
 731 009a FFF7FEFF 		bl	print
 732              	.LVL80:
 516:Src/main.c    ****     print(msg, 0);
 733              		.loc 1 516 0
 734 009e 7269     		ldr	r2, [r6, #20]
 735 00a0 01A8     		add	r0, sp, #4
 736 00a2 3B49     		ldr	r1, .L63+48
 737 00a4 5200     		lsls	r2, r2, #1
 738 00a6 FFF7FEFF 		bl	sprintf
 739              	.LVL81:
 517:Src/main.c    **** 
 740              		.loc 1 517 0
 741 00aa 01A8     		add	r0, sp, #4
 742 00ac 2146     		mov	r1, r4
 743 00ae FFF7FEFF 		bl	print
 744              	.LVL82:
 519:Src/main.c    ****     {
 745              		.loc 1 519 0
 746 00b2 18EE100A 		fmrs	r0, s16
 747 00b6 FFF7FEFF 		bl	__aeabi_f2d
 748              	.LVL83:
 749 00ba 0646     		mov	r6, r0
 750 00bc 0F46     		mov	r7, r1
 751 00be 28A3     		adr	r3, .L63
 752 00c0 D3E90023 		ldrd	r2, [r3]
 753 00c4 FFF7FEFF 		bl	__aeabi_dcmplt
 754              	.LVL84:
 755 00c8 E8B1     		cbz	r0, .L61
 521:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 756              		.loc 1 521 0
 757 00ca 2046     		mov	r0, r4
 758 00cc 2146     		mov	r1, r4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 28


 759 00ce FFF7FEFF 		bl	set_motor_speed
 760              	.LVL85:
 522:Src/main.c    ****         while (TIM5->CNT < counts)
 761              		.loc 1 522 0
 762 00d2 0820     		movs	r0, #8
 763 00d4 2F4B     		ldr	r3, .L63+52
 764 00d6 1988     		ldrh	r1, [r3]
 765 00d8 FFF7FEFF 		bl	set_motor_speed
 766              	.LVL86:
 767              	.L55:
 523:Src/main.c    ****         {
 768              		.loc 1 523 0 discriminator 1
 769 00dc 2E4B     		ldr	r3, .L63+56
 770 00de 5B6A     		ldr	r3, [r3, #36]
 771 00e0 AB42     		cmp	r3, r5
 772 00e2 FBD3     		bcc	.L55
 528:Src/main.c    ****         print(msg, 4);
 773              		.loc 1 528 0
 774 00e4 2C4C     		ldr	r4, .L63+56
 775 00e6 626A     		ldr	r2, [r4, #36]
 776 00e8 01A8     		add	r0, sp, #4
 777 00ea 2C49     		ldr	r1, .L63+60
 778 00ec FFF7FEFF 		bl	sprintf
 779              	.LVL87:
 529:Src/main.c    ****         TIM5->CNT = 0;
 780              		.loc 1 529 0
 781 00f0 01A8     		add	r0, sp, #4
 782 00f2 0421     		movs	r1, #4
 783 00f4 FFF7FEFF 		bl	print
 784              	.LVL88:
 530:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 785              		.loc 1 530 0
 786 00f8 0020     		movs	r0, #0
 787 00fa 6062     		str	r0, [r4, #36]
 531:Src/main.c    ****     }
 788              		.loc 1 531 0
 789 00fc 284B     		ldr	r3, .L63+64
 790 00fe 1988     		ldrh	r1, [r3]
 791 0100 FFF7FEFF 		bl	set_motor_speed
 792              	.LVL89:
 793 0104 25E0     		b	.L56
 794              	.L61:
 533:Src/main.c    ****     {
 795              		.loc 1 533 0
 796 0106 3046     		mov	r0, r6
 797 0108 3946     		mov	r1, r7
 798 010a 17A3     		adr	r3, .L63+8
 799 010c D3E90023 		ldrd	r2, [r3]
 800 0110 FFF7FEFF 		bl	__aeabi_dcmpgt
 801              	.LVL90:
 802 0114 E8B1     		cbz	r0, .L56
 535:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 803              		.loc 1 535 0
 804 0116 0020     		movs	r0, #0
 805 0118 214B     		ldr	r3, .L63+64
 806 011a 1988     		ldrh	r1, [r3]
 807 011c FFF7FEFF 		bl	set_motor_speed
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 29


 808              	.LVL91:
 536:Src/main.c    ****         while (TIM4->CNT < counts)
 809              		.loc 1 536 0
 810 0120 0820     		movs	r0, #8
 811 0122 0021     		movs	r1, #0
 812 0124 FFF7FEFF 		bl	set_motor_speed
 813              	.LVL92:
 814              	.L58:
 537:Src/main.c    ****         {
 815              		.loc 1 537 0 discriminator 1
 816 0128 154B     		ldr	r3, .L63+32
 817 012a 5B6A     		ldr	r3, [r3, #36]
 818 012c AB42     		cmp	r3, r5
 819 012e FBD3     		bcc	.L58
 542:Src/main.c    ****         print(msg, 4);
 820              		.loc 1 542 0
 821 0130 134C     		ldr	r4, .L63+32
 822 0132 626A     		ldr	r2, [r4, #36]
 823 0134 01A8     		add	r0, sp, #4
 824 0136 1B49     		ldr	r1, .L63+68
 825 0138 FFF7FEFF 		bl	sprintf
 826              	.LVL93:
 543:Src/main.c    ****         TIM4->CNT = 0;
 827              		.loc 1 543 0
 828 013c 01A8     		add	r0, sp, #4
 829 013e 0421     		movs	r1, #4
 830 0140 FFF7FEFF 		bl	print
 831              	.LVL94:
 544:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 832              		.loc 1 544 0
 833 0144 0023     		movs	r3, #0
 834 0146 6362     		str	r3, [r4, #36]
 545:Src/main.c    ****     }
 835              		.loc 1 545 0
 836 0148 0820     		movs	r0, #8
 837 014a 124B     		ldr	r3, .L63+52
 838 014c 1988     		ldrh	r1, [r3]
 839 014e FFF7FEFF 		bl	set_motor_speed
 840              	.LVL95:
 841              	.L56:
 547:Src/main.c    **** }
 842              		.loc 1 547 0
 843 0152 0748     		ldr	r0, .L63+16
 844 0154 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 845              	.LVL96:
 548:Src/main.c    **** 
 846              		.loc 1 548 0
 847 0158 07B0     		add	sp, sp, #28
 848              	.LCFI15:
 849              		.cfi_def_cfa_offset 28
 850              		@ sp needed
 851 015a BDEC028B 		fldmfdd	sp!, {d8}
 852              	.LCFI16:
 853              		.cfi_restore 80
 854              		.cfi_restore 81
 855              		.cfi_def_cfa_offset 20
 856              	.LVL97:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 30


 857 015e F0BD     		pop	{r4, r5, r6, r7, pc}
 858              	.LVL98:
 859              	.L64:
 860              		.align	3
 861              	.L63:
 862 0160 7B14AE47 		.word	1202590843
 863 0164 E17AA4BF 		.word	-1079739679
 864 0168 7B14AE47 		.word	1202590843
 865 016c E17AA43F 		.word	1067743969
 866 0170 00000000 		.word	hadc1
 867 0174 00000000 		.word	dma_buffer
 868 0178 00000000 		.word	adc_values
 869 017c 00806140 		.word	1080131584
 870 0180 00080040 		.word	1073743872
 871 0184 1C000000 		.word	.LC3
 872 0188 00007A44 		.word	1148846080
 873 018c 30000000 		.word	.LC4
 874 0190 44000000 		.word	.LC5
 875 0194 00000000 		.word	.LANCHOR0
 876 0198 000C0040 		.word	1073744896
 877 019c 5C000000 		.word	.LC6
 878 01a0 00000000 		.word	.LANCHOR1
 879 01a4 74000000 		.word	.LC7
 880              		.cfi_endproc
 881              	.LFE129:
 883              		.global	__aeabi_i2d
 884              		.global	__aeabi_dadd
 885              		.global	__aeabi_d2iz
 886              		.section	.text.turn_deg,"ax",%progbits
 887              		.align	2
 888              		.global	turn_deg
 889              		.thumb
 890              		.thumb_func
 892              	turn_deg:
 893              	.LFB130:
 555:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 894              		.loc 1 555 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 56
 897              		@ frame_needed = 0, uses_anonymous_args = 0
 898              	.LVL99:
 899 0000 70B5     		push	{r4, r5, r6, lr}
 900              	.LCFI17:
 901              		.cfi_def_cfa_offset 16
 902              		.cfi_offset 4, -16
 903              		.cfi_offset 5, -12
 904              		.cfi_offset 6, -8
 905              		.cfi_offset 14, -4
 906 0002 8EB0     		sub	sp, sp, #56
 907              	.LCFI18:
 908              		.cfi_def_cfa_offset 72
 909 0004 0646     		mov	r6, r0
 556:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 910              		.loc 1 556 0
 911 0006 4248     		ldr	r0, .L72+8
 912              	.LVL100:
 913 0008 4249     		ldr	r1, .L72+12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 31


 914 000a 4FF40062 		mov	r2, #2048
 915 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 916              	.LVL101:
 557:Src/main.c    ****     if (counts < 0) counts = -counts;
 917              		.loc 1 557 0
 918 0012 A6F15A00 		sub	r0, r6, #90
 919 0016 FFF7FEFF 		bl	__aeabi_i2d
 920              	.LVL102:
 921 001a 3BA3     		adr	r3, .L72
 922 001c D3E90023 		ldrd	r2, [r3]
 923 0020 FFF7FEFF 		bl	__aeabi_dmul
 924              	.LVL103:
 925 0024 0022     		movs	r2, #0
 926 0026 3C4B     		ldr	r3, .L72+16
 927 0028 FFF7FEFF 		bl	__aeabi_dadd
 928              	.LVL104:
 929 002c FFF7FEFF 		bl	__aeabi_d2iz
 930              	.LVL105:
 931 0030 85B2     		uxth	r5, r0
 932              	.LVL106:
 558:Src/main.c    ****     TIM4->CNT = 0;
 933              		.loc 1 558 0
 934 0032 15F4004F 		tst	r5, #32768
 935 0036 01D0     		beq	.L66
 558:Src/main.c    ****     TIM4->CNT = 0;
 936              		.loc 1 558 0 is_stmt 0 discriminator 1
 937 0038 6D42     		negs	r5, r5
 938              	.LVL107:
 939 003a ADB2     		uxth	r5, r5
 940              	.LVL108:
 941              	.L66:
 559:Src/main.c    ****     TIM5->CNT = 0;
 942              		.loc 1 559 0 is_stmt 1
 943 003c 0024     		movs	r4, #0
 944 003e 374B     		ldr	r3, .L72+20
 945 0040 5C62     		str	r4, [r3, #36]
 560:Src/main.c    **** 
 946              		.loc 1 560 0
 947 0042 03F58063 		add	r3, r3, #1024
 948 0046 5C62     		str	r4, [r3, #36]
 562:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 949              		.loc 1 562 0
 950 0048 0194     		str	r4, [sp, #4]
 951 004a 0294     		str	r4, [sp, #8]
 952 004c 0394     		str	r4, [sp, #12]
 953 004e 0494     		str	r4, [sp, #16]
 954 0050 0594     		str	r4, [sp, #20]
 955 0052 0694     		str	r4, [sp, #24]
 956 0054 0794     		str	r4, [sp, #28]
 957 0056 0894     		str	r4, [sp, #32]
 958 0058 0994     		str	r4, [sp, #36]
 959 005a 0A94     		str	r4, [sp, #40]
 960 005c 0B94     		str	r4, [sp, #44]
 961 005e 0C94     		str	r4, [sp, #48]
 962 0060 ADF83440 		strh	r4, [sp, #52]	@ movhi
 563:Src/main.c    ****     print(msg, 0);
 963              		.loc 1 563 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 32


 964 0064 01A8     		add	r0, sp, #4
 965 0066 2E49     		ldr	r1, .L72+24
 966 0068 2AB2     		sxth	r2, r5
 967 006a FFF7FEFF 		bl	sprintf
 968              	.LVL109:
 564:Src/main.c    **** 
 969              		.loc 1 564 0
 970 006e 01A8     		add	r0, sp, #4
 971 0070 2146     		mov	r1, r4
 972 0072 FFF7FEFF 		bl	print
 973              	.LVL110:
 566:Src/main.c    ****     {
 974              		.loc 1 566 0
 975 0076 A642     		cmp	r6, r4
 976 0078 1ADD     		ble	.L67
 568:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 977              		.loc 1 568 0
 978 007a 2046     		mov	r0, r4
 979 007c 294B     		ldr	r3, .L72+28
 980 007e 1988     		ldrh	r1, [r3]
 981 0080 FFF7FEFF 		bl	set_motor_speed
 982              	.LVL111:
 569:Src/main.c    ****         while (TIM4->CNT < counts)
 983              		.loc 1 569 0
 984 0084 0820     		movs	r0, #8
 985 0086 2146     		mov	r1, r4
 986 0088 FFF7FEFF 		bl	set_motor_speed
 987              	.LVL112:
 988              	.L68:
 570:Src/main.c    ****         {
 989              		.loc 1 570 0 discriminator 1
 990 008c 234B     		ldr	r3, .L72+20
 991 008e 5A6A     		ldr	r2, [r3, #36]
 992 0090 2BB2     		sxth	r3, r5
 993 0092 9A42     		cmp	r2, r3
 994 0094 FAD3     		bcc	.L68
 575:Src/main.c    ****         print(msg, 4);
 995              		.loc 1 575 0
 996 0096 244C     		ldr	r4, .L72+32
 997 0098 626A     		ldr	r2, [r4, #36]
 998 009a 01A8     		add	r0, sp, #4
 999 009c 2349     		ldr	r1, .L72+36
 1000 009e FFF7FEFF 		bl	sprintf
 1001              	.LVL113:
 576:Src/main.c    ****         TIM5->CNT = 0;
 1002              		.loc 1 576 0
 1003 00a2 01A8     		add	r0, sp, #4
 1004 00a4 0421     		movs	r1, #4
 1005 00a6 FFF7FEFF 		bl	print
 1006              	.LVL114:
 577:Src/main.c    ****     }
 1007              		.loc 1 577 0
 1008 00aa 0023     		movs	r3, #0
 1009 00ac 6362     		str	r3, [r4, #36]
 1010 00ae 1BE0     		b	.L69
 1011              	.L67:
 579:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 33


 1012              		.loc 1 579 0
 1013 00b0 002E     		cmp	r6, #0
 1014 00b2 19DA     		bge	.L69
 581:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1015              		.loc 1 581 0
 1016 00b4 0020     		movs	r0, #0
 1017 00b6 0146     		mov	r1, r0
 1018 00b8 FFF7FEFF 		bl	set_motor_speed
 1019              	.LVL115:
 582:Src/main.c    ****         while (TIM5->CNT < counts)
 1020              		.loc 1 582 0
 1021 00bc 0820     		movs	r0, #8
 1022 00be 1C4B     		ldr	r3, .L72+40
 1023 00c0 1988     		ldrh	r1, [r3]
 1024 00c2 FFF7FEFF 		bl	set_motor_speed
 1025              	.LVL116:
 1026              	.L70:
 583:Src/main.c    ****         {
 1027              		.loc 1 583 0 discriminator 1
 1028 00c6 184B     		ldr	r3, .L72+32
 1029 00c8 5A6A     		ldr	r2, [r3, #36]
 1030 00ca 2BB2     		sxth	r3, r5
 1031 00cc 9A42     		cmp	r2, r3
 1032 00ce FAD3     		bcc	.L70
 588:Src/main.c    ****         print(msg, 4);
 1033              		.loc 1 588 0
 1034 00d0 124C     		ldr	r4, .L72+20
 1035 00d2 626A     		ldr	r2, [r4, #36]
 1036 00d4 01A8     		add	r0, sp, #4
 1037 00d6 1749     		ldr	r1, .L72+44
 1038 00d8 FFF7FEFF 		bl	sprintf
 1039              	.LVL117:
 589:Src/main.c    ****         TIM4->CNT = 0;
 1040              		.loc 1 589 0
 1041 00dc 01A8     		add	r0, sp, #4
 1042 00de 0421     		movs	r1, #4
 1043 00e0 FFF7FEFF 		bl	print
 1044              	.LVL118:
 590:Src/main.c    ****     }
 1045              		.loc 1 590 0
 1046 00e4 0023     		movs	r3, #0
 1047 00e6 6362     		str	r3, [r4, #36]
 1048              	.L69:
 592:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1049              		.loc 1 592 0
 1050 00e8 0020     		movs	r0, #0
 1051 00ea 0146     		mov	r1, r0
 1052 00ec FFF7FEFF 		bl	set_motor_speed
 1053              	.LVL119:
 593:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 1054              		.loc 1 593 0
 1055 00f0 0820     		movs	r0, #8
 1056 00f2 0021     		movs	r1, #0
 1057 00f4 FFF7FEFF 		bl	set_motor_speed
 1058              	.LVL120:
 594:Src/main.c    **** }
 1059              		.loc 1 594 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 34


 1060 00f8 0548     		ldr	r0, .L72+8
 1061 00fa FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1062              	.LVL121:
 595:Src/main.c    **** 
 1063              		.loc 1 595 0
 1064 00fe 0EB0     		add	sp, sp, #56
 1065              	.LCFI19:
 1066              		.cfi_def_cfa_offset 16
 1067              		@ sp needed
 1068 0100 70BD     		pop	{r4, r5, r6, pc}
 1069              	.LVL122:
 1070              	.L73:
 1071 0102 00BFAFF3 		.align	3
 1071      0080
 1072              	.L72:
 1073 0108 721CC771 		.word	1908874354
 1074 010c 1CC7E13F 		.word	1071761180
 1075 0110 00000000 		.word	hadc1
 1076 0114 00000000 		.word	dma_buffer
 1077 0118 00004940 		.word	1078525952
 1078 011c 00080040 		.word	1073743872
 1079 0120 8C000000 		.word	.LC8
 1080 0124 00000000 		.word	.LANCHOR1
 1081 0128 000C0040 		.word	1073744896
 1082 012c A8000000 		.word	.LC9
 1083 0130 00000000 		.word	.LANCHOR0
 1084 0134 C4000000 		.word	.LC10
 1085              		.cfi_endproc
 1086              	.LFE130:
 1088              		.section	.text.debounce_and_grab,"ax",%progbits
 1089              		.align	2
 1090              		.global	debounce_and_grab
 1091              		.thumb
 1092              		.thumb_func
 1094              	debounce_and_grab:
 1095              	.LFB137:
 725:Src/main.c    ****     }
 726:Src/main.c    **** }
 727:Src/main.c    **** 
 728:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid)
 729:Src/main.c    **** {
 1096              		.loc 1 729 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 0
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              	.LVL123:
 1101 0000 38B5     		push	{r3, r4, r5, lr}
 1102              	.LCFI20:
 1103              		.cfi_def_cfa_offset 16
 1104              		.cfi_offset 3, -16
 1105              		.cfi_offset 4, -12
 1106              		.cfi_offset 5, -8
 1107              		.cfi_offset 14, -4
 1108 0002 0446     		mov	r4, r0
 730:Src/main.c    ****     uint32_t timeee = HAL_GetTick();
 1109              		.loc 1 730 0
 1110 0004 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 35


 1111              	.LVL124:
 731:Src/main.c    ****     // int count = 0;
 732:Src/main.c    ****     // while (HAL_GetTick() - timeee < 50)
 733:Src/main.c    ****     // {
 734:Src/main.c    ****     //     ++count;
 735:Src/main.c    ****     //     HAL_Delay(5);
 736:Src/main.c    ****     //     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_RESET)
 737:Src/main.c    ****     //     {
 738:Src/main.c    ****     //         print("CLAW_GRAB | Claw debounced. No ewok found\n", 0);
 739:Src/main.c    ****     //         ewok = FALSE;
 740:Src/main.c    ****     //         break;
 741:Src/main.c    ****     //     }
 742:Src/main.c    ****     // }
 743:Src/main.c    ****     // char msg[50] = "";
 744:Src/main.c    ****     // sprintf(msg, "CLAW_GRAB | Debounced with %d checks\n", count);
 745:Src/main.c    ****     // print(msg, 0);
 746:Src/main.c    ****     // If claw is still high, we have an ewok. Stop, grab it, continue on
 747:Src/main.c    ****     // hardcoded procedure
 748:Src/main.c    ****     print("CLAW_GRAB | grabbing ewok\n", 0);
 1112              		.loc 1 748 0
 1113 0008 C848     		ldr	r0, .L103
 1114 000a 0021     		movs	r1, #0
 1115 000c FFF7FEFF 		bl	print
 1116              	.LVL125:
 749:Src/main.c    ****     HAL_Delay(500);
 1117              		.loc 1 749 0
 1118 0010 4FF4FA70 		mov	r0, #500
 1119 0014 FFF7FEFF 		bl	HAL_Delay
 1120              	.LVL126:
 750:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 1121              		.loc 1 750 0
 1122 0018 0020     		movs	r0, #0
 1123 001a 0146     		mov	r1, r0
 1124 001c FFF7FEFF 		bl	set_motor_speed
 1125              	.LVL127:
 751:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1126              		.loc 1 751 0
 1127 0020 0820     		movs	r0, #8
 1128 0022 0021     		movs	r1, #0
 1129 0024 FFF7FEFF 		bl	set_motor_speed
 1130              	.LVL128:
 752:Src/main.c    ****     close_claw(&htim3);
 1131              		.loc 1 752 0
 1132 0028 C14D     		ldr	r5, .L103+4
 1133 002a 2846     		mov	r0, r5
 1134 002c FFF7FEFF 		bl	close_claw
 1135              	.LVL129:
 753:Src/main.c    ****     arm_up(&htim3);
 1136              		.loc 1 753 0
 1137 0030 2846     		mov	r0, r5
 1138 0032 FFF7FEFF 		bl	arm_up
 1139              	.LVL130:
 754:Src/main.c    ****     // TODO: delete next line, there for testing!!!
 755:Src/main.c    ****     HAL_Delay(100);
 1140              		.loc 1 755 0
 1141 0036 6420     		movs	r0, #100
 1142 0038 FFF7FEFF 		bl	HAL_Delay
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 36


 1143              	.LVL131:
 756:Src/main.c    ****     ++ewok_cnt;
 1144              		.loc 1 756 0
 1145 003c BD4A     		ldr	r2, .L103+8
 1146 003e 1368     		ldr	r3, [r2]
 1147 0040 0133     		adds	r3, r3, #1
 1148 0042 1360     		str	r3, [r2]
 757:Src/main.c    ****     // char msg[18] = "";
 758:Src/main.c    ****     // sprintf(msg, "wok_cnt: %d\n", ewok_cnt);
 759:Src/main.c    ****     // print(msg, 0);
 760:Src/main.c    ****     /*
 761:Src/main.c    ****      * Claw is up and closed
 762:Src/main.c    ****      * Ewok Count incremented
 763:Src/main.c    ****      * Motors not powered
 764:Src/main.c    ****      * CLAW_INT_STATE not FLAGGED, interrupt disabled
 765:Src/main.c    ****      */
 766:Src/main.c    **** 
 767:Src/main.c    ****     // For the first ewok, turn left, arm up, square robot w/ edge,
 768:Src/main.c    ****     // drive straight for 3 s, bring arm down
 769:Src/main.c    ****     if (ewok_cnt == 1)
 1149              		.loc 1 769 0
 1150 0044 012B     		cmp	r3, #1
 1151 0046 4CD1     		bne	.L75
 1152              	.LBB2:
 770:Src/main.c    ****     {
 771:Src/main.c    ****         print("First ewok captured\n", 0);
 1153              		.loc 1 771 0
 1154 0048 BB48     		ldr	r0, .L103+12
 1155 004a 0021     		movs	r1, #0
 1156 004c FFF7FEFF 		bl	print
 1157              	.LVL132:
 772:Src/main.c    ****         turn_deg(-170);
 1158              		.loc 1 772 0
 1159 0050 6FF0A900 		mvn	r0, #169
 1160 0054 FFF7FEFF 		bl	turn_deg
 1161              	.LVL133:
 773:Src/main.c    ****         open_claw(&htim3);
 1162              		.loc 1 773 0
 1163 0058 2846     		mov	r0, r5
 1164 005a FFF7FEFF 		bl	open_claw
 1165              	.LVL134:
 774:Src/main.c    ****         LEFT_SPEED+=100;
 1166              		.loc 1 774 0
 1167 005e B74D     		ldr	r5, .L103+16
 1168 0060 2B88     		ldrh	r3, [r5]
 1169 0062 6433     		adds	r3, r3, #100
 1170 0064 2B80     		strh	r3, [r5]	@ movhi
 775:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED-50);
 1171              		.loc 1 775 0
 1172 0066 B64B     		ldr	r3, .L103+20
 1173 0068 1988     		ldrh	r1, [r3]
 1174 006a 0820     		movs	r0, #8
 1175 006c 3239     		subs	r1, r1, #50
 1176 006e FFF7FEFF 		bl	set_motor_speed
 1177              	.LVL135:
 776:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED-50);
 1178              		.loc 1 776 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 37


 1179 0072 2988     		ldrh	r1, [r5]
 1180 0074 0020     		movs	r0, #0
 1181 0076 3239     		subs	r1, r1, #50
 1182 0078 FFF7FEFF 		bl	set_motor_speed
 1183              	.LVL136:
 777:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1184              		.loc 1 777 0
 1185 007c FFF7FEFF 		bl	HAL_GetTick
 1186              	.LVL137:
 1187 0080 0546     		mov	r5, r0
 1188              	.LVL138:
 778:Src/main.c    ****         while(HAL_GetTick()-time < 1000){
 1189              		.loc 1 778 0
 1190 0082 02E0     		b	.L76
 1191              	.LVL139:
 1192              	.L77:
 779:Src/main.c    ****             drive_straight(enc_pid);
 1193              		.loc 1 779 0
 1194 0084 2046     		mov	r0, r4
 1195 0086 FFF7FEFF 		bl	drive_straight
 1196              	.LVL140:
 1197              	.L76:
 778:Src/main.c    ****         while(HAL_GetTick()-time < 1000){
 1198              		.loc 1 778 0
 1199 008a FFF7FEFF 		bl	HAL_GetTick
 1200              	.LVL141:
 1201 008e 401B     		subs	r0, r0, r5
 1202 0090 B0F57A7F 		cmp	r0, #1000
 1203 0094 F6D3     		bcc	.L77
 780:Src/main.c    ****         }
 781:Src/main.c    ****         square_edge(enc_pid);
 1204              		.loc 1 781 0
 1205 0096 2046     		mov	r0, r4
 1206 0098 FFF7FEFF 		bl	square_edge
 1207              	.LVL142:
 782:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1208              		.loc 1 782 0
 1209 009c 0820     		movs	r0, #8
 1210 009e A84B     		ldr	r3, .L103+20
 1211 00a0 1988     		ldrh	r1, [r3]
 1212 00a2 FFF7FEFF 		bl	set_motor_speed
 1213              	.LVL143:
 783:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1214              		.loc 1 783 0
 1215 00a6 0020     		movs	r0, #0
 1216 00a8 A44B     		ldr	r3, .L103+16
 1217 00aa 1988     		ldrh	r1, [r3]
 1218 00ac FFF7FEFF 		bl	set_motor_speed
 1219              	.LVL144:
 784:Src/main.c    ****         time = HAL_GetTick();
 1220              		.loc 1 784 0
 1221 00b0 FFF7FEFF 		bl	HAL_GetTick
 1222              	.LVL145:
 1223 00b4 0546     		mov	r5, r0
 1224              	.LVL146:
 785:Src/main.c    ****         while(HAL_GetTick()-time < 2500){
 1225              		.loc 1 785 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 38


 1226 00b6 02E0     		b	.L78
 1227              	.LVL147:
 1228              	.L79:
 786:Src/main.c    ****             drive_straight(enc_pid);
 1229              		.loc 1 786 0
 1230 00b8 2046     		mov	r0, r4
 1231 00ba FFF7FEFF 		bl	drive_straight
 1232              	.LVL148:
 1233              	.L78:
 785:Src/main.c    ****         while(HAL_GetTick()-time < 2500){
 1234              		.loc 1 785 0
 1235 00be FFF7FEFF 		bl	HAL_GetTick
 1236              	.LVL149:
 1237 00c2 401B     		subs	r0, r0, r5
 1238 00c4 40F6C313 		movw	r3, #2499
 1239 00c8 9842     		cmp	r0, r3
 1240 00ca F5D9     		bls	.L79
 787:Src/main.c    ****         }
 788:Src/main.c    ****         arm_down(&htim3);
 1241              		.loc 1 788 0
 1242 00cc 9848     		ldr	r0, .L103+4
 1243 00ce FFF7FEFF 		bl	arm_down
 1244              	.LVL150:
 789:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1245              		.loc 1 789 0
 1246 00d2 0820     		movs	r0, #8
 1247 00d4 0021     		movs	r1, #0
 1248 00d6 FFF7FEFF 		bl	set_motor_speed
 1249              	.LVL151:
 790:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1250              		.loc 1 790 0
 1251 00da 0020     		movs	r0, #0
 1252 00dc 0146     		mov	r1, r0
 1253 00de FFF7FEFF 		bl	set_motor_speed
 1254              	.LVL152:
 1255              	.L75:
 1256              	.LBE2:
 791:Src/main.c    ****         // square_edge(&enc_pid);
 792:Src/main.c    ****         //        drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 10000);
 793:Src/main.c    ****     }
 794:Src/main.c    **** 
 795:Src/main.c    ****     if (ewok_cnt == 2)
 1257              		.loc 1 795 0
 1258 00e2 944B     		ldr	r3, .L103+8
 1259 00e4 1B68     		ldr	r3, [r3]
 1260 00e6 022B     		cmp	r3, #2
 1261 00e8 40F08480 		bne	.L80
 1262              	.LBB3:
 796:Src/main.c    ****     {
 797:Src/main.c    ****         print("Second ewok captured\n",0);
 1263              		.loc 1 797 0
 1264 00ec 9548     		ldr	r0, .L103+24
 1265 00ee 0021     		movs	r1, #0
 1266 00f0 FFF7FEFF 		bl	print
 1267              	.LVL153:
 798:Src/main.c    ****         if(ewok_cnt==2 && searches == 3){
 1268              		.loc 1 798 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 39


 1269 00f4 8F4B     		ldr	r3, .L103+8
 1270 00f6 1B68     		ldr	r3, [r3]
 1271 00f8 022B     		cmp	r3, #2
 1272 00fa 08D1     		bne	.L81
 1273              		.loc 1 798 0 is_stmt 0 discriminator 1
 1274 00fc 924B     		ldr	r3, .L103+28
 1275 00fe 1B68     		ldr	r3, [r3]
 1276 0100 032B     		cmp	r3, #3
 1277 0102 04D1     		bne	.L81
 799:Src/main.c    ****             turn_deg(-200); //  Prolly have to change this
 1278              		.loc 1 799 0 is_stmt 1
 1279 0104 6FF0C700 		mvn	r0, #199
 1280 0108 FFF7FEFF 		bl	turn_deg
 1281              	.LVL154:
 1282 010c 03E0     		b	.L82
 1283              	.L81:
 800:Src/main.c    ****         }else{
 801:Src/main.c    ****             turn_deg(-180); //  Prolly have to change this
 1284              		.loc 1 801 0
 1285 010e 6FF0B300 		mvn	r0, #179
 1286 0112 FFF7FEFF 		bl	turn_deg
 1287              	.LVL155:
 1288              	.L82:
 802:Src/main.c    ****         }
 803:Src/main.c    ****         HAL_Delay(10);
 1289              		.loc 1 803 0
 1290 0116 0A20     		movs	r0, #10
 1291 0118 FFF7FEFF 		bl	HAL_Delay
 1292              	.LVL156:
 804:Src/main.c    ****         alarm_detect();
 1293              		.loc 1 804 0
 1294 011c FFF7FEFF 		bl	alarm_detect
 1295              	.LVL157:
 805:Src/main.c    ****         HAL_Delay(10);
 1296              		.loc 1 805 0
 1297 0120 0A20     		movs	r0, #10
 1298 0122 FFF7FEFF 		bl	HAL_Delay
 1299              	.LVL158:
 806:Src/main.c    ****         open_claw(&htim3);
 1300              		.loc 1 806 0
 1301 0126 8248     		ldr	r0, .L103+4
 1302 0128 FFF7FEFF 		bl	open_claw
 1303              	.LVL159:
 807:Src/main.c    ****         HAL_Delay(10);
 1304              		.loc 1 807 0
 1305 012c 0A20     		movs	r0, #10
 1306 012e FFF7FEFF 		bl	HAL_Delay
 1307              	.LVL160:
 808:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1308              		.loc 1 808 0
 1309 0132 FFF7FEFF 		bl	HAL_GetTick
 1310              	.LVL161:
 1311 0136 0546     		mov	r5, r0
 1312              	.LVL162:
 809:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1313              		.loc 1 809 0
 1314 0138 0820     		movs	r0, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 40


 1315              	.LVL163:
 1316 013a 814B     		ldr	r3, .L103+20
 1317 013c 1988     		ldrh	r1, [r3]
 1318 013e FFF7FEFF 		bl	set_motor_speed
 1319              	.LVL164:
 810:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1320              		.loc 1 810 0
 1321 0142 0020     		movs	r0, #0
 1322 0144 7D4B     		ldr	r3, .L103+16
 1323 0146 1988     		ldrh	r1, [r3]
 1324 0148 FFF7FEFF 		bl	set_motor_speed
 1325              	.LVL165:
 811:Src/main.c    ****         while(HAL_GetTick()-time < 3000){
 1326              		.loc 1 811 0
 1327 014c 02E0     		b	.L83
 1328              	.L84:
 812:Src/main.c    ****             drive_straight(enc_pid);
 1329              		.loc 1 812 0
 1330 014e 2046     		mov	r0, r4
 1331 0150 FFF7FEFF 		bl	drive_straight
 1332              	.LVL166:
 1333              	.L83:
 811:Src/main.c    ****         while(HAL_GetTick()-time < 3000){
 1334              		.loc 1 811 0
 1335 0154 FFF7FEFF 		bl	HAL_GetTick
 1336              	.LVL167:
 1337 0158 401B     		subs	r0, r0, r5
 1338 015a 40F6B733 		movw	r3, #2999
 1339 015e 9842     		cmp	r0, r3
 1340 0160 F5D9     		bls	.L84
 813:Src/main.c    ****         }
 814:Src/main.c    ****         arm_down(&htim3);
 1341              		.loc 1 814 0
 1342 0162 734D     		ldr	r5, .L103+4
 1343              	.LVL168:
 1344 0164 2846     		mov	r0, r5
 1345 0166 FFF7FEFF 		bl	arm_down
 1346              	.LVL169:
 815:Src/main.c    ****         HAL_Delay(500);
 1347              		.loc 1 815 0
 1348 016a 4FF4FA70 		mov	r0, #500
 1349 016e FFF7FEFF 		bl	HAL_Delay
 1350              	.LVL170:
 816:Src/main.c    ****         slow_actuate(&htim3, TIM_CHANNEL_3, 50, 180);
 1351              		.loc 1 816 0
 1352 0172 2846     		mov	r0, r5
 1353 0174 0821     		movs	r1, #8
 1354 0176 3222     		movs	r2, #50
 1355 0178 B423     		movs	r3, #180
 1356 017a FFF7FEFF 		bl	slow_actuate
 1357              	.LVL171:
 817:Src/main.c    ****         HAL_Delay(1000);
 1358              		.loc 1 817 0
 1359 017e 4FF47A70 		mov	r0, #1000
 1360 0182 FFF7FEFF 		bl	HAL_Delay
 1361              	.LVL172:
 818:Src/main.c    ****         arm_up(&htim3);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 41


 1362              		.loc 1 818 0
 1363 0186 2846     		mov	r0, r5
 1364 0188 FFF7FEFF 		bl	arm_up
 1365              	.LVL173:
 819:Src/main.c    ****         turn(-20);
 1366              		.loc 1 819 0
 1367 018c 6FF01300 		mvn	r0, #19
 1368 0190 FFF7FEFF 		bl	turn
 1369              	.LVL174:
 820:Src/main.c    ****         time = HAL_GetTick();
 1370              		.loc 1 820 0
 1371 0194 FFF7FEFF 		bl	HAL_GetTick
 1372              	.LVL175:
 1373 0198 0546     		mov	r5, r0
 1374              	.LVL176:
 821:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED+150);
 1375              		.loc 1 821 0
 1376 019a 694B     		ldr	r3, .L103+20
 1377 019c 1988     		ldrh	r1, [r3]
 1378 019e 0820     		movs	r0, #8
 1379              	.LVL177:
 1380 01a0 9631     		adds	r1, r1, #150
 1381 01a2 FFF7FEFF 		bl	set_motor_speed
 1382              	.LVL178:
 822:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED+150);
 1383              		.loc 1 822 0
 1384 01a6 654B     		ldr	r3, .L103+16
 1385 01a8 1988     		ldrh	r1, [r3]
 1386 01aa 0020     		movs	r0, #0
 1387 01ac 9631     		adds	r1, r1, #150
 1388 01ae FFF7FEFF 		bl	set_motor_speed
 1389              	.LVL179:
 823:Src/main.c    ****         while(HAL_GetTick()-time < 5000){
 1390              		.loc 1 823 0
 1391 01b2 02E0     		b	.L85
 1392              	.L86:
 824:Src/main.c    ****             drive_straight(enc_pid);
 1393              		.loc 1 824 0
 1394 01b4 2046     		mov	r0, r4
 1395 01b6 FFF7FEFF 		bl	drive_straight
 1396              	.LVL180:
 1397              	.L85:
 823:Src/main.c    ****         while(HAL_GetTick()-time < 5000){
 1398              		.loc 1 823 0
 1399 01ba FFF7FEFF 		bl	HAL_GetTick
 1400              	.LVL181:
 1401 01be 401B     		subs	r0, r0, r5
 1402 01c0 41F28733 		movw	r3, #4999
 1403 01c4 9842     		cmp	r0, r3
 1404 01c6 F5D9     		bls	.L86
 825:Src/main.c    ****         }
 826:Src/main.c    ****         slow_actuate(&htim3, TIM_CHANNEL_3, 50, 180);
 1405              		.loc 1 826 0
 1406 01c8 594D     		ldr	r5, .L103+4
 1407              	.LVL182:
 1408 01ca 2846     		mov	r0, r5
 1409 01cc 0821     		movs	r1, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 42


 1410 01ce 3222     		movs	r2, #50
 1411 01d0 B423     		movs	r3, #180
 1412 01d2 FFF7FEFF 		bl	slow_actuate
 1413              	.LVL183:
 827:Src/main.c    ****         HAL_Delay(500);
 1414              		.loc 1 827 0
 1415 01d6 4FF4FA70 		mov	r0, #500
 1416 01da FFF7FEFF 		bl	HAL_Delay
 1417              	.LVL184:
 828:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 1418              		.loc 1 828 0
 1419 01de 2B68     		ldr	r3, [r5]
 1420 01e0 0025     		movs	r5, #0
 1421 01e2 DD63     		str	r5, [r3, #60]
 829:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1422              		.loc 1 829 0
 1423 01e4 0820     		movs	r0, #8
 1424 01e6 2946     		mov	r1, r5
 1425 01e8 FFF7FEFF 		bl	set_motor_speed
 1426              	.LVL185:
 830:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1427              		.loc 1 830 0
 1428 01ec 2846     		mov	r0, r5
 1429 01ee 2946     		mov	r1, r5
 1430 01f0 FFF7FEFF 		bl	set_motor_speed
 1431              	.LVL186:
 1432              	.L80:
 1433              	.LBE3:
 831:Src/main.c    ****         /*
 832:Src/main.c    ****            timeee = HAL_GetTick();
 833:Src/main.c    ****            while (HAL_GetTick() - timeee < 7000)
 834:Src/main.c    ****            {
 835:Src/main.c    ****            if (TAPE_LEFT_STATE == FLAGGED && TAPE_RIGHT_STATE != FLAGGED)
 836:Src/main.c    ****            {
 837:Src/main.c    ****            set_motor_speed(TIM_CHANNEL_3, 0);
 838:Src/main.c    ****         // Tape detects object when high
 839:Src/main.c    ****         while (HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) == GPIO_PIN_SET);
 840:Src/main.c    ****         HAL_Delay(100);
 841:Src/main.c    ****         TAPE_LEFT_STATE = NOT_FLAGGED;
 842:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 843:Src/main.c    ****         }
 844:Src/main.c    ****         else if (TAPE_RIGHT_STATE == FLAGGED && TAPE_LEFT_STATE != FLAGGED)
 845:Src/main.c    ****         {
 846:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 847:Src/main.c    ****         while (HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) == GPIO_PIN_SET);
 848:Src/main.c    ****         HAL_Delay(100);
 849:Src/main.c    ****         TAPE_RIGHT_STATE = NOT_FLAGGED;
 850:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 851:Src/main.c    ****         }
 852:Src/main.c    ****         }
 853:Src/main.c    ****         */
 854:Src/main.c    ****     }
 855:Src/main.c    **** 
 856:Src/main.c    **** 
 857:Src/main.c    ****     if (ewok_cnt == 3)
 1434              		.loc 1 857 0
 1435 01f4 4F4B     		ldr	r3, .L103+8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 43


 1436 01f6 1B68     		ldr	r3, [r3]
 1437 01f8 032B     		cmp	r3, #3
 1438 01fa 54D1     		bne	.L87
 1439              	.LBB4:
 858:Src/main.c    ****     {
 859:Src/main.c    ****         print("Third ewok captured\n", 0);
 1440              		.loc 1 859 0
 1441 01fc 5348     		ldr	r0, .L103+32
 1442 01fe 0021     		movs	r1, #0
 1443 0200 FFF7FEFF 		bl	print
 1444              	.LVL187:
 860:Src/main.c    ****         turn_deg(170);
 1445              		.loc 1 860 0
 1446 0204 AA20     		movs	r0, #170
 1447 0206 FFF7FEFF 		bl	turn_deg
 1448              	.LVL188:
 861:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1449              		.loc 1 861 0
 1450 020a 0820     		movs	r0, #8
 1451 020c 4C4B     		ldr	r3, .L103+20
 1452 020e 1988     		ldrh	r1, [r3]
 1453 0210 FFF7FEFF 		bl	set_motor_speed
 1454              	.LVL189:
 862:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1455              		.loc 1 862 0
 1456 0214 0020     		movs	r0, #0
 1457 0216 494B     		ldr	r3, .L103+16
 1458 0218 1988     		ldrh	r1, [r3]
 1459 021a FFF7FEFF 		bl	set_motor_speed
 1460              	.LVL190:
 863:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1461              		.loc 1 863 0
 1462 021e FFF7FEFF 		bl	HAL_GetTick
 1463              	.LVL191:
 1464 0222 0546     		mov	r5, r0
 1465              	.LVL192:
 864:Src/main.c    ****         while(HAL_GetTick()-time < 1500){
 1466              		.loc 1 864 0
 1467 0224 02E0     		b	.L88
 1468              	.LVL193:
 1469              	.L89:
 865:Src/main.c    ****             drive_straight(enc_pid);
 1470              		.loc 1 865 0
 1471 0226 2046     		mov	r0, r4
 1472 0228 FFF7FEFF 		bl	drive_straight
 1473              	.LVL194:
 1474              	.L88:
 864:Src/main.c    ****         while(HAL_GetTick()-time < 1500){
 1475              		.loc 1 864 0
 1476 022c FFF7FEFF 		bl	HAL_GetTick
 1477              	.LVL195:
 1478 0230 401B     		subs	r0, r0, r5
 1479 0232 40F2DB53 		movw	r3, #1499
 1480 0236 9842     		cmp	r0, r3
 1481 0238 F5D9     		bls	.L89
 866:Src/main.c    ****         }
 867:Src/main.c    ****         square_edge(enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 44


 1482              		.loc 1 867 0
 1483 023a 2046     		mov	r0, r4
 1484 023c FFF7FEFF 		bl	square_edge
 1485              	.LVL196:
 868:Src/main.c    ****         open_claw(&htim3);
 1486              		.loc 1 868 0
 1487 0240 3B48     		ldr	r0, .L103+4
 1488 0242 FFF7FEFF 		bl	open_claw
 1489              	.LVL197:
 869:Src/main.c    ****         time = HAL_GetTick();
 1490              		.loc 1 869 0
 1491 0246 FFF7FEFF 		bl	HAL_GetTick
 1492              	.LVL198:
 1493 024a 0546     		mov	r5, r0
 1494              	.LVL199:
 870:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED+100);
 1495              		.loc 1 870 0
 1496 024c 3C4B     		ldr	r3, .L103+20
 1497 024e 1988     		ldrh	r1, [r3]
 1498 0250 0820     		movs	r0, #8
 1499              	.LVL200:
 1500 0252 6431     		adds	r1, r1, #100
 1501 0254 FFF7FEFF 		bl	set_motor_speed
 1502              	.LVL201:
 871:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED+100);
 1503              		.loc 1 871 0
 1504 0258 384B     		ldr	r3, .L103+16
 1505 025a 1988     		ldrh	r1, [r3]
 1506 025c 0020     		movs	r0, #0
 1507 025e 6431     		adds	r1, r1, #100
 1508 0260 FFF7FEFF 		bl	set_motor_speed
 1509              	.LVL202:
 872:Src/main.c    ****         while(HAL_GetTick()-time < 2000){
 1510              		.loc 1 872 0
 1511 0264 02E0     		b	.L90
 1512              	.L91:
 873:Src/main.c    ****             drive_straight(enc_pid);
 1513              		.loc 1 873 0
 1514 0266 2046     		mov	r0, r4
 1515 0268 FFF7FEFF 		bl	drive_straight
 1516              	.LVL203:
 1517              	.L90:
 872:Src/main.c    ****         while(HAL_GetTick()-time < 2000){
 1518              		.loc 1 872 0
 1519 026c FFF7FEFF 		bl	HAL_GetTick
 1520              	.LVL204:
 1521 0270 401B     		subs	r0, r0, r5
 1522 0272 B0F5FA6F 		cmp	r0, #2000
 1523 0276 F6D3     		bcc	.L91
 874:Src/main.c    ****         }
 875:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1524              		.loc 1 875 0
 1525 0278 0820     		movs	r0, #8
 1526 027a 0021     		movs	r1, #0
 1527 027c FFF7FEFF 		bl	set_motor_speed
 1528              	.LVL205:
 876:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 45


 1529              		.loc 1 876 0
 1530 0280 0020     		movs	r0, #0
 1531 0282 0146     		mov	r1, r0
 1532 0284 FFF7FEFF 		bl	set_motor_speed
 1533              	.LVL206:
 877:Src/main.c    ****         HAL_Delay(700);
 1534              		.loc 1 877 0
 1535 0288 4FF42F70 		mov	r0, #700
 1536 028c FFF7FEFF 		bl	HAL_Delay
 1537              	.LVL207:
 878:Src/main.c    ****         arm_down(&htim3);
 1538              		.loc 1 878 0
 1539 0290 2748     		ldr	r0, .L103+4
 1540 0292 FFF7FEFF 		bl	arm_down
 1541              	.LVL208:
 879:Src/main.c    ****         HAL_Delay(700);
 1542              		.loc 1 879 0
 1543 0296 4FF42F70 		mov	r0, #700
 1544 029a FFF7FEFF 		bl	HAL_Delay
 1545              	.LVL209:
 880:Src/main.c    ****         print("ewok\n", 0);
 1546              		.loc 1 880 0
 1547 029e 2C48     		ldr	r0, .L103+36
 1548 02a0 0021     		movs	r1, #0
 1549 02a2 FFF7FEFF 		bl	print
 1550              	.LVL210:
 1551              	.L87:
 1552              	.LBE4:
 881:Src/main.c    ****     }
 882:Src/main.c    **** 
 883:Src/main.c    **** 
 884:Src/main.c    ****     if (ewok_cnt == 4)
 1553              		.loc 1 884 0
 1554 02a6 234B     		ldr	r3, .L103+8
 1555 02a8 1B68     		ldr	r3, [r3]
 1556 02aa 042B     		cmp	r3, #4
 1557 02ac 40F08380 		bne	.L92
 885:Src/main.c    ****     {
 886:Src/main.c    ****         print("Fourth ewok captured\n", 0);
 1558              		.loc 1 886 0
 1559 02b0 2848     		ldr	r0, .L103+40
 1560 02b2 0021     		movs	r1, #0
 1561 02b4 FFF7FEFF 		bl	print
 1562              	.LVL211:
 887:Src/main.c    ****         turn_deg(180);
 1563              		.loc 1 887 0
 1564 02b8 B420     		movs	r0, #180
 1565 02ba FFF7FEFF 		bl	turn_deg
 1566              	.LVL212:
 888:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1567              		.loc 1 888 0
 1568 02be 0820     		movs	r0, #8
 1569 02c0 1F4B     		ldr	r3, .L103+20
 1570 02c2 1988     		ldrh	r1, [r3]
 1571 02c4 FFF7FEFF 		bl	set_motor_speed
 1572              	.LVL213:
 889:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 46


 1573              		.loc 1 889 0
 1574 02c8 1C4D     		ldr	r5, .L103+16
 1575 02ca 0020     		movs	r0, #0
 1576 02cc 2988     		ldrh	r1, [r5]
 1577 02ce FFF7FEFF 		bl	set_motor_speed
 1578              	.LVL214:
 890:Src/main.c    ****         open_claw(&htim3);
 1579              		.loc 1 890 0
 1580 02d2 1748     		ldr	r0, .L103+4
 1581 02d4 FFF7FEFF 		bl	open_claw
 1582              	.LVL215:
 891:Src/main.c    ****         LEFT_SPEED -= 100;
 1583              		.loc 1 891 0
 1584 02d8 2B88     		ldrh	r3, [r5]
 1585 02da 643B     		subs	r3, r3, #100
 1586 02dc 2B80     		strh	r3, [r5]	@ movhi
 892:Src/main.c    ****         timeee = HAL_GetTick();
 1587              		.loc 1 892 0
 1588 02de FFF7FEFF 		bl	HAL_GetTick
 1589              	.LVL216:
 1590 02e2 0546     		mov	r5, r0
 1591              	.LVL217:
 893:Src/main.c    ****         while (HAL_GetTick() - timeee < 8000)
 1592              		.loc 1 893 0
 1593 02e4 5EE0     		b	.L93
 1594              	.LVL218:
 1595              	.L98:
 894:Src/main.c    ****         {
 895:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_
 1596              		.loc 1 895 0
 1597 02e6 1C48     		ldr	r0, .L103+44
 1598 02e8 0421     		movs	r1, #4
 1599 02ea FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1600              	.LVL219:
 1601 02ee 68B9     		cbnz	r0, .L94
 1602              		.loc 1 895 0 is_stmt 0 discriminator 1
 1603 02f0 00F18040 		add	r0, r0, #1073741824
 1604 02f4 00F50230 		add	r0, r0, #133120
 1605 02f8 0821     		movs	r1, #8
 1606 02fa FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1607              	.LVL220:
 1608 02fe 0128     		cmp	r0, #1
 1609 0300 04D1     		bne	.L94
 896:Src/main.c    ****             {
 897:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 1610              		.loc 1 897 0 is_stmt 1
 1611 0302 0820     		movs	r0, #8
 1612 0304 0021     		movs	r1, #0
 1613 0306 FFF7FEFF 		bl	set_motor_speed
 1614              	.LVL221:
 1615 030a 48E0     		b	.L95
 1616              	.L94:
 898:Src/main.c    ****             }else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_SET && HAL_G
 1617              		.loc 1 898 0
 1618 030c 1248     		ldr	r0, .L103+44
 1619 030e 0421     		movs	r1, #4
 1620 0310 FFF7FEFF 		bl	HAL_GPIO_ReadPin
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 47


 1621              	.LVL222:
 1622 0314 0128     		cmp	r0, #1
 1623 0316 23D1     		bne	.L96
 1624              		.loc 1 898 0 is_stmt 0 discriminator 1
 1625 0318 1048     		ldr	r0, .L103+48
 1626 031a 0821     		movs	r1, #8
 1627 031c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1628              	.LVL223:
 1629 0320 F0B9     		cbnz	r0, .L96
 899:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 1630              		.loc 1 899 0 is_stmt 1
 1631 0322 0146     		mov	r1, r0
 1632 0324 FFF7FEFF 		bl	set_motor_speed
 1633              	.LVL224:
 1634 0328 39E0     		b	.L95
 1635              	.L104:
 1636 032a 00BF     		.align	2
 1637              	.L103:
 1638 032c E0000000 		.word	.LC11
 1639 0330 00000000 		.word	htim3
 1640 0334 00000000 		.word	.LANCHOR2
 1641 0338 FC000000 		.word	.LC12
 1642 033c 00000000 		.word	.LANCHOR1
 1643 0340 00000000 		.word	.LANCHOR0
 1644 0344 14010000 		.word	.LC13
 1645 0348 00000000 		.word	.LANCHOR3
 1646 034c 2C010000 		.word	.LC14
 1647 0350 44010000 		.word	.LC15
 1648 0354 4C010000 		.word	.LC16
 1649 0358 000C0240 		.word	1073875968
 1650 035c 00080240 		.word	1073874944
 1651              	.L96:
 900:Src/main.c    ****             }else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL
 1652              		.loc 1 900 0
 1653 0360 3548     		ldr	r0, .L105
 1654 0362 0421     		movs	r1, #4
 1655 0364 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1656              	.LVL225:
 1657 0368 78B9     		cbnz	r0, .L97
 1658              		.loc 1 900 0 is_stmt 0 discriminator 1
 1659 036a 00F18040 		add	r0, r0, #1073741824
 1660 036e 00F50230 		add	r0, r0, #133120
 1661 0372 0821     		movs	r1, #8
 1662 0374 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1663              	.LVL226:
 1664 0378 38B9     		cbnz	r0, .L97
 901:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 1665              		.loc 1 901 0 is_stmt 1
 1666 037a 0146     		mov	r1, r0
 1667 037c FFF7FEFF 		bl	set_motor_speed
 1668              	.LVL227:
 902:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 1669              		.loc 1 902 0
 1670 0380 0820     		movs	r0, #8
 1671 0382 0021     		movs	r1, #0
 1672 0384 FFF7FEFF 		bl	set_motor_speed
 1673              	.LVL228:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 48


 1674 0388 09E0     		b	.L95
 1675              	.L97:
 903:Src/main.c    ****             }else{
 904:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1676              		.loc 1 904 0
 1677 038a 0820     		movs	r0, #8
 1678 038c 2B4B     		ldr	r3, .L105+4
 1679 038e 1988     		ldrh	r1, [r3]
 1680 0390 FFF7FEFF 		bl	set_motor_speed
 1681              	.LVL229:
 905:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1682              		.loc 1 905 0
 1683 0394 0020     		movs	r0, #0
 1684 0396 2A4B     		ldr	r3, .L105+8
 1685 0398 1988     		ldrh	r1, [r3]
 1686 039a FFF7FEFF 		bl	set_motor_speed
 1687              	.LVL230:
 1688              	.L95:
 906:Src/main.c    ****             }
 907:Src/main.c    ****             drive_straight(enc_pid);
 1689              		.loc 1 907 0
 1690 039e 2046     		mov	r0, r4
 1691 03a0 FFF7FEFF 		bl	drive_straight
 1692              	.LVL231:
 1693              	.L93:
 893:Src/main.c    ****         {
 1694              		.loc 1 893 0
 1695 03a4 FFF7FEFF 		bl	HAL_GetTick
 1696              	.LVL232:
 1697 03a8 401B     		subs	r0, r0, r5
 1698 03aa B0F5FA5F 		cmp	r0, #8000
 1699 03ae 9AD3     		bcc	.L98
 908:Src/main.c    ****         }
 909:Src/main.c    ****         arm_down(&htim3);
 1700              		.loc 1 909 0
 1701 03b0 2448     		ldr	r0, .L105+12
 1702 03b2 FFF7FEFF 		bl	arm_down
 1703              	.LVL233:
 1704              	.L92:
 910:Src/main.c    ****     }
 911:Src/main.c    **** 
 912:Src/main.c    ****     if (ewok_cnt == 5)
 1705              		.loc 1 912 0
 1706 03b6 244B     		ldr	r3, .L105+16
 1707 03b8 1B68     		ldr	r3, [r3]
 1708 03ba 052B     		cmp	r3, #5
 1709 03bc 35D1     		bne	.L99
 1710              	.LBB5:
 913:Src/main.c    ****     {
 914:Src/main.c    ****         print("Chewie captured\n", 0);
 1711              		.loc 1 914 0
 1712 03be 2348     		ldr	r0, .L105+20
 1713 03c0 0021     		movs	r1, #0
 1714 03c2 FFF7FEFF 		bl	print
 1715              	.LVL234:
 915:Src/main.c    ****         turn_deg(50);
 1716              		.loc 1 915 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 49


 1717 03c6 3220     		movs	r0, #50
 1718 03c8 FFF7FEFF 		bl	turn_deg
 1719              	.LVL235:
 916:Src/main.c    ****         open_claw(&htim3);
 1720              		.loc 1 916 0
 1721 03cc 1D4D     		ldr	r5, .L105+12
 1722 03ce 2846     		mov	r0, r5
 1723 03d0 FFF7FEFF 		bl	open_claw
 1724              	.LVL236:
 917:Src/main.c    ****         HAL_Delay(750);
 1725              		.loc 1 917 0
 1726 03d4 40F2EE20 		movw	r0, #750
 1727 03d8 FFF7FEFF 		bl	HAL_Delay
 1728              	.LVL237:
 918:Src/main.c    ****         arm_down(&htim3);
 1729              		.loc 1 918 0
 1730 03dc 2846     		mov	r0, r5
 1731 03de FFF7FEFF 		bl	arm_down
 1732              	.LVL238:
 919:Src/main.c    ****         slow_actuate(&htim3, BASKET_CH, 10, 180);
 1733              		.loc 1 919 0
 1734 03e2 2846     		mov	r0, r5
 1735 03e4 0821     		movs	r1, #8
 1736 03e6 0A22     		movs	r2, #10
 1737 03e8 B423     		movs	r3, #180
 1738 03ea FFF7FEFF 		bl	slow_actuate
 1739              	.LVL239:
 920:Src/main.c    ****         uint32_t time = HAL_GetTick();
 1740              		.loc 1 920 0
 1741 03ee FFF7FEFF 		bl	HAL_GetTick
 1742              	.LVL240:
 1743 03f2 0546     		mov	r5, r0
 1744              	.LVL241:
 921:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1745              		.loc 1 921 0
 1746 03f4 0820     		movs	r0, #8
 1747              	.LVL242:
 1748 03f6 114B     		ldr	r3, .L105+4
 1749 03f8 1988     		ldrh	r1, [r3]
 1750 03fa FFF7FEFF 		bl	set_motor_speed
 1751              	.LVL243:
 922:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1752              		.loc 1 922 0
 1753 03fe 0020     		movs	r0, #0
 1754 0400 0F4B     		ldr	r3, .L105+8
 1755 0402 1988     		ldrh	r1, [r3]
 1756 0404 FFF7FEFF 		bl	set_motor_speed
 1757              	.LVL244:
 923:Src/main.c    ****         while(HAL_GetTick()-time < 5000){
 1758              		.loc 1 923 0
 1759 0408 02E0     		b	.L100
 1760              	.L101:
 924:Src/main.c    ****             drive_straight(enc_pid);
 1761              		.loc 1 924 0
 1762 040a 2046     		mov	r0, r4
 1763 040c FFF7FEFF 		bl	drive_straight
 1764              	.LVL245:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 50


 1765              	.L100:
 923:Src/main.c    ****         while(HAL_GetTick()-time < 5000){
 1766              		.loc 1 923 0
 1767 0410 FFF7FEFF 		bl	HAL_GetTick
 1768              	.LVL246:
 1769 0414 401B     		subs	r0, r0, r5
 1770 0416 41F28733 		movw	r3, #4999
 1771 041a 9842     		cmp	r0, r3
 1772 041c F5D9     		bls	.L101
 925:Src/main.c    ****         }
 926:Src/main.c    ****         slow_actuate(&htim3, BASKET_CH, 180, 20);
 1773              		.loc 1 926 0
 1774 041e 0948     		ldr	r0, .L105+12
 1775 0420 0821     		movs	r1, #8
 1776 0422 B422     		movs	r2, #180
 1777 0424 1423     		movs	r3, #20
 1778 0426 FFF7FEFF 		bl	slow_actuate
 1779              	.LVL247:
 1780              	.L99:
 1781              	.LBE5:
 927:Src/main.c    ****     }
 928:Src/main.c    ****     searches = 0;
 1782              		.loc 1 928 0
 1783 042a 0023     		movs	r3, #0
 1784 042c 084A     		ldr	r2, .L105+24
 1785 042e 1360     		str	r3, [r2]
 929:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 1786              		.loc 1 929 0
 1787 0430 084A     		ldr	r2, .L105+28
 1788 0432 1370     		strb	r3, [r2]
 930:Src/main.c    ****     return TRUE;
 931:Src/main.c    **** }
 1789              		.loc 1 931 0
 1790 0434 0120     		movs	r0, #1
 1791 0436 38BD     		pop	{r3, r4, r5, pc}
 1792              	.LVL248:
 1793              	.L106:
 1794              		.align	2
 1795              	.L105:
 1796 0438 000C0240 		.word	1073875968
 1797 043c 00000000 		.word	.LANCHOR0
 1798 0440 00000000 		.word	.LANCHOR1
 1799 0444 00000000 		.word	htim3
 1800 0448 00000000 		.word	.LANCHOR2
 1801 044c 64010000 		.word	.LC17
 1802 0450 00000000 		.word	.LANCHOR3
 1803 0454 00000000 		.word	CLAW_INT_STATE
 1804              		.cfi_endproc
 1805              	.LFE137:
 1807              		.section	.text.drive_straight_time,"ax",%progbits
 1808              		.align	2
 1809              		.global	drive_straight_time
 1810              		.thumb
 1811              		.thumb_func
 1813              	drive_straight_time:
 1814              	.LFB127:
 449:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 51


 1815              		.loc 1 449 0
 1816              		.cfi_startproc
 1817              		@ args = 0, pretend = 0, frame = 0
 1818              		@ frame_needed = 0, uses_anonymous_args = 0
 1819              	.LVL249:
 1820 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1821              	.LCFI21:
 1822              		.cfi_def_cfa_offset 24
 1823              		.cfi_offset 4, -24
 1824              		.cfi_offset 5, -20
 1825              		.cfi_offset 6, -16
 1826              		.cfi_offset 7, -12
 1827              		.cfi_offset 8, -8
 1828              		.cfi_offset 14, -4
 1829 0004 0646     		mov	r6, r0
 1830 0006 8846     		mov	r8, r1
 1831 0008 1746     		mov	r7, r2
 1832 000a 1D46     		mov	r5, r3
 450:Src/main.c    ****     char msg[50] = "";
 1833              		.loc 1 450 0
 1834 000c FFF7FEFF 		bl	HAL_GetTick
 1835              	.LVL250:
 1836 0010 0446     		mov	r4, r0
 1837              	.LVL251:
 453:Src/main.c    ****     {
 1838              		.loc 1 453 0
 1839 0012 19E0     		b	.L108
 1840              	.LVL252:
 1841              	.L112:
 455:Src/main.c    ****         {
 1842              		.loc 1 455 0
 1843 0014 1448     		ldr	r0, .L114
 1844 0016 1021     		movs	r1, #16
 1845 0018 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1846              	.LVL253:
 1847 001c 0128     		cmp	r0, #1
 1848 001e 08D1     		bne	.L109
 457:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 1849              		.loc 1 457 0
 1850 0020 1248     		ldr	r0, .L114+4
 1851 0022 0021     		movs	r1, #0
 1852 0024 FFF7FEFF 		bl	print
 1853              	.LVL254:
 458:Src/main.c    ****         }
 1854              		.loc 1 458 0
 1855 0028 3046     		mov	r0, r6
 1856 002a FFF7FEFF 		bl	debounce_and_grab
 1857              	.LVL255:
 1858 002e 58B1     		cbz	r0, .L108
 1859 0030 0FE0     		b	.L110
 1860              	.L109:
 477:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 1861              		.loc 1 477 0
 1862 0032 0020     		movs	r0, #0
 1863 0034 4146     		mov	r1, r8
 1864 0036 FFF7FEFF 		bl	set_motor_speed
 1865              	.LVL256:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 52


 478:Src/main.c    ****             drive_straight(enc_pid);
 1866              		.loc 1 478 0
 1867 003a 0820     		movs	r0, #8
 1868 003c 3946     		mov	r1, r7
 1869 003e FFF7FEFF 		bl	set_motor_speed
 1870              	.LVL257:
 479:Src/main.c    **** 
 1871              		.loc 1 479 0
 1872 0042 3046     		mov	r0, r6
 1873 0044 FFF7FEFF 		bl	drive_straight
 1874              	.LVL258:
 1875              	.L108:
 453:Src/main.c    ****     {
 1876              		.loc 1 453 0
 1877 0048 FFF7FEFF 		bl	HAL_GetTick
 1878              	.LVL259:
 1879 004c 001B     		subs	r0, r0, r4
 1880 004e A842     		cmp	r0, r5
 1881 0050 E0D3     		bcc	.L112
 1882              	.L110:
 483:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1883              		.loc 1 483 0
 1884 0052 0020     		movs	r0, #0
 1885 0054 0146     		mov	r1, r0
 1886 0056 FFF7FEFF 		bl	set_motor_speed
 1887              	.LVL260:
 484:Src/main.c    **** }
 1888              		.loc 1 484 0
 1889 005a 0820     		movs	r0, #8
 1890 005c 0021     		movs	r1, #0
 1891 005e FFF7FEFF 		bl	set_motor_speed
 1892              	.LVL261:
 1893 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1894              	.LVL262:
 1895              	.L115:
 1896 0066 00BF     		.align	2
 1897              	.L114:
 1898 0068 00040240 		.word	1073873920
 1899 006c 78010000 		.word	.LC18
 1900              		.cfi_endproc
 1901              	.LFE127:
 1903              		.section	.text.test_PWM_htim1,"ax",%progbits
 1904              		.align	2
 1905              		.global	test_PWM_htim1
 1906              		.thumb
 1907              		.thumb_func
 1909              	test_PWM_htim1:
 1910              	.LFB138:
 932:Src/main.c    **** 
 933:Src/main.c    **** // ******
 934:Src/main.c    **** // TESTS
 935:Src/main.c    **** // ******
 936:Src/main.c    **** 
 937:Src/main.c    **** /*
 938:Src/main.c    ****  * Instructions:
 939:Src/main.c    ****  *      Run test_All() before the main while loop
 940:Src/main.c    ****  *      - Put a pull up resistor on htim3 PWM waves, measure voltage on pin
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 53


 941:Src/main.c    ****  *      - Measure voltage on pin of htim1
 942:Src/main.c    ****  *      - Give ADC pins values and read off of screen
 943:Src/main.c    ****  */
 944:Src/main.c    **** 
 945:Src/main.c    **** /*
 946:Src/main.c    ****  * Test PWM
 947:Src/main.c    ****  * Output: htim1 channel 1 through 4, PWM wave. Confirm these
 948:Src/main.c    ****  *         PWM waves via an oscilliscope.
 949:Src/main.c    ****  */
 950:Src/main.c    **** void test_PWM_htim1()
 951:Src/main.c    **** {
 1911              		.loc 1 951 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 1915 0000 10B5     		push	{r4, lr}
 1916              	.LCFI22:
 1917              		.cfi_def_cfa_offset 8
 1918              		.cfi_offset 4, -8
 1919              		.cfi_offset 14, -4
 952:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1920              		.loc 1 952 0
 1921 0002 0C4C     		ldr	r4, .L120
 1922 0004 2046     		mov	r0, r4
 1923 0006 0021     		movs	r1, #0
 1924 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1925              	.LVL263:
 953:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 954:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1926              		.loc 1 954 0
 1927 000c 2046     		mov	r0, r4
 1928 000e 0821     		movs	r1, #8
 1929 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1930              	.LVL264:
 955:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 956:Src/main.c    ****     int s = 0;
 1931              		.loc 1 956 0
 1932 0014 0024     		movs	r4, #0
 957:Src/main.c    ****     while (s < 1000)
 1933              		.loc 1 957 0
 1934 0016 08E0     		b	.L117
 1935              	.LVL265:
 1936              	.L118:
 958:Src/main.c    ****     {
 959:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, s);
 1937              		.loc 1 959 0
 1938 0018 064B     		ldr	r3, .L120
 1939 001a 1B68     		ldr	r3, [r3]
 1940 001c 5C63     		str	r4, [r3, #52]
 960:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 961:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, s);
 1941              		.loc 1 961 0
 1942 001e DC63     		str	r4, [r3, #60]
 962:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 963:Src/main.c    ****         s += 100;
 1943              		.loc 1 963 0
 1944 0020 6434     		adds	r4, r4, #100
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 54


 1945              	.LVL266:
 964:Src/main.c    ****         HAL_Delay(1000);
 1946              		.loc 1 964 0
 1947 0022 4FF47A70 		mov	r0, #1000
 1948 0026 FFF7FEFF 		bl	HAL_Delay
 1949              	.LVL267:
 1950              	.L117:
 957:Src/main.c    ****     {
 1951              		.loc 1 957 0
 1952 002a B4F57A7F 		cmp	r4, #1000
 1953 002e F3DB     		blt	.L118
 965:Src/main.c    ****     }
 966:Src/main.c    **** }
 1954              		.loc 1 966 0
 1955 0030 10BD     		pop	{r4, pc}
 1956              	.LVL268:
 1957              	.L121:
 1958 0032 00BF     		.align	2
 1959              	.L120:
 1960 0034 00000000 		.word	htim1
 1961              		.cfi_endproc
 1962              	.LFE138:
 1964              		.section	.text.test_PWM_htim3,"ax",%progbits
 1965              		.align	2
 1966              		.global	test_PWM_htim3
 1967              		.thumb
 1968              		.thumb_func
 1970              	test_PWM_htim3:
 1971              	.LFB139:
 967:Src/main.c    **** 
 968:Src/main.c    **** /*
 969:Src/main.c    ****  * Test PWM
 970:Src/main.c    ****  * Output: htim3 channel 1 through 3, PWM wave. Confirm these
 971:Src/main.c    ****  *         PWM waves via an oscilliscope.
 972:Src/main.c    ****  */
 973:Src/main.c    **** void test_PWM_htim3()
 974:Src/main.c    **** {
 1972              		.loc 1 974 0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 0
 1975              		@ frame_needed = 0, uses_anonymous_args = 0
 1976 0000 10B5     		push	{r4, lr}
 1977              	.LCFI23:
 1978              		.cfi_def_cfa_offset 8
 1979              		.cfi_offset 4, -8
 1980              		.cfi_offset 14, -4
 975:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1981              		.loc 1 975 0
 1982 0002 0F4C     		ldr	r4, .L126
 1983 0004 2046     		mov	r0, r4
 1984 0006 0021     		movs	r1, #0
 1985 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1986              	.LVL269:
 976:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1987              		.loc 1 976 0
 1988 000c 2046     		mov	r0, r4
 1989 000e 0421     		movs	r1, #4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 55


 1990 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1991              	.LVL270:
 977:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1992              		.loc 1 977 0
 1993 0014 2046     		mov	r0, r4
 1994 0016 0821     		movs	r1, #8
 1995 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1996              	.LVL271:
 978:Src/main.c    **** 
 979:Src/main.c    ****     int s = 500;
 1997              		.loc 1 979 0
 1998 001c 4FF4FA74 		mov	r4, #500
 980:Src/main.c    ****     while (s < 2400)
 1999              		.loc 1 980 0
 2000 0020 09E0     		b	.L123
 2001              	.LVL272:
 2002              	.L124:
 981:Src/main.c    ****     {
 982:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s);
 2003              		.loc 1 982 0
 2004 0022 074B     		ldr	r3, .L126
 2005 0024 1B68     		ldr	r3, [r3]
 2006 0026 5C63     		str	r4, [r3, #52]
 983:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s);
 2007              		.loc 1 983 0
 2008 0028 9C63     		str	r4, [r3, #56]
 984:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, s);
 2009              		.loc 1 984 0
 2010 002a DC63     		str	r4, [r3, #60]
 985:Src/main.c    ****         s += 100;
 2011              		.loc 1 985 0
 2012 002c 6434     		adds	r4, r4, #100
 2013              	.LVL273:
 986:Src/main.c    ****         HAL_Delay(500);
 2014              		.loc 1 986 0
 2015 002e 4FF4FA70 		mov	r0, #500
 2016 0032 FFF7FEFF 		bl	HAL_Delay
 2017              	.LVL274:
 2018              	.L123:
 980:Src/main.c    ****     {
 2019              		.loc 1 980 0
 2020 0036 B4F5166F 		cmp	r4, #2400
 2021 003a F2DB     		blt	.L124
 987:Src/main.c    ****     }
 988:Src/main.c    **** }
 2022              		.loc 1 988 0
 2023 003c 10BD     		pop	{r4, pc}
 2024              	.LVL275:
 2025              	.L127:
 2026 003e 00BF     		.align	2
 2027              	.L126:
 2028 0040 00000000 		.word	htim3
 2029              		.cfi_endproc
 2030              	.LFE139:
 2032              		.section	.text.test_ADC,"ax",%progbits
 2033              		.align	2
 2034              		.global	test_ADC
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 56


 2035              		.thumb
 2036              		.thumb_func
 2038              	test_ADC:
 2039              	.LFB140:
 989:Src/main.c    **** 
 990:Src/main.c    **** void test_ADC()
 991:Src/main.c    **** {
 2040              		.loc 1 991 0
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 24
 2043              		@ frame_needed = 0, uses_anonymous_args = 0
 2044 0000 10B5     		push	{r4, lr}
 2045              	.LCFI24:
 2046              		.cfi_def_cfa_offset 8
 2047              		.cfi_offset 4, -8
 2048              		.cfi_offset 14, -4
 2049 0002 86B0     		sub	sp, sp, #24
 2050              	.LCFI25:
 2051              		.cfi_def_cfa_offset 32
 992:Src/main.c    ****     char msg[18] = "";
 2052              		.loc 1 992 0
 2053 0004 0023     		movs	r3, #0
 2054 0006 0193     		str	r3, [sp, #4]
 2055 0008 0293     		str	r3, [sp, #8]
 2056 000a 0393     		str	r3, [sp, #12]
 2057 000c 0493     		str	r3, [sp, #16]
 2058 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
 993:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 2059              		.loc 1 993 0
 2060 0012 0F48     		ldr	r0, .L131
 2061 0014 0F49     		ldr	r1, .L131+4
 2062 0016 4FF40062 		mov	r2, #2048
 2063 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2064              	.LVL276:
 2065              	.L129:
 2066              	.LBB6:
 994:Src/main.c    **** 
 995:Src/main.c    ****     while (1)
 996:Src/main.c    ****     {
 997:Src/main.c    ****         int ch_5 = adc_values[0];
 2067              		.loc 1 997 0 discriminator 1
 2068 001e 0E4B     		ldr	r3, .L131+8
 2069              	.LVL277:
 998:Src/main.c    ****         int ch_4 = adc_values[1];
 2070              		.loc 1 998 0 discriminator 1
 2071 0020 5C68     		ldr	r4, [r3, #4]
 2072              	.LVL278:
 999:Src/main.c    **** 
1000:Src/main.c    ****         sprintf(msg, "ch_5: %d\n", ch_5);
 2073              		.loc 1 1000 0 discriminator 1
 2074 0022 01A8     		add	r0, sp, #4
 2075 0024 0D49     		ldr	r1, .L131+12
 2076 0026 1A68     		ldr	r2, [r3]
 2077 0028 FFF7FEFF 		bl	sprintf
 2078              	.LVL279:
1001:Src/main.c    ****         print(msg, 0);
 2079              		.loc 1 1001 0 discriminator 1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 57


 2080 002c 01A8     		add	r0, sp, #4
 2081 002e 0021     		movs	r1, #0
 2082 0030 FFF7FEFF 		bl	print
 2083              	.LVL280:
1002:Src/main.c    **** 
1003:Src/main.c    ****         sprintf(msg, "ch_4: %d\n", ch_4);
 2084              		.loc 1 1003 0 discriminator 1
 2085 0034 01A8     		add	r0, sp, #4
 2086 0036 0A49     		ldr	r1, .L131+16
 2087 0038 2246     		mov	r2, r4
 2088 003a FFF7FEFF 		bl	sprintf
 2089              	.LVL281:
1004:Src/main.c    ****         print(msg, 2);
 2090              		.loc 1 1004 0 discriminator 1
 2091 003e 01A8     		add	r0, sp, #4
 2092 0040 0221     		movs	r1, #2
 2093 0042 FFF7FEFF 		bl	print
 2094              	.LVL282:
1005:Src/main.c    **** 
1006:Src/main.c    ****         HAL_Delay(100);
 2095              		.loc 1 1006 0 discriminator 1
 2096 0046 6420     		movs	r0, #100
 2097 0048 FFF7FEFF 		bl	HAL_Delay
 2098              	.LVL283:
 2099              	.LBE6:
1007:Src/main.c    ****     }
 2100              		.loc 1 1007 0 discriminator 1
 2101 004c E7E7     		b	.L129
 2102              	.L132:
 2103 004e 00BF     		.align	2
 2104              	.L131:
 2105 0050 00000000 		.word	hadc1
 2106 0054 00000000 		.word	dma_buffer
 2107 0058 00000000 		.word	adc_values
 2108 005c 88010000 		.word	.LC19
 2109 0060 94010000 		.word	.LC20
 2110              		.cfi_endproc
 2111              	.LFE140:
 2113              		.section	.text.test_All,"ax",%progbits
 2114              		.align	2
 2115              		.global	test_All
 2116              		.thumb
 2117              		.thumb_func
 2119              	test_All:
 2120              	.LFB141:
1008:Src/main.c    **** }
1009:Src/main.c    **** 
1010:Src/main.c    **** /**
1011:Src/main.c    ****  * Test all PWM and ADC - Read PWM waves, input ADC voltages 
1012:Src/main.c    ****  * and read values on OLED
1013:Src/main.c    ****  *      htim1 -> CH1, CH2, CH3, CH4
1014:Src/main.c    ****  *      htim3 -> CH1, CH2, CH3
1015:Src/main.c    ****  *      ADC   -> CH5, CH4
1016:Src/main.c    ****  */
1017:Src/main.c    **** void test_All()
1018:Src/main.c    **** {
 2121              		.loc 1 1018 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 58


 2122              		.cfi_startproc
 2123              		@ Volatile: function does not return.
 2124              		@ args = 0, pretend = 0, frame = 0
 2125              		@ frame_needed = 0, uses_anonymous_args = 0
 2126 0000 08B5     		push	{r3, lr}
 2127              	.LCFI26:
 2128              		.cfi_def_cfa_offset 8
 2129              		.cfi_offset 3, -8
 2130              		.cfi_offset 14, -4
1019:Src/main.c    ****     test_PWM_htim1();
 2131              		.loc 1 1019 0
 2132 0002 FFF7FEFF 		bl	test_PWM_htim1
 2133              	.LVL284:
1020:Src/main.c    ****     test_PWM_htim3();
 2134              		.loc 1 1020 0
 2135 0006 FFF7FEFF 		bl	test_PWM_htim3
 2136              	.LVL285:
1021:Src/main.c    ****     test_ADC();
 2137              		.loc 1 1021 0
 2138 000a FFF7FEFF 		bl	test_ADC
 2139              	.LVL286:
 2140              		.cfi_endproc
 2141              	.LFE141:
 2143 000e 00BF     		.section	.text._Error_Handler,"ax",%progbits
 2144              		.align	2
 2145              		.global	_Error_Handler
 2146              		.thumb
 2147              		.thumb_func
 2149              	_Error_Handler:
 2150              	.LFB142:
1022:Src/main.c    **** }
1023:Src/main.c    **** // ******
1024:Src/main.c    **** // END TESTS
1025:Src/main.c    **** // ******
1026:Src/main.c    **** 
1027:Src/main.c    **** /* USER CODE END 4 */
1028:Src/main.c    **** 
1029:Src/main.c    **** /**
1030:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
1031:Src/main.c    ****  * @param  file: The file name as string.
1032:Src/main.c    ****  * @param  line: The line in file as a number.
1033:Src/main.c    ****  * @retval None
1034:Src/main.c    ****  */
1035:Src/main.c    **** void _Error_Handler(char *file, int line)
1036:Src/main.c    **** {
 2151              		.loc 1 1036 0
 2152              		.cfi_startproc
 2153              		@ Volatile: function does not return.
 2154              		@ args = 0, pretend = 0, frame = 0
 2155              		@ frame_needed = 0, uses_anonymous_args = 0
 2156              		@ link register save eliminated.
 2157              	.LVL287:
 2158              	.L136:
1037:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
1038:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
1039:Src/main.c    ****     while (1)
1040:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 59


1041:Src/main.c    ****     }
 2159              		.loc 1 1041 0 discriminator 1
 2160 0000 FEE7     		b	.L136
 2161              		.cfi_endproc
 2162              	.LFE142:
 2164 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 2165              		.align	2
 2166              		.global	SystemClock_Config
 2167              		.thumb
 2168              		.thumb_func
 2170              	SystemClock_Config:
 2171              	.LFB125:
 370:Src/main.c    **** 
 2172              		.loc 1 370 0
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 80
 2175              		@ frame_needed = 0, uses_anonymous_args = 0
 2176 0000 00B5     		push	{lr}
 2177              	.LCFI27:
 2178              		.cfi_def_cfa_offset 4
 2179              		.cfi_offset 14, -4
 2180 0002 95B0     		sub	sp, sp, #84
 2181              	.LCFI28:
 2182              		.cfi_def_cfa_offset 88
 2183              	.LBB7:
 377:Src/main.c    **** 
 2184              		.loc 1 377 0
 2185 0004 0022     		movs	r2, #0
 2186 0006 0192     		str	r2, [sp, #4]
 2187 0008 2A4B     		ldr	r3, .L141
 2188 000a 196C     		ldr	r1, [r3, #64]
 2189 000c 41F08051 		orr	r1, r1, #268435456
 2190 0010 1964     		str	r1, [r3, #64]
 2191 0012 1B6C     		ldr	r3, [r3, #64]
 2192 0014 03F08053 		and	r3, r3, #268435456
 2193 0018 0193     		str	r3, [sp, #4]
 2194 001a 019B     		ldr	r3, [sp, #4]
 2195              	.LBE7:
 2196              	.LBB8:
 379:Src/main.c    **** 
 2197              		.loc 1 379 0
 2198 001c 0292     		str	r2, [sp, #8]
 2199 001e 2649     		ldr	r1, .L141+4
 2200 0020 0B68     		ldr	r3, [r1]
 2201 0022 23F44043 		bic	r3, r3, #49152
 2202 0026 43F40043 		orr	r3, r3, #32768
 2203 002a 0B60     		str	r3, [r1]
 2204 002c 0B68     		ldr	r3, [r1]
 2205 002e 03F44043 		and	r3, r3, #49152
 2206 0032 0293     		str	r3, [sp, #8]
 2207 0034 029B     		ldr	r3, [sp, #8]
 2208              	.LBE8:
 383:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2209              		.loc 1 383 0
 2210 0036 0223     		movs	r3, #2
 2211 0038 0893     		str	r3, [sp, #32]
 384:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 60


 2212              		.loc 1 384 0
 2213 003a 0121     		movs	r1, #1
 2214 003c 0B91     		str	r1, [sp, #44]
 385:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2215              		.loc 1 385 0
 2216 003e 1021     		movs	r1, #16
 2217 0040 0C91     		str	r1, [sp, #48]
 386:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2218              		.loc 1 386 0
 2219 0042 0E93     		str	r3, [sp, #56]
 387:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 2220              		.loc 1 387 0
 2221 0044 0F92     		str	r2, [sp, #60]
 388:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 2222              		.loc 1 388 0
 2223 0046 0822     		movs	r2, #8
 2224 0048 1092     		str	r2, [sp, #64]
 389:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2225              		.loc 1 389 0
 2226 004a 4822     		movs	r2, #72
 2227 004c 1192     		str	r2, [sp, #68]
 390:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 2228              		.loc 1 390 0
 2229 004e 1293     		str	r3, [sp, #72]
 391:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2230              		.loc 1 391 0
 2231 0050 0423     		movs	r3, #4
 2232 0052 1393     		str	r3, [sp, #76]
 392:Src/main.c    ****     {
 2233              		.loc 1 392 0
 2234 0054 08A8     		add	r0, sp, #32
 2235 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2236              	.LVL288:
 2237 005a 20B1     		cbz	r0, .L138
 394:Src/main.c    ****     }
 2238              		.loc 1 394 0
 2239 005c 1748     		ldr	r0, .L141+8
 2240 005e 4FF4C571 		mov	r1, #394
 2241 0062 FFF7FEFF 		bl	_Error_Handler
 2242              	.LVL289:
 2243              	.L138:
 399:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2244              		.loc 1 399 0
 2245 0066 0F23     		movs	r3, #15
 2246 0068 0393     		str	r3, [sp, #12]
 401:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2247              		.loc 1 401 0
 2248 006a 0221     		movs	r1, #2
 2249 006c 0491     		str	r1, [sp, #16]
 402:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2250              		.loc 1 402 0
 2251 006e 0023     		movs	r3, #0
 2252 0070 0593     		str	r3, [sp, #20]
 403:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2253              		.loc 1 403 0
 2254 0072 4FF48052 		mov	r2, #4096
 2255 0076 0692     		str	r2, [sp, #24]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 61


 404:Src/main.c    **** 
 2256              		.loc 1 404 0
 2257 0078 0793     		str	r3, [sp, #28]
 406:Src/main.c    ****     {
 2258              		.loc 1 406 0
 2259 007a 03A8     		add	r0, sp, #12
 2260 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2261              	.LVL290:
 2262 0080 20B1     		cbz	r0, .L139
 408:Src/main.c    ****     }
 2263              		.loc 1 408 0
 2264 0082 0E48     		ldr	r0, .L141+8
 2265 0084 4FF4CC71 		mov	r1, #408
 2266 0088 FFF7FEFF 		bl	_Error_Handler
 2267              	.LVL291:
 2268              	.L139:
 413:Src/main.c    **** 
 2269              		.loc 1 413 0
 2270 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2271              	.LVL292:
 2272 0090 0B4B     		ldr	r3, .L141+12
 2273 0092 A3FB0030 		umull	r3, r0, r3, r0
 2274 0096 8009     		lsrs	r0, r0, #6
 2275 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 2276              	.LVL293:
 417:Src/main.c    **** 
 2277              		.loc 1 417 0
 2278 009c 0420     		movs	r0, #4
 2279 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 2280              	.LVL294:
 420:Src/main.c    **** }
 2281              		.loc 1 420 0
 2282 00a2 4FF0FF30 		mov	r0, #-1
 2283 00a6 0021     		movs	r1, #0
 2284 00a8 0A46     		mov	r2, r1
 2285 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 2286              	.LVL295:
 421:Src/main.c    **** 
 2287              		.loc 1 421 0
 2288 00ae 15B0     		add	sp, sp, #84
 2289              	.LCFI29:
 2290              		.cfi_def_cfa_offset 4
 2291              		@ sp needed
 2292 00b0 5DF804FB 		ldr	pc, [sp], #4
 2293              	.L142:
 2294              		.align	2
 2295              	.L141:
 2296 00b4 00380240 		.word	1073887232
 2297 00b8 00700040 		.word	1073770496
 2298 00bc A0010000 		.word	.LC21
 2299 00c0 D34D6210 		.word	274877907
 2300              		.cfi_endproc
 2301              	.LFE125:
 2303              		.section	.text.main,"ax",%progbits
 2304              		.align	2
 2305              		.global	main
 2306              		.thumb
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 62


 2307              		.thumb_func
 2309              	main:
 2310              	.LFB124:
 115:Src/main.c    ****     /* USER CODE BEGIN 1 */
 2311              		.loc 1 115 0
 2312              		.cfi_startproc
 2313              		@ args = 0, pretend = 0, frame = 24
 2314              		@ frame_needed = 0, uses_anonymous_args = 0
 2315 0000 70B5     		push	{r4, r5, r6, lr}
 2316              	.LCFI30:
 2317              		.cfi_def_cfa_offset 16
 2318              		.cfi_offset 4, -16
 2319              		.cfi_offset 5, -12
 2320              		.cfi_offset 6, -8
 2321              		.cfi_offset 14, -4
 2322 0002 88B0     		sub	sp, sp, #32
 2323              	.LCFI31:
 2324              		.cfi_def_cfa_offset 48
 123:Src/main.c    **** 
 2325              		.loc 1 123 0
 2326 0004 FFF7FEFF 		bl	HAL_Init
 2327              	.LVL296:
 130:Src/main.c    **** 
 2328              		.loc 1 130 0
 2329 0008 FFF7FEFF 		bl	SystemClock_Config
 2330              	.LVL297:
 137:Src/main.c    ****     MX_DMA_Init();
 2331              		.loc 1 137 0
 2332 000c FFF7FEFF 		bl	MX_GPIO_Init
 2333              	.LVL298:
 138:Src/main.c    ****     MX_TIM3_Init();
 2334              		.loc 1 138 0
 2335 0010 FFF7FEFF 		bl	MX_DMA_Init
 2336              	.LVL299:
 139:Src/main.c    ****     MX_TIM1_Init();
 2337              		.loc 1 139 0
 2338 0014 FFF7FEFF 		bl	MX_TIM3_Init
 2339              	.LVL300:
 140:Src/main.c    ****     MX_TIM2_Init();
 2340              		.loc 1 140 0
 2341 0018 FFF7FEFF 		bl	MX_TIM1_Init
 2342              	.LVL301:
 141:Src/main.c    ****     MX_ADC1_Init();
 2343              		.loc 1 141 0
 2344 001c FFF7FEFF 		bl	MX_TIM2_Init
 2345              	.LVL302:
 142:Src/main.c    ****     MX_TIM4_Init();
 2346              		.loc 1 142 0
 2347 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2348              	.LVL303:
 143:Src/main.c    ****     MX_TIM9_Init();
 2349              		.loc 1 143 0
 2350 0024 FFF7FEFF 		bl	MX_TIM4_Init
 2351              	.LVL304:
 144:Src/main.c    ****     MX_TIM5_Init();
 2352              		.loc 1 144 0
 2353 0028 FFF7FEFF 		bl	MX_TIM9_Init
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 63


 2354              	.LVL305:
 145:Src/main.c    ****     MX_I2C1_Init();
 2355              		.loc 1 145 0
 2356 002c FFF7FEFF 		bl	MX_TIM5_Init
 2357              	.LVL306:
 146:Src/main.c    ****     MX_USART6_UART_Init();
 2358              		.loc 1 146 0
 2359 0030 FFF7FEFF 		bl	MX_I2C1_Init
 2360              	.LVL307:
 147:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2361              		.loc 1 147 0
 2362 0034 FFF7FEFF 		bl	MX_USART6_UART_Init
 2363              	.LVL308:
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 2364              		.loc 1 164 0
 2365 0038 8248     		ldr	r0, .L162
 2366 003a 1821     		movs	r1, #24
 2367 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2368              	.LVL309:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 2369              		.loc 1 165 0
 2370 0040 8148     		ldr	r0, .L162+4
 2371 0042 1821     		movs	r1, #24
 2372 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2373              	.LVL310:
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 2374              		.loc 1 166 0
 2375 0048 804C     		ldr	r4, .L162+8
 2376 004a 2046     		mov	r0, r4
 2377 004c 0021     		movs	r1, #0
 2378 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2379              	.LVL311:
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 2380              		.loc 1 167 0
 2381 0052 2046     		mov	r0, r4
 2382 0054 0421     		movs	r1, #4
 2383 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2384              	.LVL312:
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 2385              		.loc 1 168 0
 2386 005a 2046     		mov	r0, r4
 2387 005c 0821     		movs	r1, #8
 2388 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2389              	.LVL313:
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2390              		.loc 1 169 0
 2391 0062 2046     		mov	r0, r4
 2392 0064 0C21     		movs	r1, #12
 2393 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2394              	.LVL314:
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 2395              		.loc 1 170 0
 2396 006a 794C     		ldr	r4, .L162+12
 2397 006c 2046     		mov	r0, r4
 2398 006e 0021     		movs	r1, #0
 2399 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2400              	.LVL315:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 64


 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 2401              		.loc 1 171 0
 2402 0074 2046     		mov	r0, r4
 2403 0076 0421     		movs	r1, #4
 2404 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2405              	.LVL316:
 172:Src/main.c    **** 
 2406              		.loc 1 172 0
 2407 007c 2046     		mov	r0, r4
 2408 007e 0821     		movs	r1, #8
 2409 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2410              	.LVL317:
 175:Src/main.c    ****     print("Starting\n", 0);
 2411              		.loc 1 175 0
 2412 0084 FFF7FEFF 		bl	ssd1306_Init
 2413              	.LVL318:
 176:Src/main.c    ****     claw_init(&htim3);
 2414              		.loc 1 176 0
 2415 0088 7248     		ldr	r0, .L162+16
 2416 008a 0021     		movs	r1, #0
 2417 008c FFF7FEFF 		bl	print
 2418              	.LVL319:
 177:Src/main.c    ****     // basket_init(&htim3);
 2419              		.loc 1 177 0
 2420 0090 2046     		mov	r0, r4
 2421 0092 FFF7FEFF 		bl	claw_init
 2422              	.LVL320:
 180:Src/main.c    **** 
 2423              		.loc 1 180 0
 2424 0096 0221     		movs	r1, #2
 2425 0098 0091     		str	r1, [sp]
 2426 009a 0123     		movs	r3, #1
 2427 009c 0193     		str	r3, [sp, #4]
 2428 009e 02A8     		add	r0, sp, #8
 2429 00a0 0022     		movs	r2, #0
 2430 00a2 1346     		mov	r3, r2
 2431 00a4 FFF7FEFF 		bl	pid_Init
 2432              	.LVL321:
 182:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 2433              		.loc 1 182 0
 2434 00a8 0024     		movs	r4, #0
 2435 00aa 6B4B     		ldr	r3, .L162+20
 2436 00ac 1C70     		strb	r4, [r3]
 183:Src/main.c    **** 
 2437              		.loc 1 183 0
 2438 00ae 6B4B     		ldr	r3, .L162+24
 2439 00b0 1C70     		strb	r4, [r3]
 185:Src/main.c    **** 
 2440              		.loc 1 185 0
 2441 00b2 6B4D     		ldr	r5, .L162+28
 2442 00b4 2988     		ldrh	r1, [r5]
 2443 00b6 6B4E     		ldr	r6, .L162+32
 2444 00b8 02A8     		add	r0, sp, #8
 2445 00ba 5031     		adds	r1, r1, #80
 2446 00bc 3288     		ldrh	r2, [r6]
 2447 00be 4FF4FA63 		mov	r3, #2000
 2448 00c2 FFF7FEFF 		bl	drive_straight_time
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 65


 2449              	.LVL322:
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 2450              		.loc 1 188 0
 2451 00c6 0620     		movs	r0, #6
 2452 00c8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2453              	.LVL323:
 189:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 2454              		.loc 1 189 0
 2455 00cc 0A20     		movs	r0, #10
 2456 00ce FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2457              	.LVL324:
 190:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 2458              		.loc 1 190 0
 2459 00d2 654B     		ldr	r3, .L162+36
 2460 00d4 1C70     		strb	r4, [r3]
 191:Src/main.c    **** 
 2461              		.loc 1 191 0
 2462 00d6 654B     		ldr	r3, .L162+40
 2463 00d8 1C70     		strb	r4, [r3]
 193:Src/main.c    ****     print("ewok\n", 0);
 2464              		.loc 1 193 0
 2465 00da 3288     		ldrh	r2, [r6]
 2466 00dc 02A8     		add	r0, sp, #8
 2467 00de 2988     		ldrh	r1, [r5]
 2468 00e0 0A32     		adds	r2, r2, #10
 2469 00e2 41F28833 		movw	r3, #5000
 2470 00e6 FFF7FEFF 		bl	drive_straight_time
 2471              	.LVL325:
 194:Src/main.c    **** 
 2472              		.loc 1 194 0
 2473 00ea 6148     		ldr	r0, .L162+44
 2474 00ec 2146     		mov	r1, r4
 2475 00ee FFF7FEFF 		bl	print
 2476              	.LVL326:
 2477              	.L144:
 206:Src/main.c    ****         {
 2478              		.loc 1 206 0
 2479 00f2 5D4B     		ldr	r3, .L162+36
 2480 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2481 00f6 012B     		cmp	r3, #1
 2482 00f8 3AD1     		bne	.L145
 2483              	.LBB9:
 209:Src/main.c    ****             // Turn to ewok
 2484              		.loc 1 209 0
 2485 00fa 5E48     		ldr	r0, .L162+48
 2486 00fc 0021     		movs	r1, #0
 2487 00fe FFF7FEFF 		bl	print
 2488              	.LVL327:
 211:Src/main.c    **** 
 2489              		.loc 1 211 0
 2490 0102 FFF7FEFF 		bl	turn
 2491              	.LVL328:
 215:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2492              		.loc 1 215 0
 2493 0106 FFF7FEFF 		bl	HAL_GetTick
 2494              	.LVL329:
 2495 010a 0446     		mov	r4, r0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 66


 2496              	.LVL330:
 216:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2497              		.loc 1 216 0
 2498 010c 0020     		movs	r0, #0
 2499              	.LVL331:
 2500 010e 544B     		ldr	r3, .L162+28
 2501 0110 1988     		ldrh	r1, [r3]
 2502 0112 FFF7FEFF 		bl	set_motor_speed
 2503              	.LVL332:
 217:Src/main.c    ****             while(HAL_GetTick()-time<2800){
 2504              		.loc 1 217 0
 2505 0116 0820     		movs	r0, #8
 2506 0118 524B     		ldr	r3, .L162+32
 2507 011a 1988     		ldrh	r1, [r3]
 2508 011c FFF7FEFF 		bl	set_motor_speed
 2509              	.LVL333:
 218:Src/main.c    ****                 drive_straight(&enc_pid);
 2510              		.loc 1 218 0
 2511 0120 10E0     		b	.L146
 2512              	.L148:
 219:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 2513              		.loc 1 219 0
 2514 0122 02A8     		add	r0, sp, #8
 2515 0124 FFF7FEFF 		bl	drive_straight
 2516              	.LVL334:
 221:Src/main.c    ****                 {
 2517              		.loc 1 221 0
 2518 0128 5348     		ldr	r0, .L162+52
 2519 012a 1021     		movs	r1, #16
 2520 012c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2521              	.LVL335:
 2522 0130 0128     		cmp	r0, #1
 2523 0132 07D1     		bne	.L146
 223:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 2524              		.loc 1 223 0
 2525 0134 5148     		ldr	r0, .L162+56
 2526 0136 0021     		movs	r1, #0
 2527 0138 FFF7FEFF 		bl	print
 2528              	.LVL336:
 224:Src/main.c    ****                     break;
 2529              		.loc 1 224 0
 2530 013c 02A8     		add	r0, sp, #8
 2531 013e FFF7FEFF 		bl	debounce_and_grab
 2532              	.LVL337:
 225:Src/main.c    ****                 }
 2533              		.loc 1 225 0
 2534 0142 05E0     		b	.L147
 2535              	.L146:
 218:Src/main.c    ****                 drive_straight(&enc_pid);
 2536              		.loc 1 218 0
 2537 0144 FFF7FEFF 		bl	HAL_GetTick
 2538              	.LVL338:
 2539 0148 001B     		subs	r0, r0, r4
 2540 014a B0F52F6F 		cmp	r0, #2800
 2541 014e E8D3     		bcc	.L148
 2542              	.L147:
 228:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 67


 2543              		.loc 1 228 0
 2544 0150 0020     		movs	r0, #0
 2545 0152 0146     		mov	r1, r0
 2546 0154 FFF7FEFF 		bl	set_motor_speed
 2547              	.LVL339:
 229:Src/main.c    ****             print("ewok\n", 0);
 2548              		.loc 1 229 0
 2549 0158 0820     		movs	r0, #8
 2550 015a 0021     		movs	r1, #0
 2551 015c FFF7FEFF 		bl	set_motor_speed
 2552              	.LVL340:
 230:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 2553              		.loc 1 230 0
 2554 0160 4348     		ldr	r0, .L162+44
 2555 0162 0021     		movs	r1, #0
 2556 0164 FFF7FEFF 		bl	print
 2557              	.LVL341:
 231:Src/main.c    **** 
 2558              		.loc 1 231 0
 2559 0168 0022     		movs	r2, #0
 2560 016a 3F4B     		ldr	r3, .L162+36
 2561 016c 1A70     		strb	r2, [r3]
 2562              	.LBE9:
 2563 016e C0E7     		b	.L144
 2564              	.LVL342:
 2565              	.L145:
 235:Src/main.c    ****             if(searches == 4 && ewok_cnt == 0){
 2566              		.loc 1 235 0
 2567 0170 434A     		ldr	r2, .L162+60
 2568 0172 1368     		ldr	r3, [r2]
 2569 0174 0133     		adds	r3, r3, #1
 2570 0176 1360     		str	r3, [r2]
 236:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2571              		.loc 1 236 0
 2572 0178 042B     		cmp	r3, #4
 2573 017a 06D1     		bne	.L150
 236:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2574              		.loc 1 236 0 is_stmt 0 discriminator 1
 2575 017c 414A     		ldr	r2, .L162+64
 2576 017e 1268     		ldr	r2, [r2]
 2577 0180 1AB9     		cbnz	r2, .L150
 237:Src/main.c    ****             }
 2578              		.loc 1 237 0 is_stmt 1
 2579 0182 4148     		ldr	r0, .L162+68
 2580 0184 FFF7FEFF 		bl	debounce_and_grab
 2581              	.LVL343:
 2582 0188 B3E7     		b	.L144
 2583              	.L150:
 239:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2584              		.loc 1 239 0
 2585 018a 032B     		cmp	r3, #3
 2586 018c 07D1     		bne	.L151
 239:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2587              		.loc 1 239 0 is_stmt 0 discriminator 1
 2588 018e 3D4A     		ldr	r2, .L162+64
 2589 0190 1268     		ldr	r2, [r2]
 2590 0192 012A     		cmp	r2, #1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 68


 2591 0194 03D1     		bne	.L151
 240:Src/main.c    ****             }
 2592              		.loc 1 240 0 is_stmt 1
 2593 0196 3C48     		ldr	r0, .L162+68
 2594 0198 FFF7FEFF 		bl	debounce_and_grab
 2595              	.LVL344:
 2596 019c A9E7     		b	.L144
 2597              	.L151:
 242:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2598              		.loc 1 242 0
 2599 019e 042B     		cmp	r3, #4
 2600 01a0 07D1     		bne	.L152
 242:Src/main.c    ****                 debounce_and_grab(&encoder_pid);
 2601              		.loc 1 242 0 is_stmt 0 discriminator 1
 2602 01a2 384B     		ldr	r3, .L162+64
 2603 01a4 1B68     		ldr	r3, [r3]
 2604 01a6 022B     		cmp	r3, #2
 2605 01a8 03D1     		bne	.L152
 243:Src/main.c    ****             }else{
 2606              		.loc 1 243 0 is_stmt 1
 2607 01aa 3748     		ldr	r0, .L162+68
 2608 01ac FFF7FEFF 		bl	debounce_and_grab
 2609              	.LVL345:
 2610 01b0 9FE7     		b	.L144
 2611              	.L152:
 2612              	.LBB10:
 245:Src/main.c    ****                 while(HAL_GetTick()-time<3000 && PI_INT_STATE == NOT_FLAGGED);
 2613              		.loc 1 245 0
 2614 01b2 FFF7FEFF 		bl	HAL_GetTick
 2615              	.LVL346:
 2616 01b6 0446     		mov	r4, r0
 2617              	.LVL347:
 2618              	.L154:
 246:Src/main.c    ****                 int thresh = ewok_cnt==1? 500:750;
 2619              		.loc 1 246 0 discriminator 2
 2620 01b8 FFF7FEFF 		bl	HAL_GetTick
 2621              	.LVL348:
 2622 01bc 001B     		subs	r0, r0, r4
 2623 01be 40F6B733 		movw	r3, #2999
 2624 01c2 9842     		cmp	r0, r3
 2625 01c4 03D8     		bhi	.L153
 246:Src/main.c    ****                 int thresh = ewok_cnt==1? 500:750;
 2626              		.loc 1 246 0 is_stmt 0 discriminator 1
 2627 01c6 284B     		ldr	r3, .L162+36
 2628 01c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2629 01ca 002B     		cmp	r3, #0
 2630 01cc F4D0     		beq	.L154
 2631              	.L153:
 247:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2632              		.loc 1 247 0 is_stmt 1
 2633 01ce 2D4B     		ldr	r3, .L162+64
 2634 01d0 1B68     		ldr	r3, [r3]
 2635 01d2 012B     		cmp	r3, #1
 2636 01d4 02D1     		bne	.L160
 2637 01d6 4FF4FA75 		mov	r5, #500
 2638 01da 01E0     		b	.L155
 2639              	.L160:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 69


 2640 01dc 40F2EE25 		movw	r5, #750
 2641              	.L155:
 2642              	.LVL349:
 248:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2643              		.loc 1 248 0 discriminator 4
 2644 01e0 0020     		movs	r0, #0
 2645 01e2 1F4B     		ldr	r3, .L162+28
 2646 01e4 1988     		ldrh	r1, [r3]
 2647 01e6 FFF7FEFF 		bl	set_motor_speed
 2648              	.LVL350:
 249:Src/main.c    ****                 time = HAL_GetTick();
 2649              		.loc 1 249 0 discriminator 4
 2650 01ea 0820     		movs	r0, #8
 2651 01ec 1D4B     		ldr	r3, .L162+32
 2652 01ee 1988     		ldrh	r1, [r3]
 2653 01f0 FFF7FEFF 		bl	set_motor_speed
 2654              	.LVL351:
 250:Src/main.c    ****                 while(HAL_GetTick()-time<thresh){
 2655              		.loc 1 250 0 discriminator 4
 2656 01f4 FFF7FEFF 		bl	HAL_GetTick
 2657              	.LVL352:
 2658 01f8 0446     		mov	r4, r0
 2659              	.LVL353:
 251:Src/main.c    ****                     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 2660              		.loc 1 251 0 discriminator 4
 2661 01fa 10E0     		b	.L156
 2662              	.LVL354:
 2663              	.L159:
 252:Src/main.c    ****                     {
 2664              		.loc 1 252 0
 2665 01fc 1E48     		ldr	r0, .L162+52
 2666 01fe 1021     		movs	r1, #16
 2667 0200 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2668              	.LVL355:
 2669 0204 0128     		cmp	r0, #1
 2670 0206 07D1     		bne	.L157
 254:Src/main.c    ****                         debounce_and_grab(&enc_pid);
 2671              		.loc 1 254 0
 2672 0208 1C48     		ldr	r0, .L162+56
 2673 020a 0021     		movs	r1, #0
 2674 020c FFF7FEFF 		bl	print
 2675              	.LVL356:
 255:Src/main.c    ****                         break;
 2676              		.loc 1 255 0
 2677 0210 02A8     		add	r0, sp, #8
 2678 0212 FFF7FEFF 		bl	debounce_and_grab
 2679              	.LVL357:
 256:Src/main.c    ****                     }
 2680              		.loc 1 256 0
 2681 0216 07E0     		b	.L158
 2682              	.L157:
 258:Src/main.c    ****                 }
 2683              		.loc 1 258 0
 2684 0218 02A8     		add	r0, sp, #8
 2685 021a FFF7FEFF 		bl	drive_straight
 2686              	.LVL358:
 2687              	.L156:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 70


 251:Src/main.c    ****                     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 2688              		.loc 1 251 0
 2689 021e FFF7FEFF 		bl	HAL_GetTick
 2690              	.LVL359:
 2691 0222 001B     		subs	r0, r0, r4
 2692 0224 A842     		cmp	r0, r5
 2693 0226 E9D3     		bcc	.L159
 2694              	.L158:
 260:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 2695              		.loc 1 260 0
 2696 0228 0020     		movs	r0, #0
 2697 022a 0146     		mov	r1, r0
 2698 022c FFF7FEFF 		bl	set_motor_speed
 2699              	.LVL360:
 261:Src/main.c    ****                 print("ewok\n", 0);
 2700              		.loc 1 261 0
 2701 0230 0820     		movs	r0, #8
 2702 0232 0021     		movs	r1, #0
 2703 0234 FFF7FEFF 		bl	set_motor_speed
 2704              	.LVL361:
 262:Src/main.c    ****             }
 2705              		.loc 1 262 0
 2706 0238 0D48     		ldr	r0, .L162+44
 2707 023a 0021     		movs	r1, #0
 2708 023c FFF7FEFF 		bl	print
 2709              	.LVL362:
 2710 0240 57E7     		b	.L144
 2711              	.L163:
 2712 0242 00BF     		.align	2
 2713              	.L162:
 2714 0244 00000000 		.word	htim4
 2715 0248 00000000 		.word	htim5
 2716 024c 00000000 		.word	htim1
 2717 0250 00000000 		.word	htim3
 2718 0254 08000000 		.word	.LC1
 2719 0258 00000000 		.word	EDGE_LEFT_STATE
 2720 025c 00000000 		.word	EDGE_RIGHT_STATE
 2721 0260 00000000 		.word	.LANCHOR1
 2722 0264 00000000 		.word	.LANCHOR0
 2723 0268 00000000 		.word	PI_INT_STATE
 2724 026c 00000000 		.word	CLAW_INT_STATE
 2725 0270 44010000 		.word	.LC15
 2726 0274 AC010000 		.word	.LC22
 2727 0278 00040240 		.word	1073873920
 2728 027c 78010000 		.word	.LC18
 2729 0280 00000000 		.word	.LANCHOR3
 2730 0284 00000000 		.word	.LANCHOR2
 2731 0288 00000000 		.word	encoder_pid
 2732              	.LBE10:
 2733              		.cfi_endproc
 2734              	.LFE124:
 2736              		.global	searches
 2737              		.global	ewok_cnt
 2738              		.comm	adc_values,8192,4
 2739              		.comm	dma_buffer,8192,4
 2740              		.global	RIGHT_SPEED
 2741              		.global	LEFT_SPEED
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 71


 2742              		.section	.data.RIGHT_SPEED,"aw",%progbits
 2743              		.align	1
 2744              		.set	.LANCHOR0,. + 0
 2747              	RIGHT_SPEED:
 2748 0000 5802     		.short	600
 2749              		.section	.bss.searches,"aw",%nobits
 2750              		.align	2
 2751              		.set	.LANCHOR3,. + 0
 2754              	searches:
 2755 0000 00000000 		.space	4
 2756              		.section	.data.LEFT_SPEED,"aw",%progbits
 2757              		.align	1
 2758              		.set	.LANCHOR1,. + 0
 2761              	LEFT_SPEED:
 2762 0000 5802     		.short	600
 2763              		.section	.rodata.str1.4,"aMS",%progbits,1
 2764              		.align	2
 2765              	.LC0:
 2766 0000 776F7263 		.ascii	"worcs\000"
 2766      7300
 2767 0006 0000     		.space	2
 2768              	.LC1:
 2769 0008 53746172 		.ascii	"Starting\012\000"
 2769      74696E67 
 2769      0A00
 2770 0012 0000     		.space	2
 2771              	.LC2:
 2772 0014 256C750A 		.ascii	"%lu\012\000"
 2772      00
 2773 0019 000000   		.space	3
 2774              	.LC3:
 2775 001c 5455524E 		.ascii	"TURN | cnts: %d\012\000"
 2775      207C2063 
 2775      6E74733A 
 2775      2025640A 
 2775      00
 2776 002d 000000   		.space	3
 2777              	.LC4:
 2778 0030 5455524E 		.ascii	"TURN | vlts: %d.%d\012\000"
 2778      207C2076 
 2778      6C74733A 
 2778      2025642E 
 2778      25640A00 
 2779              	.LC5:
 2780 0044 5455524E 		.ascii	"TURN | ADC_VAL: %lu\012\000"
 2780      207C2041 
 2780      44435F56 
 2780      414C3A20 
 2780      256C750A 
 2781 0059 000000   		.space	3
 2782              	.LC6:
 2783 005c 5455524E 		.ascii	"TURN | TIM5->CNT: %lu\012\000"
 2783      207C2054 
 2783      494D352D 
 2783      3E434E54 
 2783      3A20256C 
 2784 0073 00       		.space	1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 72


 2785              	.LC7:
 2786 0074 5455524E 		.ascii	"TURN | TIM4->CNT: %lu\012\000"
 2786      207C2054 
 2786      494D342D 
 2786      3E434E54 
 2786      3A20256C 
 2787 008b 00       		.space	1
 2788              	.LC8:
 2789 008c 5455524E 		.ascii	"TURN_DEG | turn count: %d\012\000"
 2789      5F444547 
 2789      207C2074 
 2789      75726E20 
 2789      636F756E 
 2790 00a7 00       		.space	1
 2791              	.LC9:
 2792 00a8 5455524E 		.ascii	"TURN_DEG | TIM5->CNT: %lu\012\000"
 2792      5F444547 
 2792      207C2054 
 2792      494D352D 
 2792      3E434E54 
 2793 00c3 00       		.space	1
 2794              	.LC10:
 2795 00c4 5455524E 		.ascii	"TURN_DEG | TIM4->CNT: %lu\012\000"
 2795      5F444547 
 2795      207C2054 
 2795      494D342D 
 2795      3E434E54 
 2796 00df 00       		.space	1
 2797              	.LC11:
 2798 00e0 434C4157 		.ascii	"CLAW_GRAB | grabbing ewok\012\000"
 2798      5F475241 
 2798      42207C20 
 2798      67726162 
 2798      62696E67 
 2799 00fb 00       		.space	1
 2800              	.LC12:
 2801 00fc 46697273 		.ascii	"First ewok captured\012\000"
 2801      74206577 
 2801      6F6B2063 
 2801      61707475 
 2801      7265640A 
 2802 0111 000000   		.space	3
 2803              	.LC13:
 2804 0114 5365636F 		.ascii	"Second ewok captured\012\000"
 2804      6E642065 
 2804      776F6B20 
 2804      63617074 
 2804      75726564 
 2805 012a 0000     		.space	2
 2806              	.LC14:
 2807 012c 54686972 		.ascii	"Third ewok captured\012\000"
 2807      64206577 
 2807      6F6B2063 
 2807      61707475 
 2807      7265640A 
 2808 0141 000000   		.space	3
 2809              	.LC15:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 73


 2810 0144 65776F6B 		.ascii	"ewok\012\000"
 2810      0A00
 2811 014a 0000     		.space	2
 2812              	.LC16:
 2813 014c 466F7572 		.ascii	"Fourth ewok captured\012\000"
 2813      74682065 
 2813      776F6B20 
 2813      63617074 
 2813      75726564 
 2814 0162 0000     		.space	2
 2815              	.LC17:
 2816 0164 43686577 		.ascii	"Chewie captured\012\000"
 2816      69652063 
 2816      61707475 
 2816      7265640A 
 2816      00
 2817 0175 000000   		.space	3
 2818              	.LC18:
 2819 0178 436C6177 		.ascii	"Claw interrupt\012\000"
 2819      20696E74 
 2819      65727275 
 2819      70740A00 
 2820              	.LC19:
 2821 0188 63685F35 		.ascii	"ch_5: %d\012\000"
 2821      3A202564 
 2821      0A00
 2822 0192 0000     		.space	2
 2823              	.LC20:
 2824 0194 63685F34 		.ascii	"ch_4: %d\012\000"
 2824      3A202564 
 2824      0A00
 2825 019e 0000     		.space	2
 2826              	.LC21:
 2827 01a0 5372632F 		.ascii	"Src/main.c\000"
 2827      6D61696E 
 2827      2E6300
 2828 01ab 00       		.space	1
 2829              	.LC22:
 2830 01ac 50692069 		.ascii	"Pi interrupt\012\000"
 2830      6E746572 
 2830      72757074 
 2830      0A00
 2831              		.section	.bss.ewok_cnt,"aw",%nobits
 2832              		.align	2
 2833              		.set	.LANCHOR2,. + 0
 2836              	ewok_cnt:
 2837 0000 00000000 		.space	4
 2838              		.text
 2839              	.Letext0:
 2840              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2841              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2842              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2843              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 2844              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2845              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2846              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2847              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 74


 2848              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2849              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2850              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2851              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2852              		.file 14 "Inc/pid.h"
 2853              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 2854              		.file 16 "Inc/adc.h"
 2855              		.file 17 "Inc/tim.h"
 2856              		.file 18 "Inc/usart.h"
 2857              		.file 19 "Inc/extern_vars.h"
 2858              		.file 20 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 2859              		.file 21 "Inc/filter.h"
 2860              		.file 22 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2861              		.file 23 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2862              		.file 24 "Inc/claw.h"
 2863              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2864              		.file 26 "Inc/gpio.h"
 2865              		.file 27 "Inc/dma.h"
 2866              		.file 28 "Inc/i2c.h"
 2867              		.file 29 "Inc/ssd1306.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 75


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:21     .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:26     .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:82     .text.encoder_pid:000000000000003c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:87     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:92     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:115    .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:121    .text.drive_straight:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:126    .text.drive_straight:0000000000000000 drive_straight
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:154    .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:159    .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:190    .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:196    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:201    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:228    .text.print:0000000000000018 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:235    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:240    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:327    .text.alarm_detect:000000000000008c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:337    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:342    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:455    .text.menu:000000000000009c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:462    .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:467    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:533    .text.set_motor_speed:000000000000004c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:538    .text.square_edge:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:543    .text.square_edge:0000000000000000 square_edge
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:620    .text.square_edge:0000000000000064 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:628    .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:633    .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:862    .text.turn:0000000000000160 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:887    .text.turn_deg:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:892    .text.turn_deg:0000000000000000 turn_deg
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1073   .text.turn_deg:0000000000000108 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1089   .text.debounce_and_grab:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1094   .text.debounce_and_grab:0000000000000000 debounce_and_grab
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1638   .text.debounce_and_grab:000000000000032c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1653   .text.debounce_and_grab:0000000000000360 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1796   .text.debounce_and_grab:0000000000000438 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1808   .text.drive_straight_time:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1813   .text.drive_straight_time:0000000000000000 drive_straight_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1898   .text.drive_straight_time:0000000000000068 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1904   .text.test_PWM_htim1:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1909   .text.test_PWM_htim1:0000000000000000 test_PWM_htim1
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1960   .text.test_PWM_htim1:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1965   .text.test_PWM_htim3:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:1970   .text.test_PWM_htim3:0000000000000000 test_PWM_htim3
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2028   .text.test_PWM_htim3:0000000000000040 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2033   .text.test_ADC:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2038   .text.test_ADC:0000000000000000 test_ADC
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2105   .text.test_ADC:0000000000000050 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2114   .text.test_All:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2119   .text.test_All:0000000000000000 test_All
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2144   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2149   .text._Error_Handler:0000000000000000 _Error_Handler
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 76


/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2165   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2170   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2296   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2304   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2309   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2714   .text.main:0000000000000244 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2754   .bss.searches:0000000000000000 searches
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2836   .bss.ewok_cnt:0000000000000000 ewok_cnt
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2747   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2761   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2743   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2750   .bss.searches:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2757   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2764   .rodata.str1.4:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s:2832   .bss.ewok_cnt:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pid_GetGain
memcpy
HAL_Delay
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
strlen
HAL_UART_Transmit
huart6
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
HAL_GPIO_ReadPin
sprintf
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dadd
__aeabi_d2iz
HAL_GetTick
close_claw
arm_up
open_claw
arm_down
slow_actuate
htim3
CLAW_INT_STATE
HAL_TIM_PWM_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccSrckx4.s 			page 77


HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_ADC1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
MX_I2C1_Init
MX_USART6_UART_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
HAL_NVIC_EnableIRQ
htim4
htim5
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
PI_INT_STATE
