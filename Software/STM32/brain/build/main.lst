ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    ****  
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** // uint16_t LEFT_SPEED = BASE_SPEED+SPEED_DIFF;
  66:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED;
  67:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  68:Src/main.c    **** uint32_t dma_buffer[2048];
  69:Src/main.c    **** uint32_t adc_values[2048];
  70:Src/main.c    **** int ewok_cnt = 0;
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  79:Src/main.c    **** void print(char msg[], int row);
  80:Src/main.c    **** PID_t menu();
  81:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  82:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  83:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  84:Src/main.c    **** void turn();
  85:Src/main.c    **** void turn_deg(int16_t);
  86:Src/main.c    **** void alarm_detect();
  87:Src/main.c    **** void drive_straight(PID_t *enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 3


  88:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis);
  89:Src/main.c    **** void square_edge(PID_t *enc_pid);
  90:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid);
  91:Src/main.c    **** void test_All();
  92:Src/main.c    **** void test_PWM_htim1();
  93:Src/main.c    **** void test_PWM_htim3();
  94:Src/main.c    **** 
  95:Src/main.c    **** /* USER CODE END PFP */
  96:Src/main.c    **** 
  97:Src/main.c    **** /* USER CODE BEGIN 0 */
  98:Src/main.c    **** /**
  99:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
 100:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
 101:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
 102:Src/main.c    ****  */
 103:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 104:Src/main.c    **** {
  29              		.loc 1 104 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 105:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 105 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF40052 		mov	r2, #8192
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB131:
 106:Src/main.c    **** }
 107:Src/main.c    **** /* USER CODE END 0 */
 108:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 4


 109:Src/main.c    **** /**
 110:Src/main.c    ****   * @brief  The application entry point.
 111:Src/main.c    ****   *
 112:Src/main.c    ****   * @retval None
 113:Src/main.c    ****   */
 114:Src/main.c    **** int main(void)
 115:Src/main.c    **** {
 116:Src/main.c    ****   /* USER CODE BEGIN 1 */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE END 1 */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 123:Src/main.c    ****   HAL_Init();
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE BEGIN Init */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE END Init */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* Configure the system clock */
 130:Src/main.c    ****   SystemClock_Config();
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* USER CODE END SysInit */
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* Initialize all configured peripherals */
 137:Src/main.c    ****   MX_GPIO_Init();
 138:Src/main.c    ****   MX_DMA_Init();
 139:Src/main.c    ****   MX_TIM3_Init();
 140:Src/main.c    ****   MX_TIM1_Init();
 141:Src/main.c    ****   MX_TIM2_Init();
 142:Src/main.c    ****   MX_ADC1_Init();
 143:Src/main.c    ****   MX_TIM4_Init();
 144:Src/main.c    ****   MX_TIM9_Init();
 145:Src/main.c    ****   MX_TIM5_Init();
 146:Src/main.c    ****   MX_I2C1_Init();
 147:Src/main.c    ****   MX_USART6_UART_Init();
 148:Src/main.c    ****   /* USER CODE BEGIN 2 */
 149:Src/main.c    **** 
 150:Src/main.c    ****     /* Initialize peripherals */
 151:Src/main.c    ****     /* 
 152:Src/main.c    ****      * Claw jaw: TIM3 CH1
 153:Src/main.c    ****      * Claw arm: TIM3 CH2
 154:Src/main.c    ****      * Basket: TIM3 CH3
 155:Src/main.c    ****      * left forward: TIM1 CH1
 156:Src/main.c    ****      * left backward: TIM1 CH2
 157:Src/main.c    ****      * right forward: TIM1 CH3
 158:Src/main.c    ****      * right backward: TIM1 CH4
 159:Src/main.c    ****      * left encoder: TIM4
 160:Src/main.c    ****      * right encoderL TIM5
 161:Src/main.c    ****      * spare clocks: TIM2, TIM9
 162:Src/main.c    ****      */
 163:Src/main.c    **** 
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 165:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 5


 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 172:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 173:Src/main.c    **** 
 174:Src/main.c    ****     /* Initialize other stuffs */
 175:Src/main.c    ****     ssd1306_Init();
 176:Src/main.c    ****     print("Starting\n", 0);
 177:Src/main.c    ****     claw_init(&htim3);
 178:Src/main.c    ****     // basket_init(&htim3);
 179:Src/main.c    **** 
 180:Src/main.c    ****     PID_t enc_pid = pid_Init(2, 0, 0, 2, 1);
 181:Src/main.c    **** 
 182:Src/main.c    ****     EDGE_LEFT_STATE = NOT_FLAGGED;
 183:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 184:Src/main.c    **** 
 185:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED+100, RIGHT_SPEED, 2000);
 186:Src/main.c    **** 
 187:Src/main.c    ****     /* Initially disabled interrupts and ADC */
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 189:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 190:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 191:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 192:Src/main.c    **** 
 193:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 5000);
 194:Src/main.c    ****     print("ewok\n", 0);
 195:Src/main.c    **** 
 196:Src/main.c    ****   /* USER CODE END 2 */
 197:Src/main.c    **** 
 198:Src/main.c    ****   /* Infinite loop */
 199:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 200:Src/main.c    ****     while (1)
 201:Src/main.c    ****     {
 202:Src/main.c    ****         // /*
 203:Src/main.c    ****         //  * Pi Turning
 204:Src/main.c    ****         //  */
 205:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 206:Src/main.c    ****         {
 207:Src/main.c    ****             // Stop Requesting Images
 208:Src/main.c    ****             print("Pi interrupt\n", 0);
 209:Src/main.c    ****             // Turn to ewok
 210:Src/main.c    ****             turn();
 211:Src/main.c    **** 
 212:Src/main.c    ****             // Drive forward w/ PID for 2.5 s, enable claw interrupt
 213:Src/main.c    ****         //    uint32_t start = HAL_GetTick();
 214:Src/main.c    ****             uint32_t time = HAL_GetTick();
 215:Src/main.c    ****             while(HAL_GetTick()-time<3000){
 216:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 217:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 218:Src/main.c    ****                 drive_straight(&enc_pid);
 219:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 220:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 221:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 222:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 6


 223:Src/main.c    ****                 {
 224:Src/main.c    ****                     print("Claw interrupt\n", 0);
 225:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 226:Src/main.c    ****                     break;
 227:Src/main.c    ****                 }
 228:Src/main.c    ****             }
 229:Src/main.c    **** 
 230:Src/main.c    ****             print("ewok\n", 0);
 231:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 232:Src/main.c    ****         }
 233:Src/main.c    ****         
 234:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 235:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 236:Src/main.c    ****         uint32_t time = HAL_GetTick();
 237:Src/main.c    ****         while(HAL_GetTick()-time<3000 && PI_INT_STATE == NOT_FLAGGED);
 238:Src/main.c    ****         if(PI_INT_STATE != FLAGGED){
 239:Src/main.c    ****             drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 1000);
 240:Src/main.c    ****             print("ewok\n", 0);
 241:Src/main.c    ****         }
 242:Src/main.c    ****        /* 
 243:Src/main.c    ****             // Reset Claw Interrupt before driving forward
 244:Src/main.c    ****             print("MAIN | CLAW_INT UNFLAGGED\n", 0);
 245:Src/main.c    ****             while (HAL_GetTick()-start<3000)
 246:Src/main.c    ****             {
 247:Src/main.c    ****                 drive_straight(&enc_pid);
 248:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 249:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 250:Src/main.c    ****                 {
 251:Src/main.c    ****                     print("Claw interrupt\n", 0);
 252:Src/main.c    ****                     if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 253:Src/main.c    ****                 }
 254:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 255:Src/main.c    ****                 {
 256:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 257:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 258:Src/main.c    ****                     print("Edge left triggered", 0);
 259:Src/main.c    ****                     turn_deg(30);
 260:Src/main.c    ****                 }
 261:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 262:Src/main.c    ****                     print("Edge right triggered", 0);
 263:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 264:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 265:Src/main.c    ****                     turn_deg(-30);
 266:Src/main.c    ****                 }
 267:Src/main.c    ****             }
 268:Src/main.c    **** 
 269:Src/main.c    ****         }
 270:Src/main.c    ****         else
 271:Src/main.c    ****         {
 272:Src/main.c    **** 
 273:Src/main.c    ****         */
 274:Src/main.c    ****             /*
 275:Src/main.c    ****              * Look for Ewok
 276:Src/main.c    ****              */
 277:Src/main.c    ****             // CLAW_INT_STATE = NOT_FLAGGED;
 278:Src/main.c    **** 
 279:Src/main.c    ****             // if (ewok_cnt == 4 || ewok_cnt == 5)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 7


 280:Src/main.c    ****             // {
 281:Src/main.c    ****             //     if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 282:Src/main.c    ****             //     {
 283:Src/main.c    ****             //         drive_straight_time(&enc_pid, 0, RIGHT_SPEED - 100, 400);
 284:Src/main.c    ****             //         uint32_t temp_time = HAL_GetTick();
 285:Src/main.c    ****             //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 286:Src/main.c    ****             //     }
 287:Src/main.c    ****             //     else if (EDGE_LEFT_STATE == NOT_FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 288:Src/main.c    ****             //     {
 289:Src/main.c    ****             //         drive_straight_time(&enc_pid, LEFT_SPEED - 100, 0, 400);
 290:Src/main.c    ****             //         uint32_t temp_time = HAL_GetTick();
 291:Src/main.c    ****             //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 292:Src/main.c    ****             //     }
 293:Src/main.c    ****             // }
 294:Src/main.c    ****             /*
 295:Src/main.c    ****             
 296:Src/main.c    ****             drive_straight_time(&enc_pid, LEFT_SPEED - 100, RIGHT_SPEED - 100, 500);
 297:Src/main.c    ****             print("ewok\n", 0);
 298:Src/main.c    ****             if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 299:Src/main.c    ****                 {
 300:Src/main.c    ****                     print("Claw interrupt\n", 0);
 301:Src/main.c    ****                     if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 302:Src/main.c    ****                 }
 303:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 304:Src/main.c    ****                 {
 305:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 306:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 307:Src/main.c    ****                     print("Edge left triggered", 0);
 308:Src/main.c    ****                     turn_deg(30);
 309:Src/main.c    ****                 }
 310:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 311:Src/main.c    ****                     print("Edge right triggered", 0);
 312:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 313:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 314:Src/main.c    ****                     turn_deg(-30);
 315:Src/main.c    ****                 }
 316:Src/main.c    ****             uint32_t temp_time = HAL_GetTick();
 317:Src/main.c    ****         */
 318:Src/main.c    ****                 /*
 319:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 320:Src/main.c    ****                 {
 321:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 322:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 323:Src/main.c    ****                     print("Edge left triggered", 0);
 324:Src/main.c    ****                     turn_deg(30);
 325:Src/main.c    ****                 }
 326:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 327:Src/main.c    ****                     print("Edge right triggered", 0);
 328:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 329:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 330:Src/main.c    ****                     turn_deg(-30);
 331:Src/main.c    ****                 }
 332:Src/main.c    ****                 */
 333:Src/main.c    **** 
 334:Src/main.c    ****   /* USER CODE END WHILE */
 335:Src/main.c    **** 
 336:Src/main.c    ****   /* USER CODE BEGIN 3 */
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 8


 337:Src/main.c    ****     }
 338:Src/main.c    ****   /* USER CODE END 3 */
 339:Src/main.c    **** 
 340:Src/main.c    **** }
 341:Src/main.c    **** 
 342:Src/main.c    **** /**
 343:Src/main.c    ****   * @brief System Clock Configuration
 344:Src/main.c    ****   * @retval None
 345:Src/main.c    ****   */
 346:Src/main.c    **** void SystemClock_Config(void)
 347:Src/main.c    **** {
 348:Src/main.c    **** 
 349:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 350:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 351:Src/main.c    **** 
 352:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 353:Src/main.c    ****     */
 354:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 355:Src/main.c    **** 
 356:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 357:Src/main.c    **** 
 358:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 359:Src/main.c    ****     */
 360:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 361:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 362:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 363:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 364:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 365:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 366:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 367:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 368:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 369:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 370:Src/main.c    ****   {
 371:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 372:Src/main.c    ****   }
 373:Src/main.c    **** 
 374:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 375:Src/main.c    ****     */
 376:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 377:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 378:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 379:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 380:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 381:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 382:Src/main.c    **** 
 383:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 384:Src/main.c    ****   {
 385:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 386:Src/main.c    ****   }
 387:Src/main.c    **** 
 388:Src/main.c    ****     /**Configure the Systick interrupt time 
 389:Src/main.c    ****     */
 390:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 391:Src/main.c    **** 
 392:Src/main.c    ****     /**Configure the Systick 
 393:Src/main.c    ****     */
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 9


 394:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 395:Src/main.c    **** 
 396:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 397:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 398:Src/main.c    **** }
 399:Src/main.c    **** 
 400:Src/main.c    **** /* USER CODE BEGIN 4 */
 401:Src/main.c    **** 
 402:Src/main.c    **** void square_edge(PID_t *enc_pid)
 403:Src/main.c    **** {
 404:Src/main.c    ****     while (1)
 405:Src/main.c    ****     {
 406:Src/main.c    ****         char msg[50] = "";
 407:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | EL: %d\n", EDGE_LEFT_STATE == FLAGGED ? 1 : 0);
 408:Src/main.c    ****         print(msg, 0);
 409:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | ER: %d\n", EDGE_RIGHT_STATE == FLAGGED ? 1 : 0);
 410:Src/main.c    ****         print(msg, 0);
 411:Src/main.c    ****         print("\n", 0);
 412:Src/main.c    ****         drive_straight(enc_pid);
 413:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET || HAL_GPIO_Read
 414:Src/main.c    ****         {
 415:Src/main.c    ****             
 416:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 417:Src/main.c    ****             {
 418:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 419:Src/main.c    ****             }
 420:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET)
 421:Src/main.c    ****             {
 422:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 423:Src/main.c    ****             }
 424:Src/main.c    ****         }
 425:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO
 426:Src/main.c    ****         {
 427:Src/main.c    ****             break;
 428:Src/main.c    ****         }
 429:Src/main.c    ****     }
 430:Src/main.c    **** }
 431:Src/main.c    **** 
 432:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis)
 433:Src/main.c    **** {
 434:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 435:Src/main.c    ****     char msg[50] = "";
 436:Src/main.c    ****     uint8_t count = 0; // FIXME: Remove to speed up
 437:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 438:Src/main.c    ****     {
 439:Src/main.c    ****         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 440:Src/main.c    ****         {
 441:Src/main.c    ****             print("Claw interrupt\n", 0);
 442:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 443:Src/main.c    ****         }
 444:Src/main.c    ****         /*
 445:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 446:Src/main.c    ****         {
 447:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 448:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 449:Src/main.c    ****             print("Edge left triggered", 0);
 450:Src/main.c    ****             turn_deg(30);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 10


 451:Src/main.c    ****         }
 452:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 453:Src/main.c    ****             print("Edge right triggered", 0);
 454:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 455:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 456:Src/main.c    ****             turn_deg(-30);
 457:Src/main.c    ****         }
 458:Src/main.c    ****         */
 459:Src/main.c    ****         else 
 460:Src/main.c    ****         {
 461:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, lspeed);
 462:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 463:Src/main.c    ****             drive_straight(enc_pid);
 464:Src/main.c    **** 
 465:Src/main.c    ****         }
 466:Src/main.c    ****     }
 467:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 468:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 469:Src/main.c    **** }
 470:Src/main.c    **** 
 471:Src/main.c    **** void drive_straight(PID_t *enc_pid)
 472:Src/main.c    **** {
 473:Src/main.c    ****     encoder_pid(enc_pid);
 474:Src/main.c    ****     HAL_Delay(10);
 475:Src/main.c    ****     
 476:Src/main.c    **** }
 477:Src/main.c    **** 
 478:Src/main.c    **** /*
 479:Src/main.c    ****  * Assume motors are not on.
 480:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 481:Src/main.c    ****  */
 482:Src/main.c    **** void turn()
 483:Src/main.c    **** {
 484:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 485:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 486:Src/main.c    ****     HAL_Delay(100);
 487:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 488:Src/main.c    ****     //double r = atan(1.57*tan()/())
 489:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 490:Src/main.c    ****     TIM4->CNT = 0;
 491:Src/main.c    ****     TIM5->CNT = 0;
 492:Src/main.c    **** 
 493:Src/main.c    ****     char msg[18] = "";
 494:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", counts);
 495:Src/main.c    ****     print(msg, 0);
 496:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 497:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 498:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 499:Src/main.c    ****     print(msg, 2);
 500:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %d\n", 2 * adc_values[5]);
 501:Src/main.c    ****     print(msg, 0);
 502:Src/main.c    **** 
 503:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
 504:Src/main.c    ****     {
 505:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 506:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 507:Src/main.c    ****         while (TIM5->CNT < counts)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 11


 508:Src/main.c    ****         {
 509:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 510:Src/main.c    ****             // print(msg, 4);
 511:Src/main.c    ****         }
 512:Src/main.c    ****         sprintf(msg, "TURN | TIM5->CNT: %lu\n", TIM5->CNT);
 513:Src/main.c    ****         print(msg, 4);
 514:Src/main.c    ****         TIM5->CNT = 0;
 515:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 516:Src/main.c    ****     }
 517:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 518:Src/main.c    ****     {
 519:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 520:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 521:Src/main.c    ****         while (TIM4->CNT < counts)
 522:Src/main.c    ****         {
 523:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 524:Src/main.c    ****             // print(msg, 4);
 525:Src/main.c    ****         }
 526:Src/main.c    ****         sprintf(msg, "TURN | TIM4->CNT: %lu\n", TIM4->CNT);
 527:Src/main.c    ****         print(msg, 4);
 528:Src/main.c    ****         TIM4->CNT = 0;
 529:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 530:Src/main.c    ****     }
 531:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 532:Src/main.c    **** }
 533:Src/main.c    **** 
 534:Src/main.c    **** /*
 535:Src/main.c    ****  * Assume motors are not on.
 536:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 537:Src/main.c    ****  */
 538:Src/main.c    **** void turn_deg(int16_t deg)
 539:Src/main.c    **** {
 540:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 541:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 542:Src/main.c    ****     if (counts < 0) counts = -counts;
 543:Src/main.c    ****     TIM4->CNT = 0;
 544:Src/main.c    ****     TIM5->CNT = 0;
 545:Src/main.c    **** 
 546:Src/main.c    ****     char msg[50] = "";
 547:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 548:Src/main.c    ****     print(msg, 0);
 549:Src/main.c    **** 
 550:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 551:Src/main.c    ****     {
 552:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 553:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 554:Src/main.c    ****         while (TIM4->CNT < counts)
 555:Src/main.c    ****         {
 556:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 557:Src/main.c    ****             // print(msg, 4);
 558:Src/main.c    ****         }
 559:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM5->CNT: %lu\n", TIM5->CNT);
 560:Src/main.c    ****         print(msg, 4);
 561:Src/main.c    ****         TIM5->CNT = 0;
 562:Src/main.c    ****     }
 563:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 564:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 12


 565:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 566:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 567:Src/main.c    ****         while (TIM5->CNT < counts)
 568:Src/main.c    ****         {
 569:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 570:Src/main.c    ****             // print(msg, 4);
 571:Src/main.c    ****         }
 572:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM4->CNT: %lu\n", TIM4->CNT);
 573:Src/main.c    ****         print(msg, 4);
 574:Src/main.c    ****         TIM4->CNT = 0;
 575:Src/main.c    ****     }
 576:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 577:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 578:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 579:Src/main.c    **** }
 580:Src/main.c    **** 
 581:Src/main.c    **** /**
 582:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 583:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 584:Src/main.c    ****  *
 585:Src/main.c    ****  * @param adc_val, value read from ADC.
 586:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 587:Src/main.c    ****  **/
 588:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 589:Src/main.c    **** {
  67              		.loc 1 589 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 590:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 590 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 591:Src/main.c    **** }
  90              		.loc 1 591 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 13


  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE131:
 101              		.section	.text.print,"ax",%progbits
 102              		.align	2
 103              		.global	print
 104              		.thumb
 105              		.thumb_func
 107              	print:
 108              	.LFB133:
 592:Src/main.c    **** 
 593:Src/main.c    **** // Sampling frequency: 72e6/2/(495*3)
 594:Src/main.c    **** void alarm_detect()
 595:Src/main.c    **** {
 596:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 597:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 598:Src/main.c    ****     HAL_Delay(100);
 599:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 100){
 600:Src/main.c    ****         print("GOERT %d", (int) goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_b
 601:Src/main.c    ****     }
 602:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 100);
 603:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 604:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 605:Src/main.c    **** }
 606:Src/main.c    **** 
 607:Src/main.c    **** /**
 608:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 609:Src/main.c    ****  * @param msg, string to print
 610:Src/main.c    ****  * @param row, row to print msg to
 611:Src/main.c    ****  */
 612:Src/main.c    **** void print(char *msg, int row)
 613:Src/main.c    **** {
 109              		.loc 1 613 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              	.LVL8:
 114 0000 10B5     		push	{r4, lr}
 115              	.LCFI2:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 4, -8
 118              		.cfi_offset 14, -4
 119 0002 0446     		mov	r4, r0
 614:Src/main.c    ****     // if (row == 0)
 615:Src/main.c    ****     // {
 616:Src/main.c    ****     //     ssd1306_Fill(Black);
 617:Src/main.c    ****     // }
 618:Src/main.c    ****     // ssd1306_SetCursor(0, row * 10);
 619:Src/main.c    ****     // ssd1306_WriteString(msg, Font_7x10, White);
 620:Src/main.c    ****     // ssd1306_UpdateScreen();
 621:Src/main.c    ****     HAL_UART_Transmit(&huart6, (uint8_t *) msg, strlen(msg), 100);
 120              		.loc 1 621 0
 121 0004 FFF7FEFF 		bl	strlen
 122              	.LVL9:
 123 0008 82B2     		uxth	r2, r0
 124 000a 0348     		ldr	r0, .L11
 125 000c 2146     		mov	r1, r4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 14


 126 000e 6423     		movs	r3, #100
 127 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 128              	.LVL10:
 129 0014 10BD     		pop	{r4, pc}
 130              	.LVL11:
 131              	.L12:
 132 0016 00BF     		.align	2
 133              	.L11:
 134 0018 00000000 		.word	huart6
 135              		.cfi_endproc
 136              	.LFE133:
 138              		.global	__aeabi_d2iz
 139              		.global	__aeabi_dcmplt
 140              		.global	__aeabi_dcmpgt
 141              		.section	.text.alarm_detect,"ax",%progbits
 142              		.align	2
 143              		.global	alarm_detect
 144              		.thumb
 145              		.thumb_func
 147              	alarm_detect:
 148              	.LFB132:
 595:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 149              		.loc 1 595 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153 0000 00B5     		push	{lr}
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 4
 156              		.cfi_offset 14, -4
 157 0002 83B0     		sub	sp, sp, #12
 158              	.LCFI4:
 159              		.cfi_def_cfa_offset 16
 596:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 160              		.loc 1 596 0
 161 0004 2548     		ldr	r0, .L18
 162 0006 2649     		ldr	r1, .L18+4
 163 0008 4FF40062 		mov	r2, #2048
 164 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 165              	.LVL12:
 598:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 100){
 166              		.loc 1 598 0
 167 0010 6420     		movs	r0, #100
 168 0012 FFF7FEFF 		bl	HAL_Delay
 169              	.LVL13:
 599:Src/main.c    ****         print("GOERT %d", (int) goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_b
 170              		.loc 1 599 0
 171 0016 12E0     		b	.L14
 172              	.L15:
 600:Src/main.c    ****     }
 173              		.loc 1 600 0
 174 0018 0023     		movs	r3, #0
 175 001a 0093     		str	r3, [sp]
 176 001c 2148     		ldr	r0, .L18+8
 177 001e 45F6B261 		movw	r1, #24242
 178 0022 4FF47A72 		mov	r2, #1000
 179 0026 4FF40063 		mov	r3, #2048
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 15


 180 002a FFF7FEFF 		bl	goertzel
 181              	.LVL14:
 182 002e 51EC100B 		fmrrd	r0, r1, d0
 183 0032 FFF7FEFF 		bl	__aeabi_d2iz
 184              	.LVL15:
 185 0036 0146     		mov	r1, r0
 186 0038 1B48     		ldr	r0, .L18+12
 187 003a FFF7FEFF 		bl	print
 188              	.LVL16:
 189              	.L14:
 599:Src/main.c    ****         print("GOERT %d", (int) goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_b
 190              		.loc 1 599 0
 191 003e 0023     		movs	r3, #0
 192 0040 0093     		str	r3, [sp]
 193 0042 1848     		ldr	r0, .L18+8
 194 0044 45F6B261 		movw	r1, #24242
 195 0048 4FF47A72 		mov	r2, #1000
 196 004c 4FF40063 		mov	r3, #2048
 197 0050 FFF7FEFF 		bl	goertzel
 198              	.LVL17:
 199 0054 51EC100B 		fmrrd	r0, r1, d0
 200 0058 0022     		movs	r2, #0
 201 005a 144B     		ldr	r3, .L18+16
 202 005c FFF7FEFF 		bl	__aeabi_dcmplt
 203              	.LVL18:
 204 0060 0028     		cmp	r0, #0
 205 0062 D9D1     		bne	.L15
 206              	.L16:
 602:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 207              		.loc 1 602 0 discriminator 1
 208 0064 0023     		movs	r3, #0
 209 0066 0093     		str	r3, [sp]
 210 0068 0E48     		ldr	r0, .L18+8
 211 006a 45F6B261 		movw	r1, #24242
 212 006e 4FF47A72 		mov	r2, #1000
 213 0072 4FF40063 		mov	r3, #2048
 214 0076 FFF7FEFF 		bl	goertzel
 215              	.LVL19:
 216 007a 51EC100B 		fmrrd	r0, r1, d0
 217 007e 0022     		movs	r2, #0
 218 0080 0A4B     		ldr	r3, .L18+16
 219 0082 FFF7FEFF 		bl	__aeabi_dcmpgt
 220              	.LVL20:
 221 0086 0028     		cmp	r0, #0
 222 0088 ECD1     		bne	.L16
 603:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 223              		.loc 1 603 0
 224 008a 0448     		ldr	r0, .L18
 225 008c FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 226              	.LVL21:
 604:Src/main.c    **** }
 227              		.loc 1 604 0
 228 0090 0022     		movs	r2, #0
 229 0092 074B     		ldr	r3, .L18+20
 230 0094 1A70     		strb	r2, [r3]
 605:Src/main.c    **** 
 231              		.loc 1 605 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 16


 232 0096 03B0     		add	sp, sp, #12
 233              	.LCFI5:
 234              		.cfi_def_cfa_offset 4
 235              		@ sp needed
 236 0098 5DF804FB 		ldr	pc, [sp], #4
 237              	.L19:
 238              		.align	2
 239              	.L18:
 240 009c 00000000 		.word	hadc1
 241 00a0 00000000 		.word	dma_buffer
 242 00a4 00000000 		.word	adc_values
 243 00a8 00000000 		.word	.LC0
 244 00ac 00005940 		.word	1079574528
 245 00b0 00000000 		.word	IR_INT_STATE
 246              		.cfi_endproc
 247              	.LFE132:
 249              		.section	.text.menu,"ax",%progbits
 250              		.align	2
 251              		.global	menu
 252              		.thumb
 253              		.thumb_func
 255              	menu:
 256              	.LFB134:
 622:Src/main.c    **** }
 623:Src/main.c    **** 
 624:Src/main.c    **** PID_t menu()
 625:Src/main.c    **** {
 257              		.loc 1 625 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 32
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              	.LVL22:
 262 0000 30B5     		push	{r4, r5, lr}
 263              	.LCFI6:
 264              		.cfi_def_cfa_offset 12
 265              		.cfi_offset 4, -12
 266              		.cfi_offset 5, -8
 267              		.cfi_offset 14, -4
 268 0002 8BB0     		sub	sp, sp, #44
 269              	.LCFI7:
 270              		.cfi_def_cfa_offset 56
 271 0004 0546     		mov	r5, r0
 626:Src/main.c    ****     print("Starting\n", 0);
 272              		.loc 1 626 0
 273 0006 2548     		ldr	r0, .L26
 274              	.LVL23:
 275 0008 0021     		movs	r1, #0
 276 000a FFF7FEFF 		bl	print
 277              	.LVL24:
 627:Src/main.c    ****     char msg[20] = "";
 278              		.loc 1 627 0
 279 000e 0024     		movs	r4, #0
 280 0010 0594     		str	r4, [sp, #20]
 281 0012 0694     		str	r4, [sp, #24]
 282 0014 0794     		str	r4, [sp, #28]
 283 0016 0894     		str	r4, [sp, #32]
 284 0018 0994     		str	r4, [sp, #36]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 17


 285              	.LVL25:
 628:Src/main.c    ****     int pid_select = 0;
 629:Src/main.c    ****     uint32_t values[2] = {0, 0};
 286              		.loc 1 629 0
 287 001a 0394     		str	r4, [sp, #12]
 288 001c 0494     		str	r4, [sp, #16]
 289              	.LVL26:
 290              	.L24:
 630:Src/main.c    ****     while (1)
 631:Src/main.c    ****     {
 632:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 291              		.loc 1 632 0
 292 001e 2048     		ldr	r0, .L26+4
 293 0020 4FF40051 		mov	r1, #8192
 294 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 295              	.LVL27:
 296 0028 48BB     		cbnz	r0, .L21
 633:Src/main.c    ****         {
 634:Src/main.c    ****             sprintf(msg, "%lu\n", values[pid_select]);
 297              		.loc 1 634 0
 298 002a 05A8     		add	r0, sp, #20
 299 002c 1D49     		ldr	r1, .L26+8
 300 002e 0AAB     		add	r3, sp, #40
 301 0030 03EB8403 		add	r3, r3, r4, lsl #2
 302 0034 53F81C2C 		ldr	r2, [r3, #-28]
 303 0038 FFF7FEFF 		bl	sprintf
 304              	.LVL28:
 635:Src/main.c    ****             print(msg, 0);
 305              		.loc 1 635 0
 306 003c 05A8     		add	r0, sp, #20
 307 003e 0021     		movs	r1, #0
 308 0040 FFF7FEFF 		bl	print
 309              	.LVL29:
 636:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 310              		.loc 1 636 0
 311 0044 13E0     		b	.L22
 312              	.L23:
 637:Src/main.c    ****             {
 638:Src/main.c    ****                 values[pid_select]++;
 313              		.loc 1 638 0
 314 0046 0AAB     		add	r3, sp, #40
 315 0048 03EB8403 		add	r3, r3, r4, lsl #2
 316 004c 53F81C2C 		ldr	r2, [r3, #-28]
 317 0050 0132     		adds	r2, r2, #1
 318 0052 43F81C2C 		str	r2, [r3, #-28]
 639:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
 319              		.loc 1 639 0
 320 0056 05A8     		add	r0, sp, #20
 321 0058 1249     		ldr	r1, .L26+8
 322 005a FFF7FEFF 		bl	sprintf
 323              	.LVL30:
 640:Src/main.c    ****                 print(msg, 0);
 324              		.loc 1 640 0
 325 005e 05A8     		add	r0, sp, #20
 326 0060 0021     		movs	r1, #0
 327 0062 FFF7FEFF 		bl	print
 328              	.LVL31:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 18


 641:Src/main.c    ****                 HAL_Delay(500);
 329              		.loc 1 641 0
 330 0066 4FF4FA70 		mov	r0, #500
 331 006a FFF7FEFF 		bl	HAL_Delay
 332              	.LVL32:
 333              	.L22:
 636:Src/main.c    ****             {
 334              		.loc 1 636 0
 335 006e 0C48     		ldr	r0, .L26+4
 336 0070 4FF40051 		mov	r1, #8192
 337 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 338              	.LVL33:
 339 0078 0028     		cmp	r0, #0
 340 007a E4D0     		beq	.L23
 642:Src/main.c    ****             }
 643:Src/main.c    ****             ++pid_select;
 341              		.loc 1 643 0
 342 007c 0134     		adds	r4, r4, #1
 343              	.LVL34:
 344              	.L21:
 644:Src/main.c    ****         }
 645:Src/main.c    ****         if (pid_select == 2)
 345              		.loc 1 645 0
 346 007e 022C     		cmp	r4, #2
 347 0080 CDD1     		bne	.L24
 646:Src/main.c    ****             break;
 647:Src/main.c    ****     }
 648:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 348              		.loc 1 648 0
 349 0082 BDF80C10 		ldrh	r1, [sp, #12]
 350 0086 BDF81020 		ldrh	r2, [sp, #16]
 351 008a 0123     		movs	r3, #1
 352 008c 0093     		str	r3, [sp]
 353 008e 0193     		str	r3, [sp, #4]
 354 0090 2846     		mov	r0, r5
 355 0092 FFF7FEFF 		bl	pid_Init
 356              	.LVL35:
 649:Src/main.c    **** }
 357              		.loc 1 649 0
 358 0096 2846     		mov	r0, r5
 359 0098 0BB0     		add	sp, sp, #44
 360              	.LCFI8:
 361              		.cfi_def_cfa_offset 12
 362              		@ sp needed
 363 009a 30BD     		pop	{r4, r5, pc}
 364              	.LVL36:
 365              	.L27:
 366              		.align	2
 367              	.L26:
 368 009c 0C000000 		.word	.LC1
 369 00a0 00080240 		.word	1073874944
 370 00a4 18000000 		.word	.LC2
 371              		.cfi_endproc
 372              	.LFE134:
 374              		.section	.text.set_motor_speed,"ax",%progbits
 375              		.align	2
 376              		.global	set_motor_speed
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 19


 377              		.thumb
 378              		.thumb_func
 380              	set_motor_speed:
 381              	.LFB135:
 650:Src/main.c    **** 
 651:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 652:Src/main.c    **** {
 382              		.loc 1 652 0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 0
 385              		@ frame_needed = 0, uses_anonymous_args = 0
 386              		@ link register save eliminated.
 387              	.LVL37:
 653:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 388              		.loc 1 653 0
 389 0000 0346     		mov	r3, r0
 390 0002 18B9     		cbnz	r0, .L29
 654:Src/main.c    ****     {
 655:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 391              		.loc 1 655 0
 392 0004 114A     		ldr	r2, .L33
 393 0006 1268     		ldr	r2, [r2]
 394 0008 9063     		str	r0, [r2, #56]
 395 000a 13E0     		b	.L30
 396              	.L29:
 656:Src/main.c    ****     }
 657:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 397              		.loc 1 657 0
 398 000c 0428     		cmp	r0, #4
 399 000e 04D1     		bne	.L31
 658:Src/main.c    ****     {
 659:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 400              		.loc 1 659 0
 401 0010 0E4A     		ldr	r2, .L33
 402 0012 1268     		ldr	r2, [r2]
 403 0014 0020     		movs	r0, #0
 404              	.LVL38:
 405 0016 5063     		str	r0, [r2, #52]
 406 0018 0CE0     		b	.L30
 407              	.LVL39:
 408              	.L31:
 660:Src/main.c    ****     }
 661:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 409              		.loc 1 661 0
 410 001a 0828     		cmp	r0, #8
 411 001c 04D1     		bne	.L32
 662:Src/main.c    ****     {
 663:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 412              		.loc 1 663 0
 413 001e 0B4A     		ldr	r2, .L33
 414 0020 1268     		ldr	r2, [r2]
 415 0022 0020     		movs	r0, #0
 416              	.LVL40:
 417 0024 1064     		str	r0, [r2, #64]
 418 0026 05E0     		b	.L30
 419              	.LVL41:
 420              	.L32:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 20


 664:Src/main.c    ****     }
 665:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 421              		.loc 1 665 0
 422 0028 0C28     		cmp	r0, #12
 423 002a 03D1     		bne	.L30
 666:Src/main.c    ****     {
 667:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 424              		.loc 1 667 0
 425 002c 074A     		ldr	r2, .L33
 426 002e 1268     		ldr	r2, [r2]
 427 0030 0020     		movs	r0, #0
 428              	.LVL42:
 429 0032 D063     		str	r0, [r2, #60]
 430              	.L30:
 668:Src/main.c    ****     }
 669:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed > 1000 ? 1000 : speed);
 431              		.loc 1 669 0
 432 0034 054A     		ldr	r2, .L33
 433 0036 1268     		ldr	r2, [r2]
 434 0038 3432     		adds	r2, r2, #52
 435 003a 9B08     		lsrs	r3, r3, #2
 436              	.LVL43:
 437 003c B1F57A7F 		cmp	r1, #1000
 438 0040 28BF     		it	cs
 439 0042 4FF47A71 		movcs	r1, #1000
 440              	.LVL44:
 441 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 442 004a 7047     		bx	lr
 443              	.L34:
 444              		.align	2
 445              	.L33:
 446 004c 00000000 		.word	htim1
 447              		.cfi_endproc
 448              	.LFE135:
 450              		.global	__aeabi_f2d
 451              		.global	__aeabi_d2uiz
 452              		.section	.text.turn,"ax",%progbits
 453              		.align	2
 454              		.global	turn
 455              		.thumb
 456              		.thumb_func
 458              	turn:
 459              	.LFB129:
 483:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 460              		.loc 1 483 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 24
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 465              	.LCFI9:
 466              		.cfi_def_cfa_offset 20
 467              		.cfi_offset 4, -20
 468              		.cfi_offset 5, -16
 469              		.cfi_offset 6, -12
 470              		.cfi_offset 7, -8
 471              		.cfi_offset 14, -4
 472 0002 2DED028B 		fstmfdd	sp!, {d8}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 21


 473              	.LCFI10:
 474              		.cfi_def_cfa_offset 28
 475              		.cfi_offset 80, -28
 476              		.cfi_offset 81, -24
 477 0006 87B0     		sub	sp, sp, #28
 478              	.LCFI11:
 479              		.cfi_def_cfa_offset 56
 484:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 480              		.loc 1 484 0
 481 0008 5948     		ldr	r0, .L46+16
 482 000a 5A49     		ldr	r1, .L46+20
 483 000c 4FF40062 		mov	r2, #2048
 484 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 485              	.LVL45:
 486:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 486              		.loc 1 486 0
 487 0014 6420     		movs	r0, #100
 488 0016 FFF7FEFF 		bl	HAL_Delay
 489              	.LVL46:
 487:Src/main.c    ****     //double r = atan(1.57*tan()/())
 490              		.loc 1 487 0
 491 001a 574E     		ldr	r6, .L46+24
 492 001c 7069     		ldr	r0, [r6, #20]
 493 001e 4000     		lsls	r0, r0, #1
 494 0020 FFF7FEFF 		bl	calculate_heading
 495              	.LVL47:
 496 0024 B0EE408A 		fcpys	s16, s0
 497              	.LVL48:
 489:Src/main.c    ****     TIM4->CNT = 0;
 498              		.loc 1 489 0
 499 0028 F0EEC07A 		fabss	s15, s0
 500 002c 17EE900A 		fmrs	r0, s15
 501 0030 FFF7FEFF 		bl	__aeabi_f2d
 502              	.LVL49:
 503 0034 0022     		movs	r2, #0
 504 0036 514B     		ldr	r3, .L46+28
 505 0038 FFF7FEFF 		bl	__aeabi_dmul
 506              	.LVL50:
 507 003c FFF7FEFF 		bl	__aeabi_d2uiz
 508              	.LVL51:
 509 0040 85B2     		uxth	r5, r0
 510              	.LVL52:
 490:Src/main.c    ****     TIM5->CNT = 0;
 511              		.loc 1 490 0
 512 0042 0024     		movs	r4, #0
 513 0044 4E4B     		ldr	r3, .L46+32
 514 0046 5C62     		str	r4, [r3, #36]
 491:Src/main.c    **** 
 515              		.loc 1 491 0
 516 0048 03F58063 		add	r3, r3, #1024
 517 004c 5C62     		str	r4, [r3, #36]
 493:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", counts);
 518              		.loc 1 493 0
 519 004e 0194     		str	r4, [sp, #4]
 520 0050 0294     		str	r4, [sp, #8]
 521 0052 0394     		str	r4, [sp, #12]
 522 0054 0494     		str	r4, [sp, #16]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 22


 523 0056 ADF81440 		strh	r4, [sp, #20]	@ movhi
 494:Src/main.c    ****     print(msg, 0);
 524              		.loc 1 494 0
 525 005a 01A8     		add	r0, sp, #4
 526 005c 4949     		ldr	r1, .L46+36
 527 005e 2A46     		mov	r2, r5
 528 0060 FFF7FEFF 		bl	sprintf
 529              	.LVL53:
 495:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 530              		.loc 1 495 0
 531 0064 01A8     		add	r0, sp, #4
 532 0066 2146     		mov	r1, r4
 533 0068 FFF7FEFF 		bl	print
 534              	.LVL54:
 496:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 535              		.loc 1 496 0
 536 006c BDEEC87A 		ftosizs	s14, s16
 537              	.LVL55:
 497:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 538              		.loc 1 497 0
 539 0070 F8EEC77A 		fsitos	s15, s14
 540 0074 78EE677A 		fsubs	s15, s16, s15
 541 0078 DFED436A 		flds	s13, .L46+40
 542 007c 67EEA67A 		fmuls	s15, s15, s13
 543              	.LVL56:
 498:Src/main.c    ****     print(msg, 2);
 544              		.loc 1 498 0
 545 0080 01A8     		add	r0, sp, #4
 546 0082 4249     		ldr	r1, .L46+44
 547 0084 17EE102A 		fmrs	r2, s14	@ int
 548 0088 FDEEE77A 		ftosizs	s15, s15
 549              	.LVL57:
 550 008c 17EE903A 		fmrs	r3, s15	@ int
 551 0090 FFF7FEFF 		bl	sprintf
 552              	.LVL58:
 499:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %d\n", 2 * adc_values[5]);
 553              		.loc 1 499 0
 554 0094 01A8     		add	r0, sp, #4
 555 0096 0221     		movs	r1, #2
 556 0098 FFF7FEFF 		bl	print
 557              	.LVL59:
 500:Src/main.c    ****     print(msg, 0);
 558              		.loc 1 500 0
 559 009c 7269     		ldr	r2, [r6, #20]
 560 009e 01A8     		add	r0, sp, #4
 561 00a0 3B49     		ldr	r1, .L46+48
 562 00a2 5200     		lsls	r2, r2, #1
 563 00a4 FFF7FEFF 		bl	sprintf
 564              	.LVL60:
 501:Src/main.c    **** 
 565              		.loc 1 501 0
 566 00a8 01A8     		add	r0, sp, #4
 567 00aa 2146     		mov	r1, r4
 568 00ac FFF7FEFF 		bl	print
 569              	.LVL61:
 503:Src/main.c    ****     {
 570              		.loc 1 503 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 23


 571 00b0 18EE100A 		fmrs	r0, s16
 572 00b4 FFF7FEFF 		bl	__aeabi_f2d
 573              	.LVL62:
 574 00b8 0646     		mov	r6, r0
 575 00ba 0F46     		mov	r7, r1
 576 00bc 28A3     		adr	r3, .L46
 577 00be D3E90023 		ldrd	r2, [r3]
 578 00c2 FFF7FEFF 		bl	__aeabi_dcmplt
 579              	.LVL63:
 580 00c6 E8B1     		cbz	r0, .L44
 505:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 581              		.loc 1 505 0
 582 00c8 2046     		mov	r0, r4
 583 00ca 2146     		mov	r1, r4
 584 00cc FFF7FEFF 		bl	set_motor_speed
 585              	.LVL64:
 506:Src/main.c    ****         while (TIM5->CNT < counts)
 586              		.loc 1 506 0
 587 00d0 0820     		movs	r0, #8
 588 00d2 304B     		ldr	r3, .L46+52
 589 00d4 1988     		ldrh	r1, [r3]
 590 00d6 FFF7FEFF 		bl	set_motor_speed
 591              	.LVL65:
 592              	.L38:
 507:Src/main.c    ****         {
 593              		.loc 1 507 0 discriminator 1
 594 00da 2F4B     		ldr	r3, .L46+56
 595 00dc 5B6A     		ldr	r3, [r3, #36]
 596 00de AB42     		cmp	r3, r5
 597 00e0 FBD3     		bcc	.L38
 512:Src/main.c    ****         print(msg, 4);
 598              		.loc 1 512 0
 599 00e2 2D4C     		ldr	r4, .L46+56
 600 00e4 626A     		ldr	r2, [r4, #36]
 601 00e6 01A8     		add	r0, sp, #4
 602 00e8 2C49     		ldr	r1, .L46+60
 603 00ea FFF7FEFF 		bl	sprintf
 604              	.LVL66:
 513:Src/main.c    ****         TIM5->CNT = 0;
 605              		.loc 1 513 0
 606 00ee 01A8     		add	r0, sp, #4
 607 00f0 0421     		movs	r1, #4
 608 00f2 FFF7FEFF 		bl	print
 609              	.LVL67:
 514:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 610              		.loc 1 514 0
 611 00f6 0020     		movs	r0, #0
 612 00f8 6062     		str	r0, [r4, #36]
 515:Src/main.c    ****     }
 613              		.loc 1 515 0
 614 00fa 294B     		ldr	r3, .L46+64
 615 00fc 1988     		ldrh	r1, [r3]
 616 00fe FFF7FEFF 		bl	set_motor_speed
 617              	.LVL68:
 618 0102 25E0     		b	.L39
 619              	.L44:
 517:Src/main.c    ****     {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 24


 620              		.loc 1 517 0
 621 0104 3046     		mov	r0, r6
 622 0106 3946     		mov	r1, r7
 623 0108 17A3     		adr	r3, .L46+8
 624 010a D3E90023 		ldrd	r2, [r3]
 625 010e FFF7FEFF 		bl	__aeabi_dcmpgt
 626              	.LVL69:
 627 0112 E8B1     		cbz	r0, .L39
 519:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 628              		.loc 1 519 0
 629 0114 0020     		movs	r0, #0
 630 0116 224B     		ldr	r3, .L46+64
 631 0118 1988     		ldrh	r1, [r3]
 632 011a FFF7FEFF 		bl	set_motor_speed
 633              	.LVL70:
 520:Src/main.c    ****         while (TIM4->CNT < counts)
 634              		.loc 1 520 0
 635 011e 0820     		movs	r0, #8
 636 0120 0021     		movs	r1, #0
 637 0122 FFF7FEFF 		bl	set_motor_speed
 638              	.LVL71:
 639              	.L41:
 521:Src/main.c    ****         {
 640              		.loc 1 521 0 discriminator 1
 641 0126 164B     		ldr	r3, .L46+32
 642 0128 5B6A     		ldr	r3, [r3, #36]
 643 012a AB42     		cmp	r3, r5
 644 012c FBD3     		bcc	.L41
 526:Src/main.c    ****         print(msg, 4);
 645              		.loc 1 526 0
 646 012e 144C     		ldr	r4, .L46+32
 647 0130 626A     		ldr	r2, [r4, #36]
 648 0132 01A8     		add	r0, sp, #4
 649 0134 1B49     		ldr	r1, .L46+68
 650 0136 FFF7FEFF 		bl	sprintf
 651              	.LVL72:
 527:Src/main.c    ****         TIM4->CNT = 0;
 652              		.loc 1 527 0
 653 013a 01A8     		add	r0, sp, #4
 654 013c 0421     		movs	r1, #4
 655 013e FFF7FEFF 		bl	print
 656              	.LVL73:
 528:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 657              		.loc 1 528 0
 658 0142 0023     		movs	r3, #0
 659 0144 6362     		str	r3, [r4, #36]
 529:Src/main.c    ****     }
 660              		.loc 1 529 0
 661 0146 0820     		movs	r0, #8
 662 0148 124B     		ldr	r3, .L46+52
 663 014a 1988     		ldrh	r1, [r3]
 664 014c FFF7FEFF 		bl	set_motor_speed
 665              	.LVL74:
 666              	.L39:
 531:Src/main.c    **** }
 667              		.loc 1 531 0
 668 0150 0748     		ldr	r0, .L46+16
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 25


 669 0152 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 670              	.LVL75:
 532:Src/main.c    **** 
 671              		.loc 1 532 0
 672 0156 07B0     		add	sp, sp, #28
 673              	.LCFI12:
 674              		.cfi_def_cfa_offset 28
 675              		@ sp needed
 676 0158 BDEC028B 		fldmfdd	sp!, {d8}
 677              	.LCFI13:
 678              		.cfi_restore 80
 679              		.cfi_restore 81
 680              		.cfi_def_cfa_offset 20
 681              	.LVL76:
 682 015c F0BD     		pop	{r4, r5, r6, r7, pc}
 683              	.LVL77:
 684              	.L47:
 685 015e 00BF     		.align	3
 686              	.L46:
 687 0160 7B14AE47 		.word	1202590843
 688 0164 E17AA4BF 		.word	-1079739679
 689 0168 7B14AE47 		.word	1202590843
 690 016c E17AA43F 		.word	1067743969
 691 0170 00000000 		.word	hadc1
 692 0174 00000000 		.word	dma_buffer
 693 0178 00000000 		.word	adc_values
 694 017c 00406040 		.word	1080049664
 695 0180 00080040 		.word	1073743872
 696 0184 20000000 		.word	.LC3
 697 0188 00007A44 		.word	1148846080
 698 018c 34000000 		.word	.LC4
 699 0190 48000000 		.word	.LC5
 700 0194 00000000 		.word	.LANCHOR0
 701 0198 000C0040 		.word	1073744896
 702 019c 5C000000 		.word	.LC6
 703 01a0 00000000 		.word	.LANCHOR1
 704 01a4 74000000 		.word	.LC7
 705              		.cfi_endproc
 706              	.LFE129:
 708              		.global	__aeabi_i2d
 709              		.global	__aeabi_dadd
 710              		.section	.text.turn_deg,"ax",%progbits
 711              		.align	2
 712              		.global	turn_deg
 713              		.thumb
 714              		.thumb_func
 716              	turn_deg:
 717              	.LFB130:
 539:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 718              		.loc 1 539 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 56
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              	.LVL78:
 723 0000 70B5     		push	{r4, r5, r6, lr}
 724              	.LCFI14:
 725              		.cfi_def_cfa_offset 16
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 26


 726              		.cfi_offset 4, -16
 727              		.cfi_offset 5, -12
 728              		.cfi_offset 6, -8
 729              		.cfi_offset 14, -4
 730 0002 8EB0     		sub	sp, sp, #56
 731              	.LCFI15:
 732              		.cfi_def_cfa_offset 72
 733 0004 0646     		mov	r6, r0
 540:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 734              		.loc 1 540 0
 735 0006 4248     		ldr	r0, .L55+8
 736              	.LVL79:
 737 0008 4249     		ldr	r1, .L55+12
 738 000a 4FF40062 		mov	r2, #2048
 739 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 740              	.LVL80:
 541:Src/main.c    ****     if (counts < 0) counts = -counts;
 741              		.loc 1 541 0
 742 0012 A6F15A00 		sub	r0, r6, #90
 743 0016 FFF7FEFF 		bl	__aeabi_i2d
 744              	.LVL81:
 745 001a 3BA3     		adr	r3, .L55
 746 001c D3E90023 		ldrd	r2, [r3]
 747 0020 FFF7FEFF 		bl	__aeabi_dmul
 748              	.LVL82:
 749 0024 0022     		movs	r2, #0
 750 0026 3C4B     		ldr	r3, .L55+16
 751 0028 FFF7FEFF 		bl	__aeabi_dadd
 752              	.LVL83:
 753 002c FFF7FEFF 		bl	__aeabi_d2iz
 754              	.LVL84:
 755 0030 85B2     		uxth	r5, r0
 756              	.LVL85:
 542:Src/main.c    ****     TIM4->CNT = 0;
 757              		.loc 1 542 0
 758 0032 15F4004F 		tst	r5, #32768
 759 0036 01D0     		beq	.L49
 542:Src/main.c    ****     TIM4->CNT = 0;
 760              		.loc 1 542 0 is_stmt 0 discriminator 1
 761 0038 6D42     		negs	r5, r5
 762              	.LVL86:
 763 003a ADB2     		uxth	r5, r5
 764              	.LVL87:
 765              	.L49:
 543:Src/main.c    ****     TIM5->CNT = 0;
 766              		.loc 1 543 0 is_stmt 1
 767 003c 0024     		movs	r4, #0
 768 003e 374B     		ldr	r3, .L55+20
 769 0040 5C62     		str	r4, [r3, #36]
 544:Src/main.c    **** 
 770              		.loc 1 544 0
 771 0042 03F58063 		add	r3, r3, #1024
 772 0046 5C62     		str	r4, [r3, #36]
 546:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 773              		.loc 1 546 0
 774 0048 0194     		str	r4, [sp, #4]
 775 004a 0294     		str	r4, [sp, #8]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 27


 776 004c 0394     		str	r4, [sp, #12]
 777 004e 0494     		str	r4, [sp, #16]
 778 0050 0594     		str	r4, [sp, #20]
 779 0052 0694     		str	r4, [sp, #24]
 780 0054 0794     		str	r4, [sp, #28]
 781 0056 0894     		str	r4, [sp, #32]
 782 0058 0994     		str	r4, [sp, #36]
 783 005a 0A94     		str	r4, [sp, #40]
 784 005c 0B94     		str	r4, [sp, #44]
 785 005e 0C94     		str	r4, [sp, #48]
 786 0060 ADF83440 		strh	r4, [sp, #52]	@ movhi
 547:Src/main.c    ****     print(msg, 0);
 787              		.loc 1 547 0
 788 0064 01A8     		add	r0, sp, #4
 789 0066 2E49     		ldr	r1, .L55+24
 790 0068 2AB2     		sxth	r2, r5
 791 006a FFF7FEFF 		bl	sprintf
 792              	.LVL88:
 548:Src/main.c    **** 
 793              		.loc 1 548 0
 794 006e 01A8     		add	r0, sp, #4
 795 0070 2146     		mov	r1, r4
 796 0072 FFF7FEFF 		bl	print
 797              	.LVL89:
 550:Src/main.c    ****     {
 798              		.loc 1 550 0
 799 0076 A642     		cmp	r6, r4
 800 0078 1ADD     		ble	.L50
 552:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 801              		.loc 1 552 0
 802 007a 2046     		mov	r0, r4
 803 007c 294B     		ldr	r3, .L55+28
 804 007e 1988     		ldrh	r1, [r3]
 805 0080 FFF7FEFF 		bl	set_motor_speed
 806              	.LVL90:
 553:Src/main.c    ****         while (TIM4->CNT < counts)
 807              		.loc 1 553 0
 808 0084 0820     		movs	r0, #8
 809 0086 2146     		mov	r1, r4
 810 0088 FFF7FEFF 		bl	set_motor_speed
 811              	.LVL91:
 812              	.L51:
 554:Src/main.c    ****         {
 813              		.loc 1 554 0 discriminator 1
 814 008c 234B     		ldr	r3, .L55+20
 815 008e 5A6A     		ldr	r2, [r3, #36]
 816 0090 2BB2     		sxth	r3, r5
 817 0092 9A42     		cmp	r2, r3
 818 0094 FAD3     		bcc	.L51
 559:Src/main.c    ****         print(msg, 4);
 819              		.loc 1 559 0
 820 0096 244C     		ldr	r4, .L55+32
 821 0098 626A     		ldr	r2, [r4, #36]
 822 009a 01A8     		add	r0, sp, #4
 823 009c 2349     		ldr	r1, .L55+36
 824 009e FFF7FEFF 		bl	sprintf
 825              	.LVL92:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 28


 560:Src/main.c    ****         TIM5->CNT = 0;
 826              		.loc 1 560 0
 827 00a2 01A8     		add	r0, sp, #4
 828 00a4 0421     		movs	r1, #4
 829 00a6 FFF7FEFF 		bl	print
 830              	.LVL93:
 561:Src/main.c    ****     }
 831              		.loc 1 561 0
 832 00aa 0023     		movs	r3, #0
 833 00ac 6362     		str	r3, [r4, #36]
 834 00ae 1BE0     		b	.L52
 835              	.L50:
 563:Src/main.c    ****     {
 836              		.loc 1 563 0
 837 00b0 002E     		cmp	r6, #0
 838 00b2 19DA     		bge	.L52
 565:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 839              		.loc 1 565 0
 840 00b4 0020     		movs	r0, #0
 841 00b6 0146     		mov	r1, r0
 842 00b8 FFF7FEFF 		bl	set_motor_speed
 843              	.LVL94:
 566:Src/main.c    ****         while (TIM5->CNT < counts)
 844              		.loc 1 566 0
 845 00bc 0820     		movs	r0, #8
 846 00be 1C4B     		ldr	r3, .L55+40
 847 00c0 1988     		ldrh	r1, [r3]
 848 00c2 FFF7FEFF 		bl	set_motor_speed
 849              	.LVL95:
 850              	.L53:
 567:Src/main.c    ****         {
 851              		.loc 1 567 0 discriminator 1
 852 00c6 184B     		ldr	r3, .L55+32
 853 00c8 5A6A     		ldr	r2, [r3, #36]
 854 00ca 2BB2     		sxth	r3, r5
 855 00cc 9A42     		cmp	r2, r3
 856 00ce FAD3     		bcc	.L53
 572:Src/main.c    ****         print(msg, 4);
 857              		.loc 1 572 0
 858 00d0 124C     		ldr	r4, .L55+20
 859 00d2 626A     		ldr	r2, [r4, #36]
 860 00d4 01A8     		add	r0, sp, #4
 861 00d6 1749     		ldr	r1, .L55+44
 862 00d8 FFF7FEFF 		bl	sprintf
 863              	.LVL96:
 573:Src/main.c    ****         TIM4->CNT = 0;
 864              		.loc 1 573 0
 865 00dc 01A8     		add	r0, sp, #4
 866 00de 0421     		movs	r1, #4
 867 00e0 FFF7FEFF 		bl	print
 868              	.LVL97:
 574:Src/main.c    ****     }
 869              		.loc 1 574 0
 870 00e4 0023     		movs	r3, #0
 871 00e6 6362     		str	r3, [r4, #36]
 872              	.L52:
 576:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 29


 873              		.loc 1 576 0
 874 00e8 0020     		movs	r0, #0
 875 00ea 0146     		mov	r1, r0
 876 00ec FFF7FEFF 		bl	set_motor_speed
 877              	.LVL98:
 577:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 878              		.loc 1 577 0
 879 00f0 0820     		movs	r0, #8
 880 00f2 0021     		movs	r1, #0
 881 00f4 FFF7FEFF 		bl	set_motor_speed
 882              	.LVL99:
 578:Src/main.c    **** }
 883              		.loc 1 578 0
 884 00f8 0548     		ldr	r0, .L55+8
 885 00fa FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 886              	.LVL100:
 579:Src/main.c    **** 
 887              		.loc 1 579 0
 888 00fe 0EB0     		add	sp, sp, #56
 889              	.LCFI16:
 890              		.cfi_def_cfa_offset 16
 891              		@ sp needed
 892 0100 70BD     		pop	{r4, r5, r6, pc}
 893              	.LVL101:
 894              	.L56:
 895 0102 00BFAFF3 		.align	3
 895      0080
 896              	.L55:
 897 0108 721CC771 		.word	1908874354
 898 010c 1CC7E13F 		.word	1071761180
 899 0110 00000000 		.word	hadc1
 900 0114 00000000 		.word	dma_buffer
 901 0118 00004940 		.word	1078525952
 902 011c 00080040 		.word	1073743872
 903 0120 8C000000 		.word	.LC8
 904 0124 00000000 		.word	.LANCHOR1
 905 0128 000C0040 		.word	1073744896
 906 012c A8000000 		.word	.LC9
 907 0130 00000000 		.word	.LANCHOR0
 908 0134 C4000000 		.word	.LC10
 909              		.cfi_endproc
 910              	.LFE130:
 912              		.section	.text.encoder_pid,"ax",%progbits
 913              		.align	2
 914              		.global	encoder_pid
 915              		.thumb
 916              		.thumb_func
 918              	encoder_pid:
 919              	.LFB136:
 670:Src/main.c    **** }
 671:Src/main.c    **** 
 672:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 673:Src/main.c    **** {
 920              		.loc 1 673 0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 0
 923              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 30


 924              	.LVL102:
 925 0000 38B5     		push	{r3, r4, r5, lr}
 926              	.LCFI17:
 927              		.cfi_def_cfa_offset 16
 928              		.cfi_offset 3, -16
 929              		.cfi_offset 4, -12
 930              		.cfi_offset 5, -8
 931              		.cfi_offset 14, -4
 674:Src/main.c    ****     /* Get error */
 675:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
 932              		.loc 1 675 0
 933 0002 0E4B     		ldr	r3, .L61
 934 0004 5C6A     		ldr	r4, [r3, #36]
 935              	.LVL103:
 676:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
 936              		.loc 1 676 0
 937 0006 03F58063 		add	r3, r3, #1024
 938 000a 5D6A     		ldr	r5, [r3, #36]
 939              	.LVL104:
 677:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
 940              		.loc 1 677 0
 941 000c 631B     		subs	r3, r4, r5
 942 000e 0361     		str	r3, [r0, #16]
 678:Src/main.c    **** 
 679:Src/main.c    ****     /* Get gain */
 680:Src/main.c    ****     // Gain <0 for ride side faster
 681:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
 943              		.loc 1 681 0
 944 0010 FFF7FEFF 		bl	pid_GetGain
 945              	.LVL105:
 682:Src/main.c    **** 
 683:Src/main.c    ****     /* Set Motor Speeds*/
 684:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 685:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 686:Src/main.c    ****     if (gain < 0)
 687:Src/main.c    ****     {
 688:Src/main.c    ****         lspeed -= gain;
 689:Src/main.c    ****     }
 690:Src/main.c    ****     else if (gain > 0)
 691:Src/main.c    ****     {
 692:Src/main.c    ****         rspeed += gain;
 693:Src/main.c    ****     }
 694:Src/main.c    **** 
 695:Src/main.c    ****     // char msg[18] = "";
 696:Src/main.c    ****     // sprintf(msg, "LS: %lu", lspeed);
 697:Src/main.c    ****     // print(msg, 0);
 698:Src/main.c    ****     // sprintf(msg, "RS: %lu", rspeed);
 699:Src/main.c    ****     // print(msg, 1);
 700:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, lspeed);
 701:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, rspeed);
 702:Src/main.c    **** 
 703:Src/main.c    ****     /* Prevent weird overflow shit */
 704:Src/main.c    ****     if (lcnt > 60000 || rcnt > 60000)
 946              		.loc 1 704 0
 947 0014 4EF66023 		movw	r3, #60000
 948 0018 9C42     		cmp	r4, r3
 949 001a 01D8     		bhi	.L58
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 31


 950              		.loc 1 704 0 is_stmt 0 discriminator 1
 951 001c 9D42     		cmp	r5, r3
 952 001e 0CD9     		bls	.L57
 953              	.L58:
 705:Src/main.c    ****     {
 706:Src/main.c    ****         TIM4->CNT -= 50000;
 954              		.loc 1 706 0 is_stmt 1
 955 0020 064A     		ldr	r2, .L61
 956 0022 536A     		ldr	r3, [r2, #36]
 957 0024 A3F54343 		sub	r3, r3, #49920
 958 0028 503B     		subs	r3, r3, #80
 959 002a 5362     		str	r3, [r2, #36]
 960              	.LVL106:
 707:Src/main.c    ****         TIM5->CNT -= 50000;
 961              		.loc 1 707 0
 962 002c 02F58062 		add	r2, r2, #1024
 963 0030 536A     		ldr	r3, [r2, #36]
 964 0032 A3F54343 		sub	r3, r3, #49920
 965 0036 503B     		subs	r3, r3, #80
 966 0038 5362     		str	r3, [r2, #36]
 967              	.L57:
 968 003a 38BD     		pop	{r3, r4, r5, pc}
 969              	.LVL107:
 970              	.L62:
 971              		.align	2
 972              	.L61:
 973 003c 00080040 		.word	1073743872
 974              		.cfi_endproc
 975              	.LFE136:
 977              		.section	.text.drive_straight,"ax",%progbits
 978              		.align	2
 979              		.global	drive_straight
 980              		.thumb
 981              		.thumb_func
 983              	drive_straight:
 984              	.LFB128:
 472:Src/main.c    ****     encoder_pid(enc_pid);
 985              		.loc 1 472 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989              	.LVL108:
 990 0000 08B5     		push	{r3, lr}
 991              	.LCFI18:
 992              		.cfi_def_cfa_offset 8
 993              		.cfi_offset 3, -8
 994              		.cfi_offset 14, -4
 473:Src/main.c    ****     HAL_Delay(10);
 995              		.loc 1 473 0
 996 0002 FFF7FEFF 		bl	encoder_pid
 997              	.LVL109:
 474:Src/main.c    ****     
 998              		.loc 1 474 0
 999 0006 0A20     		movs	r0, #10
 1000 0008 FFF7FEFF 		bl	HAL_Delay
 1001              	.LVL110:
 1002 000c 08BD     		pop	{r3, pc}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 32


 1003              		.cfi_endproc
 1004              	.LFE128:
 1006 000e 00BF     		.section	.text.square_edge,"ax",%progbits
 1007              		.align	2
 1008              		.global	square_edge
 1009              		.thumb
 1010              		.thumb_func
 1012              	square_edge:
 1013              	.LFB126:
 403:Src/main.c    ****     while (1)
 1014              		.loc 1 403 0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 56
 1017              		@ frame_needed = 0, uses_anonymous_args = 0
 1018              	.LVL111:
 1019 0000 30B5     		push	{r4, r5, lr}
 1020              	.LCFI19:
 1021              		.cfi_def_cfa_offset 12
 1022              		.cfi_offset 4, -12
 1023              		.cfi_offset 5, -8
 1024              		.cfi_offset 14, -4
 1025 0002 8FB0     		sub	sp, sp, #60
 1026              	.LCFI20:
 1027              		.cfi_def_cfa_offset 72
 1028 0004 0546     		mov	r5, r0
 1029              	.LVL112:
 1030              	.L71:
 1031              	.LBB2:
 406:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | EL: %d\n", EDGE_LEFT_STATE == FLAGGED ? 1 : 0);
 1032              		.loc 1 406 0
 1033 0006 0024     		movs	r4, #0
 1034 0008 0194     		str	r4, [sp, #4]
 1035 000a 0294     		str	r4, [sp, #8]
 1036 000c 0394     		str	r4, [sp, #12]
 1037 000e 0494     		str	r4, [sp, #16]
 1038 0010 0594     		str	r4, [sp, #20]
 1039 0012 0694     		str	r4, [sp, #24]
 1040 0014 0794     		str	r4, [sp, #28]
 1041 0016 0894     		str	r4, [sp, #32]
 1042 0018 0994     		str	r4, [sp, #36]
 1043 001a 0A94     		str	r4, [sp, #40]
 1044 001c 0B94     		str	r4, [sp, #44]
 1045 001e 0C94     		str	r4, [sp, #48]
 1046 0020 ADF83440 		strh	r4, [sp, #52]	@ movhi
 407:Src/main.c    ****         print(msg, 0);
 1047              		.loc 1 407 0
 1048 0024 284B     		ldr	r3, .L73
 1049 0026 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1050 0028 01A8     		add	r0, sp, #4
 1051 002a 2849     		ldr	r1, .L73+4
 1052 002c 012A     		cmp	r2, #1
 1053 002e 14BF     		ite	ne
 1054 0030 0022     		movne	r2, #0
 1055 0032 0122     		moveq	r2, #1
 1056 0034 FFF7FEFF 		bl	sprintf
 1057              	.LVL113:
 408:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | ER: %d\n", EDGE_RIGHT_STATE == FLAGGED ? 1 : 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 33


 1058              		.loc 1 408 0
 1059 0038 01A8     		add	r0, sp, #4
 1060 003a 2146     		mov	r1, r4
 1061 003c FFF7FEFF 		bl	print
 1062              	.LVL114:
 409:Src/main.c    ****         print(msg, 0);
 1063              		.loc 1 409 0
 1064 0040 234B     		ldr	r3, .L73+8
 1065 0042 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1066 0044 01A8     		add	r0, sp, #4
 1067 0046 2349     		ldr	r1, .L73+12
 1068 0048 012A     		cmp	r2, #1
 1069 004a 14BF     		ite	ne
 1070 004c 0022     		movne	r2, #0
 1071 004e 0122     		moveq	r2, #1
 1072 0050 FFF7FEFF 		bl	sprintf
 1073              	.LVL115:
 410:Src/main.c    ****         print("\n", 0);
 1074              		.loc 1 410 0
 1075 0054 01A8     		add	r0, sp, #4
 1076 0056 2146     		mov	r1, r4
 1077 0058 FFF7FEFF 		bl	print
 1078              	.LVL116:
 411:Src/main.c    ****         drive_straight(enc_pid);
 1079              		.loc 1 411 0
 1080 005c 1E48     		ldr	r0, .L73+16
 1081 005e 2146     		mov	r1, r4
 1082 0060 FFF7FEFF 		bl	print
 1083              	.LVL117:
 412:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET || HAL_GPIO_Read
 1084              		.loc 1 412 0
 1085 0064 2846     		mov	r0, r5
 1086 0066 FFF7FEFF 		bl	drive_straight
 1087              	.LVL118:
 413:Src/main.c    ****         {
 1088              		.loc 1 413 0
 1089 006a 1C48     		ldr	r0, .L73+20
 1090 006c 0421     		movs	r1, #4
 1091 006e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1092              	.LVL119:
 1093 0072 20B1     		cbz	r0, .L66
 413:Src/main.c    ****         {
 1094              		.loc 1 413 0 is_stmt 0 discriminator 1
 1095 0074 1A48     		ldr	r0, .L73+24
 1096 0076 0821     		movs	r1, #8
 1097 0078 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1098              	.LVL120:
 1099 007c 90B9     		cbnz	r0, .L67
 1100              	.L66:
 416:Src/main.c    ****             {
 1101              		.loc 1 416 0 is_stmt 1
 1102 007e 1748     		ldr	r0, .L73+20
 1103 0080 0421     		movs	r1, #4
 1104 0082 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1105              	.LVL121:
 1106 0086 10B9     		cbnz	r0, .L68
 418:Src/main.c    ****             }
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 34


 1107              		.loc 1 418 0
 1108 0088 0146     		mov	r1, r0
 1109 008a FFF7FEFF 		bl	set_motor_speed
 1110              	.LVL122:
 1111              	.L68:
 420:Src/main.c    ****             {
 1112              		.loc 1 420 0
 1113 008e 1448     		ldr	r0, .L73+24
 1114 0090 0821     		movs	r1, #8
 1115 0092 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1116              	.LVL123:
 1117 0096 0028     		cmp	r0, #0
 1118 0098 B5D1     		bne	.L71
 422:Src/main.c    ****             }
 1119              		.loc 1 422 0
 1120 009a 0820     		movs	r0, #8
 1121 009c 0021     		movs	r1, #0
 1122 009e FFF7FEFF 		bl	set_motor_speed
 1123              	.LVL124:
 1124 00a2 B0E7     		b	.L71
 1125              	.L67:
 425:Src/main.c    ****         {
 1126              		.loc 1 425 0
 1127 00a4 0D48     		ldr	r0, .L73+20
 1128 00a6 0421     		movs	r1, #4
 1129 00a8 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1130              	.LVL125:
 1131 00ac 0028     		cmp	r0, #0
 1132 00ae AAD1     		bne	.L71
 425:Src/main.c    ****         {
 1133              		.loc 1 425 0 is_stmt 0 discriminator 1
 1134 00b0 00F18040 		add	r0, r0, #1073741824
 1135 00b4 00F50230 		add	r0, r0, #133120
 1136 00b8 0821     		movs	r1, #8
 1137 00ba FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1138              	.LVL126:
 1139 00be 0028     		cmp	r0, #0
 1140 00c0 A1D1     		bne	.L71
 1141              	.LBE2:
 430:Src/main.c    **** 
 1142              		.loc 1 430 0 is_stmt 1
 1143 00c2 0FB0     		add	sp, sp, #60
 1144              	.LCFI21:
 1145              		.cfi_def_cfa_offset 12
 1146              		@ sp needed
 1147 00c4 30BD     		pop	{r4, r5, pc}
 1148              	.LVL127:
 1149              	.L74:
 1150 00c6 00BF     		.align	2
 1151              	.L73:
 1152 00c8 00000000 		.word	EDGE_LEFT_STATE
 1153 00cc E0000000 		.word	.LC11
 1154 00d0 00000000 		.word	EDGE_RIGHT_STATE
 1155 00d4 F8000000 		.word	.LC12
 1156 00d8 10010000 		.word	.LC13
 1157 00dc 000C0240 		.word	1073875968
 1158 00e0 00080240 		.word	1073874944
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 35


 1159              		.cfi_endproc
 1160              	.LFE126:
 1162              		.section	.text.debounce_and_grab,"ax",%progbits
 1163              		.align	2
 1164              		.global	debounce_and_grab
 1165              		.thumb
 1166              		.thumb_func
 1168              	debounce_and_grab:
 1169              	.LFB137:
 708:Src/main.c    ****     }
 709:Src/main.c    **** }
 710:Src/main.c    **** 
 711:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid)
 712:Src/main.c    **** {
 1170              		.loc 1 712 0
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 0
 1173              		@ frame_needed = 0, uses_anonymous_args = 0
 1174              	.LVL128:
 1175 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1176              	.LCFI22:
 1177              		.cfi_def_cfa_offset 24
 1178              		.cfi_offset 4, -24
 1179              		.cfi_offset 5, -20
 1180              		.cfi_offset 6, -16
 1181              		.cfi_offset 7, -12
 1182              		.cfi_offset 8, -8
 1183              		.cfi_offset 14, -4
 1184 0004 0446     		mov	r4, r0
 713:Src/main.c    ****     uint32_t timeee = HAL_GetTick();
 1185              		.loc 1 713 0
 1186 0006 FFF7FEFF 		bl	HAL_GetTick
 1187              	.LVL129:
 1188 000a 0546     		mov	r5, r0
 1189              	.LVL130:
 714:Src/main.c    ****     // int count = 0;
 715:Src/main.c    ****     // while (HAL_GetTick() - timeee < 50)
 716:Src/main.c    ****     // {
 717:Src/main.c    ****     //     ++count;
 718:Src/main.c    ****     //     HAL_Delay(5);
 719:Src/main.c    ****     //     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_RESET)
 720:Src/main.c    ****     //     {
 721:Src/main.c    ****     //         print("CLAW_GRAB | Claw debounced. No ewok found\n", 0);
 722:Src/main.c    ****     //         ewok = FALSE;
 723:Src/main.c    ****     //         break;
 724:Src/main.c    ****     //     }
 725:Src/main.c    ****     // }
 726:Src/main.c    ****     // char msg[50] = "";
 727:Src/main.c    ****     // sprintf(msg, "CLAW_GRAB | Debounced with %d checks\n", count);
 728:Src/main.c    ****     // print(msg, 0);
 729:Src/main.c    ****     // If claw is still high, we have an ewok. Stop, grab it, continue on
 730:Src/main.c    ****     // hardcoded procedure
 731:Src/main.c    ****         print("CLAW_GRAB | grabbing ewok\n", 0);
 1190              		.loc 1 731 0
 1191 000c B548     		ldr	r0, .L96
 1192              	.LVL131:
 1193 000e 0021     		movs	r1, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 36


 1194 0010 FFF7FEFF 		bl	print
 1195              	.LVL132:
 732:Src/main.c    ****         HAL_Delay(700);
 1196              		.loc 1 732 0
 1197 0014 4FF42F70 		mov	r0, #700
 1198 0018 FFF7FEFF 		bl	HAL_Delay
 1199              	.LVL133:
 733:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1200              		.loc 1 733 0
 1201 001c 0020     		movs	r0, #0
 1202 001e 0146     		mov	r1, r0
 1203 0020 FFF7FEFF 		bl	set_motor_speed
 1204              	.LVL134:
 734:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1205              		.loc 1 734 0
 1206 0024 0820     		movs	r0, #8
 1207 0026 0021     		movs	r1, #0
 1208 0028 FFF7FEFF 		bl	set_motor_speed
 1209              	.LVL135:
 735:Src/main.c    ****         close_claw(&htim3);
 1210              		.loc 1 735 0
 1211 002c AE4E     		ldr	r6, .L96+4
 1212 002e 3046     		mov	r0, r6
 1213 0030 FFF7FEFF 		bl	close_claw
 1214              	.LVL136:
 736:Src/main.c    ****         arm_up(&htim3);
 1215              		.loc 1 736 0
 1216 0034 3046     		mov	r0, r6
 1217 0036 FFF7FEFF 		bl	arm_up
 1218              	.LVL137:
 737:Src/main.c    ****         // TODO: delete next line, there for testing!!!
 738:Src/main.c    ****         HAL_Delay(100);
 1219              		.loc 1 738 0
 1220 003a 6420     		movs	r0, #100
 1221 003c FFF7FEFF 		bl	HAL_Delay
 1222              	.LVL138:
 739:Src/main.c    ****         ++ewok_cnt;
 1223              		.loc 1 739 0
 1224 0040 AA4A     		ldr	r2, .L96+8
 1225 0042 1368     		ldr	r3, [r2]
 1226 0044 0133     		adds	r3, r3, #1
 1227 0046 1360     		str	r3, [r2]
 740:Src/main.c    ****         // char msg[18] = "";
 741:Src/main.c    ****         // sprintf(msg, "wok_cnt: %d\n", ewok_cnt);
 742:Src/main.c    ****         // print(msg, 0);
 743:Src/main.c    ****         /*
 744:Src/main.c    ****             * Claw is up and closed
 745:Src/main.c    ****             * Ewok Count incremented
 746:Src/main.c    ****             * Motors not powered
 747:Src/main.c    ****             * CLAW_INT_STATE not FLAGGED, interrupt disabled
 748:Src/main.c    ****             */
 749:Src/main.c    **** 
 750:Src/main.c    ****         // For the first ewok, turn left, arm up, square robot w/ edge,
 751:Src/main.c    ****         // drive straight for 3 s, bring arm down
 752:Src/main.c    ****         if (ewok_cnt == 1)
 1228              		.loc 1 752 0
 1229 0048 012B     		cmp	r3, #1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 37


 1230 004a 4AD1     		bne	.L76
 1231              	.LBB3:
 753:Src/main.c    ****         {
 754:Src/main.c    ****             print("First ewok captured\n", 0);
 1232              		.loc 1 754 0
 1233 004c A848     		ldr	r0, .L96+12
 1234 004e 0021     		movs	r1, #0
 1235 0050 FFF7FEFF 		bl	print
 1236              	.LVL139:
 755:Src/main.c    ****             turn_deg(-160);
 1237              		.loc 1 755 0
 1238 0054 6FF09F00 		mvn	r0, #159
 1239 0058 FFF7FEFF 		bl	turn_deg
 1240              	.LVL140:
 756:Src/main.c    ****             open_claw(&htim3);
 1241              		.loc 1 756 0
 1242 005c 3046     		mov	r0, r6
 1243 005e FFF7FEFF 		bl	open_claw
 1244              	.LVL141:
 757:Src/main.c    ****             LEFT_SPEED+=100;
 1245              		.loc 1 757 0
 1246 0062 A44E     		ldr	r6, .L96+16
 1247 0064 3388     		ldrh	r3, [r6]
 1248 0066 6433     		adds	r3, r3, #100
 1249 0068 3380     		strh	r3, [r6]	@ movhi
 758:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1250              		.loc 1 758 0
 1251 006a 0820     		movs	r0, #8
 1252 006c A24B     		ldr	r3, .L96+20
 1253 006e 1988     		ldrh	r1, [r3]
 1254 0070 FFF7FEFF 		bl	set_motor_speed
 1255              	.LVL142:
 759:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1256              		.loc 1 759 0
 1257 0074 0020     		movs	r0, #0
 1258 0076 3188     		ldrh	r1, [r6]
 1259 0078 FFF7FEFF 		bl	set_motor_speed
 1260              	.LVL143:
 760:Src/main.c    ****             square_edge(enc_pid);
 1261              		.loc 1 760 0
 1262 007c 2046     		mov	r0, r4
 1263 007e FFF7FEFF 		bl	square_edge
 1264              	.LVL144:
 761:Src/main.c    ****             uint32_t time = HAL_GetTick();
 1265              		.loc 1 761 0
 1266 0082 FFF7FEFF 		bl	HAL_GetTick
 1267              	.LVL145:
 1268 0086 0646     		mov	r6, r0
 1269              	.LVL146:
 762:Src/main.c    ****             while(HAL_GetTick()-time < 3000){
 1270              		.loc 1 762 0
 1271 0088 02E0     		b	.L77
 1272              	.LVL147:
 1273              	.L78:
 763:Src/main.c    ****             drive_straight(enc_pid);
 1274              		.loc 1 763 0
 1275 008a 2046     		mov	r0, r4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 38


 1276 008c FFF7FEFF 		bl	drive_straight
 1277              	.LVL148:
 1278              	.L77:
 762:Src/main.c    ****             while(HAL_GetTick()-time < 3000){
 1279              		.loc 1 762 0
 1280 0090 FFF7FEFF 		bl	HAL_GetTick
 1281              	.LVL149:
 1282 0094 801B     		subs	r0, r0, r6
 1283 0096 40F6B733 		movw	r3, #2999
 1284 009a 9842     		cmp	r0, r3
 1285 009c F5D9     		bls	.L78
 764:Src/main.c    ****             }
 765:Src/main.c    ****             arm_down(&htim3);
 1286              		.loc 1 765 0
 1287 009e 9248     		ldr	r0, .L96+4
 1288 00a0 FFF7FEFF 		bl	arm_down
 1289              	.LVL150:
 766:Src/main.c    ****             time = HAL_GetTick();
 1290              		.loc 1 766 0
 1291 00a4 FFF7FEFF 		bl	HAL_GetTick
 1292              	.LVL151:
 1293 00a8 0646     		mov	r6, r0
 1294              	.LVL152:
 767:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1295              		.loc 1 767 0
 1296 00aa 0820     		movs	r0, #8
 1297              	.LVL153:
 1298 00ac 924B     		ldr	r3, .L96+20
 1299 00ae 1988     		ldrh	r1, [r3]
 1300 00b0 FFF7FEFF 		bl	set_motor_speed
 1301              	.LVL154:
 768:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1302              		.loc 1 768 0
 1303 00b4 0020     		movs	r0, #0
 1304 00b6 8F4B     		ldr	r3, .L96+16
 1305 00b8 1988     		ldrh	r1, [r3]
 1306 00ba FFF7FEFF 		bl	set_motor_speed
 1307              	.LVL155:
 769:Src/main.c    ****             while(HAL_GetTick()-time < 1000){
 1308              		.loc 1 769 0
 1309 00be 02E0     		b	.L79
 1310              	.L80:
 770:Src/main.c    ****             drive_straight(enc_pid);
 1311              		.loc 1 770 0
 1312 00c0 2046     		mov	r0, r4
 1313 00c2 FFF7FEFF 		bl	drive_straight
 1314              	.LVL156:
 1315              	.L79:
 769:Src/main.c    ****             while(HAL_GetTick()-time < 1000){
 1316              		.loc 1 769 0
 1317 00c6 FFF7FEFF 		bl	HAL_GetTick
 1318              	.LVL157:
 1319 00ca 801B     		subs	r0, r0, r6
 1320 00cc B0F57A7F 		cmp	r0, #1000
 1321 00d0 F6D3     		bcc	.L80
 771:Src/main.c    ****             }
 772:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 39


 1322              		.loc 1 772 0
 1323 00d2 0820     		movs	r0, #8
 1324 00d4 0021     		movs	r1, #0
 1325 00d6 FFF7FEFF 		bl	set_motor_speed
 1326              	.LVL158:
 773:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 1327              		.loc 1 773 0
 1328 00da 0020     		movs	r0, #0
 1329 00dc 0146     		mov	r1, r0
 1330 00de FFF7FEFF 		bl	set_motor_speed
 1331              	.LVL159:
 1332              	.L76:
 1333              	.LBE3:
 774:Src/main.c    ****             // square_edge(&enc_pid);
 775:Src/main.c    ****     //        drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 10000);
 776:Src/main.c    ****         }
 777:Src/main.c    **** 
 778:Src/main.c    ****         if (ewok_cnt == 2)
 1334              		.loc 1 778 0
 1335 00e2 824B     		ldr	r3, .L96+8
 1336 00e4 1B68     		ldr	r3, [r3]
 1337 00e6 022B     		cmp	r3, #2
 1338 00e8 40D1     		bne	.L81
 1339              	.LBB4:
 779:Src/main.c    ****         {
 780:Src/main.c    ****             print("Second ewok captured\n",0);
 1340              		.loc 1 780 0
 1341 00ea 8448     		ldr	r0, .L96+24
 1342 00ec 0021     		movs	r1, #0
 1343 00ee FFF7FEFF 		bl	print
 1344              	.LVL160:
 781:Src/main.c    ****             turn_deg(-180); //  Prolly have to change this
 1345              		.loc 1 781 0
 1346 00f2 6FF0B300 		mvn	r0, #179
 1347 00f6 FFF7FEFF 		bl	turn_deg
 1348              	.LVL161:
 782:Src/main.c    ****             alarm_detect();
 1349              		.loc 1 782 0
 1350 00fa FFF7FEFF 		bl	alarm_detect
 1351              	.LVL162:
 783:Src/main.c    ****             open_claw(&htim3);
 1352              		.loc 1 783 0
 1353 00fe 7A48     		ldr	r0, .L96+4
 1354 0100 FFF7FEFF 		bl	open_claw
 1355              	.LVL163:
 784:Src/main.c    ****             uint32_t time = HAL_GetTick();
 1356              		.loc 1 784 0
 1357 0104 FFF7FEFF 		bl	HAL_GetTick
 1358              	.LVL164:
 1359 0108 0646     		mov	r6, r0
 1360              	.LVL165:
 785:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1361              		.loc 1 785 0
 1362 010a 0820     		movs	r0, #8
 1363              	.LVL166:
 1364 010c 7A4B     		ldr	r3, .L96+20
 1365 010e 1988     		ldrh	r1, [r3]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 40


 1366 0110 FFF7FEFF 		bl	set_motor_speed
 1367              	.LVL167:
 786:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1368              		.loc 1 786 0
 1369 0114 0020     		movs	r0, #0
 1370 0116 774B     		ldr	r3, .L96+16
 1371 0118 1988     		ldrh	r1, [r3]
 1372 011a FFF7FEFF 		bl	set_motor_speed
 1373              	.LVL168:
 787:Src/main.c    ****             while(HAL_GetTick()-time < 3000){
 1374              		.loc 1 787 0
 1375 011e 02E0     		b	.L82
 1376              	.L83:
 788:Src/main.c    ****             drive_straight(enc_pid);
 1377              		.loc 1 788 0
 1378 0120 2046     		mov	r0, r4
 1379 0122 FFF7FEFF 		bl	drive_straight
 1380              	.LVL169:
 1381              	.L82:
 787:Src/main.c    ****             while(HAL_GetTick()-time < 3000){
 1382              		.loc 1 787 0
 1383 0126 FFF7FEFF 		bl	HAL_GetTick
 1384              	.LVL170:
 1385 012a 801B     		subs	r0, r0, r6
 1386 012c 40F6B733 		movw	r3, #2999
 1387 0130 9842     		cmp	r0, r3
 1388 0132 F5D9     		bls	.L83
 789:Src/main.c    ****             }
 790:Src/main.c    ****             arm_down(&htim3);
 1389              		.loc 1 790 0
 1390 0134 6C48     		ldr	r0, .L96+4
 1391 0136 FFF7FEFF 		bl	arm_down
 1392              	.LVL171:
 791:Src/main.c    ****             time = HAL_GetTick();
 1393              		.loc 1 791 0
 1394 013a FFF7FEFF 		bl	HAL_GetTick
 1395              	.LVL172:
 1396 013e 0646     		mov	r6, r0
 1397              	.LVL173:
 792:Src/main.c    ****             while(HAL_GetTick()-time < 3000){
 1398              		.loc 1 792 0
 1399 0140 02E0     		b	.L84
 1400              	.LVL174:
 1401              	.L85:
 793:Src/main.c    ****             drive_straight(enc_pid);
 1402              		.loc 1 793 0
 1403 0142 2046     		mov	r0, r4
 1404 0144 FFF7FEFF 		bl	drive_straight
 1405              	.LVL175:
 1406              	.L84:
 792:Src/main.c    ****             while(HAL_GetTick()-time < 3000){
 1407              		.loc 1 792 0
 1408 0148 FFF7FEFF 		bl	HAL_GetTick
 1409              	.LVL176:
 1410 014c 801B     		subs	r0, r0, r6
 1411 014e 40F6B733 		movw	r3, #2999
 1412 0152 9842     		cmp	r0, r3
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 41


 1413 0154 F5D9     		bls	.L85
 794:Src/main.c    ****             }
 795:Src/main.c    ****             arm_down(&htim3);
 1414              		.loc 1 795 0
 1415 0156 6448     		ldr	r0, .L96+4
 1416 0158 FFF7FEFF 		bl	arm_down
 1417              	.LVL177:
 796:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 1418              		.loc 1 796 0
 1419 015c 0820     		movs	r0, #8
 1420 015e 0021     		movs	r1, #0
 1421 0160 FFF7FEFF 		bl	set_motor_speed
 1422              	.LVL178:
 797:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 1423              		.loc 1 797 0
 1424 0164 0020     		movs	r0, #0
 1425 0166 0146     		mov	r1, r0
 1426 0168 FFF7FEFF 		bl	set_motor_speed
 1427              	.LVL179:
 1428              	.L81:
 1429              	.LBE4:
 798:Src/main.c    ****             /*
 799:Src/main.c    ****             timeee = HAL_GetTick();
 800:Src/main.c    ****             while (HAL_GetTick() - timeee < 7000)
 801:Src/main.c    ****             {
 802:Src/main.c    ****                 if (TAPE_LEFT_STATE == FLAGGED && TAPE_RIGHT_STATE != FLAGGED)
 803:Src/main.c    ****                 {
 804:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 805:Src/main.c    ****                     // Tape detects object when high
 806:Src/main.c    ****                     while (HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) == GPIO_PIN_SET);
 807:Src/main.c    ****                     HAL_Delay(100);
 808:Src/main.c    ****                     TAPE_LEFT_STATE = NOT_FLAGGED;
 809:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 810:Src/main.c    ****                 }
 811:Src/main.c    ****                 else if (TAPE_RIGHT_STATE == FLAGGED && TAPE_LEFT_STATE != FLAGGED)
 812:Src/main.c    ****                 {
 813:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 814:Src/main.c    ****                     while (HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) == GPIO_PIN_SET);
 815:Src/main.c    ****                     HAL_Delay(100);
 816:Src/main.c    ****                     TAPE_RIGHT_STATE = NOT_FLAGGED;
 817:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 818:Src/main.c    ****                 }
 819:Src/main.c    ****             }
 820:Src/main.c    ****             */
 821:Src/main.c    ****         }
 822:Src/main.c    **** 
 823:Src/main.c    ****         if (ewok_cnt == 3)
 1430              		.loc 1 823 0
 1431 016c 5F4B     		ldr	r3, .L96+8
 1432 016e 1B68     		ldr	r3, [r3]
 1433 0170 032B     		cmp	r3, #3
 1434 0172 2FD1     		bne	.L86
 824:Src/main.c    ****         {
 825:Src/main.c    ****             print("Third ewok captured\n", 0);
 1435              		.loc 1 825 0
 1436 0174 6248     		ldr	r0, .L96+28
 1437 0176 0021     		movs	r1, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 42


 1438 0178 FFF7FEFF 		bl	print
 1439              	.LVL180:
 826:Src/main.c    ****             turn_deg(110);
 1440              		.loc 1 826 0
 1441 017c 6E20     		movs	r0, #110
 1442 017e FFF7FEFF 		bl	turn_deg
 1443              	.LVL181:
 827:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1444              		.loc 1 827 0
 1445 0182 5D4F     		ldr	r7, .L96+20
 1446 0184 0820     		movs	r0, #8
 1447 0186 3988     		ldrh	r1, [r7]
 1448 0188 FFF7FEFF 		bl	set_motor_speed
 1449              	.LVL182:
 828:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1450              		.loc 1 828 0
 1451 018c 594E     		ldr	r6, .L96+16
 1452 018e 0020     		movs	r0, #0
 1453 0190 3188     		ldrh	r1, [r6]
 1454 0192 FFF7FEFF 		bl	set_motor_speed
 1455              	.LVL183:
 829:Src/main.c    ****             open_claw(&htim3);
 1456              		.loc 1 829 0
 1457 0196 DFF85081 		ldr	r8, .L96+4
 1458 019a 4046     		mov	r0, r8
 1459 019c FFF7FEFF 		bl	open_claw
 1460              	.LVL184:
 830:Src/main.c    ****             drive_straight_time(enc_pid, LEFT_SPEED, RIGHT_SPEED, 1500);
 1461              		.loc 1 830 0
 1462 01a0 2046     		mov	r0, r4
 1463 01a2 3188     		ldrh	r1, [r6]
 1464 01a4 3A88     		ldrh	r2, [r7]
 1465 01a6 40F2DC53 		movw	r3, #1500
 1466 01aa FFF7FEFF 		bl	drive_straight_time
 1467              	.LVL185:
 831:Src/main.c    ****             drive_straight_time(enc_pid, 600, 600, 1500);
 1468              		.loc 1 831 0
 1469 01ae 2046     		mov	r0, r4
 1470 01b0 4FF41671 		mov	r1, #600
 1471 01b4 0A46     		mov	r2, r1
 1472 01b6 40F2DC53 		movw	r3, #1500
 1473 01ba FFF7FEFF 		bl	drive_straight_time
 1474              	.LVL186:
 832:Src/main.c    ****             arm_down(&htim3);
 1475              		.loc 1 832 0
 1476 01be 4046     		mov	r0, r8
 1477 01c0 FFF7FEFF 		bl	arm_down
 1478              	.LVL187:
 833:Src/main.c    ****             // todo delete below
 834:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1479              		.loc 1 834 0
 1480 01c4 0820     		movs	r0, #8
 1481 01c6 3988     		ldrh	r1, [r7]
 1482 01c8 FFF7FEFF 		bl	set_motor_speed
 1483              	.LVL188:
 835:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1484              		.loc 1 835 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 43


 1485 01cc 0020     		movs	r0, #0
 1486 01ce 3188     		ldrh	r1, [r6]
 1487 01d0 FFF7FEFF 		bl	set_motor_speed
 1488              	.LVL189:
 1489              	.L86:
 836:Src/main.c    ****         }
 837:Src/main.c    **** 
 838:Src/main.c    ****         if (ewok_cnt == 4)
 1490              		.loc 1 838 0
 1491 01d4 454B     		ldr	r3, .L96+8
 1492 01d6 1B68     		ldr	r3, [r3]
 1493 01d8 042B     		cmp	r3, #4
 1494 01da 51D1     		bne	.L87
 839:Src/main.c    ****         {
 840:Src/main.c    ****             print("Fourth ewok captured\n", 0);
 1495              		.loc 1 840 0
 1496 01dc 4948     		ldr	r0, .L96+32
 1497 01de 0021     		movs	r1, #0
 1498 01e0 FFF7FEFF 		bl	print
 1499              	.LVL190:
 841:Src/main.c    ****             turn_deg(150);
 1500              		.loc 1 841 0
 1501 01e4 9620     		movs	r0, #150
 1502 01e6 FFF7FEFF 		bl	turn_deg
 1503              	.LVL191:
 842:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1504              		.loc 1 842 0
 1505 01ea 0820     		movs	r0, #8
 1506 01ec 424B     		ldr	r3, .L96+20
 1507 01ee 1988     		ldrh	r1, [r3]
 1508 01f0 FFF7FEFF 		bl	set_motor_speed
 1509              	.LVL192:
 843:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1510              		.loc 1 843 0
 1511 01f4 0020     		movs	r0, #0
 1512 01f6 3F4B     		ldr	r3, .L96+16
 1513 01f8 1988     		ldrh	r1, [r3]
 1514 01fa FFF7FEFF 		bl	set_motor_speed
 1515              	.LVL193:
 844:Src/main.c    ****             open_claw(&htim3);
 1516              		.loc 1 844 0
 1517 01fe 3A48     		ldr	r0, .L96+4
 1518 0200 FFF7FEFF 		bl	open_claw
 1519              	.LVL194:
 845:Src/main.c    ****             while (HAL_GetTick() - timeee < 8000)
 1520              		.loc 1 845 0
 1521 0204 33E0     		b	.L91
 1522              	.L93:
 846:Src/main.c    ****             {
 847:Src/main.c    ****                 if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 1523              		.loc 1 847 0
 1524 0206 404B     		ldr	r3, .L96+36
 1525 0208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1526 020a 012B     		cmp	r3, #1
 1527 020c 17D1     		bne	.L89
 1528              		.loc 1 847 0 is_stmt 0 discriminator 1
 1529 020e 3F4B     		ldr	r3, .L96+40
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 44


 1530 0210 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1531 0212 A3B9     		cbnz	r3, .L89
 848:Src/main.c    ****                 {
 849:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 1532              		.loc 1 849 0 is_stmt 1
 1533 0214 0820     		movs	r0, #8
 1534 0216 0021     		movs	r1, #0
 1535 0218 FFF7FEFF 		bl	set_motor_speed
 1536              	.LVL195:
 1537              	.L90:
 850:Src/main.c    ****                     // Edge detected when LOW
 851:Src/main.c    ****                     while (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET);
 1538              		.loc 1 851 0 discriminator 1
 1539 021c 3C48     		ldr	r0, .L96+44
 1540 021e 0421     		movs	r1, #4
 1541 0220 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1542              	.LVL196:
 1543 0224 0028     		cmp	r0, #0
 1544 0226 F9D0     		beq	.L90
 852:Src/main.c    ****                     HAL_Delay(200);
 1545              		.loc 1 852 0
 1546 0228 C820     		movs	r0, #200
 1547 022a FFF7FEFF 		bl	HAL_Delay
 1548              	.LVL197:
 853:Src/main.c    ****                     EDGE_LEFT_STATE = NOT_FLAGGED;
 1549              		.loc 1 853 0
 1550 022e 0022     		movs	r2, #0
 1551 0230 354B     		ldr	r3, .L96+36
 1552 0232 1A70     		strb	r2, [r3]
 854:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1553              		.loc 1 854 0
 1554 0234 0820     		movs	r0, #8
 1555 0236 304B     		ldr	r3, .L96+20
 1556 0238 1988     		ldrh	r1, [r3]
 1557 023a FFF7FEFF 		bl	set_motor_speed
 1558              	.LVL198:
 1559              	.L89:
 855:Src/main.c    ****                 }
 856:Src/main.c    ****                 if (EDGE_RIGHT_STATE == FLAGGED)
 1560              		.loc 1 856 0
 1561 023e 334B     		ldr	r3, .L96+40
 1562 0240 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1563 0242 012B     		cmp	r3, #1
 1564 0244 13D1     		bne	.L91
 857:Src/main.c    ****                 {
 858:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 1565              		.loc 1 858 0
 1566 0246 0020     		movs	r0, #0
 1567 0248 0146     		mov	r1, r0
 1568 024a FFF7FEFF 		bl	set_motor_speed
 1569              	.LVL199:
 1570              	.L92:
 859:Src/main.c    ****                     while (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET
 1571              		.loc 1 859 0 discriminator 1
 1572 024e 3148     		ldr	r0, .L96+48
 1573 0250 0821     		movs	r1, #8
 1574 0252 FFF7FEFF 		bl	HAL_GPIO_ReadPin
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 45


 1575              	.LVL200:
 1576 0256 0028     		cmp	r0, #0
 1577 0258 F9D0     		beq	.L92
 860:Src/main.c    ****                     HAL_Delay(200);
 1578              		.loc 1 860 0
 1579 025a C820     		movs	r0, #200
 1580 025c FFF7FEFF 		bl	HAL_Delay
 1581              	.LVL201:
 861:Src/main.c    ****                     EDGE_RIGHT_STATE = NOT_FLAGGED;
 1582              		.loc 1 861 0
 1583 0260 0020     		movs	r0, #0
 1584 0262 2A4B     		ldr	r3, .L96+40
 1585 0264 1870     		strb	r0, [r3]
 862:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1586              		.loc 1 862 0
 1587 0266 234B     		ldr	r3, .L96+16
 1588 0268 1988     		ldrh	r1, [r3]
 1589 026a FFF7FEFF 		bl	set_motor_speed
 1590              	.LVL202:
 1591              	.L91:
 845:Src/main.c    ****             {
 1592              		.loc 1 845 0
 1593 026e FFF7FEFF 		bl	HAL_GetTick
 1594              	.LVL203:
 1595 0272 401B     		subs	r0, r0, r5
 1596 0274 B0F5FA5F 		cmp	r0, #8000
 1597 0278 C5D3     		bcc	.L93
 863:Src/main.c    ****                 }
 864:Src/main.c    ****             }
 865:Src/main.c    ****             arm_down(&htim3);
 1598              		.loc 1 865 0
 1599 027a 1B48     		ldr	r0, .L96+4
 1600 027c FFF7FEFF 		bl	arm_down
 1601              	.LVL204:
 1602              	.L87:
 866:Src/main.c    ****         }
 867:Src/main.c    **** 
 868:Src/main.c    ****         if (ewok_cnt == 5)
 1603              		.loc 1 868 0
 1604 0280 1A4B     		ldr	r3, .L96+8
 1605 0282 1B68     		ldr	r3, [r3]
 1606 0284 052B     		cmp	r3, #5
 1607 0286 26D1     		bne	.L94
 869:Src/main.c    ****         {
 870:Src/main.c    ****             print("Chewie captured\n", 0);
 1608              		.loc 1 870 0
 1609 0288 2348     		ldr	r0, .L96+52
 1610 028a 0021     		movs	r1, #0
 1611 028c FFF7FEFF 		bl	print
 1612              	.LVL205:
 871:Src/main.c    ****             turn_deg(50);
 1613              		.loc 1 871 0
 1614 0290 3220     		movs	r0, #50
 1615 0292 FFF7FEFF 		bl	turn_deg
 1616              	.LVL206:
 872:Src/main.c    ****             open_claw(&htim3);
 1617              		.loc 1 872 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 46


 1618 0296 144D     		ldr	r5, .L96+4
 1619              	.LVL207:
 1620 0298 2846     		mov	r0, r5
 1621 029a FFF7FEFF 		bl	open_claw
 1622              	.LVL208:
 873:Src/main.c    ****             HAL_Delay(750);
 1623              		.loc 1 873 0
 1624 029e 40F2EE20 		movw	r0, #750
 1625 02a2 FFF7FEFF 		bl	HAL_Delay
 1626              	.LVL209:
 874:Src/main.c    ****             arm_down(&htim3);
 1627              		.loc 1 874 0
 1628 02a6 2846     		mov	r0, r5
 1629 02a8 FFF7FEFF 		bl	arm_down
 1630              	.LVL210:
 875:Src/main.c    ****             slow_actuate(&htim3, BASKET_CH, 10, 180);
 1631              		.loc 1 875 0
 1632 02ac 2846     		mov	r0, r5
 1633 02ae 0821     		movs	r1, #8
 1634 02b0 0A22     		movs	r2, #10
 1635 02b2 B423     		movs	r3, #180
 1636 02b4 FFF7FEFF 		bl	slow_actuate
 1637              	.LVL211:
 876:Src/main.c    ****             drive_straight_time(enc_pid, LEFT_SPEED, RIGHT_SPEED, 3000);
 1638              		.loc 1 876 0
 1639 02b8 2046     		mov	r0, r4
 1640 02ba 0E4B     		ldr	r3, .L96+16
 1641 02bc 1988     		ldrh	r1, [r3]
 1642 02be 0E4B     		ldr	r3, .L96+20
 1643 02c0 1A88     		ldrh	r2, [r3]
 1644 02c2 40F6B833 		movw	r3, #3000
 1645 02c6 FFF7FEFF 		bl	drive_straight_time
 1646              	.LVL212:
 877:Src/main.c    ****             slow_actuate(&htim3, BASKET_CH, 180, 20);
 1647              		.loc 1 877 0
 1648 02ca 2846     		mov	r0, r5
 1649 02cc 0821     		movs	r1, #8
 1650 02ce B422     		movs	r2, #180
 1651 02d0 1423     		movs	r3, #20
 1652 02d2 FFF7FEFF 		bl	slow_actuate
 1653              	.LVL213:
 1654              	.L94:
 878:Src/main.c    ****         }
 879:Src/main.c    ****         CLAW_INT_STATE = NOT_FLAGGED;
 1655              		.loc 1 879 0
 1656 02d6 0022     		movs	r2, #0
 1657 02d8 104B     		ldr	r3, .L96+56
 1658 02da 1A70     		strb	r2, [r3]
 880:Src/main.c    ****         return TRUE;
 881:Src/main.c    **** }
 1659              		.loc 1 881 0
 1660 02dc 0120     		movs	r0, #1
 1661 02de BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1662              	.LVL214:
 1663              	.L97:
 1664 02e2 00BF     		.align	2
 1665              	.L96:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 47


 1666 02e4 14010000 		.word	.LC14
 1667 02e8 00000000 		.word	htim3
 1668 02ec 00000000 		.word	.LANCHOR2
 1669 02f0 30010000 		.word	.LC15
 1670 02f4 00000000 		.word	.LANCHOR1
 1671 02f8 00000000 		.word	.LANCHOR0
 1672 02fc 48010000 		.word	.LC16
 1673 0300 60010000 		.word	.LC17
 1674 0304 78010000 		.word	.LC18
 1675 0308 00000000 		.word	EDGE_LEFT_STATE
 1676 030c 00000000 		.word	EDGE_RIGHT_STATE
 1677 0310 000C0240 		.word	1073875968
 1678 0314 00080240 		.word	1073874944
 1679 0318 90010000 		.word	.LC19
 1680 031c 00000000 		.word	CLAW_INT_STATE
 1681              		.cfi_endproc
 1682              	.LFE137:
 1684              		.section	.text.drive_straight_time,"ax",%progbits
 1685              		.align	2
 1686              		.global	drive_straight_time
 1687              		.thumb
 1688              		.thumb_func
 1690              	drive_straight_time:
 1691              	.LFB127:
 433:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 1692              		.loc 1 433 0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 0
 1695              		@ frame_needed = 0, uses_anonymous_args = 0
 1696              	.LVL215:
 1697 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1698              	.LCFI23:
 1699              		.cfi_def_cfa_offset 24
 1700              		.cfi_offset 4, -24
 1701              		.cfi_offset 5, -20
 1702              		.cfi_offset 6, -16
 1703              		.cfi_offset 7, -12
 1704              		.cfi_offset 8, -8
 1705              		.cfi_offset 14, -4
 1706 0004 0646     		mov	r6, r0
 1707 0006 8846     		mov	r8, r1
 1708 0008 1746     		mov	r7, r2
 1709 000a 1D46     		mov	r5, r3
 434:Src/main.c    ****     char msg[50] = "";
 1710              		.loc 1 434 0
 1711 000c FFF7FEFF 		bl	HAL_GetTick
 1712              	.LVL216:
 1713 0010 0446     		mov	r4, r0
 1714              	.LVL217:
 437:Src/main.c    ****     {
 1715              		.loc 1 437 0
 1716 0012 19E0     		b	.L99
 1717              	.LVL218:
 1718              	.L103:
 439:Src/main.c    ****         {
 1719              		.loc 1 439 0
 1720 0014 1448     		ldr	r0, .L105
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 48


 1721 0016 1021     		movs	r1, #16
 1722 0018 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1723              	.LVL219:
 1724 001c 0128     		cmp	r0, #1
 1725 001e 08D1     		bne	.L100
 441:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 1726              		.loc 1 441 0
 1727 0020 1248     		ldr	r0, .L105+4
 1728 0022 0021     		movs	r1, #0
 1729 0024 FFF7FEFF 		bl	print
 1730              	.LVL220:
 442:Src/main.c    ****         }
 1731              		.loc 1 442 0
 1732 0028 3046     		mov	r0, r6
 1733 002a FFF7FEFF 		bl	debounce_and_grab
 1734              	.LVL221:
 1735 002e 58B1     		cbz	r0, .L99
 1736 0030 0FE0     		b	.L101
 1737              	.L100:
 461:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 1738              		.loc 1 461 0
 1739 0032 0020     		movs	r0, #0
 1740 0034 4146     		mov	r1, r8
 1741 0036 FFF7FEFF 		bl	set_motor_speed
 1742              	.LVL222:
 462:Src/main.c    ****             drive_straight(enc_pid);
 1743              		.loc 1 462 0
 1744 003a 0820     		movs	r0, #8
 1745 003c 3946     		mov	r1, r7
 1746 003e FFF7FEFF 		bl	set_motor_speed
 1747              	.LVL223:
 463:Src/main.c    **** 
 1748              		.loc 1 463 0
 1749 0042 3046     		mov	r0, r6
 1750 0044 FFF7FEFF 		bl	drive_straight
 1751              	.LVL224:
 1752              	.L99:
 437:Src/main.c    ****     {
 1753              		.loc 1 437 0
 1754 0048 FFF7FEFF 		bl	HAL_GetTick
 1755              	.LVL225:
 1756 004c 001B     		subs	r0, r0, r4
 1757 004e A842     		cmp	r0, r5
 1758 0050 E0D3     		bcc	.L103
 1759              	.L101:
 467:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1760              		.loc 1 467 0
 1761 0052 0020     		movs	r0, #0
 1762 0054 0146     		mov	r1, r0
 1763 0056 FFF7FEFF 		bl	set_motor_speed
 1764              	.LVL226:
 468:Src/main.c    **** }
 1765              		.loc 1 468 0
 1766 005a 0820     		movs	r0, #8
 1767 005c 0021     		movs	r1, #0
 1768 005e FFF7FEFF 		bl	set_motor_speed
 1769              	.LVL227:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 49


 1770 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1771              	.LVL228:
 1772              	.L106:
 1773 0066 00BF     		.align	2
 1774              	.L105:
 1775 0068 00040240 		.word	1073873920
 1776 006c A4010000 		.word	.LC20
 1777              		.cfi_endproc
 1778              	.LFE127:
 1780              		.section	.text.test_PWM_htim1,"ax",%progbits
 1781              		.align	2
 1782              		.global	test_PWM_htim1
 1783              		.thumb
 1784              		.thumb_func
 1786              	test_PWM_htim1:
 1787              	.LFB138:
 882:Src/main.c    **** 
 883:Src/main.c    **** // ******
 884:Src/main.c    **** // TESTS
 885:Src/main.c    **** // ******
 886:Src/main.c    **** 
 887:Src/main.c    **** /*
 888:Src/main.c    ****  * Instructions:
 889:Src/main.c    ****  *      Run test_All() before the main while loop
 890:Src/main.c    ****  *      - Put a pull up resistor on htim3 PWM waves, measure voltage on pin
 891:Src/main.c    ****  *      - Measure voltage on pin of htim1
 892:Src/main.c    ****  *      - Give ADC pins values and read off of screen
 893:Src/main.c    ****  */
 894:Src/main.c    **** 
 895:Src/main.c    **** /*
 896:Src/main.c    ****  * Test PWM
 897:Src/main.c    ****  * Output: htim1 channel 1 through 4, PWM wave. Confirm these
 898:Src/main.c    ****  *         PWM waves via an oscilliscope.
 899:Src/main.c    ****  */
 900:Src/main.c    **** void test_PWM_htim1()
 901:Src/main.c    **** {
 1788              		.loc 1 901 0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 0
 1791              		@ frame_needed = 0, uses_anonymous_args = 0
 1792 0000 10B5     		push	{r4, lr}
 1793              	.LCFI24:
 1794              		.cfi_def_cfa_offset 8
 1795              		.cfi_offset 4, -8
 1796              		.cfi_offset 14, -4
 902:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1797              		.loc 1 902 0
 1798 0002 0C4C     		ldr	r4, .L111
 1799 0004 2046     		mov	r0, r4
 1800 0006 0021     		movs	r1, #0
 1801 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1802              	.LVL229:
 903:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 904:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1803              		.loc 1 904 0
 1804 000c 2046     		mov	r0, r4
 1805 000e 0821     		movs	r1, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 50


 1806 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1807              	.LVL230:
 905:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 906:Src/main.c    ****     int s = 0;
 1808              		.loc 1 906 0
 1809 0014 0024     		movs	r4, #0
 907:Src/main.c    ****     while (s < 1000)
 1810              		.loc 1 907 0
 1811 0016 08E0     		b	.L108
 1812              	.LVL231:
 1813              	.L109:
 908:Src/main.c    ****     {
 909:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, s);
 1814              		.loc 1 909 0
 1815 0018 064B     		ldr	r3, .L111
 1816 001a 1B68     		ldr	r3, [r3]
 1817 001c 5C63     		str	r4, [r3, #52]
 910:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 911:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, s);
 1818              		.loc 1 911 0
 1819 001e DC63     		str	r4, [r3, #60]
 912:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 913:Src/main.c    ****         s += 100;
 1820              		.loc 1 913 0
 1821 0020 6434     		adds	r4, r4, #100
 1822              	.LVL232:
 914:Src/main.c    ****         HAL_Delay(1000);
 1823              		.loc 1 914 0
 1824 0022 4FF47A70 		mov	r0, #1000
 1825 0026 FFF7FEFF 		bl	HAL_Delay
 1826              	.LVL233:
 1827              	.L108:
 907:Src/main.c    ****     {
 1828              		.loc 1 907 0
 1829 002a B4F57A7F 		cmp	r4, #1000
 1830 002e F3DB     		blt	.L109
 915:Src/main.c    ****     }
 916:Src/main.c    **** }
 1831              		.loc 1 916 0
 1832 0030 10BD     		pop	{r4, pc}
 1833              	.LVL234:
 1834              	.L112:
 1835 0032 00BF     		.align	2
 1836              	.L111:
 1837 0034 00000000 		.word	htim1
 1838              		.cfi_endproc
 1839              	.LFE138:
 1841              		.section	.text.test_PWM_htim3,"ax",%progbits
 1842              		.align	2
 1843              		.global	test_PWM_htim3
 1844              		.thumb
 1845              		.thumb_func
 1847              	test_PWM_htim3:
 1848              	.LFB139:
 917:Src/main.c    **** 
 918:Src/main.c    **** /*
 919:Src/main.c    ****  * Test PWM
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 51


 920:Src/main.c    ****  * Output: htim3 channel 1 through 3, PWM wave. Confirm these
 921:Src/main.c    ****  *         PWM waves via an oscilliscope.
 922:Src/main.c    ****  */
 923:Src/main.c    **** void test_PWM_htim3()
 924:Src/main.c    **** {
 1849              		.loc 1 924 0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 0
 1852              		@ frame_needed = 0, uses_anonymous_args = 0
 1853 0000 10B5     		push	{r4, lr}
 1854              	.LCFI25:
 1855              		.cfi_def_cfa_offset 8
 1856              		.cfi_offset 4, -8
 1857              		.cfi_offset 14, -4
 925:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1858              		.loc 1 925 0
 1859 0002 0F4C     		ldr	r4, .L117
 1860 0004 2046     		mov	r0, r4
 1861 0006 0021     		movs	r1, #0
 1862 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1863              	.LVL235:
 926:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1864              		.loc 1 926 0
 1865 000c 2046     		mov	r0, r4
 1866 000e 0421     		movs	r1, #4
 1867 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1868              	.LVL236:
 927:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1869              		.loc 1 927 0
 1870 0014 2046     		mov	r0, r4
 1871 0016 0821     		movs	r1, #8
 1872 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1873              	.LVL237:
 928:Src/main.c    **** 
 929:Src/main.c    ****     int s = 500;
 1874              		.loc 1 929 0
 1875 001c 4FF4FA74 		mov	r4, #500
 930:Src/main.c    ****     while (s < 2400)
 1876              		.loc 1 930 0
 1877 0020 09E0     		b	.L114
 1878              	.LVL238:
 1879              	.L115:
 931:Src/main.c    ****     {
 932:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s);
 1880              		.loc 1 932 0
 1881 0022 074B     		ldr	r3, .L117
 1882 0024 1B68     		ldr	r3, [r3]
 1883 0026 5C63     		str	r4, [r3, #52]
 933:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s);
 1884              		.loc 1 933 0
 1885 0028 9C63     		str	r4, [r3, #56]
 934:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, s);
 1886              		.loc 1 934 0
 1887 002a DC63     		str	r4, [r3, #60]
 935:Src/main.c    ****         s += 100;
 1888              		.loc 1 935 0
 1889 002c 6434     		adds	r4, r4, #100
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 52


 1890              	.LVL239:
 936:Src/main.c    ****         HAL_Delay(500);
 1891              		.loc 1 936 0
 1892 002e 4FF4FA70 		mov	r0, #500
 1893 0032 FFF7FEFF 		bl	HAL_Delay
 1894              	.LVL240:
 1895              	.L114:
 930:Src/main.c    ****     {
 1896              		.loc 1 930 0
 1897 0036 B4F5166F 		cmp	r4, #2400
 1898 003a F2DB     		blt	.L115
 937:Src/main.c    ****     }
 938:Src/main.c    **** }
 1899              		.loc 1 938 0
 1900 003c 10BD     		pop	{r4, pc}
 1901              	.LVL241:
 1902              	.L118:
 1903 003e 00BF     		.align	2
 1904              	.L117:
 1905 0040 00000000 		.word	htim3
 1906              		.cfi_endproc
 1907              	.LFE139:
 1909              		.section	.text.test_ADC,"ax",%progbits
 1910              		.align	2
 1911              		.global	test_ADC
 1912              		.thumb
 1913              		.thumb_func
 1915              	test_ADC:
 1916              	.LFB140:
 939:Src/main.c    **** 
 940:Src/main.c    **** void test_ADC()
 941:Src/main.c    **** {
 1917              		.loc 1 941 0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 24
 1920              		@ frame_needed = 0, uses_anonymous_args = 0
 1921 0000 10B5     		push	{r4, lr}
 1922              	.LCFI26:
 1923              		.cfi_def_cfa_offset 8
 1924              		.cfi_offset 4, -8
 1925              		.cfi_offset 14, -4
 1926 0002 86B0     		sub	sp, sp, #24
 1927              	.LCFI27:
 1928              		.cfi_def_cfa_offset 32
 942:Src/main.c    ****     char msg[18] = "";
 1929              		.loc 1 942 0
 1930 0004 0023     		movs	r3, #0
 1931 0006 0193     		str	r3, [sp, #4]
 1932 0008 0293     		str	r3, [sp, #8]
 1933 000a 0393     		str	r3, [sp, #12]
 1934 000c 0493     		str	r3, [sp, #16]
 1935 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
 943:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1936              		.loc 1 943 0
 1937 0012 0F48     		ldr	r0, .L122
 1938 0014 0F49     		ldr	r1, .L122+4
 1939 0016 4FF40062 		mov	r2, #2048
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 53


 1940 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1941              	.LVL242:
 1942              	.L120:
 1943              	.LBB5:
 944:Src/main.c    **** 
 945:Src/main.c    ****     while (1)
 946:Src/main.c    ****     {
 947:Src/main.c    ****         int ch_5 = adc_values[0];
 1944              		.loc 1 947 0 discriminator 1
 1945 001e 0E4B     		ldr	r3, .L122+8
 1946              	.LVL243:
 948:Src/main.c    ****         int ch_4 = adc_values[1];
 1947              		.loc 1 948 0 discriminator 1
 1948 0020 5C68     		ldr	r4, [r3, #4]
 1949              	.LVL244:
 949:Src/main.c    **** 
 950:Src/main.c    ****         sprintf(msg, "ch_5: %d\n", ch_5);
 1950              		.loc 1 950 0 discriminator 1
 1951 0022 01A8     		add	r0, sp, #4
 1952 0024 0D49     		ldr	r1, .L122+12
 1953 0026 1A68     		ldr	r2, [r3]
 1954 0028 FFF7FEFF 		bl	sprintf
 1955              	.LVL245:
 951:Src/main.c    ****         print(msg, 0);
 1956              		.loc 1 951 0 discriminator 1
 1957 002c 01A8     		add	r0, sp, #4
 1958 002e 0021     		movs	r1, #0
 1959 0030 FFF7FEFF 		bl	print
 1960              	.LVL246:
 952:Src/main.c    **** 
 953:Src/main.c    ****         sprintf(msg, "ch_4: %d\n", ch_4);
 1961              		.loc 1 953 0 discriminator 1
 1962 0034 01A8     		add	r0, sp, #4
 1963 0036 0A49     		ldr	r1, .L122+16
 1964 0038 2246     		mov	r2, r4
 1965 003a FFF7FEFF 		bl	sprintf
 1966              	.LVL247:
 954:Src/main.c    ****         print(msg, 2);
 1967              		.loc 1 954 0 discriminator 1
 1968 003e 01A8     		add	r0, sp, #4
 1969 0040 0221     		movs	r1, #2
 1970 0042 FFF7FEFF 		bl	print
 1971              	.LVL248:
 955:Src/main.c    **** 
 956:Src/main.c    ****         HAL_Delay(100);
 1972              		.loc 1 956 0 discriminator 1
 1973 0046 6420     		movs	r0, #100
 1974 0048 FFF7FEFF 		bl	HAL_Delay
 1975              	.LVL249:
 1976              	.LBE5:
 957:Src/main.c    ****     }
 1977              		.loc 1 957 0 discriminator 1
 1978 004c E7E7     		b	.L120
 1979              	.L123:
 1980 004e 00BF     		.align	2
 1981              	.L122:
 1982 0050 00000000 		.word	hadc1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 54


 1983 0054 00000000 		.word	dma_buffer
 1984 0058 00000000 		.word	adc_values
 1985 005c B4010000 		.word	.LC21
 1986 0060 C0010000 		.word	.LC22
 1987              		.cfi_endproc
 1988              	.LFE140:
 1990              		.section	.text.test_All,"ax",%progbits
 1991              		.align	2
 1992              		.global	test_All
 1993              		.thumb
 1994              		.thumb_func
 1996              	test_All:
 1997              	.LFB141:
 958:Src/main.c    **** }
 959:Src/main.c    **** 
 960:Src/main.c    **** /**
 961:Src/main.c    ****  * Test all PWM and ADC - Read PWM waves, input ADC voltages 
 962:Src/main.c    ****  * and read values on OLED
 963:Src/main.c    ****  *      htim1 -> CH1, CH2, CH3, CH4
 964:Src/main.c    ****  *      htim3 -> CH1, CH2, CH3
 965:Src/main.c    ****  *      ADC   -> CH5, CH4
 966:Src/main.c    ****  */
 967:Src/main.c    **** void test_All()
 968:Src/main.c    **** {
 1998              		.loc 1 968 0
 1999              		.cfi_startproc
 2000              		@ Volatile: function does not return.
 2001              		@ args = 0, pretend = 0, frame = 0
 2002              		@ frame_needed = 0, uses_anonymous_args = 0
 2003 0000 08B5     		push	{r3, lr}
 2004              	.LCFI28:
 2005              		.cfi_def_cfa_offset 8
 2006              		.cfi_offset 3, -8
 2007              		.cfi_offset 14, -4
 969:Src/main.c    ****     test_PWM_htim1();
 2008              		.loc 1 969 0
 2009 0002 FFF7FEFF 		bl	test_PWM_htim1
 2010              	.LVL250:
 970:Src/main.c    ****     test_PWM_htim3();
 2011              		.loc 1 970 0
 2012 0006 FFF7FEFF 		bl	test_PWM_htim3
 2013              	.LVL251:
 971:Src/main.c    ****     test_ADC();
 2014              		.loc 1 971 0
 2015 000a FFF7FEFF 		bl	test_ADC
 2016              	.LVL252:
 2017              		.cfi_endproc
 2018              	.LFE141:
 2020 000e 00BF     		.section	.text._Error_Handler,"ax",%progbits
 2021              		.align	2
 2022              		.global	_Error_Handler
 2023              		.thumb
 2024              		.thumb_func
 2026              	_Error_Handler:
 2027              	.LFB142:
 972:Src/main.c    **** }
 973:Src/main.c    **** // ******
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 55


 974:Src/main.c    **** // END TESTS
 975:Src/main.c    **** // ******
 976:Src/main.c    **** 
 977:Src/main.c    **** /* USER CODE END 4 */
 978:Src/main.c    **** 
 979:Src/main.c    **** /**
 980:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 981:Src/main.c    ****   * @param  file: The file name as string.
 982:Src/main.c    ****   * @param  line: The line in file as a number.
 983:Src/main.c    ****   * @retval None
 984:Src/main.c    ****   */
 985:Src/main.c    **** void _Error_Handler(char *file, int line)
 986:Src/main.c    **** {
 2028              		.loc 1 986 0
 2029              		.cfi_startproc
 2030              		@ Volatile: function does not return.
 2031              		@ args = 0, pretend = 0, frame = 0
 2032              		@ frame_needed = 0, uses_anonymous_args = 0
 2033              		@ link register save eliminated.
 2034              	.LVL253:
 2035              	.L127:
 987:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 988:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 989:Src/main.c    ****     while (1)
 990:Src/main.c    ****     {
 991:Src/main.c    ****     }
 2036              		.loc 1 991 0 discriminator 1
 2037 0000 FEE7     		b	.L127
 2038              		.cfi_endproc
 2039              	.LFE142:
 2041 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 2042              		.align	2
 2043              		.global	SystemClock_Config
 2044              		.thumb
 2045              		.thumb_func
 2047              	SystemClock_Config:
 2048              	.LFB125:
 347:Src/main.c    **** 
 2049              		.loc 1 347 0
 2050              		.cfi_startproc
 2051              		@ args = 0, pretend = 0, frame = 80
 2052              		@ frame_needed = 0, uses_anonymous_args = 0
 2053 0000 00B5     		push	{lr}
 2054              	.LCFI29:
 2055              		.cfi_def_cfa_offset 4
 2056              		.cfi_offset 14, -4
 2057 0002 95B0     		sub	sp, sp, #84
 2058              	.LCFI30:
 2059              		.cfi_def_cfa_offset 88
 2060              	.LBB6:
 354:Src/main.c    **** 
 2061              		.loc 1 354 0
 2062 0004 0022     		movs	r2, #0
 2063 0006 0192     		str	r2, [sp, #4]
 2064 0008 2A4B     		ldr	r3, .L132
 2065 000a 196C     		ldr	r1, [r3, #64]
 2066 000c 41F08051 		orr	r1, r1, #268435456
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 56


 2067 0010 1964     		str	r1, [r3, #64]
 2068 0012 1B6C     		ldr	r3, [r3, #64]
 2069 0014 03F08053 		and	r3, r3, #268435456
 2070 0018 0193     		str	r3, [sp, #4]
 2071 001a 019B     		ldr	r3, [sp, #4]
 2072              	.LBE6:
 2073              	.LBB7:
 356:Src/main.c    **** 
 2074              		.loc 1 356 0
 2075 001c 0292     		str	r2, [sp, #8]
 2076 001e 2649     		ldr	r1, .L132+4
 2077 0020 0B68     		ldr	r3, [r1]
 2078 0022 23F44043 		bic	r3, r3, #49152
 2079 0026 43F40043 		orr	r3, r3, #32768
 2080 002a 0B60     		str	r3, [r1]
 2081 002c 0B68     		ldr	r3, [r1]
 2082 002e 03F44043 		and	r3, r3, #49152
 2083 0032 0293     		str	r3, [sp, #8]
 2084 0034 029B     		ldr	r3, [sp, #8]
 2085              	.LBE7:
 360:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2086              		.loc 1 360 0
 2087 0036 0223     		movs	r3, #2
 2088 0038 0893     		str	r3, [sp, #32]
 361:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 2089              		.loc 1 361 0
 2090 003a 0121     		movs	r1, #1
 2091 003c 0B91     		str	r1, [sp, #44]
 362:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2092              		.loc 1 362 0
 2093 003e 1021     		movs	r1, #16
 2094 0040 0C91     		str	r1, [sp, #48]
 363:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2095              		.loc 1 363 0
 2096 0042 0E93     		str	r3, [sp, #56]
 364:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 2097              		.loc 1 364 0
 2098 0044 0F92     		str	r2, [sp, #60]
 365:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 2099              		.loc 1 365 0
 2100 0046 0822     		movs	r2, #8
 2101 0048 1092     		str	r2, [sp, #64]
 366:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2102              		.loc 1 366 0
 2103 004a 4822     		movs	r2, #72
 2104 004c 1192     		str	r2, [sp, #68]
 367:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 2105              		.loc 1 367 0
 2106 004e 1293     		str	r3, [sp, #72]
 368:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2107              		.loc 1 368 0
 2108 0050 0423     		movs	r3, #4
 2109 0052 1393     		str	r3, [sp, #76]
 369:Src/main.c    ****   {
 2110              		.loc 1 369 0
 2111 0054 08A8     		add	r0, sp, #32
 2112 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 57


 2113              	.LVL254:
 2114 005a 20B1     		cbz	r0, .L129
 371:Src/main.c    ****   }
 2115              		.loc 1 371 0
 2116 005c 1748     		ldr	r0, .L132+8
 2117 005e 40F27311 		movw	r1, #371
 2118 0062 FFF7FEFF 		bl	_Error_Handler
 2119              	.LVL255:
 2120              	.L129:
 376:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2121              		.loc 1 376 0
 2122 0066 0F23     		movs	r3, #15
 2123 0068 0393     		str	r3, [sp, #12]
 378:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2124              		.loc 1 378 0
 2125 006a 0221     		movs	r1, #2
 2126 006c 0491     		str	r1, [sp, #16]
 379:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2127              		.loc 1 379 0
 2128 006e 0023     		movs	r3, #0
 2129 0070 0593     		str	r3, [sp, #20]
 380:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2130              		.loc 1 380 0
 2131 0072 4FF48052 		mov	r2, #4096
 2132 0076 0692     		str	r2, [sp, #24]
 381:Src/main.c    **** 
 2133              		.loc 1 381 0
 2134 0078 0793     		str	r3, [sp, #28]
 383:Src/main.c    ****   {
 2135              		.loc 1 383 0
 2136 007a 03A8     		add	r0, sp, #12
 2137 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2138              	.LVL256:
 2139 0080 20B1     		cbz	r0, .L130
 385:Src/main.c    ****   }
 2140              		.loc 1 385 0
 2141 0082 0E48     		ldr	r0, .L132+8
 2142 0084 40F28111 		movw	r1, #385
 2143 0088 FFF7FEFF 		bl	_Error_Handler
 2144              	.LVL257:
 2145              	.L130:
 390:Src/main.c    **** 
 2146              		.loc 1 390 0
 2147 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2148              	.LVL258:
 2149 0090 0B4B     		ldr	r3, .L132+12
 2150 0092 A3FB0030 		umull	r3, r0, r3, r0
 2151 0096 8009     		lsrs	r0, r0, #6
 2152 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 2153              	.LVL259:
 394:Src/main.c    **** 
 2154              		.loc 1 394 0
 2155 009c 0420     		movs	r0, #4
 2156 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 2157              	.LVL260:
 397:Src/main.c    **** }
 2158              		.loc 1 397 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 58


 2159 00a2 4FF0FF30 		mov	r0, #-1
 2160 00a6 0021     		movs	r1, #0
 2161 00a8 0A46     		mov	r2, r1
 2162 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 2163              	.LVL261:
 398:Src/main.c    **** 
 2164              		.loc 1 398 0
 2165 00ae 15B0     		add	sp, sp, #84
 2166              	.LCFI31:
 2167              		.cfi_def_cfa_offset 4
 2168              		@ sp needed
 2169 00b0 5DF804FB 		ldr	pc, [sp], #4
 2170              	.L133:
 2171              		.align	2
 2172              	.L132:
 2173 00b4 00380240 		.word	1073887232
 2174 00b8 00700040 		.word	1073770496
 2175 00bc CC010000 		.word	.LC23
 2176 00c0 D34D6210 		.word	274877907
 2177              		.cfi_endproc
 2178              	.LFE125:
 2180              		.section	.text.main,"ax",%progbits
 2181              		.align	2
 2182              		.global	main
 2183              		.thumb
 2184              		.thumb_func
 2186              	main:
 2187              	.LFB124:
 115:Src/main.c    ****   /* USER CODE BEGIN 1 */
 2188              		.loc 1 115 0
 2189              		.cfi_startproc
 2190              		@ args = 0, pretend = 0, frame = 24
 2191              		@ frame_needed = 0, uses_anonymous_args = 0
 2192 0000 70B5     		push	{r4, r5, r6, lr}
 2193              	.LCFI32:
 2194              		.cfi_def_cfa_offset 16
 2195              		.cfi_offset 4, -16
 2196              		.cfi_offset 5, -12
 2197              		.cfi_offset 6, -8
 2198              		.cfi_offset 14, -4
 2199 0002 88B0     		sub	sp, sp, #32
 2200              	.LCFI33:
 2201              		.cfi_def_cfa_offset 48
 123:Src/main.c    **** 
 2202              		.loc 1 123 0
 2203 0004 FFF7FEFF 		bl	HAL_Init
 2204              	.LVL262:
 130:Src/main.c    **** 
 2205              		.loc 1 130 0
 2206 0008 FFF7FEFF 		bl	SystemClock_Config
 2207              	.LVL263:
 137:Src/main.c    ****   MX_DMA_Init();
 2208              		.loc 1 137 0
 2209 000c FFF7FEFF 		bl	MX_GPIO_Init
 2210              	.LVL264:
 138:Src/main.c    ****   MX_TIM3_Init();
 2211              		.loc 1 138 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 59


 2212 0010 FFF7FEFF 		bl	MX_DMA_Init
 2213              	.LVL265:
 139:Src/main.c    ****   MX_TIM1_Init();
 2214              		.loc 1 139 0
 2215 0014 FFF7FEFF 		bl	MX_TIM3_Init
 2216              	.LVL266:
 140:Src/main.c    ****   MX_TIM2_Init();
 2217              		.loc 1 140 0
 2218 0018 FFF7FEFF 		bl	MX_TIM1_Init
 2219              	.LVL267:
 141:Src/main.c    ****   MX_ADC1_Init();
 2220              		.loc 1 141 0
 2221 001c FFF7FEFF 		bl	MX_TIM2_Init
 2222              	.LVL268:
 142:Src/main.c    ****   MX_TIM4_Init();
 2223              		.loc 1 142 0
 2224 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2225              	.LVL269:
 143:Src/main.c    ****   MX_TIM9_Init();
 2226              		.loc 1 143 0
 2227 0024 FFF7FEFF 		bl	MX_TIM4_Init
 2228              	.LVL270:
 144:Src/main.c    ****   MX_TIM5_Init();
 2229              		.loc 1 144 0
 2230 0028 FFF7FEFF 		bl	MX_TIM9_Init
 2231              	.LVL271:
 145:Src/main.c    ****   MX_I2C1_Init();
 2232              		.loc 1 145 0
 2233 002c FFF7FEFF 		bl	MX_TIM5_Init
 2234              	.LVL272:
 146:Src/main.c    ****   MX_USART6_UART_Init();
 2235              		.loc 1 146 0
 2236 0030 FFF7FEFF 		bl	MX_I2C1_Init
 2237              	.LVL273:
 147:Src/main.c    ****   /* USER CODE BEGIN 2 */
 2238              		.loc 1 147 0
 2239 0034 FFF7FEFF 		bl	MX_USART6_UART_Init
 2240              	.LVL274:
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 2241              		.loc 1 164 0
 2242 0038 6148     		ldr	r0, .L144
 2243 003a 1821     		movs	r1, #24
 2244 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2245              	.LVL275:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 2246              		.loc 1 165 0
 2247 0040 6048     		ldr	r0, .L144+4
 2248 0042 1821     		movs	r1, #24
 2249 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2250              	.LVL276:
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 2251              		.loc 1 166 0
 2252 0048 5F4C     		ldr	r4, .L144+8
 2253 004a 2046     		mov	r0, r4
 2254 004c 0021     		movs	r1, #0
 2255 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2256              	.LVL277:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 60


 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 2257              		.loc 1 167 0
 2258 0052 2046     		mov	r0, r4
 2259 0054 0421     		movs	r1, #4
 2260 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2261              	.LVL278:
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 2262              		.loc 1 168 0
 2263 005a 2046     		mov	r0, r4
 2264 005c 0821     		movs	r1, #8
 2265 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2266              	.LVL279:
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2267              		.loc 1 169 0
 2268 0062 2046     		mov	r0, r4
 2269 0064 0C21     		movs	r1, #12
 2270 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2271              	.LVL280:
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 2272              		.loc 1 170 0
 2273 006a 584C     		ldr	r4, .L144+12
 2274 006c 2046     		mov	r0, r4
 2275 006e 0021     		movs	r1, #0
 2276 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2277              	.LVL281:
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 2278              		.loc 1 171 0
 2279 0074 2046     		mov	r0, r4
 2280 0076 0421     		movs	r1, #4
 2281 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2282              	.LVL282:
 172:Src/main.c    **** 
 2283              		.loc 1 172 0
 2284 007c 2046     		mov	r0, r4
 2285 007e 0821     		movs	r1, #8
 2286 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2287              	.LVL283:
 175:Src/main.c    ****     print("Starting\n", 0);
 2288              		.loc 1 175 0
 2289 0084 FFF7FEFF 		bl	ssd1306_Init
 2290              	.LVL284:
 176:Src/main.c    ****     claw_init(&htim3);
 2291              		.loc 1 176 0
 2292 0088 5148     		ldr	r0, .L144+16
 2293 008a 0021     		movs	r1, #0
 2294 008c FFF7FEFF 		bl	print
 2295              	.LVL285:
 177:Src/main.c    ****     // basket_init(&htim3);
 2296              		.loc 1 177 0
 2297 0090 2046     		mov	r0, r4
 2298 0092 FFF7FEFF 		bl	claw_init
 2299              	.LVL286:
 180:Src/main.c    **** 
 2300              		.loc 1 180 0
 2301 0096 0221     		movs	r1, #2
 2302 0098 0091     		str	r1, [sp]
 2303 009a 0123     		movs	r3, #1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 61


 2304 009c 0193     		str	r3, [sp, #4]
 2305 009e 02A8     		add	r0, sp, #8
 2306 00a0 0022     		movs	r2, #0
 2307 00a2 1346     		mov	r3, r2
 2308 00a4 FFF7FEFF 		bl	pid_Init
 2309              	.LVL287:
 182:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 2310              		.loc 1 182 0
 2311 00a8 0024     		movs	r4, #0
 2312 00aa 4A4B     		ldr	r3, .L144+20
 2313 00ac 1C70     		strb	r4, [r3]
 183:Src/main.c    **** 
 2314              		.loc 1 183 0
 2315 00ae 4A4B     		ldr	r3, .L144+24
 2316 00b0 1C70     		strb	r4, [r3]
 185:Src/main.c    **** 
 2317              		.loc 1 185 0
 2318 00b2 4A4E     		ldr	r6, .L144+28
 2319 00b4 3188     		ldrh	r1, [r6]
 2320 00b6 4A4D     		ldr	r5, .L144+32
 2321 00b8 02A8     		add	r0, sp, #8
 2322 00ba 6431     		adds	r1, r1, #100
 2323 00bc 2A88     		ldrh	r2, [r5]
 2324 00be 4FF4FA63 		mov	r3, #2000
 2325 00c2 FFF7FEFF 		bl	drive_straight_time
 2326              	.LVL288:
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 2327              		.loc 1 188 0
 2328 00c6 0620     		movs	r0, #6
 2329 00c8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2330              	.LVL289:
 189:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 2331              		.loc 1 189 0
 2332 00cc 0A20     		movs	r0, #10
 2333 00ce FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2334              	.LVL290:
 190:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 2335              		.loc 1 190 0
 2336 00d2 444B     		ldr	r3, .L144+36
 2337 00d4 1C70     		strb	r4, [r3]
 191:Src/main.c    **** 
 2338              		.loc 1 191 0
 2339 00d6 444B     		ldr	r3, .L144+40
 2340 00d8 1C70     		strb	r4, [r3]
 193:Src/main.c    ****     print("ewok\n", 0);
 2341              		.loc 1 193 0
 2342 00da 02A8     		add	r0, sp, #8
 2343 00dc 3188     		ldrh	r1, [r6]
 2344 00de 2A88     		ldrh	r2, [r5]
 2345 00e0 41F28833 		movw	r3, #5000
 2346 00e4 FFF7FEFF 		bl	drive_straight_time
 2347              	.LVL291:
 194:Src/main.c    **** 
 2348              		.loc 1 194 0
 2349 00e8 4048     		ldr	r0, .L144+44
 2350 00ea 2146     		mov	r1, r4
 2351 00ec FFF7FEFF 		bl	print
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 62


 2352              	.LVL292:
 2353              	.L141:
 2354              	.LBB8:
 205:Src/main.c    ****         {
 2355              		.loc 1 205 0
 2356 00f0 3C4B     		ldr	r3, .L144+36
 2357 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2358 00f4 012B     		cmp	r3, #1
 2359 00f6 3AD1     		bne	.L135
 2360              	.LBB9:
 208:Src/main.c    ****             // Turn to ewok
 2361              		.loc 1 208 0
 2362 00f8 3D48     		ldr	r0, .L144+48
 2363 00fa 0021     		movs	r1, #0
 2364 00fc FFF7FEFF 		bl	print
 2365              	.LVL293:
 210:Src/main.c    **** 
 2366              		.loc 1 210 0
 2367 0100 FFF7FEFF 		bl	turn
 2368              	.LVL294:
 214:Src/main.c    ****             while(HAL_GetTick()-time<3000){
 2369              		.loc 1 214 0
 2370 0104 FFF7FEFF 		bl	HAL_GetTick
 2371              	.LVL295:
 2372 0108 0446     		mov	r4, r0
 2373              	.LVL296:
 215:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2374              		.loc 1 215 0
 2375 010a 22E0     		b	.L136
 2376              	.LVL297:
 2377              	.L138:
 216:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2378              		.loc 1 216 0
 2379 010c 0020     		movs	r0, #0
 2380 010e 334B     		ldr	r3, .L144+28
 2381 0110 1988     		ldrh	r1, [r3]
 2382 0112 FFF7FEFF 		bl	set_motor_speed
 2383              	.LVL298:
 217:Src/main.c    ****                 drive_straight(&enc_pid);
 2384              		.loc 1 217 0
 2385 0116 0820     		movs	r0, #8
 2386 0118 314B     		ldr	r3, .L144+32
 2387 011a 1988     		ldrh	r1, [r3]
 2388 011c FFF7FEFF 		bl	set_motor_speed
 2389              	.LVL299:
 218:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 2390              		.loc 1 218 0
 2391 0120 02A8     		add	r0, sp, #8
 2392 0122 FFF7FEFF 		bl	drive_straight
 2393              	.LVL300:
 219:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 2394              		.loc 1 219 0
 2395 0126 0020     		movs	r0, #0
 2396 0128 0146     		mov	r1, r0
 2397 012a FFF7FEFF 		bl	set_motor_speed
 2398              	.LVL301:
 220:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 63


 2399              		.loc 1 220 0
 2400 012e 0820     		movs	r0, #8
 2401 0130 0021     		movs	r1, #0
 2402 0132 FFF7FEFF 		bl	set_motor_speed
 2403              	.LVL302:
 222:Src/main.c    ****                 {
 2404              		.loc 1 222 0
 2405 0136 2F48     		ldr	r0, .L144+52
 2406 0138 1021     		movs	r1, #16
 2407 013a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2408              	.LVL303:
 2409 013e 0128     		cmp	r0, #1
 2410 0140 07D1     		bne	.L136
 224:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 2411              		.loc 1 224 0
 2412 0142 2D48     		ldr	r0, .L144+56
 2413 0144 0021     		movs	r1, #0
 2414 0146 FFF7FEFF 		bl	print
 2415              	.LVL304:
 225:Src/main.c    ****                     break;
 2416              		.loc 1 225 0
 2417 014a 02A8     		add	r0, sp, #8
 2418 014c FFF7FEFF 		bl	debounce_and_grab
 2419              	.LVL305:
 226:Src/main.c    ****                 }
 2420              		.loc 1 226 0
 2421 0150 06E0     		b	.L137
 2422              	.L136:
 215:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2423              		.loc 1 215 0
 2424 0152 FFF7FEFF 		bl	HAL_GetTick
 2425              	.LVL306:
 2426 0156 001B     		subs	r0, r0, r4
 2427 0158 40F6B733 		movw	r3, #2999
 2428 015c 9842     		cmp	r0, r3
 2429 015e D5D9     		bls	.L138
 2430              	.L137:
 230:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 2431              		.loc 1 230 0
 2432 0160 2248     		ldr	r0, .L144+44
 2433 0162 0021     		movs	r1, #0
 2434 0164 FFF7FEFF 		bl	print
 2435              	.LVL307:
 231:Src/main.c    ****         }
 2436              		.loc 1 231 0
 2437 0168 0022     		movs	r2, #0
 2438 016a 1E4B     		ldr	r3, .L144+36
 2439 016c 1A70     		strb	r2, [r3]
 2440              	.LVL308:
 2441              	.L135:
 2442              	.LBE9:
 234:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 2443              		.loc 1 234 0
 2444 016e 0020     		movs	r0, #0
 2445 0170 0146     		mov	r1, r0
 2446 0172 FFF7FEFF 		bl	set_motor_speed
 2447              	.LVL309:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 64


 235:Src/main.c    ****         uint32_t time = HAL_GetTick();
 2448              		.loc 1 235 0
 2449 0176 0820     		movs	r0, #8
 2450 0178 0021     		movs	r1, #0
 2451 017a FFF7FEFF 		bl	set_motor_speed
 2452              	.LVL310:
 236:Src/main.c    ****         while(HAL_GetTick()-time<3000 && PI_INT_STATE == NOT_FLAGGED);
 2453              		.loc 1 236 0
 2454 017e FFF7FEFF 		bl	HAL_GetTick
 2455              	.LVL311:
 2456 0182 0446     		mov	r4, r0
 2457              	.LVL312:
 2458              	.L140:
 237:Src/main.c    ****         if(PI_INT_STATE != FLAGGED){
 2459              		.loc 1 237 0 discriminator 2
 2460 0184 FFF7FEFF 		bl	HAL_GetTick
 2461              	.LVL313:
 2462 0188 001B     		subs	r0, r0, r4
 2463 018a 40F6B733 		movw	r3, #2999
 2464 018e 9842     		cmp	r0, r3
 2465 0190 03D8     		bhi	.L139
 237:Src/main.c    ****         if(PI_INT_STATE != FLAGGED){
 2466              		.loc 1 237 0 is_stmt 0 discriminator 1
 2467 0192 144B     		ldr	r3, .L144+36
 2468 0194 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2469 0196 002B     		cmp	r3, #0
 2470 0198 F4D0     		beq	.L140
 2471              	.L139:
 238:Src/main.c    ****             drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 1000);
 2472              		.loc 1 238 0 is_stmt 1
 2473 019a 124B     		ldr	r3, .L144+36
 2474 019c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2475 019e 012B     		cmp	r3, #1
 2476 01a0 A6D0     		beq	.L141
 239:Src/main.c    ****             print("ewok\n", 0);
 2477              		.loc 1 239 0
 2478 01a2 02A8     		add	r0, sp, #8
 2479 01a4 0D4B     		ldr	r3, .L144+28
 2480 01a6 1988     		ldrh	r1, [r3]
 2481 01a8 0D4B     		ldr	r3, .L144+32
 2482 01aa 1A88     		ldrh	r2, [r3]
 2483 01ac 4FF47A73 		mov	r3, #1000
 2484 01b0 FFF7FEFF 		bl	drive_straight_time
 2485              	.LVL314:
 240:Src/main.c    ****         }
 2486              		.loc 1 240 0
 2487 01b4 0D48     		ldr	r0, .L144+44
 2488 01b6 0021     		movs	r1, #0
 2489 01b8 FFF7FEFF 		bl	print
 2490              	.LVL315:
 2491 01bc 98E7     		b	.L141
 2492              	.L145:
 2493 01be 00BF     		.align	2
 2494              	.L144:
 2495 01c0 00000000 		.word	htim4
 2496 01c4 00000000 		.word	htim5
 2497 01c8 00000000 		.word	htim1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 65


 2498 01cc 00000000 		.word	htim3
 2499 01d0 0C000000 		.word	.LC1
 2500 01d4 00000000 		.word	EDGE_LEFT_STATE
 2501 01d8 00000000 		.word	EDGE_RIGHT_STATE
 2502 01dc 00000000 		.word	.LANCHOR1
 2503 01e0 00000000 		.word	.LANCHOR0
 2504 01e4 00000000 		.word	PI_INT_STATE
 2505 01e8 00000000 		.word	CLAW_INT_STATE
 2506 01ec D8010000 		.word	.LC24
 2507 01f0 E0010000 		.word	.LC25
 2508 01f4 00040240 		.word	1073873920
 2509 01f8 A4010000 		.word	.LC20
 2510              	.LBE8:
 2511              		.cfi_endproc
 2512              	.LFE124:
 2514              		.global	ewok_cnt
 2515              		.comm	adc_values,8192,4
 2516              		.comm	dma_buffer,8192,4
 2517              		.global	RIGHT_SPEED
 2518              		.global	LEFT_SPEED
 2519              		.section	.data.RIGHT_SPEED,"aw",%progbits
 2520              		.align	1
 2521              		.set	.LANCHOR0,. + 0
 2524              	RIGHT_SPEED:
 2525 0000 5802     		.short	600
 2526              		.section	.data.LEFT_SPEED,"aw",%progbits
 2527              		.align	1
 2528              		.set	.LANCHOR1,. + 0
 2531              	LEFT_SPEED:
 2532 0000 5802     		.short	600
 2533              		.section	.rodata.str1.4,"aMS",%progbits,1
 2534              		.align	2
 2535              	.LC0:
 2536 0000 474F4552 		.ascii	"GOERT %d\000"
 2536      54202564 
 2536      00
 2537 0009 000000   		.space	3
 2538              	.LC1:
 2539 000c 53746172 		.ascii	"Starting\012\000"
 2539      74696E67 
 2539      0A00
 2540 0016 0000     		.space	2
 2541              	.LC2:
 2542 0018 256C750A 		.ascii	"%lu\012\000"
 2542      00
 2543 001d 000000   		.space	3
 2544              	.LC3:
 2545 0020 5455524E 		.ascii	"TURN | cnts: %d\012\000"
 2545      207C2063 
 2545      6E74733A 
 2545      2025640A 
 2545      00
 2546 0031 000000   		.space	3
 2547              	.LC4:
 2548 0034 5455524E 		.ascii	"TURN | vlts: %d.%d\012\000"
 2548      207C2076 
 2548      6C74733A 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 66


 2548      2025642E 
 2548      25640A00 
 2549              	.LC5:
 2550 0048 5455524E 		.ascii	"TURN | ADC_VAL: %d\012\000"
 2550      207C2041 
 2550      44435F56 
 2550      414C3A20 
 2550      25640A00 
 2551              	.LC6:
 2552 005c 5455524E 		.ascii	"TURN | TIM5->CNT: %lu\012\000"
 2552      207C2054 
 2552      494D352D 
 2552      3E434E54 
 2552      3A20256C 
 2553 0073 00       		.space	1
 2554              	.LC7:
 2555 0074 5455524E 		.ascii	"TURN | TIM4->CNT: %lu\012\000"
 2555      207C2054 
 2555      494D342D 
 2555      3E434E54 
 2555      3A20256C 
 2556 008b 00       		.space	1
 2557              	.LC8:
 2558 008c 5455524E 		.ascii	"TURN_DEG | turn count: %d\012\000"
 2558      5F444547 
 2558      207C2074 
 2558      75726E20 
 2558      636F756E 
 2559 00a7 00       		.space	1
 2560              	.LC9:
 2561 00a8 5455524E 		.ascii	"TURN_DEG | TIM5->CNT: %lu\012\000"
 2561      5F444547 
 2561      207C2054 
 2561      494D352D 
 2561      3E434E54 
 2562 00c3 00       		.space	1
 2563              	.LC10:
 2564 00c4 5455524E 		.ascii	"TURN_DEG | TIM4->CNT: %lu\012\000"
 2564      5F444547 
 2564      207C2054 
 2564      494D342D 
 2564      3E434E54 
 2565 00df 00       		.space	1
 2566              	.LC11:
 2567 00e0 53515541 		.ascii	"SQUARE_EDGE | EL: %d\012\000"
 2567      52455F45 
 2567      44474520 
 2567      7C20454C 
 2567      3A202564 
 2568 00f6 0000     		.space	2
 2569              	.LC12:
 2570 00f8 53515541 		.ascii	"SQUARE_EDGE | ER: %d\012\000"
 2570      52455F45 
 2570      44474520 
 2570      7C204552 
 2570      3A202564 
 2571 010e 0000     		.space	2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 67


 2572              	.LC13:
 2573 0110 0A00     		.ascii	"\012\000"
 2574 0112 0000     		.space	2
 2575              	.LC14:
 2576 0114 434C4157 		.ascii	"CLAW_GRAB | grabbing ewok\012\000"
 2576      5F475241 
 2576      42207C20 
 2576      67726162 
 2576      62696E67 
 2577 012f 00       		.space	1
 2578              	.LC15:
 2579 0130 46697273 		.ascii	"First ewok captured\012\000"
 2579      74206577 
 2579      6F6B2063 
 2579      61707475 
 2579      7265640A 
 2580 0145 000000   		.space	3
 2581              	.LC16:
 2582 0148 5365636F 		.ascii	"Second ewok captured\012\000"
 2582      6E642065 
 2582      776F6B20 
 2582      63617074 
 2582      75726564 
 2583 015e 0000     		.space	2
 2584              	.LC17:
 2585 0160 54686972 		.ascii	"Third ewok captured\012\000"
 2585      64206577 
 2585      6F6B2063 
 2585      61707475 
 2585      7265640A 
 2586 0175 000000   		.space	3
 2587              	.LC18:
 2588 0178 466F7572 		.ascii	"Fourth ewok captured\012\000"
 2588      74682065 
 2588      776F6B20 
 2588      63617074 
 2588      75726564 
 2589 018e 0000     		.space	2
 2590              	.LC19:
 2591 0190 43686577 		.ascii	"Chewie captured\012\000"
 2591      69652063 
 2591      61707475 
 2591      7265640A 
 2591      00
 2592 01a1 000000   		.space	3
 2593              	.LC20:
 2594 01a4 436C6177 		.ascii	"Claw interrupt\012\000"
 2594      20696E74 
 2594      65727275 
 2594      70740A00 
 2595              	.LC21:
 2596 01b4 63685F35 		.ascii	"ch_5: %d\012\000"
 2596      3A202564 
 2596      0A00
 2597 01be 0000     		.space	2
 2598              	.LC22:
 2599 01c0 63685F34 		.ascii	"ch_4: %d\012\000"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 68


 2599      3A202564 
 2599      0A00
 2600 01ca 0000     		.space	2
 2601              	.LC23:
 2602 01cc 5372632F 		.ascii	"Src/main.c\000"
 2602      6D61696E 
 2602      2E6300
 2603 01d7 00       		.space	1
 2604              	.LC24:
 2605 01d8 65776F6B 		.ascii	"ewok\012\000"
 2605      0A00
 2606 01de 0000     		.space	2
 2607              	.LC25:
 2608 01e0 50692069 		.ascii	"Pi interrupt\012\000"
 2608      6E746572 
 2608      72757074 
 2608      0A00
 2609              		.section	.bss.ewok_cnt,"aw",%nobits
 2610              		.align	2
 2611              		.set	.LANCHOR2,. + 0
 2614              	ewok_cnt:
 2615 0000 00000000 		.space	4
 2616              		.text
 2617              	.Letext0:
 2618              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2619              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2620              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2621              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 2622              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2623              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2624              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2625              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2626              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2627              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2628              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2629              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2630              		.file 14 "Inc/pid.h"
 2631              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 2632              		.file 16 "Inc/adc.h"
 2633              		.file 17 "Inc/tim.h"
 2634              		.file 18 "Inc/usart.h"
 2635              		.file 19 "Inc/extern_vars.h"
 2636              		.file 20 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 2637              		.file 21 "Inc/filter.h"
 2638              		.file 22 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2639              		.file 23 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2640              		.file 24 "Inc/claw.h"
 2641              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2642              		.file 26 "Inc/gpio.h"
 2643              		.file 27 "Inc/dma.h"
 2644              		.file 28 "Inc/i2c.h"
 2645              		.file 29 "Inc/ssd1306.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 69


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:102    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:107    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:134    .text.print:0000000000000018 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:142    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:147    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:240    .text.alarm_detect:000000000000009c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:250    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:255    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:368    .text.menu:000000000000009c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:375    .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:380    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:446    .text.set_motor_speed:000000000000004c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:453    .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:458    .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:687    .text.turn:0000000000000160 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:711    .text.turn_deg:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:716    .text.turn_deg:0000000000000000 turn_deg
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:897    .text.turn_deg:0000000000000108 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:913    .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:918    .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:973    .text.encoder_pid:000000000000003c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:978    .text.drive_straight:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:983    .text.drive_straight:0000000000000000 drive_straight
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1007   .text.square_edge:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1012   .text.square_edge:0000000000000000 square_edge
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1152   .text.square_edge:00000000000000c8 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1163   .text.debounce_and_grab:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1168   .text.debounce_and_grab:0000000000000000 debounce_and_grab
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1690   .text.drive_straight_time:0000000000000000 drive_straight_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1666   .text.debounce_and_grab:00000000000002e4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1685   .text.drive_straight_time:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1775   .text.drive_straight_time:0000000000000068 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1781   .text.test_PWM_htim1:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1786   .text.test_PWM_htim1:0000000000000000 test_PWM_htim1
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1837   .text.test_PWM_htim1:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1842   .text.test_PWM_htim3:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1847   .text.test_PWM_htim3:0000000000000000 test_PWM_htim3
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1905   .text.test_PWM_htim3:0000000000000040 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1910   .text.test_ADC:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1915   .text.test_ADC:0000000000000000 test_ADC
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1982   .text.test_ADC:0000000000000050 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1991   .text.test_All:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:1996   .text.test_All:0000000000000000 test_All
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2021   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2026   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2042   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2047   .text.SystemClock_Config:0000000000000000 SystemClock_Config
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 70


/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2173   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2181   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2186   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2495   .text.main:00000000000001c0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2614   .bss.ewok_cnt:0000000000000000 ewok_cnt
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2524   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2531   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2520   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2527   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2534   .rodata.str1.4:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s:2610   .bss.ewok_cnt:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
strlen
HAL_UART_Transmit
huart6
__aeabi_d2iz
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
HAL_GPIO_ReadPin
sprintf
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dadd
pid_GetGain
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
HAL_GetTick
close_claw
arm_up
open_claw
arm_down
slow_actuate
htim3
CLAW_INT_STATE
HAL_TIM_PWM_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc81UNmM.s 			page 71


HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_ADC1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
MX_I2C1_Init
MX_USART6_UART_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
HAL_NVIC_EnableIRQ
htim4
htim5
PI_INT_STATE
