ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  ** This notice applies to any and all portions of this file
   8:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****  * inserted by the user or by software development tools
  11:Src/main.c    ****  * are owned by their respective copyright owners.
  12:Src/main.c    ****  *
  13:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****  *
  15:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****  * are permitted provided that the following conditions are met:
  17:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****  *      and/or other materials provided with the distribution.
  22:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****  *      without specific prior written permission.
  25:Src/main.c    ****  *
  26:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 2


  31:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****  *
  37:Src/main.c    ****  ******************************************************************************
  38:Src/main.c    ****  */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** //TODO: Drive system, signed int32, giving forward backward, encoders, coordinate system.
  66:Src/main.c    **** uint16_t LEFT_SPEED = 40000;
  67:Src/main.c    **** uint16_t RIGHT_SPEED = 45000;
  68:Src/main.c    **** uint32_t dma_buffer[3072];
  69:Src/main.c    **** uint32_t adc_values[3072];
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE END PV */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  74:Src/main.c    **** void SystemClock_Config(void);
  75:Src/main.c    **** 
  76:Src/main.c    **** /* USER CODE BEGIN PFP */
  77:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  78:Src/main.c    **** void print(char msg[], int row);
  79:Src/main.c    **** void do_pid(PID_t *pid_struct);
  80:Src/main.c    **** PID_t menu();
  81:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin);
  82:Src/main.c    **** void pi_navigation();
  83:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  84:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc);
  85:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  86:Src/main.c    **** void turn();
  87:Src/main.c    **** void alarm_detect();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END PFP */
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE BEGIN 0 */
  92:Src/main.c    **** /**
  93:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
  94:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
  95:Src/main.c    ****  * Order of buffer: ir1, ir2, pi, ir1, ir2...
  96:Src/main.c    ****  */
  97:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
  98:Src/main.c    **** {
  29              		.loc 1 98 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  99:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 99 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF44052 		mov	r2, #12288
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB128:
 100:Src/main.c    **** }
 101:Src/main.c    **** /* USER CODE END 0 */
 102:Src/main.c    **** 
 103:Src/main.c    **** /**
 104:Src/main.c    ****  * @brief  The application entry point.
 105:Src/main.c    ****  *
 106:Src/main.c    ****  * @retval None
 107:Src/main.c    ****  */
 108:Src/main.c    **** int main(void)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 4


 109:Src/main.c    **** {
 110:Src/main.c    ****     /* USER CODE BEGIN 1 */
 111:Src/main.c    **** 
 112:Src/main.c    ****     /* USER CODE END 1 */
 113:Src/main.c    **** 
 114:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 115:Src/main.c    **** 
 116:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 117:Src/main.c    ****     HAL_Init();
 118:Src/main.c    **** 
 119:Src/main.c    ****     /* USER CODE BEGIN Init */
 120:Src/main.c    **** 
 121:Src/main.c    ****     /* USER CODE END Init */
 122:Src/main.c    **** 
 123:Src/main.c    ****     /* Configure the system clock */
 124:Src/main.c    ****     SystemClock_Config();
 125:Src/main.c    **** 
 126:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 127:Src/main.c    **** 
 128:Src/main.c    ****     /* USER CODE END SysInit */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* Initialize all configured peripherals */
 131:Src/main.c    ****     MX_GPIO_Init();
 132:Src/main.c    ****     MX_DMA_Init();
 133:Src/main.c    ****     MX_TIM3_Init();
 134:Src/main.c    ****     MX_TIM1_Init();
 135:Src/main.c    ****     MX_TIM2_Init();
 136:Src/main.c    ****     MX_USART6_UART_Init();
 137:Src/main.c    ****     MX_ADC1_Init();
 138:Src/main.c    ****     MX_I2C1_Init();
 139:Src/main.c    ****     MX_TIM4_Init();
 140:Src/main.c    ****     MX_TIM9_Init();
 141:Src/main.c    ****     MX_TIM5_Init();
 142:Src/main.c    ****     /* USER CODE BEGIN 2 */
 143:Src/main.c    **** 
 144:Src/main.c    ****     /* Initialize peripherals */
 145:Src/main.c    ****     /* 
 146:Src/main.c    ****      * Claw jaw: TIM3 CH1
 147:Src/main.c    ****      * Claw arm: TIM3 CH2
 148:Src/main.c    ****      * Basket: TIM3 CH3
 149:Src/main.c    ****      * left forward: TIM1 CH1
 150:Src/main.c    ****      * left backward: TIM1 CH2
 151:Src/main.c    ****      * right forward: TIM1 CH3
 152:Src/main.c    ****      * right backward: TIM1 CH4
 153:Src/main.c    ****      * left encoder: TIM4
 154:Src/main.c    ****      * right encoderL TIM5
 155:Src/main.c    ****      * spare clocks: TIM2, TIM9
 156:Src/main.c    ****      */
 157:Src/main.c    **** 
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 159:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 5


 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 167:Src/main.c    **** 
 168:Src/main.c    ****     /* Initialize other stuffs */
 169:Src/main.c    ****     print("Starting", 0);
 170:Src/main.c    ****     ssd1306_Init();
 171:Src/main.c    ****     claw_init(&htim3);
 172:Src/main.c    ****     ///basket_init(&htim3);
 173:Src/main.c    **** 
 174:Src/main.c    ****     // 3 * gain * kp = 20,000
 175:Src/main.c    ****     /*
 176:Src/main.c    ****        ENCODER_t left_enc = encoder_Init(TIM4);
 177:Src/main.c    ****        ENCODER_t right_enc = encoder_Init(TIM5);
 178:Src/main.c    ****        PID_t left_pid = pid_Init(5000, 0, 0, 2, 2);
 179:Src/main.c    ****        PID_t right_pid = pid_Init(5000, 0, 0, 2, 2);
 180:Src/main.c    ****        */
 181:Src/main.c    ****     //PID_t pid_struct = menu();
 182:Src/main.c    ****     /* USER CODE END 2 */
 183:Src/main.c    **** 
 184:Src/main.c    ****     /* Infinite loop */
 185:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 186:Src/main.c    ****     while (1)
 187:Src/main.c    ****     {
 188:Src/main.c    **** 
 189:Src/main.c    ****         /*
 190:Src/main.c    ****          * Servo Stuff
 191:Src/main.c    ****          */
 192:Src/main.c    **** 
 193:Src/main.c    **** 
 194:Src/main.c    ****         /*
 195:Src/main.c    ****          * Drive Straight
 196:Src/main.c    ****          *
 197:Src/main.c    ****          encoder_pid(&left_pid, &left_enc, &right_pid, &right_enc);
 198:Src/main.c    ****          */
 199:Src/main.c    **** 
 200:Src/main.c    ****         /*
 201:Src/main.c    ****          * Pi Turning
 202:Src/main.c    ****          *
 203:Src/main.c    ****          if (PI_INT_STATE == FLAGGED)
 204:Src/main.c    ****          {
 205:Src/main.c    ****          print("in pi int", 0);
 206:Src/main.c    ****          turn();
 207:Src/main.c    ****          }
 208:Src/main.c    ****          */
 209:Src/main.c    **** 
 210:Src/main.c    ****         /*
 211:Src/main.c    ****          * EDGE and Object detection
 212:Src/main.c    ****          *
 213:Src/main.c    ****          if(EDGE_RIGHT_STATE == FLAGGED){
 214:Src/main.c    ****          print("ER",0);
 215:Src/main.c    ****          EDGE_RIGHT_STATE = NOT_FLAGGED;
 216:Src/main.c    ****          }
 217:Src/main.c    ****          if(TAPE_RIGHT_STATE == FLAGGED){
 218:Src/main.c    ****          print("TR",0);
 219:Src/main.c    ****          TAPE_RIGHT_STATE = NOT_FLAGGED;
 220:Src/main.c    ****          }
 221:Src/main.c    ****          if(EDGE_LEFT_STATE == FLAGGED){
 222:Src/main.c    ****          print("EL",0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 6


 223:Src/main.c    ****          EDGE_LEFT_STATE = NOT_FLAGGED;
 224:Src/main.c    ****          }
 225:Src/main.c    **** 
 226:Src/main.c    ****          if(TAPE_LEFT_STATE == FLAGGED){
 227:Src/main.c    ****          print("TL",0);
 228:Src/main.c    ****          TAPE_LEFT_STATE = NOT_FLAGGED;
 229:Src/main.c    ****          }
 230:Src/main.c    ****          */
 231:Src/main.c    **** 
 232:Src/main.c    ****         /*
 233:Src/main.c    ****          * IR DETECTION
 234:Src/main.c    ****          *
 235:Src/main.c    ****          if (IR_INT_STATE == FLAGGED)
 236:Src/main.c    ****          {
 237:Src/main.c    ****          alarm_detect();
 238:Src/main.c    ****         //drive past sensor, enough so as to not trigger interrupt again
 239:Src/main.c    ****         HAL_Delay(2000);
 240:Src/main.c    ****         }*/
 241:Src/main.c    **** 
 242:Src/main.c    ****         /* USER CODE END WHILE */
 243:Src/main.c    **** 
 244:Src/main.c    ****         /* USER CODE BEGIN 3 */
 245:Src/main.c    ****     }
 246:Src/main.c    ****     /* USER CODE END 3 */
 247:Src/main.c    **** 
 248:Src/main.c    **** }
 249:Src/main.c    **** 
 250:Src/main.c    **** /**
 251:Src/main.c    ****  * @brief System Clock Configuration
 252:Src/main.c    ****  * @retval None
 253:Src/main.c    ****  */
 254:Src/main.c    **** void SystemClock_Config(void)
 255:Src/main.c    **** {
 256:Src/main.c    **** 
 257:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 258:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 259:Src/main.c    **** 
 260:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 261:Src/main.c    ****     */
 262:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 263:Src/main.c    **** 
 264:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 265:Src/main.c    **** 
 266:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 267:Src/main.c    ****     */
 268:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 269:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 270:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 271:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 272:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 273:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 274:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 275:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 276:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 277:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 278:Src/main.c    ****     {
 279:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 7


 280:Src/main.c    ****     }
 281:Src/main.c    **** 
 282:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 283:Src/main.c    ****     */
 284:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 285:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 286:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 287:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 288:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 289:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 290:Src/main.c    **** 
 291:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 292:Src/main.c    ****     {
 293:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 294:Src/main.c    ****     }
 295:Src/main.c    **** 
 296:Src/main.c    ****     /**Configure the Systick interrupt time 
 297:Src/main.c    ****     */
 298:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 299:Src/main.c    **** 
 300:Src/main.c    ****     /**Configure the Systick 
 301:Src/main.c    ****     */
 302:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 303:Src/main.c    **** 
 304:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 305:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 306:Src/main.c    **** }
 307:Src/main.c    **** 
 308:Src/main.c    **** /* USER CODE BEGIN 4 */
 309:Src/main.c    **** 
 310:Src/main.c    **** /*
 311:Src/main.c    ****  * Assume motors are not on.
 312:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 313:Src/main.c    ****  */
 314:Src/main.c    **** void turn()
 315:Src/main.c    **** {
 316:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 317:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 318:Src/main.c    ****     HAL_Delay(500);
 319:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 320:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 321:Src/main.c    ****     TIM3->CNT = 0;
 322:Src/main.c    ****     TIM4->CNT = 0;
 323:Src/main.c    ****     char msg[18] = "";
 324:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 325:Src/main.c    ****     print(msg, 0);
 326:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 327:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 328:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 329:Src/main.c    ****     print(msg, 0);
 330:Src/main.c    ****     if (volts < 0)
 331:Src/main.c    ****     {
 332:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 333:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 334:Src/main.c    ****         while (TIM4->CNT < counts)
 335:Src/main.c    ****         {
 336:Src/main.c    ****         }
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 8


 337:Src/main.c    ****         TIM4->CNT = 0;
 338:Src/main.c    ****     }
 339:Src/main.c    ****     else if (volts > 0)
 340:Src/main.c    ****     {
 341:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 30000);
 342:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 343:Src/main.c    ****         while (TIM3->CNT < counts)
 344:Src/main.c    ****         {
 345:Src/main.c    ****         }
 346:Src/main.c    ****         TIM4->CNT = 0;
 347:Src/main.c    ****     }
 348:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 349:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 350:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 351:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 352:Src/main.c    **** }
 353:Src/main.c    **** 
 354:Src/main.c    **** void pi_navigation()
 355:Src/main.c    **** {
 356:Src/main.c    ****     print("Pi nav", 0);
 357:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 358:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 359:Src/main.c    ****     HAL_Delay(500);
 360:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
 361:Src/main.c    ****     if (heading < 0)
 362:Src/main.c    ****     {
 363:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_2, 10000);
 364:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 10000);
 365:Src/main.c    ****         heading *= -1;
 366:Src/main.c    ****     }
 367:Src/main.c    ****     else if (heading > 0)
 368:Src/main.c    ****     {
 369:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 10000);
 370:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 10000);
 371:Src/main.c    ****     }
 372:Src/main.c    ****     HAL_Delay(2000 * heading);
 373:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 20000);
 374:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 20000);
 375:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 376:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 377:Src/main.c    **** }
 378:Src/main.c    **** 
 379:Src/main.c    **** /**
 380:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 381:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 382:Src/main.c    ****  *
 383:Src/main.c    ****  * @param adc_val, value read from ADC.
 384:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 385:Src/main.c    ****  **/
 386:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 387:Src/main.c    **** {
  67              		.loc 1 387 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 9


  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 388:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 388 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 389:Src/main.c    **** }
  90              		.loc 1 389 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE128:
 101              		.global	__aeabi_dcmpgt
 102              		.section	.text.alarm_detect,"ax",%progbits
 103              		.align	2
 104              		.global	alarm_detect
 105              		.thumb
 106              		.thumb_func
 108              	alarm_detect:
 109              	.LFB129:
 390:Src/main.c    **** 
 391:Src/main.c    **** void alarm_detect()
 392:Src/main.c    **** {
 110              		.loc 1 392 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114 0000 00B5     		push	{lr}
 115              	.LCFI2:
 116              		.cfi_def_cfa_offset 4
 117              		.cfi_offset 14, -4
 118 0002 83B0     		sub	sp, sp, #12
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 16
 393:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 121              		.loc 1 393 0
 122 0004 1248     		ldr	r0, .L14
 123 0006 1349     		ldr	r1, .L14+4
 124 0008 4FF44062 		mov	r2, #3072
 125 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 10


 126              	.LVL8:
 394:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 395:Src/main.c    ****     //char msg[20] = "";
 396:Src/main.c    ****     HAL_Delay(500);
 127              		.loc 1 396 0
 128 0010 4FF4FA70 		mov	r0, #500
 129 0014 FFF7FEFF 		bl	HAL_Delay
 130              	.LVL9:
 131              	.L10:
 132              	.LBB2:
 397:Src/main.c    ****     while (1)
 398:Src/main.c    ****     {
 399:Src/main.c    ****         //
 400:Src/main.c    ****         // Sampling frequency: 72e6/2/(495*3)
 401:Src/main.c    ****         // offset 0 : IR1
 402:Src/main.c    ****         double val = goertzel(adc_values, 24242, 9850, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 
 133              		.loc 1 402 0
 134 0018 0023     		movs	r3, #0
 135 001a 0093     		str	r3, [sp]
 136 001c 0E48     		ldr	r0, .L14+8
 137 001e 45F6B261 		movw	r1, #24242
 138 0022 42F27A62 		movw	r2, #9850
 139 0026 4FF44063 		mov	r3, #3072
 140 002a FFF7FEFF 		bl	goertzel
 141              	.LVL10:
 403:Src/main.c    ****         /*
 404:Src/main.c    ****            int predec = (int)(val / 1);
 405:Src/main.c    ****            int postdec = (int)((val - predec) * 1000);
 406:Src/main.c    ****            sprintf(msg, "%d.%d\n", predec, postdec);
 407:Src/main.c    ****            HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 408:Src/main.c    ****            */
 409:Src/main.c    **** 
 410:Src/main.c    ****         //compare
 411:Src/main.c    ****         // 1000 Hz: ranges to about 60, 9850 Hz: ranges to 20
 412:Src/main.c    ****         if (val > 15)
 142              		.loc 1 412 0
 143 002e 51EC100B 		fmrrd	r0, r1, d0
 144 0032 0022     		movs	r2, #0
 145 0034 094B     		ldr	r3, .L14+12
 146 0036 FFF7FEFF 		bl	__aeabi_dcmpgt
 147              	.LVL11:
 148 003a 0028     		cmp	r0, #0
 149 003c ECD0     		beq	.L10
 150              	.LBE2:
 413:Src/main.c    ****         {
 414:Src/main.c    ****             break;
 415:Src/main.c    ****         }
 416:Src/main.c    ****     }
 417:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 151              		.loc 1 417 0
 152 003e 0448     		ldr	r0, .L14
 153 0040 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 154              	.LVL12:
 418:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 155              		.loc 1 418 0
 156 0044 0022     		movs	r2, #0
 157 0046 064B     		ldr	r3, .L14+16
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 11


 158 0048 1A70     		strb	r2, [r3]
 419:Src/main.c    **** }
 159              		.loc 1 419 0
 160 004a 03B0     		add	sp, sp, #12
 161              	.LCFI4:
 162              		.cfi_def_cfa_offset 4
 163              		@ sp needed
 164 004c 5DF804FB 		ldr	pc, [sp], #4
 165              	.L15:
 166              		.align	2
 167              	.L14:
 168 0050 00000000 		.word	hadc1
 169 0054 00000000 		.word	dma_buffer
 170 0058 00000000 		.word	adc_values
 171 005c 00002E40 		.word	1076756480
 172 0060 00000000 		.word	IR_INT_STATE
 173              		.cfi_endproc
 174              	.LFE129:
 176              		.section	.text.print,"ax",%progbits
 177              		.align	2
 178              		.global	print
 179              		.thumb
 180              		.thumb_func
 182              	print:
 183              	.LFB131:
 420:Src/main.c    **** 
 421:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin)
 422:Src/main.c    **** {
 423:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 424:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 425:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 426:Src/main.c    ****     HAL_Delay(500);
 427:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 428:Src/main.c    ****     while (1)
 429:Src/main.c    ****     {
 430:Src/main.c    ****         char msg[18] = "";
 431:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
 432:Src/main.c    ****         // freq one
 433:Src/main.c    ****         double val1 = goertzel(adc_values, 20956, freq1, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 434:Src/main.c    ****         int predec = (int)(val1 / 1);
 435:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 436:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 437:Src/main.c    ****         print(msg, 0);
 438:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 439:Src/main.c    ****         //freq2
 440:Src/main.c    ****         double val2 = goertzel(adc_values, 20956, freq2, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 441:Src/main.c    ****         predec = (int)(val2 / 1);
 442:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 443:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 444:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 445:Src/main.c    ****         //compare
 446:Src/main.c    ****         if (val1 > val2)
 447:Src/main.c    ****         {
 448:Src/main.c    ****             break;
 449:Src/main.c    ****         }
 450:Src/main.c    ****     }
 451:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 12


 452:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 453:Src/main.c    **** }
 454:Src/main.c    **** 
 455:Src/main.c    **** /**
 456:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 457:Src/main.c    ****  * @param msg, string to print
 458:Src/main.c    ****  * @param row, row to print msg to
 459:Src/main.c    ****  */
 460:Src/main.c    **** void print(char *msg, int row)
 461:Src/main.c    **** {
 184              		.loc 1 461 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              	.LVL13:
 189 0000 38B5     		push	{r3, r4, r5, lr}
 190              	.LCFI5:
 191              		.cfi_def_cfa_offset 16
 192              		.cfi_offset 3, -16
 193              		.cfi_offset 4, -12
 194              		.cfi_offset 5, -8
 195              		.cfi_offset 14, -4
 196 0002 0546     		mov	r5, r0
 462:Src/main.c    ****     if (row == 0)
 197              		.loc 1 462 0
 198 0004 0C46     		mov	r4, r1
 199 0006 11B9     		cbnz	r1, .L17
 463:Src/main.c    ****     {
 464:Src/main.c    ****         ssd1306_Fill(Black);
 200              		.loc 1 464 0
 201 0008 0020     		movs	r0, #0
 202              	.LVL14:
 203 000a FFF7FEFF 		bl	ssd1306_Fill
 204              	.LVL15:
 205              	.L17:
 465:Src/main.c    ****     }
 466:Src/main.c    ****     ssd1306_SetCursor(0, row * 10);
 206              		.loc 1 466 0
 207 000e 04EB8404 		add	r4, r4, r4, lsl #2
 208              	.LVL16:
 209 0012 6100     		lsls	r1, r4, #1
 210 0014 0020     		movs	r0, #0
 211 0016 01F0FE01 		and	r1, r1, #254
 212 001a FFF7FEFF 		bl	ssd1306_SetCursor
 213              	.LVL17:
 467:Src/main.c    ****     ssd1306_WriteString(msg, Font_7x10, White);
 214              		.loc 1 467 0
 215 001e 054B     		ldr	r3, .L19
 216 0020 2846     		mov	r0, r5
 217 0022 93E80600 		ldmia	r3, {r1, r2}
 218 0026 0123     		movs	r3, #1
 219 0028 FFF7FEFF 		bl	ssd1306_WriteString
 220              	.LVL18:
 468:Src/main.c    ****     ssd1306_UpdateScreen();
 221              		.loc 1 468 0
 222 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 223              	.LVL19:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 13


 224 0030 38BD     		pop	{r3, r4, r5, pc}
 225              	.LVL20:
 226              	.L20:
 227 0032 00BF     		.align	2
 228              	.L19:
 229 0034 00000000 		.word	Font_7x10
 230              		.cfi_endproc
 231              	.LFE131:
 233              		.global	__aeabi_d2iz
 234              		.global	__aeabi_i2d
 235              		.section	.text.frequency_comparison,"ax",%progbits
 236              		.align	2
 237              		.global	frequency_comparison
 238              		.thumb
 239              		.thumb_func
 241              	frequency_comparison:
 242              	.LFB130:
 422:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 243              		.loc 1 422 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 32
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              	.LVL21:
 248 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 249              	.LCFI6:
 250              		.cfi_def_cfa_offset 36
 251              		.cfi_offset 4, -36
 252              		.cfi_offset 5, -32
 253              		.cfi_offset 6, -28
 254              		.cfi_offset 7, -24
 255              		.cfi_offset 8, -20
 256              		.cfi_offset 9, -16
 257              		.cfi_offset 10, -12
 258              		.cfi_offset 11, -8
 259              		.cfi_offset 14, -4
 260 0004 8BB0     		sub	sp, sp, #44
 261              	.LCFI7:
 262              		.cfi_def_cfa_offset 80
 263 0006 0390     		str	r0, [sp, #12]
 264 0008 8946     		mov	r9, r1
 423:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 265              		.loc 1 423 0
 266 000a 202A     		cmp	r2, #32
 267 000c 07D0     		beq	.L26
 423:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 268              		.loc 1 423 0 is_stmt 0 discriminator 1
 269 000e 102A     		cmp	r2, #16
 270 0010 02D1     		bne	.L27
 423:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 271              		.loc 1 423 0
 272 0012 4FF00108 		mov	r8, #1
 273 0016 04E0     		b	.L22
 274              	.L27:
 275 0018 4FF00208 		mov	r8, #2
 276 001c 01E0     		b	.L22
 277              	.L26:
 278 001e 4FF00008 		mov	r8, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 14


 279              	.L22:
 280              	.LVL22:
 424:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 281              		.loc 1 424 0 is_stmt 1 discriminator 8
 282 0022 4548     		ldr	r0, .L29
 283              	.LVL23:
 284 0024 4549     		ldr	r1, .L29+4
 285              	.LVL24:
 286 0026 4FF44062 		mov	r2, #3072
 287              	.LVL25:
 288 002a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 289              	.LVL26:
 426:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 290              		.loc 1 426 0 discriminator 8
 291 002e 4FF4FA70 		mov	r0, #500
 292 0032 FFF7FEFF 		bl	HAL_Delay
 293              	.LVL27:
 294              	.L25:
 295              	.LBB3:
 430:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
 296              		.loc 1 430 0
 297 0036 0026     		movs	r6, #0
 298 0038 0596     		str	r6, [sp, #20]
 299 003a 0696     		str	r6, [sp, #24]
 300 003c 0796     		str	r6, [sp, #28]
 301 003e 0896     		str	r6, [sp, #32]
 302 0040 ADF82460 		strh	r6, [sp, #36]	@ movhi
 433:Src/main.c    ****         int predec = (int)(val1 / 1);
 303              		.loc 1 433 0
 304 0044 5FFA88F7 		uxtb	r7, r8
 305 0048 DFF804B1 		ldr	fp, .L29+24
 306 004c 0097     		str	r7, [sp]
 307 004e 5846     		mov	r0, fp
 308 0050 45F2DC11 		movw	r1, #20956
 309 0054 039A     		ldr	r2, [sp, #12]
 310 0056 4FF44063 		mov	r3, #3072
 311 005a FFF7FEFF 		bl	goertzel
 312              	.LVL28:
 313 005e 55EC104B 		fmrrd	r4, r5, d0
 314              	.LVL29:
 434:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 315              		.loc 1 434 0
 316 0062 10EE100A 		fmrs	r0, s0	@ int
 317 0066 2946     		mov	r1, r5
 318 0068 FFF7FEFF 		bl	__aeabi_d2iz
 319              	.LVL30:
 320 006c 8246     		mov	r10, r0
 321              	.LVL31:
 435:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 322              		.loc 1 435 0
 323 006e FFF7FEFF 		bl	__aeabi_i2d
 324              	.LVL32:
 325 0072 0246     		mov	r2, r0
 326 0074 0B46     		mov	r3, r1
 327 0076 2046     		mov	r0, r4
 328 0078 2946     		mov	r1, r5
 329 007a FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 15


 330              	.LVL33:
 331 007e 0022     		movs	r2, #0
 332 0080 2F4B     		ldr	r3, .L29+8
 333 0082 FFF7FEFF 		bl	__aeabi_dmul
 334              	.LVL34:
 335 0086 FFF7FEFF 		bl	__aeabi_d2iz
 336              	.LVL35:
 337 008a 0346     		mov	r3, r0
 338              	.LVL36:
 436:Src/main.c    ****         print(msg, 0);
 339              		.loc 1 436 0
 340 008c 05A8     		add	r0, sp, #20
 341              	.LVL37:
 342 008e 2D49     		ldr	r1, .L29+12
 343 0090 5246     		mov	r2, r10
 344 0092 FFF7FEFF 		bl	sprintf
 345              	.LVL38:
 437:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 346              		.loc 1 437 0
 347 0096 05A8     		add	r0, sp, #20
 348 0098 3146     		mov	r1, r6
 349 009a FFF7FEFF 		bl	print
 350              	.LVL39:
 438:Src/main.c    ****         //freq2
 351              		.loc 1 438 0
 352 009e 05A8     		add	r0, sp, #20
 353 00a0 FFF7FEFF 		bl	strlen
 354              	.LVL40:
 355 00a4 DFF8ACA0 		ldr	r10, .L29+28
 356              	.LVL41:
 357 00a8 82B2     		uxth	r2, r0
 358 00aa 5046     		mov	r0, r10
 359 00ac 05A9     		add	r1, sp, #20
 360 00ae 4FF6FF73 		movw	r3, #65535
 361 00b2 FFF7FEFF 		bl	HAL_UART_Transmit
 362              	.LVL42:
 440:Src/main.c    ****         predec = (int)(val2 / 1);
 363              		.loc 1 440 0
 364 00b6 0097     		str	r7, [sp]
 365 00b8 5846     		mov	r0, fp
 366 00ba 45F2DC11 		movw	r1, #20956
 367 00be 4A46     		mov	r2, r9
 368 00c0 4FF44063 		mov	r3, #3072
 369 00c4 FFF7FEFF 		bl	goertzel
 370              	.LVL43:
 371 00c8 57EC106B 		fmrrd	r6, r7, d0
 372              	.LVL44:
 441:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 373              		.loc 1 441 0
 374 00cc 10EE100A 		fmrs	r0, s0	@ int
 375 00d0 3946     		mov	r1, r7
 376 00d2 FFF7FEFF 		bl	__aeabi_d2iz
 377              	.LVL45:
 378 00d6 8346     		mov	fp, r0
 379              	.LVL46:
 442:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 380              		.loc 1 442 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 16


 381 00d8 FFF7FEFF 		bl	__aeabi_i2d
 382              	.LVL47:
 383 00dc 0246     		mov	r2, r0
 384 00de 0B46     		mov	r3, r1
 385 00e0 3046     		mov	r0, r6
 386 00e2 3946     		mov	r1, r7
 387 00e4 FFF7FEFF 		bl	__aeabi_dsub
 388              	.LVL48:
 389 00e8 0022     		movs	r2, #0
 390 00ea 154B     		ldr	r3, .L29+8
 391 00ec FFF7FEFF 		bl	__aeabi_dmul
 392              	.LVL49:
 393 00f0 FFF7FEFF 		bl	__aeabi_d2iz
 394              	.LVL50:
 395 00f4 0346     		mov	r3, r0
 396              	.LVL51:
 443:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 397              		.loc 1 443 0
 398 00f6 05A8     		add	r0, sp, #20
 399              	.LVL52:
 400 00f8 1349     		ldr	r1, .L29+16
 401 00fa 5A46     		mov	r2, fp
 402 00fc FFF7FEFF 		bl	sprintf
 403              	.LVL53:
 444:Src/main.c    ****         //compare
 404              		.loc 1 444 0
 405 0100 05A8     		add	r0, sp, #20
 406 0102 FFF7FEFF 		bl	strlen
 407              	.LVL54:
 408 0106 82B2     		uxth	r2, r0
 409 0108 5046     		mov	r0, r10
 410 010a 05A9     		add	r1, sp, #20
 411 010c 4FF6FF73 		movw	r3, #65535
 412 0110 FFF7FEFF 		bl	HAL_UART_Transmit
 413              	.LVL55:
 446:Src/main.c    ****         {
 414              		.loc 1 446 0
 415 0114 2046     		mov	r0, r4
 416 0116 2946     		mov	r1, r5
 417 0118 3246     		mov	r2, r6
 418 011a 3B46     		mov	r3, r7
 419 011c FFF7FEFF 		bl	__aeabi_dcmpgt
 420              	.LVL56:
 421 0120 0028     		cmp	r0, #0
 422 0122 88D0     		beq	.L25
 423              	.LBE3:
 451:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 424              		.loc 1 451 0
 425 0124 0448     		ldr	r0, .L29
 426 0126 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 427              	.LVL57:
 452:Src/main.c    **** }
 428              		.loc 1 452 0
 429 012a 0022     		movs	r2, #0
 430 012c 074B     		ldr	r3, .L29+20
 431 012e 1A70     		strb	r2, [r3]
 453:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 17


 432              		.loc 1 453 0
 433 0130 0BB0     		add	sp, sp, #44
 434              	.LCFI8:
 435              		.cfi_def_cfa_offset 36
 436              		@ sp needed
 437 0132 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 438              	.LVL58:
 439              	.L30:
 440 0136 00BF     		.align	2
 441              	.L29:
 442 0138 00000000 		.word	hadc1
 443 013c 00000000 		.word	dma_buffer
 444 0140 00408F40 		.word	1083129856
 445 0144 00000000 		.word	.LC0
 446 0148 08000000 		.word	.LC1
 447 014c 00000000 		.word	IR_INT_STATE
 448 0150 00000000 		.word	adc_values
 449 0154 00000000 		.word	huart6
 450              		.cfi_endproc
 451              	.LFE130:
 453              		.section	.text.menu,"ax",%progbits
 454              		.align	2
 455              		.global	menu
 456              		.thumb
 457              		.thumb_func
 459              	menu:
 460              	.LFB132:
 469:Src/main.c    **** }
 470:Src/main.c    **** 
 471:Src/main.c    **** PID_t menu()
 472:Src/main.c    **** {
 461              		.loc 1 472 0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 32
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465              	.LVL59:
 466 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 467              	.LCFI9:
 468              		.cfi_def_cfa_offset 24
 469              		.cfi_offset 4, -24
 470              		.cfi_offset 5, -20
 471              		.cfi_offset 6, -16
 472              		.cfi_offset 7, -12
 473              		.cfi_offset 8, -8
 474              		.cfi_offset 14, -4
 475 0004 8AB0     		sub	sp, sp, #40
 476              	.LCFI10:
 477              		.cfi_def_cfa_offset 64
 478 0006 0646     		mov	r6, r0
 473:Src/main.c    ****     print("Starting", 0);
 479              		.loc 1 473 0
 480 0008 7048     		ldr	r0, .L45
 481              	.LVL60:
 482 000a 0021     		movs	r1, #0
 483 000c FFF7FEFF 		bl	print
 484              	.LVL61:
 474:Src/main.c    ****     char msg[20] = "";
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 18


 485              		.loc 1 474 0
 486 0010 0025     		movs	r5, #0
 487 0012 0595     		str	r5, [sp, #20]
 488 0014 0695     		str	r5, [sp, #24]
 489 0016 0795     		str	r5, [sp, #28]
 490 0018 0895     		str	r5, [sp, #32]
 491 001a 0995     		str	r5, [sp, #36]
 492              	.LVL62:
 475:Src/main.c    ****     int pid_select = 0;
 476:Src/main.c    ****     uint32_t values[3] = {0, 0, 0};
 493              		.loc 1 476 0
 494 001c 0295     		str	r5, [sp, #8]
 495 001e 0395     		str	r5, [sp, #12]
 496 0020 0495     		str	r5, [sp, #16]
 497              	.LVL63:
 498              	.L35:
 477:Src/main.c    ****     while (1)
 478:Src/main.c    ****     {
 479:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 499              		.loc 1 479 0
 500 0022 6B48     		ldr	r0, .L45+4
 501 0024 4FF40051 		mov	r1, #8192
 502 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 503              	.LVL64:
 504 002c 38BB     		cbnz	r0, .L32
 480:Src/main.c    ****         {
 481:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 505              		.loc 1 481 0
 506 002e 0AAB     		add	r3, sp, #40
 507 0030 03EB8503 		add	r3, r3, r5, lsl #2
 508 0034 53F8204C 		ldr	r4, [r3, #-32]
 509 0038 05A8     		add	r0, sp, #20
 510 003a 6649     		ldr	r1, .L45+8
 511 003c 2246     		mov	r2, r4
 512 003e FFF7FEFF 		bl	sprintf
 513              	.LVL65:
 482:Src/main.c    ****             print(msg, 0);
 514              		.loc 1 482 0
 515 0042 05A8     		add	r0, sp, #20
 516 0044 0021     		movs	r1, #0
 517 0046 FFF7FEFF 		bl	print
 518              	.LVL66:
 483:Src/main.c    ****             TIM4->CNT = values[pid_select];
 519              		.loc 1 483 0
 520 004a 634B     		ldr	r3, .L45+12
 521 004c 5C62     		str	r4, [r3, #36]
 484:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 522              		.loc 1 484 0
 523 004e 0EE0     		b	.L33
 524              	.L34:
 485:Src/main.c    ****             {
 486:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 525              		.loc 1 486 0
 526 0050 614B     		ldr	r3, .L45+12
 527 0052 5A6A     		ldr	r2, [r3, #36]
 528 0054 0AAB     		add	r3, sp, #40
 529 0056 03EB8503 		add	r3, r3, r5, lsl #2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 19


 530 005a 43F8202C 		str	r2, [r3, #-32]
 487:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 531              		.loc 1 487 0
 532 005e 05A8     		add	r0, sp, #20
 533 0060 5C49     		ldr	r1, .L45+8
 534 0062 FFF7FEFF 		bl	sprintf
 535              	.LVL67:
 488:Src/main.c    ****                 print(msg, 0);
 536              		.loc 1 488 0
 537 0066 05A8     		add	r0, sp, #20
 538 0068 0021     		movs	r1, #0
 539 006a FFF7FEFF 		bl	print
 540              	.LVL68:
 541              	.L33:
 484:Src/main.c    ****             {
 542              		.loc 1 484 0
 543 006e 5848     		ldr	r0, .L45+4
 544 0070 4FF40051 		mov	r1, #8192
 545 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 546              	.LVL69:
 547 0078 0028     		cmp	r0, #0
 548 007a E9D0     		beq	.L34
 489:Src/main.c    ****             }
 490:Src/main.c    ****             ++pid_select;
 549              		.loc 1 490 0
 550 007c 0135     		adds	r5, r5, #1
 551              	.LVL70:
 552              	.L32:
 491:Src/main.c    ****         }
 492:Src/main.c    ****         if (pid_select == 3)
 553              		.loc 1 492 0
 554 007e 032D     		cmp	r5, #3
 555 0080 CFD1     		bne	.L35
 556              	.L43:
 557              	.LVL71:
 558              	.LBB4:
 493:Src/main.c    ****             break;
 494:Src/main.c    ****     }
 495:Src/main.c    ****     while (1)
 496:Src/main.c    ****     {
 497:Src/main.c    ****         int speed = 20000;
 498:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 559              		.loc 1 498 0
 560 0082 5348     		ldr	r0, .L45+4
 561 0084 4FF40051 		mov	r1, #8192
 562 0088 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 563              	.LVL72:
 564 008c 0028     		cmp	r0, #0
 565 008e 43D1     		bne	.L36
 499:Src/main.c    ****         {
 500:Src/main.c    ****             if (pid_select == 3)
 566              		.loc 1 500 0
 567 0090 032D     		cmp	r5, #3
 568 0092 09D1     		bne	.L37
 501:Src/main.c    ****             {
 502:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 569              		.loc 1 502 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 20


 570 0094 514C     		ldr	r4, .L45+16
 571 0096 2046     		mov	r0, r4
 572 0098 0021     		movs	r1, #0
 573 009a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 574              	.LVL73:
 503:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 575              		.loc 1 503 0
 576 009e 2046     		mov	r0, r4
 577 00a0 0821     		movs	r1, #8
 578 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 579              	.LVL74:
 580 00a6 08E0     		b	.L38
 581              	.L37:
 504:Src/main.c    ****             }
 505:Src/main.c    ****             else
 506:Src/main.c    ****             {
 507:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 582              		.loc 1 507 0
 583 00a8 4C4C     		ldr	r4, .L45+16
 584 00aa 2046     		mov	r0, r4
 585 00ac 0021     		movs	r1, #0
 586 00ae FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 587              	.LVL75:
 508:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 588              		.loc 1 508 0
 589 00b2 2046     		mov	r0, r4
 590 00b4 0821     		movs	r1, #8
 591 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 592              	.LVL76:
 593              	.L38:
 509:Src/main.c    ****             }
 510:Src/main.c    ****             sprintf(msg, "%d", speed);
 594              		.loc 1 510 0
 595 00ba 05A8     		add	r0, sp, #20
 596 00bc 4849     		ldr	r1, .L45+20
 597 00be 44F62062 		movw	r2, #20000
 598 00c2 FFF7FEFF 		bl	sprintf
 599              	.LVL77:
 511:Src/main.c    ****             print(msg, 0);
 600              		.loc 1 511 0
 601 00c6 05A8     		add	r0, sp, #20
 602 00c8 0021     		movs	r1, #0
 603 00ca FFF7FEFF 		bl	print
 604              	.LVL78:
 512:Src/main.c    ****             TIM4->CNT = speed;
 605              		.loc 1 512 0
 606 00ce 44F62062 		movw	r2, #20000
 607 00d2 414B     		ldr	r3, .L45+12
 608 00d4 5A62     		str	r2, [r3, #36]
 513:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 609              		.loc 1 513 0
 610 00d6 17E0     		b	.L39
 611              	.LVL79:
 612              	.L42:
 514:Src/main.c    ****             {
 515:Src/main.c    ****                 speed = TIM4->CNT;
 613              		.loc 1 515 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 21


 614 00d8 3F4B     		ldr	r3, .L45+12
 615 00da 5C6A     		ldr	r4, [r3, #36]
 616              	.LVL80:
 516:Src/main.c    ****                 sprintf(msg, "%d", speed);
 617              		.loc 1 516 0
 618 00dc 05A8     		add	r0, sp, #20
 619 00de 4049     		ldr	r1, .L45+20
 620 00e0 2246     		mov	r2, r4
 621 00e2 FFF7FEFF 		bl	sprintf
 622              	.LVL81:
 517:Src/main.c    ****                 print(msg, 0);
 623              		.loc 1 517 0
 624 00e6 05A8     		add	r0, sp, #20
 625 00e8 0021     		movs	r1, #0
 626 00ea FFF7FEFF 		bl	print
 627              	.LVL82:
 518:Src/main.c    ****                 if (pid_select == 3)
 628              		.loc 1 518 0
 629 00ee 032D     		cmp	r5, #3
 630 00f0 05D1     		bne	.L40
 519:Src/main.c    ****                 {
 520:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 631              		.loc 1 520 0
 632 00f2 3A4B     		ldr	r3, .L45+16
 633 00f4 1B68     		ldr	r3, [r3]
 634 00f6 5C63     		str	r4, [r3, #52]
 521:Src/main.c    ****                     LEFT_SPEED = speed;
 635              		.loc 1 521 0
 636 00f8 3A4B     		ldr	r3, .L45+24
 637 00fa 1C80     		strh	r4, [r3]	@ movhi
 638 00fc 04E0     		b	.L39
 639              	.L40:
 522:Src/main.c    ****                 }
 523:Src/main.c    ****                 else
 524:Src/main.c    ****                 {
 525:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 640              		.loc 1 525 0
 641 00fe 374B     		ldr	r3, .L45+16
 642 0100 1B68     		ldr	r3, [r3]
 643 0102 DC63     		str	r4, [r3, #60]
 526:Src/main.c    ****                     RIGHT_SPEED = speed;
 644              		.loc 1 526 0
 645 0104 384B     		ldr	r3, .L45+28
 646 0106 1C80     		strh	r4, [r3]	@ movhi
 647              	.LVL83:
 648              	.L39:
 513:Src/main.c    ****             {
 649              		.loc 1 513 0
 650 0108 3148     		ldr	r0, .L45+4
 651 010a 4FF40051 		mov	r1, #8192
 652 010e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 653              	.LVL84:
 654 0112 0028     		cmp	r0, #0
 655 0114 E0D0     		beq	.L42
 527:Src/main.c    ****                 }
 528:Src/main.c    ****             }
 529:Src/main.c    ****             ++pid_select;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 22


 656              		.loc 1 529 0
 657 0116 0135     		adds	r5, r5, #1
 658              	.LVL85:
 659              	.L36:
 530:Src/main.c    ****         }
 531:Src/main.c    ****         if (pid_select == 5)
 660              		.loc 1 531 0
 661 0118 052D     		cmp	r5, #5
 662 011a B2D1     		bne	.L43
 663              	.LBE4:
 532:Src/main.c    ****         {
 533:Src/main.c    ****             break;
 534:Src/main.c    ****         }
 535:Src/main.c    ****     }
 536:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 664              		.loc 1 536 0
 665 011c 2F4C     		ldr	r4, .L45+16
 666 011e 2046     		mov	r0, r4
 667 0120 0021     		movs	r1, #0
 668 0122 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 669              	.LVL86:
 537:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 670              		.loc 1 537 0
 671 0126 2046     		mov	r0, r4
 672 0128 0821     		movs	r1, #8
 673 012a FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 674              	.LVL87:
 538:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 675              		.loc 1 538 0
 676 012e DDF80880 		ldr	r8, [sp, #8]
 677 0132 05A8     		add	r0, sp, #20
 678 0134 2D49     		ldr	r1, .L45+32
 679 0136 4246     		mov	r2, r8
 680 0138 FFF7FEFF 		bl	sprintf
 681              	.LVL88:
 539:Src/main.c    ****     print(msg, 0);
 682              		.loc 1 539 0
 683 013c 05A8     		add	r0, sp, #20
 684 013e 0021     		movs	r1, #0
 685 0140 FFF7FEFF 		bl	print
 686              	.LVL89:
 540:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 687              		.loc 1 540 0
 688 0144 039F     		ldr	r7, [sp, #12]
 689 0146 05A8     		add	r0, sp, #20
 690 0148 2949     		ldr	r1, .L45+36
 691 014a 3A46     		mov	r2, r7
 692 014c FFF7FEFF 		bl	sprintf
 693              	.LVL90:
 541:Src/main.c    ****     print(msg, 1);
 694              		.loc 1 541 0
 695 0150 05A8     		add	r0, sp, #20
 696 0152 0121     		movs	r1, #1
 697 0154 FFF7FEFF 		bl	print
 698              	.LVL91:
 542:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 699              		.loc 1 542 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 23


 700 0158 049D     		ldr	r5, [sp, #16]
 701              	.LVL92:
 702 015a 05A8     		add	r0, sp, #20
 703 015c 2549     		ldr	r1, .L45+40
 704 015e 2A46     		mov	r2, r5
 705 0160 FFF7FEFF 		bl	sprintf
 706              	.LVL93:
 543:Src/main.c    ****     print(msg, 2);
 707              		.loc 1 543 0
 708 0164 05A8     		add	r0, sp, #20
 709 0166 0221     		movs	r1, #2
 710 0168 FFF7FEFF 		bl	print
 711              	.LVL94:
 544:Src/main.c    ****     sprintf(msg, "L %u", LEFT_SPEED);
 712              		.loc 1 544 0
 713 016c 05A8     		add	r0, sp, #20
 714 016e 2249     		ldr	r1, .L45+44
 715 0170 1C4B     		ldr	r3, .L45+24
 716 0172 1A88     		ldrh	r2, [r3]
 717 0174 FFF7FEFF 		bl	sprintf
 718              	.LVL95:
 545:Src/main.c    ****     print(msg, 3);
 719              		.loc 1 545 0
 720 0178 05A8     		add	r0, sp, #20
 721 017a 0321     		movs	r1, #3
 722 017c FFF7FEFF 		bl	print
 723              	.LVL96:
 546:Src/main.c    ****     sprintf(msg, "R %u", RIGHT_SPEED);
 724              		.loc 1 546 0
 725 0180 05A8     		add	r0, sp, #20
 726 0182 1E49     		ldr	r1, .L45+48
 727 0184 184B     		ldr	r3, .L45+28
 728 0186 1A88     		ldrh	r2, [r3]
 729 0188 FFF7FEFF 		bl	sprintf
 730              	.LVL97:
 547:Src/main.c    ****     print(msg, 4);
 731              		.loc 1 547 0
 732 018c 05A8     		add	r0, sp, #20
 733 018e 0421     		movs	r1, #4
 734 0190 FFF7FEFF 		bl	print
 735              	.LVL98:
 548:Src/main.c    ****     HAL_Delay(1000);
 736              		.loc 1 548 0
 737 0194 4FF47A70 		mov	r0, #1000
 738 0198 FFF7FEFF 		bl	HAL_Delay
 739              	.LVL99:
 549:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 740              		.loc 1 549 0
 741 019c 2046     		mov	r0, r4
 742 019e 0021     		movs	r1, #0
 743 01a0 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 744              	.LVL100:
 550:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 745              		.loc 1 550 0
 746 01a4 2046     		mov	r0, r4
 747 01a6 0821     		movs	r1, #8
 748 01a8 FFF7FEFF 		bl	HAL_TIM_PWM_Start
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 24


 749              	.LVL101:
 551:Src/main.c    ****     return pid_Init(values[0], values[1], values[2], 5, 100);
 750              		.loc 1 551 0
 751 01ac 0523     		movs	r3, #5
 752 01ae 0093     		str	r3, [sp]
 753 01b0 6423     		movs	r3, #100
 754 01b2 0193     		str	r3, [sp, #4]
 755 01b4 3046     		mov	r0, r6
 756 01b6 1FFA88F1 		uxth	r1, r8
 757 01ba BAB2     		uxth	r2, r7
 758 01bc ABB2     		uxth	r3, r5
 759 01be FFF7FEFF 		bl	pid_Init
 760              	.LVL102:
 552:Src/main.c    **** }
 761              		.loc 1 552 0
 762 01c2 3046     		mov	r0, r6
 763 01c4 0AB0     		add	sp, sp, #40
 764              	.LCFI11:
 765              		.cfi_def_cfa_offset 24
 766              		@ sp needed
 767 01c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 768              	.LVL103:
 769              	.L46:
 770 01ca 00BF     		.align	2
 771              	.L45:
 772 01cc 10000000 		.word	.LC2
 773 01d0 00080240 		.word	1073874944
 774 01d4 1C000000 		.word	.LC3
 775 01d8 00080040 		.word	1073743872
 776 01dc 00000000 		.word	htim1
 777 01e0 20000000 		.word	.LC4
 778 01e4 00000000 		.word	.LANCHOR0
 779 01e8 00000000 		.word	.LANCHOR1
 780 01ec 24000000 		.word	.LC5
 781 01f0 2C000000 		.word	.LC6
 782 01f4 34000000 		.word	.LC7
 783 01f8 3C000000 		.word	.LC8
 784 01fc 44000000 		.word	.LC9
 785              		.cfi_endproc
 786              	.LFE132:
 788              		.section	.text.do_pid,"ax",%progbits
 789              		.align	2
 790              		.global	do_pid
 791              		.thumb
 792              		.thumb_func
 794              	do_pid:
 795              	.LFB133:
 553:Src/main.c    **** 
 554:Src/main.c    **** void do_pid(PID_t *pid_struct)
 555:Src/main.c    **** {
 796              		.loc 1 555 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 24
 799              		@ frame_needed = 0, uses_anonymous_args = 0
 800              	.LVL104:
 801 0000 70B5     		push	{r4, r5, r6, lr}
 802              	.LCFI12:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 25


 803              		.cfi_def_cfa_offset 16
 804              		.cfi_offset 4, -16
 805              		.cfi_offset 5, -12
 806              		.cfi_offset 6, -8
 807              		.cfi_offset 14, -4
 808 0002 86B0     		sub	sp, sp, #24
 809              	.LCFI13:
 810              		.cfi_def_cfa_offset 40
 811 0004 0646     		mov	r6, r0
 556:Src/main.c    ****     /* Read sensors */
 557:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) ? 0 : 1;
 812              		.loc 1 557 0
 813 0006 2B4D     		ldr	r5, .L56
 814 0008 2846     		mov	r0, r5
 815              	.LVL105:
 816 000a 4FF48041 		mov	r1, #16384
 817 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 818              	.LVL106:
 819 0012 B0FA80F4 		clz	r4, r0
 820 0016 6409     		lsrs	r4, r4, #5
 821              	.LVL107:
 558:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 822              		.loc 1 558 0
 823 0018 2846     		mov	r0, r5
 824 001a 4FF40041 		mov	r1, #32768
 825 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 826              	.LVL108:
 827 0022 B0FA80F0 		clz	r0, r0
 828 0026 4009     		lsrs	r0, r0, #5
 829              	.LVL109:
 559:Src/main.c    **** 
 560:Src/main.c    ****     /* Get error */
 561:Src/main.c    ****     if (left && right)
 830              		.loc 1 561 0
 831 0028 1CB1     		cbz	r4, .L48
 832              		.loc 1 561 0 is_stmt 0 discriminator 1
 833 002a 10B1     		cbz	r0, .L48
 562:Src/main.c    ****     {
 563:Src/main.c    ****         pid_struct->err = 0;
 834              		.loc 1 563 0 is_stmt 1
 835 002c 0023     		movs	r3, #0
 836 002e 3361     		str	r3, [r6, #16]
 837 0030 1AE0     		b	.L49
 838              	.L48:
 564:Src/main.c    ****     }
 565:Src/main.c    ****     else if (left && !right)
 839              		.loc 1 565 0
 840 0032 1CB1     		cbz	r4, .L50
 841              		.loc 1 565 0 is_stmt 0 discriminator 1
 842 0034 10B9     		cbnz	r0, .L50
 566:Src/main.c    ****     {
 567:Src/main.c    ****         pid_struct->err = 1;
 843              		.loc 1 567 0 is_stmt 1
 844 0036 0123     		movs	r3, #1
 845 0038 3361     		str	r3, [r6, #16]
 846 003a 15E0     		b	.L49
 847              	.L50:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 26


 568:Src/main.c    ****     }
 569:Src/main.c    ****     else if (!left && right)
 848              		.loc 1 569 0
 849 003c 24B9     		cbnz	r4, .L51
 850              		.loc 1 569 0 is_stmt 0 discriminator 1
 851 003e 18B1     		cbz	r0, .L51
 570:Src/main.c    ****     {
 571:Src/main.c    ****         pid_struct->err = -1;
 852              		.loc 1 571 0 is_stmt 1
 853 0040 4FF0FF33 		mov	r3, #-1
 854 0044 3361     		str	r3, [r6, #16]
 855 0046 0FE0     		b	.L49
 856              	.L51:
 572:Src/main.c    ****     }
 573:Src/main.c    ****     else if (!left && !right && (pid_struct->err < 0))
 857              		.loc 1 573 0
 858 0048 3CB9     		cbnz	r4, .L52
 859              		.loc 1 573 0 is_stmt 0 discriminator 1
 860 004a 30B9     		cbnz	r0, .L52
 861              		.loc 1 573 0 discriminator 2
 862 004c 3369     		ldr	r3, [r6, #16]
 863 004e 002B     		cmp	r3, #0
 864 0050 03DA     		bge	.L52
 574:Src/main.c    ****     {
 575:Src/main.c    ****         pid_struct->err = -5;
 865              		.loc 1 575 0 is_stmt 1
 866 0052 6FF00403 		mvn	r3, #4
 867 0056 3361     		str	r3, [r6, #16]
 868 0058 06E0     		b	.L49
 869              	.L52:
 576:Src/main.c    ****     }
 577:Src/main.c    ****     else if (!left && !right && (pid_struct->err > 0))
 870              		.loc 1 577 0
 871 005a 2CB9     		cbnz	r4, .L49
 872              		.loc 1 577 0 is_stmt 0 discriminator 1
 873 005c 20B9     		cbnz	r0, .L49
 874              		.loc 1 577 0 discriminator 2
 875 005e 3369     		ldr	r3, [r6, #16]
 876 0060 002B     		cmp	r3, #0
 877 0062 01DD     		ble	.L49
 578:Src/main.c    ****     {
 579:Src/main.c    ****         pid_struct->err = 5;
 878              		.loc 1 579 0 is_stmt 1
 879 0064 0523     		movs	r3, #5
 880 0066 3361     		str	r3, [r6, #16]
 881              	.L49:
 580:Src/main.c    ****     }
 581:Src/main.c    **** 
 582:Src/main.c    ****     /* Get gain */
 583:Src/main.c    ****     int16_t gain = pid_GetGain(pid_struct);
 882              		.loc 1 583 0
 883 0068 3046     		mov	r0, r6
 884              	.LVL110:
 885 006a FFF7FEFF 		bl	pid_GetGain
 886              	.LVL111:
 887 006e 85B2     		uxth	r5, r0
 888              	.LVL112:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 27


 584:Src/main.c    ****     char msg[20] = "";
 889              		.loc 1 584 0
 890 0070 0024     		movs	r4, #0
 891              	.LVL113:
 892 0072 0194     		str	r4, [sp, #4]
 893 0074 0294     		str	r4, [sp, #8]
 894 0076 0394     		str	r4, [sp, #12]
 895 0078 0494     		str	r4, [sp, #16]
 896 007a 0594     		str	r4, [sp, #20]
 585:Src/main.c    ****     sprintf(msg, "%d", (int)gain);
 897              		.loc 1 585 0
 898 007c 2EB2     		sxth	r6, r5
 899              	.LVL114:
 900 007e 01A8     		add	r0, sp, #4
 901 0080 0D49     		ldr	r1, .L56+4
 902 0082 3246     		mov	r2, r6
 903 0084 FFF7FEFF 		bl	sprintf
 904              	.LVL115:
 586:Src/main.c    ****     print(msg, 0);
 905              		.loc 1 586 0
 906 0088 01A8     		add	r0, sp, #4
 907 008a 2146     		mov	r1, r4
 908 008c FFF7FEFF 		bl	print
 909              	.LVL116:
 587:Src/main.c    ****     /* Set Motor Speeds*/
 588:Src/main.c    ****     int lspeed = LEFT_SPEED;
 910              		.loc 1 588 0
 911 0090 0A4B     		ldr	r3, .L56+8
 912 0092 1988     		ldrh	r1, [r3]
 913              	.LVL117:
 589:Src/main.c    ****     int rspeed = RIGHT_SPEED;
 914              		.loc 1 589 0
 915 0094 0A4B     		ldr	r3, .L56+12
 916 0096 1B88     		ldrh	r3, [r3]
 917              	.LVL118:
 590:Src/main.c    ****     if (gain < 0)
 918              		.loc 1 590 0
 919 0098 A642     		cmp	r6, r4
 920 009a 01DA     		bge	.L53
 591:Src/main.c    ****     {
 592:Src/main.c    ****         lspeed = LEFT_SPEED - gain;
 921              		.loc 1 592 0
 922 009c 891B     		subs	r1, r1, r6
 923              	.LVL119:
 924 009e 03E0     		b	.L54
 925              	.L53:
 593:Src/main.c    ****     }
 594:Src/main.c    ****     else if (gain > 0)
 926              		.loc 1 594 0
 927 00a0 2DB2     		sxth	r5, r5
 928 00a2 002D     		cmp	r5, #0
 929 00a4 00DD     		ble	.L54
 595:Src/main.c    ****     {
 596:Src/main.c    ****         rspeed = RIGHT_SPEED + gain;
 930              		.loc 1 596 0
 931 00a6 3344     		add	r3, r3, r6
 932              	.LVL120:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 28


 933              	.L54:
 597:Src/main.c    ****     }
 598:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, lspeed);
 934              		.loc 1 598 0
 935 00a8 064A     		ldr	r2, .L56+16
 936 00aa 1268     		ldr	r2, [r2]
 937 00ac 5163     		str	r1, [r2, #52]
 599:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, rspeed);
 938              		.loc 1 599 0
 939 00ae D363     		str	r3, [r2, #60]
 600:Src/main.c    **** }
 940              		.loc 1 600 0
 941 00b0 06B0     		add	sp, sp, #24
 942              	.LCFI14:
 943              		.cfi_def_cfa_offset 16
 944              		@ sp needed
 945 00b2 70BD     		pop	{r4, r5, r6, pc}
 946              	.LVL121:
 947              	.L57:
 948              		.align	2
 949              	.L56:
 950 00b4 00040240 		.word	1073873920
 951 00b8 20000000 		.word	.LC4
 952 00bc 00000000 		.word	.LANCHOR0
 953 00c0 00000000 		.word	.LANCHOR1
 954 00c4 00000000 		.word	htim1
 955              		.cfi_endproc
 956              	.LFE133:
 958              		.section	.text.set_motor_speed,"ax",%progbits
 959              		.align	2
 960              		.global	set_motor_speed
 961              		.thumb
 962              		.thumb_func
 964              	set_motor_speed:
 965              	.LFB134:
 601:Src/main.c    **** 
 602:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 603:Src/main.c    **** {
 966              		.loc 1 603 0
 967              		.cfi_startproc
 968              		@ args = 0, pretend = 0, frame = 0
 969              		@ frame_needed = 0, uses_anonymous_args = 0
 970              		@ link register save eliminated.
 971              	.LVL122:
 604:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 972              		.loc 1 604 0
 973 0000 0346     		mov	r3, r0
 974 0002 18B9     		cbnz	r0, .L59
 605:Src/main.c    ****     {
 606:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 975              		.loc 1 606 0
 976 0004 0F4A     		ldr	r2, .L63
 977 0006 1268     		ldr	r2, [r2]
 978 0008 9063     		str	r0, [r2, #56]
 979 000a 13E0     		b	.L60
 980              	.L59:
 607:Src/main.c    ****     }
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 29


 608:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 981              		.loc 1 608 0
 982 000c 0428     		cmp	r0, #4
 983 000e 04D1     		bne	.L61
 609:Src/main.c    ****     {
 610:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 984              		.loc 1 610 0
 985 0010 0C4A     		ldr	r2, .L63
 986 0012 1268     		ldr	r2, [r2]
 987 0014 0020     		movs	r0, #0
 988              	.LVL123:
 989 0016 5063     		str	r0, [r2, #52]
 990 0018 0CE0     		b	.L60
 991              	.LVL124:
 992              	.L61:
 611:Src/main.c    ****     }
 612:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 993              		.loc 1 612 0
 994 001a 0828     		cmp	r0, #8
 995 001c 04D1     		bne	.L62
 613:Src/main.c    ****     {
 614:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 996              		.loc 1 614 0
 997 001e 094A     		ldr	r2, .L63
 998 0020 1268     		ldr	r2, [r2]
 999 0022 0020     		movs	r0, #0
 1000              	.LVL125:
 1001 0024 1064     		str	r0, [r2, #64]
 1002 0026 05E0     		b	.L60
 1003              	.LVL126:
 1004              	.L62:
 615:Src/main.c    ****     }
 616:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 1005              		.loc 1 616 0
 1006 0028 0C28     		cmp	r0, #12
 1007 002a 03D1     		bne	.L60
 617:Src/main.c    ****     {
 618:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 1008              		.loc 1 618 0
 1009 002c 054A     		ldr	r2, .L63
 1010 002e 1268     		ldr	r2, [r2]
 1011 0030 0020     		movs	r0, #0
 1012              	.LVL127:
 1013 0032 D063     		str	r0, [r2, #60]
 1014              	.L60:
 619:Src/main.c    ****     }
 620:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 1015              		.loc 1 620 0
 1016 0034 034A     		ldr	r2, .L63
 1017 0036 1268     		ldr	r2, [r2]
 1018 0038 3432     		adds	r2, r2, #52
 1019 003a 9B08     		lsrs	r3, r3, #2
 1020              	.LVL128:
 1021 003c 42F82310 		str	r1, [r2, r3, lsl #2]
 1022 0040 7047     		bx	lr
 1023              	.L64:
 1024 0042 00BF     		.align	2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 30


 1025              	.L63:
 1026 0044 00000000 		.word	htim1
 1027              		.cfi_endproc
 1028              	.LFE134:
 1030              		.global	__aeabi_f2d
 1031              		.global	__aeabi_d2uiz
 1032              		.section	.text.turn,"ax",%progbits
 1033              		.align	2
 1034              		.global	turn
 1035              		.thumb
 1036              		.thumb_func
 1038              	turn:
 1039              	.LFB126:
 315:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1040              		.loc 1 315 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 24
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044 0000 30B5     		push	{r4, r5, lr}
 1045              	.LCFI15:
 1046              		.cfi_def_cfa_offset 12
 1047              		.cfi_offset 4, -12
 1048              		.cfi_offset 5, -8
 1049              		.cfi_offset 14, -4
 1050 0002 2DED028B 		fstmfdd	sp!, {d8}
 1051              	.LCFI16:
 1052              		.cfi_def_cfa_offset 20
 1053              		.cfi_offset 80, -20
 1054              		.cfi_offset 81, -16
 1055 0006 87B0     		sub	sp, sp, #28
 1056              	.LCFI17:
 1057              		.cfi_def_cfa_offset 48
 316:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 1058              		.loc 1 316 0
 1059 0008 4548     		ldr	r0, .L76+8
 1060 000a 4649     		ldr	r1, .L76+12
 1061 000c 4FF44062 		mov	r2, #3072
 1062 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1063              	.LVL129:
 318:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 1064              		.loc 1 318 0
 1065 0014 4FF4FA70 		mov	r0, #500
 1066 0018 FFF7FEFF 		bl	HAL_Delay
 1067              	.LVL130:
 319:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 1068              		.loc 1 319 0
 1069 001c 424B     		ldr	r3, .L76+16
 1070 001e 5869     		ldr	r0, [r3, #20]
 1071 0020 FFF7FEFF 		bl	calculate_heading
 1072              	.LVL131:
 1073 0024 B0EE408A 		fcpys	s16, s0
 1074              	.LVL132:
 320:Src/main.c    ****     TIM3->CNT = 0;
 1075              		.loc 1 320 0
 1076 0028 F0EEC07A 		fabss	s15, s0
 1077 002c 17EE900A 		fmrs	r0, s15
 1078 0030 FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 31


 1079              	.LVL133:
 1080 0034 38A3     		adr	r3, .L76
 1081 0036 D3E90023 		ldrd	r2, [r3]
 1082 003a FFF7FEFF 		bl	__aeabi_dmul
 1083              	.LVL134:
 1084 003e FFF7FEFF 		bl	__aeabi_d2uiz
 1085              	.LVL135:
 1086 0042 85B2     		uxth	r5, r0
 1087              	.LVL136:
 321:Src/main.c    ****     TIM4->CNT = 0;
 1088              		.loc 1 321 0
 1089 0044 0024     		movs	r4, #0
 1090 0046 394B     		ldr	r3, .L76+20
 1091 0048 5C62     		str	r4, [r3, #36]
 322:Src/main.c    ****     char msg[18] = "";
 1092              		.loc 1 322 0
 1093 004a 03F58063 		add	r3, r3, #1024
 1094 004e 5C62     		str	r4, [r3, #36]
 323:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 1095              		.loc 1 323 0
 1096 0050 0194     		str	r4, [sp, #4]
 1097 0052 0294     		str	r4, [sp, #8]
 1098 0054 0394     		str	r4, [sp, #12]
 1099 0056 0494     		str	r4, [sp, #16]
 1100 0058 ADF81440 		strh	r4, [sp, #20]	@ movhi
 324:Src/main.c    ****     print(msg, 0);
 1101              		.loc 1 324 0
 1102 005c 01A8     		add	r0, sp, #4
 1103 005e 3449     		ldr	r1, .L76+24
 1104 0060 2A46     		mov	r2, r5
 1105 0062 FFF7FEFF 		bl	sprintf
 1106              	.LVL137:
 325:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 1107              		.loc 1 325 0
 1108 0066 01A8     		add	r0, sp, #4
 1109 0068 2146     		mov	r1, r4
 1110 006a FFF7FEFF 		bl	print
 1111              	.LVL138:
 326:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 1112              		.loc 1 326 0
 1113 006e BDEEC87A 		ftosizs	s14, s16
 1114              	.LVL139:
 327:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 1115              		.loc 1 327 0
 1116 0072 F8EEC77A 		fsitos	s15, s14
 1117 0076 78EE677A 		fsubs	s15, s16, s15
 1118 007a DFED2E6A 		flds	s13, .L76+28
 1119 007e 67EEA67A 		fmuls	s15, s15, s13
 1120              	.LVL140:
 328:Src/main.c    ****     print(msg, 0);
 1121              		.loc 1 328 0
 1122 0082 01A8     		add	r0, sp, #4
 1123 0084 2C49     		ldr	r1, .L76+32
 1124 0086 17EE102A 		fmrs	r2, s14	@ int
 1125 008a FDEEE77A 		ftosizs	s15, s15
 1126              	.LVL141:
 1127 008e 17EE903A 		fmrs	r3, s15	@ int
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 32


 1128 0092 FFF7FEFF 		bl	sprintf
 1129              	.LVL142:
 329:Src/main.c    ****     if (volts < 0)
 1130              		.loc 1 329 0
 1131 0096 01A8     		add	r0, sp, #4
 1132 0098 2146     		mov	r1, r4
 1133 009a FFF7FEFF 		bl	print
 1134              	.LVL143:
 330:Src/main.c    ****     {
 1135              		.loc 1 330 0
 1136 009e B5EEC08A 		fcmpezs	s16
 1137 00a2 F1EE10FA 		fmstat
 1138 00a6 10D5     		bpl	.L74
 332:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 1139              		.loc 1 332 0
 1140 00a8 2046     		mov	r0, r4
 1141 00aa 2146     		mov	r1, r4
 1142 00ac FFF7FEFF 		bl	set_motor_speed
 1143              	.LVL144:
 333:Src/main.c    ****         while (TIM4->CNT < counts)
 1144              		.loc 1 333 0
 1145 00b0 0820     		movs	r0, #8
 1146 00b2 47F23051 		movw	r1, #30000
 1147 00b6 FFF7FEFF 		bl	set_motor_speed
 1148              	.LVL145:
 1149              	.L68:
 334:Src/main.c    ****         {
 1150              		.loc 1 334 0 discriminator 1
 1151 00ba 204B     		ldr	r3, .L76+36
 1152 00bc 5B6A     		ldr	r3, [r3, #36]
 1153 00be AB42     		cmp	r3, r5
 1154 00c0 FBD3     		bcc	.L68
 337:Src/main.c    ****     }
 1155              		.loc 1 337 0
 1156 00c2 0022     		movs	r2, #0
 1157 00c4 1D4B     		ldr	r3, .L76+36
 1158 00c6 5A62     		str	r2, [r3, #36]
 1159 00c8 14E0     		b	.L69
 1160              	.L74:
 339:Src/main.c    ****     {
 1161              		.loc 1 339 0
 1162 00ca B5EEC08A 		fcmpezs	s16
 1163 00ce F1EE10FA 		fmstat
 1164 00d2 0FDD     		ble	.L69
 341:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1165              		.loc 1 341 0
 1166 00d4 0020     		movs	r0, #0
 1167 00d6 47F23051 		movw	r1, #30000
 1168 00da FFF7FEFF 		bl	set_motor_speed
 1169              	.LVL146:
 342:Src/main.c    ****         while (TIM3->CNT < counts)
 1170              		.loc 1 342 0
 1171 00de 0820     		movs	r0, #8
 1172 00e0 0021     		movs	r1, #0
 1173 00e2 FFF7FEFF 		bl	set_motor_speed
 1174              	.LVL147:
 1175              	.L71:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 33


 343:Src/main.c    ****         {
 1176              		.loc 1 343 0 discriminator 1
 1177 00e6 114B     		ldr	r3, .L76+20
 1178 00e8 5B6A     		ldr	r3, [r3, #36]
 1179 00ea AB42     		cmp	r3, r5
 1180 00ec FBD3     		bcc	.L71
 346:Src/main.c    ****     }
 1181              		.loc 1 346 0
 1182 00ee 0022     		movs	r2, #0
 1183 00f0 124B     		ldr	r3, .L76+36
 1184 00f2 5A62     		str	r2, [r3, #36]
 1185              	.L69:
 348:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1186              		.loc 1 348 0
 1187 00f4 0020     		movs	r0, #0
 1188 00f6 0146     		mov	r1, r0
 1189 00f8 FFF7FEFF 		bl	set_motor_speed
 1190              	.LVL148:
 349:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 1191              		.loc 1 349 0
 1192 00fc 0820     		movs	r0, #8
 1193 00fe 0021     		movs	r1, #0
 1194 0100 FFF7FEFF 		bl	set_motor_speed
 1195              	.LVL149:
 350:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 1196              		.loc 1 350 0
 1197 0104 0648     		ldr	r0, .L76+8
 1198 0106 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1199              	.LVL150:
 351:Src/main.c    **** }
 1200              		.loc 1 351 0
 1201 010a 0022     		movs	r2, #0
 1202 010c 0C4B     		ldr	r3, .L76+40
 1203 010e 1A70     		strb	r2, [r3]
 352:Src/main.c    **** 
 1204              		.loc 1 352 0
 1205 0110 07B0     		add	sp, sp, #28
 1206              	.LCFI18:
 1207              		.cfi_def_cfa_offset 20
 1208              		@ sp needed
 1209 0112 BDEC028B 		fldmfdd	sp!, {d8}
 1210              	.LCFI19:
 1211              		.cfi_restore 80
 1212              		.cfi_restore 81
 1213              		.cfi_def_cfa_offset 12
 1214              	.LVL151:
 1215 0116 30BD     		pop	{r4, r5, pc}
 1216              	.LVL152:
 1217              	.L77:
 1218              		.align	3
 1219              	.L76:
 1220 0118 00000000 		.word	0
 1221 011c 00C07240 		.word	1081262080
 1222 0120 00000000 		.word	hadc1
 1223 0124 00000000 		.word	dma_buffer
 1224 0128 00000000 		.word	adc_values
 1225 012c 00040040 		.word	1073742848
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 34


 1226 0130 4C000000 		.word	.LC10
 1227 0134 00007A44 		.word	1148846080
 1228 0138 58000000 		.word	.LC11
 1229 013c 00080040 		.word	1073743872
 1230 0140 00000000 		.word	PI_INT_STATE
 1231              		.cfi_endproc
 1232              	.LFE126:
 1234              		.section	.text.pi_navigation,"ax",%progbits
 1235              		.align	2
 1236              		.global	pi_navigation
 1237              		.thumb
 1238              		.thumb_func
 1240              	pi_navigation:
 1241              	.LFB127:
 355:Src/main.c    ****     print("Pi nav", 0);
 1242              		.loc 1 355 0
 1243              		.cfi_startproc
 1244              		@ args = 0, pretend = 0, frame = 0
 1245              		@ frame_needed = 0, uses_anonymous_args = 0
 1246 0000 08B5     		push	{r3, lr}
 1247              	.LCFI20:
 1248              		.cfi_def_cfa_offset 8
 1249              		.cfi_offset 3, -8
 1250              		.cfi_offset 14, -4
 1251 0002 2DED028B 		fstmfdd	sp!, {d8}
 1252              	.LCFI21:
 1253              		.cfi_def_cfa_offset 16
 1254              		.cfi_offset 80, -16
 1255              		.cfi_offset 81, -12
 356:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1256              		.loc 1 356 0
 1257 0006 2948     		ldr	r0, .L87
 1258 0008 0021     		movs	r1, #0
 1259 000a FFF7FEFF 		bl	print
 1260              	.LVL153:
 357:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 1261              		.loc 1 357 0
 1262 000e 2848     		ldr	r0, .L87+4
 1263 0010 2849     		ldr	r1, .L87+8
 1264 0012 4FF44062 		mov	r2, #3072
 1265 0016 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1266              	.LVL154:
 359:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
 1267              		.loc 1 359 0
 1268 001a 4FF4FA70 		mov	r0, #500
 1269 001e FFF7FEFF 		bl	HAL_Delay
 1270              	.LVL155:
 360:Src/main.c    ****     if (heading < 0)
 1271              		.loc 1 360 0
 1272 0022 254B     		ldr	r3, .L87+12
 1273 0024 5869     		ldr	r0, [r3, #20]
 1274 0026 FFF7FEFF 		bl	calculate_heading
 1275              	.LVL156:
 1276 002a B0EE408A 		fcpys	s16, s0
 1277              	.LVL157:
 361:Src/main.c    ****     {
 1278              		.loc 1 361 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 35


 1279 002e B5EEC00A 		fcmpezs	s0
 1280 0032 F1EE10FA 		fmstat
 1281 0036 0CD5     		bpl	.L85
 363:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 10000);
 1282              		.loc 1 363 0
 1283 0038 0420     		movs	r0, #4
 1284 003a 42F21071 		movw	r1, #10000
 1285 003e FFF7FEFF 		bl	set_motor_speed
 1286              	.LVL158:
 364:Src/main.c    ****         heading *= -1;
 1287              		.loc 1 364 0
 1288 0042 0820     		movs	r0, #8
 1289 0044 42F21071 		movw	r1, #10000
 1290 0048 FFF7FEFF 		bl	set_motor_speed
 1291              	.LVL159:
 365:Src/main.c    ****     }
 1292              		.loc 1 365 0
 1293 004c B1EE488A 		fnegs	s16, s16
 1294              	.LVL160:
 1295 0050 0EE0     		b	.L81
 1296              	.LVL161:
 1297              	.L85:
 367:Src/main.c    ****     {
 1298              		.loc 1 367 0
 1299 0052 B5EEC00A 		fcmpezs	s0
 1300 0056 F1EE10FA 		fmstat
 1301 005a 09DD     		ble	.L81
 369:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 10000);
 1302              		.loc 1 369 0
 1303 005c 0020     		movs	r0, #0
 1304 005e 42F21071 		movw	r1, #10000
 1305 0062 FFF7FEFF 		bl	set_motor_speed
 1306              	.LVL162:
 370:Src/main.c    ****     }
 1307              		.loc 1 370 0
 1308 0066 0C20     		movs	r0, #12
 1309 0068 42F21071 		movw	r1, #10000
 1310 006c FFF7FEFF 		bl	set_motor_speed
 1311              	.LVL163:
 1312              	.L81:
 372:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 20000);
 1313              		.loc 1 372 0
 1314 0070 DFED127A 		flds	s15, .L87+16
 1315 0074 28EE278A 		fmuls	s16, s16, s15
 1316              	.LVL164:
 1317 0078 FCEEC87A 		ftouizs	s15, s16
 1318 007c 17EE900A 		fmrs	r0, s15	@ int
 1319 0080 FFF7FEFF 		bl	HAL_Delay
 1320              	.LVL165:
 373:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 20000);
 1321              		.loc 1 373 0
 1322 0084 0020     		movs	r0, #0
 1323 0086 44F62061 		movw	r1, #20000
 1324 008a FFF7FEFF 		bl	set_motor_speed
 1325              	.LVL166:
 374:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 1326              		.loc 1 374 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 36


 1327 008e 0820     		movs	r0, #8
 1328 0090 44F62061 		movw	r1, #20000
 1329 0094 FFF7FEFF 		bl	set_motor_speed
 1330              	.LVL167:
 375:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 1331              		.loc 1 375 0
 1332 0098 0548     		ldr	r0, .L87+4
 1333 009a FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1334              	.LVL168:
 376:Src/main.c    **** }
 1335              		.loc 1 376 0
 1336 009e 0022     		movs	r2, #0
 1337 00a0 074B     		ldr	r3, .L87+20
 1338 00a2 1A70     		strb	r2, [r3]
 377:Src/main.c    **** 
 1339              		.loc 1 377 0
 1340 00a4 BDEC028B 		fldmfdd	sp!, {d8}
 1341              	.LCFI22:
 1342              		.cfi_restore 80
 1343              		.cfi_restore 81
 1344              		.cfi_def_cfa_offset 8
 1345 00a8 08BD     		pop	{r3, pc}
 1346              	.L88:
 1347 00aa 00BF     		.align	2
 1348              	.L87:
 1349 00ac 64000000 		.word	.LC12
 1350 00b0 00000000 		.word	hadc1
 1351 00b4 00000000 		.word	dma_buffer
 1352 00b8 00000000 		.word	adc_values
 1353 00bc 0000FA44 		.word	1157234688
 1354 00c0 00000000 		.word	PI_INT_STATE
 1355              		.cfi_endproc
 1356              	.LFE127:
 1358              		.section	.text.encoder_pid,"ax",%progbits
 1359              		.align	2
 1360              		.global	encoder_pid
 1361              		.thumb
 1362              		.thumb_func
 1364              	encoder_pid:
 1365              	.LFB135:
 621:Src/main.c    **** }
 622:Src/main.c    **** 
 623:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc)
 624:Src/main.c    **** {
 1366              		.loc 1 624 0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 24
 1369              		@ frame_needed = 0, uses_anonymous_args = 0
 1370              	.LVL169:
 1371 0000 70B5     		push	{r4, r5, r6, lr}
 1372              	.LCFI23:
 1373              		.cfi_def_cfa_offset 16
 1374              		.cfi_offset 4, -16
 1375              		.cfi_offset 5, -12
 1376              		.cfi_offset 6, -8
 1377              		.cfi_offset 14, -4
 1378 0002 2DED048B 		fstmfdd	sp!, {d8, d9}
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 37


 1379              	.LCFI24:
 1380              		.cfi_def_cfa_offset 32
 1381              		.cfi_offset 80, -32
 1382              		.cfi_offset 81, -28
 1383              		.cfi_offset 82, -24
 1384              		.cfi_offset 83, -20
 1385 0006 86B0     		sub	sp, sp, #24
 1386              	.LCFI25:
 1387              		.cfi_def_cfa_offset 56
 1388 0008 0546     		mov	r5, r0
 1389 000a 1446     		mov	r4, r2
 1390 000c 1E46     		mov	r6, r3
 625:Src/main.c    ****     /* Get error */
 626:Src/main.c    ****     float l_enc = update_encoder(left_enc);
 1391              		.loc 1 626 0
 1392 000e 0846     		mov	r0, r1
 1393              	.LVL170:
 1394 0010 FFF7FEFF 		bl	update_encoder
 1395              	.LVL171:
 1396 0014 F0EE408A 		fcpys	s17, s0
 1397              	.LVL172:
 627:Src/main.c    ****     float r_enc = update_encoder(right_enc);
 1398              		.loc 1 627 0
 1399 0018 3046     		mov	r0, r6
 1400 001a FFF7FEFF 		bl	update_encoder
 1401              	.LVL173:
 1402 001e B0EE408A 		fcpys	s16, s0
 1403              	.LVL174:
 628:Src/main.c    ****     left_pid->err = ENCODER_GOAL - l_enc;
 1404              		.loc 1 628 0
 1405 0022 F0EE087A 		fconsts	s15, #8
 1406 0026 37EEE87A 		fsubs	s14, s15, s17
 1407 002a BDEEC77A 		ftosizs	s14, s14
 1408 002e 85ED047A 		fsts	s14, [r5, #16]	@ int
 629:Src/main.c    ****     right_pid->err = ENCODER_GOAL - r_enc;
 1409              		.loc 1 629 0
 1410 0032 77EEC07A 		fsubs	s15, s15, s0
 1411 0036 FDEEE77A 		ftosizs	s15, s15
 1412 003a C4ED047A 		fsts	s15, [r4, #16]	@ int
 630:Src/main.c    **** 
 631:Src/main.c    ****     /* Get gain */
 632:Src/main.c    ****     int32_t left_gain = pid_GetGain(left_pid);
 1413              		.loc 1 632 0
 1414 003e 2846     		mov	r0, r5
 1415 0040 FFF7FEFF 		bl	pid_GetGain
 1416              	.LVL175:
 1417 0044 0646     		mov	r6, r0
 1418              	.LVL176:
 633:Src/main.c    ****     int32_t right_gain = pid_GetGain(right_pid);
 1419              		.loc 1 633 0
 1420 0046 2046     		mov	r0, r4
 1421              	.LVL177:
 1422 0048 FFF7FEFF 		bl	pid_GetGain
 1423              	.LVL178:
 1424 004c 0546     		mov	r5, r0
 1425              	.LVL179:
 634:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 38


 635:Src/main.c    ****     int l_predec = (int)(l_enc / 1);
 1426              		.loc 1 635 0
 1427 004e FDEEE87A 		ftosizs	s15, s17
 1428              	.LVL180:
 636:Src/main.c    ****     int l_postdec = (int)((l_enc - l_predec) * 1000);
 1429              		.loc 1 636 0
 1430 0052 B8EEE77A 		fsitos	s14, s15
 1431 0056 78EEC78A 		fsubs	s17, s17, s14
 1432              	.LVL181:
 1433 005a 9FED297A 		flds	s14, .L91
 1434 005e 68EE878A 		fmuls	s17, s17, s14
 1435              	.LVL182:
 637:Src/main.c    ****     int r_predec = (int)(r_enc / 1);
 1436              		.loc 1 637 0
 1437 0062 BDEEC89A 		ftosizs	s18, s16
 1438              	.LVL183:
 638:Src/main.c    ****     int r_postdec = (int)((r_enc - r_predec) * 1000);
 1439              		.loc 1 638 0
 1440 0066 F8EEC96A 		fsitos	s13, s18
 1441 006a 38EE668A 		fsubs	s16, s16, s13
 1442              	.LVL184:
 1443 006e 28EE078A 		fmuls	s16, s16, s14
 1444 0072 BDEEC88A 		ftosizs	s16, s16
 1445              	.LVL185:
 639:Src/main.c    ****     char msg[18] = "";
 1446              		.loc 1 639 0
 1447 0076 0024     		movs	r4, #0
 1448              	.LVL186:
 1449 0078 0194     		str	r4, [sp, #4]
 1450 007a 0294     		str	r4, [sp, #8]
 1451 007c 0394     		str	r4, [sp, #12]
 1452 007e 0494     		str	r4, [sp, #16]
 1453 0080 ADF81440 		strh	r4, [sp, #20]	@ movhi
 640:Src/main.c    ****     sprintf(msg, "LG: %d.%d", l_predec, l_postdec);
 1454              		.loc 1 640 0
 1455 0084 01A8     		add	r0, sp, #4
 1456              	.LVL187:
 1457 0086 1F49     		ldr	r1, .L91+4
 1458 0088 17EE902A 		fmrs	r2, s15	@ int
 1459 008c FDEEE87A 		ftosizs	s15, s17
 1460              	.LVL188:
 1461 0090 17EE903A 		fmrs	r3, s15	@ int
 1462 0094 FFF7FEFF 		bl	sprintf
 1463              	.LVL189:
 641:Src/main.c    ****     print(msg, 0);
 1464              		.loc 1 641 0
 1465 0098 01A8     		add	r0, sp, #4
 1466 009a 2146     		mov	r1, r4
 1467 009c FFF7FEFF 		bl	print
 1468              	.LVL190:
 642:Src/main.c    ****     sprintf(msg, "RG: %d.%d", r_predec, r_postdec);
 1469              		.loc 1 642 0
 1470 00a0 01A8     		add	r0, sp, #4
 1471 00a2 1949     		ldr	r1, .L91+8
 1472 00a4 19EE102A 		fmrs	r2, s18	@ int
 1473 00a8 18EE103A 		fmrs	r3, s16	@ int
 1474 00ac FFF7FEFF 		bl	sprintf
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 39


 1475              	.LVL191:
 643:Src/main.c    ****     print(msg, 1);
 1476              		.loc 1 643 0
 1477 00b0 01A8     		add	r0, sp, #4
 1478 00b2 0121     		movs	r1, #1
 1479 00b4 FFF7FEFF 		bl	print
 1480              	.LVL192:
 644:Src/main.c    **** 
 645:Src/main.c    ****     /* Set Motor Speeds*/
 646:Src/main.c    ****     int lspeed = LEFT_SPEED + left_gain;
 1481              		.loc 1 646 0
 1482 00b8 144B     		ldr	r3, .L91+12
 1483 00ba 1B88     		ldrh	r3, [r3]
 1484 00bc 1E44     		add	r6, r6, r3
 1485              	.LVL193:
 647:Src/main.c    ****     int rspeed = RIGHT_SPEED + right_gain;
 1486              		.loc 1 647 0
 1487 00be 144B     		ldr	r3, .L91+16
 1488 00c0 1B88     		ldrh	r3, [r3]
 1489 00c2 1D44     		add	r5, r5, r3
 1490              	.LVL194:
 648:Src/main.c    **** 
 649:Src/main.c    ****     sprintf(msg, "LS: %d", (int)lspeed);
 1491              		.loc 1 649 0
 1492 00c4 01A8     		add	r0, sp, #4
 1493 00c6 1349     		ldr	r1, .L91+20
 1494 00c8 3246     		mov	r2, r6
 1495 00ca FFF7FEFF 		bl	sprintf
 1496              	.LVL195:
 650:Src/main.c    ****     print(msg, 3);
 1497              		.loc 1 650 0
 1498 00ce 01A8     		add	r0, sp, #4
 1499 00d0 0321     		movs	r1, #3
 1500 00d2 FFF7FEFF 		bl	print
 1501              	.LVL196:
 651:Src/main.c    ****     sprintf(msg, "RS: %d", (int)rspeed);
 1502              		.loc 1 651 0
 1503 00d6 01A8     		add	r0, sp, #4
 1504 00d8 0F49     		ldr	r1, .L91+24
 1505 00da 2A46     		mov	r2, r5
 1506 00dc FFF7FEFF 		bl	sprintf
 1507              	.LVL197:
 652:Src/main.c    ****     print(msg, 4);
 1508              		.loc 1 652 0
 1509 00e0 01A8     		add	r0, sp, #4
 1510 00e2 0421     		movs	r1, #4
 1511 00e4 FFF7FEFF 		bl	print
 1512              	.LVL198:
 653:Src/main.c    ****     // set_motor_speed
 654:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 1513              		.loc 1 654 0
 1514 00e8 2046     		mov	r0, r4
 1515 00ea 3146     		mov	r1, r6
 1516 00ec FFF7FEFF 		bl	set_motor_speed
 1517              	.LVL199:
 655:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1518              		.loc 1 655 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 40


 1519 00f0 0820     		movs	r0, #8
 1520 00f2 2946     		mov	r1, r5
 1521 00f4 FFF7FEFF 		bl	set_motor_speed
 1522              	.LVL200:
 656:Src/main.c    **** }
 1523              		.loc 1 656 0
 1524 00f8 06B0     		add	sp, sp, #24
 1525              	.LCFI26:
 1526              		.cfi_def_cfa_offset 32
 1527              		@ sp needed
 1528 00fa BDEC048B 		fldmfdd	sp!, {d8-d9}
 1529              	.LCFI27:
 1530              		.cfi_restore 82
 1531              		.cfi_restore 83
 1532              		.cfi_restore 80
 1533              		.cfi_restore 81
 1534              		.cfi_def_cfa_offset 16
 1535              	.LVL201:
 1536 00fe 70BD     		pop	{r4, r5, r6, pc}
 1537              	.LVL202:
 1538              	.L92:
 1539              		.align	2
 1540              	.L91:
 1541 0100 00007A44 		.word	1148846080
 1542 0104 6C000000 		.word	.LC13
 1543 0108 78000000 		.word	.LC14
 1544 010c 00000000 		.word	.LANCHOR0
 1545 0110 00000000 		.word	.LANCHOR1
 1546 0114 84000000 		.word	.LC15
 1547 0118 8C000000 		.word	.LC16
 1548              		.cfi_endproc
 1549              	.LFE135:
 1551              		.section	.text._Error_Handler,"ax",%progbits
 1552              		.align	2
 1553              		.global	_Error_Handler
 1554              		.thumb
 1555              		.thumb_func
 1557              	_Error_Handler:
 1558              	.LFB136:
 657:Src/main.c    **** 
 658:Src/main.c    **** /* USER CODE END 4 */
 659:Src/main.c    **** 
 660:Src/main.c    **** /**
 661:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 662:Src/main.c    ****  * @param  file: The file name as string.
 663:Src/main.c    ****  * @param  line: The line in file as a number.
 664:Src/main.c    ****  * @retval None
 665:Src/main.c    ****  */
 666:Src/main.c    **** void _Error_Handler(char *file, int line)
 667:Src/main.c    **** {
 1559              		.loc 1 667 0
 1560              		.cfi_startproc
 1561              		@ Volatile: function does not return.
 1562              		@ args = 0, pretend = 0, frame = 0
 1563              		@ frame_needed = 0, uses_anonymous_args = 0
 1564              		@ link register save eliminated.
 1565              	.LVL203:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 41


 1566              	.L94:
 668:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 669:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 670:Src/main.c    ****     while (1)
 671:Src/main.c    ****     {
 672:Src/main.c    ****     }
 1567              		.loc 1 672 0 discriminator 1
 1568 0000 FEE7     		b	.L94
 1569              		.cfi_endproc
 1570              	.LFE136:
 1572 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1573              		.align	2
 1574              		.global	SystemClock_Config
 1575              		.thumb
 1576              		.thumb_func
 1578              	SystemClock_Config:
 1579              	.LFB125:
 255:Src/main.c    **** 
 1580              		.loc 1 255 0
 1581              		.cfi_startproc
 1582              		@ args = 0, pretend = 0, frame = 80
 1583              		@ frame_needed = 0, uses_anonymous_args = 0
 1584 0000 00B5     		push	{lr}
 1585              	.LCFI28:
 1586              		.cfi_def_cfa_offset 4
 1587              		.cfi_offset 14, -4
 1588 0002 95B0     		sub	sp, sp, #84
 1589              	.LCFI29:
 1590              		.cfi_def_cfa_offset 88
 1591              	.LBB5:
 262:Src/main.c    **** 
 1592              		.loc 1 262 0
 1593 0004 0022     		movs	r2, #0
 1594 0006 0192     		str	r2, [sp, #4]
 1595 0008 2A4B     		ldr	r3, .L99
 1596 000a 196C     		ldr	r1, [r3, #64]
 1597 000c 41F08051 		orr	r1, r1, #268435456
 1598 0010 1964     		str	r1, [r3, #64]
 1599 0012 1B6C     		ldr	r3, [r3, #64]
 1600 0014 03F08053 		and	r3, r3, #268435456
 1601 0018 0193     		str	r3, [sp, #4]
 1602 001a 019B     		ldr	r3, [sp, #4]
 1603              	.LBE5:
 1604              	.LBB6:
 264:Src/main.c    **** 
 1605              		.loc 1 264 0
 1606 001c 0292     		str	r2, [sp, #8]
 1607 001e 2649     		ldr	r1, .L99+4
 1608 0020 0B68     		ldr	r3, [r1]
 1609 0022 23F44043 		bic	r3, r3, #49152
 1610 0026 43F40043 		orr	r3, r3, #32768
 1611 002a 0B60     		str	r3, [r1]
 1612 002c 0B68     		ldr	r3, [r1]
 1613 002e 03F44043 		and	r3, r3, #49152
 1614 0032 0293     		str	r3, [sp, #8]
 1615 0034 029B     		ldr	r3, [sp, #8]
 1616              	.LBE6:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 42


 268:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1617              		.loc 1 268 0
 1618 0036 0223     		movs	r3, #2
 1619 0038 0893     		str	r3, [sp, #32]
 269:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 1620              		.loc 1 269 0
 1621 003a 0121     		movs	r1, #1
 1622 003c 0B91     		str	r1, [sp, #44]
 270:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1623              		.loc 1 270 0
 1624 003e 1021     		movs	r1, #16
 1625 0040 0C91     		str	r1, [sp, #48]
 271:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1626              		.loc 1 271 0
 1627 0042 0E93     		str	r3, [sp, #56]
 272:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 1628              		.loc 1 272 0
 1629 0044 0F92     		str	r2, [sp, #60]
 273:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 1630              		.loc 1 273 0
 1631 0046 0822     		movs	r2, #8
 1632 0048 1092     		str	r2, [sp, #64]
 274:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1633              		.loc 1 274 0
 1634 004a 4822     		movs	r2, #72
 1635 004c 1192     		str	r2, [sp, #68]
 275:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 1636              		.loc 1 275 0
 1637 004e 1293     		str	r3, [sp, #72]
 276:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1638              		.loc 1 276 0
 1639 0050 0423     		movs	r3, #4
 1640 0052 1393     		str	r3, [sp, #76]
 277:Src/main.c    ****     {
 1641              		.loc 1 277 0
 1642 0054 08A8     		add	r0, sp, #32
 1643 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1644              	.LVL204:
 1645 005a 20B1     		cbz	r0, .L96
 279:Src/main.c    ****     }
 1646              		.loc 1 279 0
 1647 005c 1748     		ldr	r0, .L99+8
 1648 005e 40F21711 		movw	r1, #279
 1649 0062 FFF7FEFF 		bl	_Error_Handler
 1650              	.LVL205:
 1651              	.L96:
 284:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1652              		.loc 1 284 0
 1653 0066 0F23     		movs	r3, #15
 1654 0068 0393     		str	r3, [sp, #12]
 286:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1655              		.loc 1 286 0
 1656 006a 0221     		movs	r1, #2
 1657 006c 0491     		str	r1, [sp, #16]
 287:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1658              		.loc 1 287 0
 1659 006e 0023     		movs	r3, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 43


 1660 0070 0593     		str	r3, [sp, #20]
 288:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1661              		.loc 1 288 0
 1662 0072 4FF48052 		mov	r2, #4096
 1663 0076 0692     		str	r2, [sp, #24]
 289:Src/main.c    **** 
 1664              		.loc 1 289 0
 1665 0078 0793     		str	r3, [sp, #28]
 291:Src/main.c    ****     {
 1666              		.loc 1 291 0
 1667 007a 03A8     		add	r0, sp, #12
 1668 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1669              	.LVL206:
 1670 0080 20B1     		cbz	r0, .L97
 293:Src/main.c    ****     }
 1671              		.loc 1 293 0
 1672 0082 0E48     		ldr	r0, .L99+8
 1673 0084 40F22511 		movw	r1, #293
 1674 0088 FFF7FEFF 		bl	_Error_Handler
 1675              	.LVL207:
 1676              	.L97:
 298:Src/main.c    **** 
 1677              		.loc 1 298 0
 1678 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1679              	.LVL208:
 1680 0090 0B4B     		ldr	r3, .L99+12
 1681 0092 A3FB0030 		umull	r3, r0, r3, r0
 1682 0096 8009     		lsrs	r0, r0, #6
 1683 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1684              	.LVL209:
 302:Src/main.c    **** 
 1685              		.loc 1 302 0
 1686 009c 0420     		movs	r0, #4
 1687 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1688              	.LVL210:
 305:Src/main.c    **** }
 1689              		.loc 1 305 0
 1690 00a2 4FF0FF30 		mov	r0, #-1
 1691 00a6 0021     		movs	r1, #0
 1692 00a8 0A46     		mov	r2, r1
 1693 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1694              	.LVL211:
 306:Src/main.c    **** 
 1695              		.loc 1 306 0
 1696 00ae 15B0     		add	sp, sp, #84
 1697              	.LCFI30:
 1698              		.cfi_def_cfa_offset 4
 1699              		@ sp needed
 1700 00b0 5DF804FB 		ldr	pc, [sp], #4
 1701              	.L100:
 1702              		.align	2
 1703              	.L99:
 1704 00b4 00380240 		.word	1073887232
 1705 00b8 00700040 		.word	1073770496
 1706 00bc 94000000 		.word	.LC17
 1707 00c0 D34D6210 		.word	274877907
 1708              		.cfi_endproc
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 44


 1709              	.LFE125:
 1711              		.section	.text.main,"ax",%progbits
 1712              		.align	2
 1713              		.global	main
 1714              		.thumb
 1715              		.thumb_func
 1717              	main:
 1718              	.LFB124:
 109:Src/main.c    ****     /* USER CODE BEGIN 1 */
 1719              		.loc 1 109 0
 1720              		.cfi_startproc
 1721              		@ Volatile: function does not return.
 1722              		@ args = 0, pretend = 0, frame = 0
 1723              		@ frame_needed = 0, uses_anonymous_args = 0
 1724 0000 08B5     		push	{r3, lr}
 1725              	.LCFI31:
 1726              		.cfi_def_cfa_offset 8
 1727              		.cfi_offset 3, -8
 1728              		.cfi_offset 14, -4
 117:Src/main.c    **** 
 1729              		.loc 1 117 0
 1730 0002 FFF7FEFF 		bl	HAL_Init
 1731              	.LVL212:
 124:Src/main.c    **** 
 1732              		.loc 1 124 0
 1733 0006 FFF7FEFF 		bl	SystemClock_Config
 1734              	.LVL213:
 131:Src/main.c    ****     MX_DMA_Init();
 1735              		.loc 1 131 0
 1736 000a FFF7FEFF 		bl	MX_GPIO_Init
 1737              	.LVL214:
 132:Src/main.c    ****     MX_TIM3_Init();
 1738              		.loc 1 132 0
 1739 000e FFF7FEFF 		bl	MX_DMA_Init
 1740              	.LVL215:
 133:Src/main.c    ****     MX_TIM1_Init();
 1741              		.loc 1 133 0
 1742 0012 FFF7FEFF 		bl	MX_TIM3_Init
 1743              	.LVL216:
 134:Src/main.c    ****     MX_TIM2_Init();
 1744              		.loc 1 134 0
 1745 0016 FFF7FEFF 		bl	MX_TIM1_Init
 1746              	.LVL217:
 135:Src/main.c    ****     MX_USART6_UART_Init();
 1747              		.loc 1 135 0
 1748 001a FFF7FEFF 		bl	MX_TIM2_Init
 1749              	.LVL218:
 136:Src/main.c    ****     MX_ADC1_Init();
 1750              		.loc 1 136 0
 1751 001e FFF7FEFF 		bl	MX_USART6_UART_Init
 1752              	.LVL219:
 137:Src/main.c    ****     MX_I2C1_Init();
 1753              		.loc 1 137 0
 1754 0022 FFF7FEFF 		bl	MX_ADC1_Init
 1755              	.LVL220:
 138:Src/main.c    ****     MX_TIM4_Init();
 1756              		.loc 1 138 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 45


 1757 0026 FFF7FEFF 		bl	MX_I2C1_Init
 1758              	.LVL221:
 139:Src/main.c    ****     MX_TIM9_Init();
 1759              		.loc 1 139 0
 1760 002a FFF7FEFF 		bl	MX_TIM4_Init
 1761              	.LVL222:
 140:Src/main.c    ****     MX_TIM5_Init();
 1762              		.loc 1 140 0
 1763 002e FFF7FEFF 		bl	MX_TIM9_Init
 1764              	.LVL223:
 141:Src/main.c    ****     /* USER CODE BEGIN 2 */
 1765              		.loc 1 141 0
 1766 0032 FFF7FEFF 		bl	MX_TIM5_Init
 1767              	.LVL224:
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1768              		.loc 1 158 0
 1769 0036 1848     		ldr	r0, .L104
 1770 0038 1821     		movs	r1, #24
 1771 003a FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1772              	.LVL225:
 159:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1773              		.loc 1 159 0
 1774 003e 1748     		ldr	r0, .L104+4
 1775 0040 1821     		movs	r1, #24
 1776 0042 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1777              	.LVL226:
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 1778              		.loc 1 160 0
 1779 0046 164C     		ldr	r4, .L104+8
 1780 0048 2046     		mov	r0, r4
 1781 004a 0021     		movs	r1, #0
 1782 004c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1783              	.LVL227:
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1784              		.loc 1 161 0
 1785 0050 2046     		mov	r0, r4
 1786 0052 0421     		movs	r1, #4
 1787 0054 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1788              	.LVL228:
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 1789              		.loc 1 162 0
 1790 0058 2046     		mov	r0, r4
 1791 005a 0821     		movs	r1, #8
 1792 005c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1793              	.LVL229:
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1794              		.loc 1 163 0
 1795 0060 2046     		mov	r0, r4
 1796 0062 0C21     		movs	r1, #12
 1797 0064 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1798              	.LVL230:
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1799              		.loc 1 164 0
 1800 0068 0E4C     		ldr	r4, .L104+12
 1801 006a 2046     		mov	r0, r4
 1802 006c 0021     		movs	r1, #0
 1803 006e FFF7FEFF 		bl	HAL_TIM_PWM_Start
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 46


 1804              	.LVL231:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1805              		.loc 1 165 0
 1806 0072 2046     		mov	r0, r4
 1807 0074 0421     		movs	r1, #4
 1808 0076 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1809              	.LVL232:
 166:Src/main.c    **** 
 1810              		.loc 1 166 0
 1811 007a 2046     		mov	r0, r4
 1812 007c 0821     		movs	r1, #8
 1813 007e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1814              	.LVL233:
 169:Src/main.c    ****     ssd1306_Init();
 1815              		.loc 1 169 0
 1816 0082 0948     		ldr	r0, .L104+16
 1817 0084 0021     		movs	r1, #0
 1818 0086 FFF7FEFF 		bl	print
 1819              	.LVL234:
 170:Src/main.c    ****     claw_init(&htim3);
 1820              		.loc 1 170 0
 1821 008a FFF7FEFF 		bl	ssd1306_Init
 1822              	.LVL235:
 171:Src/main.c    ****     ///basket_init(&htim3);
 1823              		.loc 1 171 0
 1824 008e 2046     		mov	r0, r4
 1825 0090 FFF7FEFF 		bl	claw_init
 1826              	.LVL236:
 1827              	.L102:
 245:Src/main.c    ****     /* USER CODE END 3 */
 1828              		.loc 1 245 0 discriminator 1
 1829 0094 FEE7     		b	.L102
 1830              	.L105:
 1831 0096 00BF     		.align	2
 1832              	.L104:
 1833 0098 00000000 		.word	htim4
 1834 009c 00000000 		.word	htim5
 1835 00a0 00000000 		.word	htim1
 1836 00a4 00000000 		.word	htim3
 1837 00a8 10000000 		.word	.LC2
 1838              		.cfi_endproc
 1839              	.LFE124:
 1841              		.comm	adc_values,12288,4
 1842              		.comm	dma_buffer,12288,4
 1843              		.global	RIGHT_SPEED
 1844              		.global	LEFT_SPEED
 1845              		.section	.data.RIGHT_SPEED,"aw",%progbits
 1846              		.align	1
 1847              		.set	.LANCHOR1,. + 0
 1850              	RIGHT_SPEED:
 1851 0000 C8AF     		.short	-20536
 1852              		.section	.data.LEFT_SPEED,"aw",%progbits
 1853              		.align	1
 1854              		.set	.LANCHOR0,. + 0
 1857              	LEFT_SPEED:
 1858 0000 409C     		.short	-25536
 1859              		.section	.rodata.str1.4,"aMS",%progbits,1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 47


 1860              		.align	2
 1861              	.LC0:
 1862 0000 25642E25 		.ascii	"%d.%d\012\000"
 1862      640A00
 1863 0007 00       		.space	1
 1864              	.LC1:
 1865 0008 25642E25 		.ascii	"%d.%d\000"
 1865      6400
 1866 000e 0000     		.space	2
 1867              	.LC2:
 1868 0010 53746172 		.ascii	"Starting\000"
 1868      74696E67 
 1868      00
 1869 0019 000000   		.space	3
 1870              	.LC3:
 1871 001c 256C7500 		.ascii	"%lu\000"
 1872              	.LC4:
 1873 0020 256400   		.ascii	"%d\000"
 1874 0023 00       		.space	1
 1875              	.LC5:
 1876 0024 5020256C 		.ascii	"P %lu\000"
 1876      7500
 1877 002a 0000     		.space	2
 1878              	.LC6:
 1879 002c 4420256C 		.ascii	"D %lu\000"
 1879      7500
 1880 0032 0000     		.space	2
 1881              	.LC7:
 1882 0034 4920256C 		.ascii	"I %lu\000"
 1882      7500
 1883 003a 0000     		.space	2
 1884              	.LC8:
 1885 003c 4C202575 		.ascii	"L %u\000"
 1885      00
 1886 0041 000000   		.space	3
 1887              	.LC9:
 1888 0044 52202575 		.ascii	"R %u\000"
 1888      00
 1889 0049 000000   		.space	3
 1890              	.LC10:
 1891 004c 636E7473 		.ascii	"cnts: %d\000"
 1891      3A202564 
 1891      00
 1892 0055 000000   		.space	3
 1893              	.LC11:
 1894 0058 766C7473 		.ascii	"vlts: %d.%d\000"
 1894      3A202564 
 1894      2E256400 
 1895              	.LC12:
 1896 0064 5069206E 		.ascii	"Pi nav\000"
 1896      617600
 1897 006b 00       		.space	1
 1898              	.LC13:
 1899 006c 4C473A20 		.ascii	"LG: %d.%d\000"
 1899      25642E25 
 1899      6400
 1900 0076 0000     		.space	2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 48


 1901              	.LC14:
 1902 0078 52473A20 		.ascii	"RG: %d.%d\000"
 1902      25642E25 
 1902      6400
 1903 0082 0000     		.space	2
 1904              	.LC15:
 1905 0084 4C533A20 		.ascii	"LS: %d\000"
 1905      256400
 1906 008b 00       		.space	1
 1907              	.LC16:
 1908 008c 52533A20 		.ascii	"RS: %d\000"
 1908      256400
 1909 0093 00       		.space	1
 1910              	.LC17:
 1911 0094 5372632F 		.ascii	"Src/main.c\000"
 1911      6D61696E 
 1911      2E6300
 1912              		.text
 1913              	.Letext0:
 1914              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1915              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 1916              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 1917              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 1918              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1919              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1920              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1921              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1922              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1923              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1924              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1925              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1926              		.file 14 "Inc/fonts.h"
 1927              		.file 15 "Inc/ssd1306.h"
 1928              		.file 16 "Inc/encoder.h"
 1929              		.file 17 "Inc/pid.h"
 1930              		.file 18 "Drivers/CMSIS/Include/core_cm4.h"
 1931              		.file 19 "Inc/adc.h"
 1932              		.file 20 "Inc/tim.h"
 1933              		.file 21 "Inc/usart.h"
 1934              		.file 22 "Inc/extern_vars.h"
 1935              		.file 23 "Inc/filter.h"
 1936              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1937              		.file 25 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 1938              		.file 26 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 1939              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1940              		.file 28 "Inc/gpio.h"
 1941              		.file 29 "Inc/dma.h"
 1942              		.file 30 "Inc/i2c.h"
 1943              		.file 31 "Inc/claw.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 49


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000003000 adc_values
                            *COM*:0000000000003000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:103    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:108    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:168    .text.alarm_detect:0000000000000050 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:177    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:182    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:229    .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:236    .text.frequency_comparison:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:241    .text.frequency_comparison:0000000000000000 frequency_comparison
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:442    .text.frequency_comparison:0000000000000138 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:454    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:459    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:772    .text.menu:00000000000001cc $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:789    .text.do_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:794    .text.do_pid:0000000000000000 do_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:950    .text.do_pid:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:959    .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:964    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1026   .text.set_motor_speed:0000000000000044 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1033   .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1038   .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1220   .text.turn:0000000000000118 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1235   .text.pi_navigation:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1240   .text.pi_navigation:0000000000000000 pi_navigation
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1349   .text.pi_navigation:00000000000000ac $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1359   .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1364   .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1541   .text.encoder_pid:0000000000000100 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1552   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1557   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1573   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1578   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1704   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1712   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1717   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1833   .text.main:0000000000000098 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1850   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1857   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1846   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1853   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s:1860   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccs4gnjk.s 			page 50


__aeabi_d2f
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
__aeabi_d2iz
__aeabi_i2d
sprintf
strlen
HAL_UART_Transmit
huart6
HAL_GPIO_ReadPin
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
pid_Init
htim1
pid_GetGain
__aeabi_f2d
__aeabi_d2uiz
PI_INT_STATE
update_encoder
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
htim4
htim5
htim3
