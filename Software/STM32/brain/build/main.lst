ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "filter.h"
  54:Src/main.c    **** #include "encoder.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** // #include <String.h>
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END Includes */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** uint8_t LEFT_SPEED;
  65:Src/main.c    **** uint8_t RIGHT_SPEED;
  66:Src/main.c    **** uint32_t adc_buffer[1];
  67:Src/main.c    **** uint32_t read_value[1];
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END PV */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  72:Src/main.c    **** void SystemClock_Config(void);
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE BEGIN PFP */
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void print(char msg[], int row);
  77:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]);
  78:Src/main.c    **** void do_pid(PID_t *pid_struct);
  79:Src/main.c    **** PID_t menu();
  80:Src/main.c    **** void frequency_detection(uint16_t freq1, uint16_t freq2);
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE END PFP */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE BEGIN 0 */
  85:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
  86:Src/main.c    **** {
  29              		.loc 1 86 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 3


  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  87:Src/main.c    ****     memcpy(read_value, adc_buffer, sizeof(adc_buffer));
  35              		.loc 1 87 0
  36 0000 024B     		ldr	r3, .L2
  37 0002 1A68     		ldr	r2, [r3]
  38 0004 024B     		ldr	r3, .L2+4
  39 0006 1A60     		str	r2, [r3]
  40 0008 7047     		bx	lr
  41              	.L3:
  42 000a 00BF     		.align	2
  43              	.L2:
  44 000c 00000000 		.word	adc_buffer
  45 0010 00000000 		.word	read_value
  46              		.cfi_endproc
  47              	.LFE123:
  49              		.section	.text.print,"ax",%progbits
  50              		.align	2
  51              		.global	print
  52              		.thumb
  53              		.thumb_func
  55              	print:
  56              	.LFB127:
  88:Src/main.c    ****     // IR_INT_STATE = FLAGGED;
  89:Src/main.c    **** }
  90:Src/main.c    **** /* USER CODE END 0 */
  91:Src/main.c    **** 
  92:Src/main.c    **** /**
  93:Src/main.c    ****   * @brief  The application entry point.
  94:Src/main.c    ****   *
  95:Src/main.c    ****   * @retval None
  96:Src/main.c    ****   */
  97:Src/main.c    **** int main(void)
  98:Src/main.c    **** {
  99:Src/main.c    ****   /* USER CODE BEGIN 1 */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE END 1 */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 106:Src/main.c    ****   HAL_Init();
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE BEGIN Init */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE END Init */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* Configure the system clock */
 113:Src/main.c    ****   SystemClock_Config();
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* USER CODE END SysInit */
 118:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 4


 119:Src/main.c    ****   /* Initialize all configured peripherals */
 120:Src/main.c    ****   MX_GPIO_Init();
 121:Src/main.c    ****   MX_DMA_Init();
 122:Src/main.c    ****   MX_TIM3_Init();
 123:Src/main.c    ****   MX_TIM5_Init();
 124:Src/main.c    ****   MX_TIM1_Init();
 125:Src/main.c    ****   MX_TIM2_Init();
 126:Src/main.c    ****   MX_USART6_UART_Init();
 127:Src/main.c    ****   MX_ADC1_Init();
 128:Src/main.c    ****   MX_I2C1_Init();
 129:Src/main.c    ****   MX_TIM4_Init();
 130:Src/main.c    ****   MX_TIM9_Init();
 131:Src/main.c    ****   /* USER CODE BEGIN 2 */
 132:Src/main.c    **** 
 133:Src/main.c    ****     /* Initialize all timer related stuffs*/
 134:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 135:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 136:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 137:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 138:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 139:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 140:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 141:Src/main.c    ****     ssd1306_Init();
 142:Src/main.c    **** 
 143:Src/main.c    ****     /* Initialize other stuffs*/
 144:Src/main.c    ****     // PID_t pid_s = menu();
 145:Src/main.c    ****     // HAL_Delay(100);
 146:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 147:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 148:Src/main.c    ****     //ENCODER_t LEFT_ENCODER = encoder_Init();
 149:Src/main.c    **** 
 150:Src/main.c    ****     /* declare external variables for use with interrupts*/
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* USER CODE END 2 */
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* Infinite loop */
 155:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 156:Src/main.c    ****   print("here we go!", 0);
 157:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc1, adc_buffer, 1);
 158:Src/main.c    **** 
 159:Src/main.c    ****   HAL_Delay(100);
 160:Src/main.c    ****     while (1)
 161:Src/main.c    ****     {
 162:Src/main.c    ****         char msg[20] = "";
 163:Src/main.c    ****         sprintf(msg, "%d", (int)read_value[0]);
 164:Src/main.c    ****         print(msg, 0);
 165:Src/main.c    ****         // do_pid(&pid_s);
 166:Src/main.c    ****         // if (IR_INT_STATE == FLAGGED) {
 167:Src/main.c    ****             // frequency_detection(1000, 10000);
 168:Src/main.c    ****         //     IR_INT_STATE = FLAGGED;
 169:Src/main.c    ****         // }
 170:Src/main.c    ****         //sprintf(msg, "%d", (int)update_encoder(&LEFT_ENCODER, &htim4));
 171:Src/main.c    ****         //print(msg, 0);
 172:Src/main.c    ****   /* USER CODE END WHILE */
 173:Src/main.c    **** 
 174:Src/main.c    ****   /* USER CODE BEGIN 3 */
 175:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 5


 176:Src/main.c    ****     }
 177:Src/main.c    ****   /* USER CODE END 3 */
 178:Src/main.c    **** 
 179:Src/main.c    **** }
 180:Src/main.c    **** 
 181:Src/main.c    **** /**
 182:Src/main.c    ****   * @brief System Clock Configuration
 183:Src/main.c    ****   * @retval None
 184:Src/main.c    ****   */
 185:Src/main.c    **** void SystemClock_Config(void)
 186:Src/main.c    **** {
 187:Src/main.c    **** 
 188:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 189:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 190:Src/main.c    **** 
 191:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 192:Src/main.c    ****     */
 193:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 194:Src/main.c    **** 
 195:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 196:Src/main.c    **** 
 197:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 198:Src/main.c    ****     */
 199:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 200:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 201:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 202:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 203:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 204:Src/main.c    ****   {
 205:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 206:Src/main.c    ****   }
 207:Src/main.c    **** 
 208:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 209:Src/main.c    ****     */
 210:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 211:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 212:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 213:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 214:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 215:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 216:Src/main.c    **** 
 217:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 218:Src/main.c    ****   {
 219:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 220:Src/main.c    ****   }
 221:Src/main.c    **** 
 222:Src/main.c    ****     /**Configure the Systick interrupt time 
 223:Src/main.c    ****     */
 224:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 225:Src/main.c    **** 
 226:Src/main.c    ****     /**Configure the Systick 
 227:Src/main.c    ****     */
 228:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 229:Src/main.c    **** 
 230:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 231:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 232:Src/main.c    **** }
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 6


 233:Src/main.c    **** 
 234:Src/main.c    **** /* USER CODE BEGIN 4 */
 235:Src/main.c    **** 
 236:Src/main.c    **** void frequency_detection(uint16_t freq1, uint16_t freq2){
 237:Src/main.c    ****     // HAL_ADC_Start_DMA(&hadc1, adc_buffer, 1024);
 238:Src/main.c    ****     // HAL_ADC_Stop_DMA(&hadc1);
 239:Src/main.c    ****     // IR_INT_STATE = NOT_FLAGGED;
 240:Src/main.c    ****     // HAL_Delay(3 * (14 + 10));
 241:Src/main.c    ****     // HAL_ADC_Stop_DMA(&hadc1);
 242:Src/main.c    ****     char msg[20] = "";
 243:Src/main.c    ****     double val = goertzel(read_value, 12121, freq1, 1024);
 244:Src/main.c    ****     int predec = (int)(val / 1);
 245:Src/main.c    ****     int postdec = (int)((val - predec) * 1000);
 246:Src/main.c    ****     sprintf(msg, "%d.%d", predec, postdec);
 247:Src/main.c    ****     print(msg, 0);
 248:Src/main.c    **** 
 249:Src/main.c    ****     // val = goertzel(read_value, 24242, freq2, 1024);
 250:Src/main.c    ****     // predec = (int)(val / 1);
 251:Src/main.c    ****     // postdec = (int)((val - predec) * 1000);
 252:Src/main.c    ****     // sprintf(msg, "%d.%d", predec, postdec);
 253:Src/main.c    ****     // print(msg, 1);
 254:Src/main.c    ****     // HAL_ADC_Start_DMA(&hadc1, adc_buffer, 1024);
 255:Src/main.c    **** }
 256:Src/main.c    **** 
 257:Src/main.c    **** /*
 258:Src/main.c    ****  * Rows from 0 - 6
 259:Src/main.c    ****  * Reset screen when printing from row 0
 260:Src/main.c    ****  */
 261:Src/main.c    **** void print(char* msg, int row){
  57              		.loc 1 261 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              	.LVL1:
  62 0000 38B5     		push	{r3, r4, r5, lr}
  63              	.LCFI0:
  64              		.cfi_def_cfa_offset 16
  65              		.cfi_offset 3, -16
  66              		.cfi_offset 4, -12
  67              		.cfi_offset 5, -8
  68              		.cfi_offset 14, -4
  69 0002 0546     		mov	r5, r0
 262:Src/main.c    ****     if(row==0){
  70              		.loc 1 262 0
  71 0004 0C46     		mov	r4, r1
  72 0006 11B9     		cbnz	r1, .L5
 263:Src/main.c    ****         ssd1306_Fill(Black);
  73              		.loc 1 263 0
  74 0008 0020     		movs	r0, #0
  75              	.LVL2:
  76 000a FFF7FEFF 		bl	ssd1306_Fill
  77              	.LVL3:
  78              	.L5:
 264:Src/main.c    ****     }
 265:Src/main.c    ****     ssd1306_SetCursor(0,row*10);
  79              		.loc 1 265 0
  80 000e 04EB8404 		add	r4, r4, r4, lsl #2
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 7


  81              	.LVL4:
  82 0012 6100     		lsls	r1, r4, #1
  83 0014 0020     		movs	r0, #0
  84 0016 01F0FE01 		and	r1, r1, #254
  85 001a FFF7FEFF 		bl	ssd1306_SetCursor
  86              	.LVL5:
 266:Src/main.c    ****     ssd1306_WriteString(msg,Font_7x10,White);
  87              		.loc 1 266 0
  88 001e 054B     		ldr	r3, .L7
  89 0020 2846     		mov	r0, r5
  90 0022 93E80600 		ldmia	r3, {r1, r2}
  91 0026 0123     		movs	r3, #1
  92 0028 FFF7FEFF 		bl	ssd1306_WriteString
  93              	.LVL6:
 267:Src/main.c    ****     ssd1306_UpdateScreen();
  94              		.loc 1 267 0
  95 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
  96              	.LVL7:
  97 0030 38BD     		pop	{r3, r4, r5, pc}
  98              	.LVL8:
  99              	.L8:
 100 0032 00BF     		.align	2
 101              	.L7:
 102 0034 00000000 		.word	Font_7x10
 103              		.cfi_endproc
 104              	.LFE127:
 106              		.global	__aeabi_d2iz
 107              		.global	__aeabi_i2d
 108              		.global	__aeabi_dsub
 109              		.global	__aeabi_dmul
 110              		.section	.text.frequency_detection,"ax",%progbits
 111              		.align	2
 112              		.global	frequency_detection
 113              		.thumb
 114              		.thumb_func
 116              	frequency_detection:
 117              	.LFB126:
 236:Src/main.c    ****     // HAL_ADC_Start_DMA(&hadc1, adc_buffer, 1024);
 118              		.loc 1 236 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 24
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              	.LVL9:
 123 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 124              	.LCFI1:
 125              		.cfi_def_cfa_offset 20
 126              		.cfi_offset 4, -20
 127              		.cfi_offset 5, -16
 128              		.cfi_offset 6, -12
 129              		.cfi_offset 7, -8
 130              		.cfi_offset 14, -4
 131 0002 87B0     		sub	sp, sp, #28
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 48
 134 0004 0246     		mov	r2, r0
 242:Src/main.c    ****     double val = goertzel(read_value, 12121, freq1, 1024);
 135              		.loc 1 242 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 8


 136 0006 0024     		movs	r4, #0
 137 0008 0194     		str	r4, [sp, #4]
 138 000a 0294     		str	r4, [sp, #8]
 139 000c 0394     		str	r4, [sp, #12]
 140 000e 0494     		str	r4, [sp, #16]
 141 0010 0594     		str	r4, [sp, #20]
 243:Src/main.c    ****     int predec = (int)(val / 1);
 142              		.loc 1 243 0
 143 0012 1448     		ldr	r0, .L11
 144              	.LVL10:
 145 0014 42F65971 		movw	r1, #12121
 146              	.LVL11:
 147 0018 4FF48063 		mov	r3, #1024
 148 001c FFF7FEFF 		bl	goertzel
 149              	.LVL12:
 150 0020 57EC106B 		fmrrd	r6, r7, d0
 151              	.LVL13:
 244:Src/main.c    ****     int postdec = (int)((val - predec) * 1000);
 152              		.loc 1 244 0
 153 0024 10EE100A 		fmrs	r0, s0	@ int
 154 0028 3946     		mov	r1, r7
 155 002a FFF7FEFF 		bl	__aeabi_d2iz
 156              	.LVL14:
 157 002e 0546     		mov	r5, r0
 158              	.LVL15:
 245:Src/main.c    ****     sprintf(msg, "%d.%d", predec, postdec);
 159              		.loc 1 245 0
 160 0030 FFF7FEFF 		bl	__aeabi_i2d
 161              	.LVL16:
 162 0034 0246     		mov	r2, r0
 163 0036 0B46     		mov	r3, r1
 164 0038 3046     		mov	r0, r6
 165 003a 3946     		mov	r1, r7
 166 003c FFF7FEFF 		bl	__aeabi_dsub
 167              	.LVL17:
 168 0040 0022     		movs	r2, #0
 169 0042 094B     		ldr	r3, .L11+4
 170 0044 FFF7FEFF 		bl	__aeabi_dmul
 171              	.LVL18:
 172 0048 FFF7FEFF 		bl	__aeabi_d2iz
 173              	.LVL19:
 174 004c 0346     		mov	r3, r0
 175              	.LVL20:
 246:Src/main.c    ****     print(msg, 0);
 176              		.loc 1 246 0
 177 004e 01A8     		add	r0, sp, #4
 178              	.LVL21:
 179 0050 0649     		ldr	r1, .L11+8
 180 0052 2A46     		mov	r2, r5
 181 0054 FFF7FEFF 		bl	sprintf
 182              	.LVL22:
 247:Src/main.c    **** 
 183              		.loc 1 247 0
 184 0058 01A8     		add	r0, sp, #4
 185 005a 2146     		mov	r1, r4
 186 005c FFF7FEFF 		bl	print
 187              	.LVL23:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 9


 255:Src/main.c    **** 
 188              		.loc 1 255 0
 189 0060 07B0     		add	sp, sp, #28
 190              	.LCFI3:
 191              		.cfi_def_cfa_offset 20
 192              		@ sp needed
 193 0062 F0BD     		pop	{r4, r5, r6, r7, pc}
 194              	.LVL24:
 195              	.L12:
 196              		.align	2
 197              	.L11:
 198 0064 00000000 		.word	read_value
 199 0068 00408F40 		.word	1083129856
 200 006c 00000000 		.word	.LC0
 201              		.cfi_endproc
 202              	.LFE126:
 204              		.section	.text.menu,"ax",%progbits
 205              		.align	2
 206              		.global	menu
 207              		.thumb
 208              		.thumb_func
 210              	menu:
 211              	.LFB128:
 268:Src/main.c    **** }
 269:Src/main.c    **** 
 270:Src/main.c    **** PID_t menu(){
 212              		.loc 1 270 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 32
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              	.LVL25:
 217 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 218              	.LCFI4:
 219              		.cfi_def_cfa_offset 20
 220              		.cfi_offset 4, -20
 221              		.cfi_offset 5, -16
 222              		.cfi_offset 6, -12
 223              		.cfi_offset 7, -8
 224              		.cfi_offset 14, -4
 225 0002 8BB0     		sub	sp, sp, #44
 226              	.LCFI5:
 227              		.cfi_def_cfa_offset 64
 228 0004 0646     		mov	r6, r0
 271:Src/main.c    ****     print("Starting", 0);
 229              		.loc 1 271 0
 230 0006 6948     		ldr	r0, .L27
 231              	.LVL26:
 232 0008 0021     		movs	r1, #0
 233 000a FFF7FEFF 		bl	print
 234              	.LVL27:
 272:Src/main.c    ****     char msg[20] = "";
 235              		.loc 1 272 0
 236 000e 0025     		movs	r5, #0
 237 0010 0595     		str	r5, [sp, #20]
 238 0012 0695     		str	r5, [sp, #24]
 239 0014 0795     		str	r5, [sp, #28]
 240 0016 0895     		str	r5, [sp, #32]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 10


 241 0018 0995     		str	r5, [sp, #36]
 242              	.LVL28:
 273:Src/main.c    ****     int pid_select = 0;
 274:Src/main.c    ****     uint32_t values[3] = {0,0,0};
 243              		.loc 1 274 0
 244 001a 0295     		str	r5, [sp, #8]
 245 001c 0395     		str	r5, [sp, #12]
 246 001e 0495     		str	r5, [sp, #16]
 247              	.LVL29:
 248              	.L17:
 275:Src/main.c    ****     while(1){
 276:Src/main.c    ****         if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 249              		.loc 1 276 0
 250 0020 6348     		ldr	r0, .L27+4
 251 0022 4FF40051 		mov	r1, #8192
 252 0026 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 253              	.LVL30:
 254 002a 38BB     		cbnz	r0, .L14
 277:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 255              		.loc 1 277 0
 256 002c 0AAB     		add	r3, sp, #40
 257 002e 03EB8503 		add	r3, r3, r5, lsl #2
 258 0032 53F8204C 		ldr	r4, [r3, #-32]
 259 0036 05A8     		add	r0, sp, #20
 260 0038 5E49     		ldr	r1, .L27+8
 261 003a 2246     		mov	r2, r4
 262 003c FFF7FEFF 		bl	sprintf
 263              	.LVL31:
 278:Src/main.c    ****             print(msg, 0);
 264              		.loc 1 278 0
 265 0040 05A8     		add	r0, sp, #20
 266 0042 0021     		movs	r1, #0
 267 0044 FFF7FEFF 		bl	print
 268              	.LVL32:
 279:Src/main.c    ****             TIM4->CNT = values[pid_select];
 269              		.loc 1 279 0
 270 0048 5B4B     		ldr	r3, .L27+12
 271 004a 5C62     		str	r4, [r3, #36]
 280:Src/main.c    ****             while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 272              		.loc 1 280 0
 273 004c 0EE0     		b	.L15
 274              	.L16:
 281:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 275              		.loc 1 281 0
 276 004e 5A4B     		ldr	r3, .L27+12
 277 0050 5A6A     		ldr	r2, [r3, #36]
 278 0052 0AAB     		add	r3, sp, #40
 279 0054 03EB8503 		add	r3, r3, r5, lsl #2
 280 0058 43F8202C 		str	r2, [r3, #-32]
 282:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 281              		.loc 1 282 0
 282 005c 05A8     		add	r0, sp, #20
 283 005e 5549     		ldr	r1, .L27+8
 284 0060 FFF7FEFF 		bl	sprintf
 285              	.LVL33:
 283:Src/main.c    ****                 print(msg, 0);
 286              		.loc 1 283 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 11


 287 0064 05A8     		add	r0, sp, #20
 288 0066 0021     		movs	r1, #0
 289 0068 FFF7FEFF 		bl	print
 290              	.LVL34:
 291              	.L15:
 280:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 292              		.loc 1 280 0
 293 006c 5048     		ldr	r0, .L27+4
 294 006e 4FF40051 		mov	r1, #8192
 295 0072 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 296              	.LVL35:
 297 0076 0028     		cmp	r0, #0
 298 0078 E9D0     		beq	.L16
 284:Src/main.c    ****             }
 285:Src/main.c    ****             ++pid_select;
 299              		.loc 1 285 0
 300 007a 0135     		adds	r5, r5, #1
 301              	.LVL36:
 302              	.L14:
 286:Src/main.c    ****         }
 287:Src/main.c    ****         if(pid_select==3) break;
 303              		.loc 1 287 0
 304 007c 032D     		cmp	r5, #3
 305 007e CFD1     		bne	.L17
 306              	.L25:
 307              	.LVL37:
 308              	.LBB2:
 288:Src/main.c    ****     }
 289:Src/main.c    ****     while(1){
 290:Src/main.c    ****         int speed = 400;
 291:Src/main.c    ****         if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 309              		.loc 1 291 0
 310 0080 4B48     		ldr	r0, .L27+4
 311 0082 4FF40051 		mov	r1, #8192
 312 0086 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 313              	.LVL38:
 314 008a 0028     		cmp	r0, #0
 315 008c 43D1     		bne	.L18
 292:Src/main.c    ****             if(pid_select==3){
 316              		.loc 1 292 0
 317 008e 032D     		cmp	r5, #3
 318 0090 09D1     		bne	.L19
 293:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 319              		.loc 1 293 0
 320 0092 4A4C     		ldr	r4, .L27+16
 321 0094 2046     		mov	r0, r4
 322 0096 0021     		movs	r1, #0
 323 0098 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 324              	.LVL39:
 294:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 325              		.loc 1 294 0
 326 009c 2046     		mov	r0, r4
 327 009e 0821     		movs	r1, #8
 328 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 329              	.LVL40:
 330 00a4 08E0     		b	.L20
 331              	.L19:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 12


 295:Src/main.c    ****             }else{
 296:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 332              		.loc 1 296 0
 333 00a6 454C     		ldr	r4, .L27+16
 334 00a8 2046     		mov	r0, r4
 335 00aa 0021     		movs	r1, #0
 336 00ac FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 337              	.LVL41:
 297:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 338              		.loc 1 297 0
 339 00b0 2046     		mov	r0, r4
 340 00b2 0821     		movs	r1, #8
 341 00b4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 342              	.LVL42:
 343              	.L20:
 298:Src/main.c    ****             }
 299:Src/main.c    ****             sprintf(msg, "%d", speed);
 344              		.loc 1 299 0
 345 00b8 05A8     		add	r0, sp, #20
 346 00ba 4149     		ldr	r1, .L27+20
 347 00bc 4FF4C872 		mov	r2, #400
 348 00c0 FFF7FEFF 		bl	sprintf
 349              	.LVL43:
 300:Src/main.c    ****             print(msg, 0);
 350              		.loc 1 300 0
 351 00c4 05A8     		add	r0, sp, #20
 352 00c6 0021     		movs	r1, #0
 353 00c8 FFF7FEFF 		bl	print
 354              	.LVL44:
 301:Src/main.c    ****             TIM4->CNT = speed;
 355              		.loc 1 301 0
 356 00cc 4FF4C872 		mov	r2, #400
 357 00d0 394B     		ldr	r3, .L27+12
 358 00d2 5A62     		str	r2, [r3, #36]
 302:Src/main.c    ****             while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 359              		.loc 1 302 0
 360 00d4 17E0     		b	.L21
 361              	.LVL45:
 362              	.L24:
 303:Src/main.c    ****                 speed = TIM4->CNT;
 363              		.loc 1 303 0
 364 00d6 384B     		ldr	r3, .L27+12
 365 00d8 5C6A     		ldr	r4, [r3, #36]
 366              	.LVL46:
 304:Src/main.c    ****                 sprintf(msg, "%d", speed);
 367              		.loc 1 304 0
 368 00da 05A8     		add	r0, sp, #20
 369 00dc 3849     		ldr	r1, .L27+20
 370 00de 2246     		mov	r2, r4
 371 00e0 FFF7FEFF 		bl	sprintf
 372              	.LVL47:
 305:Src/main.c    ****                 print(msg, 0);
 373              		.loc 1 305 0
 374 00e4 05A8     		add	r0, sp, #20
 375 00e6 0021     		movs	r1, #0
 376 00e8 FFF7FEFF 		bl	print
 377              	.LVL48:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 13


 306:Src/main.c    ****                 if(pid_select==3){
 378              		.loc 1 306 0
 379 00ec 032D     		cmp	r5, #3
 380 00ee 05D1     		bne	.L22
 307:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 381              		.loc 1 307 0
 382 00f0 324B     		ldr	r3, .L27+16
 383 00f2 1B68     		ldr	r3, [r3]
 384 00f4 5C63     		str	r4, [r3, #52]
 308:Src/main.c    ****                     LEFT_SPEED = speed;
 385              		.loc 1 308 0
 386 00f6 334B     		ldr	r3, .L27+24
 387 00f8 1C70     		strb	r4, [r3]
 388 00fa 04E0     		b	.L21
 389              	.L22:
 309:Src/main.c    ****                 }else{
 310:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 390              		.loc 1 310 0
 391 00fc 2F4B     		ldr	r3, .L27+16
 392 00fe 1B68     		ldr	r3, [r3]
 393 0100 DC63     		str	r4, [r3, #60]
 311:Src/main.c    ****                     RIGHT_SPEED = speed;
 394              		.loc 1 311 0
 395 0102 314B     		ldr	r3, .L27+28
 396 0104 1C70     		strb	r4, [r3]
 397              	.LVL49:
 398              	.L21:
 302:Src/main.c    ****                 speed = TIM4->CNT;
 399              		.loc 1 302 0
 400 0106 2A48     		ldr	r0, .L27+4
 401 0108 4FF40051 		mov	r1, #8192
 402 010c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 403              	.LVL50:
 404 0110 0028     		cmp	r0, #0
 405 0112 E0D0     		beq	.L24
 312:Src/main.c    ****                 }
 313:Src/main.c    ****             }
 314:Src/main.c    ****             ++pid_select;
 406              		.loc 1 314 0
 407 0114 0135     		adds	r5, r5, #1
 408              	.LVL51:
 409              	.L18:
 315:Src/main.c    ****         }
 316:Src/main.c    ****         if(pid_select==5){
 410              		.loc 1 316 0
 411 0116 052D     		cmp	r5, #5
 412 0118 B2D1     		bne	.L25
 413              	.LBE2:
 317:Src/main.c    ****             break;
 318:Src/main.c    ****         }
 319:Src/main.c    ****     }
 320:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 414              		.loc 1 320 0
 415 011a 284C     		ldr	r4, .L27+16
 416 011c 2046     		mov	r0, r4
 417 011e 0021     		movs	r1, #0
 418 0120 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 14


 419              	.LVL52:
 321:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 420              		.loc 1 321 0
 421 0124 2046     		mov	r0, r4
 422 0126 0821     		movs	r1, #8
 423 0128 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 424              	.LVL53:
 322:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 425              		.loc 1 322 0
 426 012c 029F     		ldr	r7, [sp, #8]
 427 012e 05A8     		add	r0, sp, #20
 428 0130 2649     		ldr	r1, .L27+32
 429 0132 3A46     		mov	r2, r7
 430 0134 FFF7FEFF 		bl	sprintf
 431              	.LVL54:
 323:Src/main.c    ****     print(msg, 0);
 432              		.loc 1 323 0
 433 0138 05A8     		add	r0, sp, #20
 434 013a 0021     		movs	r1, #0
 435 013c FFF7FEFF 		bl	print
 436              	.LVL55:
 324:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 437              		.loc 1 324 0
 438 0140 039D     		ldr	r5, [sp, #12]
 439              	.LVL56:
 440 0142 05A8     		add	r0, sp, #20
 441 0144 2249     		ldr	r1, .L27+36
 442 0146 2A46     		mov	r2, r5
 443 0148 FFF7FEFF 		bl	sprintf
 444              	.LVL57:
 325:Src/main.c    ****     print(msg, 1);
 445              		.loc 1 325 0
 446 014c 05A8     		add	r0, sp, #20
 447 014e 0121     		movs	r1, #1
 448 0150 FFF7FEFF 		bl	print
 449              	.LVL58:
 326:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 450              		.loc 1 326 0
 451 0154 049C     		ldr	r4, [sp, #16]
 452 0156 05A8     		add	r0, sp, #20
 453 0158 1E49     		ldr	r1, .L27+40
 454 015a 2246     		mov	r2, r4
 455 015c FFF7FEFF 		bl	sprintf
 456              	.LVL59:
 327:Src/main.c    ****     print(msg, 2);
 457              		.loc 1 327 0
 458 0160 05A8     		add	r0, sp, #20
 459 0162 0221     		movs	r1, #2
 460 0164 FFF7FEFF 		bl	print
 461              	.LVL60:
 328:Src/main.c    ****     sprintf(msg, "L %d", LEFT_SPEED);
 462              		.loc 1 328 0
 463 0168 05A8     		add	r0, sp, #20
 464 016a 1B49     		ldr	r1, .L27+44
 465 016c 154B     		ldr	r3, .L27+24
 466 016e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 467 0170 FFF7FEFF 		bl	sprintf
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 15


 468              	.LVL61:
 329:Src/main.c    ****     print(msg, 3);
 469              		.loc 1 329 0
 470 0174 05A8     		add	r0, sp, #20
 471 0176 0321     		movs	r1, #3
 472 0178 FFF7FEFF 		bl	print
 473              	.LVL62:
 330:Src/main.c    ****     sprintf(msg, "R %d", RIGHT_SPEED);
 474              		.loc 1 330 0
 475 017c 05A8     		add	r0, sp, #20
 476 017e 1749     		ldr	r1, .L27+48
 477 0180 114B     		ldr	r3, .L27+28
 478 0182 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 479 0184 FFF7FEFF 		bl	sprintf
 480              	.LVL63:
 331:Src/main.c    ****     print(msg, 4);
 481              		.loc 1 331 0
 482 0188 05A8     		add	r0, sp, #20
 483 018a 0421     		movs	r1, #4
 484 018c FFF7FEFF 		bl	print
 485              	.LVL64:
 332:Src/main.c    ****     return pid_Init(values[0],values[1],values[2],5,1);
 486              		.loc 1 332 0
 487 0190 0523     		movs	r3, #5
 488 0192 0093     		str	r3, [sp]
 489 0194 0123     		movs	r3, #1
 490 0196 0193     		str	r3, [sp, #4]
 491 0198 3046     		mov	r0, r6
 492 019a 3946     		mov	r1, r7
 493 019c 2A46     		mov	r2, r5
 494 019e 2346     		mov	r3, r4
 495 01a0 FFF7FEFF 		bl	pid_Init
 496              	.LVL65:
 333:Src/main.c    **** }
 497              		.loc 1 333 0
 498 01a4 3046     		mov	r0, r6
 499 01a6 0BB0     		add	sp, sp, #44
 500              	.LCFI6:
 501              		.cfi_def_cfa_offset 20
 502              		@ sp needed
 503 01a8 F0BD     		pop	{r4, r5, r6, r7, pc}
 504              	.LVL66:
 505              	.L28:
 506 01aa 00BF     		.align	2
 507              	.L27:
 508 01ac 08000000 		.word	.LC1
 509 01b0 00080240 		.word	1073874944
 510 01b4 14000000 		.word	.LC2
 511 01b8 00080040 		.word	1073743872
 512 01bc 00000000 		.word	htim1
 513 01c0 18000000 		.word	.LC3
 514 01c4 00000000 		.word	LEFT_SPEED
 515 01c8 00000000 		.word	RIGHT_SPEED
 516 01cc 1C000000 		.word	.LC4
 517 01d0 24000000 		.word	.LC5
 518 01d4 2C000000 		.word	.LC6
 519 01d8 34000000 		.word	.LC7
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 16


 520 01dc 3C000000 		.word	.LC8
 521              		.cfi_endproc
 522              	.LFE128:
 524              		.section	.text.do_pid,"ax",%progbits
 525              		.align	2
 526              		.global	do_pid
 527              		.thumb
 528              		.thumb_func
 530              	do_pid:
 531              	.LFB129:
 334:Src/main.c    **** 
 335:Src/main.c    **** void do_pid(PID_t *pid_struct){
 532              		.loc 1 335 0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 0
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 536              	.LVL67:
 537 0000 70B5     		push	{r4, r5, r6, lr}
 538              	.LCFI7:
 539              		.cfi_def_cfa_offset 16
 540              		.cfi_offset 4, -16
 541              		.cfi_offset 5, -12
 542              		.cfi_offset 6, -8
 543              		.cfi_offset 14, -4
 544 0002 0646     		mov	r6, r0
 336:Src/main.c    ****     /* Read sensors */
 337:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin)? 0 : 1;
 545              		.loc 1 337 0
 546 0004 274D     		ldr	r5, .L38
 547 0006 2846     		mov	r0, r5
 548              	.LVL68:
 549 0008 4FF48041 		mov	r1, #16384
 550 000c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 551              	.LVL69:
 552 0010 B0FA80F4 		clz	r4, r0
 553 0014 6409     		lsrs	r4, r4, #5
 554              	.LVL70:
 338:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin)? 0 : 1;
 555              		.loc 1 338 0
 556 0016 2846     		mov	r0, r5
 557 0018 4FF40041 		mov	r1, #32768
 558 001c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 559              	.LVL71:
 560 0020 B0FA80F0 		clz	r0, r0
 561 0024 4009     		lsrs	r0, r0, #5
 562              	.LVL72:
 339:Src/main.c    **** 
 340:Src/main.c    ****     /* Get error */
 341:Src/main.c    ****     if(left && right){ pid_struct->err = 0; }
 563              		.loc 1 341 0
 564 0026 1CB1     		cbz	r4, .L30
 565              		.loc 1 341 0 is_stmt 0 discriminator 1
 566 0028 10B1     		cbz	r0, .L30
 567              		.loc 1 341 0 discriminator 2
 568 002a 0023     		movs	r3, #0
 569 002c 3362     		str	r3, [r6, #32]
 570 002e 1AE0     		b	.L31
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 17


 571              	.L30:
 342:Src/main.c    ****     else if(left && !right){ pid_struct->err = 1; }
 572              		.loc 1 342 0 is_stmt 1
 573 0030 1CB1     		cbz	r4, .L32
 574              		.loc 1 342 0 is_stmt 0 discriminator 1
 575 0032 10B9     		cbnz	r0, .L32
 576              		.loc 1 342 0 discriminator 2
 577 0034 0123     		movs	r3, #1
 578 0036 3362     		str	r3, [r6, #32]
 579 0038 15E0     		b	.L31
 580              	.L32:
 343:Src/main.c    ****     else if(!left && right){ pid_struct->err = -1; }
 581              		.loc 1 343 0 is_stmt 1
 582 003a 24B9     		cbnz	r4, .L33
 583              		.loc 1 343 0 is_stmt 0 discriminator 1
 584 003c 18B1     		cbz	r0, .L33
 585              		.loc 1 343 0 discriminator 2
 586 003e 4FF0FF33 		mov	r3, #-1
 587 0042 3362     		str	r3, [r6, #32]
 588 0044 0FE0     		b	.L31
 589              	.L33:
 344:Src/main.c    ****     else if(!left && !right && (pid_struct->err < 0)){ pid_struct->err = -5; }
 590              		.loc 1 344 0 is_stmt 1
 591 0046 3CB9     		cbnz	r4, .L34
 592              		.loc 1 344 0 is_stmt 0 discriminator 1
 593 0048 30B9     		cbnz	r0, .L34
 594              		.loc 1 344 0 discriminator 2
 595 004a 336A     		ldr	r3, [r6, #32]
 596 004c 002B     		cmp	r3, #0
 597 004e 03DA     		bge	.L34
 598              		.loc 1 344 0 discriminator 3
 599 0050 6FF00403 		mvn	r3, #4
 600 0054 3362     		str	r3, [r6, #32]
 601 0056 06E0     		b	.L31
 602              	.L34:
 345:Src/main.c    ****     else if(!left && !right && (pid_struct->err > 0)){ pid_struct->err = 5; }
 603              		.loc 1 345 0 is_stmt 1
 604 0058 2CB9     		cbnz	r4, .L31
 605              		.loc 1 345 0 is_stmt 0 discriminator 1
 606 005a 20B9     		cbnz	r0, .L31
 607              		.loc 1 345 0 discriminator 2
 608 005c 336A     		ldr	r3, [r6, #32]
 609 005e 002B     		cmp	r3, #0
 610 0060 01DD     		ble	.L31
 611              		.loc 1 345 0 discriminator 3
 612 0062 0523     		movs	r3, #5
 613 0064 3362     		str	r3, [r6, #32]
 614              	.L31:
 346:Src/main.c    **** 
 347:Src/main.c    ****     /* Get gain */
 348:Src/main.c    ****     double gain = pid_GetGain(pid_struct, &htim9);
 615              		.loc 1 348 0 is_stmt 1
 616 0066 3046     		mov	r0, r6
 617              	.LVL73:
 618 0068 0F49     		ldr	r1, .L38+4
 619 006a FFF7FEFF 		bl	pid_GetGain
 620              	.LVL74:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 18


 349:Src/main.c    ****     int g = (int) gain;
 621              		.loc 1 349 0
 622 006e 51EC100B 		fmrrd	r0, r1, d0
 623 0072 FFF7FEFF 		bl	__aeabi_d2iz
 624              	.LVL75:
 350:Src/main.c    **** 
 351:Src/main.c    ****     /* Set Motor Speeds*/
 352:Src/main.c    ****     if(g<0){
 625              		.loc 1 352 0
 626 0076 0028     		cmp	r0, #0
 627 0078 04DA     		bge	.L35
 353:Src/main.c    ****         LEFT_SPEED -= g;
 628              		.loc 1 353 0
 629 007a 0C4A     		ldr	r2, .L38+8
 630 007c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 631 007e 181A     		subs	r0, r3, r0
 632              	.LVL76:
 633 0080 1070     		strb	r0, [r2]
 634 0082 05E0     		b	.L36
 635              	.LVL77:
 636              	.L35:
 354:Src/main.c    ****     }else if(g>0){
 637              		.loc 1 354 0
 638 0084 0028     		cmp	r0, #0
 639 0086 03DD     		ble	.L36
 355:Src/main.c    ****         RIGHT_SPEED += g;
 640              		.loc 1 355 0
 641 0088 094A     		ldr	r2, .L38+12
 642 008a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 643 008c 1844     		add	r0, r0, r3
 644              	.LVL78:
 645 008e 1070     		strb	r0, [r2]
 646              	.L36:
 356:Src/main.c    ****     }
 357:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LEFT_SPEED);
 647              		.loc 1 357 0
 648 0090 084B     		ldr	r3, .L38+16
 649 0092 1B68     		ldr	r3, [r3]
 650 0094 054A     		ldr	r2, .L38+8
 651 0096 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 652 0098 5A63     		str	r2, [r3, #52]
 358:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, RIGHT_SPEED);
 653              		.loc 1 358 0
 654 009a 054A     		ldr	r2, .L38+12
 655 009c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 656 009e DA63     		str	r2, [r3, #60]
 657 00a0 70BD     		pop	{r4, r5, r6, pc}
 658              	.LVL79:
 659              	.L39:
 660 00a2 00BF     		.align	2
 661              	.L38:
 662 00a4 00040240 		.word	1073873920
 663 00a8 00000000 		.word	htim9
 664 00ac 00000000 		.word	LEFT_SPEED
 665 00b0 00000000 		.word	RIGHT_SPEED
 666 00b4 00000000 		.word	htim1
 667              		.cfi_endproc
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 19


 668              	.LFE129:
 670              		.global	__aeabi_ui2d
 671              		.global	__aeabi_ddiv
 672              		.global	__aeabi_d2uiz
 673              		.section	.text.update_motor_speed,"ax",%progbits
 674              		.align	2
 675              		.global	update_motor_speed
 676              		.thumb
 677              		.thumb_func
 679              	update_motor_speed:
 680              	.LFB130:
 359:Src/main.c    **** }
 360:Src/main.c    **** 
 361:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]){
 681              		.loc 1 361 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 24
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              	.LVL80:
 686 0000 30B5     		push	{r4, r5, lr}
 687              	.LCFI8:
 688              		.cfi_def_cfa_offset 12
 689              		.cfi_offset 4, -12
 690              		.cfi_offset 5, -8
 691              		.cfi_offset 14, -4
 692 0002 87B0     		sub	sp, sp, #28
 693              	.LCFI9:
 694              		.cfi_def_cfa_offset 40
 695 0004 0D46     		mov	r5, r1
 362:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[0]/100.0*MOTOR_SPEED);
 696              		.loc 1 362 0
 697 0006 1C4B     		ldr	r3, .L42
 698 0008 1C68     		ldr	r4, [r3]
 699 000a 0868     		ldr	r0, [r1]
 700              	.LVL81:
 701 000c FFF7FEFF 		bl	__aeabi_ui2d
 702              	.LVL82:
 703 0010 0022     		movs	r2, #0
 704 0012 1A4B     		ldr	r3, .L42+4
 705 0014 FFF7FEFF 		bl	__aeabi_ddiv
 706              	.LVL83:
 707 0018 0022     		movs	r2, #0
 708 001a 194B     		ldr	r3, .L42+8
 709 001c FFF7FEFF 		bl	__aeabi_dmul
 710              	.LVL84:
 711 0020 FFF7FEFF 		bl	__aeabi_d2uiz
 712              	.LVL85:
 713 0024 6063     		str	r0, [r4, #52]
 363:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[1]/100.0*MOTOR_SPEED);
 714              		.loc 1 363 0
 715 0026 6868     		ldr	r0, [r5, #4]
 716 0028 FFF7FEFF 		bl	__aeabi_ui2d
 717              	.LVL86:
 718 002c 0022     		movs	r2, #0
 719 002e 134B     		ldr	r3, .L42+4
 720 0030 FFF7FEFF 		bl	__aeabi_ddiv
 721              	.LVL87:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 20


 722 0034 0022     		movs	r2, #0
 723 0036 124B     		ldr	r3, .L42+8
 724 0038 FFF7FEFF 		bl	__aeabi_dmul
 725              	.LVL88:
 726 003c FFF7FEFF 		bl	__aeabi_d2uiz
 727              	.LVL89:
 728 0040 E063     		str	r0, [r4, #60]
 364:Src/main.c    ****     char msg[20] = "";
 729              		.loc 1 364 0
 730 0042 0024     		movs	r4, #0
 731 0044 0194     		str	r4, [sp, #4]
 732 0046 0294     		str	r4, [sp, #8]
 733 0048 0394     		str	r4, [sp, #12]
 734 004a 0494     		str	r4, [sp, #16]
 735 004c 0594     		str	r4, [sp, #20]
 365:Src/main.c    ****     sprintf(msg, "L: %lu", speed[0]);
 736              		.loc 1 365 0
 737 004e 01A8     		add	r0, sp, #4
 738 0050 0C49     		ldr	r1, .L42+12
 739 0052 2A68     		ldr	r2, [r5]
 740 0054 FFF7FEFF 		bl	sprintf
 741              	.LVL90:
 366:Src/main.c    ****     print(msg, 0);
 742              		.loc 1 366 0
 743 0058 01A8     		add	r0, sp, #4
 744 005a 2146     		mov	r1, r4
 745 005c FFF7FEFF 		bl	print
 746              	.LVL91:
 367:Src/main.c    ****     sprintf(msg, "R: %lu", speed[1]);
 747              		.loc 1 367 0
 748 0060 01A8     		add	r0, sp, #4
 749 0062 0949     		ldr	r1, .L42+16
 750 0064 6A68     		ldr	r2, [r5, #4]
 751 0066 FFF7FEFF 		bl	sprintf
 752              	.LVL92:
 368:Src/main.c    ****     print(msg, 1);
 753              		.loc 1 368 0
 754 006a 01A8     		add	r0, sp, #4
 755 006c 0121     		movs	r1, #1
 756 006e FFF7FEFF 		bl	print
 757              	.LVL93:
 369:Src/main.c    **** }
 758              		.loc 1 369 0
 759 0072 07B0     		add	sp, sp, #28
 760              	.LCFI10:
 761              		.cfi_def_cfa_offset 12
 762              		@ sp needed
 763 0074 30BD     		pop	{r4, r5, pc}
 764              	.LVL94:
 765              	.L43:
 766 0076 00BF     		.align	2
 767              	.L42:
 768 0078 00000000 		.word	htim1
 769 007c 00005940 		.word	1079574528
 770 0080 00408F40 		.word	1083129856
 771 0084 44000000 		.word	.LC9
 772 0088 4C000000 		.word	.LC10
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 21


 773              		.cfi_endproc
 774              	.LFE130:
 776              		.section	.text._Error_Handler,"ax",%progbits
 777              		.align	2
 778              		.global	_Error_Handler
 779              		.thumb
 780              		.thumb_func
 782              	_Error_Handler:
 783              	.LFB131:
 370:Src/main.c    **** /* USER CODE END 4 */
 371:Src/main.c    **** 
 372:Src/main.c    **** /**
 373:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 374:Src/main.c    ****   * @param  file: The file name as string.
 375:Src/main.c    ****   * @param  line: The line in file as a number.
 376:Src/main.c    ****   * @retval None
 377:Src/main.c    ****   */
 378:Src/main.c    **** void _Error_Handler(char *file, int line)
 379:Src/main.c    **** {
 784              		.loc 1 379 0
 785              		.cfi_startproc
 786              		@ Volatile: function does not return.
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              		@ link register save eliminated.
 790              	.LVL95:
 791              	.L45:
 380:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 381:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 382:Src/main.c    ****     while(1)
 383:Src/main.c    ****     {
 384:Src/main.c    ****     }
 792              		.loc 1 384 0 discriminator 1
 793 0000 FEE7     		b	.L45
 794              		.cfi_endproc
 795              	.LFE131:
 797 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 798              		.align	2
 799              		.global	SystemClock_Config
 800              		.thumb
 801              		.thumb_func
 803              	SystemClock_Config:
 804              	.LFB125:
 186:Src/main.c    **** 
 805              		.loc 1 186 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 80
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809 0000 00B5     		push	{lr}
 810              	.LCFI11:
 811              		.cfi_def_cfa_offset 4
 812              		.cfi_offset 14, -4
 813 0002 95B0     		sub	sp, sp, #84
 814              	.LCFI12:
 815              		.cfi_def_cfa_offset 88
 816              	.LBB3:
 193:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 22


 817              		.loc 1 193 0
 818 0004 0022     		movs	r2, #0
 819 0006 0192     		str	r2, [sp, #4]
 820 0008 244B     		ldr	r3, .L50
 821 000a 196C     		ldr	r1, [r3, #64]
 822 000c 41F08051 		orr	r1, r1, #268435456
 823 0010 1964     		str	r1, [r3, #64]
 824 0012 1B6C     		ldr	r3, [r3, #64]
 825 0014 03F08053 		and	r3, r3, #268435456
 826 0018 0193     		str	r3, [sp, #4]
 827 001a 019B     		ldr	r3, [sp, #4]
 828              	.LBE3:
 829              	.LBB4:
 195:Src/main.c    **** 
 830              		.loc 1 195 0
 831 001c 0292     		str	r2, [sp, #8]
 832 001e 2049     		ldr	r1, .L50+4
 833 0020 0B68     		ldr	r3, [r1]
 834 0022 23F44043 		bic	r3, r3, #49152
 835 0026 43F40043 		orr	r3, r3, #32768
 836 002a 0B60     		str	r3, [r1]
 837 002c 0B68     		ldr	r3, [r1]
 838 002e 03F44043 		and	r3, r3, #49152
 839 0032 0293     		str	r3, [sp, #8]
 840 0034 029B     		ldr	r3, [sp, #8]
 841              	.LBE4:
 199:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 842              		.loc 1 199 0
 843 0036 0223     		movs	r3, #2
 844 0038 0893     		str	r3, [sp, #32]
 200:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 845              		.loc 1 200 0
 846 003a 0123     		movs	r3, #1
 847 003c 0B93     		str	r3, [sp, #44]
 201:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 848              		.loc 1 201 0
 849 003e 1023     		movs	r3, #16
 850 0040 0C93     		str	r3, [sp, #48]
 202:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 851              		.loc 1 202 0
 852 0042 0E92     		str	r2, [sp, #56]
 203:Src/main.c    ****   {
 853              		.loc 1 203 0
 854 0044 08A8     		add	r0, sp, #32
 855 0046 FFF7FEFF 		bl	HAL_RCC_OscConfig
 856              	.LVL96:
 857 004a 18B1     		cbz	r0, .L47
 205:Src/main.c    ****   }
 858              		.loc 1 205 0
 859 004c 1548     		ldr	r0, .L50+8
 860 004e CD21     		movs	r1, #205
 861 0050 FFF7FEFF 		bl	_Error_Handler
 862              	.LVL97:
 863              	.L47:
 210:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 864              		.loc 1 210 0
 865 0054 0F23     		movs	r3, #15
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 23


 866 0056 0393     		str	r3, [sp, #12]
 212:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 867              		.loc 1 212 0
 868 0058 0021     		movs	r1, #0
 869 005a 0491     		str	r1, [sp, #16]
 213:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 870              		.loc 1 213 0
 871 005c 0591     		str	r1, [sp, #20]
 214:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 872              		.loc 1 214 0
 873 005e 0691     		str	r1, [sp, #24]
 215:Src/main.c    **** 
 874              		.loc 1 215 0
 875 0060 0791     		str	r1, [sp, #28]
 217:Src/main.c    ****   {
 876              		.loc 1 217 0
 877 0062 03A8     		add	r0, sp, #12
 878 0064 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 879              	.LVL98:
 880 0068 18B1     		cbz	r0, .L48
 219:Src/main.c    ****   }
 881              		.loc 1 219 0
 882 006a 0E48     		ldr	r0, .L50+8
 883 006c DB21     		movs	r1, #219
 884 006e FFF7FEFF 		bl	_Error_Handler
 885              	.LVL99:
 886              	.L48:
 224:Src/main.c    **** 
 887              		.loc 1 224 0
 888 0072 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 889              	.LVL100:
 890 0076 0C4B     		ldr	r3, .L50+12
 891 0078 A3FB0030 		umull	r3, r0, r3, r0
 892 007c 8009     		lsrs	r0, r0, #6
 893 007e FFF7FEFF 		bl	HAL_SYSTICK_Config
 894              	.LVL101:
 228:Src/main.c    **** 
 895              		.loc 1 228 0
 896 0082 0420     		movs	r0, #4
 897 0084 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 898              	.LVL102:
 231:Src/main.c    **** }
 899              		.loc 1 231 0
 900 0088 4FF0FF30 		mov	r0, #-1
 901 008c 0021     		movs	r1, #0
 902 008e 0A46     		mov	r2, r1
 903 0090 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 904              	.LVL103:
 232:Src/main.c    **** 
 905              		.loc 1 232 0
 906 0094 15B0     		add	sp, sp, #84
 907              	.LCFI13:
 908              		.cfi_def_cfa_offset 4
 909              		@ sp needed
 910 0096 5DF804FB 		ldr	pc, [sp], #4
 911              	.L51:
 912 009a 00BF     		.align	2
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 24


 913              	.L50:
 914 009c 00380240 		.word	1073887232
 915 00a0 00700040 		.word	1073770496
 916 00a4 54000000 		.word	.LC11
 917 00a8 D34D6210 		.word	274877907
 918              		.cfi_endproc
 919              	.LFE125:
 921              		.section	.text.main,"ax",%progbits
 922              		.align	2
 923              		.global	main
 924              		.thumb
 925              		.thumb_func
 927              	main:
 928              	.LFB124:
  98:Src/main.c    ****   /* USER CODE BEGIN 1 */
 929              		.loc 1 98 0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 24
 932              		@ frame_needed = 0, uses_anonymous_args = 0
 933 0000 10B5     		push	{r4, lr}
 934              	.LCFI14:
 935              		.cfi_def_cfa_offset 8
 936              		.cfi_offset 4, -8
 937              		.cfi_offset 14, -4
 938 0002 86B0     		sub	sp, sp, #24
 939              	.LCFI15:
 940              		.cfi_def_cfa_offset 32
 106:Src/main.c    **** 
 941              		.loc 1 106 0
 942 0004 FFF7FEFF 		bl	HAL_Init
 943              	.LVL104:
 113:Src/main.c    **** 
 944              		.loc 1 113 0
 945 0008 FFF7FEFF 		bl	SystemClock_Config
 946              	.LVL105:
 120:Src/main.c    ****   MX_DMA_Init();
 947              		.loc 1 120 0
 948 000c FFF7FEFF 		bl	MX_GPIO_Init
 949              	.LVL106:
 121:Src/main.c    ****   MX_TIM3_Init();
 950              		.loc 1 121 0
 951 0010 FFF7FEFF 		bl	MX_DMA_Init
 952              	.LVL107:
 122:Src/main.c    ****   MX_TIM5_Init();
 953              		.loc 1 122 0
 954 0014 FFF7FEFF 		bl	MX_TIM3_Init
 955              	.LVL108:
 123:Src/main.c    ****   MX_TIM1_Init();
 956              		.loc 1 123 0
 957 0018 FFF7FEFF 		bl	MX_TIM5_Init
 958              	.LVL109:
 124:Src/main.c    ****   MX_TIM2_Init();
 959              		.loc 1 124 0
 960 001c FFF7FEFF 		bl	MX_TIM1_Init
 961              	.LVL110:
 125:Src/main.c    ****   MX_USART6_UART_Init();
 962              		.loc 1 125 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 25


 963 0020 FFF7FEFF 		bl	MX_TIM2_Init
 964              	.LVL111:
 126:Src/main.c    ****   MX_ADC1_Init();
 965              		.loc 1 126 0
 966 0024 FFF7FEFF 		bl	MX_USART6_UART_Init
 967              	.LVL112:
 127:Src/main.c    ****   MX_I2C1_Init();
 968              		.loc 1 127 0
 969 0028 FFF7FEFF 		bl	MX_ADC1_Init
 970              	.LVL113:
 128:Src/main.c    ****   MX_TIM4_Init();
 971              		.loc 1 128 0
 972 002c FFF7FEFF 		bl	MX_I2C1_Init
 973              	.LVL114:
 129:Src/main.c    ****   MX_TIM9_Init();
 974              		.loc 1 129 0
 975 0030 FFF7FEFF 		bl	MX_TIM4_Init
 976              	.LVL115:
 130:Src/main.c    ****   /* USER CODE BEGIN 2 */
 977              		.loc 1 130 0
 978 0034 FFF7FEFF 		bl	MX_TIM9_Init
 979              	.LVL116:
 134:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 980              		.loc 1 134 0
 981 0038 1D48     		ldr	r0, .L55
 982 003a 1821     		movs	r1, #24
 983 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 984              	.LVL117:
 135:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 985              		.loc 1 135 0
 986 0040 1C48     		ldr	r0, .L55+4
 987 0042 1821     		movs	r1, #24
 988 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 989              	.LVL118:
 136:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 990              		.loc 1 136 0
 991 0048 1B4C     		ldr	r4, .L55+8
 992 004a 2046     		mov	r0, r4
 993 004c 0021     		movs	r1, #0
 994 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 995              	.LVL119:
 137:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 996              		.loc 1 137 0
 997 0052 2046     		mov	r0, r4
 998 0054 0821     		movs	r1, #8
 999 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1000              	.LVL120:
 138:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 1001              		.loc 1 138 0
 1002 005a 2046     		mov	r0, r4
 1003 005c 0021     		movs	r1, #0
 1004 005e FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1005              	.LVL121:
 139:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 1006              		.loc 1 139 0
 1007 0062 2046     		mov	r0, r4
 1008 0064 0821     		movs	r1, #8
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 26


 1009 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1010              	.LVL122:
 140:Src/main.c    ****     ssd1306_Init();
 1011              		.loc 1 140 0
 1012 006a 1448     		ldr	r0, .L55+12
 1013 006c FFF7FEFF 		bl	HAL_TIM_Base_Start
 1014              	.LVL123:
 141:Src/main.c    **** 
 1015              		.loc 1 141 0
 1016 0070 FFF7FEFF 		bl	ssd1306_Init
 1017              	.LVL124:
 156:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc1, adc_buffer, 1);
 1018              		.loc 1 156 0
 1019 0074 1248     		ldr	r0, .L55+16
 1020 0076 0021     		movs	r1, #0
 1021 0078 FFF7FEFF 		bl	print
 1022              	.LVL125:
 157:Src/main.c    **** 
 1023              		.loc 1 157 0
 1024 007c 1148     		ldr	r0, .L55+20
 1025 007e 1249     		ldr	r1, .L55+24
 1026 0080 0122     		movs	r2, #1
 1027 0082 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1028              	.LVL126:
 159:Src/main.c    ****     while (1)
 1029              		.loc 1 159 0
 1030 0086 6420     		movs	r0, #100
 1031 0088 FFF7FEFF 		bl	HAL_Delay
 1032              	.LVL127:
 1033              	.L53:
 1034              	.LBB5:
 162:Src/main.c    ****         sprintf(msg, "%d", (int)read_value[0]);
 1035              		.loc 1 162 0 discriminator 1
 1036 008c 0024     		movs	r4, #0
 1037 008e 0194     		str	r4, [sp, #4]
 1038 0090 0294     		str	r4, [sp, #8]
 1039 0092 0394     		str	r4, [sp, #12]
 1040 0094 0494     		str	r4, [sp, #16]
 1041 0096 0594     		str	r4, [sp, #20]
 163:Src/main.c    ****         print(msg, 0);
 1042              		.loc 1 163 0 discriminator 1
 1043 0098 01A8     		add	r0, sp, #4
 1044 009a 0C49     		ldr	r1, .L55+28
 1045 009c 0C4B     		ldr	r3, .L55+32
 1046 009e 1A68     		ldr	r2, [r3]
 1047 00a0 FFF7FEFF 		bl	sprintf
 1048              	.LVL128:
 164:Src/main.c    ****         // do_pid(&pid_s);
 1049              		.loc 1 164 0 discriminator 1
 1050 00a4 01A8     		add	r0, sp, #4
 1051 00a6 2146     		mov	r1, r4
 1052 00a8 FFF7FEFF 		bl	print
 1053              	.LVL129:
 1054              	.LBE5:
 176:Src/main.c    ****   /* USER CODE END 3 */
 1055              		.loc 1 176 0 discriminator 1
 1056 00ac EEE7     		b	.L53
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 27


 1057              	.L56:
 1058 00ae 00BF     		.align	2
 1059              	.L55:
 1060 00b0 00000000 		.word	htim4
 1061 00b4 00000000 		.word	htim5
 1062 00b8 00000000 		.word	htim1
 1063 00bc 00000000 		.word	htim9
 1064 00c0 60000000 		.word	.LC12
 1065 00c4 00000000 		.word	hadc1
 1066 00c8 00000000 		.word	adc_buffer
 1067 00cc 18000000 		.word	.LC3
 1068 00d0 00000000 		.word	read_value
 1069              		.cfi_endproc
 1070              	.LFE124:
 1072              		.comm	read_value,4,4
 1073              		.comm	adc_buffer,4,4
 1074              		.comm	RIGHT_SPEED,1,1
 1075              		.comm	LEFT_SPEED,1,1
 1076              		.comm	last_time,4,4
 1077              		.section	.rodata.str1.4,"aMS",%progbits,1
 1078              		.align	2
 1079              	.LC0:
 1080 0000 25642E25 		.ascii	"%d.%d\000"
 1080      6400
 1081 0006 0000     		.space	2
 1082              	.LC1:
 1083 0008 53746172 		.ascii	"Starting\000"
 1083      74696E67 
 1083      00
 1084 0011 000000   		.space	3
 1085              	.LC2:
 1086 0014 256C7500 		.ascii	"%lu\000"
 1087              	.LC3:
 1088 0018 256400   		.ascii	"%d\000"
 1089 001b 00       		.space	1
 1090              	.LC4:
 1091 001c 5020256C 		.ascii	"P %lu\000"
 1091      7500
 1092 0022 0000     		.space	2
 1093              	.LC5:
 1094 0024 4420256C 		.ascii	"D %lu\000"
 1094      7500
 1095 002a 0000     		.space	2
 1096              	.LC6:
 1097 002c 4920256C 		.ascii	"I %lu\000"
 1097      7500
 1098 0032 0000     		.space	2
 1099              	.LC7:
 1100 0034 4C202564 		.ascii	"L %d\000"
 1100      00
 1101 0039 000000   		.space	3
 1102              	.LC8:
 1103 003c 52202564 		.ascii	"R %d\000"
 1103      00
 1104 0041 000000   		.space	3
 1105              	.LC9:
 1106 0044 4C3A2025 		.ascii	"L: %lu\000"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 28


 1106      6C7500
 1107 004b 00       		.space	1
 1108              	.LC10:
 1109 004c 523A2025 		.ascii	"R: %lu\000"
 1109      6C7500
 1110 0053 00       		.space	1
 1111              	.LC11:
 1112 0054 5372632F 		.ascii	"Src/main.c\000"
 1112      6D61696E 
 1112      2E6300
 1113 005f 00       		.space	1
 1114              	.LC12:
 1115 0060 68657265 		.ascii	"here we go!\000"
 1115      20776520 
 1115      676F2100 
 1116              		.text
 1117              	.Letext0:
 1118              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1119              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 1120              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 1121              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1122              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1123              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1124              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1125              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1126              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1127              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1128              		.file 12 "Inc/fonts.h"
 1129              		.file 13 "Inc/ssd1306.h"
 1130              		.file 14 "Inc/pid.h"
 1131              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 1132              		.file 16 "Inc/adc.h"
 1133              		.file 17 "Inc/tim.h"
 1134              		.file 18 "<built-in>"
 1135              		.file 19 "Inc/filter.h"
 1136              		.file 20 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 1137              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1138              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1139              		.file 23 "Inc/gpio.h"
 1140              		.file 24 "Inc/dma.h"
 1141              		.file 25 "Inc/usart.h"
 1142              		.file 26 "Inc/i2c.h"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:44     .text.HAL_ADC_ConvCpltCallback:000000000000000c $d
                            *COM*:0000000000000004 adc_buffer
                            *COM*:0000000000000004 read_value
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:50     .text.print:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:55     .text.print:0000000000000000 print
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:102    .text.print:0000000000000034 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:111    .text.frequency_detection:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:116    .text.frequency_detection:0000000000000000 frequency_detection
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:198    .text.frequency_detection:0000000000000064 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:205    .text.menu:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:210    .text.menu:0000000000000000 menu
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:508    .text.menu:00000000000001ac $d
                            *COM*:0000000000000001 LEFT_SPEED
                            *COM*:0000000000000001 RIGHT_SPEED
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:525    .text.do_pid:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:530    .text.do_pid:0000000000000000 do_pid
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:662    .text.do_pid:00000000000000a4 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:674    .text.update_motor_speed:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:679    .text.update_motor_speed:0000000000000000 update_motor_speed
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:768    .text.update_motor_speed:0000000000000078 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:777    .text._Error_Handler:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:782    .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:798    .text.SystemClock_Config:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:803    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:914    .text.SystemClock_Config:000000000000009c $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:922    .text.main:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:927    .text.main:0000000000000000 main
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:1060   .text.main:00000000000000b0 $d
                            *COM*:0000000000000004 last_time
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s:1078   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
__aeabi_d2iz
__aeabi_i2d
__aeabi_dsub
__aeabi_dmul
goertzel
sprintf
HAL_GPIO_ReadPin
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
pid_Init
htim1
pid_GetGain
htim9
__aeabi_ui2d
__aeabi_ddiv
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccixbTqp.s 			page 30


__aeabi_d2uiz
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM5_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
HAL_TIM_Encoder_Start
HAL_TIM_Base_Start
ssd1306_Init
HAL_ADC_Start_DMA
HAL_Delay
htim4
htim5
hadc1
