ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** uint16_t LEFT_SPEED = 0.55 * MOTOR_SPEED;
  66:Src/main.c    **** uint16_t RIGHT_SPEED = 0.60 * MOTOR_SPEED;
  67:Src/main.c    **** uint32_t dma_buffer[3072];
  68:Src/main.c    **** uint32_t adc_values[3072];
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PV */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  73:Src/main.c    **** void SystemClock_Config(void);
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN PFP */
  76:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  77:Src/main.c    **** void print(char msg[], int row);
  78:Src/main.c    **** void do_pid(PID_t *pid_struct);
  79:Src/main.c    **** PID_t menu();
  80:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin);
  81:Src/main.c    **** void pi_navigation();
  82:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  83:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc);
  84:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  85:Src/main.c    **** void turn();
  86:Src/main.c    **** void turn_deg(uint8_t);
  87:Src/main.c    **** void alarm_detect();
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END PFP */
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE BEGIN 0 */
  92:Src/main.c    **** /**
  93:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
  94:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
  95:Src/main.c    ****  * Order of buffer: ir1, ir2, pi, ir1, ir2...
  96:Src/main.c    ****  */
  97:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
  98:Src/main.c    **** {
  29              		.loc 1 98 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  99:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 99 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF44052 		mov	r2, #12288
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB129:
 100:Src/main.c    **** }
 101:Src/main.c    **** /* USER CODE END 0 */
 102:Src/main.c    **** 
 103:Src/main.c    **** /**
 104:Src/main.c    ****   * @brief  The application entry point.
 105:Src/main.c    ****   *
 106:Src/main.c    ****   * @retval None
 107:Src/main.c    ****   */
 108:Src/main.c    **** int main(void)
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 4


 109:Src/main.c    **** {
 110:Src/main.c    ****     /* USER CODE BEGIN 1 */
 111:Src/main.c    **** 
 112:Src/main.c    ****     /* USER CODE END 1 */
 113:Src/main.c    **** 
 114:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 115:Src/main.c    **** 
 116:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 117:Src/main.c    ****     HAL_Init();
 118:Src/main.c    **** 
 119:Src/main.c    ****     /* USER CODE BEGIN Init */
 120:Src/main.c    **** 
 121:Src/main.c    ****     /* USER CODE END Init */
 122:Src/main.c    **** 
 123:Src/main.c    ****     /* Configure the system clock */
 124:Src/main.c    ****     SystemClock_Config();
 125:Src/main.c    **** 
 126:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 127:Src/main.c    **** 
 128:Src/main.c    ****     /* USER CODE END SysInit */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* Initialize all configured peripherals */
 131:Src/main.c    ****     MX_GPIO_Init();
 132:Src/main.c    ****     MX_DMA_Init();
 133:Src/main.c    ****     MX_TIM3_Init();
 134:Src/main.c    ****     MX_TIM1_Init();
 135:Src/main.c    ****     MX_TIM2_Init();
 136:Src/main.c    ****     MX_USART6_UART_Init();
 137:Src/main.c    ****     MX_ADC1_Init();
 138:Src/main.c    ****     MX_I2C1_Init();
 139:Src/main.c    ****     MX_TIM4_Init();
 140:Src/main.c    ****     MX_TIM9_Init();
 141:Src/main.c    ****     MX_TIM5_Init();
 142:Src/main.c    ****     /* USER CODE BEGIN 2 */
 143:Src/main.c    **** 
 144:Src/main.c    ****     /* Initialize peripherals */
 145:Src/main.c    ****     /* 
 146:Src/main.c    ****      * Claw jaw: TIM3 CH1
 147:Src/main.c    ****      * Claw arm: TIM3 CH2
 148:Src/main.c    ****      * Basket: TIM3 CH3
 149:Src/main.c    ****      * left forward: TIM1 CH1
 150:Src/main.c    ****      * left backward: TIM1 CH2
 151:Src/main.c    ****      * right forward: TIM1 CH3
 152:Src/main.c    ****      * right backward: TIM1 CH4
 153:Src/main.c    ****      * left encoder: TIM4
 154:Src/main.c    ****      * right encoderL TIM5
 155:Src/main.c    ****      * spare clocks: TIM2, TIM9
 156:Src/main.c    ****      */
 157:Src/main.c    **** 
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 159:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 5


 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 167:Src/main.c    **** 
 168:Src/main.c    ****     /* Initialize other stuffs */
 169:Src/main.c    ****     ssd1306_Init();
 170:Src/main.c    ****     print("Starting", 0);
 171:Src/main.c    ****     claw_init(&htim3);
 172:Src/main.c    ****     ///basket_init(&htim3);
 173:Src/main.c    **** 
 174:Src/main.c    ****     /*
 175:Src/main.c    ****     ENCODER_t left_enc = encoder_Init(TIM4);
 176:Src/main.c    ****     ENCODER_t right_enc = encoder_Init(TIM5);
 177:Src/main.c    ****     PID_t left_pid = pid_Init(5, 12, 0, 2, 2);
 178:Src/main.c    ****     PID_t right_pid = pid_Init(30, 25, 0, 2, 2);
 179:Src/main.c    ****     */
 180:Src/main.c    ****     uint8_t ewok_cnt = 0;
 181:Src/main.c    **** 
 182:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 183:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 184:Src/main.c    ****     // HAL_Delay(5000);
 185:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, 0);
 186:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, 0);
 187:Src/main.c    ****     /* Initially disabled IR, PI and Claw INT*/
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 189:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 190:Src/main.c    ****     // HAL_NVIC_EnableIRQ(EXTI1_IRQn); IR INT
 191:Src/main.c    ****     HAL_Delay(500);
 192:Src/main.c    ****     /* USER CODE END 2 */
 193:Src/main.c    **** 
 194:Src/main.c    ****     /* Infinite loop */
 195:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 196:Src/main.c    ****     while (1)
 197:Src/main.c    ****     {
 198:Src/main.c    ****         /*
 199:Src/main.c    ****          * Servo Stuff
 200:Src/main.c    ****          */
 201:Src/main.c    **** 
 202:Src/main.c    ****         /*
 203:Src/main.c    ****          * Drive Straight
 204:Src/main.c    ****          *
 205:Src/main.c    ****          encoder_pid(&left_pid, &left_enc, &right_pid, &right_enc);
 206:Src/main.c    ****          */
 207:Src/main.c    **** 
 208:Src/main.c    ****         /*
 209:Src/main.c    ****          * Pi Turning
 210:Src/main.c    ****          */
 211:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 212:Src/main.c    ****         {
 213:Src/main.c    ****             print("in pi int", 0);
 214:Src/main.c    ****             turn();
 215:Src/main.c    **** 
 216:Src/main.c    ****             // set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 217:Src/main.c    ****             // set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 218:Src/main.c    ****             // int start = HAL_GetTick();
 219:Src/main.c    ****             // while (HAL_GetTick() - start < 4000)
 220:Src/main.c    ****             // {
 221:Src/main.c    ****             //     // encoder_dist_pid(&left_pid);
 222:Src/main.c    ****             //     if (CLAW_INT_STATE == FLAGGED)
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 6


 223:Src/main.c    ****             //     {
 224:Src/main.c    ****             //         HAL_Delay(200);
 225:Src/main.c    ****             //         set_motor_speed(TIM_CHANNEL_1, 0);
 226:Src/main.c    ****             //         set_motor_speed(TIM_CHANNEL_3, 0);
 227:Src/main.c    ****             //         actuatengo(&htim2, TIM_CHANNEL_2, TIM_CHANNEL_3);
 228:Src/main.c    ****             //         CLAW_INT_STATE = NOT_FLAGGED;
 229:Src/main.c    ****             //         ++ewok_cnt;
 230:Src/main.c    ****             //         char msg[18] = "";
 231:Src/main.c    ****             //         sprintf(msg, "wok_cnt: %d", ewok_cnt);
 232:Src/main.c    ****             //         print(msg, 0);
 233:Src/main.c    ****             //         if (ewok_cnt == 1)
 234:Src/main.c    ****             //         {
 235:Src/main.c    ****             //             turn_deg(-120);
 236:Src/main.c    ****             //             arm_up_to_deg(&htim2, 80);
 237:Src/main.c    ****             //             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 238:Src/main.c    ****             //             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 239:Src/main.c    ****             //             HAL_Delay(3000);
 240:Src/main.c    ****             //             CLAW_INT_STATE = NOT_FLAGGED;
 241:Src/main.c    ****             //         }
 242:Src/main.c    ****             //         if (ewok_cnt == 2)
 243:Src/main.c    ****             //         {
 244:Src/main.c    ****             //             close_claw(&htim2);
 245:Src/main.c    ****             //             arm_up_to_deg(&htim2, 80);
 246:Src/main.c    ****             //             turn_deg(-120);
 247:Src/main.c    ****             //             alarm_detect();
 248:Src/main.c    ****             //             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 249:Src/main.c    ****             //             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 250:Src/main.c    ****             //             HAL_Delay(1000);
 251:Src/main.c    ****             //             CLAW_INT_STATE = NOT_FLAGGED;
 252:Src/main.c    ****             //         }
 253:Src/main.c    ****             //         break;
 254:Src/main.c    ****             //     }
 255:Src/main.c    ****             // }
 256:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 257:Src/main.c    ****             // set_motor_speed(TIM_CHANNEL_1, 0);
 258:Src/main.c    ****             // set_motor_speed(TIM_CHANNEL_3, 0);
 259:Src/main.c    ****         }
 260:Src/main.c    **** 
 261:Src/main.c    ****         /*
 262:Src/main.c    ****          * EDGE and Object detection
 263:Src/main.c    ****          *
 264:Src/main.c    ****          if(EDGE_RIGHT_STATE == FLAGGED){
 265:Src/main.c    ****          print("ER",0);
 266:Src/main.c    ****          EDGE_RIGHT_STATE = NOT_FLAGGED;
 267:Src/main.c    ****          }
 268:Src/main.c    ****          if(TAPE_RIGHT_STATE == FLAGGED){
 269:Src/main.c    ****          print("TR",0);
 270:Src/main.c    ****          TAPE_RIGHT_STATE = NOT_FLAGGED;
 271:Src/main.c    ****          }
 272:Src/main.c    ****          if(EDGE_LEFT_STATE == FLAGGED){
 273:Src/main.c    ****          print("EL",0);
 274:Src/main.c    ****          EDGE_LEFT_STATE = NOT_FLAGGED;
 275:Src/main.c    ****          }
 276:Src/main.c    **** 
 277:Src/main.c    ****          if(TAPE_LEFT_STATE == FLAGGED){
 278:Src/main.c    ****          print("TL",0);
 279:Src/main.c    ****          TAPE_LEFT_STATE = NOT_FLAGGED;
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 7


 280:Src/main.c    ****          }
 281:Src/main.c    ****          */
 282:Src/main.c    **** 
 283:Src/main.c    ****         /*
 284:Src/main.c    ****          * IR DETECTION
 285:Src/main.c    ****          */
 286:Src/main.c    ****         // print("preprint", 0);
 287:Src/main.c    ****         // if (IR_INT_STATE == FLAGGED)
 288:Src/main.c    ****         // {
 289:Src/main.c    ****         //     print("in ir int", 0);
 290:Src/main.c    ****         //     alarm_detect();
 291:Src/main.c    ****         //     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 292:Src/main.c    ****         //     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 293:Src/main.c    ****         //     //drive past sensor, enough so as to not trigger interrupt again
 294:Src/main.c    ****         //     HAL_Delay(2000);
 295:Src/main.c    ****         // }
 296:Src/main.c    **** 
 297:Src/main.c    ****         /* USER CODE END WHILE */
 298:Src/main.c    **** 
 299:Src/main.c    ****         /* USER CODE BEGIN 3 */
 300:Src/main.c    ****     }
 301:Src/main.c    ****     /* USER CODE END 3 */
 302:Src/main.c    **** }
 303:Src/main.c    **** 
 304:Src/main.c    **** /**
 305:Src/main.c    ****   * @brief System Clock Configuration
 306:Src/main.c    ****   * @retval None
 307:Src/main.c    ****   */
 308:Src/main.c    **** void SystemClock_Config(void)
 309:Src/main.c    **** {
 310:Src/main.c    **** 
 311:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 312:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 313:Src/main.c    **** 
 314:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 315:Src/main.c    ****     */
 316:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 317:Src/main.c    **** 
 318:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 319:Src/main.c    **** 
 320:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 321:Src/main.c    ****     */
 322:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 323:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 324:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 325:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 326:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 327:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 328:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 329:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 330:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 331:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 332:Src/main.c    ****     {
 333:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 334:Src/main.c    ****     }
 335:Src/main.c    **** 
 336:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 8


 337:Src/main.c    ****     */
 338:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 339:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 340:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 341:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 342:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 343:Src/main.c    **** 
 344:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 345:Src/main.c    ****     {
 346:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 347:Src/main.c    ****     }
 348:Src/main.c    **** 
 349:Src/main.c    ****     /**Configure the Systick interrupt time 
 350:Src/main.c    ****     */
 351:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 352:Src/main.c    **** 
 353:Src/main.c    ****     /**Configure the Systick 
 354:Src/main.c    ****     */
 355:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 356:Src/main.c    **** 
 357:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 358:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 359:Src/main.c    **** }
 360:Src/main.c    **** 
 361:Src/main.c    **** /* USER CODE BEGIN 4 */
 362:Src/main.c    **** 
 363:Src/main.c    **** /*
 364:Src/main.c    ****  * Assume motors are not on.
 365:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 366:Src/main.c    ****  */
 367:Src/main.c    **** void turn()
 368:Src/main.c    **** {
 369:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 370:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 371:Src/main.c    ****     HAL_Delay(50);
 372:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 373:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 374:Src/main.c    ****     TIM4->CNT = 0;
 375:Src/main.c    ****     TIM5->CNT = 0;
 376:Src/main.c    **** 
 377:Src/main.c    ****     char msg[18] = "";
 378:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 379:Src/main.c    ****     print(msg, 0);
 380:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 381:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 382:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 383:Src/main.c    ****     print(msg, 2);
 384:Src/main.c    ****     sprintf(msg, "adc_val: %d", adc_values[5]);
 385:Src/main.c    ****     print(msg,3);
 386:Src/main.c    **** 
 387:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
 388:Src/main.c    ****     {
 389:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 390:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 500);
 391:Src/main.c    ****         while (TIM5->CNT < counts)
 392:Src/main.c    ****         {
 393:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 9


 394:Src/main.c    ****             print(msg, 4);
 395:Src/main.c    ****         }
 396:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 397:Src/main.c    ****         print(msg, 4);
 398:Src/main.c    ****         TIM5->CNT = 0;
 399:Src/main.c    ****     }
 400:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 401:Src/main.c    ****     {
 402:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 500);
 403:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 404:Src/main.c    ****         while (TIM4->CNT < counts)
 405:Src/main.c    ****         {
 406:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 407:Src/main.c    ****             print(msg, 4);
 408:Src/main.c    ****         }
 409:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 410:Src/main.c    ****         print(msg, 4);
 411:Src/main.c    ****         TIM4->CNT = 0;
 412:Src/main.c    ****     }
 413:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 414:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 415:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 416:Src/main.c    **** }
 417:Src/main.c    **** 
 418:Src/main.c    **** /*
 419:Src/main.c    ****  * Assume motors are not on.
 420:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 421:Src/main.c    ****  */
 422:Src/main.c    **** void turn_deg(uint8_t deg)
 423:Src/main.c    **** {
 424:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 425:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 426:Src/main.c    ****     TIM4->CNT = 0;
 427:Src/main.c    ****     TIM5->CNT = 0;
 428:Src/main.c    **** 
 429:Src/main.c    ****     char msg[18] = "";
 430:Src/main.c    **** 
 431:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 432:Src/main.c    ****     {
 433:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 434:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 435:Src/main.c    ****         while (TIM5->CNT < counts)
 436:Src/main.c    ****         {
 437:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 438:Src/main.c    ****             print(msg, 4);
 439:Src/main.c    ****         }
 440:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 441:Src/main.c    ****         print(msg, 4);
 442:Src/main.c    ****         TIM5->CNT = 0;
 443:Src/main.c    ****     }
 444:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 445:Src/main.c    ****     {
 446:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 30000);
 447:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 448:Src/main.c    ****         while (TIM4->CNT < counts)
 449:Src/main.c    ****         {
 450:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 10


 451:Src/main.c    ****             print(msg, 4);
 452:Src/main.c    ****         }
 453:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 454:Src/main.c    ****         print(msg, 4);
 455:Src/main.c    ****         TIM4->CNT = 0;
 456:Src/main.c    ****     }
 457:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 458:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 459:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 460:Src/main.c    **** }
 461:Src/main.c    **** 
 462:Src/main.c    **** void pi_navigation()
 463:Src/main.c    **** {
 464:Src/main.c    ****     print("Pi nav", 0);
 465:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 466:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 467:Src/main.c    ****     HAL_Delay(500);
 468:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
 469:Src/main.c    ****     if (heading < 0)
 470:Src/main.c    ****     {
 471:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_2, 0.3 * MOTOR_SPEED);
 472:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0.3 * MOTOR_SPEED);
 473:Src/main.c    ****         heading *= -1;
 474:Src/main.c    ****     }
 475:Src/main.c    ****     else if (heading > 0)
 476:Src/main.c    ****     {
 477:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0.3 * MOTOR_SPEED);
 478:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 0.3 * MOTOR_SPEED);
 479:Src/main.c    ****     }
 480:Src/main.c    ****     HAL_Delay(2000 * heading);
 481:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0.3 * MOTOR_SPEED);
 482:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0.3 * MOTOR_SPEED);
 483:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 484:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 485:Src/main.c    **** }
 486:Src/main.c    **** 
 487:Src/main.c    **** /**
 488:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 489:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 490:Src/main.c    ****  *
 491:Src/main.c    ****  * @param adc_val, value read from ADC.
 492:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 493:Src/main.c    ****  **/
 494:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 495:Src/main.c    **** {
  67              		.loc 1 495 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 496:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 496 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 11


  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 497:Src/main.c    **** }
  90              		.loc 1 497 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE129:
 101              		.global	__aeabi_dcmplt
 102              		.global	__aeabi_dcmpgt
 103              		.section	.text.alarm_detect,"ax",%progbits
 104              		.align	2
 105              		.global	alarm_detect
 106              		.thumb
 107              		.thumb_func
 109              	alarm_detect:
 110              	.LFB130:
 498:Src/main.c    **** 
 499:Src/main.c    **** void alarm_detect()
 500:Src/main.c    **** {
 111              		.loc 1 500 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115 0000 00B5     		push	{lr}
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 14, -4
 119 0002 83B0     		sub	sp, sp, #12
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 16
 501:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 122              		.loc 1 501 0
 123 0004 1D48     		ldr	r0, .L13
 124 0006 1E49     		ldr	r1, .L13+4
 125 0008 4FF44062 		mov	r2, #3072
 126 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 127              	.LVL8:
 502:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 503:Src/main.c    ****     //HAL_NVIC_DisableIRQ (IRQn_Type IRQn) disbale ir interrupt
 504:Src/main.c    ****     //char msg[20] = "";
 505:Src/main.c    ****     HAL_Delay(500);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 12


 128              		.loc 1 505 0
 129 0010 4FF4FA70 		mov	r0, #500
 130 0014 FFF7FEFF 		bl	HAL_Delay
 131              	.LVL9:
 132              	.L10:
 506:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 30)
 133              		.loc 1 506 0 discriminator 1
 134 0018 0023     		movs	r3, #0
 135 001a 0093     		str	r3, [sp]
 136 001c 1948     		ldr	r0, .L13+8
 137 001e 45F6B261 		movw	r1, #24242
 138 0022 4FF47A72 		mov	r2, #1000
 139 0026 4FF44063 		mov	r3, #3072
 140 002a FFF7FEFF 		bl	goertzel
 141              	.LVL10:
 142 002e 51EC100B 		fmrrd	r0, r1, d0
 143 0032 0022     		movs	r2, #0
 144 0034 144B     		ldr	r3, .L13+12
 145 0036 FFF7FEFF 		bl	__aeabi_dcmplt
 146              	.LVL11:
 147 003a 0028     		cmp	r0, #0
 148 003c ECD1     		bne	.L10
 149              	.L11:
 507:Src/main.c    ****         ;
 508:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 30)
 150              		.loc 1 508 0 discriminator 1
 151 003e 0023     		movs	r3, #0
 152 0040 0093     		str	r3, [sp]
 153 0042 1048     		ldr	r0, .L13+8
 154 0044 45F6B261 		movw	r1, #24242
 155 0048 4FF47A72 		mov	r2, #1000
 156 004c 4FF44063 		mov	r3, #3072
 157 0050 FFF7FEFF 		bl	goertzel
 158              	.LVL12:
 159 0054 51EC100B 		fmrrd	r0, r1, d0
 160 0058 0022     		movs	r2, #0
 161 005a 0B4B     		ldr	r3, .L13+12
 162 005c FFF7FEFF 		bl	__aeabi_dcmpgt
 163              	.LVL13:
 164 0060 0028     		cmp	r0, #0
 165 0062 ECD1     		bne	.L11
 509:Src/main.c    ****         ;
 510:Src/main.c    ****     // {
 511:Src/main.c    ****     //     //
 512:Src/main.c    ****     //     // Sampling frequency: 72e6/2/(495*3)
 513:Src/main.c    ****     //     // offset 0 : IR1
 514:Src/main.c    ****     //     val = goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0);
 515:Src/main.c    ****     //     /*
 516:Src/main.c    ****     //        int predec = (int)(val / 1);
 517:Src/main.c    ****     //        int postdec = (int)((val - predec) * 1000);
 518:Src/main.c    ****     //        sprintf(msg, "%d.%d\n", predec, postdec);
 519:Src/main.c    ****     //        HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 520:Src/main.c    ****     //        */
 521:Src/main.c    **** 
 522:Src/main.c    ****     //     //compare
 523:Src/main.c    ****     //     // 1000 Hz: ranges to about 60, 9850 Hz: ranges to 20
 524:Src/main.c    ****     //     if (val < 30)
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 13


 525:Src/main.c    ****     //     {
 526:Src/main.c    ****     //         break;
 527:Src/main.c    ****     //     }
 528:Src/main.c    ****     // }
 529:Src/main.c    **** 
 530:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 166              		.loc 1 530 0
 167 0064 0548     		ldr	r0, .L13
 168 0066 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 169              	.LVL14:
 531:Src/main.c    ****     HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 170              		.loc 1 531 0
 171 006a 0720     		movs	r0, #7
 172 006c FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 173              	.LVL15:
 532:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 174              		.loc 1 532 0
 175 0070 0022     		movs	r2, #0
 176 0072 064B     		ldr	r3, .L13+16
 177 0074 1A70     		strb	r2, [r3]
 533:Src/main.c    **** }
 178              		.loc 1 533 0
 179 0076 03B0     		add	sp, sp, #12
 180              	.LCFI4:
 181              		.cfi_def_cfa_offset 4
 182              		@ sp needed
 183 0078 5DF804FB 		ldr	pc, [sp], #4
 184              	.L14:
 185              		.align	2
 186              	.L13:
 187 007c 00000000 		.word	hadc1
 188 0080 00000000 		.word	dma_buffer
 189 0084 00000000 		.word	adc_values
 190 0088 00003E40 		.word	1077805056
 191 008c 00000000 		.word	IR_INT_STATE
 192              		.cfi_endproc
 193              	.LFE130:
 195              		.section	.text.print,"ax",%progbits
 196              		.align	2
 197              		.global	print
 198              		.thumb
 199              		.thumb_func
 201              	print:
 202              	.LFB132:
 534:Src/main.c    **** 
 535:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin)
 536:Src/main.c    **** {
 537:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 538:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 539:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 540:Src/main.c    ****     HAL_Delay(500);
 541:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 542:Src/main.c    ****     while (1)
 543:Src/main.c    ****     {
 544:Src/main.c    ****         char msg[18] = "";
 545:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
 546:Src/main.c    ****         // freq one
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 14


 547:Src/main.c    ****         double val1 = goertzel(adc_values, 20956, freq1, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 548:Src/main.c    ****         int predec = (int)(val1 / 1);
 549:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 550:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 551:Src/main.c    ****         print(msg, 0);
 552:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 553:Src/main.c    ****         //freq2
 554:Src/main.c    ****         double val2 = goertzel(adc_values, 20956, freq2, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 555:Src/main.c    ****         predec = (int)(val2 / 1);
 556:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 557:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 558:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 559:Src/main.c    ****         //compare
 560:Src/main.c    ****         if (val1 > val2)
 561:Src/main.c    ****         {
 562:Src/main.c    ****             break;
 563:Src/main.c    ****         }
 564:Src/main.c    ****     }
 565:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 566:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 567:Src/main.c    **** }
 568:Src/main.c    **** 
 569:Src/main.c    **** /**
 570:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 571:Src/main.c    ****  * @param msg, string to print
 572:Src/main.c    ****  * @param row, row to print msg to
 573:Src/main.c    ****  */
 574:Src/main.c    **** void print(char *msg, int row)
 575:Src/main.c    **** {
 203              		.loc 1 575 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              	.LVL16:
 208 0000 38B5     		push	{r3, r4, r5, lr}
 209              	.LCFI5:
 210              		.cfi_def_cfa_offset 16
 211              		.cfi_offset 3, -16
 212              		.cfi_offset 4, -12
 213              		.cfi_offset 5, -8
 214              		.cfi_offset 14, -4
 215 0002 0546     		mov	r5, r0
 576:Src/main.c    ****     if (row == 0)
 216              		.loc 1 576 0
 217 0004 0C46     		mov	r4, r1
 218 0006 11B9     		cbnz	r1, .L16
 577:Src/main.c    ****     {
 578:Src/main.c    ****         ssd1306_Fill(Black);
 219              		.loc 1 578 0
 220 0008 0020     		movs	r0, #0
 221              	.LVL17:
 222 000a FFF7FEFF 		bl	ssd1306_Fill
 223              	.LVL18:
 224              	.L16:
 579:Src/main.c    ****     }
 580:Src/main.c    ****     ssd1306_SetCursor(0, row * 10);
 225              		.loc 1 580 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 15


 226 000e 04EB8404 		add	r4, r4, r4, lsl #2
 227              	.LVL19:
 228 0012 6100     		lsls	r1, r4, #1
 229 0014 0020     		movs	r0, #0
 230 0016 01F0FE01 		and	r1, r1, #254
 231 001a FFF7FEFF 		bl	ssd1306_SetCursor
 232              	.LVL20:
 581:Src/main.c    ****     ssd1306_WriteString(msg, Font_7x10, White);
 233              		.loc 1 581 0
 234 001e 054B     		ldr	r3, .L18
 235 0020 2846     		mov	r0, r5
 236 0022 93E80600 		ldmia	r3, {r1, r2}
 237 0026 0123     		movs	r3, #1
 238 0028 FFF7FEFF 		bl	ssd1306_WriteString
 239              	.LVL21:
 582:Src/main.c    ****     ssd1306_UpdateScreen();
 240              		.loc 1 582 0
 241 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 242              	.LVL22:
 243 0030 38BD     		pop	{r3, r4, r5, pc}
 244              	.LVL23:
 245              	.L19:
 246 0032 00BF     		.align	2
 247              	.L18:
 248 0034 00000000 		.word	Font_7x10
 249              		.cfi_endproc
 250              	.LFE132:
 252              		.global	__aeabi_d2iz
 253              		.global	__aeabi_i2d
 254              		.section	.text.frequency_comparison,"ax",%progbits
 255              		.align	2
 256              		.global	frequency_comparison
 257              		.thumb
 258              		.thumb_func
 260              	frequency_comparison:
 261              	.LFB131:
 536:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 262              		.loc 1 536 0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 32
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266              	.LVL24:
 267 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 268              	.LCFI6:
 269              		.cfi_def_cfa_offset 36
 270              		.cfi_offset 4, -36
 271              		.cfi_offset 5, -32
 272              		.cfi_offset 6, -28
 273              		.cfi_offset 7, -24
 274              		.cfi_offset 8, -20
 275              		.cfi_offset 9, -16
 276              		.cfi_offset 10, -12
 277              		.cfi_offset 11, -8
 278              		.cfi_offset 14, -4
 279 0004 8BB0     		sub	sp, sp, #44
 280              	.LCFI7:
 281              		.cfi_def_cfa_offset 80
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 16


 282 0006 0390     		str	r0, [sp, #12]
 283 0008 8946     		mov	r9, r1
 537:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 284              		.loc 1 537 0
 285 000a 202A     		cmp	r2, #32
 286 000c 07D0     		beq	.L25
 537:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 287              		.loc 1 537 0 is_stmt 0 discriminator 1
 288 000e 102A     		cmp	r2, #16
 289 0010 02D1     		bne	.L26
 537:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 290              		.loc 1 537 0
 291 0012 4FF00108 		mov	r8, #1
 292 0016 04E0     		b	.L21
 293              	.L26:
 294 0018 4FF00208 		mov	r8, #2
 295 001c 01E0     		b	.L21
 296              	.L25:
 297 001e 4FF00008 		mov	r8, #0
 298              	.L21:
 299              	.LVL25:
 538:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 300              		.loc 1 538 0 is_stmt 1 discriminator 8
 301 0022 4548     		ldr	r0, .L28
 302              	.LVL26:
 303 0024 4549     		ldr	r1, .L28+4
 304              	.LVL27:
 305 0026 4FF44062 		mov	r2, #3072
 306              	.LVL28:
 307 002a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 308              	.LVL29:
 540:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 309              		.loc 1 540 0 discriminator 8
 310 002e 4FF4FA70 		mov	r0, #500
 311 0032 FFF7FEFF 		bl	HAL_Delay
 312              	.LVL30:
 313              	.L24:
 314              	.LBB2:
 544:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
 315              		.loc 1 544 0
 316 0036 0026     		movs	r6, #0
 317 0038 0596     		str	r6, [sp, #20]
 318 003a 0696     		str	r6, [sp, #24]
 319 003c 0796     		str	r6, [sp, #28]
 320 003e 0896     		str	r6, [sp, #32]
 321 0040 ADF82460 		strh	r6, [sp, #36]	@ movhi
 547:Src/main.c    ****         int predec = (int)(val1 / 1);
 322              		.loc 1 547 0
 323 0044 5FFA88F7 		uxtb	r7, r8
 324 0048 DFF804B1 		ldr	fp, .L28+24
 325 004c 0097     		str	r7, [sp]
 326 004e 5846     		mov	r0, fp
 327 0050 45F2DC11 		movw	r1, #20956
 328 0054 039A     		ldr	r2, [sp, #12]
 329 0056 4FF44063 		mov	r3, #3072
 330 005a FFF7FEFF 		bl	goertzel
 331              	.LVL31:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 17


 332 005e 55EC104B 		fmrrd	r4, r5, d0
 333              	.LVL32:
 548:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 334              		.loc 1 548 0
 335 0062 10EE100A 		fmrs	r0, s0	@ int
 336 0066 2946     		mov	r1, r5
 337 0068 FFF7FEFF 		bl	__aeabi_d2iz
 338              	.LVL33:
 339 006c 8246     		mov	r10, r0
 340              	.LVL34:
 549:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 341              		.loc 1 549 0
 342 006e FFF7FEFF 		bl	__aeabi_i2d
 343              	.LVL35:
 344 0072 0246     		mov	r2, r0
 345 0074 0B46     		mov	r3, r1
 346 0076 2046     		mov	r0, r4
 347 0078 2946     		mov	r1, r5
 348 007a FFF7FEFF 		bl	__aeabi_dsub
 349              	.LVL36:
 350 007e 0022     		movs	r2, #0
 351 0080 2F4B     		ldr	r3, .L28+8
 352 0082 FFF7FEFF 		bl	__aeabi_dmul
 353              	.LVL37:
 354 0086 FFF7FEFF 		bl	__aeabi_d2iz
 355              	.LVL38:
 356 008a 0346     		mov	r3, r0
 357              	.LVL39:
 550:Src/main.c    ****         print(msg, 0);
 358              		.loc 1 550 0
 359 008c 05A8     		add	r0, sp, #20
 360              	.LVL40:
 361 008e 2D49     		ldr	r1, .L28+12
 362 0090 5246     		mov	r2, r10
 363 0092 FFF7FEFF 		bl	sprintf
 364              	.LVL41:
 551:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 365              		.loc 1 551 0
 366 0096 05A8     		add	r0, sp, #20
 367 0098 3146     		mov	r1, r6
 368 009a FFF7FEFF 		bl	print
 369              	.LVL42:
 552:Src/main.c    ****         //freq2
 370              		.loc 1 552 0
 371 009e 05A8     		add	r0, sp, #20
 372 00a0 FFF7FEFF 		bl	strlen
 373              	.LVL43:
 374 00a4 DFF8ACA0 		ldr	r10, .L28+28
 375              	.LVL44:
 376 00a8 82B2     		uxth	r2, r0
 377 00aa 5046     		mov	r0, r10
 378 00ac 05A9     		add	r1, sp, #20
 379 00ae 4FF6FF73 		movw	r3, #65535
 380 00b2 FFF7FEFF 		bl	HAL_UART_Transmit
 381              	.LVL45:
 554:Src/main.c    ****         predec = (int)(val2 / 1);
 382              		.loc 1 554 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 18


 383 00b6 0097     		str	r7, [sp]
 384 00b8 5846     		mov	r0, fp
 385 00ba 45F2DC11 		movw	r1, #20956
 386 00be 4A46     		mov	r2, r9
 387 00c0 4FF44063 		mov	r3, #3072
 388 00c4 FFF7FEFF 		bl	goertzel
 389              	.LVL46:
 390 00c8 57EC106B 		fmrrd	r6, r7, d0
 391              	.LVL47:
 555:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 392              		.loc 1 555 0
 393 00cc 10EE100A 		fmrs	r0, s0	@ int
 394 00d0 3946     		mov	r1, r7
 395 00d2 FFF7FEFF 		bl	__aeabi_d2iz
 396              	.LVL48:
 397 00d6 8346     		mov	fp, r0
 398              	.LVL49:
 556:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 399              		.loc 1 556 0
 400 00d8 FFF7FEFF 		bl	__aeabi_i2d
 401              	.LVL50:
 402 00dc 0246     		mov	r2, r0
 403 00de 0B46     		mov	r3, r1
 404 00e0 3046     		mov	r0, r6
 405 00e2 3946     		mov	r1, r7
 406 00e4 FFF7FEFF 		bl	__aeabi_dsub
 407              	.LVL51:
 408 00e8 0022     		movs	r2, #0
 409 00ea 154B     		ldr	r3, .L28+8
 410 00ec FFF7FEFF 		bl	__aeabi_dmul
 411              	.LVL52:
 412 00f0 FFF7FEFF 		bl	__aeabi_d2iz
 413              	.LVL53:
 414 00f4 0346     		mov	r3, r0
 415              	.LVL54:
 557:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 416              		.loc 1 557 0
 417 00f6 05A8     		add	r0, sp, #20
 418              	.LVL55:
 419 00f8 1349     		ldr	r1, .L28+16
 420 00fa 5A46     		mov	r2, fp
 421 00fc FFF7FEFF 		bl	sprintf
 422              	.LVL56:
 558:Src/main.c    ****         //compare
 423              		.loc 1 558 0
 424 0100 05A8     		add	r0, sp, #20
 425 0102 FFF7FEFF 		bl	strlen
 426              	.LVL57:
 427 0106 82B2     		uxth	r2, r0
 428 0108 5046     		mov	r0, r10
 429 010a 05A9     		add	r1, sp, #20
 430 010c 4FF6FF73 		movw	r3, #65535
 431 0110 FFF7FEFF 		bl	HAL_UART_Transmit
 432              	.LVL58:
 560:Src/main.c    ****         {
 433              		.loc 1 560 0
 434 0114 2046     		mov	r0, r4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 19


 435 0116 2946     		mov	r1, r5
 436 0118 3246     		mov	r2, r6
 437 011a 3B46     		mov	r3, r7
 438 011c FFF7FEFF 		bl	__aeabi_dcmpgt
 439              	.LVL59:
 440 0120 0028     		cmp	r0, #0
 441 0122 88D0     		beq	.L24
 442              	.LBE2:
 565:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 443              		.loc 1 565 0
 444 0124 0448     		ldr	r0, .L28
 445 0126 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 446              	.LVL60:
 566:Src/main.c    **** }
 447              		.loc 1 566 0
 448 012a 0022     		movs	r2, #0
 449 012c 074B     		ldr	r3, .L28+20
 450 012e 1A70     		strb	r2, [r3]
 567:Src/main.c    **** 
 451              		.loc 1 567 0
 452 0130 0BB0     		add	sp, sp, #44
 453              	.LCFI8:
 454              		.cfi_def_cfa_offset 36
 455              		@ sp needed
 456 0132 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 457              	.LVL61:
 458              	.L29:
 459 0136 00BF     		.align	2
 460              	.L28:
 461 0138 00000000 		.word	hadc1
 462 013c 00000000 		.word	dma_buffer
 463 0140 00408F40 		.word	1083129856
 464 0144 00000000 		.word	.LC0
 465 0148 08000000 		.word	.LC1
 466 014c 00000000 		.word	IR_INT_STATE
 467 0150 00000000 		.word	adc_values
 468 0154 00000000 		.word	huart6
 469              		.cfi_endproc
 470              	.LFE131:
 472              		.section	.text.set_motor_speed,"ax",%progbits
 473              		.align	2
 474              		.global	set_motor_speed
 475              		.thumb
 476              		.thumb_func
 478              	set_motor_speed:
 479              	.LFB135:
 583:Src/main.c    **** }
 584:Src/main.c    **** 
 585:Src/main.c    **** PID_t menu()
 586:Src/main.c    **** {
 587:Src/main.c    ****     print("Starting", 0);
 588:Src/main.c    ****     char msg[20] = "";
 589:Src/main.c    ****     int pid_select = 0;
 590:Src/main.c    ****     uint32_t values[3] = {0, 0, 0};
 591:Src/main.c    ****     while (1)
 592:Src/main.c    ****     {
 593:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 20


 594:Src/main.c    ****         {
 595:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 596:Src/main.c    ****             print(msg, 0);
 597:Src/main.c    ****             TIM4->CNT = values[pid_select];
 598:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 599:Src/main.c    ****             {
 600:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 601:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 602:Src/main.c    ****                 print(msg, 0);
 603:Src/main.c    ****             }
 604:Src/main.c    ****             ++pid_select;
 605:Src/main.c    ****         }
 606:Src/main.c    ****         if (pid_select == 3)
 607:Src/main.c    ****             break;
 608:Src/main.c    ****     }
 609:Src/main.c    ****     while (1)
 610:Src/main.c    ****     {
 611:Src/main.c    ****         int speed = 0.3 * MOTOR_SPEED;
 612:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 613:Src/main.c    ****         {
 614:Src/main.c    ****             if (pid_select == 3)
 615:Src/main.c    ****             {
 616:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 617:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 618:Src/main.c    ****             }
 619:Src/main.c    ****             else
 620:Src/main.c    ****             {
 621:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 622:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 623:Src/main.c    ****             }
 624:Src/main.c    ****             sprintf(msg, "%d", speed);
 625:Src/main.c    ****             print(msg, 0);
 626:Src/main.c    ****             TIM4->CNT = speed;
 627:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 628:Src/main.c    ****             {
 629:Src/main.c    ****                 speed = TIM4->CNT;
 630:Src/main.c    ****                 sprintf(msg, "%d", speed);
 631:Src/main.c    ****                 print(msg, 0);
 632:Src/main.c    ****                 if (pid_select == 3)
 633:Src/main.c    ****                 {
 634:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, speed);
 635:Src/main.c    ****                     LEFT_SPEED = speed;
 636:Src/main.c    ****                 }
 637:Src/main.c    ****                 else
 638:Src/main.c    ****                 {
 639:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, speed);
 640:Src/main.c    ****                     RIGHT_SPEED = speed;
 641:Src/main.c    ****                 }
 642:Src/main.c    ****             }
 643:Src/main.c    ****             ++pid_select;
 644:Src/main.c    ****         }
 645:Src/main.c    ****         if (pid_select == 5)
 646:Src/main.c    ****         {
 647:Src/main.c    ****             break;
 648:Src/main.c    ****         }
 649:Src/main.c    ****     }
 650:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 21


 651:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 652:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 653:Src/main.c    ****     print(msg, 0);
 654:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 655:Src/main.c    ****     print(msg, 1);
 656:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 657:Src/main.c    ****     print(msg, 2);
 658:Src/main.c    ****     sprintf(msg, "L %u", LEFT_SPEED);
 659:Src/main.c    ****     print(msg, 3);
 660:Src/main.c    ****     sprintf(msg, "R %u", RIGHT_SPEED);
 661:Src/main.c    ****     print(msg, 4);
 662:Src/main.c    ****     HAL_Delay(1000);
 663:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 664:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 665:Src/main.c    ****     return pid_Init(values[0], values[1], values[2], 5, 100);
 666:Src/main.c    **** }
 667:Src/main.c    **** 
 668:Src/main.c    **** void do_pid(PID_t *pid_struct)
 669:Src/main.c    **** {
 670:Src/main.c    ****     /* Read sensors */
 671:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) ? 0 : 1;
 672:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 673:Src/main.c    **** 
 674:Src/main.c    ****     /* Get error */
 675:Src/main.c    ****     if (left && right)
 676:Src/main.c    ****     {
 677:Src/main.c    ****         pid_struct->err = 0;
 678:Src/main.c    ****     }
 679:Src/main.c    ****     else if (left && !right)
 680:Src/main.c    ****     {
 681:Src/main.c    ****         pid_struct->err = 1;
 682:Src/main.c    ****     }
 683:Src/main.c    ****     else if (!left && right)
 684:Src/main.c    ****     {
 685:Src/main.c    ****         pid_struct->err = -1;
 686:Src/main.c    ****     }
 687:Src/main.c    ****     else if (!left && !right && (pid_struct->err < 0))
 688:Src/main.c    ****     {
 689:Src/main.c    ****         pid_struct->err = -5;
 690:Src/main.c    ****     }
 691:Src/main.c    ****     else if (!left && !right && (pid_struct->err > 0))
 692:Src/main.c    ****     {
 693:Src/main.c    ****         pid_struct->err = 5;
 694:Src/main.c    ****     }
 695:Src/main.c    **** 
 696:Src/main.c    ****     /* Get gain */
 697:Src/main.c    ****     int16_t gain = pid_GetGain(pid_struct);
 698:Src/main.c    ****     char msg[20] = "";
 699:Src/main.c    ****     sprintf(msg, "%d", (int)gain);
 700:Src/main.c    ****     print(msg, 0);
 701:Src/main.c    ****     /* Set Motor Speeds*/
 702:Src/main.c    ****     int lspeed = LEFT_SPEED;
 703:Src/main.c    ****     int rspeed = RIGHT_SPEED;
 704:Src/main.c    ****     if (gain < 0)
 705:Src/main.c    ****     {
 706:Src/main.c    ****         lspeed = LEFT_SPEED - gain;
 707:Src/main.c    ****     }
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 22


 708:Src/main.c    ****     else if (gain > 0)
 709:Src/main.c    ****     {
 710:Src/main.c    ****         rspeed = RIGHT_SPEED + gain;
 711:Src/main.c    ****     }
 712:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 713:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 714:Src/main.c    **** }
 715:Src/main.c    **** 
 716:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 717:Src/main.c    **** {
 480              		.loc 1 717 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 484              		@ link register save eliminated.
 485              	.LVL62:
 718:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 486              		.loc 1 718 0
 487 0000 0346     		mov	r3, r0
 488 0002 18B9     		cbnz	r0, .L31
 719:Src/main.c    ****     {
 720:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 489              		.loc 1 720 0
 490 0004 0F4A     		ldr	r2, .L35
 491 0006 1268     		ldr	r2, [r2]
 492 0008 9063     		str	r0, [r2, #56]
 493 000a 13E0     		b	.L32
 494              	.L31:
 721:Src/main.c    ****     }
 722:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 495              		.loc 1 722 0
 496 000c 0428     		cmp	r0, #4
 497 000e 04D1     		bne	.L33
 723:Src/main.c    ****     {
 724:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 498              		.loc 1 724 0
 499 0010 0C4A     		ldr	r2, .L35
 500 0012 1268     		ldr	r2, [r2]
 501 0014 0020     		movs	r0, #0
 502              	.LVL63:
 503 0016 5063     		str	r0, [r2, #52]
 504 0018 0CE0     		b	.L32
 505              	.LVL64:
 506              	.L33:
 725:Src/main.c    ****     }
 726:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 507              		.loc 1 726 0
 508 001a 0828     		cmp	r0, #8
 509 001c 04D1     		bne	.L34
 727:Src/main.c    ****     {
 728:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 510              		.loc 1 728 0
 511 001e 094A     		ldr	r2, .L35
 512 0020 1268     		ldr	r2, [r2]
 513 0022 0020     		movs	r0, #0
 514              	.LVL65:
 515 0024 1064     		str	r0, [r2, #64]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 23


 516 0026 05E0     		b	.L32
 517              	.LVL66:
 518              	.L34:
 729:Src/main.c    ****     }
 730:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 519              		.loc 1 730 0
 520 0028 0C28     		cmp	r0, #12
 521 002a 03D1     		bne	.L32
 731:Src/main.c    ****     {
 732:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 522              		.loc 1 732 0
 523 002c 054A     		ldr	r2, .L35
 524 002e 1268     		ldr	r2, [r2]
 525 0030 0020     		movs	r0, #0
 526              	.LVL67:
 527 0032 D063     		str	r0, [r2, #60]
 528              	.L32:
 733:Src/main.c    ****     }
 734:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 529              		.loc 1 734 0
 530 0034 034A     		ldr	r2, .L35
 531 0036 1268     		ldr	r2, [r2]
 532 0038 3432     		adds	r2, r2, #52
 533 003a 9B08     		lsrs	r3, r3, #2
 534              	.LVL68:
 535 003c 42F82310 		str	r1, [r2, r3, lsl #2]
 536 0040 7047     		bx	lr
 537              	.L36:
 538 0042 00BF     		.align	2
 539              	.L35:
 540 0044 00000000 		.word	htim1
 541              		.cfi_endproc
 542              	.LFE135:
 544              		.global	__aeabi_f2d
 545              		.global	__aeabi_d2uiz
 546              		.section	.text.turn,"ax",%progbits
 547              		.align	2
 548              		.global	turn
 549              		.thumb
 550              		.thumb_func
 552              	turn:
 553              	.LFB126:
 368:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 554              		.loc 1 368 0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 24
 557              		@ frame_needed = 0, uses_anonymous_args = 0
 558 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 559              	.LCFI9:
 560              		.cfi_def_cfa_offset 20
 561              		.cfi_offset 4, -20
 562              		.cfi_offset 5, -16
 563              		.cfi_offset 6, -12
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 2DED028B 		fstmfdd	sp!, {d8}
 567              	.LCFI10:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 24


 568              		.cfi_def_cfa_offset 28
 569              		.cfi_offset 80, -28
 570              		.cfi_offset 81, -24
 571 0006 87B0     		sub	sp, sp, #28
 572              	.LCFI11:
 573              		.cfi_def_cfa_offset 56
 369:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 574              		.loc 1 369 0
 575 0008 6348     		ldr	r0, .L50+16
 576 000a 6449     		ldr	r1, .L50+20
 577 000c 4FF44062 		mov	r2, #3072
 578 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 579              	.LVL69:
 371:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 580              		.loc 1 371 0
 581 0014 3220     		movs	r0, #50
 582 0016 FFF7FEFF 		bl	HAL_Delay
 583              	.LVL70:
 372:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 584              		.loc 1 372 0
 585 001a 614E     		ldr	r6, .L50+24
 586 001c 7069     		ldr	r0, [r6, #20]
 587 001e FFF7FEFF 		bl	calculate_heading
 588              	.LVL71:
 589 0022 B0EE408A 		fcpys	s16, s0
 590              	.LVL72:
 373:Src/main.c    ****     TIM4->CNT = 0;
 591              		.loc 1 373 0
 592 0026 F0EEC07A 		fabss	s15, s0
 593 002a 17EE900A 		fmrs	r0, s15
 594 002e FFF7FEFF 		bl	__aeabi_f2d
 595              	.LVL73:
 596 0032 0022     		movs	r2, #0
 597 0034 5B4B     		ldr	r3, .L50+28
 598 0036 FFF7FEFF 		bl	__aeabi_dmul
 599              	.LVL74:
 600 003a FFF7FEFF 		bl	__aeabi_d2uiz
 601              	.LVL75:
 602 003e 85B2     		uxth	r5, r0
 603              	.LVL76:
 374:Src/main.c    ****     TIM5->CNT = 0;
 604              		.loc 1 374 0
 605 0040 0024     		movs	r4, #0
 606 0042 594B     		ldr	r3, .L50+32
 607 0044 5C62     		str	r4, [r3, #36]
 375:Src/main.c    **** 
 608              		.loc 1 375 0
 609 0046 03F58063 		add	r3, r3, #1024
 610 004a 5C62     		str	r4, [r3, #36]
 377:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 611              		.loc 1 377 0
 612 004c 0194     		str	r4, [sp, #4]
 613 004e 0294     		str	r4, [sp, #8]
 614 0050 0394     		str	r4, [sp, #12]
 615 0052 0494     		str	r4, [sp, #16]
 616 0054 ADF81440 		strh	r4, [sp, #20]	@ movhi
 378:Src/main.c    ****     print(msg, 0);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 25


 617              		.loc 1 378 0
 618 0058 01A8     		add	r0, sp, #4
 619 005a 5449     		ldr	r1, .L50+36
 620 005c 2A46     		mov	r2, r5
 621 005e FFF7FEFF 		bl	sprintf
 622              	.LVL77:
 379:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 623              		.loc 1 379 0
 624 0062 01A8     		add	r0, sp, #4
 625 0064 2146     		mov	r1, r4
 626 0066 FFF7FEFF 		bl	print
 627              	.LVL78:
 380:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 628              		.loc 1 380 0
 629 006a BDEEC87A 		ftosizs	s14, s16
 630              	.LVL79:
 381:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 631              		.loc 1 381 0
 632 006e F8EEC77A 		fsitos	s15, s14
 633 0072 78EE677A 		fsubs	s15, s16, s15
 634 0076 DFED4E6A 		flds	s13, .L50+40
 635 007a 67EEA67A 		fmuls	s15, s15, s13
 636              	.LVL80:
 382:Src/main.c    ****     print(msg, 2);
 637              		.loc 1 382 0
 638 007e 01A8     		add	r0, sp, #4
 639 0080 4C49     		ldr	r1, .L50+44
 640 0082 17EE102A 		fmrs	r2, s14	@ int
 641 0086 FDEEE77A 		ftosizs	s15, s15
 642              	.LVL81:
 643 008a 17EE903A 		fmrs	r3, s15	@ int
 644 008e FFF7FEFF 		bl	sprintf
 645              	.LVL82:
 383:Src/main.c    ****     sprintf(msg, "adc_val: %d", adc_values[5]);
 646              		.loc 1 383 0
 647 0092 01A8     		add	r0, sp, #4
 648 0094 0221     		movs	r1, #2
 649 0096 FFF7FEFF 		bl	print
 650              	.LVL83:
 384:Src/main.c    ****     print(msg,3);
 651              		.loc 1 384 0
 652 009a 01A8     		add	r0, sp, #4
 653 009c 4649     		ldr	r1, .L50+48
 654 009e 7269     		ldr	r2, [r6, #20]
 655 00a0 FFF7FEFF 		bl	sprintf
 656              	.LVL84:
 385:Src/main.c    **** 
 657              		.loc 1 385 0
 658 00a4 01A8     		add	r0, sp, #4
 659 00a6 0321     		movs	r1, #3
 660 00a8 FFF7FEFF 		bl	print
 661              	.LVL85:
 387:Src/main.c    ****     {
 662              		.loc 1 387 0
 663 00ac 18EE100A 		fmrs	r0, s16
 664 00b0 FFF7FEFF 		bl	__aeabi_f2d
 665              	.LVL86:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 26


 666 00b4 0646     		mov	r6, r0
 667 00b6 0F46     		mov	r7, r1
 668 00b8 33A3     		adr	r3, .L50
 669 00ba D3E90023 		ldrd	r2, [r3]
 670 00be FFF7FEFF 		bl	__aeabi_dcmplt
 671              	.LVL87:
 672 00c2 20B3     		cbz	r0, .L48
 389:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 500);
 673              		.loc 1 389 0
 674 00c4 2046     		mov	r0, r4
 675 00c6 2146     		mov	r1, r4
 676 00c8 FFF7FEFF 		bl	set_motor_speed
 677              	.LVL88:
 390:Src/main.c    ****         while (TIM5->CNT < counts)
 678              		.loc 1 390 0
 679 00cc 0820     		movs	r0, #8
 680 00ce 4FF4FA71 		mov	r1, #500
 681 00d2 FFF7FEFF 		bl	set_motor_speed
 682              	.LVL89:
 391:Src/main.c    ****         {
 683              		.loc 1 391 0
 684 00d6 09E0     		b	.L40
 685              	.L41:
 393:Src/main.c    ****             print(msg, 4);
 686              		.loc 1 393 0
 687 00d8 384B     		ldr	r3, .L50+52
 688 00da 5A6A     		ldr	r2, [r3, #36]
 689 00dc 01A8     		add	r0, sp, #4
 690 00de 3849     		ldr	r1, .L50+56
 691 00e0 FFF7FEFF 		bl	sprintf
 692              	.LVL90:
 394:Src/main.c    ****         }
 693              		.loc 1 394 0
 694 00e4 01A8     		add	r0, sp, #4
 695 00e6 0421     		movs	r1, #4
 696 00e8 FFF7FEFF 		bl	print
 697              	.LVL91:
 698              	.L40:
 391:Src/main.c    ****         {
 699              		.loc 1 391 0
 700 00ec 334B     		ldr	r3, .L50+52
 701 00ee 5B6A     		ldr	r3, [r3, #36]
 702 00f0 AB42     		cmp	r3, r5
 703 00f2 F1D3     		bcc	.L41
 396:Src/main.c    ****         print(msg, 4);
 704              		.loc 1 396 0
 705 00f4 314C     		ldr	r4, .L50+52
 706 00f6 626A     		ldr	r2, [r4, #36]
 707 00f8 01A8     		add	r0, sp, #4
 708 00fa 3149     		ldr	r1, .L50+56
 709 00fc FFF7FEFF 		bl	sprintf
 710              	.LVL92:
 397:Src/main.c    ****         TIM5->CNT = 0;
 711              		.loc 1 397 0
 712 0100 01A8     		add	r0, sp, #4
 713 0102 0421     		movs	r1, #4
 714 0104 FFF7FEFF 		bl	print
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 27


 715              	.LVL93:
 398:Src/main.c    ****     }
 716              		.loc 1 398 0
 717 0108 0023     		movs	r3, #0
 718 010a 6362     		str	r3, [r4, #36]
 719 010c 2BE0     		b	.L42
 720              	.L48:
 400:Src/main.c    ****     {
 721              		.loc 1 400 0
 722 010e 3046     		mov	r0, r6
 723 0110 3946     		mov	r1, r7
 724 0112 1FA3     		adr	r3, .L50+8
 725 0114 D3E90023 		ldrd	r2, [r3]
 726 0118 FFF7FEFF 		bl	__aeabi_dcmpgt
 727              	.LVL94:
 728 011c 18B3     		cbz	r0, .L42
 402:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 729              		.loc 1 402 0
 730 011e 0020     		movs	r0, #0
 731 0120 4FF4FA71 		mov	r1, #500
 732 0124 FFF7FEFF 		bl	set_motor_speed
 733              	.LVL95:
 403:Src/main.c    ****         while (TIM4->CNT < counts)
 734              		.loc 1 403 0
 735 0128 0820     		movs	r0, #8
 736 012a 0021     		movs	r1, #0
 737 012c FFF7FEFF 		bl	set_motor_speed
 738              	.LVL96:
 404:Src/main.c    ****         {
 739              		.loc 1 404 0
 740 0130 09E0     		b	.L44
 741              	.L45:
 406:Src/main.c    ****             print(msg, 4);
 742              		.loc 1 406 0
 743 0132 1D4B     		ldr	r3, .L50+32
 744 0134 5A6A     		ldr	r2, [r3, #36]
 745 0136 01A8     		add	r0, sp, #4
 746 0138 2249     		ldr	r1, .L50+60
 747 013a FFF7FEFF 		bl	sprintf
 748              	.LVL97:
 407:Src/main.c    ****         }
 749              		.loc 1 407 0
 750 013e 01A8     		add	r0, sp, #4
 751 0140 0421     		movs	r1, #4
 752 0142 FFF7FEFF 		bl	print
 753              	.LVL98:
 754              	.L44:
 404:Src/main.c    ****         {
 755              		.loc 1 404 0
 756 0146 184B     		ldr	r3, .L50+32
 757 0148 5B6A     		ldr	r3, [r3, #36]
 758 014a AB42     		cmp	r3, r5
 759 014c F1D3     		bcc	.L45
 409:Src/main.c    ****         print(msg, 4);
 760              		.loc 1 409 0
 761 014e 164C     		ldr	r4, .L50+32
 762 0150 626A     		ldr	r2, [r4, #36]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 28


 763 0152 01A8     		add	r0, sp, #4
 764 0154 1B49     		ldr	r1, .L50+60
 765 0156 FFF7FEFF 		bl	sprintf
 766              	.LVL99:
 410:Src/main.c    ****         TIM4->CNT = 0;
 767              		.loc 1 410 0
 768 015a 01A8     		add	r0, sp, #4
 769 015c 0421     		movs	r1, #4
 770 015e FFF7FEFF 		bl	print
 771              	.LVL100:
 411:Src/main.c    ****     }
 772              		.loc 1 411 0
 773 0162 0023     		movs	r3, #0
 774 0164 6362     		str	r3, [r4, #36]
 775              	.L42:
 413:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 776              		.loc 1 413 0
 777 0166 0020     		movs	r0, #0
 778 0168 0146     		mov	r1, r0
 779 016a FFF7FEFF 		bl	set_motor_speed
 780              	.LVL101:
 414:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 781              		.loc 1 414 0
 782 016e 0820     		movs	r0, #8
 783 0170 0021     		movs	r1, #0
 784 0172 FFF7FEFF 		bl	set_motor_speed
 785              	.LVL102:
 415:Src/main.c    **** }
 786              		.loc 1 415 0
 787 0176 0848     		ldr	r0, .L50+16
 788 0178 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 789              	.LVL103:
 416:Src/main.c    **** 
 790              		.loc 1 416 0
 791 017c 07B0     		add	sp, sp, #28
 792              	.LCFI12:
 793              		.cfi_def_cfa_offset 28
 794              		@ sp needed
 795 017e BDEC028B 		fldmfdd	sp!, {d8}
 796              	.LCFI13:
 797              		.cfi_restore 80
 798              		.cfi_restore 81
 799              		.cfi_def_cfa_offset 20
 800              	.LVL104:
 801 0182 F0BD     		pop	{r4, r5, r6, r7, pc}
 802              	.LVL105:
 803              	.L51:
 804 0184 AFF30080 		.align	3
 805              	.L50:
 806 0188 7B14AE47 		.word	1202590843
 807 018c E17AA4BF 		.word	-1079739679
 808 0190 7B14AE47 		.word	1202590843
 809 0194 E17AA43F 		.word	1067743969
 810 0198 00000000 		.word	hadc1
 811 019c 00000000 		.word	dma_buffer
 812 01a0 00000000 		.word	adc_values
 813 01a4 00805140 		.word	1079083008
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 29


 814 01a8 00080040 		.word	1073743872
 815 01ac 10000000 		.word	.LC2
 816 01b0 00007A44 		.word	1148846080
 817 01b4 1C000000 		.word	.LC3
 818 01b8 28000000 		.word	.LC4
 819 01bc 000C0040 		.word	1073744896
 820 01c0 34000000 		.word	.LC5
 821 01c4 44000000 		.word	.LC6
 822              		.cfi_endproc
 823              	.LFE126:
 825              		.global	__aeabi_dadd
 826              		.section	.text.turn_deg,"ax",%progbits
 827              		.align	2
 828              		.global	turn_deg
 829              		.thumb
 830              		.thumb_func
 832              	turn_deg:
 833              	.LFB127:
 423:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 834              		.loc 1 423 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 24
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              	.LVL106:
 839 0000 30B5     		push	{r4, r5, lr}
 840              	.LCFI14:
 841              		.cfi_def_cfa_offset 12
 842              		.cfi_offset 4, -12
 843              		.cfi_offset 5, -8
 844              		.cfi_offset 14, -4
 845 0002 87B0     		sub	sp, sp, #28
 846              	.LCFI15:
 847              		.cfi_def_cfa_offset 40
 848 0004 0546     		mov	r5, r0
 424:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 849              		.loc 1 424 0
 850 0006 2C48     		ldr	r0, .L57+8
 851              	.LVL107:
 852 0008 2C49     		ldr	r1, .L57+12
 853 000a 4FF44062 		mov	r2, #3072
 854 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 855              	.LVL108:
 425:Src/main.c    ****     TIM4->CNT = 0;
 856              		.loc 1 425 0
 857 0012 A5F15A00 		sub	r0, r5, #90
 858 0016 FFF7FEFF 		bl	__aeabi_i2d
 859              	.LVL109:
 860 001a 25A3     		adr	r3, .L57
 861 001c D3E90023 		ldrd	r2, [r3]
 862 0020 FFF7FEFF 		bl	__aeabi_dmul
 863              	.LVL110:
 864 0024 0022     		movs	r2, #0
 865 0026 264B     		ldr	r3, .L57+16
 866 0028 FFF7FEFF 		bl	__aeabi_dadd
 867              	.LVL111:
 868 002c FFF7FEFF 		bl	__aeabi_d2uiz
 869              	.LVL112:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 30


 870 0030 84B2     		uxth	r4, r0
 871              	.LVL113:
 426:Src/main.c    ****     TIM5->CNT = 0;
 872              		.loc 1 426 0
 873 0032 0023     		movs	r3, #0
 874 0034 234A     		ldr	r2, .L57+20
 875 0036 5362     		str	r3, [r2, #36]
 427:Src/main.c    **** 
 876              		.loc 1 427 0
 877 0038 02F58062 		add	r2, r2, #1024
 878 003c 5362     		str	r3, [r2, #36]
 429:Src/main.c    **** 
 879              		.loc 1 429 0
 880 003e 0193     		str	r3, [sp, #4]
 881 0040 0293     		str	r3, [sp, #8]
 882 0042 0393     		str	r3, [sp, #12]
 883 0044 0493     		str	r3, [sp, #16]
 884 0046 ADF81430 		strh	r3, [sp, #20]	@ movhi
 431:Src/main.c    ****     {
 885              		.loc 1 431 0
 886 004a 1DB3     		cbz	r5, .L53
 433:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 887              		.loc 1 433 0
 888 004c 1846     		mov	r0, r3
 889 004e 1946     		mov	r1, r3
 890 0050 FFF7FEFF 		bl	set_motor_speed
 891              	.LVL114:
 434:Src/main.c    ****         while (TIM5->CNT < counts)
 892              		.loc 1 434 0
 893 0054 0820     		movs	r0, #8
 894 0056 47F23051 		movw	r1, #30000
 895 005a FFF7FEFF 		bl	set_motor_speed
 896              	.LVL115:
 435:Src/main.c    ****         {
 897              		.loc 1 435 0
 898 005e 09E0     		b	.L54
 899              	.L55:
 437:Src/main.c    ****             print(msg, 4);
 900              		.loc 1 437 0
 901 0060 194B     		ldr	r3, .L57+24
 902 0062 5A6A     		ldr	r2, [r3, #36]
 903 0064 01A8     		add	r0, sp, #4
 904 0066 1949     		ldr	r1, .L57+28
 905 0068 FFF7FEFF 		bl	sprintf
 906              	.LVL116:
 438:Src/main.c    ****         }
 907              		.loc 1 438 0
 908 006c 01A8     		add	r0, sp, #4
 909 006e 0421     		movs	r1, #4
 910 0070 FFF7FEFF 		bl	print
 911              	.LVL117:
 912              	.L54:
 435:Src/main.c    ****         {
 913              		.loc 1 435 0
 914 0074 144B     		ldr	r3, .L57+24
 915 0076 5B6A     		ldr	r3, [r3, #36]
 916 0078 A342     		cmp	r3, r4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 31


 917 007a F1D3     		bcc	.L55
 440:Src/main.c    ****         print(msg, 4);
 918              		.loc 1 440 0
 919 007c 124C     		ldr	r4, .L57+24
 920              	.LVL118:
 921 007e 626A     		ldr	r2, [r4, #36]
 922 0080 01A8     		add	r0, sp, #4
 923 0082 1249     		ldr	r1, .L57+28
 924 0084 FFF7FEFF 		bl	sprintf
 925              	.LVL119:
 441:Src/main.c    ****         TIM5->CNT = 0;
 926              		.loc 1 441 0
 927 0088 01A8     		add	r0, sp, #4
 928 008a 0421     		movs	r1, #4
 929 008c FFF7FEFF 		bl	print
 930              	.LVL120:
 442:Src/main.c    ****     }
 931              		.loc 1 442 0
 932 0090 0023     		movs	r3, #0
 933 0092 6362     		str	r3, [r4, #36]
 934              	.L53:
 457:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 935              		.loc 1 457 0
 936 0094 0020     		movs	r0, #0
 937 0096 0146     		mov	r1, r0
 938 0098 FFF7FEFF 		bl	set_motor_speed
 939              	.LVL121:
 458:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 940              		.loc 1 458 0
 941 009c 0820     		movs	r0, #8
 942 009e 0021     		movs	r1, #0
 943 00a0 FFF7FEFF 		bl	set_motor_speed
 944              	.LVL122:
 459:Src/main.c    **** }
 945              		.loc 1 459 0
 946 00a4 0448     		ldr	r0, .L57+8
 947 00a6 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 948              	.LVL123:
 460:Src/main.c    **** 
 949              		.loc 1 460 0
 950 00aa 07B0     		add	sp, sp, #28
 951              	.LCFI16:
 952              		.cfi_def_cfa_offset 12
 953              		@ sp needed
 954 00ac 30BD     		pop	{r4, r5, pc}
 955              	.L58:
 956 00ae 00BF     		.align	3
 957              	.L57:
 958 00b0 721CC771 		.word	1908874354
 959 00b4 1CC7E13F 		.word	1071761180
 960 00b8 00000000 		.word	hadc1
 961 00bc 00000000 		.word	dma_buffer
 962 00c0 00004940 		.word	1078525952
 963 00c4 00080040 		.word	1073743872
 964 00c8 000C0040 		.word	1073744896
 965 00cc 34000000 		.word	.LC5
 966              		.cfi_endproc
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 32


 967              	.LFE127:
 969              		.section	.text.pi_navigation,"ax",%progbits
 970              		.align	2
 971              		.global	pi_navigation
 972              		.thumb
 973              		.thumb_func
 975              	pi_navigation:
 976              	.LFB128:
 463:Src/main.c    ****     print("Pi nav", 0);
 977              		.loc 1 463 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 0
 980              		@ frame_needed = 0, uses_anonymous_args = 0
 981 0000 08B5     		push	{r3, lr}
 982              	.LCFI17:
 983              		.cfi_def_cfa_offset 8
 984              		.cfi_offset 3, -8
 985              		.cfi_offset 14, -4
 986 0002 2DED028B 		fstmfdd	sp!, {d8}
 987              	.LCFI18:
 988              		.cfi_def_cfa_offset 16
 989              		.cfi_offset 80, -16
 990              		.cfi_offset 81, -12
 464:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 991              		.loc 1 464 0
 992 0006 2948     		ldr	r0, .L68
 993 0008 0021     		movs	r1, #0
 994 000a FFF7FEFF 		bl	print
 995              	.LVL124:
 465:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 996              		.loc 1 465 0
 997 000e 2848     		ldr	r0, .L68+4
 998 0010 2849     		ldr	r1, .L68+8
 999 0012 4FF44062 		mov	r2, #3072
 1000 0016 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1001              	.LVL125:
 467:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
 1002              		.loc 1 467 0
 1003 001a 4FF4FA70 		mov	r0, #500
 1004 001e FFF7FEFF 		bl	HAL_Delay
 1005              	.LVL126:
 468:Src/main.c    ****     if (heading < 0)
 1006              		.loc 1 468 0
 1007 0022 254B     		ldr	r3, .L68+12
 1008 0024 5869     		ldr	r0, [r3, #20]
 1009 0026 FFF7FEFF 		bl	calculate_heading
 1010              	.LVL127:
 1011 002a B0EE408A 		fcpys	s16, s0
 1012              	.LVL128:
 469:Src/main.c    ****     {
 1013              		.loc 1 469 0
 1014 002e B5EEC00A 		fcmpezs	s0
 1015 0032 F1EE10FA 		fmstat
 1016 0036 0CD5     		bpl	.L66
 471:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0.3 * MOTOR_SPEED);
 1017              		.loc 1 471 0
 1018 0038 0420     		movs	r0, #4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 33


 1019 003a 4FF49671 		mov	r1, #300
 1020 003e FFF7FEFF 		bl	set_motor_speed
 1021              	.LVL129:
 472:Src/main.c    ****         heading *= -1;
 1022              		.loc 1 472 0
 1023 0042 0820     		movs	r0, #8
 1024 0044 4FF49671 		mov	r1, #300
 1025 0048 FFF7FEFF 		bl	set_motor_speed
 1026              	.LVL130:
 473:Src/main.c    ****     }
 1027              		.loc 1 473 0
 1028 004c B1EE488A 		fnegs	s16, s16
 1029              	.LVL131:
 1030 0050 0EE0     		b	.L62
 1031              	.LVL132:
 1032              	.L66:
 475:Src/main.c    ****     {
 1033              		.loc 1 475 0
 1034 0052 B5EEC00A 		fcmpezs	s0
 1035 0056 F1EE10FA 		fmstat
 1036 005a 09DD     		ble	.L62
 477:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 0.3 * MOTOR_SPEED);
 1037              		.loc 1 477 0
 1038 005c 0020     		movs	r0, #0
 1039 005e 4FF49671 		mov	r1, #300
 1040 0062 FFF7FEFF 		bl	set_motor_speed
 1041              	.LVL133:
 478:Src/main.c    ****     }
 1042              		.loc 1 478 0
 1043 0066 0C20     		movs	r0, #12
 1044 0068 4FF49671 		mov	r1, #300
 1045 006c FFF7FEFF 		bl	set_motor_speed
 1046              	.LVL134:
 1047              	.L62:
 480:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0.3 * MOTOR_SPEED);
 1048              		.loc 1 480 0
 1049 0070 DFED127A 		flds	s15, .L68+16
 1050 0074 28EE278A 		fmuls	s16, s16, s15
 1051              	.LVL135:
 1052 0078 FCEEC87A 		ftouizs	s15, s16
 1053 007c 17EE900A 		fmrs	r0, s15	@ int
 1054 0080 FFF7FEFF 		bl	HAL_Delay
 1055              	.LVL136:
 481:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0.3 * MOTOR_SPEED);
 1056              		.loc 1 481 0
 1057 0084 0020     		movs	r0, #0
 1058 0086 4FF49671 		mov	r1, #300
 1059 008a FFF7FEFF 		bl	set_motor_speed
 1060              	.LVL137:
 482:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 1061              		.loc 1 482 0
 1062 008e 0820     		movs	r0, #8
 1063 0090 4FF49671 		mov	r1, #300
 1064 0094 FFF7FEFF 		bl	set_motor_speed
 1065              	.LVL138:
 483:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 1066              		.loc 1 483 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 34


 1067 0098 0548     		ldr	r0, .L68+4
 1068 009a FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1069              	.LVL139:
 484:Src/main.c    **** }
 1070              		.loc 1 484 0
 1071 009e 0022     		movs	r2, #0
 1072 00a0 074B     		ldr	r3, .L68+20
 1073 00a2 1A70     		strb	r2, [r3]
 485:Src/main.c    **** 
 1074              		.loc 1 485 0
 1075 00a4 BDEC028B 		fldmfdd	sp!, {d8}
 1076              	.LCFI19:
 1077              		.cfi_restore 80
 1078              		.cfi_restore 81
 1079              		.cfi_def_cfa_offset 8
 1080 00a8 08BD     		pop	{r3, pc}
 1081              	.L69:
 1082 00aa 00BF     		.align	2
 1083              	.L68:
 1084 00ac 54000000 		.word	.LC7
 1085 00b0 00000000 		.word	hadc1
 1086 00b4 00000000 		.word	dma_buffer
 1087 00b8 00000000 		.word	adc_values
 1088 00bc 0000FA44 		.word	1157234688
 1089 00c0 00000000 		.word	PI_INT_STATE
 1090              		.cfi_endproc
 1091              	.LFE128:
 1093              		.section	.text.menu,"ax",%progbits
 1094              		.align	2
 1095              		.global	menu
 1096              		.thumb
 1097              		.thumb_func
 1099              	menu:
 1100              	.LFB133:
 586:Src/main.c    ****     print("Starting", 0);
 1101              		.loc 1 586 0
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 32
 1104              		@ frame_needed = 0, uses_anonymous_args = 0
 1105              	.LVL140:
 1106 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1107              	.LCFI20:
 1108              		.cfi_def_cfa_offset 24
 1109              		.cfi_offset 4, -24
 1110              		.cfi_offset 5, -20
 1111              		.cfi_offset 6, -16
 1112              		.cfi_offset 7, -12
 1113              		.cfi_offset 8, -8
 1114              		.cfi_offset 14, -4
 1115 0004 8AB0     		sub	sp, sp, #40
 1116              	.LCFI21:
 1117              		.cfi_def_cfa_offset 64
 1118 0006 0646     		mov	r6, r0
 587:Src/main.c    ****     char msg[20] = "";
 1119              		.loc 1 587 0
 1120 0008 7148     		ldr	r0, .L84
 1121              	.LVL141:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 35


 1122 000a 0021     		movs	r1, #0
 1123 000c FFF7FEFF 		bl	print
 1124              	.LVL142:
 588:Src/main.c    ****     int pid_select = 0;
 1125              		.loc 1 588 0
 1126 0010 0025     		movs	r5, #0
 1127 0012 0595     		str	r5, [sp, #20]
 1128 0014 0695     		str	r5, [sp, #24]
 1129 0016 0795     		str	r5, [sp, #28]
 1130 0018 0895     		str	r5, [sp, #32]
 1131 001a 0995     		str	r5, [sp, #36]
 1132              	.LVL143:
 590:Src/main.c    ****     while (1)
 1133              		.loc 1 590 0
 1134 001c 0295     		str	r5, [sp, #8]
 1135 001e 0395     		str	r5, [sp, #12]
 1136 0020 0495     		str	r5, [sp, #16]
 1137              	.LVL144:
 1138              	.L74:
 593:Src/main.c    ****         {
 1139              		.loc 1 593 0
 1140 0022 6C48     		ldr	r0, .L84+4
 1141 0024 4FF40051 		mov	r1, #8192
 1142 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1143              	.LVL145:
 1144 002c 38BB     		cbnz	r0, .L71
 595:Src/main.c    ****             print(msg, 0);
 1145              		.loc 1 595 0
 1146 002e 0AAB     		add	r3, sp, #40
 1147 0030 03EB8503 		add	r3, r3, r5, lsl #2
 1148 0034 53F8204C 		ldr	r4, [r3, #-32]
 1149 0038 05A8     		add	r0, sp, #20
 1150 003a 6749     		ldr	r1, .L84+8
 1151 003c 2246     		mov	r2, r4
 1152 003e FFF7FEFF 		bl	sprintf
 1153              	.LVL146:
 596:Src/main.c    ****             TIM4->CNT = values[pid_select];
 1154              		.loc 1 596 0
 1155 0042 05A8     		add	r0, sp, #20
 1156 0044 0021     		movs	r1, #0
 1157 0046 FFF7FEFF 		bl	print
 1158              	.LVL147:
 597:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 1159              		.loc 1 597 0
 1160 004a 644B     		ldr	r3, .L84+12
 1161 004c 5C62     		str	r4, [r3, #36]
 598:Src/main.c    ****             {
 1162              		.loc 1 598 0
 1163 004e 0EE0     		b	.L72
 1164              	.L73:
 600:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 1165              		.loc 1 600 0
 1166 0050 624B     		ldr	r3, .L84+12
 1167 0052 5A6A     		ldr	r2, [r3, #36]
 1168 0054 0AAB     		add	r3, sp, #40
 1169 0056 03EB8503 		add	r3, r3, r5, lsl #2
 1170 005a 43F8202C 		str	r2, [r3, #-32]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 36


 601:Src/main.c    ****                 print(msg, 0);
 1171              		.loc 1 601 0
 1172 005e 05A8     		add	r0, sp, #20
 1173 0060 5D49     		ldr	r1, .L84+8
 1174 0062 FFF7FEFF 		bl	sprintf
 1175              	.LVL148:
 602:Src/main.c    ****             }
 1176              		.loc 1 602 0
 1177 0066 05A8     		add	r0, sp, #20
 1178 0068 0021     		movs	r1, #0
 1179 006a FFF7FEFF 		bl	print
 1180              	.LVL149:
 1181              	.L72:
 598:Src/main.c    ****             {
 1182              		.loc 1 598 0
 1183 006e 5948     		ldr	r0, .L84+4
 1184 0070 4FF40051 		mov	r1, #8192
 1185 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1186              	.LVL150:
 1187 0078 0028     		cmp	r0, #0
 1188 007a E9D0     		beq	.L73
 604:Src/main.c    ****         }
 1189              		.loc 1 604 0
 1190 007c 0135     		adds	r5, r5, #1
 1191              	.LVL151:
 1192              	.L71:
 606:Src/main.c    ****             break;
 1193              		.loc 1 606 0
 1194 007e 032D     		cmp	r5, #3
 1195 0080 CFD1     		bne	.L74
 1196              	.L82:
 1197              	.LVL152:
 1198              	.LBB3:
 612:Src/main.c    ****         {
 1199              		.loc 1 612 0
 1200 0082 5448     		ldr	r0, .L84+4
 1201 0084 4FF40051 		mov	r1, #8192
 1202 0088 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1203              	.LVL153:
 1204 008c 0028     		cmp	r0, #0
 1205 008e 45D1     		bne	.L75
 614:Src/main.c    ****             {
 1206              		.loc 1 614 0
 1207 0090 032D     		cmp	r5, #3
 1208 0092 09D1     		bne	.L76
 616:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 1209              		.loc 1 616 0
 1210 0094 524C     		ldr	r4, .L84+16
 1211 0096 2046     		mov	r0, r4
 1212 0098 0021     		movs	r1, #0
 1213 009a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1214              	.LVL154:
 617:Src/main.c    ****             }
 1215              		.loc 1 617 0
 1216 009e 2046     		mov	r0, r4
 1217 00a0 0821     		movs	r1, #8
 1218 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 37


 1219              	.LVL155:
 1220 00a6 08E0     		b	.L77
 1221              	.L76:
 621:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1222              		.loc 1 621 0
 1223 00a8 4D4C     		ldr	r4, .L84+16
 1224 00aa 2046     		mov	r0, r4
 1225 00ac 0021     		movs	r1, #0
 1226 00ae FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1227              	.LVL156:
 622:Src/main.c    ****             }
 1228              		.loc 1 622 0
 1229 00b2 2046     		mov	r0, r4
 1230 00b4 0821     		movs	r1, #8
 1231 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1232              	.LVL157:
 1233              	.L77:
 624:Src/main.c    ****             print(msg, 0);
 1234              		.loc 1 624 0
 1235 00ba 05A8     		add	r0, sp, #20
 1236 00bc 4949     		ldr	r1, .L84+20
 1237 00be 4FF49672 		mov	r2, #300
 1238 00c2 FFF7FEFF 		bl	sprintf
 1239              	.LVL158:
 625:Src/main.c    ****             TIM4->CNT = speed;
 1240              		.loc 1 625 0
 1241 00c6 05A8     		add	r0, sp, #20
 1242 00c8 0021     		movs	r1, #0
 1243 00ca FFF7FEFF 		bl	print
 1244              	.LVL159:
 626:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 1245              		.loc 1 626 0
 1246 00ce 4FF49672 		mov	r2, #300
 1247 00d2 424B     		ldr	r3, .L84+12
 1248 00d4 5A62     		str	r2, [r3, #36]
 627:Src/main.c    ****             {
 1249              		.loc 1 627 0
 1250 00d6 19E0     		b	.L78
 1251              	.LVL160:
 1252              	.L81:
 629:Src/main.c    ****                 sprintf(msg, "%d", speed);
 1253              		.loc 1 629 0
 1254 00d8 404B     		ldr	r3, .L84+12
 1255 00da 5C6A     		ldr	r4, [r3, #36]
 1256              	.LVL161:
 630:Src/main.c    ****                 print(msg, 0);
 1257              		.loc 1 630 0
 1258 00dc 05A8     		add	r0, sp, #20
 1259 00de 4149     		ldr	r1, .L84+20
 1260 00e0 2246     		mov	r2, r4
 1261 00e2 FFF7FEFF 		bl	sprintf
 1262              	.LVL162:
 631:Src/main.c    ****                 if (pid_select == 3)
 1263              		.loc 1 631 0
 1264 00e6 05A8     		add	r0, sp, #20
 1265 00e8 0021     		movs	r1, #0
 1266 00ea FFF7FEFF 		bl	print
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 38


 1267              	.LVL163:
 632:Src/main.c    ****                 {
 1268              		.loc 1 632 0
 1269 00ee 032D     		cmp	r5, #3
 1270 00f0 06D1     		bne	.L79
 634:Src/main.c    ****                     LEFT_SPEED = speed;
 1271              		.loc 1 634 0
 1272 00f2 0020     		movs	r0, #0
 1273 00f4 2146     		mov	r1, r4
 1274 00f6 FFF7FEFF 		bl	set_motor_speed
 1275              	.LVL164:
 635:Src/main.c    ****                 }
 1276              		.loc 1 635 0
 1277 00fa 3B4B     		ldr	r3, .L84+24
 1278 00fc 1C80     		strh	r4, [r3]	@ movhi
 1279 00fe 05E0     		b	.L78
 1280              	.L79:
 639:Src/main.c    ****                     RIGHT_SPEED = speed;
 1281              		.loc 1 639 0
 1282 0100 0820     		movs	r0, #8
 1283 0102 2146     		mov	r1, r4
 1284 0104 FFF7FEFF 		bl	set_motor_speed
 1285              	.LVL165:
 640:Src/main.c    ****                 }
 1286              		.loc 1 640 0
 1287 0108 384B     		ldr	r3, .L84+28
 1288 010a 1C80     		strh	r4, [r3]	@ movhi
 1289              	.LVL166:
 1290              	.L78:
 627:Src/main.c    ****             {
 1291              		.loc 1 627 0
 1292 010c 3148     		ldr	r0, .L84+4
 1293 010e 4FF40051 		mov	r1, #8192
 1294 0112 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1295              	.LVL167:
 1296 0116 0028     		cmp	r0, #0
 1297 0118 DED0     		beq	.L81
 643:Src/main.c    ****         }
 1298              		.loc 1 643 0
 1299 011a 0135     		adds	r5, r5, #1
 1300              	.LVL168:
 1301              	.L75:
 645:Src/main.c    ****         {
 1302              		.loc 1 645 0
 1303 011c 052D     		cmp	r5, #5
 1304 011e B0D1     		bne	.L82
 1305              	.LBE3:
 650:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 1306              		.loc 1 650 0
 1307 0120 2F4C     		ldr	r4, .L84+16
 1308 0122 2046     		mov	r0, r4
 1309 0124 0021     		movs	r1, #0
 1310 0126 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1311              	.LVL169:
 651:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 1312              		.loc 1 651 0
 1313 012a 2046     		mov	r0, r4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 39


 1314 012c 0821     		movs	r1, #8
 1315 012e FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1316              	.LVL170:
 652:Src/main.c    ****     print(msg, 0);
 1317              		.loc 1 652 0
 1318 0132 DDF80880 		ldr	r8, [sp, #8]
 1319 0136 05A8     		add	r0, sp, #20
 1320 0138 2D49     		ldr	r1, .L84+32
 1321 013a 4246     		mov	r2, r8
 1322 013c FFF7FEFF 		bl	sprintf
 1323              	.LVL171:
 653:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 1324              		.loc 1 653 0
 1325 0140 05A8     		add	r0, sp, #20
 1326 0142 0021     		movs	r1, #0
 1327 0144 FFF7FEFF 		bl	print
 1328              	.LVL172:
 654:Src/main.c    ****     print(msg, 1);
 1329              		.loc 1 654 0
 1330 0148 039F     		ldr	r7, [sp, #12]
 1331 014a 05A8     		add	r0, sp, #20
 1332 014c 2949     		ldr	r1, .L84+36
 1333 014e 3A46     		mov	r2, r7
 1334 0150 FFF7FEFF 		bl	sprintf
 1335              	.LVL173:
 655:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 1336              		.loc 1 655 0
 1337 0154 05A8     		add	r0, sp, #20
 1338 0156 0121     		movs	r1, #1
 1339 0158 FFF7FEFF 		bl	print
 1340              	.LVL174:
 656:Src/main.c    ****     print(msg, 2);
 1341              		.loc 1 656 0
 1342 015c 049D     		ldr	r5, [sp, #16]
 1343              	.LVL175:
 1344 015e 05A8     		add	r0, sp, #20
 1345 0160 2549     		ldr	r1, .L84+40
 1346 0162 2A46     		mov	r2, r5
 1347 0164 FFF7FEFF 		bl	sprintf
 1348              	.LVL176:
 657:Src/main.c    ****     sprintf(msg, "L %u", LEFT_SPEED);
 1349              		.loc 1 657 0
 1350 0168 05A8     		add	r0, sp, #20
 1351 016a 0221     		movs	r1, #2
 1352 016c FFF7FEFF 		bl	print
 1353              	.LVL177:
 658:Src/main.c    ****     print(msg, 3);
 1354              		.loc 1 658 0
 1355 0170 05A8     		add	r0, sp, #20
 1356 0172 2249     		ldr	r1, .L84+44
 1357 0174 1C4B     		ldr	r3, .L84+24
 1358 0176 1A88     		ldrh	r2, [r3]
 1359 0178 FFF7FEFF 		bl	sprintf
 1360              	.LVL178:
 659:Src/main.c    ****     sprintf(msg, "R %u", RIGHT_SPEED);
 1361              		.loc 1 659 0
 1362 017c 05A8     		add	r0, sp, #20
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 40


 1363 017e 0321     		movs	r1, #3
 1364 0180 FFF7FEFF 		bl	print
 1365              	.LVL179:
 660:Src/main.c    ****     print(msg, 4);
 1366              		.loc 1 660 0
 1367 0184 05A8     		add	r0, sp, #20
 1368 0186 1E49     		ldr	r1, .L84+48
 1369 0188 184B     		ldr	r3, .L84+28
 1370 018a 1A88     		ldrh	r2, [r3]
 1371 018c FFF7FEFF 		bl	sprintf
 1372              	.LVL180:
 661:Src/main.c    ****     HAL_Delay(1000);
 1373              		.loc 1 661 0
 1374 0190 05A8     		add	r0, sp, #20
 1375 0192 0421     		movs	r1, #4
 1376 0194 FFF7FEFF 		bl	print
 1377              	.LVL181:
 662:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1378              		.loc 1 662 0
 1379 0198 4FF47A70 		mov	r0, #1000
 1380 019c FFF7FEFF 		bl	HAL_Delay
 1381              	.LVL182:
 663:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1382              		.loc 1 663 0
 1383 01a0 2046     		mov	r0, r4
 1384 01a2 0021     		movs	r1, #0
 1385 01a4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1386              	.LVL183:
 664:Src/main.c    ****     return pid_Init(values[0], values[1], values[2], 5, 100);
 1387              		.loc 1 664 0
 1388 01a8 2046     		mov	r0, r4
 1389 01aa 0821     		movs	r1, #8
 1390 01ac FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1391              	.LVL184:
 665:Src/main.c    **** }
 1392              		.loc 1 665 0
 1393 01b0 0523     		movs	r3, #5
 1394 01b2 0093     		str	r3, [sp]
 1395 01b4 6423     		movs	r3, #100
 1396 01b6 0193     		str	r3, [sp, #4]
 1397 01b8 3046     		mov	r0, r6
 1398 01ba 1FFA88F1 		uxth	r1, r8
 1399 01be BAB2     		uxth	r2, r7
 1400 01c0 ABB2     		uxth	r3, r5
 1401 01c2 FFF7FEFF 		bl	pid_Init
 1402              	.LVL185:
 666:Src/main.c    **** 
 1403              		.loc 1 666 0
 1404 01c6 3046     		mov	r0, r6
 1405 01c8 0AB0     		add	sp, sp, #40
 1406              	.LCFI22:
 1407              		.cfi_def_cfa_offset 24
 1408              		@ sp needed
 1409 01ca BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1410              	.LVL186:
 1411              	.L85:
 1412 01ce 00BF     		.align	2
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 41


 1413              	.L84:
 1414 01d0 5C000000 		.word	.LC8
 1415 01d4 00080240 		.word	1073874944
 1416 01d8 68000000 		.word	.LC9
 1417 01dc 00080040 		.word	1073743872
 1418 01e0 00000000 		.word	htim1
 1419 01e4 6C000000 		.word	.LC10
 1420 01e8 00000000 		.word	.LANCHOR0
 1421 01ec 00000000 		.word	.LANCHOR1
 1422 01f0 70000000 		.word	.LC11
 1423 01f4 78000000 		.word	.LC12
 1424 01f8 80000000 		.word	.LC13
 1425 01fc 88000000 		.word	.LC14
 1426 0200 90000000 		.word	.LC15
 1427              		.cfi_endproc
 1428              	.LFE133:
 1430              		.section	.text.do_pid,"ax",%progbits
 1431              		.align	2
 1432              		.global	do_pid
 1433              		.thumb
 1434              		.thumb_func
 1436              	do_pid:
 1437              	.LFB134:
 669:Src/main.c    ****     /* Read sensors */
 1438              		.loc 1 669 0
 1439              		.cfi_startproc
 1440              		@ args = 0, pretend = 0, frame = 24
 1441              		@ frame_needed = 0, uses_anonymous_args = 0
 1442              	.LVL187:
 1443 0000 70B5     		push	{r4, r5, r6, lr}
 1444              	.LCFI23:
 1445              		.cfi_def_cfa_offset 16
 1446              		.cfi_offset 4, -16
 1447              		.cfi_offset 5, -12
 1448              		.cfi_offset 6, -8
 1449              		.cfi_offset 14, -4
 1450 0002 86B0     		sub	sp, sp, #24
 1451              	.LCFI24:
 1452              		.cfi_def_cfa_offset 40
 1453 0004 0646     		mov	r6, r0
 671:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 1454              		.loc 1 671 0
 1455 0006 2D4D     		ldr	r5, .L95
 1456 0008 2846     		mov	r0, r5
 1457              	.LVL188:
 1458 000a 4FF48041 		mov	r1, #16384
 1459 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1460              	.LVL189:
 1461 0012 B0FA80F4 		clz	r4, r0
 1462 0016 6409     		lsrs	r4, r4, #5
 1463              	.LVL190:
 672:Src/main.c    **** 
 1464              		.loc 1 672 0
 1465 0018 2846     		mov	r0, r5
 1466 001a 4FF40041 		mov	r1, #32768
 1467 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1468              	.LVL191:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 42


 1469 0022 B0FA80F0 		clz	r0, r0
 1470 0026 4009     		lsrs	r0, r0, #5
 1471              	.LVL192:
 675:Src/main.c    ****     {
 1472              		.loc 1 675 0
 1473 0028 1CB1     		cbz	r4, .L87
 675:Src/main.c    ****     {
 1474              		.loc 1 675 0 is_stmt 0 discriminator 1
 1475 002a 10B1     		cbz	r0, .L87
 677:Src/main.c    ****     }
 1476              		.loc 1 677 0 is_stmt 1
 1477 002c 0023     		movs	r3, #0
 1478 002e 3361     		str	r3, [r6, #16]
 1479 0030 1AE0     		b	.L88
 1480              	.L87:
 679:Src/main.c    ****     {
 1481              		.loc 1 679 0
 1482 0032 1CB1     		cbz	r4, .L89
 679:Src/main.c    ****     {
 1483              		.loc 1 679 0 is_stmt 0 discriminator 1
 1484 0034 10B9     		cbnz	r0, .L89
 681:Src/main.c    ****     }
 1485              		.loc 1 681 0 is_stmt 1
 1486 0036 0123     		movs	r3, #1
 1487 0038 3361     		str	r3, [r6, #16]
 1488 003a 15E0     		b	.L88
 1489              	.L89:
 683:Src/main.c    ****     {
 1490              		.loc 1 683 0
 1491 003c 24B9     		cbnz	r4, .L90
 683:Src/main.c    ****     {
 1492              		.loc 1 683 0 is_stmt 0 discriminator 1
 1493 003e 18B1     		cbz	r0, .L90
 685:Src/main.c    ****     }
 1494              		.loc 1 685 0 is_stmt 1
 1495 0040 4FF0FF33 		mov	r3, #-1
 1496 0044 3361     		str	r3, [r6, #16]
 1497 0046 0FE0     		b	.L88
 1498              	.L90:
 687:Src/main.c    ****     {
 1499              		.loc 1 687 0
 1500 0048 3CB9     		cbnz	r4, .L91
 687:Src/main.c    ****     {
 1501              		.loc 1 687 0 is_stmt 0 discriminator 1
 1502 004a 30B9     		cbnz	r0, .L91
 687:Src/main.c    ****     {
 1503              		.loc 1 687 0 discriminator 2
 1504 004c 3369     		ldr	r3, [r6, #16]
 1505 004e 002B     		cmp	r3, #0
 1506 0050 03DA     		bge	.L91
 689:Src/main.c    ****     }
 1507              		.loc 1 689 0 is_stmt 1
 1508 0052 6FF00403 		mvn	r3, #4
 1509 0056 3361     		str	r3, [r6, #16]
 1510 0058 06E0     		b	.L88
 1511              	.L91:
 691:Src/main.c    ****     {
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 43


 1512              		.loc 1 691 0
 1513 005a 2CB9     		cbnz	r4, .L88
 691:Src/main.c    ****     {
 1514              		.loc 1 691 0 is_stmt 0 discriminator 1
 1515 005c 20B9     		cbnz	r0, .L88
 691:Src/main.c    ****     {
 1516              		.loc 1 691 0 discriminator 2
 1517 005e 3369     		ldr	r3, [r6, #16]
 1518 0060 002B     		cmp	r3, #0
 1519 0062 01DD     		ble	.L88
 693:Src/main.c    ****     }
 1520              		.loc 1 693 0 is_stmt 1
 1521 0064 0523     		movs	r3, #5
 1522 0066 3361     		str	r3, [r6, #16]
 1523              	.L88:
 697:Src/main.c    ****     char msg[20] = "";
 1524              		.loc 1 697 0
 1525 0068 3046     		mov	r0, r6
 1526              	.LVL193:
 1527 006a FFF7FEFF 		bl	pid_GetGain
 1528              	.LVL194:
 1529 006e 85B2     		uxth	r5, r0
 1530              	.LVL195:
 698:Src/main.c    ****     sprintf(msg, "%d", (int)gain);
 1531              		.loc 1 698 0
 1532 0070 0024     		movs	r4, #0
 1533              	.LVL196:
 1534 0072 0194     		str	r4, [sp, #4]
 1535 0074 0294     		str	r4, [sp, #8]
 1536 0076 0394     		str	r4, [sp, #12]
 1537 0078 0494     		str	r4, [sp, #16]
 1538 007a 0594     		str	r4, [sp, #20]
 699:Src/main.c    ****     print(msg, 0);
 1539              		.loc 1 699 0
 1540 007c 2EB2     		sxth	r6, r5
 1541              	.LVL197:
 1542 007e 01A8     		add	r0, sp, #4
 1543 0080 0F49     		ldr	r1, .L95+4
 1544 0082 3246     		mov	r2, r6
 1545 0084 FFF7FEFF 		bl	sprintf
 1546              	.LVL198:
 700:Src/main.c    ****     /* Set Motor Speeds*/
 1547              		.loc 1 700 0
 1548 0088 01A8     		add	r0, sp, #4
 1549 008a 2146     		mov	r1, r4
 1550 008c FFF7FEFF 		bl	print
 1551              	.LVL199:
 702:Src/main.c    ****     int rspeed = RIGHT_SPEED;
 1552              		.loc 1 702 0
 1553 0090 0C4B     		ldr	r3, .L95+8
 1554 0092 1988     		ldrh	r1, [r3]
 1555              	.LVL200:
 703:Src/main.c    ****     if (gain < 0)
 1556              		.loc 1 703 0
 1557 0094 0C4B     		ldr	r3, .L95+12
 1558 0096 1C88     		ldrh	r4, [r3]
 1559              	.LVL201:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 44


 704:Src/main.c    ****     {
 1560              		.loc 1 704 0
 1561 0098 002E     		cmp	r6, #0
 1562 009a 01DA     		bge	.L92
 706:Src/main.c    ****     }
 1563              		.loc 1 706 0
 1564 009c 891B     		subs	r1, r1, r6
 1565              	.LVL202:
 1566 009e 03E0     		b	.L93
 1567              	.L92:
 708:Src/main.c    ****     {
 1568              		.loc 1 708 0
 1569 00a0 2DB2     		sxth	r5, r5
 1570 00a2 002D     		cmp	r5, #0
 1571 00a4 00DD     		ble	.L93
 710:Src/main.c    ****     }
 1572              		.loc 1 710 0
 1573 00a6 3444     		add	r4, r4, r6
 1574              	.LVL203:
 1575              	.L93:
 712:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1576              		.loc 1 712 0
 1577 00a8 0020     		movs	r0, #0
 1578 00aa FFF7FEFF 		bl	set_motor_speed
 1579              	.LVL204:
 713:Src/main.c    **** }
 1580              		.loc 1 713 0
 1581 00ae 0820     		movs	r0, #8
 1582 00b0 2146     		mov	r1, r4
 1583 00b2 FFF7FEFF 		bl	set_motor_speed
 1584              	.LVL205:
 714:Src/main.c    **** 
 1585              		.loc 1 714 0
 1586 00b6 06B0     		add	sp, sp, #24
 1587              	.LCFI25:
 1588              		.cfi_def_cfa_offset 16
 1589              		@ sp needed
 1590 00b8 70BD     		pop	{r4, r5, r6, pc}
 1591              	.LVL206:
 1592              	.L96:
 1593 00ba 00BF     		.align	2
 1594              	.L95:
 1595 00bc 00040240 		.word	1073873920
 1596 00c0 6C000000 		.word	.LC10
 1597 00c4 00000000 		.word	.LANCHOR0
 1598 00c8 00000000 		.word	.LANCHOR1
 1599              		.cfi_endproc
 1600              	.LFE134:
 1602              		.section	.text.encoder_pid,"ax",%progbits
 1603              		.align	2
 1604              		.global	encoder_pid
 1605              		.thumb
 1606              		.thumb_func
 1608              	encoder_pid:
 1609              	.LFB136:
 735:Src/main.c    **** }
 736:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 45


 737:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc)
 738:Src/main.c    **** {
 1610              		.loc 1 738 0
 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 24
 1613              		@ frame_needed = 0, uses_anonymous_args = 0
 1614              	.LVL207:
 1615 0000 70B5     		push	{r4, r5, r6, lr}
 1616              	.LCFI26:
 1617              		.cfi_def_cfa_offset 16
 1618              		.cfi_offset 4, -16
 1619              		.cfi_offset 5, -12
 1620              		.cfi_offset 6, -8
 1621              		.cfi_offset 14, -4
 1622 0002 2DED048B 		fstmfdd	sp!, {d8, d9}
 1623              	.LCFI27:
 1624              		.cfi_def_cfa_offset 32
 1625              		.cfi_offset 80, -32
 1626              		.cfi_offset 81, -28
 1627              		.cfi_offset 82, -24
 1628              		.cfi_offset 83, -20
 1629 0006 86B0     		sub	sp, sp, #24
 1630              	.LCFI28:
 1631              		.cfi_def_cfa_offset 56
 1632 0008 0546     		mov	r5, r0
 1633 000a 1446     		mov	r4, r2
 1634 000c 1E46     		mov	r6, r3
 739:Src/main.c    ****     /* Get error */
 740:Src/main.c    ****     float l_enc = update_encoder(left_enc);
 1635              		.loc 1 740 0
 1636 000e 0846     		mov	r0, r1
 1637              	.LVL208:
 1638 0010 FFF7FEFF 		bl	update_encoder
 1639              	.LVL209:
 1640 0014 F0EE408A 		fcpys	s17, s0
 1641              	.LVL210:
 741:Src/main.c    ****     float r_enc = update_encoder(right_enc);
 1642              		.loc 1 741 0
 1643 0018 3046     		mov	r0, r6
 1644 001a FFF7FEFF 		bl	update_encoder
 1645              	.LVL211:
 1646 001e B0EE408A 		fcpys	s16, s0
 1647              	.LVL212:
 742:Src/main.c    ****     left_pid->err = ENCODER_GOAL - l_enc;
 1648              		.loc 1 742 0
 1649 0022 F0EE007A 		fconsts	s15, #0
 1650 0026 37EEE87A 		fsubs	s14, s15, s17
 1651 002a BDEEC77A 		ftosizs	s14, s14
 1652 002e 85ED047A 		fsts	s14, [r5, #16]	@ int
 743:Src/main.c    ****     right_pid->err = ENCODER_GOAL - r_enc;
 1653              		.loc 1 743 0
 1654 0032 77EEC07A 		fsubs	s15, s15, s0
 1655 0036 FDEEE77A 		ftosizs	s15, s15
 1656 003a C4ED047A 		fsts	s15, [r4, #16]	@ int
 744:Src/main.c    **** 
 745:Src/main.c    ****     /* Get gain */
 746:Src/main.c    ****     int32_t left_gain = pid_GetGain(left_pid);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 46


 1657              		.loc 1 746 0
 1658 003e 2846     		mov	r0, r5
 1659 0040 FFF7FEFF 		bl	pid_GetGain
 1660              	.LVL213:
 1661 0044 0646     		mov	r6, r0
 1662              	.LVL214:
 747:Src/main.c    ****     int32_t right_gain = pid_GetGain(right_pid);
 1663              		.loc 1 747 0
 1664 0046 2046     		mov	r0, r4
 1665              	.LVL215:
 1666 0048 FFF7FEFF 		bl	pid_GetGain
 1667              	.LVL216:
 1668 004c 0546     		mov	r5, r0
 1669              	.LVL217:
 748:Src/main.c    **** 
 749:Src/main.c    ****     int l_predec = (int)(l_enc / 1);
 1670              		.loc 1 749 0
 1671 004e FDEEE87A 		ftosizs	s15, s17
 1672              	.LVL218:
 750:Src/main.c    ****     int l_postdec = (int)((l_enc - l_predec) * 1000);
 1673              		.loc 1 750 0
 1674 0052 B8EEE77A 		fsitos	s14, s15
 1675 0056 78EEC78A 		fsubs	s17, s17, s14
 1676              	.LVL219:
 1677 005a 9FED297A 		flds	s14, .L99
 1678 005e 68EE878A 		fmuls	s17, s17, s14
 1679              	.LVL220:
 751:Src/main.c    ****     int r_predec = (int)(r_enc / 1);
 1680              		.loc 1 751 0
 1681 0062 BDEEC89A 		ftosizs	s18, s16
 1682              	.LVL221:
 752:Src/main.c    ****     int r_postdec = (int)((r_enc - r_predec) * 1000);
 1683              		.loc 1 752 0
 1684 0066 F8EEC96A 		fsitos	s13, s18
 1685 006a 38EE668A 		fsubs	s16, s16, s13
 1686              	.LVL222:
 1687 006e 28EE078A 		fmuls	s16, s16, s14
 1688 0072 BDEEC88A 		ftosizs	s16, s16
 1689              	.LVL223:
 753:Src/main.c    ****     char msg[18] = "";
 1690              		.loc 1 753 0
 1691 0076 0024     		movs	r4, #0
 1692              	.LVL224:
 1693 0078 0194     		str	r4, [sp, #4]
 1694 007a 0294     		str	r4, [sp, #8]
 1695 007c 0394     		str	r4, [sp, #12]
 1696 007e 0494     		str	r4, [sp, #16]
 1697 0080 ADF81440 		strh	r4, [sp, #20]	@ movhi
 754:Src/main.c    ****     sprintf(msg, "LG: %d.%d", l_predec, l_postdec);
 1698              		.loc 1 754 0
 1699 0084 01A8     		add	r0, sp, #4
 1700              	.LVL225:
 1701 0086 1F49     		ldr	r1, .L99+4
 1702 0088 17EE902A 		fmrs	r2, s15	@ int
 1703 008c FDEEE87A 		ftosizs	s15, s17
 1704              	.LVL226:
 1705 0090 17EE903A 		fmrs	r3, s15	@ int
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 47


 1706 0094 FFF7FEFF 		bl	sprintf
 1707              	.LVL227:
 755:Src/main.c    ****     print(msg, 0);
 1708              		.loc 1 755 0
 1709 0098 01A8     		add	r0, sp, #4
 1710 009a 2146     		mov	r1, r4
 1711 009c FFF7FEFF 		bl	print
 1712              	.LVL228:
 756:Src/main.c    ****     sprintf(msg, "RG: %d.%d", r_predec, r_postdec);
 1713              		.loc 1 756 0
 1714 00a0 01A8     		add	r0, sp, #4
 1715 00a2 1949     		ldr	r1, .L99+8
 1716 00a4 19EE102A 		fmrs	r2, s18	@ int
 1717 00a8 18EE103A 		fmrs	r3, s16	@ int
 1718 00ac FFF7FEFF 		bl	sprintf
 1719              	.LVL229:
 757:Src/main.c    ****     print(msg, 1);
 1720              		.loc 1 757 0
 1721 00b0 01A8     		add	r0, sp, #4
 1722 00b2 0121     		movs	r1, #1
 1723 00b4 FFF7FEFF 		bl	print
 1724              	.LVL230:
 758:Src/main.c    **** 
 759:Src/main.c    ****     /* Set Motor Speeds*/
 760:Src/main.c    ****     int lspeed = LEFT_SPEED + left_gain;
 1725              		.loc 1 760 0
 1726 00b8 144B     		ldr	r3, .L99+12
 1727 00ba 1B88     		ldrh	r3, [r3]
 1728 00bc 1E44     		add	r6, r6, r3
 1729              	.LVL231:
 761:Src/main.c    ****     int rspeed = RIGHT_SPEED + right_gain;
 1730              		.loc 1 761 0
 1731 00be 144B     		ldr	r3, .L99+16
 1732 00c0 1B88     		ldrh	r3, [r3]
 1733 00c2 1D44     		add	r5, r5, r3
 1734              	.LVL232:
 762:Src/main.c    **** 
 763:Src/main.c    ****     sprintf(msg, "LS: %d", (int)lspeed);
 1735              		.loc 1 763 0
 1736 00c4 01A8     		add	r0, sp, #4
 1737 00c6 1349     		ldr	r1, .L99+20
 1738 00c8 3246     		mov	r2, r6
 1739 00ca FFF7FEFF 		bl	sprintf
 1740              	.LVL233:
 764:Src/main.c    ****     print(msg, 3);
 1741              		.loc 1 764 0
 1742 00ce 01A8     		add	r0, sp, #4
 1743 00d0 0321     		movs	r1, #3
 1744 00d2 FFF7FEFF 		bl	print
 1745              	.LVL234:
 765:Src/main.c    ****     sprintf(msg, "RS: %d", (int)rspeed);
 1746              		.loc 1 765 0
 1747 00d6 01A8     		add	r0, sp, #4
 1748 00d8 0F49     		ldr	r1, .L99+24
 1749 00da 2A46     		mov	r2, r5
 1750 00dc FFF7FEFF 		bl	sprintf
 1751              	.LVL235:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 48


 766:Src/main.c    ****     print(msg, 4);
 1752              		.loc 1 766 0
 1753 00e0 01A8     		add	r0, sp, #4
 1754 00e2 0421     		movs	r1, #4
 1755 00e4 FFF7FEFF 		bl	print
 1756              	.LVL236:
 767:Src/main.c    ****     // set_motor_speed
 768:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 1757              		.loc 1 768 0
 1758 00e8 2046     		mov	r0, r4
 1759 00ea 3146     		mov	r1, r6
 1760 00ec FFF7FEFF 		bl	set_motor_speed
 1761              	.LVL237:
 769:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1762              		.loc 1 769 0
 1763 00f0 0820     		movs	r0, #8
 1764 00f2 2946     		mov	r1, r5
 1765 00f4 FFF7FEFF 		bl	set_motor_speed
 1766              	.LVL238:
 770:Src/main.c    **** }
 1767              		.loc 1 770 0
 1768 00f8 06B0     		add	sp, sp, #24
 1769              	.LCFI29:
 1770              		.cfi_def_cfa_offset 32
 1771              		@ sp needed
 1772 00fa BDEC048B 		fldmfdd	sp!, {d8-d9}
 1773              	.LCFI30:
 1774              		.cfi_restore 82
 1775              		.cfi_restore 83
 1776              		.cfi_restore 80
 1777              		.cfi_restore 81
 1778              		.cfi_def_cfa_offset 16
 1779              	.LVL239:
 1780 00fe 70BD     		pop	{r4, r5, r6, pc}
 1781              	.LVL240:
 1782              	.L100:
 1783              		.align	2
 1784              	.L99:
 1785 0100 00007A44 		.word	1148846080
 1786 0104 98000000 		.word	.LC16
 1787 0108 A4000000 		.word	.LC17
 1788 010c 00000000 		.word	.LANCHOR0
 1789 0110 00000000 		.word	.LANCHOR1
 1790 0114 B0000000 		.word	.LC18
 1791 0118 B8000000 		.word	.LC19
 1792              		.cfi_endproc
 1793              	.LFE136:
 1795              		.section	.text._Error_Handler,"ax",%progbits
 1796              		.align	2
 1797              		.global	_Error_Handler
 1798              		.thumb
 1799              		.thumb_func
 1801              	_Error_Handler:
 1802              	.LFB137:
 771:Src/main.c    **** 
 772:Src/main.c    **** /* USER CODE END 4 */
 773:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 49


 774:Src/main.c    **** /**
 775:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 776:Src/main.c    ****   * @param  file: The file name as string.
 777:Src/main.c    ****   * @param  line: The line in file as a number.
 778:Src/main.c    ****   * @retval None
 779:Src/main.c    ****   */
 780:Src/main.c    **** void _Error_Handler(char *file, int line)
 781:Src/main.c    **** {
 1803              		.loc 1 781 0
 1804              		.cfi_startproc
 1805              		@ Volatile: function does not return.
 1806              		@ args = 0, pretend = 0, frame = 0
 1807              		@ frame_needed = 0, uses_anonymous_args = 0
 1808              		@ link register save eliminated.
 1809              	.LVL241:
 1810              	.L102:
 782:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 783:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 784:Src/main.c    ****     while (1)
 785:Src/main.c    ****     {
 786:Src/main.c    ****     }
 1811              		.loc 1 786 0 discriminator 1
 1812 0000 FEE7     		b	.L102
 1813              		.cfi_endproc
 1814              	.LFE137:
 1816 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1817              		.align	2
 1818              		.global	SystemClock_Config
 1819              		.thumb
 1820              		.thumb_func
 1822              	SystemClock_Config:
 1823              	.LFB125:
 309:Src/main.c    **** 
 1824              		.loc 1 309 0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 80
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 1828 0000 00B5     		push	{lr}
 1829              	.LCFI31:
 1830              		.cfi_def_cfa_offset 4
 1831              		.cfi_offset 14, -4
 1832 0002 95B0     		sub	sp, sp, #84
 1833              	.LCFI32:
 1834              		.cfi_def_cfa_offset 88
 1835              	.LBB4:
 316:Src/main.c    **** 
 1836              		.loc 1 316 0
 1837 0004 0022     		movs	r2, #0
 1838 0006 0192     		str	r2, [sp, #4]
 1839 0008 2A4B     		ldr	r3, .L107
 1840 000a 196C     		ldr	r1, [r3, #64]
 1841 000c 41F08051 		orr	r1, r1, #268435456
 1842 0010 1964     		str	r1, [r3, #64]
 1843 0012 1B6C     		ldr	r3, [r3, #64]
 1844 0014 03F08053 		and	r3, r3, #268435456
 1845 0018 0193     		str	r3, [sp, #4]
 1846 001a 019B     		ldr	r3, [sp, #4]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 50


 1847              	.LBE4:
 1848              	.LBB5:
 318:Src/main.c    **** 
 1849              		.loc 1 318 0
 1850 001c 0292     		str	r2, [sp, #8]
 1851 001e 2649     		ldr	r1, .L107+4
 1852 0020 0B68     		ldr	r3, [r1]
 1853 0022 23F44043 		bic	r3, r3, #49152
 1854 0026 43F40043 		orr	r3, r3, #32768
 1855 002a 0B60     		str	r3, [r1]
 1856 002c 0B68     		ldr	r3, [r1]
 1857 002e 03F44043 		and	r3, r3, #49152
 1858 0032 0293     		str	r3, [sp, #8]
 1859 0034 029B     		ldr	r3, [sp, #8]
 1860              	.LBE5:
 322:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1861              		.loc 1 322 0
 1862 0036 0223     		movs	r3, #2
 1863 0038 0893     		str	r3, [sp, #32]
 323:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 1864              		.loc 1 323 0
 1865 003a 0121     		movs	r1, #1
 1866 003c 0B91     		str	r1, [sp, #44]
 324:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1867              		.loc 1 324 0
 1868 003e 1021     		movs	r1, #16
 1869 0040 0C91     		str	r1, [sp, #48]
 325:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1870              		.loc 1 325 0
 1871 0042 0E93     		str	r3, [sp, #56]
 326:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 1872              		.loc 1 326 0
 1873 0044 0F92     		str	r2, [sp, #60]
 327:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 1874              		.loc 1 327 0
 1875 0046 0822     		movs	r2, #8
 1876 0048 1092     		str	r2, [sp, #64]
 328:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1877              		.loc 1 328 0
 1878 004a 4822     		movs	r2, #72
 1879 004c 1192     		str	r2, [sp, #68]
 329:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 1880              		.loc 1 329 0
 1881 004e 1293     		str	r3, [sp, #72]
 330:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1882              		.loc 1 330 0
 1883 0050 0423     		movs	r3, #4
 1884 0052 1393     		str	r3, [sp, #76]
 331:Src/main.c    ****     {
 1885              		.loc 1 331 0
 1886 0054 08A8     		add	r0, sp, #32
 1887 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1888              	.LVL242:
 1889 005a 20B1     		cbz	r0, .L104
 333:Src/main.c    ****     }
 1890              		.loc 1 333 0
 1891 005c 1748     		ldr	r0, .L107+8
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 51


 1892 005e 40F24D11 		movw	r1, #333
 1893 0062 FFF7FEFF 		bl	_Error_Handler
 1894              	.LVL243:
 1895              	.L104:
 338:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1896              		.loc 1 338 0
 1897 0066 0F23     		movs	r3, #15
 1898 0068 0393     		str	r3, [sp, #12]
 339:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1899              		.loc 1 339 0
 1900 006a 0221     		movs	r1, #2
 1901 006c 0491     		str	r1, [sp, #16]
 340:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1902              		.loc 1 340 0
 1903 006e 0023     		movs	r3, #0
 1904 0070 0593     		str	r3, [sp, #20]
 341:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1905              		.loc 1 341 0
 1906 0072 4FF48052 		mov	r2, #4096
 1907 0076 0692     		str	r2, [sp, #24]
 342:Src/main.c    **** 
 1908              		.loc 1 342 0
 1909 0078 0793     		str	r3, [sp, #28]
 344:Src/main.c    ****     {
 1910              		.loc 1 344 0
 1911 007a 03A8     		add	r0, sp, #12
 1912 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1913              	.LVL244:
 1914 0080 20B1     		cbz	r0, .L105
 346:Src/main.c    ****     }
 1915              		.loc 1 346 0
 1916 0082 0E48     		ldr	r0, .L107+8
 1917 0084 4FF4AD71 		mov	r1, #346
 1918 0088 FFF7FEFF 		bl	_Error_Handler
 1919              	.LVL245:
 1920              	.L105:
 351:Src/main.c    **** 
 1921              		.loc 1 351 0
 1922 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1923              	.LVL246:
 1924 0090 0B4B     		ldr	r3, .L107+12
 1925 0092 A3FB0030 		umull	r3, r0, r3, r0
 1926 0096 8009     		lsrs	r0, r0, #6
 1927 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1928              	.LVL247:
 355:Src/main.c    **** 
 1929              		.loc 1 355 0
 1930 009c 0420     		movs	r0, #4
 1931 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1932              	.LVL248:
 358:Src/main.c    **** }
 1933              		.loc 1 358 0
 1934 00a2 4FF0FF30 		mov	r0, #-1
 1935 00a6 0021     		movs	r1, #0
 1936 00a8 0A46     		mov	r2, r1
 1937 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1938              	.LVL249:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 52


 359:Src/main.c    **** 
 1939              		.loc 1 359 0
 1940 00ae 15B0     		add	sp, sp, #84
 1941              	.LCFI33:
 1942              		.cfi_def_cfa_offset 4
 1943              		@ sp needed
 1944 00b0 5DF804FB 		ldr	pc, [sp], #4
 1945              	.L108:
 1946              		.align	2
 1947              	.L107:
 1948 00b4 00380240 		.word	1073887232
 1949 00b8 00700040 		.word	1073770496
 1950 00bc C0000000 		.word	.LC20
 1951 00c0 D34D6210 		.word	274877907
 1952              		.cfi_endproc
 1953              	.LFE125:
 1955              		.section	.text.main,"ax",%progbits
 1956              		.align	2
 1957              		.global	main
 1958              		.thumb
 1959              		.thumb_func
 1961              	main:
 1962              	.LFB124:
 109:Src/main.c    ****     /* USER CODE BEGIN 1 */
 1963              		.loc 1 109 0
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 0
 1966              		@ frame_needed = 0, uses_anonymous_args = 0
 1967 0000 10B5     		push	{r4, lr}
 1968              	.LCFI34:
 1969              		.cfi_def_cfa_offset 8
 1970              		.cfi_offset 4, -8
 1971              		.cfi_offset 14, -4
 117:Src/main.c    **** 
 1972              		.loc 1 117 0
 1973 0002 FFF7FEFF 		bl	HAL_Init
 1974              	.LVL250:
 124:Src/main.c    **** 
 1975              		.loc 1 124 0
 1976 0006 FFF7FEFF 		bl	SystemClock_Config
 1977              	.LVL251:
 131:Src/main.c    ****     MX_DMA_Init();
 1978              		.loc 1 131 0
 1979 000a FFF7FEFF 		bl	MX_GPIO_Init
 1980              	.LVL252:
 132:Src/main.c    ****     MX_TIM3_Init();
 1981              		.loc 1 132 0
 1982 000e FFF7FEFF 		bl	MX_DMA_Init
 1983              	.LVL253:
 133:Src/main.c    ****     MX_TIM1_Init();
 1984              		.loc 1 133 0
 1985 0012 FFF7FEFF 		bl	MX_TIM3_Init
 1986              	.LVL254:
 134:Src/main.c    ****     MX_TIM2_Init();
 1987              		.loc 1 134 0
 1988 0016 FFF7FEFF 		bl	MX_TIM1_Init
 1989              	.LVL255:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 53


 135:Src/main.c    ****     MX_USART6_UART_Init();
 1990              		.loc 1 135 0
 1991 001a FFF7FEFF 		bl	MX_TIM2_Init
 1992              	.LVL256:
 136:Src/main.c    ****     MX_ADC1_Init();
 1993              		.loc 1 136 0
 1994 001e FFF7FEFF 		bl	MX_USART6_UART_Init
 1995              	.LVL257:
 137:Src/main.c    ****     MX_I2C1_Init();
 1996              		.loc 1 137 0
 1997 0022 FFF7FEFF 		bl	MX_ADC1_Init
 1998              	.LVL258:
 138:Src/main.c    ****     MX_TIM4_Init();
 1999              		.loc 1 138 0
 2000 0026 FFF7FEFF 		bl	MX_I2C1_Init
 2001              	.LVL259:
 139:Src/main.c    ****     MX_TIM9_Init();
 2002              		.loc 1 139 0
 2003 002a FFF7FEFF 		bl	MX_TIM4_Init
 2004              	.LVL260:
 140:Src/main.c    ****     MX_TIM5_Init();
 2005              		.loc 1 140 0
 2006 002e FFF7FEFF 		bl	MX_TIM9_Init
 2007              	.LVL261:
 141:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2008              		.loc 1 141 0
 2009 0032 FFF7FEFF 		bl	MX_TIM5_Init
 2010              	.LVL262:
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 2011              		.loc 1 158 0
 2012 0036 2348     		ldr	r0, .L113
 2013 0038 1821     		movs	r1, #24
 2014 003a FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2015              	.LVL263:
 159:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 2016              		.loc 1 159 0
 2017 003e 2248     		ldr	r0, .L113+4
 2018 0040 1821     		movs	r1, #24
 2019 0042 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2020              	.LVL264:
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 2021              		.loc 1 160 0
 2022 0046 214C     		ldr	r4, .L113+8
 2023 0048 2046     		mov	r0, r4
 2024 004a 0021     		movs	r1, #0
 2025 004c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2026              	.LVL265:
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 2027              		.loc 1 161 0
 2028 0050 2046     		mov	r0, r4
 2029 0052 0421     		movs	r1, #4
 2030 0054 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2031              	.LVL266:
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 2032              		.loc 1 162 0
 2033 0058 2046     		mov	r0, r4
 2034 005a 0821     		movs	r1, #8
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 54


 2035 005c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2036              	.LVL267:
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2037              		.loc 1 163 0
 2038 0060 2046     		mov	r0, r4
 2039 0062 0C21     		movs	r1, #12
 2040 0064 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2041              	.LVL268:
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 2042              		.loc 1 164 0
 2043 0068 194C     		ldr	r4, .L113+12
 2044 006a 2046     		mov	r0, r4
 2045 006c 0021     		movs	r1, #0
 2046 006e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2047              	.LVL269:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 2048              		.loc 1 165 0
 2049 0072 2046     		mov	r0, r4
 2050 0074 0421     		movs	r1, #4
 2051 0076 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2052              	.LVL270:
 166:Src/main.c    **** 
 2053              		.loc 1 166 0
 2054 007a 2046     		mov	r0, r4
 2055 007c 0821     		movs	r1, #8
 2056 007e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2057              	.LVL271:
 169:Src/main.c    ****     print("Starting", 0);
 2058              		.loc 1 169 0
 2059 0082 FFF7FEFF 		bl	ssd1306_Init
 2060              	.LVL272:
 170:Src/main.c    ****     claw_init(&htim3);
 2061              		.loc 1 170 0
 2062 0086 1348     		ldr	r0, .L113+16
 2063 0088 0021     		movs	r1, #0
 2064 008a FFF7FEFF 		bl	print
 2065              	.LVL273:
 171:Src/main.c    ****     ///basket_init(&htim3);
 2066              		.loc 1 171 0
 2067 008e 2046     		mov	r0, r4
 2068 0090 FFF7FEFF 		bl	claw_init
 2069              	.LVL274:
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 2070              		.loc 1 188 0
 2071 0094 0620     		movs	r0, #6
 2072 0096 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2073              	.LVL275:
 189:Src/main.c    ****     // HAL_NVIC_EnableIRQ(EXTI1_IRQn); IR INT
 2074              		.loc 1 189 0
 2075 009a 0A20     		movs	r0, #10
 2076 009c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2077              	.LVL276:
 191:Src/main.c    ****     /* USER CODE END 2 */
 2078              		.loc 1 191 0
 2079 00a0 4FF4FA70 		mov	r0, #500
 2080 00a4 FFF7FEFF 		bl	HAL_Delay
 2081              	.LVL277:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 55


 2082              	.L110:
 211:Src/main.c    ****         {
 2083              		.loc 1 211 0
 2084 00a8 0B4B     		ldr	r3, .L113+20
 2085 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2086 00ac 012B     		cmp	r3, #1
 2087 00ae FBD1     		bne	.L110
 213:Src/main.c    ****             turn();
 2088              		.loc 1 213 0
 2089 00b0 0A48     		ldr	r0, .L113+24
 2090 00b2 0021     		movs	r1, #0
 2091 00b4 FFF7FEFF 		bl	print
 2092              	.LVL278:
 214:Src/main.c    **** 
 2093              		.loc 1 214 0
 2094 00b8 FFF7FEFF 		bl	turn
 2095              	.LVL279:
 256:Src/main.c    ****             // set_motor_speed(TIM_CHANNEL_1, 0);
 2096              		.loc 1 256 0
 2097 00bc 0022     		movs	r2, #0
 2098 00be 064B     		ldr	r3, .L113+20
 2099 00c0 1A70     		strb	r2, [r3]
 2100 00c2 F1E7     		b	.L110
 2101              	.L114:
 2102              		.align	2
 2103              	.L113:
 2104 00c4 00000000 		.word	htim4
 2105 00c8 00000000 		.word	htim5
 2106 00cc 00000000 		.word	htim1
 2107 00d0 00000000 		.word	htim3
 2108 00d4 5C000000 		.word	.LC8
 2109 00d8 00000000 		.word	PI_INT_STATE
 2110 00dc CC000000 		.word	.LC21
 2111              		.cfi_endproc
 2112              	.LFE124:
 2114              		.comm	adc_values,12288,4
 2115              		.comm	dma_buffer,12288,4
 2116              		.global	RIGHT_SPEED
 2117              		.global	LEFT_SPEED
 2118              		.section	.data.RIGHT_SPEED,"aw",%progbits
 2119              		.align	1
 2120              		.set	.LANCHOR1,. + 0
 2123              	RIGHT_SPEED:
 2124 0000 5802     		.short	600
 2125              		.section	.data.LEFT_SPEED,"aw",%progbits
 2126              		.align	1
 2127              		.set	.LANCHOR0,. + 0
 2130              	LEFT_SPEED:
 2131 0000 2602     		.short	550
 2132              		.section	.rodata.str1.4,"aMS",%progbits,1
 2133              		.align	2
 2134              	.LC0:
 2135 0000 25642E25 		.ascii	"%d.%d\012\000"
 2135      640A00
 2136 0007 00       		.space	1
 2137              	.LC1:
 2138 0008 25642E25 		.ascii	"%d.%d\000"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 56


 2138      6400
 2139 000e 0000     		.space	2
 2140              	.LC2:
 2141 0010 636E7473 		.ascii	"cnts: %d\000"
 2141      3A202564 
 2141      00
 2142 0019 000000   		.space	3
 2143              	.LC3:
 2144 001c 766C7473 		.ascii	"vlts: %d.%d\000"
 2144      3A202564 
 2144      2E256400 
 2145              	.LC4:
 2146 0028 6164635F 		.ascii	"adc_val: %d\000"
 2146      76616C3A 
 2146      20256400 
 2147              	.LC5:
 2148 0034 54494D35 		.ascii	"TIM5->CNT: %lu\000"
 2148      2D3E434E 
 2148      543A2025 
 2148      6C7500
 2149 0043 00       		.space	1
 2150              	.LC6:
 2151 0044 54494D34 		.ascii	"TIM4->CNT: %lu\000"
 2151      2D3E434E 
 2151      543A2025 
 2151      6C7500
 2152 0053 00       		.space	1
 2153              	.LC7:
 2154 0054 5069206E 		.ascii	"Pi nav\000"
 2154      617600
 2155 005b 00       		.space	1
 2156              	.LC8:
 2157 005c 53746172 		.ascii	"Starting\000"
 2157      74696E67 
 2157      00
 2158 0065 000000   		.space	3
 2159              	.LC9:
 2160 0068 256C7500 		.ascii	"%lu\000"
 2161              	.LC10:
 2162 006c 256400   		.ascii	"%d\000"
 2163 006f 00       		.space	1
 2164              	.LC11:
 2165 0070 5020256C 		.ascii	"P %lu\000"
 2165      7500
 2166 0076 0000     		.space	2
 2167              	.LC12:
 2168 0078 4420256C 		.ascii	"D %lu\000"
 2168      7500
 2169 007e 0000     		.space	2
 2170              	.LC13:
 2171 0080 4920256C 		.ascii	"I %lu\000"
 2171      7500
 2172 0086 0000     		.space	2
 2173              	.LC14:
 2174 0088 4C202575 		.ascii	"L %u\000"
 2174      00
 2175 008d 000000   		.space	3
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 57


 2176              	.LC15:
 2177 0090 52202575 		.ascii	"R %u\000"
 2177      00
 2178 0095 000000   		.space	3
 2179              	.LC16:
 2180 0098 4C473A20 		.ascii	"LG: %d.%d\000"
 2180      25642E25 
 2180      6400
 2181 00a2 0000     		.space	2
 2182              	.LC17:
 2183 00a4 52473A20 		.ascii	"RG: %d.%d\000"
 2183      25642E25 
 2183      6400
 2184 00ae 0000     		.space	2
 2185              	.LC18:
 2186 00b0 4C533A20 		.ascii	"LS: %d\000"
 2186      256400
 2187 00b7 00       		.space	1
 2188              	.LC19:
 2189 00b8 52533A20 		.ascii	"RS: %d\000"
 2189      256400
 2190 00bf 00       		.space	1
 2191              	.LC20:
 2192 00c0 5372632F 		.ascii	"Src/main.c\000"
 2192      6D61696E 
 2192      2E6300
 2193 00cb 00       		.space	1
 2194              	.LC21:
 2195 00cc 696E2070 		.ascii	"in pi int\000"
 2195      6920696E 
 2195      7400
 2196              		.text
 2197              	.Letext0:
 2198              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2199              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 2200              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2201              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 2202              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2203              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2204              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2205              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2206              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2207              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2208              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2209              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2210              		.file 14 "Inc/fonts.h"
 2211              		.file 15 "Inc/ssd1306.h"
 2212              		.file 16 "Inc/encoder.h"
 2213              		.file 17 "Inc/pid.h"
 2214              		.file 18 "Drivers/CMSIS/Include/core_cm4.h"
 2215              		.file 19 "Inc/adc.h"
 2216              		.file 20 "Inc/tim.h"
 2217              		.file 21 "Inc/usart.h"
 2218              		.file 22 "Inc/extern_vars.h"
 2219              		.file 23 "Inc/filter.h"
 2220              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2221              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 58


 2222              		.file 26 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2223              		.file 27 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 2224              		.file 28 "Inc/gpio.h"
 2225              		.file 29 "Inc/dma.h"
 2226              		.file 30 "Inc/i2c.h"
 2227              		.file 31 "Inc/claw.h"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 59


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000003000 adc_values
                            *COM*:0000000000003000 dma_buffer
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:104    .text.alarm_detect:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:109    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:187    .text.alarm_detect:000000000000007c $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:196    .text.print:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:201    .text.print:0000000000000000 print
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:248    .text.print:0000000000000034 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:255    .text.frequency_comparison:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:260    .text.frequency_comparison:0000000000000000 frequency_comparison
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:461    .text.frequency_comparison:0000000000000138 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:473    .text.set_motor_speed:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:478    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:540    .text.set_motor_speed:0000000000000044 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:547    .text.turn:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:552    .text.turn:0000000000000000 turn
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:806    .text.turn:0000000000000188 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:827    .text.turn_deg:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:832    .text.turn_deg:0000000000000000 turn_deg
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:958    .text.turn_deg:00000000000000b0 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:970    .text.pi_navigation:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:975    .text.pi_navigation:0000000000000000 pi_navigation
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1084   .text.pi_navigation:00000000000000ac $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1094   .text.menu:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1099   .text.menu:0000000000000000 menu
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1414   .text.menu:00000000000001d0 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1431   .text.do_pid:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1436   .text.do_pid:0000000000000000 do_pid
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1595   .text.do_pid:00000000000000bc $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1603   .text.encoder_pid:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1608   .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1785   .text.encoder_pid:0000000000000100 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1796   .text._Error_Handler:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1801   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1817   .text.SystemClock_Config:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1822   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1948   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1956   .text.main:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:1961   .text.main:0000000000000000 main
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:2104   .text.main:00000000000000c4 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:2123   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:2130   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:2119   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:2126   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s:2133   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 60


__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
HAL_NVIC_DisableIRQ
hadc1
IR_INT_STATE
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
__aeabi_d2iz
__aeabi_i2d
sprintf
strlen
HAL_UART_Transmit
huart6
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_dadd
PI_INT_STATE
HAL_GPIO_ReadPin
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
pid_Init
pid_GetGain
update_encoder
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
HAL_NVIC_EnableIRQ
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccwbdSWQ.s 			page 61


htim4
htim5
htim3
