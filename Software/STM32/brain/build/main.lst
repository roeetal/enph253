ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "gpio.h"
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** #include "fonts.h"
  50:Src/main.c    **** #include "ssd1306.h"
  51:Src/main.c    **** #include "encoder.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "filter.h"
  54:Src/main.c    **** #include "extern_vars.h"
  55:Src/main.c    **** #include <String.h>
  56:Src/main.c    **** #include "claw.h"
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END Includes */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED;
  65:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  66:Src/main.c    **** uint32_t dma_buffer[2048];
  67:Src/main.c    **** uint32_t adc_values[2048];
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END PV */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  72:Src/main.c    **** void SystemClock_Config(void);
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE BEGIN PFP */
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void print(char msg[], int row);
  77:Src/main.c    **** PID_t menu();
  78:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  79:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  80:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  81:Src/main.c    **** void turn();
  82:Src/main.c    **** void turn_deg(uint8_t);
  83:Src/main.c    **** void alarm_detect();
  84:Src/main.c    **** void drive_straight(PID_t *enc_pid);
  85:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t millis);
  86:Src/main.c    **** void square_edge(PID_t *enc_pid);
  87:Src/main.c    **** void test_All();
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 3


  88:Src/main.c    **** void test_PWM_htim1();
  89:Src/main.c    **** void test_PWM_htim3();
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE END PFP */
  92:Src/main.c    **** 
  93:Src/main.c    **** /* USER CODE BEGIN 0 */
  94:Src/main.c    **** /**
  95:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
  96:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
  97:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
  98:Src/main.c    ****  */
  99:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 100:Src/main.c    **** {
  29              		.loc 1 100 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 101:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 101 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF40052 		mov	r2, #8192
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB131:
 102:Src/main.c    **** }
 103:Src/main.c    **** /* USER CODE END 0 */
 104:Src/main.c    **** 
 105:Src/main.c    **** /**
 106:Src/main.c    ****   * @brief  The application entry point.
 107:Src/main.c    ****   *
 108:Src/main.c    ****   * @retval None
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 4


 109:Src/main.c    ****   */
 110:Src/main.c    **** int main(void)
 111:Src/main.c    **** {
 112:Src/main.c    ****     /* USER CODE BEGIN 1 */
 113:Src/main.c    **** 
 114:Src/main.c    ****     /* USER CODE END 1 */
 115:Src/main.c    **** 
 116:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 117:Src/main.c    **** 
 118:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 119:Src/main.c    ****     HAL_Init();
 120:Src/main.c    **** 
 121:Src/main.c    ****     /* USER CODE BEGIN Init */
 122:Src/main.c    **** 
 123:Src/main.c    ****     /* USER CODE END Init */
 124:Src/main.c    **** 
 125:Src/main.c    ****     /* Configure the system clock */
 126:Src/main.c    ****     SystemClock_Config();
 127:Src/main.c    **** 
 128:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* USER CODE END SysInit */
 131:Src/main.c    **** 
 132:Src/main.c    ****     /* Initialize all configured peripherals */
 133:Src/main.c    ****     MX_GPIO_Init();
 134:Src/main.c    ****     MX_DMA_Init();
 135:Src/main.c    ****     MX_TIM3_Init();
 136:Src/main.c    ****     MX_TIM1_Init();
 137:Src/main.c    ****     MX_TIM2_Init();
 138:Src/main.c    ****     MX_ADC1_Init();
 139:Src/main.c    ****     MX_I2C1_Init();
 140:Src/main.c    ****     MX_TIM4_Init();
 141:Src/main.c    ****     MX_TIM9_Init();
 142:Src/main.c    ****     MX_TIM5_Init();
 143:Src/main.c    ****     /* USER CODE BEGIN 2 */
 144:Src/main.c    **** 
 145:Src/main.c    ****     /* Initialize peripherals */
 146:Src/main.c    ****     /* 
 147:Src/main.c    ****      * Claw jaw: TIM3 CH1
 148:Src/main.c    ****      * Claw arm: TIM3 CH2
 149:Src/main.c    ****      * Basket: TIM3 CH3
 150:Src/main.c    ****      * left forward: TIM1 CH1
 151:Src/main.c    ****      * left backward: TIM1 CH2
 152:Src/main.c    ****      * right forward: TIM1 CH3
 153:Src/main.c    ****      * right backward: TIM1 CH4
 154:Src/main.c    ****      * left encoder: TIM4
 155:Src/main.c    ****      * right encoderL TIM5
 156:Src/main.c    ****      * spare clocks: TIM2, TIM9
 157:Src/main.c    ****      */
 158:Src/main.c    **** 
 159:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 160:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 5


 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 168:Src/main.c    **** 
 169:Src/main.c    ****     /* Initialize other stuffs */
 170:Src/main.c    ****     ssd1306_Init();
 171:Src/main.c    ****     print("Starting", 0);
 172:Src/main.c    ****     claw_init(&htim3);
 173:Src/main.c    ****     ///basket_init(&htim3);
 174:Src/main.c    **** 
 175:Src/main.c    ****     uint8_t ewok_cnt = 0;
 176:Src/main.c    ****     PID_t enc_pid = pid_Init(1, 0, 0, 1, 1);
 177:Src/main.c    **** 
 178:Src/main.c    ****     drive_straight_time(&enc_pid, 8 * 1000);
 179:Src/main.c    **** 
 180:Src/main.c    ****     /* Initially disabled interrupts and ADC */
 181:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 182:Src/main.c    ****     /* USER CODE END 2 */
 183:Src/main.c    **** 
 184:Src/main.c    ****     /* Infinite loop */
 185:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 186:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 187:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 188:Src/main.c    ****     HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_SET);
 189:Src/main.c    **** 
 190:Src/main.c    ****     while (1)
 191:Src/main.c    ****     {
 192:Src/main.c    ****         /*
 193:Src/main.c    ****          * Pi Turning
 194:Src/main.c    ****          */
 195:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 196:Src/main.c    ****         {
 197:Src/main.c    ****             HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_RESET);
 198:Src/main.c    ****             print("in pi int", 0);
 199:Src/main.c    ****             turn();
 200:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 201:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 202:Src/main.c    ****             HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 203:Src/main.c    ****             uint32_t start = HAL_GetTick();
 204:Src/main.c    ****             while ((HAL_GetTick() - start) < 7000)
 205:Src/main.c    ****             {
 206:Src/main.c    ****                 drive_straight(&enc_pid);
 207:Src/main.c    ****                 if (CLAW_INT_STATE == FLAGGED)
 208:Src/main.c    ****                 {
 209:Src/main.c    ****                     uint32_t timeee = HAL_GetTick();
 210:Src/main.c    ****                     while (HAL_GetTick() - timeee < 20)
 211:Src/main.c    ****                     {
 212:Src/main.c    ****                         HAL_Delay(5);
 213:Src/main.c    ****                         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 214:Src/main.c    ****                         {
 215:Src/main.c    ****                             CLAW_INT_STATE = NOT_FLAGGED;
 216:Src/main.c    ****                         }
 217:Src/main.c    ****                     }
 218:Src/main.c    ****                     if(CLAW_INT_STATE == NOT_FLAGGED){
 219:Src/main.c    ****                         break;
 220:Src/main.c    ****                     }
 221:Src/main.c    ****                     HAL_Delay(400);
 222:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 6


 223:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 224:Src/main.c    ****                     close_claw(&htim3);
 225:Src/main.c    ****                     arm_up(&htim3);
 226:Src/main.c    ****                     HAL_NVIC_DisableIRQ(CLAW_INT_EXTI_IRQn);
 227:Src/main.c    ****                     CLAW_INT_STATE = NOT_FLAGGED;
 228:Src/main.c    ****                     ++ewok_cnt;
 229:Src/main.c    ****                     // char msg[18] = "";
 230:Src/main.c    ****                     // sprintf(msg, "wok_cnt: %d", ewok_cnt);
 231:Src/main.c    ****                     // print(msg, 0);
 232:Src/main.c    ****                     /*
 233:Src/main.c    ****                     * Claw is up and close
 234:Src/main.c    ****                     * Ewok Count incremented
 235:Src/main.c    ****                     * Motors not powered
 236:Src/main.c    ****                     * CLAW_INT_STATE not FLAGGED
 237:Src/main.c    ****                     */
 238:Src/main.c    ****                     if (ewok_cnt == 1)
 239:Src/main.c    ****                     {
 240:Src/main.c    ****                         turn_deg(-95);
 241:Src/main.c    ****                         open_claw(&htim3);
 242:Src/main.c    ****                         // square_edge(&enc_pid);
 243:Src/main.c    ****                         drive_straight_time(&enc_pid, 5000);
 244:Src/main.c    ****                         arm_down(&htim3);
 245:Src/main.c    ****                     }
 246:Src/main.c    ****                     if (ewok_cnt == 2)
 247:Src/main.c    ****                     {
 248:Src/main.c    ****                         turn_deg(-110); //  Prolly have to change this
 249:Src/main.c    ****                         alarm_detect();
 250:Src/main.c    ****                         drive_straight_time(&enc_pid, 5000);
 251:Src/main.c    ****                     }
 252:Src/main.c    ****                     break;
 253:Src/main.c    ****                 }
 254:Src/main.c    ****             }
 255:Src/main.c    **** 
 256:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 257:Src/main.c    ****             HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_SET);
 258:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 259:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 260:Src/main.c    ****         }
 261:Src/main.c    ****         else
 262:Src/main.c    ****         {
 263:Src/main.c    ****             /*
 264:Src/main.c    ****              * Look for Ewok
 265:Src/main.c    ****              */
 266:Src/main.c    ****             drive_straight_time(&enc_pid, 500);
 267:Src/main.c    **** 
 268:Src/main.c    ****             uint32_t temp_time = HAL_GetTick();
 269:Src/main.c    ****             while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED)
 270:Src/main.c    ****                 ;
 271:Src/main.c    ****         }
 272:Src/main.c    **** 
 273:Src/main.c    ****         /*
 274:Src/main.c    ****         * Edge detected
 275:Src/main.c    ****         */
 276:Src/main.c    ****         //    if(EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED){
 277:Src/main.c    ****         //        set_motor_speed(TIM_CHANNEL_1, 0);
 278:Src/main.c    ****         //        set_motor_speed(TIM_CHANNEL_3, 0);
 279:Src/main.c    ****         //    }
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 7


 280:Src/main.c    **** 
 281:Src/main.c    ****         /*
 282:Src/main.c    ****          * IR DETECTION
 283:Src/main.c    ****          *
 284:Src/main.c    ****          if (IR_INT_STATE == FLAGGED)
 285:Src/main.c    ****          {
 286:Src/main.c    ****          alarm_detect();
 287:Src/main.c    ****         //drive past sensor, enough so as to not trigger interrupt again
 288:Src/main.c    ****         HAL_Delay(2000);
 289:Src/main.c    ****         }*/
 290:Src/main.c    **** 
 291:Src/main.c    ****         /* USER CODE END WHILE */
 292:Src/main.c    **** 
 293:Src/main.c    ****         /* USER CODE BEGIN 3 */
 294:Src/main.c    ****     }
 295:Src/main.c    ****     /* USER CODE END 3 */
 296:Src/main.c    **** }
 297:Src/main.c    **** 
 298:Src/main.c    **** /**
 299:Src/main.c    ****   * @brief System Clock Configuration
 300:Src/main.c    ****   * @retval None
 301:Src/main.c    ****   */
 302:Src/main.c    **** void SystemClock_Config(void)
 303:Src/main.c    **** {
 304:Src/main.c    **** 
 305:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 306:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 307:Src/main.c    **** 
 308:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 309:Src/main.c    ****     */
 310:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 311:Src/main.c    **** 
 312:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 313:Src/main.c    **** 
 314:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 315:Src/main.c    ****     */
 316:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 317:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 318:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 319:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 320:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 321:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 322:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 323:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 324:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 325:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 326:Src/main.c    ****     {
 327:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 328:Src/main.c    ****     }
 329:Src/main.c    **** 
 330:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 331:Src/main.c    ****     */
 332:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 333:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 334:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 335:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 336:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 8


 337:Src/main.c    **** 
 338:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 339:Src/main.c    ****     {
 340:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 341:Src/main.c    ****     }
 342:Src/main.c    **** 
 343:Src/main.c    ****     /**Configure the Systick interrupt time 
 344:Src/main.c    ****     */
 345:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 346:Src/main.c    **** 
 347:Src/main.c    ****     /**Configure the Systick 
 348:Src/main.c    ****     */
 349:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 350:Src/main.c    **** 
 351:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 352:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 353:Src/main.c    **** }
 354:Src/main.c    **** 
 355:Src/main.c    **** /* USER CODE BEGIN 4 */
 356:Src/main.c    **** 
 357:Src/main.c    **** void square_edge(PID_t *enc_pid)
 358:Src/main.c    **** {
 359:Src/main.c    ****     while (1)
 360:Src/main.c    ****     {
 361:Src/main.c    ****         drive_straight(enc_pid);
 362:Src/main.c    ****         if (EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED)
 363:Src/main.c    ****         {
 364:Src/main.c    ****             if (EDGE_LEFT_STATE == FLAGGED)
 365:Src/main.c    ****             {
 366:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 367:Src/main.c    ****             }
 368:Src/main.c    ****             if (EDGE_RIGHT_STATE == FLAGGED)
 369:Src/main.c    ****             {
 370:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 371:Src/main.c    ****             }
 372:Src/main.c    ****         }
 373:Src/main.c    ****         else if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 374:Src/main.c    ****         {
 375:Src/main.c    ****             break;
 376:Src/main.c    ****         }
 377:Src/main.c    ****     }
 378:Src/main.c    **** }
 379:Src/main.c    **** 
 380:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t millis)
 381:Src/main.c    **** {
 382:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 383:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 384:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 385:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 386:Src/main.c    ****     {
 387:Src/main.c    ****         drive_straight(enc_pid);
 388:Src/main.c    ****     }
 389:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 390:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 391:Src/main.c    **** }
 392:Src/main.c    **** 
 393:Src/main.c    **** void drive_straight(PID_t *enc_pid)
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 9


 394:Src/main.c    **** {
 395:Src/main.c    ****     encoder_pid(enc_pid);
 396:Src/main.c    ****     HAL_Delay(10);
 397:Src/main.c    **** }
 398:Src/main.c    **** 
 399:Src/main.c    **** /*
 400:Src/main.c    ****  * Assume motors are not on.
 401:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 402:Src/main.c    ****  */
 403:Src/main.c    **** void turn()
 404:Src/main.c    **** {
 405:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 406:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 407:Src/main.c    ****     HAL_Delay(100);
 408:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 409:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 410:Src/main.c    ****     TIM4->CNT = 0;
 411:Src/main.c    ****     TIM5->CNT = 0;
 412:Src/main.c    **** 
 413:Src/main.c    ****     char msg[18] = "";
 414:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 415:Src/main.c    ****     print(msg, 0);
 416:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 417:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 418:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 419:Src/main.c    ****     print(msg, 2);
 420:Src/main.c    **** 
 421:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
 422:Src/main.c    ****     {
 423:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 424:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 425:Src/main.c    ****         while (TIM5->CNT < counts)
 426:Src/main.c    ****         {
 427:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 428:Src/main.c    ****             print(msg, 4);
 429:Src/main.c    ****         }
 430:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 431:Src/main.c    ****         print(msg, 4);
 432:Src/main.c    ****         TIM5->CNT = 0;
 433:Src/main.c    ****     }
 434:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 435:Src/main.c    ****     {
 436:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 437:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 438:Src/main.c    ****         while (TIM4->CNT < counts)
 439:Src/main.c    ****         {
 440:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 441:Src/main.c    ****             print(msg, 4);
 442:Src/main.c    ****         }
 443:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 444:Src/main.c    ****         print(msg, 4);
 445:Src/main.c    ****         TIM4->CNT = 0;
 446:Src/main.c    ****     }
 447:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 448:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 449:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 450:Src/main.c    **** }
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 10


 451:Src/main.c    **** 
 452:Src/main.c    **** /*
 453:Src/main.c    ****  * Assume motors are not on.
 454:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 455:Src/main.c    ****  */
 456:Src/main.c    **** void turn_deg(uint8_t deg)
 457:Src/main.c    **** {
 458:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 459:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 460:Src/main.c    ****     TIM4->CNT = 0;
 461:Src/main.c    ****     TIM5->CNT = 0;
 462:Src/main.c    **** 
 463:Src/main.c    ****     char msg[18] = "";
 464:Src/main.c    **** 
 465:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 466:Src/main.c    ****     {
 467:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 468:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 469:Src/main.c    ****         while (TIM5->CNT < counts)
 470:Src/main.c    ****         {
 471:Src/main.c    ****             sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 472:Src/main.c    ****             print(msg, 4);
 473:Src/main.c    ****         }
 474:Src/main.c    ****         sprintf(msg, "TIM5->CNT: %lu", TIM5->CNT);
 475:Src/main.c    ****         print(msg, 4);
 476:Src/main.c    ****         TIM5->CNT = 0;
 477:Src/main.c    ****     }
 478:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 479:Src/main.c    ****     {
 480:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 30000);
 481:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 482:Src/main.c    ****         while (TIM4->CNT < counts)
 483:Src/main.c    ****         {
 484:Src/main.c    ****             sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 485:Src/main.c    ****             print(msg, 4);
 486:Src/main.c    ****         }
 487:Src/main.c    ****         sprintf(msg, "TIM4->CNT: %lu", TIM4->CNT);
 488:Src/main.c    ****         print(msg, 4);
 489:Src/main.c    ****         TIM4->CNT = 0;
 490:Src/main.c    ****     }
 491:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 492:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 493:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 494:Src/main.c    **** }
 495:Src/main.c    **** 
 496:Src/main.c    **** /**
 497:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 498:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 499:Src/main.c    ****  *
 500:Src/main.c    ****  * @param adc_val, value read from ADC.
 501:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 502:Src/main.c    ****  **/
 503:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 504:Src/main.c    **** {
  67              		.loc 1 504 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 11


  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 505:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 505 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 506:Src/main.c    **** }
  90              		.loc 1 506 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE131:
 101              		.global	__aeabi_dcmplt
 102              		.global	__aeabi_dcmpgt
 103              		.section	.text.alarm_detect,"ax",%progbits
 104              		.align	2
 105              		.global	alarm_detect
 106              		.thumb
 107              		.thumb_func
 109              	alarm_detect:
 110              	.LFB132:
 507:Src/main.c    **** 
 508:Src/main.c    **** // Sampling frequency: 72e6/2/(495*3)
 509:Src/main.c    **** void alarm_detect()
 510:Src/main.c    **** {
 111              		.loc 1 510 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115 0000 00B5     		push	{lr}
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 14, -4
 119 0002 83B0     		sub	sp, sp, #12
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 16
 511:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 12


 122              		.loc 1 511 0
 123 0004 1C48     		ldr	r0, .L13
 124 0006 1D49     		ldr	r1, .L13+4
 125 0008 4FF40062 		mov	r2, #2048
 126 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 127              	.LVL8:
 512:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 513:Src/main.c    ****     HAL_Delay(500);
 128              		.loc 1 513 0
 129 0010 4FF4FA70 		mov	r0, #500
 130 0014 FFF7FEFF 		bl	HAL_Delay
 131              	.LVL9:
 132              	.L10:
 514:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 100)
 133              		.loc 1 514 0 discriminator 1
 134 0018 0023     		movs	r3, #0
 135 001a 0093     		str	r3, [sp]
 136 001c 1848     		ldr	r0, .L13+8
 137 001e 45F6B261 		movw	r1, #24242
 138 0022 4FF47A72 		mov	r2, #1000
 139 0026 4FF40063 		mov	r3, #2048
 140 002a FFF7FEFF 		bl	goertzel
 141              	.LVL10:
 142 002e 51EC100B 		fmrrd	r0, r1, d0
 143 0032 0022     		movs	r2, #0
 144 0034 134B     		ldr	r3, .L13+12
 145 0036 FFF7FEFF 		bl	__aeabi_dcmplt
 146              	.LVL11:
 147 003a 0028     		cmp	r0, #0
 148 003c ECD1     		bne	.L10
 149              	.L11:
 515:Src/main.c    ****         ;
 516:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 100)
 150              		.loc 1 516 0 discriminator 1
 151 003e 0023     		movs	r3, #0
 152 0040 0093     		str	r3, [sp]
 153 0042 0F48     		ldr	r0, .L13+8
 154 0044 45F6B261 		movw	r1, #24242
 155 0048 4FF47A72 		mov	r2, #1000
 156 004c 4FF40063 		mov	r3, #2048
 157 0050 FFF7FEFF 		bl	goertzel
 158              	.LVL12:
 159 0054 51EC100B 		fmrrd	r0, r1, d0
 160 0058 0022     		movs	r2, #0
 161 005a 0A4B     		ldr	r3, .L13+12
 162 005c FFF7FEFF 		bl	__aeabi_dcmpgt
 163              	.LVL13:
 164 0060 0028     		cmp	r0, #0
 165 0062 ECD1     		bne	.L11
 517:Src/main.c    ****         ;
 518:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 166              		.loc 1 518 0
 167 0064 0448     		ldr	r0, .L13
 168 0066 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 169              	.LVL14:
 519:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 170              		.loc 1 519 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 13


 171 006a 0022     		movs	r2, #0
 172 006c 064B     		ldr	r3, .L13+16
 173 006e 1A70     		strb	r2, [r3]
 520:Src/main.c    **** }
 174              		.loc 1 520 0
 175 0070 03B0     		add	sp, sp, #12
 176              	.LCFI4:
 177              		.cfi_def_cfa_offset 4
 178              		@ sp needed
 179 0072 5DF804FB 		ldr	pc, [sp], #4
 180              	.L14:
 181 0076 00BF     		.align	2
 182              	.L13:
 183 0078 00000000 		.word	hadc1
 184 007c 00000000 		.word	dma_buffer
 185 0080 00000000 		.word	adc_values
 186 0084 00005940 		.word	1079574528
 187 0088 00000000 		.word	IR_INT_STATE
 188              		.cfi_endproc
 189              	.LFE132:
 191              		.section	.text.print,"ax",%progbits
 192              		.align	2
 193              		.global	print
 194              		.thumb
 195              		.thumb_func
 197              	print:
 198              	.LFB133:
 521:Src/main.c    **** 
 522:Src/main.c    **** /**
 523:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 524:Src/main.c    ****  * @param msg, string to print
 525:Src/main.c    ****  * @param row, row to print msg to
 526:Src/main.c    ****  */
 527:Src/main.c    **** void print(char *msg, int row)
 528:Src/main.c    **** {
 199              		.loc 1 528 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL15:
 204 0000 38B5     		push	{r3, r4, r5, lr}
 205              	.LCFI5:
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 3, -16
 208              		.cfi_offset 4, -12
 209              		.cfi_offset 5, -8
 210              		.cfi_offset 14, -4
 211 0002 0546     		mov	r5, r0
 529:Src/main.c    ****     if (row == 0)
 212              		.loc 1 529 0
 213 0004 0C46     		mov	r4, r1
 214 0006 11B9     		cbnz	r1, .L16
 530:Src/main.c    ****     {
 531:Src/main.c    ****         ssd1306_Fill(Black);
 215              		.loc 1 531 0
 216 0008 0020     		movs	r0, #0
 217              	.LVL16:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 14


 218 000a FFF7FEFF 		bl	ssd1306_Fill
 219              	.LVL17:
 220              	.L16:
 532:Src/main.c    ****     }
 533:Src/main.c    ****     ssd1306_SetCursor(0, row * 10);
 221              		.loc 1 533 0
 222 000e 04EB8404 		add	r4, r4, r4, lsl #2
 223              	.LVL18:
 224 0012 6100     		lsls	r1, r4, #1
 225 0014 0020     		movs	r0, #0
 226 0016 01F0FE01 		and	r1, r1, #254
 227 001a FFF7FEFF 		bl	ssd1306_SetCursor
 228              	.LVL19:
 534:Src/main.c    ****     ssd1306_WriteString(msg, Font_7x10, White);
 229              		.loc 1 534 0
 230 001e 054B     		ldr	r3, .L18
 231 0020 2846     		mov	r0, r5
 232 0022 93E80600 		ldmia	r3, {r1, r2}
 233 0026 0123     		movs	r3, #1
 234 0028 FFF7FEFF 		bl	ssd1306_WriteString
 235              	.LVL20:
 535:Src/main.c    ****     ssd1306_UpdateScreen();
 236              		.loc 1 535 0
 237 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 238              	.LVL21:
 239 0030 38BD     		pop	{r3, r4, r5, pc}
 240              	.LVL22:
 241              	.L19:
 242 0032 00BF     		.align	2
 243              	.L18:
 244 0034 00000000 		.word	Font_7x10
 245              		.cfi_endproc
 246              	.LFE133:
 248              		.section	.text.menu,"ax",%progbits
 249              		.align	2
 250              		.global	menu
 251              		.thumb
 252              		.thumb_func
 254              	menu:
 255              	.LFB134:
 536:Src/main.c    **** }
 537:Src/main.c    **** 
 538:Src/main.c    **** PID_t menu()
 539:Src/main.c    **** {
 256              		.loc 1 539 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 32
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL23:
 261 0000 30B5     		push	{r4, r5, lr}
 262              	.LCFI6:
 263              		.cfi_def_cfa_offset 12
 264              		.cfi_offset 4, -12
 265              		.cfi_offset 5, -8
 266              		.cfi_offset 14, -4
 267 0002 8BB0     		sub	sp, sp, #44
 268              	.LCFI7:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 15


 269              		.cfi_def_cfa_offset 56
 270 0004 0546     		mov	r5, r0
 540:Src/main.c    ****     print("Starting", 0);
 271              		.loc 1 540 0
 272 0006 2548     		ldr	r0, .L26
 273              	.LVL24:
 274 0008 0021     		movs	r1, #0
 275 000a FFF7FEFF 		bl	print
 276              	.LVL25:
 541:Src/main.c    ****     char msg[20] = "";
 277              		.loc 1 541 0
 278 000e 0024     		movs	r4, #0
 279 0010 0594     		str	r4, [sp, #20]
 280 0012 0694     		str	r4, [sp, #24]
 281 0014 0794     		str	r4, [sp, #28]
 282 0016 0894     		str	r4, [sp, #32]
 283 0018 0994     		str	r4, [sp, #36]
 284              	.LVL26:
 542:Src/main.c    ****     int pid_select = 0;
 543:Src/main.c    ****     uint32_t values[2] = {0, 0};
 285              		.loc 1 543 0
 286 001a 0394     		str	r4, [sp, #12]
 287 001c 0494     		str	r4, [sp, #16]
 288              	.LVL27:
 289              	.L24:
 544:Src/main.c    ****     while (1)
 545:Src/main.c    ****     {
 546:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 290              		.loc 1 546 0
 291 001e 2048     		ldr	r0, .L26+4
 292 0020 4FF40051 		mov	r1, #8192
 293 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 294              	.LVL28:
 295 0028 48BB     		cbnz	r0, .L21
 547:Src/main.c    ****         {
 548:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 296              		.loc 1 548 0
 297 002a 05A8     		add	r0, sp, #20
 298 002c 1D49     		ldr	r1, .L26+8
 299 002e 0AAB     		add	r3, sp, #40
 300 0030 03EB8403 		add	r3, r3, r4, lsl #2
 301 0034 53F81C2C 		ldr	r2, [r3, #-28]
 302 0038 FFF7FEFF 		bl	sprintf
 303              	.LVL29:
 549:Src/main.c    ****             print(msg, 0);
 304              		.loc 1 549 0
 305 003c 05A8     		add	r0, sp, #20
 306 003e 0021     		movs	r1, #0
 307 0040 FFF7FEFF 		bl	print
 308              	.LVL30:
 550:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 309              		.loc 1 550 0
 310 0044 13E0     		b	.L22
 311              	.L23:
 551:Src/main.c    ****             {
 552:Src/main.c    ****                 values[pid_select]++;
 312              		.loc 1 552 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 16


 313 0046 0AAB     		add	r3, sp, #40
 314 0048 03EB8403 		add	r3, r3, r4, lsl #2
 315 004c 53F81C2C 		ldr	r2, [r3, #-28]
 316 0050 0132     		adds	r2, r2, #1
 317 0052 43F81C2C 		str	r2, [r3, #-28]
 553:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 318              		.loc 1 553 0
 319 0056 05A8     		add	r0, sp, #20
 320 0058 1249     		ldr	r1, .L26+8
 321 005a FFF7FEFF 		bl	sprintf
 322              	.LVL31:
 554:Src/main.c    ****                 print(msg, 0);
 323              		.loc 1 554 0
 324 005e 05A8     		add	r0, sp, #20
 325 0060 0021     		movs	r1, #0
 326 0062 FFF7FEFF 		bl	print
 327              	.LVL32:
 555:Src/main.c    ****                 HAL_Delay(500);
 328              		.loc 1 555 0
 329 0066 4FF4FA70 		mov	r0, #500
 330 006a FFF7FEFF 		bl	HAL_Delay
 331              	.LVL33:
 332              	.L22:
 550:Src/main.c    ****             {
 333              		.loc 1 550 0
 334 006e 0C48     		ldr	r0, .L26+4
 335 0070 4FF40051 		mov	r1, #8192
 336 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 337              	.LVL34:
 338 0078 0028     		cmp	r0, #0
 339 007a E4D0     		beq	.L23
 556:Src/main.c    ****             }
 557:Src/main.c    ****             ++pid_select;
 340              		.loc 1 557 0
 341 007c 0134     		adds	r4, r4, #1
 342              	.LVL35:
 343              	.L21:
 558:Src/main.c    ****         }
 559:Src/main.c    ****         if (pid_select == 2)
 344              		.loc 1 559 0
 345 007e 022C     		cmp	r4, #2
 346 0080 CDD1     		bne	.L24
 560:Src/main.c    ****             break;
 561:Src/main.c    ****     }
 562:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 347              		.loc 1 562 0
 348 0082 BDF80C10 		ldrh	r1, [sp, #12]
 349 0086 BDF81020 		ldrh	r2, [sp, #16]
 350 008a 0123     		movs	r3, #1
 351 008c 0093     		str	r3, [sp]
 352 008e 0193     		str	r3, [sp, #4]
 353 0090 2846     		mov	r0, r5
 354 0092 FFF7FEFF 		bl	pid_Init
 355              	.LVL36:
 563:Src/main.c    **** }
 356              		.loc 1 563 0
 357 0096 2846     		mov	r0, r5
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 17


 358 0098 0BB0     		add	sp, sp, #44
 359              	.LCFI8:
 360              		.cfi_def_cfa_offset 12
 361              		@ sp needed
 362 009a 30BD     		pop	{r4, r5, pc}
 363              	.LVL37:
 364              	.L27:
 365              		.align	2
 366              	.L26:
 367 009c 00000000 		.word	.LC0
 368 00a0 00080240 		.word	1073874944
 369 00a4 0C000000 		.word	.LC1
 370              		.cfi_endproc
 371              	.LFE134:
 373              		.section	.text.set_motor_speed,"ax",%progbits
 374              		.align	2
 375              		.global	set_motor_speed
 376              		.thumb
 377              		.thumb_func
 379              	set_motor_speed:
 380              	.LFB135:
 564:Src/main.c    **** 
 565:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 566:Src/main.c    **** {
 381              		.loc 1 566 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 386              	.LVL38:
 567:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 387              		.loc 1 567 0
 388 0000 0346     		mov	r3, r0
 389 0002 18B9     		cbnz	r0, .L29
 568:Src/main.c    ****     {
 569:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 390              		.loc 1 569 0
 391 0004 114A     		ldr	r2, .L33
 392 0006 1268     		ldr	r2, [r2]
 393 0008 9063     		str	r0, [r2, #56]
 394 000a 13E0     		b	.L30
 395              	.L29:
 570:Src/main.c    ****     }
 571:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 396              		.loc 1 571 0
 397 000c 0428     		cmp	r0, #4
 398 000e 04D1     		bne	.L31
 572:Src/main.c    ****     {
 573:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 399              		.loc 1 573 0
 400 0010 0E4A     		ldr	r2, .L33
 401 0012 1268     		ldr	r2, [r2]
 402 0014 0020     		movs	r0, #0
 403              	.LVL39:
 404 0016 5063     		str	r0, [r2, #52]
 405 0018 0CE0     		b	.L30
 406              	.LVL40:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 18


 407              	.L31:
 574:Src/main.c    ****     }
 575:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 408              		.loc 1 575 0
 409 001a 0828     		cmp	r0, #8
 410 001c 04D1     		bne	.L32
 576:Src/main.c    ****     {
 577:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 411              		.loc 1 577 0
 412 001e 0B4A     		ldr	r2, .L33
 413 0020 1268     		ldr	r2, [r2]
 414 0022 0020     		movs	r0, #0
 415              	.LVL41:
 416 0024 1064     		str	r0, [r2, #64]
 417 0026 05E0     		b	.L30
 418              	.LVL42:
 419              	.L32:
 578:Src/main.c    ****     }
 579:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 420              		.loc 1 579 0
 421 0028 0C28     		cmp	r0, #12
 422 002a 03D1     		bne	.L30
 580:Src/main.c    ****     {
 581:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 423              		.loc 1 581 0
 424 002c 074A     		ldr	r2, .L33
 425 002e 1268     		ldr	r2, [r2]
 426 0030 0020     		movs	r0, #0
 427              	.LVL43:
 428 0032 D063     		str	r0, [r2, #60]
 429              	.L30:
 582:Src/main.c    ****     }
 583:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed > 1000 ? 1000 : speed);
 430              		.loc 1 583 0
 431 0034 054A     		ldr	r2, .L33
 432 0036 1268     		ldr	r2, [r2]
 433 0038 3432     		adds	r2, r2, #52
 434 003a 9B08     		lsrs	r3, r3, #2
 435              	.LVL44:
 436 003c B1F57A7F 		cmp	r1, #1000
 437 0040 28BF     		it	cs
 438 0042 4FF47A71 		movcs	r1, #1000
 439              	.LVL45:
 440 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 441 004a 7047     		bx	lr
 442              	.L34:
 443              		.align	2
 444              	.L33:
 445 004c 00000000 		.word	htim1
 446              		.cfi_endproc
 447              	.LFE135:
 449              		.global	__aeabi_f2d
 450              		.global	__aeabi_d2uiz
 451              		.section	.text.turn,"ax",%progbits
 452              		.align	2
 453              		.global	turn
 454              		.thumb
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 19


 455              		.thumb_func
 457              	turn:
 458              	.LFB129:
 404:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 459              		.loc 1 404 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 24
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 464              	.LCFI9:
 465              		.cfi_def_cfa_offset 20
 466              		.cfi_offset 4, -20
 467              		.cfi_offset 5, -16
 468              		.cfi_offset 6, -12
 469              		.cfi_offset 7, -8
 470              		.cfi_offset 14, -4
 471 0002 2DED028B 		fstmfdd	sp!, {d8}
 472              	.LCFI10:
 473              		.cfi_def_cfa_offset 28
 474              		.cfi_offset 80, -28
 475              		.cfi_offset 81, -24
 476 0006 87B0     		sub	sp, sp, #28
 477              	.LCFI11:
 478              		.cfi_def_cfa_offset 56
 405:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 479              		.loc 1 405 0
 480 0008 5F48     		ldr	r0, .L48+16
 481 000a 6049     		ldr	r1, .L48+20
 482 000c 4FF40062 		mov	r2, #2048
 483 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 484              	.LVL46:
 407:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 485              		.loc 1 407 0
 486 0014 6420     		movs	r0, #100
 487 0016 FFF7FEFF 		bl	HAL_Delay
 488              	.LVL47:
 408:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 489              		.loc 1 408 0
 490 001a 5D4B     		ldr	r3, .L48+24
 491 001c 5869     		ldr	r0, [r3, #20]
 492 001e 4000     		lsls	r0, r0, #1
 493 0020 FFF7FEFF 		bl	calculate_heading
 494              	.LVL48:
 495 0024 B0EE408A 		fcpys	s16, s0
 496              	.LVL49:
 409:Src/main.c    ****     TIM4->CNT = 0;
 497              		.loc 1 409 0
 498 0028 F0EEC07A 		fabss	s15, s0
 499 002c 17EE900A 		fmrs	r0, s15
 500 0030 FFF7FEFF 		bl	__aeabi_f2d
 501              	.LVL50:
 502 0034 0022     		movs	r2, #0
 503 0036 574B     		ldr	r3, .L48+28
 504 0038 FFF7FEFF 		bl	__aeabi_dmul
 505              	.LVL51:
 506 003c FFF7FEFF 		bl	__aeabi_d2uiz
 507              	.LVL52:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 20


 508 0040 85B2     		uxth	r5, r0
 509              	.LVL53:
 410:Src/main.c    ****     TIM5->CNT = 0;
 510              		.loc 1 410 0
 511 0042 0024     		movs	r4, #0
 512 0044 544B     		ldr	r3, .L48+32
 513 0046 5C62     		str	r4, [r3, #36]
 411:Src/main.c    **** 
 514              		.loc 1 411 0
 515 0048 03F58063 		add	r3, r3, #1024
 516 004c 5C62     		str	r4, [r3, #36]
 413:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 517              		.loc 1 413 0
 518 004e 0194     		str	r4, [sp, #4]
 519 0050 0294     		str	r4, [sp, #8]
 520 0052 0394     		str	r4, [sp, #12]
 521 0054 0494     		str	r4, [sp, #16]
 522 0056 ADF81440 		strh	r4, [sp, #20]	@ movhi
 414:Src/main.c    ****     print(msg, 0);
 523              		.loc 1 414 0
 524 005a 01A8     		add	r0, sp, #4
 525 005c 4F49     		ldr	r1, .L48+36
 526 005e 2A46     		mov	r2, r5
 527 0060 FFF7FEFF 		bl	sprintf
 528              	.LVL54:
 415:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 529              		.loc 1 415 0
 530 0064 01A8     		add	r0, sp, #4
 531 0066 2146     		mov	r1, r4
 532 0068 FFF7FEFF 		bl	print
 533              	.LVL55:
 416:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 534              		.loc 1 416 0
 535 006c BDEEC87A 		ftosizs	s14, s16
 536              	.LVL56:
 417:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 537              		.loc 1 417 0
 538 0070 F8EEC77A 		fsitos	s15, s14
 539 0074 78EE677A 		fsubs	s15, s16, s15
 540 0078 DFED496A 		flds	s13, .L48+40
 541 007c 67EEA67A 		fmuls	s15, s15, s13
 542              	.LVL57:
 418:Src/main.c    ****     print(msg, 2);
 543              		.loc 1 418 0
 544 0080 01A8     		add	r0, sp, #4
 545 0082 4849     		ldr	r1, .L48+44
 546 0084 17EE102A 		fmrs	r2, s14	@ int
 547 0088 FDEEE77A 		ftosizs	s15, s15
 548              	.LVL58:
 549 008c 17EE903A 		fmrs	r3, s15	@ int
 550 0090 FFF7FEFF 		bl	sprintf
 551              	.LVL59:
 419:Src/main.c    **** 
 552              		.loc 1 419 0
 553 0094 01A8     		add	r0, sp, #4
 554 0096 0221     		movs	r1, #2
 555 0098 FFF7FEFF 		bl	print
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 21


 556              	.LVL60:
 421:Src/main.c    ****     {
 557              		.loc 1 421 0
 558 009c 18EE100A 		fmrs	r0, s16
 559 00a0 FFF7FEFF 		bl	__aeabi_f2d
 560              	.LVL61:
 561 00a4 0646     		mov	r6, r0
 562 00a6 0F46     		mov	r7, r1
 563 00a8 33A3     		adr	r3, .L48
 564 00aa D3E90023 		ldrd	r2, [r3]
 565 00ae FFF7FEFF 		bl	__aeabi_dcmplt
 566              	.LVL62:
 567 00b2 20B3     		cbz	r0, .L46
 423:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 568              		.loc 1 423 0
 569 00b4 2046     		mov	r0, r4
 570 00b6 2146     		mov	r1, r4
 571 00b8 FFF7FEFF 		bl	set_motor_speed
 572              	.LVL63:
 424:Src/main.c    ****         while (TIM5->CNT < counts)
 573              		.loc 1 424 0
 574 00bc 0820     		movs	r0, #8
 575 00be 3A4B     		ldr	r3, .L48+48
 576 00c0 1988     		ldrh	r1, [r3]
 577 00c2 FFF7FEFF 		bl	set_motor_speed
 578              	.LVL64:
 425:Src/main.c    ****         {
 579              		.loc 1 425 0
 580 00c6 09E0     		b	.L38
 581              	.L39:
 427:Src/main.c    ****             print(msg, 4);
 582              		.loc 1 427 0
 583 00c8 384B     		ldr	r3, .L48+52
 584 00ca 5A6A     		ldr	r2, [r3, #36]
 585 00cc 01A8     		add	r0, sp, #4
 586 00ce 3849     		ldr	r1, .L48+56
 587 00d0 FFF7FEFF 		bl	sprintf
 588              	.LVL65:
 428:Src/main.c    ****         }
 589              		.loc 1 428 0
 590 00d4 01A8     		add	r0, sp, #4
 591 00d6 0421     		movs	r1, #4
 592 00d8 FFF7FEFF 		bl	print
 593              	.LVL66:
 594              	.L38:
 425:Src/main.c    ****         {
 595              		.loc 1 425 0
 596 00dc 334B     		ldr	r3, .L48+52
 597 00de 5B6A     		ldr	r3, [r3, #36]
 598 00e0 AB42     		cmp	r3, r5
 599 00e2 F1D3     		bcc	.L39
 430:Src/main.c    ****         print(msg, 4);
 600              		.loc 1 430 0
 601 00e4 314C     		ldr	r4, .L48+52
 602 00e6 626A     		ldr	r2, [r4, #36]
 603 00e8 01A8     		add	r0, sp, #4
 604 00ea 3149     		ldr	r1, .L48+56
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 22


 605 00ec FFF7FEFF 		bl	sprintf
 606              	.LVL67:
 431:Src/main.c    ****         TIM5->CNT = 0;
 607              		.loc 1 431 0
 608 00f0 01A8     		add	r0, sp, #4
 609 00f2 0421     		movs	r1, #4
 610 00f4 FFF7FEFF 		bl	print
 611              	.LVL68:
 432:Src/main.c    ****     }
 612              		.loc 1 432 0
 613 00f8 0023     		movs	r3, #0
 614 00fa 6362     		str	r3, [r4, #36]
 615 00fc 2BE0     		b	.L40
 616              	.L46:
 434:Src/main.c    ****     {
 617              		.loc 1 434 0
 618 00fe 3046     		mov	r0, r6
 619 0100 3946     		mov	r1, r7
 620 0102 1FA3     		adr	r3, .L48+8
 621 0104 D3E90023 		ldrd	r2, [r3]
 622 0108 FFF7FEFF 		bl	__aeabi_dcmpgt
 623              	.LVL69:
 624 010c 18B3     		cbz	r0, .L40
 436:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 625              		.loc 1 436 0
 626 010e 0020     		movs	r0, #0
 627 0110 284B     		ldr	r3, .L48+60
 628 0112 1988     		ldrh	r1, [r3]
 629 0114 FFF7FEFF 		bl	set_motor_speed
 630              	.LVL70:
 437:Src/main.c    ****         while (TIM4->CNT < counts)
 631              		.loc 1 437 0
 632 0118 0820     		movs	r0, #8
 633 011a 0021     		movs	r1, #0
 634 011c FFF7FEFF 		bl	set_motor_speed
 635              	.LVL71:
 438:Src/main.c    ****         {
 636              		.loc 1 438 0
 637 0120 09E0     		b	.L42
 638              	.L43:
 440:Src/main.c    ****             print(msg, 4);
 639              		.loc 1 440 0
 640 0122 1D4B     		ldr	r3, .L48+32
 641 0124 5A6A     		ldr	r2, [r3, #36]
 642 0126 01A8     		add	r0, sp, #4
 643 0128 2349     		ldr	r1, .L48+64
 644 012a FFF7FEFF 		bl	sprintf
 645              	.LVL72:
 441:Src/main.c    ****         }
 646              		.loc 1 441 0
 647 012e 01A8     		add	r0, sp, #4
 648 0130 0421     		movs	r1, #4
 649 0132 FFF7FEFF 		bl	print
 650              	.LVL73:
 651              	.L42:
 438:Src/main.c    ****         {
 652              		.loc 1 438 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 23


 653 0136 184B     		ldr	r3, .L48+32
 654 0138 5B6A     		ldr	r3, [r3, #36]
 655 013a AB42     		cmp	r3, r5
 656 013c F1D3     		bcc	.L43
 443:Src/main.c    ****         print(msg, 4);
 657              		.loc 1 443 0
 658 013e 164C     		ldr	r4, .L48+32
 659 0140 626A     		ldr	r2, [r4, #36]
 660 0142 01A8     		add	r0, sp, #4
 661 0144 1C49     		ldr	r1, .L48+64
 662 0146 FFF7FEFF 		bl	sprintf
 663              	.LVL74:
 444:Src/main.c    ****         TIM4->CNT = 0;
 664              		.loc 1 444 0
 665 014a 01A8     		add	r0, sp, #4
 666 014c 0421     		movs	r1, #4
 667 014e FFF7FEFF 		bl	print
 668              	.LVL75:
 445:Src/main.c    ****     }
 669              		.loc 1 445 0
 670 0152 0023     		movs	r3, #0
 671 0154 6362     		str	r3, [r4, #36]
 672              	.L40:
 447:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 673              		.loc 1 447 0
 674 0156 0020     		movs	r0, #0
 675 0158 0146     		mov	r1, r0
 676 015a FFF7FEFF 		bl	set_motor_speed
 677              	.LVL76:
 448:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 678              		.loc 1 448 0
 679 015e 0820     		movs	r0, #8
 680 0160 0021     		movs	r1, #0
 681 0162 FFF7FEFF 		bl	set_motor_speed
 682              	.LVL77:
 449:Src/main.c    **** }
 683              		.loc 1 449 0
 684 0166 0848     		ldr	r0, .L48+16
 685 0168 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 686              	.LVL78:
 450:Src/main.c    **** 
 687              		.loc 1 450 0
 688 016c 07B0     		add	sp, sp, #28
 689              	.LCFI12:
 690              		.cfi_def_cfa_offset 28
 691              		@ sp needed
 692 016e BDEC028B 		fldmfdd	sp!, {d8}
 693              	.LCFI13:
 694              		.cfi_restore 80
 695              		.cfi_restore 81
 696              		.cfi_def_cfa_offset 20
 697              	.LVL79:
 698 0172 F0BD     		pop	{r4, r5, r6, r7, pc}
 699              	.LVL80:
 700              	.L49:
 701 0174 AFF30080 		.align	3
 702              	.L48:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 24


 703 0178 7B14AE47 		.word	1202590843
 704 017c E17AA4BF 		.word	-1079739679
 705 0180 7B14AE47 		.word	1202590843
 706 0184 E17AA43F 		.word	1067743969
 707 0188 00000000 		.word	hadc1
 708 018c 00000000 		.word	dma_buffer
 709 0190 00000000 		.word	adc_values
 710 0194 00005940 		.word	1079574528
 711 0198 00080040 		.word	1073743872
 712 019c 10000000 		.word	.LC2
 713 01a0 00007A44 		.word	1148846080
 714 01a4 1C000000 		.word	.LC3
 715 01a8 00000000 		.word	.LANCHOR0
 716 01ac 000C0040 		.word	1073744896
 717 01b0 28000000 		.word	.LC4
 718 01b4 00000000 		.word	.LANCHOR1
 719 01b8 38000000 		.word	.LC5
 720              		.cfi_endproc
 721              	.LFE129:
 723              		.global	__aeabi_i2d
 724              		.global	__aeabi_dadd
 725              		.section	.text.turn_deg,"ax",%progbits
 726              		.align	2
 727              		.global	turn_deg
 728              		.thumb
 729              		.thumb_func
 731              	turn_deg:
 732              	.LFB130:
 457:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 733              		.loc 1 457 0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 24
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737              	.LVL81:
 738 0000 30B5     		push	{r4, r5, lr}
 739              	.LCFI14:
 740              		.cfi_def_cfa_offset 12
 741              		.cfi_offset 4, -12
 742              		.cfi_offset 5, -8
 743              		.cfi_offset 14, -4
 744 0002 87B0     		sub	sp, sp, #28
 745              	.LCFI15:
 746              		.cfi_def_cfa_offset 40
 747 0004 0546     		mov	r5, r0
 458:Src/main.c    ****     uint16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 748              		.loc 1 458 0
 749 0006 2C48     		ldr	r0, .L55+8
 750              	.LVL82:
 751 0008 2C49     		ldr	r1, .L55+12
 752 000a 4FF40062 		mov	r2, #2048
 753 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 754              	.LVL83:
 459:Src/main.c    ****     TIM4->CNT = 0;
 755              		.loc 1 459 0
 756 0012 A5F15A00 		sub	r0, r5, #90
 757 0016 FFF7FEFF 		bl	__aeabi_i2d
 758              	.LVL84:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 25


 759 001a 25A3     		adr	r3, .L55
 760 001c D3E90023 		ldrd	r2, [r3]
 761 0020 FFF7FEFF 		bl	__aeabi_dmul
 762              	.LVL85:
 763 0024 0022     		movs	r2, #0
 764 0026 264B     		ldr	r3, .L55+16
 765 0028 FFF7FEFF 		bl	__aeabi_dadd
 766              	.LVL86:
 767 002c FFF7FEFF 		bl	__aeabi_d2uiz
 768              	.LVL87:
 769 0030 84B2     		uxth	r4, r0
 770              	.LVL88:
 460:Src/main.c    ****     TIM5->CNT = 0;
 771              		.loc 1 460 0
 772 0032 0023     		movs	r3, #0
 773 0034 234A     		ldr	r2, .L55+20
 774 0036 5362     		str	r3, [r2, #36]
 461:Src/main.c    **** 
 775              		.loc 1 461 0
 776 0038 02F58062 		add	r2, r2, #1024
 777 003c 5362     		str	r3, [r2, #36]
 463:Src/main.c    **** 
 778              		.loc 1 463 0
 779 003e 0193     		str	r3, [sp, #4]
 780 0040 0293     		str	r3, [sp, #8]
 781 0042 0393     		str	r3, [sp, #12]
 782 0044 0493     		str	r3, [sp, #16]
 783 0046 ADF81430 		strh	r3, [sp, #20]	@ movhi
 465:Src/main.c    ****     {
 784              		.loc 1 465 0
 785 004a 1DB3     		cbz	r5, .L51
 467:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 30000);
 786              		.loc 1 467 0
 787 004c 1846     		mov	r0, r3
 788 004e 1946     		mov	r1, r3
 789 0050 FFF7FEFF 		bl	set_motor_speed
 790              	.LVL89:
 468:Src/main.c    ****         while (TIM5->CNT < counts)
 791              		.loc 1 468 0
 792 0054 0820     		movs	r0, #8
 793 0056 47F23051 		movw	r1, #30000
 794 005a FFF7FEFF 		bl	set_motor_speed
 795              	.LVL90:
 469:Src/main.c    ****         {
 796              		.loc 1 469 0
 797 005e 09E0     		b	.L52
 798              	.L53:
 471:Src/main.c    ****             print(msg, 4);
 799              		.loc 1 471 0
 800 0060 194B     		ldr	r3, .L55+24
 801 0062 5A6A     		ldr	r2, [r3, #36]
 802 0064 01A8     		add	r0, sp, #4
 803 0066 1949     		ldr	r1, .L55+28
 804 0068 FFF7FEFF 		bl	sprintf
 805              	.LVL91:
 472:Src/main.c    ****         }
 806              		.loc 1 472 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 26


 807 006c 01A8     		add	r0, sp, #4
 808 006e 0421     		movs	r1, #4
 809 0070 FFF7FEFF 		bl	print
 810              	.LVL92:
 811              	.L52:
 469:Src/main.c    ****         {
 812              		.loc 1 469 0
 813 0074 144B     		ldr	r3, .L55+24
 814 0076 5B6A     		ldr	r3, [r3, #36]
 815 0078 A342     		cmp	r3, r4
 816 007a F1D3     		bcc	.L53
 474:Src/main.c    ****         print(msg, 4);
 817              		.loc 1 474 0
 818 007c 124C     		ldr	r4, .L55+24
 819              	.LVL93:
 820 007e 626A     		ldr	r2, [r4, #36]
 821 0080 01A8     		add	r0, sp, #4
 822 0082 1249     		ldr	r1, .L55+28
 823 0084 FFF7FEFF 		bl	sprintf
 824              	.LVL94:
 475:Src/main.c    ****         TIM5->CNT = 0;
 825              		.loc 1 475 0
 826 0088 01A8     		add	r0, sp, #4
 827 008a 0421     		movs	r1, #4
 828 008c FFF7FEFF 		bl	print
 829              	.LVL95:
 476:Src/main.c    ****     }
 830              		.loc 1 476 0
 831 0090 0023     		movs	r3, #0
 832 0092 6362     		str	r3, [r4, #36]
 833              	.L51:
 491:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 834              		.loc 1 491 0
 835 0094 0020     		movs	r0, #0
 836 0096 0146     		mov	r1, r0
 837 0098 FFF7FEFF 		bl	set_motor_speed
 838              	.LVL96:
 492:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 839              		.loc 1 492 0
 840 009c 0820     		movs	r0, #8
 841 009e 0021     		movs	r1, #0
 842 00a0 FFF7FEFF 		bl	set_motor_speed
 843              	.LVL97:
 493:Src/main.c    **** }
 844              		.loc 1 493 0
 845 00a4 0448     		ldr	r0, .L55+8
 846 00a6 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 847              	.LVL98:
 494:Src/main.c    **** 
 848              		.loc 1 494 0
 849 00aa 07B0     		add	sp, sp, #28
 850              	.LCFI16:
 851              		.cfi_def_cfa_offset 12
 852              		@ sp needed
 853 00ac 30BD     		pop	{r4, r5, pc}
 854              	.L56:
 855 00ae 00BF     		.align	3
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 27


 856              	.L55:
 857 00b0 721CC771 		.word	1908874354
 858 00b4 1CC7E13F 		.word	1071761180
 859 00b8 00000000 		.word	hadc1
 860 00bc 00000000 		.word	dma_buffer
 861 00c0 00004940 		.word	1078525952
 862 00c4 00080040 		.word	1073743872
 863 00c8 000C0040 		.word	1073744896
 864 00cc 28000000 		.word	.LC4
 865              		.cfi_endproc
 866              	.LFE130:
 868              		.section	.text.encoder_pid,"ax",%progbits
 869              		.align	2
 870              		.global	encoder_pid
 871              		.thumb
 872              		.thumb_func
 874              	encoder_pid:
 875              	.LFB136:
 584:Src/main.c    **** }
 585:Src/main.c    **** 
 586:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 587:Src/main.c    **** {
 876              		.loc 1 587 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 0, uses_anonymous_args = 0
 880              	.LVL99:
 881 0000 38B5     		push	{r3, r4, r5, lr}
 882              	.LCFI17:
 883              		.cfi_def_cfa_offset 16
 884              		.cfi_offset 3, -16
 885              		.cfi_offset 4, -12
 886              		.cfi_offset 5, -8
 887              		.cfi_offset 14, -4
 588:Src/main.c    ****     /* Get error */
 589:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
 888              		.loc 1 589 0
 889 0002 0E4B     		ldr	r3, .L61
 890 0004 5C6A     		ldr	r4, [r3, #36]
 891              	.LVL100:
 590:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
 892              		.loc 1 590 0
 893 0006 03F58063 		add	r3, r3, #1024
 894 000a 5D6A     		ldr	r5, [r3, #36]
 895              	.LVL101:
 591:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
 896              		.loc 1 591 0
 897 000c 631B     		subs	r3, r4, r5
 898 000e 0361     		str	r3, [r0, #16]
 592:Src/main.c    **** 
 593:Src/main.c    ****     /* Get gain */
 594:Src/main.c    ****     // Gain <0 for ride side faster
 595:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
 899              		.loc 1 595 0
 900 0010 FFF7FEFF 		bl	pid_GetGain
 901              	.LVL102:
 596:Src/main.c    **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 28


 597:Src/main.c    ****     /* Set Motor Speeds*/
 598:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 599:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 600:Src/main.c    ****     if (gain < 0)
 601:Src/main.c    ****     {
 602:Src/main.c    ****         lspeed -= gain;
 603:Src/main.c    ****     }
 604:Src/main.c    ****     else if (gain > 0)
 605:Src/main.c    ****     {
 606:Src/main.c    ****         rspeed += gain;
 607:Src/main.c    ****     }
 608:Src/main.c    **** 
 609:Src/main.c    ****     // char msg[18] = "";
 610:Src/main.c    ****     // sprintf(msg, "LS: %lu", lspeed);
 611:Src/main.c    ****     // print(msg, 0);
 612:Src/main.c    ****     // sprintf(msg, "RS: %lu", rspeed);
 613:Src/main.c    ****     // print(msg, 1);
 614:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, lspeed);
 615:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, rspeed);
 616:Src/main.c    **** 
 617:Src/main.c    ****     /* Prevent weird overflow shit */
 618:Src/main.c    ****     if (lcnt > 60000 || rcnt > 60000)
 902              		.loc 1 618 0
 903 0014 4EF66023 		movw	r3, #60000
 904 0018 9C42     		cmp	r4, r3
 905 001a 01D8     		bhi	.L58
 906              		.loc 1 618 0 is_stmt 0 discriminator 1
 907 001c 9D42     		cmp	r5, r3
 908 001e 0CD9     		bls	.L57
 909              	.L58:
 619:Src/main.c    ****     {
 620:Src/main.c    ****         TIM4->CNT -= 50000;
 910              		.loc 1 620 0 is_stmt 1
 911 0020 064A     		ldr	r2, .L61
 912 0022 536A     		ldr	r3, [r2, #36]
 913 0024 A3F54343 		sub	r3, r3, #49920
 914 0028 503B     		subs	r3, r3, #80
 915 002a 5362     		str	r3, [r2, #36]
 916              	.LVL103:
 621:Src/main.c    ****         TIM5->CNT -= 50000;
 917              		.loc 1 621 0
 918 002c 02F58062 		add	r2, r2, #1024
 919 0030 536A     		ldr	r3, [r2, #36]
 920 0032 A3F54343 		sub	r3, r3, #49920
 921 0036 503B     		subs	r3, r3, #80
 922 0038 5362     		str	r3, [r2, #36]
 923              	.L57:
 924 003a 38BD     		pop	{r3, r4, r5, pc}
 925              	.LVL104:
 926              	.L62:
 927              		.align	2
 928              	.L61:
 929 003c 00080040 		.word	1073743872
 930              		.cfi_endproc
 931              	.LFE136:
 933              		.section	.text.drive_straight,"ax",%progbits
 934              		.align	2
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 29


 935              		.global	drive_straight
 936              		.thumb
 937              		.thumb_func
 939              	drive_straight:
 940              	.LFB128:
 394:Src/main.c    ****     encoder_pid(enc_pid);
 941              		.loc 1 394 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 0
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              	.LVL105:
 946 0000 08B5     		push	{r3, lr}
 947              	.LCFI18:
 948              		.cfi_def_cfa_offset 8
 949              		.cfi_offset 3, -8
 950              		.cfi_offset 14, -4
 395:Src/main.c    ****     HAL_Delay(10);
 951              		.loc 1 395 0
 952 0002 FFF7FEFF 		bl	encoder_pid
 953              	.LVL106:
 396:Src/main.c    **** }
 954              		.loc 1 396 0
 955 0006 0A20     		movs	r0, #10
 956 0008 FFF7FEFF 		bl	HAL_Delay
 957              	.LVL107:
 958 000c 08BD     		pop	{r3, pc}
 959              		.cfi_endproc
 960              	.LFE128:
 962 000e 00BF     		.section	.text.square_edge,"ax",%progbits
 963              		.align	2
 964              		.global	square_edge
 965              		.thumb
 966              		.thumb_func
 968              	square_edge:
 969              	.LFB126:
 358:Src/main.c    ****     while (1)
 970              		.loc 1 358 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974              	.LVL108:
 975 0000 10B5     		push	{r4, lr}
 976              	.LCFI19:
 977              		.cfi_def_cfa_offset 8
 978              		.cfi_offset 4, -8
 979              		.cfi_offset 14, -4
 980 0002 0446     		mov	r4, r0
 981              	.LVL109:
 982              	.L66:
 361:Src/main.c    ****         if (EDGE_LEFT_STATE == FLAGGED || EDGE_RIGHT_STATE == FLAGGED)
 983              		.loc 1 361 0
 984 0004 2046     		mov	r0, r4
 985 0006 FFF7FEFF 		bl	drive_straight
 986              	.LVL110:
 362:Src/main.c    ****         {
 987              		.loc 1 362 0
 988 000a 0E4B     		ldr	r3, .L72
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 30


 989 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 990 000e 012B     		cmp	r3, #1
 991 0010 03D0     		beq	.L67
 362:Src/main.c    ****         {
 992              		.loc 1 362 0 is_stmt 0 discriminator 1
 993 0012 0D4A     		ldr	r2, .L72+4
 994 0014 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 995 0016 012A     		cmp	r2, #1
 996 0018 0ED1     		bne	.L68
 997              	.L67:
 364:Src/main.c    ****             {
 998              		.loc 1 364 0 is_stmt 1
 999 001a 012B     		cmp	r3, #1
 1000 001c 03D1     		bne	.L69
 366:Src/main.c    ****             }
 1001              		.loc 1 366 0
 1002 001e 0020     		movs	r0, #0
 1003 0020 0146     		mov	r1, r0
 1004 0022 FFF7FEFF 		bl	set_motor_speed
 1005              	.LVL111:
 1006              	.L69:
 368:Src/main.c    ****             {
 1007              		.loc 1 368 0
 1008 0026 084B     		ldr	r3, .L72+4
 1009 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1010 002a 012B     		cmp	r3, #1
 1011 002c EAD1     		bne	.L66
 370:Src/main.c    ****             }
 1012              		.loc 1 370 0
 1013 002e 0820     		movs	r0, #8
 1014 0030 0021     		movs	r1, #0
 1015 0032 FFF7FEFF 		bl	set_motor_speed
 1016              	.LVL112:
 1017 0036 E5E7     		b	.L66
 1018              	.L68:
 373:Src/main.c    ****         {
 1019              		.loc 1 373 0
 1020 0038 012B     		cmp	r3, #1
 1021 003a E3D1     		bne	.L66
 373:Src/main.c    ****         {
 1022              		.loc 1 373 0 is_stmt 0 discriminator 1
 1023 003c 012A     		cmp	r2, #1
 1024 003e E1D1     		bne	.L66
 378:Src/main.c    **** 
 1025              		.loc 1 378 0 is_stmt 1
 1026 0040 10BD     		pop	{r4, pc}
 1027              	.LVL113:
 1028              	.L73:
 1029 0042 00BF     		.align	2
 1030              	.L72:
 1031 0044 00000000 		.word	EDGE_LEFT_STATE
 1032 0048 00000000 		.word	EDGE_RIGHT_STATE
 1033              		.cfi_endproc
 1034              	.LFE126:
 1036              		.section	.text.drive_straight_time,"ax",%progbits
 1037              		.align	2
 1038              		.global	drive_straight_time
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 31


 1039              		.thumb
 1040              		.thumb_func
 1042              	drive_straight_time:
 1043              	.LFB127:
 381:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1044              		.loc 1 381 0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 0
 1047              		@ frame_needed = 0, uses_anonymous_args = 0
 1048              	.LVL114:
 1049 0000 70B5     		push	{r4, r5, r6, lr}
 1050              	.LCFI20:
 1051              		.cfi_def_cfa_offset 16
 1052              		.cfi_offset 4, -16
 1053              		.cfi_offset 5, -12
 1054              		.cfi_offset 6, -8
 1055              		.cfi_offset 14, -4
 1056 0002 0646     		mov	r6, r0
 1057 0004 0D46     		mov	r5, r1
 382:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1058              		.loc 1 382 0
 1059 0006 0020     		movs	r0, #0
 1060              	.LVL115:
 1061 0008 0E4B     		ldr	r3, .L78
 1062 000a 1988     		ldrh	r1, [r3]
 1063              	.LVL116:
 1064 000c FFF7FEFF 		bl	set_motor_speed
 1065              	.LVL117:
 383:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 1066              		.loc 1 383 0
 1067 0010 0820     		movs	r0, #8
 1068 0012 0D4B     		ldr	r3, .L78+4
 1069 0014 1988     		ldrh	r1, [r3]
 1070 0016 FFF7FEFF 		bl	set_motor_speed
 1071              	.LVL118:
 384:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 1072              		.loc 1 384 0
 1073 001a FFF7FEFF 		bl	HAL_GetTick
 1074              	.LVL119:
 1075 001e 0446     		mov	r4, r0
 1076              	.LVL120:
 385:Src/main.c    ****     {
 1077              		.loc 1 385 0
 1078 0020 02E0     		b	.L75
 1079              	.LVL121:
 1080              	.L76:
 387:Src/main.c    ****     }
 1081              		.loc 1 387 0
 1082 0022 3046     		mov	r0, r6
 1083 0024 FFF7FEFF 		bl	drive_straight
 1084              	.LVL122:
 1085              	.L75:
 385:Src/main.c    ****     {
 1086              		.loc 1 385 0
 1087 0028 FFF7FEFF 		bl	HAL_GetTick
 1088              	.LVL123:
 1089 002c 001B     		subs	r0, r0, r4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 32


 1090 002e A842     		cmp	r0, r5
 1091 0030 F7D3     		bcc	.L76
 389:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1092              		.loc 1 389 0
 1093 0032 0020     		movs	r0, #0
 1094 0034 0146     		mov	r1, r0
 1095 0036 FFF7FEFF 		bl	set_motor_speed
 1096              	.LVL124:
 390:Src/main.c    **** }
 1097              		.loc 1 390 0
 1098 003a 0820     		movs	r0, #8
 1099 003c 0021     		movs	r1, #0
 1100 003e FFF7FEFF 		bl	set_motor_speed
 1101              	.LVL125:
 1102 0042 70BD     		pop	{r4, r5, r6, pc}
 1103              	.LVL126:
 1104              	.L79:
 1105              		.align	2
 1106              	.L78:
 1107 0044 00000000 		.word	.LANCHOR1
 1108 0048 00000000 		.word	.LANCHOR0
 1109              		.cfi_endproc
 1110              	.LFE127:
 1112              		.section	.text.test_PWM_htim1,"ax",%progbits
 1113              		.align	2
 1114              		.global	test_PWM_htim1
 1115              		.thumb
 1116              		.thumb_func
 1118              	test_PWM_htim1:
 1119              	.LFB137:
 622:Src/main.c    ****     }
 623:Src/main.c    **** }
 624:Src/main.c    **** 
 625:Src/main.c    **** // ******
 626:Src/main.c    **** // TESTS
 627:Src/main.c    **** // ******
 628:Src/main.c    **** 
 629:Src/main.c    **** /*
 630:Src/main.c    ****  * Instructions:
 631:Src/main.c    ****  *      Run test_All() before the main while loop
 632:Src/main.c    ****  *      - Put a pull up resistor on htim3 PWM waves, measure voltage on pin
 633:Src/main.c    ****  *      - Measure voltage on pin of htim1
 634:Src/main.c    ****  *      - Give ADC pins values and read off of screen
 635:Src/main.c    ****  */
 636:Src/main.c    **** 
 637:Src/main.c    **** /*
 638:Src/main.c    ****  * Test PWM
 639:Src/main.c    ****  * Output: htim1 channel 1 through 4, PWM wave. Confirm these
 640:Src/main.c    ****  *         PWM waves via an oscilliscope.
 641:Src/main.c    ****  */
 642:Src/main.c    **** void test_PWM_htim1()
 643:Src/main.c    **** {
 1120              		.loc 1 643 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124 0000 10B5     		push	{r4, lr}
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 33


 1125              	.LCFI21:
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 4, -8
 1128              		.cfi_offset 14, -4
 644:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1129              		.loc 1 644 0
 1130 0002 0C4C     		ldr	r4, .L84
 1131 0004 2046     		mov	r0, r4
 1132 0006 0021     		movs	r1, #0
 1133 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1134              	.LVL127:
 645:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 646:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1135              		.loc 1 646 0
 1136 000c 2046     		mov	r0, r4
 1137 000e 0821     		movs	r1, #8
 1138 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1139              	.LVL128:
 647:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 648:Src/main.c    ****     int s = 0;
 1140              		.loc 1 648 0
 1141 0014 0024     		movs	r4, #0
 649:Src/main.c    ****     while (s < 1000)
 1142              		.loc 1 649 0
 1143 0016 08E0     		b	.L81
 1144              	.LVL129:
 1145              	.L82:
 650:Src/main.c    ****     {
 651:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, s);
 1146              		.loc 1 651 0
 1147 0018 064B     		ldr	r3, .L84
 1148 001a 1B68     		ldr	r3, [r3]
 1149 001c 5C63     		str	r4, [r3, #52]
 652:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 653:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, s);
 1150              		.loc 1 653 0
 1151 001e DC63     		str	r4, [r3, #60]
 654:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 655:Src/main.c    ****         s += 100;
 1152              		.loc 1 655 0
 1153 0020 6434     		adds	r4, r4, #100
 1154              	.LVL130:
 656:Src/main.c    ****         HAL_Delay(1000);
 1155              		.loc 1 656 0
 1156 0022 4FF47A70 		mov	r0, #1000
 1157 0026 FFF7FEFF 		bl	HAL_Delay
 1158              	.LVL131:
 1159              	.L81:
 649:Src/main.c    ****     {
 1160              		.loc 1 649 0
 1161 002a B4F57A7F 		cmp	r4, #1000
 1162 002e F3DB     		blt	.L82
 657:Src/main.c    ****     }
 658:Src/main.c    **** }
 1163              		.loc 1 658 0
 1164 0030 10BD     		pop	{r4, pc}
 1165              	.LVL132:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 34


 1166              	.L85:
 1167 0032 00BF     		.align	2
 1168              	.L84:
 1169 0034 00000000 		.word	htim1
 1170              		.cfi_endproc
 1171              	.LFE137:
 1173              		.section	.text.test_PWM_htim3,"ax",%progbits
 1174              		.align	2
 1175              		.global	test_PWM_htim3
 1176              		.thumb
 1177              		.thumb_func
 1179              	test_PWM_htim3:
 1180              	.LFB138:
 659:Src/main.c    **** 
 660:Src/main.c    **** /*
 661:Src/main.c    ****  * Test PWM
 662:Src/main.c    ****  * Output: htim3 channel 1 through 3, PWM wave. Confirm these
 663:Src/main.c    ****  *         PWM waves via an oscilliscope.
 664:Src/main.c    ****  */
 665:Src/main.c    **** void test_PWM_htim3()
 666:Src/main.c    **** {
 1181              		.loc 1 666 0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 0, uses_anonymous_args = 0
 1185 0000 10B5     		push	{r4, lr}
 1186              	.LCFI22:
 1187              		.cfi_def_cfa_offset 8
 1188              		.cfi_offset 4, -8
 1189              		.cfi_offset 14, -4
 667:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1190              		.loc 1 667 0
 1191 0002 0F4C     		ldr	r4, .L90
 1192 0004 2046     		mov	r0, r4
 1193 0006 0021     		movs	r1, #0
 1194 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1195              	.LVL133:
 668:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1196              		.loc 1 668 0
 1197 000c 2046     		mov	r0, r4
 1198 000e 0421     		movs	r1, #4
 1199 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1200              	.LVL134:
 669:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1201              		.loc 1 669 0
 1202 0014 2046     		mov	r0, r4
 1203 0016 0821     		movs	r1, #8
 1204 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1205              	.LVL135:
 670:Src/main.c    **** 
 671:Src/main.c    ****     int s = 500;
 1206              		.loc 1 671 0
 1207 001c 4FF4FA74 		mov	r4, #500
 672:Src/main.c    ****     while (s < 2400)
 1208              		.loc 1 672 0
 1209 0020 09E0     		b	.L87
 1210              	.LVL136:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 35


 1211              	.L88:
 673:Src/main.c    ****     {
 674:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s);
 1212              		.loc 1 674 0
 1213 0022 074B     		ldr	r3, .L90
 1214 0024 1B68     		ldr	r3, [r3]
 1215 0026 5C63     		str	r4, [r3, #52]
 675:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s);
 1216              		.loc 1 675 0
 1217 0028 9C63     		str	r4, [r3, #56]
 676:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, s);
 1218              		.loc 1 676 0
 1219 002a DC63     		str	r4, [r3, #60]
 677:Src/main.c    ****         s += 100;
 1220              		.loc 1 677 0
 1221 002c 6434     		adds	r4, r4, #100
 1222              	.LVL137:
 678:Src/main.c    ****         HAL_Delay(500);
 1223              		.loc 1 678 0
 1224 002e 4FF4FA70 		mov	r0, #500
 1225 0032 FFF7FEFF 		bl	HAL_Delay
 1226              	.LVL138:
 1227              	.L87:
 672:Src/main.c    ****     {
 1228              		.loc 1 672 0
 1229 0036 B4F5166F 		cmp	r4, #2400
 1230 003a F2DB     		blt	.L88
 679:Src/main.c    ****     }
 680:Src/main.c    **** }
 1231              		.loc 1 680 0
 1232 003c 10BD     		pop	{r4, pc}
 1233              	.LVL139:
 1234              	.L91:
 1235 003e 00BF     		.align	2
 1236              	.L90:
 1237 0040 00000000 		.word	htim3
 1238              		.cfi_endproc
 1239              	.LFE138:
 1241              		.section	.text.test_ADC,"ax",%progbits
 1242              		.align	2
 1243              		.global	test_ADC
 1244              		.thumb
 1245              		.thumb_func
 1247              	test_ADC:
 1248              	.LFB139:
 681:Src/main.c    **** 
 682:Src/main.c    **** void test_ADC()
 683:Src/main.c    **** {
 1249              		.loc 1 683 0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 24
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 1253 0000 10B5     		push	{r4, lr}
 1254              	.LCFI23:
 1255              		.cfi_def_cfa_offset 8
 1256              		.cfi_offset 4, -8
 1257              		.cfi_offset 14, -4
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 36


 1258 0002 86B0     		sub	sp, sp, #24
 1259              	.LCFI24:
 1260              		.cfi_def_cfa_offset 32
 684:Src/main.c    ****     char msg[18] = "";
 1261              		.loc 1 684 0
 1262 0004 0023     		movs	r3, #0
 1263 0006 0193     		str	r3, [sp, #4]
 1264 0008 0293     		str	r3, [sp, #8]
 1265 000a 0393     		str	r3, [sp, #12]
 1266 000c 0493     		str	r3, [sp, #16]
 1267 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
 685:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1268              		.loc 1 685 0
 1269 0012 0F48     		ldr	r0, .L95
 1270 0014 0F49     		ldr	r1, .L95+4
 1271 0016 4FF40062 		mov	r2, #2048
 1272 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1273              	.LVL140:
 1274              	.L93:
 1275              	.LBB2:
 686:Src/main.c    **** 
 687:Src/main.c    ****     while (1)
 688:Src/main.c    ****     {
 689:Src/main.c    ****         int ch_5 = adc_values[0];
 1276              		.loc 1 689 0 discriminator 1
 1277 001e 0E4B     		ldr	r3, .L95+8
 1278              	.LVL141:
 690:Src/main.c    ****         int ch_4 = adc_values[1];
 1279              		.loc 1 690 0 discriminator 1
 1280 0020 5C68     		ldr	r4, [r3, #4]
 1281              	.LVL142:
 691:Src/main.c    **** 
 692:Src/main.c    ****         sprintf(msg, "ch_5: %d", ch_5);
 1282              		.loc 1 692 0 discriminator 1
 1283 0022 01A8     		add	r0, sp, #4
 1284 0024 0D49     		ldr	r1, .L95+12
 1285 0026 1A68     		ldr	r2, [r3]
 1286 0028 FFF7FEFF 		bl	sprintf
 1287              	.LVL143:
 693:Src/main.c    ****         print(msg, 0);
 1288              		.loc 1 693 0 discriminator 1
 1289 002c 01A8     		add	r0, sp, #4
 1290 002e 0021     		movs	r1, #0
 1291 0030 FFF7FEFF 		bl	print
 1292              	.LVL144:
 694:Src/main.c    **** 
 695:Src/main.c    ****         sprintf(msg, "ch_4: %d", ch_4);
 1293              		.loc 1 695 0 discriminator 1
 1294 0034 01A8     		add	r0, sp, #4
 1295 0036 0A49     		ldr	r1, .L95+16
 1296 0038 2246     		mov	r2, r4
 1297 003a FFF7FEFF 		bl	sprintf
 1298              	.LVL145:
 696:Src/main.c    ****         print(msg, 2);
 1299              		.loc 1 696 0 discriminator 1
 1300 003e 01A8     		add	r0, sp, #4
 1301 0040 0221     		movs	r1, #2
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 37


 1302 0042 FFF7FEFF 		bl	print
 1303              	.LVL146:
 697:Src/main.c    **** 
 698:Src/main.c    ****         HAL_Delay(100);
 1304              		.loc 1 698 0 discriminator 1
 1305 0046 6420     		movs	r0, #100
 1306 0048 FFF7FEFF 		bl	HAL_Delay
 1307              	.LVL147:
 1308              	.LBE2:
 699:Src/main.c    ****     }
 1309              		.loc 1 699 0 discriminator 1
 1310 004c E7E7     		b	.L93
 1311              	.L96:
 1312 004e 00BF     		.align	2
 1313              	.L95:
 1314 0050 00000000 		.word	hadc1
 1315 0054 00000000 		.word	dma_buffer
 1316 0058 00000000 		.word	adc_values
 1317 005c 48000000 		.word	.LC6
 1318 0060 54000000 		.word	.LC7
 1319              		.cfi_endproc
 1320              	.LFE139:
 1322              		.section	.text.test_All,"ax",%progbits
 1323              		.align	2
 1324              		.global	test_All
 1325              		.thumb
 1326              		.thumb_func
 1328              	test_All:
 1329              	.LFB140:
 700:Src/main.c    **** }
 701:Src/main.c    **** 
 702:Src/main.c    **** /**
 703:Src/main.c    ****  * Test all PWM and ADC - Read PWM waves, input ADC voltages 
 704:Src/main.c    ****  * and read values on OLED
 705:Src/main.c    ****  *      htim1 -> CH1, CH2, CH3, CH4
 706:Src/main.c    ****  *      htim3 -> CH1, CH2, CH3
 707:Src/main.c    ****  *      ADC   -> CH5, CH4
 708:Src/main.c    ****  */
 709:Src/main.c    **** void test_All()
 710:Src/main.c    **** {
 1330              		.loc 1 710 0
 1331              		.cfi_startproc
 1332              		@ Volatile: function does not return.
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335 0000 08B5     		push	{r3, lr}
 1336              	.LCFI25:
 1337              		.cfi_def_cfa_offset 8
 1338              		.cfi_offset 3, -8
 1339              		.cfi_offset 14, -4
 711:Src/main.c    ****     test_PWM_htim1();
 1340              		.loc 1 711 0
 1341 0002 FFF7FEFF 		bl	test_PWM_htim1
 1342              	.LVL148:
 712:Src/main.c    ****     test_PWM_htim3();
 1343              		.loc 1 712 0
 1344 0006 FFF7FEFF 		bl	test_PWM_htim3
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 38


 1345              	.LVL149:
 713:Src/main.c    ****     test_ADC();
 1346              		.loc 1 713 0
 1347 000a FFF7FEFF 		bl	test_ADC
 1348              	.LVL150:
 1349              		.cfi_endproc
 1350              	.LFE140:
 1352 000e 00BF     		.section	.text._Error_Handler,"ax",%progbits
 1353              		.align	2
 1354              		.global	_Error_Handler
 1355              		.thumb
 1356              		.thumb_func
 1358              	_Error_Handler:
 1359              	.LFB141:
 714:Src/main.c    **** }
 715:Src/main.c    **** // ******
 716:Src/main.c    **** // END TESTS
 717:Src/main.c    **** // ******
 718:Src/main.c    **** 
 719:Src/main.c    **** /* USER CODE END 4 */
 720:Src/main.c    **** 
 721:Src/main.c    **** /**
 722:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 723:Src/main.c    ****   * @param  file: The file name as string.
 724:Src/main.c    ****   * @param  line: The line in file as a number.
 725:Src/main.c    ****   * @retval None
 726:Src/main.c    ****   */
 727:Src/main.c    **** void _Error_Handler(char *file, int line)
 728:Src/main.c    **** {
 1360              		.loc 1 728 0
 1361              		.cfi_startproc
 1362              		@ Volatile: function does not return.
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365              		@ link register save eliminated.
 1366              	.LVL151:
 1367              	.L100:
 729:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 730:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 731:Src/main.c    ****     while (1)
 732:Src/main.c    ****     {
 733:Src/main.c    ****     }
 1368              		.loc 1 733 0 discriminator 1
 1369 0000 FEE7     		b	.L100
 1370              		.cfi_endproc
 1371              	.LFE141:
 1373 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1374              		.align	2
 1375              		.global	SystemClock_Config
 1376              		.thumb
 1377              		.thumb_func
 1379              	SystemClock_Config:
 1380              	.LFB125:
 303:Src/main.c    **** 
 1381              		.loc 1 303 0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 80
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 39


 1384              		@ frame_needed = 0, uses_anonymous_args = 0
 1385 0000 00B5     		push	{lr}
 1386              	.LCFI26:
 1387              		.cfi_def_cfa_offset 4
 1388              		.cfi_offset 14, -4
 1389 0002 95B0     		sub	sp, sp, #84
 1390              	.LCFI27:
 1391              		.cfi_def_cfa_offset 88
 1392              	.LBB3:
 310:Src/main.c    **** 
 1393              		.loc 1 310 0
 1394 0004 0022     		movs	r2, #0
 1395 0006 0192     		str	r2, [sp, #4]
 1396 0008 2A4B     		ldr	r3, .L105
 1397 000a 196C     		ldr	r1, [r3, #64]
 1398 000c 41F08051 		orr	r1, r1, #268435456
 1399 0010 1964     		str	r1, [r3, #64]
 1400 0012 1B6C     		ldr	r3, [r3, #64]
 1401 0014 03F08053 		and	r3, r3, #268435456
 1402 0018 0193     		str	r3, [sp, #4]
 1403 001a 019B     		ldr	r3, [sp, #4]
 1404              	.LBE3:
 1405              	.LBB4:
 312:Src/main.c    **** 
 1406              		.loc 1 312 0
 1407 001c 0292     		str	r2, [sp, #8]
 1408 001e 2649     		ldr	r1, .L105+4
 1409 0020 0B68     		ldr	r3, [r1]
 1410 0022 23F44043 		bic	r3, r3, #49152
 1411 0026 43F40043 		orr	r3, r3, #32768
 1412 002a 0B60     		str	r3, [r1]
 1413 002c 0B68     		ldr	r3, [r1]
 1414 002e 03F44043 		and	r3, r3, #49152
 1415 0032 0293     		str	r3, [sp, #8]
 1416 0034 029B     		ldr	r3, [sp, #8]
 1417              	.LBE4:
 316:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1418              		.loc 1 316 0
 1419 0036 0223     		movs	r3, #2
 1420 0038 0893     		str	r3, [sp, #32]
 317:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 1421              		.loc 1 317 0
 1422 003a 0121     		movs	r1, #1
 1423 003c 0B91     		str	r1, [sp, #44]
 318:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1424              		.loc 1 318 0
 1425 003e 1021     		movs	r1, #16
 1426 0040 0C91     		str	r1, [sp, #48]
 319:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1427              		.loc 1 319 0
 1428 0042 0E93     		str	r3, [sp, #56]
 320:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 1429              		.loc 1 320 0
 1430 0044 0F92     		str	r2, [sp, #60]
 321:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 1431              		.loc 1 321 0
 1432 0046 0822     		movs	r2, #8
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 40


 1433 0048 1092     		str	r2, [sp, #64]
 322:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1434              		.loc 1 322 0
 1435 004a 4822     		movs	r2, #72
 1436 004c 1192     		str	r2, [sp, #68]
 323:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 1437              		.loc 1 323 0
 1438 004e 1293     		str	r3, [sp, #72]
 324:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1439              		.loc 1 324 0
 1440 0050 0423     		movs	r3, #4
 1441 0052 1393     		str	r3, [sp, #76]
 325:Src/main.c    ****     {
 1442              		.loc 1 325 0
 1443 0054 08A8     		add	r0, sp, #32
 1444 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1445              	.LVL152:
 1446 005a 20B1     		cbz	r0, .L102
 327:Src/main.c    ****     }
 1447              		.loc 1 327 0
 1448 005c 1748     		ldr	r0, .L105+8
 1449 005e 40F24711 		movw	r1, #327
 1450 0062 FFF7FEFF 		bl	_Error_Handler
 1451              	.LVL153:
 1452              	.L102:
 332:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1453              		.loc 1 332 0
 1454 0066 0F23     		movs	r3, #15
 1455 0068 0393     		str	r3, [sp, #12]
 333:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1456              		.loc 1 333 0
 1457 006a 0221     		movs	r1, #2
 1458 006c 0491     		str	r1, [sp, #16]
 334:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1459              		.loc 1 334 0
 1460 006e 0023     		movs	r3, #0
 1461 0070 0593     		str	r3, [sp, #20]
 335:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1462              		.loc 1 335 0
 1463 0072 4FF48052 		mov	r2, #4096
 1464 0076 0692     		str	r2, [sp, #24]
 336:Src/main.c    **** 
 1465              		.loc 1 336 0
 1466 0078 0793     		str	r3, [sp, #28]
 338:Src/main.c    ****     {
 1467              		.loc 1 338 0
 1468 007a 03A8     		add	r0, sp, #12
 1469 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1470              	.LVL154:
 1471 0080 20B1     		cbz	r0, .L103
 340:Src/main.c    ****     }
 1472              		.loc 1 340 0
 1473 0082 0E48     		ldr	r0, .L105+8
 1474 0084 4FF4AA71 		mov	r1, #340
 1475 0088 FFF7FEFF 		bl	_Error_Handler
 1476              	.LVL155:
 1477              	.L103:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 41


 345:Src/main.c    **** 
 1478              		.loc 1 345 0
 1479 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1480              	.LVL156:
 1481 0090 0B4B     		ldr	r3, .L105+12
 1482 0092 A3FB0030 		umull	r3, r0, r3, r0
 1483 0096 8009     		lsrs	r0, r0, #6
 1484 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1485              	.LVL157:
 349:Src/main.c    **** 
 1486              		.loc 1 349 0
 1487 009c 0420     		movs	r0, #4
 1488 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1489              	.LVL158:
 352:Src/main.c    **** }
 1490              		.loc 1 352 0
 1491 00a2 4FF0FF30 		mov	r0, #-1
 1492 00a6 0021     		movs	r1, #0
 1493 00a8 0A46     		mov	r2, r1
 1494 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1495              	.LVL159:
 353:Src/main.c    **** 
 1496              		.loc 1 353 0
 1497 00ae 15B0     		add	sp, sp, #84
 1498              	.LCFI28:
 1499              		.cfi_def_cfa_offset 4
 1500              		@ sp needed
 1501 00b0 5DF804FB 		ldr	pc, [sp], #4
 1502              	.L106:
 1503              		.align	2
 1504              	.L105:
 1505 00b4 00380240 		.word	1073887232
 1506 00b8 00700040 		.word	1073770496
 1507 00bc 60000000 		.word	.LC8
 1508 00c0 D34D6210 		.word	274877907
 1509              		.cfi_endproc
 1510              	.LFE125:
 1512              		.section	.text.main,"ax",%progbits
 1513              		.align	2
 1514              		.global	main
 1515              		.thumb
 1516              		.thumb_func
 1518              	main:
 1519              	.LFB124:
 111:Src/main.c    ****     /* USER CODE BEGIN 1 */
 1520              		.loc 1 111 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 24
 1523              		@ frame_needed = 0, uses_anonymous_args = 0
 1524 0000 30B5     		push	{r4, r5, lr}
 1525              	.LCFI29:
 1526              		.cfi_def_cfa_offset 12
 1527              		.cfi_offset 4, -12
 1528              		.cfi_offset 5, -8
 1529              		.cfi_offset 14, -4
 1530 0002 89B0     		sub	sp, sp, #36
 1531              	.LCFI30:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 42


 1532              		.cfi_def_cfa_offset 48
 119:Src/main.c    **** 
 1533              		.loc 1 119 0
 1534 0004 FFF7FEFF 		bl	HAL_Init
 1535              	.LVL160:
 126:Src/main.c    **** 
 1536              		.loc 1 126 0
 1537 0008 FFF7FEFF 		bl	SystemClock_Config
 1538              	.LVL161:
 133:Src/main.c    ****     MX_DMA_Init();
 1539              		.loc 1 133 0
 1540 000c FFF7FEFF 		bl	MX_GPIO_Init
 1541              	.LVL162:
 134:Src/main.c    ****     MX_TIM3_Init();
 1542              		.loc 1 134 0
 1543 0010 FFF7FEFF 		bl	MX_DMA_Init
 1544              	.LVL163:
 135:Src/main.c    ****     MX_TIM1_Init();
 1545              		.loc 1 135 0
 1546 0014 FFF7FEFF 		bl	MX_TIM3_Init
 1547              	.LVL164:
 136:Src/main.c    ****     MX_TIM2_Init();
 1548              		.loc 1 136 0
 1549 0018 FFF7FEFF 		bl	MX_TIM1_Init
 1550              	.LVL165:
 137:Src/main.c    ****     MX_ADC1_Init();
 1551              		.loc 1 137 0
 1552 001c FFF7FEFF 		bl	MX_TIM2_Init
 1553              	.LVL166:
 138:Src/main.c    ****     MX_I2C1_Init();
 1554              		.loc 1 138 0
 1555 0020 FFF7FEFF 		bl	MX_ADC1_Init
 1556              	.LVL167:
 139:Src/main.c    ****     MX_TIM4_Init();
 1557              		.loc 1 139 0
 1558 0024 FFF7FEFF 		bl	MX_I2C1_Init
 1559              	.LVL168:
 140:Src/main.c    ****     MX_TIM9_Init();
 1560              		.loc 1 140 0
 1561 0028 FFF7FEFF 		bl	MX_TIM4_Init
 1562              	.LVL169:
 141:Src/main.c    ****     MX_TIM5_Init();
 1563              		.loc 1 141 0
 1564 002c FFF7FEFF 		bl	MX_TIM9_Init
 1565              	.LVL170:
 142:Src/main.c    ****     /* USER CODE BEGIN 2 */
 1566              		.loc 1 142 0
 1567 0030 FFF7FEFF 		bl	MX_TIM5_Init
 1568              	.LVL171:
 159:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1569              		.loc 1 159 0
 1570 0034 7748     		ldr	r0, .L120
 1571 0036 1821     		movs	r1, #24
 1572 0038 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1573              	.LVL172:
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1574              		.loc 1 160 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 43


 1575 003c 7648     		ldr	r0, .L120+4
 1576 003e 1821     		movs	r1, #24
 1577 0040 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1578              	.LVL173:
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 1579              		.loc 1 161 0
 1580 0044 754C     		ldr	r4, .L120+8
 1581 0046 2046     		mov	r0, r4
 1582 0048 0021     		movs	r1, #0
 1583 004a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1584              	.LVL174:
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1585              		.loc 1 162 0
 1586 004e 2046     		mov	r0, r4
 1587 0050 0421     		movs	r1, #4
 1588 0052 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1589              	.LVL175:
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 1590              		.loc 1 163 0
 1591 0056 2046     		mov	r0, r4
 1592 0058 0821     		movs	r1, #8
 1593 005a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1594              	.LVL176:
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1595              		.loc 1 164 0
 1596 005e 2046     		mov	r0, r4
 1597 0060 0C21     		movs	r1, #12
 1598 0062 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1599              	.LVL177:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1600              		.loc 1 165 0
 1601 0066 6E4C     		ldr	r4, .L120+12
 1602 0068 2046     		mov	r0, r4
 1603 006a 0021     		movs	r1, #0
 1604 006c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1605              	.LVL178:
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1606              		.loc 1 166 0
 1607 0070 2046     		mov	r0, r4
 1608 0072 0421     		movs	r1, #4
 1609 0074 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1610              	.LVL179:
 167:Src/main.c    **** 
 1611              		.loc 1 167 0
 1612 0078 2046     		mov	r0, r4
 1613 007a 0821     		movs	r1, #8
 1614 007c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1615              	.LVL180:
 170:Src/main.c    ****     print("Starting", 0);
 1616              		.loc 1 170 0
 1617 0080 FFF7FEFF 		bl	ssd1306_Init
 1618              	.LVL181:
 171:Src/main.c    ****     claw_init(&htim3);
 1619              		.loc 1 171 0
 1620 0084 6748     		ldr	r0, .L120+16
 1621 0086 0021     		movs	r1, #0
 1622 0088 FFF7FEFF 		bl	print
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 44


 1623              	.LVL182:
 172:Src/main.c    ****     ///basket_init(&htim3);
 1624              		.loc 1 172 0
 1625 008c 2046     		mov	r0, r4
 1626 008e FFF7FEFF 		bl	claw_init
 1627              	.LVL183:
 176:Src/main.c    **** 
 1628              		.loc 1 176 0
 1629 0092 0124     		movs	r4, #1
 1630 0094 0094     		str	r4, [sp]
 1631 0096 0194     		str	r4, [sp, #4]
 1632 0098 02A8     		add	r0, sp, #8
 1633 009a 2146     		mov	r1, r4
 1634 009c 0022     		movs	r2, #0
 1635 009e 1346     		mov	r3, r2
 1636 00a0 FFF7FEFF 		bl	pid_Init
 1637              	.LVL184:
 178:Src/main.c    **** 
 1638              		.loc 1 178 0
 1639 00a4 02A8     		add	r0, sp, #8
 1640 00a6 4FF4FA51 		mov	r1, #8000
 1641 00aa FFF7FEFF 		bl	drive_straight_time
 1642              	.LVL185:
 181:Src/main.c    ****     /* USER CODE END 2 */
 1643              		.loc 1 181 0
 1644 00ae 0620     		movs	r0, #6
 1645 00b0 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1646              	.LVL186:
 186:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 1647              		.loc 1 186 0
 1648 00b4 0025     		movs	r5, #0
 1649 00b6 5C4B     		ldr	r3, .L120+20
 1650 00b8 1D70     		strb	r5, [r3]
 187:Src/main.c    ****     HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_SET);
 1651              		.loc 1 187 0
 1652 00ba 5C4B     		ldr	r3, .L120+24
 1653 00bc 1D70     		strb	r5, [r3]
 188:Src/main.c    **** 
 1654              		.loc 1 188 0
 1655 00be 5C48     		ldr	r0, .L120+28
 1656 00c0 4021     		movs	r1, #64
 1657 00c2 2246     		mov	r2, r4
 1658 00c4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1659              	.LVL187:
 1660              	.L108:
 195:Src/main.c    ****         {
 1661              		.loc 1 195 0
 1662 00c8 574B     		ldr	r3, .L120+20
 1663 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1664 00cc 012B     		cmp	r3, #1
 1665 00ce 40F08C80 		bne	.L109
 1666              	.LBB5:
 197:Src/main.c    ****             print("in pi int", 0);
 1667              		.loc 1 197 0
 1668 00d2 5748     		ldr	r0, .L120+28
 1669 00d4 4021     		movs	r1, #64
 1670 00d6 0022     		movs	r2, #0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 45


 1671 00d8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1672              	.LVL188:
 198:Src/main.c    ****             turn();
 1673              		.loc 1 198 0
 1674 00dc 5548     		ldr	r0, .L120+32
 1675 00de 0021     		movs	r1, #0
 1676 00e0 FFF7FEFF 		bl	print
 1677              	.LVL189:
 199:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1678              		.loc 1 199 0
 1679 00e4 FFF7FEFF 		bl	turn
 1680              	.LVL190:
 200:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1681              		.loc 1 200 0
 1682 00e8 0020     		movs	r0, #0
 1683 00ea 534B     		ldr	r3, .L120+36
 1684 00ec 1988     		ldrh	r1, [r3]
 1685 00ee FFF7FEFF 		bl	set_motor_speed
 1686              	.LVL191:
 201:Src/main.c    ****             HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 1687              		.loc 1 201 0
 1688 00f2 0820     		movs	r0, #8
 1689 00f4 514B     		ldr	r3, .L120+40
 1690 00f6 1988     		ldrh	r1, [r3]
 1691 00f8 FFF7FEFF 		bl	set_motor_speed
 1692              	.LVL192:
 202:Src/main.c    ****             uint32_t start = HAL_GetTick();
 1693              		.loc 1 202 0
 1694 00fc 0A20     		movs	r0, #10
 1695 00fe FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1696              	.LVL193:
 203:Src/main.c    ****             while ((HAL_GetTick() - start) < 7000)
 1697              		.loc 1 203 0
 1698 0102 FFF7FEFF 		bl	HAL_GetTick
 1699              	.LVL194:
 1700 0106 0446     		mov	r4, r0
 1701              	.LVL195:
 204:Src/main.c    ****             {
 1702              		.loc 1 204 0
 1703 0108 57E0     		b	.L110
 1704              	.LVL196:
 1705              	.L116:
 206:Src/main.c    ****                 if (CLAW_INT_STATE == FLAGGED)
 1706              		.loc 1 206 0
 1707 010a 02A8     		add	r0, sp, #8
 1708 010c FFF7FEFF 		bl	drive_straight
 1709              	.LVL197:
 207:Src/main.c    ****                 {
 1710              		.loc 1 207 0
 1711 0110 464B     		ldr	r3, .L120+24
 1712 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1713 0114 012B     		cmp	r3, #1
 1714 0116 50D1     		bne	.L110
 1715              	.LBB6:
 209:Src/main.c    ****                     while (HAL_GetTick() - timeee < 20)
 1716              		.loc 1 209 0
 1717 0118 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 46


 1718              	.LVL198:
 1719 011c 0446     		mov	r4, r0
 1720              	.LVL199:
 210:Src/main.c    ****                     {
 1721              		.loc 1 210 0
 1722 011e 0BE0     		b	.L112
 1723              	.LVL200:
 1724              	.L113:
 212:Src/main.c    ****                         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 1725              		.loc 1 212 0
 1726 0120 0520     		movs	r0, #5
 1727 0122 FFF7FEFF 		bl	HAL_Delay
 1728              	.LVL201:
 213:Src/main.c    ****                         {
 1729              		.loc 1 213 0
 1730 0126 4648     		ldr	r0, .L120+44
 1731 0128 1021     		movs	r1, #16
 1732 012a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1733              	.LVL202:
 1734 012e 0128     		cmp	r0, #1
 1735 0130 02D1     		bne	.L112
 215:Src/main.c    ****                         }
 1736              		.loc 1 215 0
 1737 0132 0022     		movs	r2, #0
 1738 0134 3D4B     		ldr	r3, .L120+24
 1739 0136 1A70     		strb	r2, [r3]
 1740              	.L112:
 210:Src/main.c    ****                     {
 1741              		.loc 1 210 0
 1742 0138 FFF7FEFF 		bl	HAL_GetTick
 1743              	.LVL203:
 1744 013c 001B     		subs	r0, r0, r4
 1745 013e 1328     		cmp	r0, #19
 1746 0140 EED9     		bls	.L113
 218:Src/main.c    ****                         break;
 1747              		.loc 1 218 0
 1748 0142 3A4B     		ldr	r3, .L120+24
 1749 0144 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1750 0146 002B     		cmp	r3, #0
 1751 0148 3ED0     		beq	.L114
 221:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 1752              		.loc 1 221 0
 1753 014a 4FF4C870 		mov	r0, #400
 1754 014e FFF7FEFF 		bl	HAL_Delay
 1755              	.LVL204:
 222:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 1756              		.loc 1 222 0
 1757 0152 0020     		movs	r0, #0
 1758 0154 0146     		mov	r1, r0
 1759 0156 FFF7FEFF 		bl	set_motor_speed
 1760              	.LVL205:
 223:Src/main.c    ****                     close_claw(&htim3);
 1761              		.loc 1 223 0
 1762 015a 0820     		movs	r0, #8
 1763 015c 0021     		movs	r1, #0
 1764 015e FFF7FEFF 		bl	set_motor_speed
 1765              	.LVL206:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 47


 224:Src/main.c    ****                     arm_up(&htim3);
 1766              		.loc 1 224 0
 1767 0162 2F4C     		ldr	r4, .L120+12
 1768              	.LVL207:
 1769 0164 2046     		mov	r0, r4
 1770 0166 FFF7FEFF 		bl	close_claw
 1771              	.LVL208:
 225:Src/main.c    ****                     HAL_NVIC_DisableIRQ(CLAW_INT_EXTI_IRQn);
 1772              		.loc 1 225 0
 1773 016a 2046     		mov	r0, r4
 1774 016c FFF7FEFF 		bl	arm_up
 1775              	.LVL209:
 226:Src/main.c    ****                     CLAW_INT_STATE = NOT_FLAGGED;
 1776              		.loc 1 226 0
 1777 0170 0A20     		movs	r0, #10
 1778 0172 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1779              	.LVL210:
 227:Src/main.c    ****                     ++ewok_cnt;
 1780              		.loc 1 227 0
 1781 0176 0022     		movs	r2, #0
 1782 0178 2C4B     		ldr	r3, .L120+24
 1783 017a 1A70     		strb	r2, [r3]
 228:Src/main.c    ****                     // char msg[18] = "";
 1784              		.loc 1 228 0
 1785 017c 0135     		adds	r5, r5, #1
 1786              	.LVL211:
 1787 017e EDB2     		uxtb	r5, r5
 1788              	.LVL212:
 238:Src/main.c    ****                     {
 1789              		.loc 1 238 0
 1790 0180 012D     		cmp	r5, #1
 1791 0182 0DD1     		bne	.L115
 240:Src/main.c    ****                         open_claw(&htim3);
 1792              		.loc 1 240 0
 1793 0184 A120     		movs	r0, #161
 1794 0186 FFF7FEFF 		bl	turn_deg
 1795              	.LVL213:
 241:Src/main.c    ****                         // square_edge(&enc_pid);
 1796              		.loc 1 241 0
 1797 018a 2046     		mov	r0, r4
 1798 018c FFF7FEFF 		bl	open_claw
 1799              	.LVL214:
 243:Src/main.c    ****                         arm_down(&htim3);
 1800              		.loc 1 243 0
 1801 0190 02A8     		add	r0, sp, #8
 1802 0192 41F28831 		movw	r1, #5000
 1803 0196 FFF7FEFF 		bl	drive_straight_time
 1804              	.LVL215:
 244:Src/main.c    ****                     }
 1805              		.loc 1 244 0
 1806 019a 2046     		mov	r0, r4
 1807 019c FFF7FEFF 		bl	arm_down
 1808              	.LVL216:
 1809              	.L115:
 246:Src/main.c    ****                     {
 1810              		.loc 1 246 0
 1811 01a0 022D     		cmp	r5, #2
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 48


 1812 01a2 11D1     		bne	.L114
 248:Src/main.c    ****                         alarm_detect();
 1813              		.loc 1 248 0
 1814 01a4 9220     		movs	r0, #146
 1815 01a6 FFF7FEFF 		bl	turn_deg
 1816              	.LVL217:
 249:Src/main.c    ****                         drive_straight_time(&enc_pid, 5000);
 1817              		.loc 1 249 0
 1818 01aa FFF7FEFF 		bl	alarm_detect
 1819              	.LVL218:
 250:Src/main.c    ****                     }
 1820              		.loc 1 250 0
 1821 01ae 02A8     		add	r0, sp, #8
 1822 01b0 41F28831 		movw	r1, #5000
 1823 01b4 FFF7FEFF 		bl	drive_straight_time
 1824              	.LVL219:
 1825 01b8 06E0     		b	.L114
 1826              	.LVL220:
 1827              	.L110:
 1828              	.LBE6:
 204:Src/main.c    ****             {
 1829              		.loc 1 204 0
 1830 01ba FFF7FEFF 		bl	HAL_GetTick
 1831              	.LVL221:
 1832 01be 001B     		subs	r0, r0, r4
 1833 01c0 41F65733 		movw	r3, #6999
 1834 01c4 9842     		cmp	r0, r3
 1835 01c6 A0D9     		bls	.L116
 1836              	.LVL222:
 1837              	.L114:
 256:Src/main.c    ****             HAL_GPIO_WritePin(STM_TX_GPIO_Port, STM_TX_Pin, GPIO_PIN_SET);
 1838              		.loc 1 256 0
 1839 01c8 0024     		movs	r4, #0
 1840 01ca 174B     		ldr	r3, .L120+20
 1841 01cc 1C70     		strb	r4, [r3]
 257:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 1842              		.loc 1 257 0
 1843 01ce 1848     		ldr	r0, .L120+28
 1844 01d0 4021     		movs	r1, #64
 1845 01d2 0122     		movs	r2, #1
 1846 01d4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1847              	.LVL223:
 258:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 1848              		.loc 1 258 0
 1849 01d8 2046     		mov	r0, r4
 1850 01da 2146     		mov	r1, r4
 1851 01dc FFF7FEFF 		bl	set_motor_speed
 1852              	.LVL224:
 259:Src/main.c    ****         }
 1853              		.loc 1 259 0
 1854 01e0 0820     		movs	r0, #8
 1855 01e2 2146     		mov	r1, r4
 1856 01e4 FFF7FEFF 		bl	set_motor_speed
 1857              	.LVL225:
 1858              	.LBE5:
 1859 01e8 6EE7     		b	.L108
 1860              	.L109:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 49


 1861              	.LBB7:
 266:Src/main.c    **** 
 1862              		.loc 1 266 0
 1863 01ea 02A8     		add	r0, sp, #8
 1864 01ec 4FF4FA71 		mov	r1, #500
 1865 01f0 FFF7FEFF 		bl	drive_straight_time
 1866              	.LVL226:
 268:Src/main.c    ****             while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED)
 1867              		.loc 1 268 0
 1868 01f4 FFF7FEFF 		bl	HAL_GetTick
 1869              	.LVL227:
 1870 01f8 0446     		mov	r4, r0
 1871              	.LVL228:
 1872              	.L118:
 269:Src/main.c    ****                 ;
 1873              		.loc 1 269 0 discriminator 2
 1874 01fa FFF7FEFF 		bl	HAL_GetTick
 1875              	.LVL229:
 1876 01fe 001B     		subs	r0, r0, r4
 1877 0200 40F6B733 		movw	r3, #2999
 1878 0204 9842     		cmp	r0, r3
 1879 0206 3FF65FAF 		bhi	.L108
 269:Src/main.c    ****                 ;
 1880              		.loc 1 269 0 is_stmt 0 discriminator 1
 1881 020a 074B     		ldr	r3, .L120+20
 1882 020c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1883 020e 002B     		cmp	r3, #0
 1884 0210 F3D0     		beq	.L118
 1885 0212 59E7     		b	.L108
 1886              	.L121:
 1887              		.align	2
 1888              	.L120:
 1889 0214 00000000 		.word	htim4
 1890 0218 00000000 		.word	htim5
 1891 021c 00000000 		.word	htim1
 1892 0220 00000000 		.word	htim3
 1893 0224 00000000 		.word	.LC0
 1894 0228 00000000 		.word	PI_INT_STATE
 1895 022c 00000000 		.word	CLAW_INT_STATE
 1896 0230 00080240 		.word	1073874944
 1897 0234 6C000000 		.word	.LC9
 1898 0238 00000000 		.word	.LANCHOR1
 1899 023c 00000000 		.word	.LANCHOR0
 1900 0240 00040240 		.word	1073873920
 1901              	.LBE7:
 1902              		.cfi_endproc
 1903              	.LFE124:
 1905              		.comm	adc_values,8192,4
 1906              		.comm	dma_buffer,8192,4
 1907              		.global	RIGHT_SPEED
 1908              		.global	LEFT_SPEED
 1909              		.section	.data.RIGHT_SPEED,"aw",%progbits
 1910              		.align	1
 1911              		.set	.LANCHOR0,. + 0
 1914              	RIGHT_SPEED:
 1915 0000 5802     		.short	600
 1916              		.section	.data.LEFT_SPEED,"aw",%progbits
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 50


 1917              		.align	1
 1918              		.set	.LANCHOR1,. + 0
 1921              	LEFT_SPEED:
 1922 0000 5802     		.short	600
 1923              		.section	.rodata.str1.4,"aMS",%progbits,1
 1924              		.align	2
 1925              	.LC0:
 1926 0000 53746172 		.ascii	"Starting\000"
 1926      74696E67 
 1926      00
 1927 0009 000000   		.space	3
 1928              	.LC1:
 1929 000c 256C7500 		.ascii	"%lu\000"
 1930              	.LC2:
 1931 0010 636E7473 		.ascii	"cnts: %d\000"
 1931      3A202564 
 1931      00
 1932 0019 000000   		.space	3
 1933              	.LC3:
 1934 001c 766C7473 		.ascii	"vlts: %d.%d\000"
 1934      3A202564 
 1934      2E256400 
 1935              	.LC4:
 1936 0028 54494D35 		.ascii	"TIM5->CNT: %lu\000"
 1936      2D3E434E 
 1936      543A2025 
 1936      6C7500
 1937 0037 00       		.space	1
 1938              	.LC5:
 1939 0038 54494D34 		.ascii	"TIM4->CNT: %lu\000"
 1939      2D3E434E 
 1939      543A2025 
 1939      6C7500
 1940 0047 00       		.space	1
 1941              	.LC6:
 1942 0048 63685F35 		.ascii	"ch_5: %d\000"
 1942      3A202564 
 1942      00
 1943 0051 000000   		.space	3
 1944              	.LC7:
 1945 0054 63685F34 		.ascii	"ch_4: %d\000"
 1945      3A202564 
 1945      00
 1946 005d 000000   		.space	3
 1947              	.LC8:
 1948 0060 5372632F 		.ascii	"Src/main.c\000"
 1948      6D61696E 
 1948      2E6300
 1949 006b 00       		.space	1
 1950              	.LC9:
 1951 006c 696E2070 		.ascii	"in pi int\000"
 1951      6920696E 
 1951      7400
 1952              		.text
 1953              	.Letext0:
 1954              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1955              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 51


 1956              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 1957              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1958              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1959              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1960              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1961              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1962              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1963              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1964              		.file 12 "Inc/fonts.h"
 1965              		.file 13 "Inc/ssd1306.h"
 1966              		.file 14 "Inc/pid.h"
 1967              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 1968              		.file 16 "Inc/adc.h"
 1969              		.file 17 "Inc/tim.h"
 1970              		.file 18 "Inc/extern_vars.h"
 1971              		.file 19 "Inc/filter.h"
 1972              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1973              		.file 21 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 1974              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1975              		.file 23 "Inc/claw.h"
 1976              		.file 24 "Inc/gpio.h"
 1977              		.file 25 "Inc/dma.h"
 1978              		.file 26 "Inc/i2c.h"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 52


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:104    .text.alarm_detect:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:109    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:183    .text.alarm_detect:0000000000000078 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:192    .text.print:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:197    .text.print:0000000000000000 print
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:244    .text.print:0000000000000034 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:249    .text.menu:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:254    .text.menu:0000000000000000 menu
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:367    .text.menu:000000000000009c $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:374    .text.set_motor_speed:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:379    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:445    .text.set_motor_speed:000000000000004c $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:452    .text.turn:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:457    .text.turn:0000000000000000 turn
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:703    .text.turn:0000000000000178 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:726    .text.turn_deg:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:731    .text.turn_deg:0000000000000000 turn_deg
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:857    .text.turn_deg:00000000000000b0 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:869    .text.encoder_pid:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:874    .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:929    .text.encoder_pid:000000000000003c $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:934    .text.drive_straight:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:939    .text.drive_straight:0000000000000000 drive_straight
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:963    .text.square_edge:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:968    .text.square_edge:0000000000000000 square_edge
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1031   .text.square_edge:0000000000000044 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1037   .text.drive_straight_time:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1042   .text.drive_straight_time:0000000000000000 drive_straight_time
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1107   .text.drive_straight_time:0000000000000044 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1113   .text.test_PWM_htim1:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1118   .text.test_PWM_htim1:0000000000000000 test_PWM_htim1
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1169   .text.test_PWM_htim1:0000000000000034 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1174   .text.test_PWM_htim3:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1179   .text.test_PWM_htim3:0000000000000000 test_PWM_htim3
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1237   .text.test_PWM_htim3:0000000000000040 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1242   .text.test_ADC:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1247   .text.test_ADC:0000000000000000 test_ADC
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1314   .text.test_ADC:0000000000000050 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1323   .text.test_All:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1328   .text.test_All:0000000000000000 test_All
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1353   .text._Error_Handler:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1358   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1374   .text.SystemClock_Config:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1379   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1505   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1513   .text.main:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1518   .text.main:0000000000000000 main
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 53


/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1889   .text.main:0000000000000214 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1914   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1921   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1910   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1917   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s:1924   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
HAL_GPIO_ReadPin
sprintf
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dadd
pid_GetGain
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
HAL_GetTick
HAL_TIM_PWM_Start
htim3
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//ccJeDgWr.s 			page 54


MX_TIM5_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
HAL_NVIC_EnableIRQ
HAL_GPIO_WritePin
close_claw
arm_up
HAL_NVIC_DisableIRQ
open_claw
arm_down
htim4
htim5
PI_INT_STATE
CLAW_INT_STATE
