ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.print,"ax",%progbits
  21              		.align	2
  22              		.global	print
  23              		.thumb
  24              		.thumb_func
  26              	print:
  27              	.LFB125:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  ** This notice applies to any and all portions of this file
   8:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****  * inserted by the user or by software development tools
  11:Src/main.c    ****  * are owned by their respective copyright owners.
  12:Src/main.c    ****  *
  13:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****  *
  15:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****  * are permitted provided that the following conditions are met:
  17:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****  *      and/or other materials provided with the distribution.
  22:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****  *      without specific prior written permission.
  25:Src/main.c    ****  *
  26:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 2


  31:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****  *
  37:Src/main.c    ****  ******************************************************************************
  38:Src/main.c    ****  */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "stm32f4xx_it.h"
  43:Src/main.c    **** #include "adc.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "encoder.h"
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE BEGIN GV */
  58:Src/main.c    **** /* Global variables ---------------------------------------------------------*/
  59:Src/main.c    **** uint8_t PUSH_BUTTON_STATE = 0;
  60:Src/main.c    **** int LEFT_SPEED = 800;
  61:Src/main.c    **** int RIGHT_SPEED = 800;
  62:Src/main.c    **** /* USER CODE END GV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE BEGIN PV */
  65:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE END PV */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  70:Src/main.c    **** void SystemClock_Config(void);
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE BEGIN PFP */
  73:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  74:Src/main.c    **** void print(char msg[], int row);
  75:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]);
  76:Src/main.c    **** void do_pid(PID_t *pid_struct);
  77:Src/main.c    **** PID_t menu(void);
  78:Src/main.c    **** 
  79:Src/main.c    **** /* USER CODE END PFP */
  80:Src/main.c    **** 
  81:Src/main.c    **** /* USER CODE BEGIN 0 */
  82:Src/main.c    **** 
  83:Src/main.c    **** /* USER CODE END 0 */
  84:Src/main.c    **** 
  85:Src/main.c    **** /**
  86:Src/main.c    ****  * @brief  The application entry point.
  87:Src/main.c    ****  *
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 3


  88:Src/main.c    ****  * @retval None
  89:Src/main.c    ****  */
  90:Src/main.c    **** int main(void)
  91:Src/main.c    **** {
  92:Src/main.c    ****     /* USER CODE BEGIN 1 */
  93:Src/main.c    **** 
  94:Src/main.c    ****     /* USER CODE END 1 */
  95:Src/main.c    **** 
  96:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
  97:Src/main.c    **** 
  98:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  99:Src/main.c    ****     HAL_Init();
 100:Src/main.c    **** 
 101:Src/main.c    ****     /* USER CODE BEGIN Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****     /* USER CODE END Init */
 104:Src/main.c    **** 
 105:Src/main.c    ****     /* Configure the system clock */
 106:Src/main.c    ****     SystemClock_Config();
 107:Src/main.c    **** 
 108:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****     /* USER CODE END SysInit */
 111:Src/main.c    **** 
 112:Src/main.c    ****     /* Initialize all configured peripherals */
 113:Src/main.c    ****     MX_GPIO_Init();
 114:Src/main.c    ****     MX_TIM3_Init();
 115:Src/main.c    ****     MX_TIM5_Init();
 116:Src/main.c    ****     MX_TIM1_Init();
 117:Src/main.c    ****     MX_TIM2_Init();
 118:Src/main.c    ****     MX_USART6_UART_Init();
 119:Src/main.c    ****     MX_ADC1_Init();
 120:Src/main.c    ****     MX_I2C1_Init();
 121:Src/main.c    ****     MX_TIM4_Init();
 122:Src/main.c    ****     MX_TIM9_Init();
 123:Src/main.c    ****     ssd1306_Init();
 124:Src/main.c    ****     /* USER CODE BEGIN 2 */
 125:Src/main.c    **** 
 126:Src/main.c    ****     /* Initialize all timer related stuffs*/
 127:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 128:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 129:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 130:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 131:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 132:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 133:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 134:Src/main.c    **** 
 135:Src/main.c    **** 
 136:Src/main.c    ****     /* Initialize struct stuffs*/
 137:Src/main.c    ****     PID_t pid_s = menu();
 138:Src/main.c    ****     HAL_Delay(100);
 139:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 140:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 141:Src/main.c    ****     //ENCODER_t LEFT_ENCODER = encoder_Init();
 142:Src/main.c    ****     
 143:Src/main.c    ****     /* declare external variables for use with interrupts*/
 144:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 4


 145:Src/main.c    **** 
 146:Src/main.c    ****     /* USER CODE END 2 */
 147:Src/main.c    **** 
 148:Src/main.c    ****     /* Infinite loop */
 149:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 150:Src/main.c    ****     while (1)
 151:Src/main.c    ****     {
 152:Src/main.c    ****         do_pid(&pid_s);
 153:Src/main.c    ****         //sprintf(msg, "%d", (int)update_encoder(&LEFT_ENCODER, &htim4));
 154:Src/main.c    ****         //print(msg, 0);
 155:Src/main.c    ****         /* USER CODE END WHILE */
 156:Src/main.c    **** 
 157:Src/main.c    ****         /* USER CODE BEGIN 3 */
 158:Src/main.c    **** 
 159:Src/main.c    ****     }
 160:Src/main.c    ****     /* USER CODE END 3 */
 161:Src/main.c    **** 
 162:Src/main.c    **** }
 163:Src/main.c    **** 
 164:Src/main.c    **** 
 165:Src/main.c    **** /**
 166:Src/main.c    ****  * @brief System Clock Configuration
 167:Src/main.c    ****  * @retval None
 168:Src/main.c    ****  */
 169:Src/main.c    **** void SystemClock_Config(void)
 170:Src/main.c    **** {
 171:Src/main.c    **** 
 172:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 173:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 174:Src/main.c    **** 
 175:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 176:Src/main.c    ****     */
 177:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 178:Src/main.c    **** 
 179:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 180:Src/main.c    **** 
 181:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 182:Src/main.c    ****     */
 183:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 184:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 185:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 186:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 187:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 188:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 189:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 190:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 191:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 192:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 193:Src/main.c    ****     {
 194:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 195:Src/main.c    ****     }
 196:Src/main.c    **** 
 197:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 198:Src/main.c    ****     */
 199:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 200:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 201:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 5


 202:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 203:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 204:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 205:Src/main.c    **** 
 206:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 207:Src/main.c    ****     {
 208:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 209:Src/main.c    ****     }
 210:Src/main.c    **** 
 211:Src/main.c    ****     /**Configure the Systick interrupt time 
 212:Src/main.c    ****     */
 213:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 214:Src/main.c    **** 
 215:Src/main.c    ****     /**Configure the Systick 
 216:Src/main.c    ****     */
 217:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 218:Src/main.c    **** 
 219:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 220:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 221:Src/main.c    **** }
 222:Src/main.c    **** 
 223:Src/main.c    **** /* USER CODE BEGIN 4 */
 224:Src/main.c    **** /*
 225:Src/main.c    ****  * Rows from 0 - 6
 226:Src/main.c    ****  * Reset screen when printing from row 0
 227:Src/main.c    ****  */
 228:Src/main.c    **** void print(char* msg, int row){
  29              		.loc 1 228 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 38B5     		push	{r3, r4, r5, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 3, -16
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 14, -4
  41 0002 0546     		mov	r5, r0
 229:Src/main.c    ****     if(row==0){
  42              		.loc 1 229 0
  43 0004 0C46     		mov	r4, r1
  44 0006 11B9     		cbnz	r1, .L2
 230:Src/main.c    ****         ssd1306_Fill(Black);
  45              		.loc 1 230 0
  46 0008 0020     		movs	r0, #0
  47              	.LVL1:
  48 000a FFF7FEFF 		bl	ssd1306_Fill
  49              	.LVL2:
  50              	.L2:
 231:Src/main.c    ****     }
 232:Src/main.c    ****     ssd1306_SetCursor(0,row*10);
  51              		.loc 1 232 0
  52 000e 04EB8404 		add	r4, r4, r4, lsl #2
  53              	.LVL3:
  54 0012 6100     		lsls	r1, r4, #1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 6


  55 0014 0020     		movs	r0, #0
  56 0016 01F0FE01 		and	r1, r1, #254
  57 001a FFF7FEFF 		bl	ssd1306_SetCursor
  58              	.LVL4:
 233:Src/main.c    ****     ssd1306_WriteString(msg,Font_7x10,White);
  59              		.loc 1 233 0
  60 001e 054B     		ldr	r3, .L4
  61 0020 2846     		mov	r0, r5
  62 0022 93E80600 		ldmia	r3, {r1, r2}
  63 0026 0123     		movs	r3, #1
  64 0028 FFF7FEFF 		bl	ssd1306_WriteString
  65              	.LVL5:
 234:Src/main.c    ****     ssd1306_UpdateScreen();
  66              		.loc 1 234 0
  67 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
  68              	.LVL6:
  69 0030 38BD     		pop	{r3, r4, r5, pc}
  70              	.LVL7:
  71              	.L5:
  72 0032 00BF     		.align	2
  73              	.L4:
  74 0034 00000000 		.word	Font_7x10
  75              		.cfi_endproc
  76              	.LFE125:
  78              		.section	.text.menu,"ax",%progbits
  79              		.align	2
  80              		.global	menu
  81              		.thumb
  82              		.thumb_func
  84              	menu:
  85              	.LFB126:
 235:Src/main.c    **** }
 236:Src/main.c    **** 
 237:Src/main.c    **** PID_t menu(void){
  86              		.loc 1 237 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 32
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              	.LVL8:
  91 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  92              	.LCFI1:
  93              		.cfi_def_cfa_offset 20
  94              		.cfi_offset 4, -20
  95              		.cfi_offset 5, -16
  96              		.cfi_offset 6, -12
  97              		.cfi_offset 7, -8
  98              		.cfi_offset 14, -4
  99 0002 8BB0     		sub	sp, sp, #44
 100              	.LCFI2:
 101              		.cfi_def_cfa_offset 64
 102 0004 0646     		mov	r6, r0
 238:Src/main.c    ****     print("Starting", 0);
 103              		.loc 1 238 0
 104 0006 6948     		ldr	r0, .L20
 105              	.LVL9:
 106 0008 0021     		movs	r1, #0
 107 000a FFF7FEFF 		bl	print
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 7


 108              	.LVL10:
 239:Src/main.c    ****     char msg[20] = "";
 109              		.loc 1 239 0
 110 000e 0025     		movs	r5, #0
 111 0010 0595     		str	r5, [sp, #20]
 112 0012 0695     		str	r5, [sp, #24]
 113 0014 0795     		str	r5, [sp, #28]
 114 0016 0895     		str	r5, [sp, #32]
 115 0018 0995     		str	r5, [sp, #36]
 116              	.LVL11:
 240:Src/main.c    ****     int pid_select = 0;
 241:Src/main.c    ****     uint32_t values[3] = {0,0,0};
 117              		.loc 1 241 0
 118 001a 0295     		str	r5, [sp, #8]
 119 001c 0395     		str	r5, [sp, #12]
 120 001e 0495     		str	r5, [sp, #16]
 121              	.LVL12:
 122              	.L10:
 242:Src/main.c    ****     while(1){
 243:Src/main.c    ****         if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 123              		.loc 1 243 0
 124 0020 6348     		ldr	r0, .L20+4
 125 0022 4FF40051 		mov	r1, #8192
 126 0026 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 127              	.LVL13:
 128 002a 38BB     		cbnz	r0, .L7
 244:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 129              		.loc 1 244 0
 130 002c 0AAB     		add	r3, sp, #40
 131 002e 03EB8503 		add	r3, r3, r5, lsl #2
 132 0032 53F8204C 		ldr	r4, [r3, #-32]
 133 0036 05A8     		add	r0, sp, #20
 134 0038 5E49     		ldr	r1, .L20+8
 135 003a 2246     		mov	r2, r4
 136 003c FFF7FEFF 		bl	sprintf
 137              	.LVL14:
 245:Src/main.c    ****             print(msg, 0);
 138              		.loc 1 245 0
 139 0040 05A8     		add	r0, sp, #20
 140 0042 0021     		movs	r1, #0
 141 0044 FFF7FEFF 		bl	print
 142              	.LVL15:
 246:Src/main.c    ****             TIM4->CNT = values[pid_select];
 143              		.loc 1 246 0
 144 0048 5B4B     		ldr	r3, .L20+12
 145 004a 5C62     		str	r4, [r3, #36]
 247:Src/main.c    ****             while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 146              		.loc 1 247 0
 147 004c 0EE0     		b	.L8
 148              	.L9:
 248:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 149              		.loc 1 248 0
 150 004e 5A4B     		ldr	r3, .L20+12
 151 0050 5A6A     		ldr	r2, [r3, #36]
 152 0052 0AAB     		add	r3, sp, #40
 153 0054 03EB8503 		add	r3, r3, r5, lsl #2
 154 0058 43F8202C 		str	r2, [r3, #-32]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 8


 249:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 155              		.loc 1 249 0
 156 005c 05A8     		add	r0, sp, #20
 157 005e 5549     		ldr	r1, .L20+8
 158 0060 FFF7FEFF 		bl	sprintf
 159              	.LVL16:
 250:Src/main.c    ****                 print(msg, 0);
 160              		.loc 1 250 0
 161 0064 05A8     		add	r0, sp, #20
 162 0066 0021     		movs	r1, #0
 163 0068 FFF7FEFF 		bl	print
 164              	.LVL17:
 165              	.L8:
 247:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 166              		.loc 1 247 0
 167 006c 5048     		ldr	r0, .L20+4
 168 006e 4FF40051 		mov	r1, #8192
 169 0072 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 170              	.LVL18:
 171 0076 0028     		cmp	r0, #0
 172 0078 E9D0     		beq	.L9
 251:Src/main.c    ****             }
 252:Src/main.c    ****             ++pid_select;
 173              		.loc 1 252 0
 174 007a 0135     		adds	r5, r5, #1
 175              	.LVL19:
 176              	.L7:
 253:Src/main.c    ****         }
 254:Src/main.c    ****         if(pid_select==3) break;
 177              		.loc 1 254 0
 178 007c 032D     		cmp	r5, #3
 179 007e CFD1     		bne	.L10
 180              	.L18:
 181              	.LVL20:
 182              	.LBB2:
 255:Src/main.c    ****     }
 256:Src/main.c    ****     while(1){
 257:Src/main.c    ****         int speed = 400;
 258:Src/main.c    ****         if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 183              		.loc 1 258 0
 184 0080 4B48     		ldr	r0, .L20+4
 185 0082 4FF40051 		mov	r1, #8192
 186 0086 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 187              	.LVL21:
 188 008a 0028     		cmp	r0, #0
 189 008c 43D1     		bne	.L11
 259:Src/main.c    ****             if(pid_select==3){
 190              		.loc 1 259 0
 191 008e 032D     		cmp	r5, #3
 192 0090 09D1     		bne	.L12
 260:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 193              		.loc 1 260 0
 194 0092 4A4C     		ldr	r4, .L20+16
 195 0094 2046     		mov	r0, r4
 196 0096 0021     		movs	r1, #0
 197 0098 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 198              	.LVL22:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 9


 261:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 199              		.loc 1 261 0
 200 009c 2046     		mov	r0, r4
 201 009e 0821     		movs	r1, #8
 202 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 203              	.LVL23:
 204 00a4 08E0     		b	.L13
 205              	.L12:
 262:Src/main.c    ****             }else{
 263:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 206              		.loc 1 263 0
 207 00a6 454C     		ldr	r4, .L20+16
 208 00a8 2046     		mov	r0, r4
 209 00aa 0021     		movs	r1, #0
 210 00ac FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 211              	.LVL24:
 264:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 212              		.loc 1 264 0
 213 00b0 2046     		mov	r0, r4
 214 00b2 0821     		movs	r1, #8
 215 00b4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 216              	.LVL25:
 217              	.L13:
 265:Src/main.c    ****             }
 266:Src/main.c    ****             sprintf(msg, "%d", speed);
 218              		.loc 1 266 0
 219 00b8 05A8     		add	r0, sp, #20
 220 00ba 4149     		ldr	r1, .L20+20
 221 00bc 4FF4C872 		mov	r2, #400
 222 00c0 FFF7FEFF 		bl	sprintf
 223              	.LVL26:
 267:Src/main.c    ****             print(msg, 0);
 224              		.loc 1 267 0
 225 00c4 05A8     		add	r0, sp, #20
 226 00c6 0021     		movs	r1, #0
 227 00c8 FFF7FEFF 		bl	print
 228              	.LVL27:
 268:Src/main.c    ****             TIM4->CNT = speed;
 229              		.loc 1 268 0
 230 00cc 4FF4C872 		mov	r2, #400
 231 00d0 394B     		ldr	r3, .L20+12
 232 00d2 5A62     		str	r2, [r3, #36]
 269:Src/main.c    ****             while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 233              		.loc 1 269 0
 234 00d4 17E0     		b	.L14
 235              	.LVL28:
 236              	.L17:
 270:Src/main.c    ****                 speed = TIM4->CNT;
 237              		.loc 1 270 0
 238 00d6 384B     		ldr	r3, .L20+12
 239 00d8 5C6A     		ldr	r4, [r3, #36]
 240              	.LVL29:
 271:Src/main.c    ****                 sprintf(msg, "%d", speed);
 241              		.loc 1 271 0
 242 00da 05A8     		add	r0, sp, #20
 243 00dc 3849     		ldr	r1, .L20+20
 244 00de 2246     		mov	r2, r4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 10


 245 00e0 FFF7FEFF 		bl	sprintf
 246              	.LVL30:
 272:Src/main.c    ****                 print(msg, 0);
 247              		.loc 1 272 0
 248 00e4 05A8     		add	r0, sp, #20
 249 00e6 0021     		movs	r1, #0
 250 00e8 FFF7FEFF 		bl	print
 251              	.LVL31:
 273:Src/main.c    ****                 if(pid_select==3){
 252              		.loc 1 273 0
 253 00ec 032D     		cmp	r5, #3
 254 00ee 05D1     		bne	.L15
 274:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 255              		.loc 1 274 0
 256 00f0 324B     		ldr	r3, .L20+16
 257 00f2 1B68     		ldr	r3, [r3]
 258 00f4 5C63     		str	r4, [r3, #52]
 275:Src/main.c    ****                     LEFT_SPEED = speed;
 259              		.loc 1 275 0
 260 00f6 334B     		ldr	r3, .L20+24
 261 00f8 1C60     		str	r4, [r3]
 262 00fa 04E0     		b	.L14
 263              	.L15:
 276:Src/main.c    ****                 }else{
 277:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 264              		.loc 1 277 0
 265 00fc 2F4B     		ldr	r3, .L20+16
 266 00fe 1B68     		ldr	r3, [r3]
 267 0100 DC63     		str	r4, [r3, #60]
 278:Src/main.c    ****                     RIGHT_SPEED = speed;
 268              		.loc 1 278 0
 269 0102 314B     		ldr	r3, .L20+28
 270 0104 1C60     		str	r4, [r3]
 271              	.LVL32:
 272              	.L14:
 269:Src/main.c    ****                 speed = TIM4->CNT;
 273              		.loc 1 269 0
 274 0106 2A48     		ldr	r0, .L20+4
 275 0108 4FF40051 		mov	r1, #8192
 276 010c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 277              	.LVL33:
 278 0110 0028     		cmp	r0, #0
 279 0112 E0D0     		beq	.L17
 279:Src/main.c    ****                 }
 280:Src/main.c    ****             }
 281:Src/main.c    ****             ++pid_select;
 280              		.loc 1 281 0
 281 0114 0135     		adds	r5, r5, #1
 282              	.LVL34:
 283              	.L11:
 282:Src/main.c    ****         }
 283:Src/main.c    ****         if(pid_select==5){
 284              		.loc 1 283 0
 285 0116 052D     		cmp	r5, #5
 286 0118 B2D1     		bne	.L18
 287              	.LBE2:
 284:Src/main.c    ****             break;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 11


 285:Src/main.c    ****         }
 286:Src/main.c    ****     }
 287:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 288              		.loc 1 287 0
 289 011a 284C     		ldr	r4, .L20+16
 290 011c 2046     		mov	r0, r4
 291 011e 0021     		movs	r1, #0
 292 0120 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 293              	.LVL35:
 288:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 294              		.loc 1 288 0
 295 0124 2046     		mov	r0, r4
 296 0126 0821     		movs	r1, #8
 297 0128 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 298              	.LVL36:
 289:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 299              		.loc 1 289 0
 300 012c 029F     		ldr	r7, [sp, #8]
 301 012e 05A8     		add	r0, sp, #20
 302 0130 2649     		ldr	r1, .L20+32
 303 0132 3A46     		mov	r2, r7
 304 0134 FFF7FEFF 		bl	sprintf
 305              	.LVL37:
 290:Src/main.c    ****     print(msg, 0);
 306              		.loc 1 290 0
 307 0138 05A8     		add	r0, sp, #20
 308 013a 0021     		movs	r1, #0
 309 013c FFF7FEFF 		bl	print
 310              	.LVL38:
 291:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 311              		.loc 1 291 0
 312 0140 039D     		ldr	r5, [sp, #12]
 313              	.LVL39:
 314 0142 05A8     		add	r0, sp, #20
 315 0144 2249     		ldr	r1, .L20+36
 316 0146 2A46     		mov	r2, r5
 317 0148 FFF7FEFF 		bl	sprintf
 318              	.LVL40:
 292:Src/main.c    ****     print(msg, 1);
 319              		.loc 1 292 0
 320 014c 05A8     		add	r0, sp, #20
 321 014e 0121     		movs	r1, #1
 322 0150 FFF7FEFF 		bl	print
 323              	.LVL41:
 293:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 324              		.loc 1 293 0
 325 0154 049C     		ldr	r4, [sp, #16]
 326 0156 05A8     		add	r0, sp, #20
 327 0158 1E49     		ldr	r1, .L20+40
 328 015a 2246     		mov	r2, r4
 329 015c FFF7FEFF 		bl	sprintf
 330              	.LVL42:
 294:Src/main.c    ****     print(msg, 2);
 331              		.loc 1 294 0
 332 0160 05A8     		add	r0, sp, #20
 333 0162 0221     		movs	r1, #2
 334 0164 FFF7FEFF 		bl	print
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 12


 335              	.LVL43:
 295:Src/main.c    ****     sprintf(msg, "L %d", LEFT_SPEED);
 336              		.loc 1 295 0
 337 0168 05A8     		add	r0, sp, #20
 338 016a 1B49     		ldr	r1, .L20+44
 339 016c 154B     		ldr	r3, .L20+24
 340 016e 1A68     		ldr	r2, [r3]
 341 0170 FFF7FEFF 		bl	sprintf
 342              	.LVL44:
 296:Src/main.c    ****     print(msg, 3);
 343              		.loc 1 296 0
 344 0174 05A8     		add	r0, sp, #20
 345 0176 0321     		movs	r1, #3
 346 0178 FFF7FEFF 		bl	print
 347              	.LVL45:
 297:Src/main.c    ****     sprintf(msg, "R %d", RIGHT_SPEED);
 348              		.loc 1 297 0
 349 017c 05A8     		add	r0, sp, #20
 350 017e 1749     		ldr	r1, .L20+48
 351 0180 114B     		ldr	r3, .L20+28
 352 0182 1A68     		ldr	r2, [r3]
 353 0184 FFF7FEFF 		bl	sprintf
 354              	.LVL46:
 298:Src/main.c    ****     print(msg, 4);
 355              		.loc 1 298 0
 356 0188 05A8     		add	r0, sp, #20
 357 018a 0421     		movs	r1, #4
 358 018c FFF7FEFF 		bl	print
 359              	.LVL47:
 299:Src/main.c    ****     return pid_Init(values[0],values[1],values[2],5,1);
 360              		.loc 1 299 0
 361 0190 0523     		movs	r3, #5
 362 0192 0093     		str	r3, [sp]
 363 0194 0123     		movs	r3, #1
 364 0196 0193     		str	r3, [sp, #4]
 365 0198 3046     		mov	r0, r6
 366 019a 3946     		mov	r1, r7
 367 019c 2A46     		mov	r2, r5
 368 019e 2346     		mov	r3, r4
 369 01a0 FFF7FEFF 		bl	pid_Init
 370              	.LVL48:
 300:Src/main.c    **** }
 371              		.loc 1 300 0
 372 01a4 3046     		mov	r0, r6
 373 01a6 0BB0     		add	sp, sp, #44
 374              	.LCFI3:
 375              		.cfi_def_cfa_offset 20
 376              		@ sp needed
 377 01a8 F0BD     		pop	{r4, r5, r6, r7, pc}
 378              	.LVL49:
 379              	.L21:
 380 01aa 00BF     		.align	2
 381              	.L20:
 382 01ac 00000000 		.word	.LC0
 383 01b0 00080240 		.word	1073874944
 384 01b4 0C000000 		.word	.LC1
 385 01b8 00080040 		.word	1073743872
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 13


 386 01bc 00000000 		.word	htim1
 387 01c0 10000000 		.word	.LC2
 388 01c4 00000000 		.word	.LANCHOR0
 389 01c8 00000000 		.word	.LANCHOR1
 390 01cc 14000000 		.word	.LC3
 391 01d0 1C000000 		.word	.LC4
 392 01d4 24000000 		.word	.LC5
 393 01d8 2C000000 		.word	.LC6
 394 01dc 34000000 		.word	.LC7
 395              		.cfi_endproc
 396              	.LFE126:
 398              		.global	__aeabi_d2iz
 399              		.section	.text.do_pid,"ax",%progbits
 400              		.align	2
 401              		.global	do_pid
 402              		.thumb
 403              		.thumb_func
 405              	do_pid:
 406              	.LFB127:
 301:Src/main.c    **** 
 302:Src/main.c    **** void do_pid(PID_t *pid_struct){
 407              		.loc 1 302 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              	.LVL50:
 412 0000 70B5     		push	{r4, r5, r6, lr}
 413              	.LCFI4:
 414              		.cfi_def_cfa_offset 16
 415              		.cfi_offset 4, -16
 416              		.cfi_offset 5, -12
 417              		.cfi_offset 6, -8
 418              		.cfi_offset 14, -4
 419 0002 0646     		mov	r6, r0
 303:Src/main.c    ****     /* Read sensors */
 304:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin)? 0 : 1;
 420              		.loc 1 304 0
 421 0004 274D     		ldr	r5, .L31
 422 0006 2846     		mov	r0, r5
 423              	.LVL51:
 424 0008 4FF48041 		mov	r1, #16384
 425 000c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 426              	.LVL52:
 427 0010 B0FA80F4 		clz	r4, r0
 428 0014 6409     		lsrs	r4, r4, #5
 429              	.LVL53:
 305:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin)? 0 : 1;
 430              		.loc 1 305 0
 431 0016 2846     		mov	r0, r5
 432 0018 4FF40041 		mov	r1, #32768
 433 001c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 434              	.LVL54:
 435 0020 B0FA80F0 		clz	r0, r0
 436 0024 4009     		lsrs	r0, r0, #5
 437              	.LVL55:
 306:Src/main.c    **** 
 307:Src/main.c    ****     /* Get error */
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 14


 308:Src/main.c    ****     if(left && right){ pid_struct->err = 0; }
 438              		.loc 1 308 0
 439 0026 1CB1     		cbz	r4, .L23
 440              		.loc 1 308 0 is_stmt 0 discriminator 1
 441 0028 10B1     		cbz	r0, .L23
 442              		.loc 1 308 0 discriminator 2
 443 002a 0023     		movs	r3, #0
 444 002c 3362     		str	r3, [r6, #32]
 445 002e 1AE0     		b	.L24
 446              	.L23:
 309:Src/main.c    ****     else if(left && !right){ pid_struct->err = 1; }
 447              		.loc 1 309 0 is_stmt 1
 448 0030 1CB1     		cbz	r4, .L25
 449              		.loc 1 309 0 is_stmt 0 discriminator 1
 450 0032 10B9     		cbnz	r0, .L25
 451              		.loc 1 309 0 discriminator 2
 452 0034 0123     		movs	r3, #1
 453 0036 3362     		str	r3, [r6, #32]
 454 0038 15E0     		b	.L24
 455              	.L25:
 310:Src/main.c    ****     else if(!left && right){ pid_struct->err = -1; }
 456              		.loc 1 310 0 is_stmt 1
 457 003a 24B9     		cbnz	r4, .L26
 458              		.loc 1 310 0 is_stmt 0 discriminator 1
 459 003c 18B1     		cbz	r0, .L26
 460              		.loc 1 310 0 discriminator 2
 461 003e 4FF0FF33 		mov	r3, #-1
 462 0042 3362     		str	r3, [r6, #32]
 463 0044 0FE0     		b	.L24
 464              	.L26:
 311:Src/main.c    ****     else if(!left && !right && (pid_struct->err < 0)){ pid_struct->err = -5; }
 465              		.loc 1 311 0 is_stmt 1
 466 0046 3CB9     		cbnz	r4, .L27
 467              		.loc 1 311 0 is_stmt 0 discriminator 1
 468 0048 30B9     		cbnz	r0, .L27
 469              		.loc 1 311 0 discriminator 2
 470 004a 336A     		ldr	r3, [r6, #32]
 471 004c 002B     		cmp	r3, #0
 472 004e 03DA     		bge	.L27
 473              		.loc 1 311 0 discriminator 3
 474 0050 6FF00403 		mvn	r3, #4
 475 0054 3362     		str	r3, [r6, #32]
 476 0056 06E0     		b	.L24
 477              	.L27:
 312:Src/main.c    ****     else if(!left && !right && (pid_struct->err > 0)){ pid_struct->err = 5; }
 478              		.loc 1 312 0 is_stmt 1
 479 0058 2CB9     		cbnz	r4, .L24
 480              		.loc 1 312 0 is_stmt 0 discriminator 1
 481 005a 20B9     		cbnz	r0, .L24
 482              		.loc 1 312 0 discriminator 2
 483 005c 336A     		ldr	r3, [r6, #32]
 484 005e 002B     		cmp	r3, #0
 485 0060 01DD     		ble	.L24
 486              		.loc 1 312 0 discriminator 3
 487 0062 0523     		movs	r3, #5
 488 0064 3362     		str	r3, [r6, #32]
 489              	.L24:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 15


 313:Src/main.c    **** 
 314:Src/main.c    ****     /* Get gain */
 315:Src/main.c    ****     double gain = pid_GetGain(pid_struct, &htim9);
 490              		.loc 1 315 0 is_stmt 1
 491 0066 3046     		mov	r0, r6
 492              	.LVL56:
 493 0068 0F49     		ldr	r1, .L31+4
 494 006a FFF7FEFF 		bl	pid_GetGain
 495              	.LVL57:
 316:Src/main.c    ****     int g = (int) gain;
 496              		.loc 1 316 0
 497 006e 51EC100B 		fmrrd	r0, r1, d0
 498 0072 FFF7FEFF 		bl	__aeabi_d2iz
 499              	.LVL58:
 317:Src/main.c    **** 
 318:Src/main.c    ****     /* Set Motor Speeds*/
 319:Src/main.c    ****     if(g<0){
 500              		.loc 1 319 0
 501 0076 0028     		cmp	r0, #0
 502 0078 04DA     		bge	.L28
 320:Src/main.c    ****         LEFT_SPEED -= g;
 503              		.loc 1 320 0
 504 007a 0C4A     		ldr	r2, .L31+8
 505 007c 1368     		ldr	r3, [r2]
 506 007e 181A     		subs	r0, r3, r0
 507              	.LVL59:
 508 0080 1060     		str	r0, [r2]
 509 0082 05E0     		b	.L29
 510              	.LVL60:
 511              	.L28:
 321:Src/main.c    ****     }else if(g>0){
 512              		.loc 1 321 0
 513 0084 0028     		cmp	r0, #0
 514 0086 03DD     		ble	.L29
 322:Src/main.c    ****         RIGHT_SPEED += g;
 515              		.loc 1 322 0
 516 0088 094B     		ldr	r3, .L31+12
 517 008a 1A68     		ldr	r2, [r3]
 518 008c 1044     		add	r0, r0, r2
 519              	.LVL61:
 520 008e 1860     		str	r0, [r3]
 521              	.L29:
 323:Src/main.c    ****     }
 324:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LEFT_SPEED);
 522              		.loc 1 324 0
 523 0090 084B     		ldr	r3, .L31+16
 524 0092 1B68     		ldr	r3, [r3]
 525 0094 054A     		ldr	r2, .L31+8
 526 0096 1268     		ldr	r2, [r2]
 527 0098 5A63     		str	r2, [r3, #52]
 325:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, RIGHT_SPEED);
 528              		.loc 1 325 0
 529 009a 054A     		ldr	r2, .L31+12
 530 009c 1268     		ldr	r2, [r2]
 531 009e DA63     		str	r2, [r3, #60]
 532 00a0 70BD     		pop	{r4, r5, r6, pc}
 533              	.LVL62:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 16


 534              	.L32:
 535 00a2 00BF     		.align	2
 536              	.L31:
 537 00a4 00040240 		.word	1073873920
 538 00a8 00000000 		.word	htim9
 539 00ac 00000000 		.word	.LANCHOR0
 540 00b0 00000000 		.word	.LANCHOR1
 541 00b4 00000000 		.word	htim1
 542              		.cfi_endproc
 543              	.LFE127:
 545              		.global	__aeabi_ui2d
 546              		.global	__aeabi_ddiv
 547              		.global	__aeabi_dmul
 548              		.global	__aeabi_d2uiz
 549              		.section	.text.update_motor_speed,"ax",%progbits
 550              		.align	2
 551              		.global	update_motor_speed
 552              		.thumb
 553              		.thumb_func
 555              	update_motor_speed:
 556              	.LFB128:
 326:Src/main.c    **** }
 327:Src/main.c    **** 
 328:Src/main.c    **** void update_motor_speed(int m, uint32_t speed[]){
 557              		.loc 1 328 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 24
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              	.LVL63:
 562 0000 30B5     		push	{r4, r5, lr}
 563              	.LCFI5:
 564              		.cfi_def_cfa_offset 12
 565              		.cfi_offset 4, -12
 566              		.cfi_offset 5, -8
 567              		.cfi_offset 14, -4
 568 0002 87B0     		sub	sp, sp, #28
 569              	.LCFI6:
 570              		.cfi_def_cfa_offset 40
 571 0004 0D46     		mov	r5, r1
 329:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[0]/100.0*MOTOR_SPEED);
 572              		.loc 1 329 0
 573 0006 1C4B     		ldr	r3, .L35
 574 0008 1C68     		ldr	r4, [r3]
 575 000a 0868     		ldr	r0, [r1]
 576              	.LVL64:
 577 000c FFF7FEFF 		bl	__aeabi_ui2d
 578              	.LVL65:
 579 0010 0022     		movs	r2, #0
 580 0012 1A4B     		ldr	r3, .L35+4
 581 0014 FFF7FEFF 		bl	__aeabi_ddiv
 582              	.LVL66:
 583 0018 0022     		movs	r2, #0
 584 001a 194B     		ldr	r3, .L35+8
 585 001c FFF7FEFF 		bl	__aeabi_dmul
 586              	.LVL67:
 587 0020 FFF7FEFF 		bl	__aeabi_d2uiz
 588              	.LVL68:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 17


 589 0024 6063     		str	r0, [r4, #52]
 330:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[1]/100.0*MOTOR_SPEED);
 590              		.loc 1 330 0
 591 0026 6868     		ldr	r0, [r5, #4]
 592 0028 FFF7FEFF 		bl	__aeabi_ui2d
 593              	.LVL69:
 594 002c 0022     		movs	r2, #0
 595 002e 134B     		ldr	r3, .L35+4
 596 0030 FFF7FEFF 		bl	__aeabi_ddiv
 597              	.LVL70:
 598 0034 0022     		movs	r2, #0
 599 0036 124B     		ldr	r3, .L35+8
 600 0038 FFF7FEFF 		bl	__aeabi_dmul
 601              	.LVL71:
 602 003c FFF7FEFF 		bl	__aeabi_d2uiz
 603              	.LVL72:
 604 0040 E063     		str	r0, [r4, #60]
 331:Src/main.c    ****     char msg[20] = "";
 605              		.loc 1 331 0
 606 0042 0024     		movs	r4, #0
 607 0044 0194     		str	r4, [sp, #4]
 608 0046 0294     		str	r4, [sp, #8]
 609 0048 0394     		str	r4, [sp, #12]
 610 004a 0494     		str	r4, [sp, #16]
 611 004c 0594     		str	r4, [sp, #20]
 332:Src/main.c    ****     sprintf(msg, "L: %lu", speed[0]);
 612              		.loc 1 332 0
 613 004e 01A8     		add	r0, sp, #4
 614 0050 0C49     		ldr	r1, .L35+12
 615 0052 2A68     		ldr	r2, [r5]
 616 0054 FFF7FEFF 		bl	sprintf
 617              	.LVL73:
 333:Src/main.c    ****     print(msg, 0);
 618              		.loc 1 333 0
 619 0058 01A8     		add	r0, sp, #4
 620 005a 2146     		mov	r1, r4
 621 005c FFF7FEFF 		bl	print
 622              	.LVL74:
 334:Src/main.c    ****     sprintf(msg, "R: %lu", speed[1]);
 623              		.loc 1 334 0
 624 0060 01A8     		add	r0, sp, #4
 625 0062 0949     		ldr	r1, .L35+16
 626 0064 6A68     		ldr	r2, [r5, #4]
 627 0066 FFF7FEFF 		bl	sprintf
 628              	.LVL75:
 335:Src/main.c    ****     print(msg, 1);
 629              		.loc 1 335 0
 630 006a 01A8     		add	r0, sp, #4
 631 006c 0121     		movs	r1, #1
 632 006e FFF7FEFF 		bl	print
 633              	.LVL76:
 336:Src/main.c    **** }
 634              		.loc 1 336 0
 635 0072 07B0     		add	sp, sp, #28
 636              	.LCFI7:
 637              		.cfi_def_cfa_offset 12
 638              		@ sp needed
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 18


 639 0074 30BD     		pop	{r4, r5, pc}
 640              	.LVL77:
 641              	.L36:
 642 0076 00BF     		.align	2
 643              	.L35:
 644 0078 00000000 		.word	htim1
 645 007c 00005940 		.word	1079574528
 646 0080 00408F40 		.word	1083129856
 647 0084 3C000000 		.word	.LC8
 648 0088 44000000 		.word	.LC9
 649              		.cfi_endproc
 650              	.LFE128:
 652              		.section	.text._Error_Handler,"ax",%progbits
 653              		.align	2
 654              		.global	_Error_Handler
 655              		.thumb
 656              		.thumb_func
 658              	_Error_Handler:
 659              	.LFB129:
 337:Src/main.c    **** /* USER CODE END 4 */
 338:Src/main.c    **** 
 339:Src/main.c    **** /**
 340:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 341:Src/main.c    ****  * @param  file: The file name as string.
 342:Src/main.c    ****  * @param  line: The line in file as a number.
 343:Src/main.c    ****  * @retval None
 344:Src/main.c    ****  */
 345:Src/main.c    **** void _Error_Handler(char *file, int line)
 346:Src/main.c    **** {
 660              		.loc 1 346 0
 661              		.cfi_startproc
 662              		@ Volatile: function does not return.
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 665              		@ link register save eliminated.
 666              	.LVL78:
 667              	.L38:
 347:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 348:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 349:Src/main.c    ****     while(1)
 350:Src/main.c    ****     {
 351:Src/main.c    ****     }
 668              		.loc 1 351 0 discriminator 1
 669 0000 FEE7     		b	.L38
 670              		.cfi_endproc
 671              	.LFE129:
 673 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 674              		.align	2
 675              		.global	SystemClock_Config
 676              		.thumb
 677              		.thumb_func
 679              	SystemClock_Config:
 680              	.LFB124:
 170:Src/main.c    **** 
 681              		.loc 1 170 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 80
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 19


 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685 0000 00B5     		push	{lr}
 686              	.LCFI8:
 687              		.cfi_def_cfa_offset 4
 688              		.cfi_offset 14, -4
 689 0002 95B0     		sub	sp, sp, #84
 690              	.LCFI9:
 691              		.cfi_def_cfa_offset 88
 692              	.LBB3:
 177:Src/main.c    **** 
 693              		.loc 1 177 0
 694 0004 0022     		movs	r2, #0
 695 0006 0192     		str	r2, [sp, #4]
 696 0008 294B     		ldr	r3, .L43
 697 000a 196C     		ldr	r1, [r3, #64]
 698 000c 41F08051 		orr	r1, r1, #268435456
 699 0010 1964     		str	r1, [r3, #64]
 700 0012 1B6C     		ldr	r3, [r3, #64]
 701 0014 03F08053 		and	r3, r3, #268435456
 702 0018 0193     		str	r3, [sp, #4]
 703 001a 019B     		ldr	r3, [sp, #4]
 704              	.LBE3:
 705              	.LBB4:
 179:Src/main.c    **** 
 706              		.loc 1 179 0
 707 001c 0292     		str	r2, [sp, #8]
 708 001e 2549     		ldr	r1, .L43+4
 709 0020 0B68     		ldr	r3, [r1]
 710 0022 23F44043 		bic	r3, r3, #49152
 711 0026 43F40043 		orr	r3, r3, #32768
 712 002a 0B60     		str	r3, [r1]
 713 002c 0B68     		ldr	r3, [r1]
 714 002e 03F44043 		and	r3, r3, #49152
 715 0032 0293     		str	r3, [sp, #8]
 716 0034 029B     		ldr	r3, [sp, #8]
 717              	.LBE4:
 183:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 718              		.loc 1 183 0
 719 0036 0223     		movs	r3, #2
 720 0038 0893     		str	r3, [sp, #32]
 184:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 721              		.loc 1 184 0
 722 003a 0121     		movs	r1, #1
 723 003c 0B91     		str	r1, [sp, #44]
 185:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 724              		.loc 1 185 0
 725 003e 1021     		movs	r1, #16
 726 0040 0C91     		str	r1, [sp, #48]
 186:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 727              		.loc 1 186 0
 728 0042 0E93     		str	r3, [sp, #56]
 187:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 729              		.loc 1 187 0
 730 0044 0F92     		str	r2, [sp, #60]
 188:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 731              		.loc 1 188 0
 732 0046 0822     		movs	r2, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 20


 733 0048 1092     		str	r2, [sp, #64]
 189:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 734              		.loc 1 189 0
 735 004a 4822     		movs	r2, #72
 736 004c 1192     		str	r2, [sp, #68]
 190:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 737              		.loc 1 190 0
 738 004e 1293     		str	r3, [sp, #72]
 191:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 739              		.loc 1 191 0
 740 0050 0423     		movs	r3, #4
 741 0052 1393     		str	r3, [sp, #76]
 192:Src/main.c    ****     {
 742              		.loc 1 192 0
 743 0054 08A8     		add	r0, sp, #32
 744 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 745              	.LVL79:
 746 005a 18B1     		cbz	r0, .L40
 194:Src/main.c    ****     }
 747              		.loc 1 194 0
 748 005c 1648     		ldr	r0, .L43+8
 749 005e C221     		movs	r1, #194
 750 0060 FFF7FEFF 		bl	_Error_Handler
 751              	.LVL80:
 752              	.L40:
 199:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 753              		.loc 1 199 0
 754 0064 0F23     		movs	r3, #15
 755 0066 0393     		str	r3, [sp, #12]
 201:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 756              		.loc 1 201 0
 757 0068 0221     		movs	r1, #2
 758 006a 0491     		str	r1, [sp, #16]
 202:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 759              		.loc 1 202 0
 760 006c 0023     		movs	r3, #0
 761 006e 0593     		str	r3, [sp, #20]
 203:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 762              		.loc 1 203 0
 763 0070 4FF48052 		mov	r2, #4096
 764 0074 0692     		str	r2, [sp, #24]
 204:Src/main.c    **** 
 765              		.loc 1 204 0
 766 0076 0793     		str	r3, [sp, #28]
 206:Src/main.c    ****     {
 767              		.loc 1 206 0
 768 0078 03A8     		add	r0, sp, #12
 769 007a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 770              	.LVL81:
 771 007e 18B1     		cbz	r0, .L41
 208:Src/main.c    ****     }
 772              		.loc 1 208 0
 773 0080 0D48     		ldr	r0, .L43+8
 774 0082 D021     		movs	r1, #208
 775 0084 FFF7FEFF 		bl	_Error_Handler
 776              	.LVL82:
 777              	.L41:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 21


 213:Src/main.c    **** 
 778              		.loc 1 213 0
 779 0088 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 780              	.LVL83:
 781 008c 0B4B     		ldr	r3, .L43+12
 782 008e A3FB0030 		umull	r3, r0, r3, r0
 783 0092 8009     		lsrs	r0, r0, #6
 784 0094 FFF7FEFF 		bl	HAL_SYSTICK_Config
 785              	.LVL84:
 217:Src/main.c    **** 
 786              		.loc 1 217 0
 787 0098 0420     		movs	r0, #4
 788 009a FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 789              	.LVL85:
 220:Src/main.c    **** }
 790              		.loc 1 220 0
 791 009e 4FF0FF30 		mov	r0, #-1
 792 00a2 0021     		movs	r1, #0
 793 00a4 0A46     		mov	r2, r1
 794 00a6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 795              	.LVL86:
 221:Src/main.c    **** 
 796              		.loc 1 221 0
 797 00aa 15B0     		add	sp, sp, #84
 798              	.LCFI10:
 799              		.cfi_def_cfa_offset 4
 800              		@ sp needed
 801 00ac 5DF804FB 		ldr	pc, [sp], #4
 802              	.L44:
 803              		.align	2
 804              	.L43:
 805 00b0 00380240 		.word	1073887232
 806 00b4 00700040 		.word	1073770496
 807 00b8 4C000000 		.word	.LC10
 808 00bc D34D6210 		.word	274877907
 809              		.cfi_endproc
 810              	.LFE124:
 812              		.section	.text.main,"ax",%progbits
 813              		.align	2
 814              		.global	main
 815              		.thumb
 816              		.thumb_func
 818              	main:
 819              	.LFB123:
  91:Src/main.c    ****     /* USER CODE BEGIN 1 */
 820              		.loc 1 91 0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 40
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824 0000 10B5     		push	{r4, lr}
 825              	.LCFI11:
 826              		.cfi_def_cfa_offset 8
 827              		.cfi_offset 4, -8
 828              		.cfi_offset 14, -4
 829 0002 8AB0     		sub	sp, sp, #40
 830              	.LCFI12:
 831              		.cfi_def_cfa_offset 48
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 22


  99:Src/main.c    **** 
 832              		.loc 1 99 0
 833 0004 FFF7FEFF 		bl	HAL_Init
 834              	.LVL87:
 106:Src/main.c    **** 
 835              		.loc 1 106 0
 836 0008 FFF7FEFF 		bl	SystemClock_Config
 837              	.LVL88:
 113:Src/main.c    ****     MX_TIM3_Init();
 838              		.loc 1 113 0
 839 000c FFF7FEFF 		bl	MX_GPIO_Init
 840              	.LVL89:
 114:Src/main.c    ****     MX_TIM5_Init();
 841              		.loc 1 114 0
 842 0010 FFF7FEFF 		bl	MX_TIM3_Init
 843              	.LVL90:
 115:Src/main.c    ****     MX_TIM1_Init();
 844              		.loc 1 115 0
 845 0014 FFF7FEFF 		bl	MX_TIM5_Init
 846              	.LVL91:
 116:Src/main.c    ****     MX_TIM2_Init();
 847              		.loc 1 116 0
 848 0018 FFF7FEFF 		bl	MX_TIM1_Init
 849              	.LVL92:
 117:Src/main.c    ****     MX_USART6_UART_Init();
 850              		.loc 1 117 0
 851 001c FFF7FEFF 		bl	MX_TIM2_Init
 852              	.LVL93:
 118:Src/main.c    ****     MX_ADC1_Init();
 853              		.loc 1 118 0
 854 0020 FFF7FEFF 		bl	MX_USART6_UART_Init
 855              	.LVL94:
 119:Src/main.c    ****     MX_I2C1_Init();
 856              		.loc 1 119 0
 857 0024 FFF7FEFF 		bl	MX_ADC1_Init
 858              	.LVL95:
 120:Src/main.c    ****     MX_TIM4_Init();
 859              		.loc 1 120 0
 860 0028 FFF7FEFF 		bl	MX_I2C1_Init
 861              	.LVL96:
 121:Src/main.c    ****     MX_TIM9_Init();
 862              		.loc 1 121 0
 863 002c FFF7FEFF 		bl	MX_TIM4_Init
 864              	.LVL97:
 122:Src/main.c    ****     ssd1306_Init();
 865              		.loc 1 122 0
 866 0030 FFF7FEFF 		bl	MX_TIM9_Init
 867              	.LVL98:
 123:Src/main.c    ****     /* USER CODE BEGIN 2 */
 868              		.loc 1 123 0
 869 0034 FFF7FEFF 		bl	ssd1306_Init
 870              	.LVL99:
 127:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 871              		.loc 1 127 0
 872 0038 1648     		ldr	r0, .L48
 873 003a 1821     		movs	r1, #24
 874 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 23


 875              	.LVL100:
 128:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 876              		.loc 1 128 0
 877 0040 1548     		ldr	r0, .L48+4
 878 0042 1821     		movs	r1, #24
 879 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 880              	.LVL101:
 129:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 881              		.loc 1 129 0
 882 0048 144C     		ldr	r4, .L48+8
 883 004a 2046     		mov	r0, r4
 884 004c 0021     		movs	r1, #0
 885 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 886              	.LVL102:
 130:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 887              		.loc 1 130 0
 888 0052 2046     		mov	r0, r4
 889 0054 0821     		movs	r1, #8
 890 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 891              	.LVL103:
 131:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 892              		.loc 1 131 0
 893 005a 2046     		mov	r0, r4
 894 005c 0021     		movs	r1, #0
 895 005e FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 896              	.LVL104:
 132:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 897              		.loc 1 132 0
 898 0062 2046     		mov	r0, r4
 899 0064 0821     		movs	r1, #8
 900 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 901              	.LVL105:
 133:Src/main.c    **** 
 902              		.loc 1 133 0
 903 006a 0D48     		ldr	r0, .L48+12
 904 006c FFF7FEFF 		bl	HAL_TIM_Base_Start
 905              	.LVL106:
 137:Src/main.c    ****     HAL_Delay(100);
 906              		.loc 1 137 0
 907 0070 6846     		mov	r0, sp
 908 0072 FFF7FEFF 		bl	menu
 909              	.LVL107:
 138:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 910              		.loc 1 138 0
 911 0076 6420     		movs	r0, #100
 912 0078 FFF7FEFF 		bl	HAL_Delay
 913              	.LVL108:
 139:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 914              		.loc 1 139 0
 915 007c 2046     		mov	r0, r4
 916 007e 0021     		movs	r1, #0
 917 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 918              	.LVL109:
 140:Src/main.c    ****     //ENCODER_t LEFT_ENCODER = encoder_Init();
 919              		.loc 1 140 0
 920 0084 2046     		mov	r0, r4
 921 0086 0821     		movs	r1, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 24


 922 0088 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 923              	.LVL110:
 924              	.L46:
 152:Src/main.c    ****         //sprintf(msg, "%d", (int)update_encoder(&LEFT_ENCODER, &htim4));
 925              		.loc 1 152 0 discriminator 1
 926 008c 6846     		mov	r0, sp
 927 008e FFF7FEFF 		bl	do_pid
 928              	.LVL111:
 159:Src/main.c    ****     /* USER CODE END 3 */
 929              		.loc 1 159 0 discriminator 1
 930 0092 FBE7     		b	.L46
 931              	.L49:
 932              		.align	2
 933              	.L48:
 934 0094 00000000 		.word	htim4
 935 0098 00000000 		.word	htim5
 936 009c 00000000 		.word	htim1
 937 00a0 00000000 		.word	htim9
 938              		.cfi_endproc
 939              	.LFE123:
 941              		.global	RIGHT_SPEED
 942              		.global	LEFT_SPEED
 943              		.global	PUSH_BUTTON_STATE
 944              		.comm	last_time,4,4
 945              		.section	.data.RIGHT_SPEED,"aw",%progbits
 946              		.align	2
 947              		.set	.LANCHOR1,. + 0
 950              	RIGHT_SPEED:
 951 0000 20030000 		.word	800
 952              		.section	.data.LEFT_SPEED,"aw",%progbits
 953              		.align	2
 954              		.set	.LANCHOR0,. + 0
 957              	LEFT_SPEED:
 958 0000 20030000 		.word	800
 959              		.section	.rodata.str1.4,"aMS",%progbits,1
 960              		.align	2
 961              	.LC0:
 962 0000 53746172 		.ascii	"Starting\000"
 962      74696E67 
 962      00
 963 0009 000000   		.space	3
 964              	.LC1:
 965 000c 256C7500 		.ascii	"%lu\000"
 966              	.LC2:
 967 0010 256400   		.ascii	"%d\000"
 968 0013 00       		.space	1
 969              	.LC3:
 970 0014 5020256C 		.ascii	"P %lu\000"
 970      7500
 971 001a 0000     		.space	2
 972              	.LC4:
 973 001c 4420256C 		.ascii	"D %lu\000"
 973      7500
 974 0022 0000     		.space	2
 975              	.LC5:
 976 0024 4920256C 		.ascii	"I %lu\000"
 976      7500
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 25


 977 002a 0000     		.space	2
 978              	.LC6:
 979 002c 4C202564 		.ascii	"L %d\000"
 979      00
 980 0031 000000   		.space	3
 981              	.LC7:
 982 0034 52202564 		.ascii	"R %d\000"
 982      00
 983 0039 000000   		.space	3
 984              	.LC8:
 985 003c 4C3A2025 		.ascii	"L: %lu\000"
 985      6C7500
 986 0043 00       		.space	1
 987              	.LC9:
 988 0044 523A2025 		.ascii	"R: %lu\000"
 988      6C7500
 989 004b 00       		.space	1
 990              	.LC10:
 991 004c 5372632F 		.ascii	"Src/main.c\000"
 991      6D61696E 
 991      2E6300
 992              		.section	.bss.PUSH_BUTTON_STATE,"aw",%nobits
 995              	PUSH_BUTTON_STATE:
 996 0000 00       		.space	1
 997              		.text
 998              	.Letext0:
 999              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1000              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 1001              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 1002              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1003              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1004              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1005              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1006              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1007              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1008              		.file 11 "Inc/fonts.h"
 1009              		.file 12 "Inc/ssd1306.h"
 1010              		.file 13 "Inc/pid.h"
 1011              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
 1012              		.file 15 "Inc/tim.h"
 1013              		.file 16 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 1014              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1015              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1016              		.file 19 "Inc/gpio.h"
 1017              		.file 20 "Inc/usart.h"
 1018              		.file 21 "Inc/adc.h"
 1019              		.file 22 "Inc/i2c.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:21     .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:26     .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:74     .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:79     .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:84     .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:382    .text.menu:00000000000001ac $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:400    .text.do_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:405    .text.do_pid:0000000000000000 do_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:537    .text.do_pid:00000000000000a4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:550    .text.update_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:555    .text.update_motor_speed:0000000000000000 update_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:644    .text.update_motor_speed:0000000000000078 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:653    .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:658    .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:674    .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:679    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:805    .text.SystemClock_Config:00000000000000b0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:813    .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:818    .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:934    .text.main:0000000000000094 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:950    .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:957    .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:995    .bss.PUSH_BUTTON_STATE:0000000000000000 PUSH_BUTTON_STATE
                            *COM*:0000000000000004 last_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:946    .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:953    .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:960    .rodata.str1.4:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s:996    .bss.PUSH_BUTTON_STATE:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
HAL_GPIO_ReadPin
sprintf
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
pid_Init
htim1
__aeabi_d2iz
pid_GetGain
htim9
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccRRKT3c.s 			page 27


HAL_Init
MX_GPIO_Init
MX_TIM3_Init
MX_TIM5_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
ssd1306_Init
HAL_TIM_Encoder_Start
HAL_TIM_Base_Start
HAL_Delay
htim4
htim5
