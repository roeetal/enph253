ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    ****  
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** // uint16_t LEFT_SPEED = BASE_SPEED+SPEED_DIFF;
  66:Src/main.c    **** uint16_t LEFT_SPEED = BASE_SPEED;
  67:Src/main.c    **** uint16_t RIGHT_SPEED = BASE_SPEED;
  68:Src/main.c    **** uint32_t dma_buffer[2048];
  69:Src/main.c    **** uint32_t adc_values[2048];
  70:Src/main.c    **** int ewok_cnt = 0;
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  79:Src/main.c    **** void print(char msg[], int row);
  80:Src/main.c    **** PID_t menu();
  81:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  82:Src/main.c    **** void encoder_pid(PID_t *enc_pid);
  83:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  84:Src/main.c    **** void turn();
  85:Src/main.c    **** void turn_deg(int16_t);
  86:Src/main.c    **** void alarm_detect();
  87:Src/main.c    **** void drive_straight(PID_t *enc_pid);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 3


  88:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis);
  89:Src/main.c    **** void square_edge(PID_t *enc_pid);
  90:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid);
  91:Src/main.c    **** void test_All();
  92:Src/main.c    **** void test_PWM_htim1();
  93:Src/main.c    **** void test_PWM_htim3();
  94:Src/main.c    **** 
  95:Src/main.c    **** /* USER CODE END PFP */
  96:Src/main.c    **** 
  97:Src/main.c    **** /* USER CODE BEGIN 0 */
  98:Src/main.c    **** /**
  99:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
 100:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
 101:Src/main.c    ****  * Order of buffer: ir1, pi, ir1, ...
 102:Src/main.c    ****  */
 103:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 104:Src/main.c    **** {
  29              		.loc 1 104 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 105:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 105 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF40052 		mov	r2, #8192
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB131:
 106:Src/main.c    **** }
 107:Src/main.c    **** /* USER CODE END 0 */
 108:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 4


 109:Src/main.c    **** /**
 110:Src/main.c    ****   * @brief  The application entry point.
 111:Src/main.c    ****   *
 112:Src/main.c    ****   * @retval None
 113:Src/main.c    ****   */
 114:Src/main.c    **** int main(void)
 115:Src/main.c    **** {
 116:Src/main.c    ****   /* USER CODE BEGIN 1 */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE END 1 */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 123:Src/main.c    ****   HAL_Init();
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE BEGIN Init */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE END Init */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* Configure the system clock */
 130:Src/main.c    ****   SystemClock_Config();
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* USER CODE END SysInit */
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* Initialize all configured peripherals */
 137:Src/main.c    ****   MX_GPIO_Init();
 138:Src/main.c    ****   MX_DMA_Init();
 139:Src/main.c    ****   MX_TIM3_Init();
 140:Src/main.c    ****   MX_TIM1_Init();
 141:Src/main.c    ****   MX_TIM2_Init();
 142:Src/main.c    ****   MX_ADC1_Init();
 143:Src/main.c    ****   MX_TIM4_Init();
 144:Src/main.c    ****   MX_TIM9_Init();
 145:Src/main.c    ****   MX_TIM5_Init();
 146:Src/main.c    ****   MX_I2C1_Init();
 147:Src/main.c    ****   MX_USART6_UART_Init();
 148:Src/main.c    ****   /* USER CODE BEGIN 2 */
 149:Src/main.c    **** 
 150:Src/main.c    ****     /* Initialize peripherals */
 151:Src/main.c    ****     /* 
 152:Src/main.c    ****      * Claw jaw: TIM3 CH1
 153:Src/main.c    ****      * Claw arm: TIM3 CH2
 154:Src/main.c    ****      * Basket: TIM3 CH3
 155:Src/main.c    ****      * left forward: TIM1 CH1
 156:Src/main.c    ****      * left backward: TIM1 CH2
 157:Src/main.c    ****      * right forward: TIM1 CH3
 158:Src/main.c    ****      * right backward: TIM1 CH4
 159:Src/main.c    ****      * left encoder: TIM4
 160:Src/main.c    ****      * right encoderL TIM5
 161:Src/main.c    ****      * spare clocks: TIM2, TIM9
 162:Src/main.c    ****      */
 163:Src/main.c    **** 
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 165:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 5


 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 172:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 173:Src/main.c    **** 
 174:Src/main.c    ****     /* Initialize other stuffs */
 175:Src/main.c    ****     ssd1306_Init();
 176:Src/main.c    ****     print("Starting\n", 0);
 177:Src/main.c    ****     claw_init(&htim3);
 178:Src/main.c    ****     // basket_init(&htim3);
 179:Src/main.c    **** 
 180:Src/main.c    ****     PID_t enc_pid = pid_Init(2, 0, 0, 2, 1);
 181:Src/main.c    **** 
 182:Src/main.c    ****     EDGE_LEFT_STATE = NOT_FLAGGED;
 183:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 184:Src/main.c    **** 
 185:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED+100, RIGHT_SPEED, 2000);
 186:Src/main.c    **** 
 187:Src/main.c    ****     /* Initially disabled interrupts and ADC */
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(PI_INT_EXTI_IRQn);
 189:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 190:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 191:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 192:Src/main.c    **** 
 193:Src/main.c    ****     alarm_detect();
 194:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 5000);
 195:Src/main.c    ****     print("ewok\n", 0);
 196:Src/main.c    **** 
 197:Src/main.c    ****   /* USER CODE END 2 */
 198:Src/main.c    **** 
 199:Src/main.c    ****   /* Infinite loop */
 200:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 201:Src/main.c    ****     while (1)
 202:Src/main.c    ****     {
 203:Src/main.c    ****         // /*
 204:Src/main.c    ****         //  * Pi Turning
 205:Src/main.c    ****         //  */
 206:Src/main.c    ****         if (PI_INT_STATE == FLAGGED)
 207:Src/main.c    ****         {
 208:Src/main.c    ****             // Stop Requesting Images
 209:Src/main.c    ****             print("Pi interrupt\n", 0);
 210:Src/main.c    ****             // Turn to ewok
 211:Src/main.c    ****             turn();
 212:Src/main.c    **** 
 213:Src/main.c    ****             // Drive forward w/ PID for 2.5 s, enable claw interrupt
 214:Src/main.c    ****         //    uint32_t start = HAL_GetTick();
 215:Src/main.c    ****             uint32_t time = HAL_GetTick();
 216:Src/main.c    ****             while(HAL_GetTick()-time<3000){
 217:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 218:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 219:Src/main.c    ****                 drive_straight(&enc_pid);
 220:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 221:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 222:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 6


 223:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 224:Src/main.c    ****                 {
 225:Src/main.c    ****                     print("Claw interrupt\n", 0);
 226:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 227:Src/main.c    ****                     break;
 228:Src/main.c    ****                 }
 229:Src/main.c    ****             }
 230:Src/main.c    **** 
 231:Src/main.c    ****             print("ewok\n", 0);
 232:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 233:Src/main.c    ****         }
 234:Src/main.c    ****         
 235:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 236:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 237:Src/main.c    ****         uint32_t time = HAL_GetTick();
 238:Src/main.c    ****         while(HAL_GetTick()-time<3000 && PI_INT_STATE == NOT_FLAGGED)
 239:Src/main.c    ****         {
 240:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 241:Src/main.c    ****                 {
 242:Src/main.c    ****                     print("Claw interrupt\n", 0);
 243:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 244:Src/main.c    ****                     break;
 245:Src/main.c    ****                 }
 246:Src/main.c    ****         }
 247:Src/main.c    ****         if(PI_INT_STATE != FLAGGED){
 248:Src/main.c    ****             drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 750);
 249:Src/main.c    ****             print("ewok\n", 0);
 250:Src/main.c    ****         }
 251:Src/main.c    ****        /* 
 252:Src/main.c    ****             // Reset Claw Interrupt before driving forward
 253:Src/main.c    ****             print("MAIN | CLAW_INT UNFLAGGED\n", 0);
 254:Src/main.c    ****             while (HAL_GetTick()-start<3000)
 255:Src/main.c    ****             {
 256:Src/main.c    ****                 drive_straight(&enc_pid);
 257:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 258:Src/main.c    ****                 if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 259:Src/main.c    ****                 {
 260:Src/main.c    ****                     print("Claw interrupt\n", 0);
 261:Src/main.c    ****                     if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 262:Src/main.c    ****                 }
 263:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 264:Src/main.c    ****                 {
 265:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 266:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 267:Src/main.c    ****                     print("Edge left triggered", 0);
 268:Src/main.c    ****                     turn_deg(30);
 269:Src/main.c    ****                 }
 270:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 271:Src/main.c    ****                     print("Edge right triggered", 0);
 272:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 273:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 274:Src/main.c    ****                     turn_deg(-30);
 275:Src/main.c    ****                 }
 276:Src/main.c    ****             }
 277:Src/main.c    **** 
 278:Src/main.c    ****         }
 279:Src/main.c    ****         else
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 7


 280:Src/main.c    ****         {
 281:Src/main.c    **** 
 282:Src/main.c    ****         */
 283:Src/main.c    ****             /*
 284:Src/main.c    ****              * Look for Ewok
 285:Src/main.c    ****              */
 286:Src/main.c    ****             // CLAW_INT_STATE = NOT_FLAGGED;
 287:Src/main.c    **** 
 288:Src/main.c    ****             // if (ewok_cnt == 4 || ewok_cnt == 5)
 289:Src/main.c    ****             // {
 290:Src/main.c    ****             //     if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 291:Src/main.c    ****             //     {
 292:Src/main.c    ****             //         drive_straight_time(&enc_pid, 0, RIGHT_SPEED - 100, 400);
 293:Src/main.c    ****             //         uint32_t temp_time = HAL_GetTick();
 294:Src/main.c    ****             //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 295:Src/main.c    ****             //     }
 296:Src/main.c    ****             //     else if (EDGE_LEFT_STATE == NOT_FLAGGED && EDGE_RIGHT_STATE == FLAGGED)
 297:Src/main.c    ****             //     {
 298:Src/main.c    ****             //         drive_straight_time(&enc_pid, LEFT_SPEED - 100, 0, 400);
 299:Src/main.c    ****             //         uint32_t temp_time = HAL_GetTick();
 300:Src/main.c    ****             //         while ((HAL_GetTick() - temp_time) < 3000 && PI_INT_STATE == NOT_FLAGGED);
 301:Src/main.c    ****             //     }
 302:Src/main.c    ****             // }
 303:Src/main.c    ****             /*
 304:Src/main.c    ****             
 305:Src/main.c    ****             drive_straight_time(&enc_pid, LEFT_SPEED - 100, RIGHT_SPEED - 100, 500);
 306:Src/main.c    ****             print("ewok\n", 0);
 307:Src/main.c    ****             if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == SET)
 308:Src/main.c    ****                 {
 309:Src/main.c    ****                     print("Claw interrupt\n", 0);
 310:Src/main.c    ****                     if(debounce_and_grab(ewok_cnt, enc_pid)) break;
 311:Src/main.c    ****                 }
 312:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == RESET)
 313:Src/main.c    ****                 {
 314:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 315:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 316:Src/main.c    ****                     print("Edge left triggered", 0);
 317:Src/main.c    ****                     turn_deg(30);
 318:Src/main.c    ****                 }
 319:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == RESET){
 320:Src/main.c    ****                     print("Edge right triggered", 0);
 321:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 322:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 323:Src/main.c    ****                     turn_deg(-30);
 324:Src/main.c    ****                 }
 325:Src/main.c    ****             uint32_t temp_time = HAL_GetTick();
 326:Src/main.c    ****         */
 327:Src/main.c    ****                 /*
 328:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 329:Src/main.c    ****                 {
 330:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 331:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 332:Src/main.c    ****                     print("Edge left triggered", 0);
 333:Src/main.c    ****                     turn_deg(30);
 334:Src/main.c    ****                 }
 335:Src/main.c    ****                 else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 336:Src/main.c    ****                     print("Edge right triggered", 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 8


 337:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 338:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 339:Src/main.c    ****                     turn_deg(-30);
 340:Src/main.c    ****                 }
 341:Src/main.c    ****                 */
 342:Src/main.c    **** 
 343:Src/main.c    ****   /* USER CODE END WHILE */
 344:Src/main.c    **** 
 345:Src/main.c    ****   /* USER CODE BEGIN 3 */
 346:Src/main.c    ****     }
 347:Src/main.c    ****   /* USER CODE END 3 */
 348:Src/main.c    **** 
 349:Src/main.c    **** }
 350:Src/main.c    **** 
 351:Src/main.c    **** /**
 352:Src/main.c    ****   * @brief System Clock Configuration
 353:Src/main.c    ****   * @retval None
 354:Src/main.c    ****   */
 355:Src/main.c    **** void SystemClock_Config(void)
 356:Src/main.c    **** {
 357:Src/main.c    **** 
 358:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 359:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 360:Src/main.c    **** 
 361:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 362:Src/main.c    ****     */
 363:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 364:Src/main.c    **** 
 365:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 366:Src/main.c    **** 
 367:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 368:Src/main.c    ****     */
 369:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 370:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 371:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 372:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 373:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 374:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 375:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 376:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 377:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 378:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 379:Src/main.c    ****   {
 380:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 381:Src/main.c    ****   }
 382:Src/main.c    **** 
 383:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 384:Src/main.c    ****     */
 385:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 386:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 387:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 388:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 389:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 390:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 391:Src/main.c    **** 
 392:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 393:Src/main.c    ****   {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 9


 394:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 395:Src/main.c    ****   }
 396:Src/main.c    **** 
 397:Src/main.c    ****     /**Configure the Systick interrupt time 
 398:Src/main.c    ****     */
 399:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 400:Src/main.c    **** 
 401:Src/main.c    ****     /**Configure the Systick 
 402:Src/main.c    ****     */
 403:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 404:Src/main.c    **** 
 405:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 406:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 407:Src/main.c    **** }
 408:Src/main.c    **** 
 409:Src/main.c    **** /* USER CODE BEGIN 4 */
 410:Src/main.c    **** 
 411:Src/main.c    **** void square_edge(PID_t *enc_pid)
 412:Src/main.c    **** {
 413:Src/main.c    ****     while (1)
 414:Src/main.c    ****     {
 415:Src/main.c    ****         char msg[50] = "";
 416:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | EL: %d\n", HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin)
 417:Src/main.c    ****         print(msg, 0);
 418:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | ER: %d\n", HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin)
 419:Src/main.c    ****         print(msg, 0);
 420:Src/main.c    ****         print("\n", 0);
 421:Src/main.c    ****         drive_straight(enc_pid);
 422:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_Read
 423:Src/main.c    ****         {
 424:Src/main.c    ****             break;
 425:Src/main.c    ****         }
 426:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET || HAL_GPIO
 427:Src/main.c    ****         {
 428:Src/main.c    ****             
 429:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 430:Src/main.c    ****             {
 431:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 432:Src/main.c    ****             }
 433:Src/main.c    ****             if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET)
 434:Src/main.c    ****             {
 435:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 436:Src/main.c    ****             }
 437:Src/main.c    ****         }
 438:Src/main.c    ****     }
 439:Src/main.c    **** }
 440:Src/main.c    **** 
 441:Src/main.c    **** void drive_straight_time(PID_t *enc_pid, uint32_t lspeed, uint32_t rspeed, uint32_t millis)
 442:Src/main.c    **** {
 443:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 444:Src/main.c    ****     char msg[50] = "";
 445:Src/main.c    ****     uint8_t count = 0; // FIXME: Remove to speed up
 446:Src/main.c    ****     while ((HAL_GetTick() - temp_time) < millis)
 447:Src/main.c    ****     {
 448:Src/main.c    ****         if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_SET)
 449:Src/main.c    ****         {
 450:Src/main.c    ****             print("Claw interrupt\n", 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 10


 451:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 452:Src/main.c    ****         }
 453:Src/main.c    ****         /*
 454:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET)
 455:Src/main.c    ****         {
 456:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 457:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 458:Src/main.c    ****             print("Edge left triggered", 0);
 459:Src/main.c    ****             turn_deg(30);
 460:Src/main.c    ****         }
 461:Src/main.c    ****         else if (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET){
 462:Src/main.c    ****             print("Edge right triggered", 0);
 463:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 464:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 465:Src/main.c    ****             turn_deg(-30);
 466:Src/main.c    ****         }
 467:Src/main.c    ****         */
 468:Src/main.c    ****         else 
 469:Src/main.c    ****         {
 470:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, lspeed);
 471:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 472:Src/main.c    ****             drive_straight(enc_pid);
 473:Src/main.c    **** 
 474:Src/main.c    ****         }
 475:Src/main.c    ****     }
 476:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 477:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 478:Src/main.c    **** }
 479:Src/main.c    **** 
 480:Src/main.c    **** void drive_straight(PID_t *enc_pid)
 481:Src/main.c    **** {
 482:Src/main.c    ****     encoder_pid(enc_pid);
 483:Src/main.c    ****     HAL_Delay(10);
 484:Src/main.c    ****     
 485:Src/main.c    **** }
 486:Src/main.c    **** 
 487:Src/main.c    **** /*
 488:Src/main.c    ****  * Assume motors are not on.
 489:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 490:Src/main.c    ****  */
 491:Src/main.c    **** void turn()
 492:Src/main.c    **** {
 493:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 494:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 495:Src/main.c    ****     HAL_Delay(100);
 496:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 497:Src/main.c    ****     //double r = atan(1.57*tan()/())
 498:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 499:Src/main.c    ****     TIM4->CNT = 0;
 500:Src/main.c    ****     TIM5->CNT = 0;
 501:Src/main.c    **** 
 502:Src/main.c    ****     char msg[18] = "";
 503:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", counts);
 504:Src/main.c    ****     print(msg, 0);
 505:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 506:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 507:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 11


 508:Src/main.c    ****     print(msg, 2);
 509:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %d\n", 2 * adc_values[5]);
 510:Src/main.c    ****     print(msg, 0);
 511:Src/main.c    **** 
 512:Src/main.c    ****     if (volts < -TURN_TOLERANCE)
 513:Src/main.c    ****     {
 514:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 515:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 516:Src/main.c    ****         while (TIM5->CNT < counts)
 517:Src/main.c    ****         {
 518:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 519:Src/main.c    ****             // print(msg, 4);
 520:Src/main.c    ****         }
 521:Src/main.c    ****         sprintf(msg, "TURN | TIM5->CNT: %lu\n", TIM5->CNT);
 522:Src/main.c    ****         print(msg, 4);
 523:Src/main.c    ****         TIM5->CNT = 0;
 524:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 525:Src/main.c    ****     }
 526:Src/main.c    ****     else if (volts > TURN_TOLERANCE)
 527:Src/main.c    ****     {
 528:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 529:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 530:Src/main.c    ****         while (TIM4->CNT < counts)
 531:Src/main.c    ****         {
 532:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 533:Src/main.c    ****             // print(msg, 4);
 534:Src/main.c    ****         }
 535:Src/main.c    ****         sprintf(msg, "TURN | TIM4->CNT: %lu\n", TIM4->CNT);
 536:Src/main.c    ****         print(msg, 4);
 537:Src/main.c    ****         TIM4->CNT = 0;
 538:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 539:Src/main.c    ****     }
 540:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 541:Src/main.c    **** }
 542:Src/main.c    **** 
 543:Src/main.c    **** /*
 544:Src/main.c    ****  * Assume motors are not on.
 545:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 546:Src/main.c    ****  */
 547:Src/main.c    **** void turn_deg(int16_t deg)
 548:Src/main.c    **** {
 549:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 550:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 551:Src/main.c    ****     if (counts < 0) counts = -counts;
 552:Src/main.c    ****     TIM4->CNT = 0;
 553:Src/main.c    ****     TIM5->CNT = 0;
 554:Src/main.c    **** 
 555:Src/main.c    ****     char msg[50] = "";
 556:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 557:Src/main.c    ****     print(msg, 0);
 558:Src/main.c    **** 
 559:Src/main.c    ****     if (deg > 0) // FIXME: Ben changed this
 560:Src/main.c    ****     {
 561:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 562:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 563:Src/main.c    ****         while (TIM4->CNT < counts)
 564:Src/main.c    ****         {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 12


 565:Src/main.c    ****             // sprintf(msg, "TIM5->CNT: %lu\n", TIM5->CNT);
 566:Src/main.c    ****             // print(msg, 4);
 567:Src/main.c    ****         }
 568:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM5->CNT: %lu\n", TIM5->CNT);
 569:Src/main.c    ****         print(msg, 4);
 570:Src/main.c    ****         TIM5->CNT = 0;
 571:Src/main.c    ****     }
 572:Src/main.c    ****     else if (deg < 0) // FIXME: Ben changed this
 573:Src/main.c    ****     {
 574:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 575:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 576:Src/main.c    ****         while (TIM5->CNT < counts)
 577:Src/main.c    ****         {
 578:Src/main.c    ****             // sprintf(msg, "TIM4->CNT: %lu\n", TIM4->CNT);
 579:Src/main.c    ****             // print(msg, 4);
 580:Src/main.c    ****         }
 581:Src/main.c    ****         sprintf(msg, "TURN_DEG | TIM4->CNT: %lu\n", TIM4->CNT);
 582:Src/main.c    ****         print(msg, 4);
 583:Src/main.c    ****         TIM4->CNT = 0;
 584:Src/main.c    ****     }
 585:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 586:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 587:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 588:Src/main.c    **** }
 589:Src/main.c    **** 
 590:Src/main.c    **** /**
 591:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 592:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 593:Src/main.c    ****  *
 594:Src/main.c    ****  * @param adc_val, value read from ADC.
 595:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 596:Src/main.c    ****  **/
 597:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 598:Src/main.c    **** {
  67              		.loc 1 598 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 599:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 599 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 13


  89              	.LVL7:
 600:Src/main.c    **** }
  90              		.loc 1 600 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE131:
 101              		.section	.text.print,"ax",%progbits
 102              		.align	2
 103              		.global	print
 104              		.thumb
 105              		.thumb_func
 107              	print:
 108              	.LFB133:
 601:Src/main.c    **** 
 602:Src/main.c    **** // Sampling frequency: 72e6/2/(495*3)
 603:Src/main.c    **** void alarm_detect()
 604:Src/main.c    **** {
 605:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 606:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 607:Src/main.c    ****     HAL_Delay(100);
 608:Src/main.c    ****     char msg[20]="";
 609:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 100){
 610:Src/main.c    ****         sprintf(msg, "GOERT %d\n", (int) goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / siz
 611:Src/main.c    ****         print(msg, 0);
 612:Src/main.c    ****     }
 613:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) > 100);
 614:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 615:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 616:Src/main.c    **** }
 617:Src/main.c    **** 
 618:Src/main.c    **** /**
 619:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 620:Src/main.c    ****  * @param msg, string to print
 621:Src/main.c    ****  * @param row, row to print msg to
 622:Src/main.c    ****  */
 623:Src/main.c    **** void print(char *msg, int row)
 624:Src/main.c    **** {
 109              		.loc 1 624 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              	.LVL8:
 114 0000 10B5     		push	{r4, lr}
 115              	.LCFI2:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 4, -8
 118              		.cfi_offset 14, -4
 119 0002 0446     		mov	r4, r0
 625:Src/main.c    ****     // if (row == 0)
 626:Src/main.c    ****     // {
 627:Src/main.c    ****     //     ssd1306_Fill(Black);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 14


 628:Src/main.c    ****     // }
 629:Src/main.c    ****     // ssd1306_SetCursor(0, row * 10);
 630:Src/main.c    ****     // ssd1306_WriteString(msg, Font_7x10, White);
 631:Src/main.c    ****     // ssd1306_UpdateScreen();
 632:Src/main.c    ****     HAL_UART_Transmit(&huart6, (uint8_t *) msg, strlen(msg), 100);
 120              		.loc 1 632 0
 121 0004 FFF7FEFF 		bl	strlen
 122              	.LVL9:
 123 0008 82B2     		uxth	r2, r0
 124 000a 0348     		ldr	r0, .L11
 125 000c 2146     		mov	r1, r4
 126 000e 6423     		movs	r3, #100
 127 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 128              	.LVL10:
 129 0014 10BD     		pop	{r4, pc}
 130              	.LVL11:
 131              	.L12:
 132 0016 00BF     		.align	2
 133              	.L11:
 134 0018 00000000 		.word	huart6
 135              		.cfi_endproc
 136              	.LFE133:
 138              		.global	__aeabi_d2iz
 139              		.global	__aeabi_dcmplt
 140              		.global	__aeabi_dcmpgt
 141              		.section	.text.alarm_detect,"ax",%progbits
 142              		.align	2
 143              		.global	alarm_detect
 144              		.thumb
 145              		.thumb_func
 147              	alarm_detect:
 148              	.LFB132:
 604:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 149              		.loc 1 604 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 24
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153 0000 10B5     		push	{r4, lr}
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 4, -8
 157              		.cfi_offset 14, -4
 158 0002 88B0     		sub	sp, sp, #32
 159              	.LCFI4:
 160              		.cfi_def_cfa_offset 40
 605:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 161              		.loc 1 605 0
 162 0004 2A48     		ldr	r0, .L18
 163 0006 2B49     		ldr	r1, .L18+4
 164 0008 4FF40062 		mov	r2, #2048
 165 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 166              	.LVL12:
 607:Src/main.c    ****     char msg[20]="";
 167              		.loc 1 607 0
 168 0010 6420     		movs	r0, #100
 169 0012 FFF7FEFF 		bl	HAL_Delay
 170              	.LVL13:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 15


 608:Src/main.c    ****     while (goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 0) < 100){
 171              		.loc 1 608 0
 172 0016 0023     		movs	r3, #0
 173 0018 0393     		str	r3, [sp, #12]
 174 001a 0493     		str	r3, [sp, #16]
 175 001c 0593     		str	r3, [sp, #20]
 176 001e 0693     		str	r3, [sp, #24]
 177 0020 0793     		str	r3, [sp, #28]
 609:Src/main.c    ****         sprintf(msg, "GOERT %d\n", (int) goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / siz
 178              		.loc 1 609 0
 179 0022 17E0     		b	.L14
 180              	.L15:
 610:Src/main.c    ****         print(msg, 0);
 181              		.loc 1 610 0
 182 0024 0024     		movs	r4, #0
 183 0026 0094     		str	r4, [sp]
 184 0028 2348     		ldr	r0, .L18+8
 185 002a 45F6B261 		movw	r1, #24242
 186 002e 4FF47A72 		mov	r2, #1000
 187 0032 4FF40063 		mov	r3, #2048
 188 0036 FFF7FEFF 		bl	goertzel
 189              	.LVL14:
 190 003a 51EC100B 		fmrrd	r0, r1, d0
 191 003e FFF7FEFF 		bl	__aeabi_d2iz
 192              	.LVL15:
 193 0042 0246     		mov	r2, r0
 194 0044 03A8     		add	r0, sp, #12
 195 0046 1D49     		ldr	r1, .L18+12
 196 0048 FFF7FEFF 		bl	sprintf
 197              	.LVL16:
 611:Src/main.c    ****     }
 198              		.loc 1 611 0
 199 004c 03A8     		add	r0, sp, #12
 200 004e 2146     		mov	r1, r4
 201 0050 FFF7FEFF 		bl	print
 202              	.LVL17:
 203              	.L14:
 609:Src/main.c    ****         sprintf(msg, "GOERT %d\n", (int) goertzel(adc_values, 24242, 1000, sizeof(dma_buffer) / siz
 204              		.loc 1 609 0
 205 0054 0023     		movs	r3, #0
 206 0056 0093     		str	r3, [sp]
 207 0058 1748     		ldr	r0, .L18+8
 208 005a 45F6B261 		movw	r1, #24242
 209 005e 4FF47A72 		mov	r2, #1000
 210 0062 4FF40063 		mov	r3, #2048
 211 0066 FFF7FEFF 		bl	goertzel
 212              	.LVL18:
 213 006a 51EC100B 		fmrrd	r0, r1, d0
 214 006e 0022     		movs	r2, #0
 215 0070 134B     		ldr	r3, .L18+16
 216 0072 FFF7FEFF 		bl	__aeabi_dcmplt
 217              	.LVL19:
 218 0076 0028     		cmp	r0, #0
 219 0078 D4D1     		bne	.L15
 220              	.L16:
 613:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 221              		.loc 1 613 0 discriminator 1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 16


 222 007a 0023     		movs	r3, #0
 223 007c 0093     		str	r3, [sp]
 224 007e 0E48     		ldr	r0, .L18+8
 225 0080 45F6B261 		movw	r1, #24242
 226 0084 4FF47A72 		mov	r2, #1000
 227 0088 4FF40063 		mov	r3, #2048
 228 008c FFF7FEFF 		bl	goertzel
 229              	.LVL20:
 230 0090 51EC100B 		fmrrd	r0, r1, d0
 231 0094 0022     		movs	r2, #0
 232 0096 0A4B     		ldr	r3, .L18+16
 233 0098 FFF7FEFF 		bl	__aeabi_dcmpgt
 234              	.LVL21:
 235 009c 0028     		cmp	r0, #0
 236 009e ECD1     		bne	.L16
 614:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 237              		.loc 1 614 0
 238 00a0 0348     		ldr	r0, .L18
 239 00a2 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 240              	.LVL22:
 615:Src/main.c    **** }
 241              		.loc 1 615 0
 242 00a6 0022     		movs	r2, #0
 243 00a8 064B     		ldr	r3, .L18+20
 244 00aa 1A70     		strb	r2, [r3]
 616:Src/main.c    **** 
 245              		.loc 1 616 0
 246 00ac 08B0     		add	sp, sp, #32
 247              	.LCFI5:
 248              		.cfi_def_cfa_offset 8
 249              		@ sp needed
 250 00ae 10BD     		pop	{r4, pc}
 251              	.L19:
 252              		.align	2
 253              	.L18:
 254 00b0 00000000 		.word	hadc1
 255 00b4 00000000 		.word	dma_buffer
 256 00b8 00000000 		.word	adc_values
 257 00bc 00000000 		.word	.LC0
 258 00c0 00005940 		.word	1079574528
 259 00c4 00000000 		.word	IR_INT_STATE
 260              		.cfi_endproc
 261              	.LFE132:
 263              		.section	.text.menu,"ax",%progbits
 264              		.align	2
 265              		.global	menu
 266              		.thumb
 267              		.thumb_func
 269              	menu:
 270              	.LFB134:
 633:Src/main.c    **** }
 634:Src/main.c    **** 
 635:Src/main.c    **** PID_t menu()
 636:Src/main.c    **** {
 271              		.loc 1 636 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 17


 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275              	.LVL23:
 276 0000 30B5     		push	{r4, r5, lr}
 277              	.LCFI6:
 278              		.cfi_def_cfa_offset 12
 279              		.cfi_offset 4, -12
 280              		.cfi_offset 5, -8
 281              		.cfi_offset 14, -4
 282 0002 8BB0     		sub	sp, sp, #44
 283              	.LCFI7:
 284              		.cfi_def_cfa_offset 56
 285 0004 0546     		mov	r5, r0
 637:Src/main.c    ****     print("Starting\n", 0);
 286              		.loc 1 637 0
 287 0006 2548     		ldr	r0, .L26
 288              	.LVL24:
 289 0008 0021     		movs	r1, #0
 290 000a FFF7FEFF 		bl	print
 291              	.LVL25:
 638:Src/main.c    ****     char msg[20] = "";
 292              		.loc 1 638 0
 293 000e 0024     		movs	r4, #0
 294 0010 0594     		str	r4, [sp, #20]
 295 0012 0694     		str	r4, [sp, #24]
 296 0014 0794     		str	r4, [sp, #28]
 297 0016 0894     		str	r4, [sp, #32]
 298 0018 0994     		str	r4, [sp, #36]
 299              	.LVL26:
 639:Src/main.c    ****     int pid_select = 0;
 640:Src/main.c    ****     uint32_t values[2] = {0, 0};
 300              		.loc 1 640 0
 301 001a 0394     		str	r4, [sp, #12]
 302 001c 0494     		str	r4, [sp, #16]
 303              	.LVL27:
 304              	.L24:
 641:Src/main.c    ****     while (1)
 642:Src/main.c    ****     {
 643:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 305              		.loc 1 643 0
 306 001e 2048     		ldr	r0, .L26+4
 307 0020 4FF40051 		mov	r1, #8192
 308 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 309              	.LVL28:
 310 0028 48BB     		cbnz	r0, .L21
 644:Src/main.c    ****         {
 645:Src/main.c    ****             sprintf(msg, "%lu\n", values[pid_select]);
 311              		.loc 1 645 0
 312 002a 05A8     		add	r0, sp, #20
 313 002c 1D49     		ldr	r1, .L26+8
 314 002e 0AAB     		add	r3, sp, #40
 315 0030 03EB8403 		add	r3, r3, r4, lsl #2
 316 0034 53F81C2C 		ldr	r2, [r3, #-28]
 317 0038 FFF7FEFF 		bl	sprintf
 318              	.LVL29:
 646:Src/main.c    ****             print(msg, 0);
 319              		.loc 1 646 0
 320 003c 05A8     		add	r0, sp, #20
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 18


 321 003e 0021     		movs	r1, #0
 322 0040 FFF7FEFF 		bl	print
 323              	.LVL30:
 647:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 324              		.loc 1 647 0
 325 0044 13E0     		b	.L22
 326              	.L23:
 648:Src/main.c    ****             {
 649:Src/main.c    ****                 values[pid_select]++;
 327              		.loc 1 649 0
 328 0046 0AAB     		add	r3, sp, #40
 329 0048 03EB8403 		add	r3, r3, r4, lsl #2
 330 004c 53F81C2C 		ldr	r2, [r3, #-28]
 331 0050 0132     		adds	r2, r2, #1
 332 0052 43F81C2C 		str	r2, [r3, #-28]
 650:Src/main.c    ****                 sprintf(msg, "%lu\n", values[pid_select]);
 333              		.loc 1 650 0
 334 0056 05A8     		add	r0, sp, #20
 335 0058 1249     		ldr	r1, .L26+8
 336 005a FFF7FEFF 		bl	sprintf
 337              	.LVL31:
 651:Src/main.c    ****                 print(msg, 0);
 338              		.loc 1 651 0
 339 005e 05A8     		add	r0, sp, #20
 340 0060 0021     		movs	r1, #0
 341 0062 FFF7FEFF 		bl	print
 342              	.LVL32:
 652:Src/main.c    ****                 HAL_Delay(500);
 343              		.loc 1 652 0
 344 0066 4FF4FA70 		mov	r0, #500
 345 006a FFF7FEFF 		bl	HAL_Delay
 346              	.LVL33:
 347              	.L22:
 647:Src/main.c    ****             {
 348              		.loc 1 647 0
 349 006e 0C48     		ldr	r0, .L26+4
 350 0070 4FF40051 		mov	r1, #8192
 351 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 352              	.LVL34:
 353 0078 0028     		cmp	r0, #0
 354 007a E4D0     		beq	.L23
 653:Src/main.c    ****             }
 654:Src/main.c    ****             ++pid_select;
 355              		.loc 1 654 0
 356 007c 0134     		adds	r4, r4, #1
 357              	.LVL35:
 358              	.L21:
 655:Src/main.c    ****         }
 656:Src/main.c    ****         if (pid_select == 2)
 359              		.loc 1 656 0
 360 007e 022C     		cmp	r4, #2
 361 0080 CDD1     		bne	.L24
 657:Src/main.c    ****             break;
 658:Src/main.c    ****     }
 659:Src/main.c    ****     return pid_Init(values[0], values[1], 1, 1, 1);
 362              		.loc 1 659 0
 363 0082 BDF80C10 		ldrh	r1, [sp, #12]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 19


 364 0086 BDF81020 		ldrh	r2, [sp, #16]
 365 008a 0123     		movs	r3, #1
 366 008c 0093     		str	r3, [sp]
 367 008e 0193     		str	r3, [sp, #4]
 368 0090 2846     		mov	r0, r5
 369 0092 FFF7FEFF 		bl	pid_Init
 370              	.LVL36:
 660:Src/main.c    **** }
 371              		.loc 1 660 0
 372 0096 2846     		mov	r0, r5
 373 0098 0BB0     		add	sp, sp, #44
 374              	.LCFI8:
 375              		.cfi_def_cfa_offset 12
 376              		@ sp needed
 377 009a 30BD     		pop	{r4, r5, pc}
 378              	.LVL37:
 379              	.L27:
 380              		.align	2
 381              	.L26:
 382 009c 0C000000 		.word	.LC1
 383 00a0 00080240 		.word	1073874944
 384 00a4 18000000 		.word	.LC2
 385              		.cfi_endproc
 386              	.LFE134:
 388              		.section	.text.set_motor_speed,"ax",%progbits
 389              		.align	2
 390              		.global	set_motor_speed
 391              		.thumb
 392              		.thumb_func
 394              	set_motor_speed:
 395              	.LFB135:
 661:Src/main.c    **** 
 662:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 663:Src/main.c    **** {
 396              		.loc 1 663 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400              		@ link register save eliminated.
 401              	.LVL38:
 664:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 402              		.loc 1 664 0
 403 0000 0346     		mov	r3, r0
 404 0002 18B9     		cbnz	r0, .L29
 665:Src/main.c    ****     {
 666:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 405              		.loc 1 666 0
 406 0004 114A     		ldr	r2, .L33
 407 0006 1268     		ldr	r2, [r2]
 408 0008 9063     		str	r0, [r2, #56]
 409 000a 13E0     		b	.L30
 410              	.L29:
 667:Src/main.c    ****     }
 668:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 411              		.loc 1 668 0
 412 000c 0428     		cmp	r0, #4
 413 000e 04D1     		bne	.L31
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 20


 669:Src/main.c    ****     {
 670:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 414              		.loc 1 670 0
 415 0010 0E4A     		ldr	r2, .L33
 416 0012 1268     		ldr	r2, [r2]
 417 0014 0020     		movs	r0, #0
 418              	.LVL39:
 419 0016 5063     		str	r0, [r2, #52]
 420 0018 0CE0     		b	.L30
 421              	.LVL40:
 422              	.L31:
 671:Src/main.c    ****     }
 672:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 423              		.loc 1 672 0
 424 001a 0828     		cmp	r0, #8
 425 001c 04D1     		bne	.L32
 673:Src/main.c    ****     {
 674:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 426              		.loc 1 674 0
 427 001e 0B4A     		ldr	r2, .L33
 428 0020 1268     		ldr	r2, [r2]
 429 0022 0020     		movs	r0, #0
 430              	.LVL41:
 431 0024 1064     		str	r0, [r2, #64]
 432 0026 05E0     		b	.L30
 433              	.LVL42:
 434              	.L32:
 675:Src/main.c    ****     }
 676:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 435              		.loc 1 676 0
 436 0028 0C28     		cmp	r0, #12
 437 002a 03D1     		bne	.L30
 677:Src/main.c    ****     {
 678:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 438              		.loc 1 678 0
 439 002c 074A     		ldr	r2, .L33
 440 002e 1268     		ldr	r2, [r2]
 441 0030 0020     		movs	r0, #0
 442              	.LVL43:
 443 0032 D063     		str	r0, [r2, #60]
 444              	.L30:
 679:Src/main.c    ****     }
 680:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed > 1000 ? 1000 : speed);
 445              		.loc 1 680 0
 446 0034 054A     		ldr	r2, .L33
 447 0036 1268     		ldr	r2, [r2]
 448 0038 3432     		adds	r2, r2, #52
 449 003a 9B08     		lsrs	r3, r3, #2
 450              	.LVL44:
 451 003c B1F57A7F 		cmp	r1, #1000
 452 0040 28BF     		it	cs
 453 0042 4FF47A71 		movcs	r1, #1000
 454              	.LVL45:
 455 0046 42F82310 		str	r1, [r2, r3, lsl #2]
 456 004a 7047     		bx	lr
 457              	.L34:
 458              		.align	2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 21


 459              	.L33:
 460 004c 00000000 		.word	htim1
 461              		.cfi_endproc
 462              	.LFE135:
 464              		.global	__aeabi_f2d
 465              		.global	__aeabi_d2uiz
 466              		.section	.text.turn,"ax",%progbits
 467              		.align	2
 468              		.global	turn
 469              		.thumb
 470              		.thumb_func
 472              	turn:
 473              	.LFB129:
 492:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 474              		.loc 1 492 0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 24
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 479              	.LCFI9:
 480              		.cfi_def_cfa_offset 20
 481              		.cfi_offset 4, -20
 482              		.cfi_offset 5, -16
 483              		.cfi_offset 6, -12
 484              		.cfi_offset 7, -8
 485              		.cfi_offset 14, -4
 486 0002 2DED028B 		fstmfdd	sp!, {d8}
 487              	.LCFI10:
 488              		.cfi_def_cfa_offset 28
 489              		.cfi_offset 80, -28
 490              		.cfi_offset 81, -24
 491 0006 87B0     		sub	sp, sp, #28
 492              	.LCFI11:
 493              		.cfi_def_cfa_offset 56
 493:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 494              		.loc 1 493 0
 495 0008 5948     		ldr	r0, .L46+16
 496 000a 5A49     		ldr	r1, .L46+20
 497 000c 4FF40062 		mov	r2, #2048
 498 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 499              	.LVL46:
 495:Src/main.c    ****     float volts = calculate_heading(2 * adc_values[5]);
 500              		.loc 1 495 0
 501 0014 6420     		movs	r0, #100
 502 0016 FFF7FEFF 		bl	HAL_Delay
 503              	.LVL47:
 496:Src/main.c    ****     //double r = atan(1.57*tan()/())
 504              		.loc 1 496 0
 505 001a 574E     		ldr	r6, .L46+24
 506 001c 7069     		ldr	r0, [r6, #20]
 507 001e 4000     		lsls	r0, r0, #1
 508 0020 FFF7FEFF 		bl	calculate_heading
 509              	.LVL48:
 510 0024 B0EE408A 		fcpys	s16, s0
 511              	.LVL49:
 498:Src/main.c    ****     TIM4->CNT = 0;
 512              		.loc 1 498 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 22


 513 0028 F0EEC07A 		fabss	s15, s0
 514 002c 17EE900A 		fmrs	r0, s15
 515 0030 FFF7FEFF 		bl	__aeabi_f2d
 516              	.LVL50:
 517 0034 0022     		movs	r2, #0
 518 0036 514B     		ldr	r3, .L46+28
 519 0038 FFF7FEFF 		bl	__aeabi_dmul
 520              	.LVL51:
 521 003c FFF7FEFF 		bl	__aeabi_d2uiz
 522              	.LVL52:
 523 0040 85B2     		uxth	r5, r0
 524              	.LVL53:
 499:Src/main.c    ****     TIM5->CNT = 0;
 525              		.loc 1 499 0
 526 0042 0024     		movs	r4, #0
 527 0044 4E4B     		ldr	r3, .L46+32
 528 0046 5C62     		str	r4, [r3, #36]
 500:Src/main.c    **** 
 529              		.loc 1 500 0
 530 0048 03F58063 		add	r3, r3, #1024
 531 004c 5C62     		str	r4, [r3, #36]
 502:Src/main.c    ****     sprintf(msg, "TURN | cnts: %d\n", counts);
 532              		.loc 1 502 0
 533 004e 0194     		str	r4, [sp, #4]
 534 0050 0294     		str	r4, [sp, #8]
 535 0052 0394     		str	r4, [sp, #12]
 536 0054 0494     		str	r4, [sp, #16]
 537 0056 ADF81440 		strh	r4, [sp, #20]	@ movhi
 503:Src/main.c    ****     print(msg, 0);
 538              		.loc 1 503 0
 539 005a 01A8     		add	r0, sp, #4
 540 005c 4949     		ldr	r1, .L46+36
 541 005e 2A46     		mov	r2, r5
 542 0060 FFF7FEFF 		bl	sprintf
 543              	.LVL54:
 504:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 544              		.loc 1 504 0
 545 0064 01A8     		add	r0, sp, #4
 546 0066 2146     		mov	r1, r4
 547 0068 FFF7FEFF 		bl	print
 548              	.LVL55:
 505:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 549              		.loc 1 505 0
 550 006c BDEEC87A 		ftosizs	s14, s16
 551              	.LVL56:
 506:Src/main.c    ****     sprintf(msg, "TURN | vlts: %d.%d\n", pre_dec, post_dec);
 552              		.loc 1 506 0
 553 0070 F8EEC77A 		fsitos	s15, s14
 554 0074 78EE677A 		fsubs	s15, s16, s15
 555 0078 DFED436A 		flds	s13, .L46+40
 556 007c 67EEA67A 		fmuls	s15, s15, s13
 557              	.LVL57:
 507:Src/main.c    ****     print(msg, 2);
 558              		.loc 1 507 0
 559 0080 01A8     		add	r0, sp, #4
 560 0082 4249     		ldr	r1, .L46+44
 561 0084 17EE102A 		fmrs	r2, s14	@ int
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 23


 562 0088 FDEEE77A 		ftosizs	s15, s15
 563              	.LVL58:
 564 008c 17EE903A 		fmrs	r3, s15	@ int
 565 0090 FFF7FEFF 		bl	sprintf
 566              	.LVL59:
 508:Src/main.c    ****     sprintf(msg, "TURN | ADC_VAL: %d\n", 2 * adc_values[5]);
 567              		.loc 1 508 0
 568 0094 01A8     		add	r0, sp, #4
 569 0096 0221     		movs	r1, #2
 570 0098 FFF7FEFF 		bl	print
 571              	.LVL60:
 509:Src/main.c    ****     print(msg, 0);
 572              		.loc 1 509 0
 573 009c 7269     		ldr	r2, [r6, #20]
 574 009e 01A8     		add	r0, sp, #4
 575 00a0 3B49     		ldr	r1, .L46+48
 576 00a2 5200     		lsls	r2, r2, #1
 577 00a4 FFF7FEFF 		bl	sprintf
 578              	.LVL61:
 510:Src/main.c    **** 
 579              		.loc 1 510 0
 580 00a8 01A8     		add	r0, sp, #4
 581 00aa 2146     		mov	r1, r4
 582 00ac FFF7FEFF 		bl	print
 583              	.LVL62:
 512:Src/main.c    ****     {
 584              		.loc 1 512 0
 585 00b0 18EE100A 		fmrs	r0, s16
 586 00b4 FFF7FEFF 		bl	__aeabi_f2d
 587              	.LVL63:
 588 00b8 0646     		mov	r6, r0
 589 00ba 0F46     		mov	r7, r1
 590 00bc 28A3     		adr	r3, .L46
 591 00be D3E90023 		ldrd	r2, [r3]
 592 00c2 FFF7FEFF 		bl	__aeabi_dcmplt
 593              	.LVL64:
 594 00c6 E8B1     		cbz	r0, .L44
 514:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 595              		.loc 1 514 0
 596 00c8 2046     		mov	r0, r4
 597 00ca 2146     		mov	r1, r4
 598 00cc FFF7FEFF 		bl	set_motor_speed
 599              	.LVL65:
 515:Src/main.c    ****         while (TIM5->CNT < counts)
 600              		.loc 1 515 0
 601 00d0 0820     		movs	r0, #8
 602 00d2 304B     		ldr	r3, .L46+52
 603 00d4 1988     		ldrh	r1, [r3]
 604 00d6 FFF7FEFF 		bl	set_motor_speed
 605              	.LVL66:
 606              	.L38:
 516:Src/main.c    ****         {
 607              		.loc 1 516 0 discriminator 1
 608 00da 2F4B     		ldr	r3, .L46+56
 609 00dc 5B6A     		ldr	r3, [r3, #36]
 610 00de AB42     		cmp	r3, r5
 611 00e0 FBD3     		bcc	.L38
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 24


 521:Src/main.c    ****         print(msg, 4);
 612              		.loc 1 521 0
 613 00e2 2D4C     		ldr	r4, .L46+56
 614 00e4 626A     		ldr	r2, [r4, #36]
 615 00e6 01A8     		add	r0, sp, #4
 616 00e8 2C49     		ldr	r1, .L46+60
 617 00ea FFF7FEFF 		bl	sprintf
 618              	.LVL67:
 522:Src/main.c    ****         TIM5->CNT = 0;
 619              		.loc 1 522 0
 620 00ee 01A8     		add	r0, sp, #4
 621 00f0 0421     		movs	r1, #4
 622 00f2 FFF7FEFF 		bl	print
 623              	.LVL68:
 523:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 624              		.loc 1 523 0
 625 00f6 0020     		movs	r0, #0
 626 00f8 6062     		str	r0, [r4, #36]
 524:Src/main.c    ****     }
 627              		.loc 1 524 0
 628 00fa 294B     		ldr	r3, .L46+64
 629 00fc 1988     		ldrh	r1, [r3]
 630 00fe FFF7FEFF 		bl	set_motor_speed
 631              	.LVL69:
 632 0102 25E0     		b	.L39
 633              	.L44:
 526:Src/main.c    ****     {
 634              		.loc 1 526 0
 635 0104 3046     		mov	r0, r6
 636 0106 3946     		mov	r1, r7
 637 0108 17A3     		adr	r3, .L46+8
 638 010a D3E90023 		ldrd	r2, [r3]
 639 010e FFF7FEFF 		bl	__aeabi_dcmpgt
 640              	.LVL70:
 641 0112 E8B1     		cbz	r0, .L39
 528:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 642              		.loc 1 528 0
 643 0114 0020     		movs	r0, #0
 644 0116 224B     		ldr	r3, .L46+64
 645 0118 1988     		ldrh	r1, [r3]
 646 011a FFF7FEFF 		bl	set_motor_speed
 647              	.LVL71:
 529:Src/main.c    ****         while (TIM4->CNT < counts)
 648              		.loc 1 529 0
 649 011e 0820     		movs	r0, #8
 650 0120 0021     		movs	r1, #0
 651 0122 FFF7FEFF 		bl	set_motor_speed
 652              	.LVL72:
 653              	.L41:
 530:Src/main.c    ****         {
 654              		.loc 1 530 0 discriminator 1
 655 0126 164B     		ldr	r3, .L46+32
 656 0128 5B6A     		ldr	r3, [r3, #36]
 657 012a AB42     		cmp	r3, r5
 658 012c FBD3     		bcc	.L41
 535:Src/main.c    ****         print(msg, 4);
 659              		.loc 1 535 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 25


 660 012e 144C     		ldr	r4, .L46+32
 661 0130 626A     		ldr	r2, [r4, #36]
 662 0132 01A8     		add	r0, sp, #4
 663 0134 1B49     		ldr	r1, .L46+68
 664 0136 FFF7FEFF 		bl	sprintf
 665              	.LVL73:
 536:Src/main.c    ****         TIM4->CNT = 0;
 666              		.loc 1 536 0
 667 013a 01A8     		add	r0, sp, #4
 668 013c 0421     		movs	r1, #4
 669 013e FFF7FEFF 		bl	print
 670              	.LVL74:
 537:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 671              		.loc 1 537 0
 672 0142 0023     		movs	r3, #0
 673 0144 6362     		str	r3, [r4, #36]
 538:Src/main.c    ****     }
 674              		.loc 1 538 0
 675 0146 0820     		movs	r0, #8
 676 0148 124B     		ldr	r3, .L46+52
 677 014a 1988     		ldrh	r1, [r3]
 678 014c FFF7FEFF 		bl	set_motor_speed
 679              	.LVL75:
 680              	.L39:
 540:Src/main.c    **** }
 681              		.loc 1 540 0
 682 0150 0748     		ldr	r0, .L46+16
 683 0152 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 684              	.LVL76:
 541:Src/main.c    **** 
 685              		.loc 1 541 0
 686 0156 07B0     		add	sp, sp, #28
 687              	.LCFI12:
 688              		.cfi_def_cfa_offset 28
 689              		@ sp needed
 690 0158 BDEC028B 		fldmfdd	sp!, {d8}
 691              	.LCFI13:
 692              		.cfi_restore 80
 693              		.cfi_restore 81
 694              		.cfi_def_cfa_offset 20
 695              	.LVL77:
 696 015c F0BD     		pop	{r4, r5, r6, r7, pc}
 697              	.LVL78:
 698              	.L47:
 699 015e 00BF     		.align	3
 700              	.L46:
 701 0160 7B14AE47 		.word	1202590843
 702 0164 E17AA4BF 		.word	-1079739679
 703 0168 7B14AE47 		.word	1202590843
 704 016c E17AA43F 		.word	1067743969
 705 0170 00000000 		.word	hadc1
 706 0174 00000000 		.word	dma_buffer
 707 0178 00000000 		.word	adc_values
 708 017c 00406040 		.word	1080049664
 709 0180 00080040 		.word	1073743872
 710 0184 20000000 		.word	.LC3
 711 0188 00007A44 		.word	1148846080
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 26


 712 018c 34000000 		.word	.LC4
 713 0190 48000000 		.word	.LC5
 714 0194 00000000 		.word	.LANCHOR0
 715 0198 000C0040 		.word	1073744896
 716 019c 5C000000 		.word	.LC6
 717 01a0 00000000 		.word	.LANCHOR1
 718 01a4 74000000 		.word	.LC7
 719              		.cfi_endproc
 720              	.LFE129:
 722              		.global	__aeabi_i2d
 723              		.global	__aeabi_dadd
 724              		.section	.text.turn_deg,"ax",%progbits
 725              		.align	2
 726              		.global	turn_deg
 727              		.thumb
 728              		.thumb_func
 730              	turn_deg:
 731              	.LFB130:
 548:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 732              		.loc 1 548 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 56
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              	.LVL79:
 737 0000 70B5     		push	{r4, r5, r6, lr}
 738              	.LCFI14:
 739              		.cfi_def_cfa_offset 16
 740              		.cfi_offset 4, -16
 741              		.cfi_offset 5, -12
 742              		.cfi_offset 6, -8
 743              		.cfi_offset 14, -4
 744 0002 8EB0     		sub	sp, sp, #56
 745              	.LCFI15:
 746              		.cfi_def_cfa_offset 72
 747 0004 0646     		mov	r6, r0
 549:Src/main.c    ****     int16_t counts = 50.0 / 90.0 * (deg - 90) + 50;
 748              		.loc 1 549 0
 749 0006 4248     		ldr	r0, .L55+8
 750              	.LVL80:
 751 0008 4249     		ldr	r1, .L55+12
 752 000a 4FF40062 		mov	r2, #2048
 753 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 754              	.LVL81:
 550:Src/main.c    ****     if (counts < 0) counts = -counts;
 755              		.loc 1 550 0
 756 0012 A6F15A00 		sub	r0, r6, #90
 757 0016 FFF7FEFF 		bl	__aeabi_i2d
 758              	.LVL82:
 759 001a 3BA3     		adr	r3, .L55
 760 001c D3E90023 		ldrd	r2, [r3]
 761 0020 FFF7FEFF 		bl	__aeabi_dmul
 762              	.LVL83:
 763 0024 0022     		movs	r2, #0
 764 0026 3C4B     		ldr	r3, .L55+16
 765 0028 FFF7FEFF 		bl	__aeabi_dadd
 766              	.LVL84:
 767 002c FFF7FEFF 		bl	__aeabi_d2iz
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 27


 768              	.LVL85:
 769 0030 85B2     		uxth	r5, r0
 770              	.LVL86:
 551:Src/main.c    ****     TIM4->CNT = 0;
 771              		.loc 1 551 0
 772 0032 15F4004F 		tst	r5, #32768
 773 0036 01D0     		beq	.L49
 551:Src/main.c    ****     TIM4->CNT = 0;
 774              		.loc 1 551 0 is_stmt 0 discriminator 1
 775 0038 6D42     		negs	r5, r5
 776              	.LVL87:
 777 003a ADB2     		uxth	r5, r5
 778              	.LVL88:
 779              	.L49:
 552:Src/main.c    ****     TIM5->CNT = 0;
 780              		.loc 1 552 0 is_stmt 1
 781 003c 0024     		movs	r4, #0
 782 003e 374B     		ldr	r3, .L55+20
 783 0040 5C62     		str	r4, [r3, #36]
 553:Src/main.c    **** 
 784              		.loc 1 553 0
 785 0042 03F58063 		add	r3, r3, #1024
 786 0046 5C62     		str	r4, [r3, #36]
 555:Src/main.c    ****     sprintf(msg, "TURN_DEG | turn count: %d\n", counts);
 787              		.loc 1 555 0
 788 0048 0194     		str	r4, [sp, #4]
 789 004a 0294     		str	r4, [sp, #8]
 790 004c 0394     		str	r4, [sp, #12]
 791 004e 0494     		str	r4, [sp, #16]
 792 0050 0594     		str	r4, [sp, #20]
 793 0052 0694     		str	r4, [sp, #24]
 794 0054 0794     		str	r4, [sp, #28]
 795 0056 0894     		str	r4, [sp, #32]
 796 0058 0994     		str	r4, [sp, #36]
 797 005a 0A94     		str	r4, [sp, #40]
 798 005c 0B94     		str	r4, [sp, #44]
 799 005e 0C94     		str	r4, [sp, #48]
 800 0060 ADF83440 		strh	r4, [sp, #52]	@ movhi
 556:Src/main.c    ****     print(msg, 0);
 801              		.loc 1 556 0
 802 0064 01A8     		add	r0, sp, #4
 803 0066 2E49     		ldr	r1, .L55+24
 804 0068 2AB2     		sxth	r2, r5
 805 006a FFF7FEFF 		bl	sprintf
 806              	.LVL89:
 557:Src/main.c    **** 
 807              		.loc 1 557 0
 808 006e 01A8     		add	r0, sp, #4
 809 0070 2146     		mov	r1, r4
 810 0072 FFF7FEFF 		bl	print
 811              	.LVL90:
 559:Src/main.c    ****     {
 812              		.loc 1 559 0
 813 0076 A642     		cmp	r6, r4
 814 0078 1ADD     		ble	.L50
 561:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 815              		.loc 1 561 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 28


 816 007a 2046     		mov	r0, r4
 817 007c 294B     		ldr	r3, .L55+28
 818 007e 1988     		ldrh	r1, [r3]
 819 0080 FFF7FEFF 		bl	set_motor_speed
 820              	.LVL91:
 562:Src/main.c    ****         while (TIM4->CNT < counts)
 821              		.loc 1 562 0
 822 0084 0820     		movs	r0, #8
 823 0086 2146     		mov	r1, r4
 824 0088 FFF7FEFF 		bl	set_motor_speed
 825              	.LVL92:
 826              	.L51:
 563:Src/main.c    ****         {
 827              		.loc 1 563 0 discriminator 1
 828 008c 234B     		ldr	r3, .L55+20
 829 008e 5A6A     		ldr	r2, [r3, #36]
 830 0090 2BB2     		sxth	r3, r5
 831 0092 9A42     		cmp	r2, r3
 832 0094 FAD3     		bcc	.L51
 568:Src/main.c    ****         print(msg, 4);
 833              		.loc 1 568 0
 834 0096 244C     		ldr	r4, .L55+32
 835 0098 626A     		ldr	r2, [r4, #36]
 836 009a 01A8     		add	r0, sp, #4
 837 009c 2349     		ldr	r1, .L55+36
 838 009e FFF7FEFF 		bl	sprintf
 839              	.LVL93:
 569:Src/main.c    ****         TIM5->CNT = 0;
 840              		.loc 1 569 0
 841 00a2 01A8     		add	r0, sp, #4
 842 00a4 0421     		movs	r1, #4
 843 00a6 FFF7FEFF 		bl	print
 844              	.LVL94:
 570:Src/main.c    ****     }
 845              		.loc 1 570 0
 846 00aa 0023     		movs	r3, #0
 847 00ac 6362     		str	r3, [r4, #36]
 848 00ae 1BE0     		b	.L52
 849              	.L50:
 572:Src/main.c    ****     {
 850              		.loc 1 572 0
 851 00b0 002E     		cmp	r6, #0
 852 00b2 19DA     		bge	.L52
 574:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 853              		.loc 1 574 0
 854 00b4 0020     		movs	r0, #0
 855 00b6 0146     		mov	r1, r0
 856 00b8 FFF7FEFF 		bl	set_motor_speed
 857              	.LVL95:
 575:Src/main.c    ****         while (TIM5->CNT < counts)
 858              		.loc 1 575 0
 859 00bc 0820     		movs	r0, #8
 860 00be 1C4B     		ldr	r3, .L55+40
 861 00c0 1988     		ldrh	r1, [r3]
 862 00c2 FFF7FEFF 		bl	set_motor_speed
 863              	.LVL96:
 864              	.L53:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 29


 576:Src/main.c    ****         {
 865              		.loc 1 576 0 discriminator 1
 866 00c6 184B     		ldr	r3, .L55+32
 867 00c8 5A6A     		ldr	r2, [r3, #36]
 868 00ca 2BB2     		sxth	r3, r5
 869 00cc 9A42     		cmp	r2, r3
 870 00ce FAD3     		bcc	.L53
 581:Src/main.c    ****         print(msg, 4);
 871              		.loc 1 581 0
 872 00d0 124C     		ldr	r4, .L55+20
 873 00d2 626A     		ldr	r2, [r4, #36]
 874 00d4 01A8     		add	r0, sp, #4
 875 00d6 1749     		ldr	r1, .L55+44
 876 00d8 FFF7FEFF 		bl	sprintf
 877              	.LVL97:
 582:Src/main.c    ****         TIM4->CNT = 0;
 878              		.loc 1 582 0
 879 00dc 01A8     		add	r0, sp, #4
 880 00de 0421     		movs	r1, #4
 881 00e0 FFF7FEFF 		bl	print
 882              	.LVL98:
 583:Src/main.c    ****     }
 883              		.loc 1 583 0
 884 00e4 0023     		movs	r3, #0
 885 00e6 6362     		str	r3, [r4, #36]
 886              	.L52:
 585:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 887              		.loc 1 585 0
 888 00e8 0020     		movs	r0, #0
 889 00ea 0146     		mov	r1, r0
 890 00ec FFF7FEFF 		bl	set_motor_speed
 891              	.LVL99:
 586:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 892              		.loc 1 586 0
 893 00f0 0820     		movs	r0, #8
 894 00f2 0021     		movs	r1, #0
 895 00f4 FFF7FEFF 		bl	set_motor_speed
 896              	.LVL100:
 587:Src/main.c    **** }
 897              		.loc 1 587 0
 898 00f8 0548     		ldr	r0, .L55+8
 899 00fa FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 900              	.LVL101:
 588:Src/main.c    **** 
 901              		.loc 1 588 0
 902 00fe 0EB0     		add	sp, sp, #56
 903              	.LCFI16:
 904              		.cfi_def_cfa_offset 16
 905              		@ sp needed
 906 0100 70BD     		pop	{r4, r5, r6, pc}
 907              	.LVL102:
 908              	.L56:
 909 0102 00BFAFF3 		.align	3
 909      0080
 910              	.L55:
 911 0108 721CC771 		.word	1908874354
 912 010c 1CC7E13F 		.word	1071761180
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 30


 913 0110 00000000 		.word	hadc1
 914 0114 00000000 		.word	dma_buffer
 915 0118 00004940 		.word	1078525952
 916 011c 00080040 		.word	1073743872
 917 0120 8C000000 		.word	.LC8
 918 0124 00000000 		.word	.LANCHOR1
 919 0128 000C0040 		.word	1073744896
 920 012c A8000000 		.word	.LC9
 921 0130 00000000 		.word	.LANCHOR0
 922 0134 C4000000 		.word	.LC10
 923              		.cfi_endproc
 924              	.LFE130:
 926              		.section	.text.encoder_pid,"ax",%progbits
 927              		.align	2
 928              		.global	encoder_pid
 929              		.thumb
 930              		.thumb_func
 932              	encoder_pid:
 933              	.LFB136:
 681:Src/main.c    **** }
 682:Src/main.c    **** 
 683:Src/main.c    **** void encoder_pid(PID_t *enc_pid)
 684:Src/main.c    **** {
 934              		.loc 1 684 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              	.LVL103:
 939 0000 38B5     		push	{r3, r4, r5, lr}
 940              	.LCFI17:
 941              		.cfi_def_cfa_offset 16
 942              		.cfi_offset 3, -16
 943              		.cfi_offset 4, -12
 944              		.cfi_offset 5, -8
 945              		.cfi_offset 14, -4
 685:Src/main.c    ****     /* Get error */
 686:Src/main.c    ****     uint32_t lcnt = TIM4->CNT;
 946              		.loc 1 686 0
 947 0002 0E4B     		ldr	r3, .L61
 948 0004 5C6A     		ldr	r4, [r3, #36]
 949              	.LVL104:
 687:Src/main.c    ****     uint32_t rcnt = TIM5->CNT;
 950              		.loc 1 687 0
 951 0006 03F58063 		add	r3, r3, #1024
 952 000a 5D6A     		ldr	r5, [r3, #36]
 953              	.LVL105:
 688:Src/main.c    ****     enc_pid->err = lcnt - rcnt;
 954              		.loc 1 688 0
 955 000c 631B     		subs	r3, r4, r5
 956 000e 0361     		str	r3, [r0, #16]
 689:Src/main.c    **** 
 690:Src/main.c    ****     /* Get gain */
 691:Src/main.c    ****     // Gain <0 for ride side faster
 692:Src/main.c    ****     int gain = pid_GetGain(enc_pid);
 957              		.loc 1 692 0
 958 0010 FFF7FEFF 		bl	pid_GetGain
 959              	.LVL106:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 31


 693:Src/main.c    **** 
 694:Src/main.c    ****     /* Set Motor Speeds*/
 695:Src/main.c    ****     uint32_t lspeed = LEFT_SPEED;
 696:Src/main.c    ****     uint32_t rspeed = RIGHT_SPEED;
 697:Src/main.c    ****     if (gain < 0)
 698:Src/main.c    ****     {
 699:Src/main.c    ****         lspeed -= gain;
 700:Src/main.c    ****     }
 701:Src/main.c    ****     else if (gain > 0)
 702:Src/main.c    ****     {
 703:Src/main.c    ****         rspeed += gain;
 704:Src/main.c    ****     }
 705:Src/main.c    **** 
 706:Src/main.c    ****     // char msg[18] = "";
 707:Src/main.c    ****     // sprintf(msg, "LS: %lu", lspeed);
 708:Src/main.c    ****     // print(msg, 0);
 709:Src/main.c    ****     // sprintf(msg, "RS: %lu", rspeed);
 710:Src/main.c    ****     // print(msg, 1);
 711:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_1, lspeed);
 712:Src/main.c    ****     // set_motor_speed(TIM_CHANNEL_3, rspeed);
 713:Src/main.c    **** 
 714:Src/main.c    ****     /* Prevent weird overflow shit */
 715:Src/main.c    ****     if (lcnt > 60000 || rcnt > 60000)
 960              		.loc 1 715 0
 961 0014 4EF66023 		movw	r3, #60000
 962 0018 9C42     		cmp	r4, r3
 963 001a 01D8     		bhi	.L58
 964              		.loc 1 715 0 is_stmt 0 discriminator 1
 965 001c 9D42     		cmp	r5, r3
 966 001e 0CD9     		bls	.L57
 967              	.L58:
 716:Src/main.c    ****     {
 717:Src/main.c    ****         TIM4->CNT -= 50000;
 968              		.loc 1 717 0 is_stmt 1
 969 0020 064A     		ldr	r2, .L61
 970 0022 536A     		ldr	r3, [r2, #36]
 971 0024 A3F54343 		sub	r3, r3, #49920
 972 0028 503B     		subs	r3, r3, #80
 973 002a 5362     		str	r3, [r2, #36]
 974              	.LVL107:
 718:Src/main.c    ****         TIM5->CNT -= 50000;
 975              		.loc 1 718 0
 976 002c 02F58062 		add	r2, r2, #1024
 977 0030 536A     		ldr	r3, [r2, #36]
 978 0032 A3F54343 		sub	r3, r3, #49920
 979 0036 503B     		subs	r3, r3, #80
 980 0038 5362     		str	r3, [r2, #36]
 981              	.L57:
 982 003a 38BD     		pop	{r3, r4, r5, pc}
 983              	.LVL108:
 984              	.L62:
 985              		.align	2
 986              	.L61:
 987 003c 00080040 		.word	1073743872
 988              		.cfi_endproc
 989              	.LFE136:
 991              		.section	.text.drive_straight,"ax",%progbits
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 32


 992              		.align	2
 993              		.global	drive_straight
 994              		.thumb
 995              		.thumb_func
 997              	drive_straight:
 998              	.LFB128:
 481:Src/main.c    ****     encoder_pid(enc_pid);
 999              		.loc 1 481 0
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 0
 1002              		@ frame_needed = 0, uses_anonymous_args = 0
 1003              	.LVL109:
 1004 0000 08B5     		push	{r3, lr}
 1005              	.LCFI18:
 1006              		.cfi_def_cfa_offset 8
 1007              		.cfi_offset 3, -8
 1008              		.cfi_offset 14, -4
 482:Src/main.c    ****     HAL_Delay(10);
 1009              		.loc 1 482 0
 1010 0002 FFF7FEFF 		bl	encoder_pid
 1011              	.LVL110:
 483:Src/main.c    ****     
 1012              		.loc 1 483 0
 1013 0006 0A20     		movs	r0, #10
 1014 0008 FFF7FEFF 		bl	HAL_Delay
 1015              	.LVL111:
 1016 000c 08BD     		pop	{r3, pc}
 1017              		.cfi_endproc
 1018              	.LFE128:
 1020 000e 00BF     		.section	.text.square_edge,"ax",%progbits
 1021              		.align	2
 1022              		.global	square_edge
 1023              		.thumb
 1024              		.thumb_func
 1026              	square_edge:
 1027              	.LFB126:
 412:Src/main.c    ****     while (1)
 1028              		.loc 1 412 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 56
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032              	.LVL112:
 1033 0000 70B5     		push	{r4, r5, r6, lr}
 1034              	.LCFI19:
 1035              		.cfi_def_cfa_offset 16
 1036              		.cfi_offset 4, -16
 1037              		.cfi_offset 5, -12
 1038              		.cfi_offset 6, -8
 1039              		.cfi_offset 14, -4
 1040 0002 8EB0     		sub	sp, sp, #56
 1041              	.LCFI20:
 1042              		.cfi_def_cfa_offset 72
 1043 0004 0646     		mov	r6, r0
 1044              	.LVL113:
 1045              	.L71:
 1046              	.LBB2:
 415:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | EL: %d\n", HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 33


 1047              		.loc 1 415 0
 1048 0006 0024     		movs	r4, #0
 1049 0008 0194     		str	r4, [sp, #4]
 1050 000a 0294     		str	r4, [sp, #8]
 1051 000c 0394     		str	r4, [sp, #12]
 1052 000e 0494     		str	r4, [sp, #16]
 1053 0010 0594     		str	r4, [sp, #20]
 1054 0012 0694     		str	r4, [sp, #24]
 1055 0014 0794     		str	r4, [sp, #28]
 1056 0016 0894     		str	r4, [sp, #32]
 1057 0018 0994     		str	r4, [sp, #36]
 1058 001a 0A94     		str	r4, [sp, #40]
 1059 001c 0B94     		str	r4, [sp, #44]
 1060 001e 0C94     		str	r4, [sp, #48]
 1061 0020 ADF83440 		strh	r4, [sp, #52]	@ movhi
 416:Src/main.c    ****         print(msg, 0);
 1062              		.loc 1 416 0
 1063 0024 294D     		ldr	r5, .L73
 1064 0026 2846     		mov	r0, r5
 1065 0028 0421     		movs	r1, #4
 1066 002a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1067              	.LVL114:
 1068 002e 021B     		subs	r2, r0, r4
 1069 0030 18BF     		it	ne
 1070 0032 0122     		movne	r2, #1
 1071 0034 01A8     		add	r0, sp, #4
 1072 0036 2649     		ldr	r1, .L73+4
 1073 0038 FFF7FEFF 		bl	sprintf
 1074              	.LVL115:
 417:Src/main.c    ****         sprintf(msg, "SQUARE_EDGE | ER: %d\n", HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin)
 1075              		.loc 1 417 0
 1076 003c 01A8     		add	r0, sp, #4
 1077 003e 2146     		mov	r1, r4
 1078 0040 FFF7FEFF 		bl	print
 1079              	.LVL116:
 418:Src/main.c    ****         print(msg, 0);
 1080              		.loc 1 418 0
 1081 0044 2846     		mov	r0, r5
 1082 0046 0421     		movs	r1, #4
 1083 0048 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1084              	.LVL117:
 1085 004c 021B     		subs	r2, r0, r4
 1086 004e 18BF     		it	ne
 1087 0050 0122     		movne	r2, #1
 1088 0052 01A8     		add	r0, sp, #4
 1089 0054 1F49     		ldr	r1, .L73+8
 1090 0056 FFF7FEFF 		bl	sprintf
 1091              	.LVL118:
 419:Src/main.c    ****         print("\n", 0);
 1092              		.loc 1 419 0
 1093 005a 01A8     		add	r0, sp, #4
 1094 005c 2146     		mov	r1, r4
 1095 005e FFF7FEFF 		bl	print
 1096              	.LVL119:
 420:Src/main.c    ****         drive_straight(enc_pid);
 1097              		.loc 1 420 0
 1098 0062 1D48     		ldr	r0, .L73+12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 34


 1099 0064 2146     		mov	r1, r4
 1100 0066 FFF7FEFF 		bl	print
 1101              	.LVL120:
 421:Src/main.c    ****         if (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET && HAL_GPIO_Read
 1102              		.loc 1 421 0
 1103 006a 3046     		mov	r0, r6
 1104 006c FFF7FEFF 		bl	drive_straight
 1105              	.LVL121:
 422:Src/main.c    ****         {
 1106              		.loc 1 422 0
 1107 0070 2846     		mov	r0, r5
 1108 0072 0421     		movs	r1, #4
 1109 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1110              	.LVL122:
 1111 0078 38B9     		cbnz	r0, .L66
 422:Src/main.c    ****         {
 1112              		.loc 1 422 0 is_stmt 0 discriminator 1
 1113 007a 00F18040 		add	r0, r0, #1073741824
 1114 007e 00F50230 		add	r0, r0, #133120
 1115 0082 0821     		movs	r1, #8
 1116 0084 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1117              	.LVL123:
 1118 0088 E8B1     		cbz	r0, .L65
 1119              	.L66:
 426:Src/main.c    ****         {
 1120              		.loc 1 426 0 is_stmt 1
 1121 008a 1048     		ldr	r0, .L73
 1122 008c 0421     		movs	r1, #4
 1123 008e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1124              	.LVL124:
 1125 0092 28B1     		cbz	r0, .L68
 426:Src/main.c    ****         {
 1126              		.loc 1 426 0 is_stmt 0 discriminator 1
 1127 0094 1148     		ldr	r0, .L73+16
 1128 0096 0821     		movs	r1, #8
 1129 0098 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1130              	.LVL125:
 1131 009c 0028     		cmp	r0, #0
 1132 009e B2D1     		bne	.L71
 1133              	.L68:
 429:Src/main.c    ****             {
 1134              		.loc 1 429 0 is_stmt 1
 1135 00a0 0A48     		ldr	r0, .L73
 1136 00a2 0421     		movs	r1, #4
 1137 00a4 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1138              	.LVL126:
 1139 00a8 10B9     		cbnz	r0, .L70
 431:Src/main.c    ****             }
 1140              		.loc 1 431 0
 1141 00aa 0146     		mov	r1, r0
 1142 00ac FFF7FEFF 		bl	set_motor_speed
 1143              	.LVL127:
 1144              	.L70:
 433:Src/main.c    ****             {
 1145              		.loc 1 433 0
 1146 00b0 0A48     		ldr	r0, .L73+16
 1147 00b2 0821     		movs	r1, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 35


 1148 00b4 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1149              	.LVL128:
 1150 00b8 0028     		cmp	r0, #0
 1151 00ba A4D1     		bne	.L71
 435:Src/main.c    ****             }
 1152              		.loc 1 435 0
 1153 00bc 0820     		movs	r0, #8
 1154 00be 0021     		movs	r1, #0
 1155 00c0 FFF7FEFF 		bl	set_motor_speed
 1156              	.LVL129:
 1157              	.LBE2:
 438:Src/main.c    **** }
 1158              		.loc 1 438 0
 1159 00c4 9FE7     		b	.L71
 1160              	.L65:
 439:Src/main.c    **** 
 1161              		.loc 1 439 0
 1162 00c6 0EB0     		add	sp, sp, #56
 1163              	.LCFI21:
 1164              		.cfi_def_cfa_offset 16
 1165              		@ sp needed
 1166 00c8 70BD     		pop	{r4, r5, r6, pc}
 1167              	.LVL130:
 1168              	.L74:
 1169 00ca 00BF     		.align	2
 1170              	.L73:
 1171 00cc 000C0240 		.word	1073875968
 1172 00d0 E0000000 		.word	.LC11
 1173 00d4 F8000000 		.word	.LC12
 1174 00d8 10010000 		.word	.LC13
 1175 00dc 00080240 		.word	1073874944
 1176              		.cfi_endproc
 1177              	.LFE126:
 1179              		.section	.text.debounce_and_grab,"ax",%progbits
 1180              		.align	2
 1181              		.global	debounce_and_grab
 1182              		.thumb
 1183              		.thumb_func
 1185              	debounce_and_grab:
 1186              	.LFB137:
 719:Src/main.c    ****     }
 720:Src/main.c    **** }
 721:Src/main.c    **** 
 722:Src/main.c    **** int debounce_and_grab(PID_t *enc_pid)
 723:Src/main.c    **** {
 1187              		.loc 1 723 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 0
 1190              		@ frame_needed = 0, uses_anonymous_args = 0
 1191              	.LVL131:
 1192 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1193              	.LCFI22:
 1194              		.cfi_def_cfa_offset 24
 1195              		.cfi_offset 4, -24
 1196              		.cfi_offset 5, -20
 1197              		.cfi_offset 6, -16
 1198              		.cfi_offset 7, -12
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 36


 1199              		.cfi_offset 8, -8
 1200              		.cfi_offset 14, -4
 1201 0004 0446     		mov	r4, r0
 724:Src/main.c    ****     uint32_t timeee = HAL_GetTick();
 1202              		.loc 1 724 0
 1203 0006 FFF7FEFF 		bl	HAL_GetTick
 1204              	.LVL132:
 1205 000a 0546     		mov	r5, r0
 1206              	.LVL133:
 725:Src/main.c    ****     // int count = 0;
 726:Src/main.c    ****     // while (HAL_GetTick() - timeee < 50)
 727:Src/main.c    ****     // {
 728:Src/main.c    ****     //     ++count;
 729:Src/main.c    ****     //     HAL_Delay(5);
 730:Src/main.c    ****     //     if (HAL_GPIO_ReadPin(CLAW_INT_GPIO_Port, CLAW_INT_Pin) == GPIO_PIN_RESET)
 731:Src/main.c    ****     //     {
 732:Src/main.c    ****     //         print("CLAW_GRAB | Claw debounced. No ewok found\n", 0);
 733:Src/main.c    ****     //         ewok = FALSE;
 734:Src/main.c    ****     //         break;
 735:Src/main.c    ****     //     }
 736:Src/main.c    ****     // }
 737:Src/main.c    ****     // char msg[50] = "";
 738:Src/main.c    ****     // sprintf(msg, "CLAW_GRAB | Debounced with %d checks\n", count);
 739:Src/main.c    ****     // print(msg, 0);
 740:Src/main.c    ****     // If claw is still high, we have an ewok. Stop, grab it, continue on
 741:Src/main.c    ****     // hardcoded procedure
 742:Src/main.c    ****         print("CLAW_GRAB | grabbing ewok\n", 0);
 1207              		.loc 1 742 0
 1208 000c BD48     		ldr	r0, .L98
 1209              	.LVL134:
 1210 000e 0021     		movs	r1, #0
 1211 0010 FFF7FEFF 		bl	print
 1212              	.LVL135:
 743:Src/main.c    ****         HAL_Delay(700);
 1213              		.loc 1 743 0
 1214 0014 4FF42F70 		mov	r0, #700
 1215 0018 FFF7FEFF 		bl	HAL_Delay
 1216              	.LVL136:
 744:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 1217              		.loc 1 744 0
 1218 001c 0020     		movs	r0, #0
 1219 001e 0146     		mov	r1, r0
 1220 0020 FFF7FEFF 		bl	set_motor_speed
 1221              	.LVL137:
 745:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 1222              		.loc 1 745 0
 1223 0024 0820     		movs	r0, #8
 1224 0026 0021     		movs	r1, #0
 1225 0028 FFF7FEFF 		bl	set_motor_speed
 1226              	.LVL138:
 746:Src/main.c    ****         close_claw(&htim3);
 1227              		.loc 1 746 0
 1228 002c B64E     		ldr	r6, .L98+4
 1229 002e 3046     		mov	r0, r6
 1230 0030 FFF7FEFF 		bl	close_claw
 1231              	.LVL139:
 747:Src/main.c    ****         arm_up(&htim3);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 37


 1232              		.loc 1 747 0
 1233 0034 3046     		mov	r0, r6
 1234 0036 FFF7FEFF 		bl	arm_up
 1235              	.LVL140:
 748:Src/main.c    ****         // TODO: delete next line, there for testing!!!
 749:Src/main.c    ****         HAL_Delay(100);
 1236              		.loc 1 749 0
 1237 003a 6420     		movs	r0, #100
 1238 003c FFF7FEFF 		bl	HAL_Delay
 1239              	.LVL141:
 750:Src/main.c    ****         ++ewok_cnt;
 1240              		.loc 1 750 0
 1241 0040 B24A     		ldr	r2, .L98+8
 1242 0042 1368     		ldr	r3, [r2]
 1243 0044 0133     		adds	r3, r3, #1
 1244 0046 1360     		str	r3, [r2]
 751:Src/main.c    ****         // char msg[18] = "";
 752:Src/main.c    ****         // sprintf(msg, "wok_cnt: %d\n", ewok_cnt);
 753:Src/main.c    ****         // print(msg, 0);
 754:Src/main.c    ****         /*
 755:Src/main.c    ****             * Claw is up and closed
 756:Src/main.c    ****             * Ewok Count incremented
 757:Src/main.c    ****             * Motors not powered
 758:Src/main.c    ****             * CLAW_INT_STATE not FLAGGED, interrupt disabled
 759:Src/main.c    ****             */
 760:Src/main.c    **** 
 761:Src/main.c    ****         // For the first ewok, turn left, arm up, square robot w/ edge,
 762:Src/main.c    ****         // drive straight for 3 s, bring arm down
 763:Src/main.c    ****         if (ewok_cnt == 1)
 1245              		.loc 1 763 0
 1246 0048 012B     		cmp	r3, #1
 1247 004a 54D1     		bne	.L76
 1248              	.LBB3:
 764:Src/main.c    ****         {
 765:Src/main.c    ****             print("First ewok captured\n", 0);
 1249              		.loc 1 765 0
 1250 004c B048     		ldr	r0, .L98+12
 1251 004e 0021     		movs	r1, #0
 1252 0050 FFF7FEFF 		bl	print
 1253              	.LVL142:
 766:Src/main.c    ****             turn_deg(-160);
 1254              		.loc 1 766 0
 1255 0054 6FF09F00 		mvn	r0, #159
 1256 0058 FFF7FEFF 		bl	turn_deg
 1257              	.LVL143:
 767:Src/main.c    ****             open_claw(&htim3);
 1258              		.loc 1 767 0
 1259 005c 3046     		mov	r0, r6
 1260 005e FFF7FEFF 		bl	open_claw
 1261              	.LVL144:
 768:Src/main.c    ****             LEFT_SPEED+=100;
 1262              		.loc 1 768 0
 1263 0062 AC4F     		ldr	r7, .L98+16
 1264 0064 3B88     		ldrh	r3, [r7]
 1265 0066 6433     		adds	r3, r3, #100
 1266 0068 3B80     		strh	r3, [r7]	@ movhi
 769:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 38


 1267              		.loc 1 769 0
 1268 006a DFF8AC82 		ldr	r8, .L98+20
 1269 006e 0820     		movs	r0, #8
 1270 0070 B8F80010 		ldrh	r1, [r8]
 1271 0074 FFF7FEFF 		bl	set_motor_speed
 1272              	.LVL145:
 770:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1273              		.loc 1 770 0
 1274 0078 0020     		movs	r0, #0
 1275 007a 3988     		ldrh	r1, [r7]
 1276 007c FFF7FEFF 		bl	set_motor_speed
 1277              	.LVL146:
 771:Src/main.c    ****             square_edge(enc_pid);
 1278              		.loc 1 771 0
 1279 0080 2046     		mov	r0, r4
 1280 0082 FFF7FEFF 		bl	square_edge
 1281              	.LVL147:
 772:Src/main.c    ****             uint32_t time = HAL_GetTick();
 1282              		.loc 1 772 0
 1283 0086 FFF7FEFF 		bl	HAL_GetTick
 1284              	.LVL148:
 1285 008a 0646     		mov	r6, r0
 1286              	.LVL149:
 773:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1287              		.loc 1 773 0
 1288 008c 0820     		movs	r0, #8
 1289              	.LVL150:
 1290 008e B8F80010 		ldrh	r1, [r8]
 1291 0092 FFF7FEFF 		bl	set_motor_speed
 1292              	.LVL151:
 774:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1293              		.loc 1 774 0
 1294 0096 0020     		movs	r0, #0
 1295 0098 3988     		ldrh	r1, [r7]
 1296 009a FFF7FEFF 		bl	set_motor_speed
 1297              	.LVL152:
 775:Src/main.c    ****             while(HAL_GetTick()-time < 2000){
 1298              		.loc 1 775 0
 1299 009e 02E0     		b	.L77
 1300              	.L78:
 776:Src/main.c    ****             drive_straight(enc_pid);
 1301              		.loc 1 776 0
 1302 00a0 2046     		mov	r0, r4
 1303 00a2 FFF7FEFF 		bl	drive_straight
 1304              	.LVL153:
 1305              	.L77:
 775:Src/main.c    ****             while(HAL_GetTick()-time < 2000){
 1306              		.loc 1 775 0
 1307 00a6 FFF7FEFF 		bl	HAL_GetTick
 1308              	.LVL154:
 1309 00aa 801B     		subs	r0, r0, r6
 1310 00ac B0F5FA6F 		cmp	r0, #2000
 1311 00b0 F6D3     		bcc	.L78
 777:Src/main.c    ****             }
 778:Src/main.c    ****             arm_down(&htim3);
 1312              		.loc 1 778 0
 1313 00b2 9548     		ldr	r0, .L98+4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 39


 1314 00b4 FFF7FEFF 		bl	arm_down
 1315              	.LVL155:
 779:Src/main.c    ****             time = HAL_GetTick();
 1316              		.loc 1 779 0
 1317 00b8 FFF7FEFF 		bl	HAL_GetTick
 1318              	.LVL156:
 1319 00bc 0646     		mov	r6, r0
 1320              	.LVL157:
 780:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1321              		.loc 1 780 0
 1322 00be 0820     		movs	r0, #8
 1323              	.LVL158:
 1324 00c0 954B     		ldr	r3, .L98+20
 1325 00c2 1988     		ldrh	r1, [r3]
 1326 00c4 FFF7FEFF 		bl	set_motor_speed
 1327              	.LVL159:
 781:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1328              		.loc 1 781 0
 1329 00c8 0020     		movs	r0, #0
 1330 00ca 924B     		ldr	r3, .L98+16
 1331 00cc 1988     		ldrh	r1, [r3]
 1332 00ce FFF7FEFF 		bl	set_motor_speed
 1333              	.LVL160:
 782:Src/main.c    ****             while(HAL_GetTick()-time < 1000){
 1334              		.loc 1 782 0
 1335 00d2 02E0     		b	.L79
 1336              	.L80:
 783:Src/main.c    ****             drive_straight(enc_pid);
 1337              		.loc 1 783 0
 1338 00d4 2046     		mov	r0, r4
 1339 00d6 FFF7FEFF 		bl	drive_straight
 1340              	.LVL161:
 1341              	.L79:
 782:Src/main.c    ****             while(HAL_GetTick()-time < 1000){
 1342              		.loc 1 782 0
 1343 00da FFF7FEFF 		bl	HAL_GetTick
 1344              	.LVL162:
 1345 00de 801B     		subs	r0, r0, r6
 1346 00e0 B0F57A7F 		cmp	r0, #1000
 1347 00e4 F6D3     		bcc	.L80
 784:Src/main.c    ****             }
 785:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 1348              		.loc 1 785 0
 1349 00e6 0820     		movs	r0, #8
 1350 00e8 0021     		movs	r1, #0
 1351 00ea FFF7FEFF 		bl	set_motor_speed
 1352              	.LVL163:
 786:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 1353              		.loc 1 786 0
 1354 00ee 0020     		movs	r0, #0
 1355 00f0 0146     		mov	r1, r0
 1356 00f2 FFF7FEFF 		bl	set_motor_speed
 1357              	.LVL164:
 1358              	.L76:
 1359              	.LBE3:
 787:Src/main.c    ****             // square_edge(&enc_pid);
 788:Src/main.c    ****     //        drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 10000);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 40


 789:Src/main.c    ****         }
 790:Src/main.c    **** 
 791:Src/main.c    ****         if (ewok_cnt == 2)
 1360              		.loc 1 791 0
 1361 00f6 854B     		ldr	r3, .L98+8
 1362 00f8 1B68     		ldr	r3, [r3]
 1363 00fa 022B     		cmp	r3, #2
 1364 00fc 3DD1     		bne	.L81
 1365              	.LBB4:
 792:Src/main.c    ****         {
 793:Src/main.c    ****             print("Second ewok captured\n",0);
 1366              		.loc 1 793 0
 1367 00fe 8748     		ldr	r0, .L98+24
 1368 0100 0021     		movs	r1, #0
 1369 0102 FFF7FEFF 		bl	print
 1370              	.LVL165:
 794:Src/main.c    ****             turn_deg(-170); //  Prolly have to change this
 1371              		.loc 1 794 0
 1372 0106 6FF0A900 		mvn	r0, #169
 1373 010a FFF7FEFF 		bl	turn_deg
 1374              	.LVL166:
 795:Src/main.c    ****             alarm_detect();
 1375              		.loc 1 795 0
 1376 010e FFF7FEFF 		bl	alarm_detect
 1377              	.LVL167:
 796:Src/main.c    ****             open_claw(&htim3);
 1378              		.loc 1 796 0
 1379 0112 7D48     		ldr	r0, .L98+4
 1380 0114 FFF7FEFF 		bl	open_claw
 1381              	.LVL168:
 797:Src/main.c    ****             uint32_t time = HAL_GetTick();
 1382              		.loc 1 797 0
 1383 0118 FFF7FEFF 		bl	HAL_GetTick
 1384              	.LVL169:
 1385 011c 0646     		mov	r6, r0
 1386              	.LVL170:
 798:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1387              		.loc 1 798 0
 1388 011e 0820     		movs	r0, #8
 1389              	.LVL171:
 1390 0120 7D4B     		ldr	r3, .L98+20
 1391 0122 1988     		ldrh	r1, [r3]
 1392 0124 FFF7FEFF 		bl	set_motor_speed
 1393              	.LVL172:
 799:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1394              		.loc 1 799 0
 1395 0128 0020     		movs	r0, #0
 1396 012a 7A4B     		ldr	r3, .L98+16
 1397 012c 1988     		ldrh	r1, [r3]
 1398 012e FFF7FEFF 		bl	set_motor_speed
 1399              	.LVL173:
 800:Src/main.c    ****             while(HAL_GetTick()-time < 3000){
 1400              		.loc 1 800 0
 1401 0132 02E0     		b	.L82
 1402              	.L83:
 801:Src/main.c    ****             drive_straight(enc_pid);
 1403              		.loc 1 801 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 41


 1404 0134 2046     		mov	r0, r4
 1405 0136 FFF7FEFF 		bl	drive_straight
 1406              	.LVL174:
 1407              	.L82:
 800:Src/main.c    ****             while(HAL_GetTick()-time < 3000){
 1408              		.loc 1 800 0
 1409 013a FFF7FEFF 		bl	HAL_GetTick
 1410              	.LVL175:
 1411 013e 801B     		subs	r0, r0, r6
 1412 0140 40F6B733 		movw	r3, #2999
 1413 0144 9842     		cmp	r0, r3
 1414 0146 F5D9     		bls	.L83
 802:Src/main.c    ****             }
 803:Src/main.c    ****             arm_down(&htim3);
 1415              		.loc 1 803 0
 1416 0148 6F48     		ldr	r0, .L98+4
 1417 014a FFF7FEFF 		bl	arm_down
 1418              	.LVL176:
 804:Src/main.c    ****             time = HAL_GetTick();
 1419              		.loc 1 804 0
 1420 014e FFF7FEFF 		bl	HAL_GetTick
 1421              	.LVL177:
 1422 0152 0646     		mov	r6, r0
 1423              	.LVL178:
 805:Src/main.c    ****             while(HAL_GetTick()-time < 3000){
 1424              		.loc 1 805 0
 1425 0154 02E0     		b	.L84
 1426              	.LVL179:
 1427              	.L85:
 806:Src/main.c    ****             drive_straight(enc_pid);
 1428              		.loc 1 806 0
 1429 0156 2046     		mov	r0, r4
 1430 0158 FFF7FEFF 		bl	drive_straight
 1431              	.LVL180:
 1432              	.L84:
 805:Src/main.c    ****             while(HAL_GetTick()-time < 3000){
 1433              		.loc 1 805 0
 1434 015c FFF7FEFF 		bl	HAL_GetTick
 1435              	.LVL181:
 1436 0160 801B     		subs	r0, r0, r6
 1437 0162 40F6B733 		movw	r3, #2999
 1438 0166 9842     		cmp	r0, r3
 1439 0168 F5D9     		bls	.L85
 807:Src/main.c    ****             }
 808:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, 0);
 1440              		.loc 1 808 0
 1441 016a 0820     		movs	r0, #8
 1442 016c 0021     		movs	r1, #0
 1443 016e FFF7FEFF 		bl	set_motor_speed
 1444              	.LVL182:
 809:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, 0);
 1445              		.loc 1 809 0
 1446 0172 0020     		movs	r0, #0
 1447 0174 0146     		mov	r1, r0
 1448 0176 FFF7FEFF 		bl	set_motor_speed
 1449              	.LVL183:
 1450              	.L81:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 42


 1451              	.LBE4:
 810:Src/main.c    ****             /*
 811:Src/main.c    ****             timeee = HAL_GetTick();
 812:Src/main.c    ****             while (HAL_GetTick() - timeee < 7000)
 813:Src/main.c    ****             {
 814:Src/main.c    ****                 if (TAPE_LEFT_STATE == FLAGGED && TAPE_RIGHT_STATE != FLAGGED)
 815:Src/main.c    ****                 {
 816:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 817:Src/main.c    ****                     // Tape detects object when high
 818:Src/main.c    ****                     while (HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) == GPIO_PIN_SET);
 819:Src/main.c    ****                     HAL_Delay(100);
 820:Src/main.c    ****                     TAPE_LEFT_STATE = NOT_FLAGGED;
 821:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 822:Src/main.c    ****                 }
 823:Src/main.c    ****                 else if (TAPE_RIGHT_STATE == FLAGGED && TAPE_LEFT_STATE != FLAGGED)
 824:Src/main.c    ****                 {
 825:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 826:Src/main.c    ****                     while (HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) == GPIO_PIN_SET);
 827:Src/main.c    ****                     HAL_Delay(100);
 828:Src/main.c    ****                     TAPE_RIGHT_STATE = NOT_FLAGGED;
 829:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 830:Src/main.c    ****                 }
 831:Src/main.c    ****             }
 832:Src/main.c    ****             */
 833:Src/main.c    ****         }
 834:Src/main.c    **** 
 835:Src/main.c    ****         if (ewok_cnt == 3)
 1452              		.loc 1 835 0
 1453 017a 644B     		ldr	r3, .L98+8
 1454 017c 1B68     		ldr	r3, [r3]
 1455 017e 032B     		cmp	r3, #3
 1456 0180 39D1     		bne	.L86
 836:Src/main.c    ****         {
 837:Src/main.c    ****             print("Third ewok captured\n", 0);
 1457              		.loc 1 837 0
 1458 0182 6748     		ldr	r0, .L98+28
 1459 0184 0021     		movs	r1, #0
 1460 0186 FFF7FEFF 		bl	print
 1461              	.LVL184:
 838:Src/main.c    ****             turn_deg(170);
 1462              		.loc 1 838 0
 1463 018a AA20     		movs	r0, #170
 1464 018c FFF7FEFF 		bl	turn_deg
 1465              	.LVL185:
 839:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1466              		.loc 1 839 0
 1467 0190 614F     		ldr	r7, .L98+20
 1468 0192 0820     		movs	r0, #8
 1469 0194 3988     		ldrh	r1, [r7]
 1470 0196 FFF7FEFF 		bl	set_motor_speed
 1471              	.LVL186:
 840:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1472              		.loc 1 840 0
 1473 019a DFF87881 		ldr	r8, .L98+16
 1474 019e 0020     		movs	r0, #0
 1475 01a0 B8F80010 		ldrh	r1, [r8]
 1476 01a4 FFF7FEFF 		bl	set_motor_speed
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 43


 1477              	.LVL187:
 841:Src/main.c    ****             square_edge(enc_pid);
 1478              		.loc 1 841 0
 1479 01a8 2046     		mov	r0, r4
 1480 01aa FFF7FEFF 		bl	square_edge
 1481              	.LVL188:
 842:Src/main.c    ****             open_claw(&htim3);
 1482              		.loc 1 842 0
 1483 01ae 564E     		ldr	r6, .L98+4
 1484 01b0 3046     		mov	r0, r6
 1485 01b2 FFF7FEFF 		bl	open_claw
 1486              	.LVL189:
 843:Src/main.c    ****             drive_straight_time(enc_pid, LEFT_SPEED+100, RIGHT_SPEED+100, 2000);
 1487              		.loc 1 843 0
 1488 01b6 B8F80010 		ldrh	r1, [r8]
 1489 01ba 3A88     		ldrh	r2, [r7]
 1490 01bc 2046     		mov	r0, r4
 1491 01be 6431     		adds	r1, r1, #100
 1492 01c0 6432     		adds	r2, r2, #100
 1493 01c2 4FF4FA63 		mov	r3, #2000
 1494 01c6 FFF7FEFF 		bl	drive_straight_time
 1495              	.LVL190:
 844:Src/main.c    ****             arm_down(&htim3);
 1496              		.loc 1 844 0
 1497 01ca 3046     		mov	r0, r6
 1498 01cc FFF7FEFF 		bl	arm_down
 1499              	.LVL191:
 845:Src/main.c    ****             while(PI_INT_STATE != FLAGGED){
 1500              		.loc 1 845 0
 1501 01d0 03E0     		b	.L87
 1502              	.L88:
 846:Src/main.c    ****                turn_deg(-10);
 1503              		.loc 1 846 0
 1504 01d2 6FF00900 		mvn	r0, #9
 1505 01d6 FFF7FEFF 		bl	turn_deg
 1506              	.LVL192:
 1507              	.L87:
 845:Src/main.c    ****             while(PI_INT_STATE != FLAGGED){
 1508              		.loc 1 845 0
 1509 01da 524B     		ldr	r3, .L98+32
 1510 01dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1511 01de 012B     		cmp	r3, #1
 1512 01e0 F7D1     		bne	.L88
 847:Src/main.c    **** 
 848:Src/main.c    ****             }
 849:Src/main.c    ****             // todo delete below
 850:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1513              		.loc 1 850 0
 1514 01e2 0820     		movs	r0, #8
 1515 01e4 4C4B     		ldr	r3, .L98+20
 1516 01e6 1988     		ldrh	r1, [r3]
 1517 01e8 FFF7FEFF 		bl	set_motor_speed
 1518              	.LVL193:
 851:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1519              		.loc 1 851 0
 1520 01ec 0020     		movs	r0, #0
 1521 01ee 494B     		ldr	r3, .L98+16
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 44


 1522 01f0 1988     		ldrh	r1, [r3]
 1523 01f2 FFF7FEFF 		bl	set_motor_speed
 1524              	.LVL194:
 1525              	.L86:
 852:Src/main.c    ****         }
 853:Src/main.c    **** 
 854:Src/main.c    ****         if (ewok_cnt == 4)
 1526              		.loc 1 854 0
 1527 01f6 454B     		ldr	r3, .L98+8
 1528 01f8 1B68     		ldr	r3, [r3]
 1529 01fa 042B     		cmp	r3, #4
 1530 01fc 51D1     		bne	.L89
 855:Src/main.c    ****         {
 856:Src/main.c    ****             print("Fourth ewok captured\n", 0);
 1531              		.loc 1 856 0
 1532 01fe 4A48     		ldr	r0, .L98+36
 1533 0200 0021     		movs	r1, #0
 1534 0202 FFF7FEFF 		bl	print
 1535              	.LVL195:
 857:Src/main.c    ****             turn_deg(150);
 1536              		.loc 1 857 0
 1537 0206 9620     		movs	r0, #150
 1538 0208 FFF7FEFF 		bl	turn_deg
 1539              	.LVL196:
 858:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1540              		.loc 1 858 0
 1541 020c 0820     		movs	r0, #8
 1542 020e 424B     		ldr	r3, .L98+20
 1543 0210 1988     		ldrh	r1, [r3]
 1544 0212 FFF7FEFF 		bl	set_motor_speed
 1545              	.LVL197:
 859:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1546              		.loc 1 859 0
 1547 0216 0020     		movs	r0, #0
 1548 0218 3E4B     		ldr	r3, .L98+16
 1549 021a 1988     		ldrh	r1, [r3]
 1550 021c FFF7FEFF 		bl	set_motor_speed
 1551              	.LVL198:
 860:Src/main.c    ****             open_claw(&htim3);
 1552              		.loc 1 860 0
 1553 0220 3948     		ldr	r0, .L98+4
 1554 0222 FFF7FEFF 		bl	open_claw
 1555              	.LVL199:
 861:Src/main.c    ****             while (HAL_GetTick() - timeee < 8000)
 1556              		.loc 1 861 0
 1557 0226 33E0     		b	.L93
 1558              	.L95:
 862:Src/main.c    ****             {
 863:Src/main.c    ****                 if (EDGE_LEFT_STATE == FLAGGED && EDGE_RIGHT_STATE == NOT_FLAGGED)
 1559              		.loc 1 863 0
 1560 0228 404B     		ldr	r3, .L98+40
 1561 022a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1562 022c 012B     		cmp	r3, #1
 1563 022e 17D1     		bne	.L91
 1564              		.loc 1 863 0 is_stmt 0 discriminator 1
 1565 0230 3F4B     		ldr	r3, .L98+44
 1566 0232 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 45


 1567 0234 A3B9     		cbnz	r3, .L91
 864:Src/main.c    ****                 {
 865:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, 0);
 1568              		.loc 1 865 0 is_stmt 1
 1569 0236 0820     		movs	r0, #8
 1570 0238 0021     		movs	r1, #0
 1571 023a FFF7FEFF 		bl	set_motor_speed
 1572              	.LVL200:
 1573              	.L92:
 866:Src/main.c    ****                     // Edge detected when LOW
 867:Src/main.c    ****                     while (HAL_GPIO_ReadPin(EDGE_LEFT_GPIO_Port, EDGE_LEFT_Pin) == GPIO_PIN_RESET);
 1574              		.loc 1 867 0 discriminator 1
 1575 023e 3D48     		ldr	r0, .L98+48
 1576 0240 0421     		movs	r1, #4
 1577 0242 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1578              	.LVL201:
 1579 0246 0028     		cmp	r0, #0
 1580 0248 F9D0     		beq	.L92
 868:Src/main.c    ****                     HAL_Delay(200);
 1581              		.loc 1 868 0
 1582 024a C820     		movs	r0, #200
 1583 024c FFF7FEFF 		bl	HAL_Delay
 1584              	.LVL202:
 869:Src/main.c    ****                     EDGE_LEFT_STATE = NOT_FLAGGED;
 1585              		.loc 1 869 0
 1586 0250 0022     		movs	r2, #0
 1587 0252 364B     		ldr	r3, .L98+40
 1588 0254 1A70     		strb	r2, [r3]
 870:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 1589              		.loc 1 870 0
 1590 0256 0820     		movs	r0, #8
 1591 0258 2F4B     		ldr	r3, .L98+20
 1592 025a 1988     		ldrh	r1, [r3]
 1593 025c FFF7FEFF 		bl	set_motor_speed
 1594              	.LVL203:
 1595              	.L91:
 871:Src/main.c    ****                 }
 872:Src/main.c    ****                 if (EDGE_RIGHT_STATE == FLAGGED)
 1596              		.loc 1 872 0
 1597 0260 334B     		ldr	r3, .L98+44
 1598 0262 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1599 0264 012B     		cmp	r3, #1
 1600 0266 13D1     		bne	.L93
 873:Src/main.c    ****                 {
 874:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, 0);
 1601              		.loc 1 874 0
 1602 0268 0020     		movs	r0, #0
 1603 026a 0146     		mov	r1, r0
 1604 026c FFF7FEFF 		bl	set_motor_speed
 1605              	.LVL204:
 1606              	.L94:
 875:Src/main.c    ****                     while (HAL_GPIO_ReadPin(EDGE_RIGHT_GPIO_Port, EDGE_RIGHT_Pin) == GPIO_PIN_RESET
 1607              		.loc 1 875 0 discriminator 1
 1608 0270 3148     		ldr	r0, .L98+52
 1609 0272 0821     		movs	r1, #8
 1610 0274 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1611              	.LVL205:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 46


 1612 0278 0028     		cmp	r0, #0
 1613 027a F9D0     		beq	.L94
 876:Src/main.c    ****                     HAL_Delay(200);
 1614              		.loc 1 876 0
 1615 027c C820     		movs	r0, #200
 1616 027e FFF7FEFF 		bl	HAL_Delay
 1617              	.LVL206:
 877:Src/main.c    ****                     EDGE_RIGHT_STATE = NOT_FLAGGED;
 1618              		.loc 1 877 0
 1619 0282 0020     		movs	r0, #0
 1620 0284 2A4B     		ldr	r3, .L98+44
 1621 0286 1870     		strb	r0, [r3]
 878:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 1622              		.loc 1 878 0
 1623 0288 224B     		ldr	r3, .L98+16
 1624 028a 1988     		ldrh	r1, [r3]
 1625 028c FFF7FEFF 		bl	set_motor_speed
 1626              	.LVL207:
 1627              	.L93:
 861:Src/main.c    ****             {
 1628              		.loc 1 861 0
 1629 0290 FFF7FEFF 		bl	HAL_GetTick
 1630              	.LVL208:
 1631 0294 401B     		subs	r0, r0, r5
 1632 0296 B0F5FA5F 		cmp	r0, #8000
 1633 029a C5D3     		bcc	.L95
 879:Src/main.c    ****                 }
 880:Src/main.c    ****             }
 881:Src/main.c    ****             arm_down(&htim3);
 1634              		.loc 1 881 0
 1635 029c 1A48     		ldr	r0, .L98+4
 1636 029e FFF7FEFF 		bl	arm_down
 1637              	.LVL209:
 1638              	.L89:
 882:Src/main.c    ****         }
 883:Src/main.c    **** 
 884:Src/main.c    ****         if (ewok_cnt == 5)
 1639              		.loc 1 884 0
 1640 02a2 1A4B     		ldr	r3, .L98+8
 1641 02a4 1B68     		ldr	r3, [r3]
 1642 02a6 052B     		cmp	r3, #5
 1643 02a8 26D1     		bne	.L96
 885:Src/main.c    ****         {
 886:Src/main.c    ****             print("Chewie captured\n", 0);
 1644              		.loc 1 886 0
 1645 02aa 2448     		ldr	r0, .L98+56
 1646 02ac 0021     		movs	r1, #0
 1647 02ae FFF7FEFF 		bl	print
 1648              	.LVL210:
 887:Src/main.c    ****             turn_deg(50);
 1649              		.loc 1 887 0
 1650 02b2 3220     		movs	r0, #50
 1651 02b4 FFF7FEFF 		bl	turn_deg
 1652              	.LVL211:
 888:Src/main.c    ****             open_claw(&htim3);
 1653              		.loc 1 888 0
 1654 02b8 134D     		ldr	r5, .L98+4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 47


 1655              	.LVL212:
 1656 02ba 2846     		mov	r0, r5
 1657 02bc FFF7FEFF 		bl	open_claw
 1658              	.LVL213:
 889:Src/main.c    ****             HAL_Delay(750);
 1659              		.loc 1 889 0
 1660 02c0 40F2EE20 		movw	r0, #750
 1661 02c4 FFF7FEFF 		bl	HAL_Delay
 1662              	.LVL214:
 890:Src/main.c    ****             arm_down(&htim3);
 1663              		.loc 1 890 0
 1664 02c8 2846     		mov	r0, r5
 1665 02ca FFF7FEFF 		bl	arm_down
 1666              	.LVL215:
 891:Src/main.c    ****             slow_actuate(&htim3, BASKET_CH, 10, 180);
 1667              		.loc 1 891 0
 1668 02ce 2846     		mov	r0, r5
 1669 02d0 0821     		movs	r1, #8
 1670 02d2 0A22     		movs	r2, #10
 1671 02d4 B423     		movs	r3, #180
 1672 02d6 FFF7FEFF 		bl	slow_actuate
 1673              	.LVL216:
 892:Src/main.c    ****             drive_straight_time(enc_pid, LEFT_SPEED, RIGHT_SPEED, 3000);
 1674              		.loc 1 892 0
 1675 02da 2046     		mov	r0, r4
 1676 02dc 0D4B     		ldr	r3, .L98+16
 1677 02de 1988     		ldrh	r1, [r3]
 1678 02e0 0D4B     		ldr	r3, .L98+20
 1679 02e2 1A88     		ldrh	r2, [r3]
 1680 02e4 40F6B833 		movw	r3, #3000
 1681 02e8 FFF7FEFF 		bl	drive_straight_time
 1682              	.LVL217:
 893:Src/main.c    ****             slow_actuate(&htim3, BASKET_CH, 180, 20);
 1683              		.loc 1 893 0
 1684 02ec 2846     		mov	r0, r5
 1685 02ee 0821     		movs	r1, #8
 1686 02f0 B422     		movs	r2, #180
 1687 02f2 1423     		movs	r3, #20
 1688 02f4 FFF7FEFF 		bl	slow_actuate
 1689              	.LVL218:
 1690              	.L96:
 894:Src/main.c    ****         }
 895:Src/main.c    ****         CLAW_INT_STATE = NOT_FLAGGED;
 1691              		.loc 1 895 0
 1692 02f8 0022     		movs	r2, #0
 1693 02fa 114B     		ldr	r3, .L98+60
 1694 02fc 1A70     		strb	r2, [r3]
 896:Src/main.c    ****         return TRUE;
 897:Src/main.c    **** }
 1695              		.loc 1 897 0
 1696 02fe 0120     		movs	r0, #1
 1697 0300 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1698              	.LVL219:
 1699              	.L99:
 1700              		.align	2
 1701              	.L98:
 1702 0304 14010000 		.word	.LC14
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 48


 1703 0308 00000000 		.word	htim3
 1704 030c 00000000 		.word	.LANCHOR2
 1705 0310 30010000 		.word	.LC15
 1706 0314 00000000 		.word	.LANCHOR1
 1707 0318 00000000 		.word	.LANCHOR0
 1708 031c 48010000 		.word	.LC16
 1709 0320 60010000 		.word	.LC17
 1710 0324 00000000 		.word	PI_INT_STATE
 1711 0328 78010000 		.word	.LC18
 1712 032c 00000000 		.word	EDGE_LEFT_STATE
 1713 0330 00000000 		.word	EDGE_RIGHT_STATE
 1714 0334 000C0240 		.word	1073875968
 1715 0338 00080240 		.word	1073874944
 1716 033c 90010000 		.word	.LC19
 1717 0340 00000000 		.word	CLAW_INT_STATE
 1718              		.cfi_endproc
 1719              	.LFE137:
 1721              		.section	.text.drive_straight_time,"ax",%progbits
 1722              		.align	2
 1723              		.global	drive_straight_time
 1724              		.thumb
 1725              		.thumb_func
 1727              	drive_straight_time:
 1728              	.LFB127:
 442:Src/main.c    ****     uint32_t temp_time = HAL_GetTick();
 1729              		.loc 1 442 0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 0
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
 1733              	.LVL220:
 1734 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1735              	.LCFI23:
 1736              		.cfi_def_cfa_offset 24
 1737              		.cfi_offset 4, -24
 1738              		.cfi_offset 5, -20
 1739              		.cfi_offset 6, -16
 1740              		.cfi_offset 7, -12
 1741              		.cfi_offset 8, -8
 1742              		.cfi_offset 14, -4
 1743 0004 0646     		mov	r6, r0
 1744 0006 8846     		mov	r8, r1
 1745 0008 1746     		mov	r7, r2
 1746 000a 1D46     		mov	r5, r3
 443:Src/main.c    ****     char msg[50] = "";
 1747              		.loc 1 443 0
 1748 000c FFF7FEFF 		bl	HAL_GetTick
 1749              	.LVL221:
 1750 0010 0446     		mov	r4, r0
 1751              	.LVL222:
 446:Src/main.c    ****     {
 1752              		.loc 1 446 0
 1753 0012 19E0     		b	.L101
 1754              	.LVL223:
 1755              	.L105:
 448:Src/main.c    ****         {
 1756              		.loc 1 448 0
 1757 0014 1448     		ldr	r0, .L107
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 49


 1758 0016 1021     		movs	r1, #16
 1759 0018 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1760              	.LVL224:
 1761 001c 0128     		cmp	r0, #1
 1762 001e 08D1     		bne	.L102
 450:Src/main.c    ****             if(debounce_and_grab(enc_pid)) break;
 1763              		.loc 1 450 0
 1764 0020 1248     		ldr	r0, .L107+4
 1765 0022 0021     		movs	r1, #0
 1766 0024 FFF7FEFF 		bl	print
 1767              	.LVL225:
 451:Src/main.c    ****         }
 1768              		.loc 1 451 0
 1769 0028 3046     		mov	r0, r6
 1770 002a FFF7FEFF 		bl	debounce_and_grab
 1771              	.LVL226:
 1772 002e 58B1     		cbz	r0, .L101
 1773 0030 0FE0     		b	.L103
 1774              	.L102:
 470:Src/main.c    ****             set_motor_speed(TIM_CHANNEL_3, rspeed);
 1775              		.loc 1 470 0
 1776 0032 0020     		movs	r0, #0
 1777 0034 4146     		mov	r1, r8
 1778 0036 FFF7FEFF 		bl	set_motor_speed
 1779              	.LVL227:
 471:Src/main.c    ****             drive_straight(enc_pid);
 1780              		.loc 1 471 0
 1781 003a 0820     		movs	r0, #8
 1782 003c 3946     		mov	r1, r7
 1783 003e FFF7FEFF 		bl	set_motor_speed
 1784              	.LVL228:
 472:Src/main.c    **** 
 1785              		.loc 1 472 0
 1786 0042 3046     		mov	r0, r6
 1787 0044 FFF7FEFF 		bl	drive_straight
 1788              	.LVL229:
 1789              	.L101:
 446:Src/main.c    ****     {
 1790              		.loc 1 446 0
 1791 0048 FFF7FEFF 		bl	HAL_GetTick
 1792              	.LVL230:
 1793 004c 001B     		subs	r0, r0, r4
 1794 004e A842     		cmp	r0, r5
 1795 0050 E0D3     		bcc	.L105
 1796              	.L103:
 476:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 1797              		.loc 1 476 0
 1798 0052 0020     		movs	r0, #0
 1799 0054 0146     		mov	r1, r0
 1800 0056 FFF7FEFF 		bl	set_motor_speed
 1801              	.LVL231:
 477:Src/main.c    **** }
 1802              		.loc 1 477 0
 1803 005a 0820     		movs	r0, #8
 1804 005c 0021     		movs	r1, #0
 1805 005e FFF7FEFF 		bl	set_motor_speed
 1806              	.LVL232:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 50


 1807 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1808              	.LVL233:
 1809              	.L108:
 1810 0066 00BF     		.align	2
 1811              	.L107:
 1812 0068 00040240 		.word	1073873920
 1813 006c A4010000 		.word	.LC20
 1814              		.cfi_endproc
 1815              	.LFE127:
 1817              		.section	.text.test_PWM_htim1,"ax",%progbits
 1818              		.align	2
 1819              		.global	test_PWM_htim1
 1820              		.thumb
 1821              		.thumb_func
 1823              	test_PWM_htim1:
 1824              	.LFB138:
 898:Src/main.c    **** 
 899:Src/main.c    **** // ******
 900:Src/main.c    **** // TESTS
 901:Src/main.c    **** // ******
 902:Src/main.c    **** 
 903:Src/main.c    **** /*
 904:Src/main.c    ****  * Instructions:
 905:Src/main.c    ****  *      Run test_All() before the main while loop
 906:Src/main.c    ****  *      - Put a pull up resistor on htim3 PWM waves, measure voltage on pin
 907:Src/main.c    ****  *      - Measure voltage on pin of htim1
 908:Src/main.c    ****  *      - Give ADC pins values and read off of screen
 909:Src/main.c    ****  */
 910:Src/main.c    **** 
 911:Src/main.c    **** /*
 912:Src/main.c    ****  * Test PWM
 913:Src/main.c    ****  * Output: htim1 channel 1 through 4, PWM wave. Confirm these
 914:Src/main.c    ****  *         PWM waves via an oscilliscope.
 915:Src/main.c    ****  */
 916:Src/main.c    **** void test_PWM_htim1()
 917:Src/main.c    **** {
 1825              		.loc 1 917 0
 1826              		.cfi_startproc
 1827              		@ args = 0, pretend = 0, frame = 0
 1828              		@ frame_needed = 0, uses_anonymous_args = 0
 1829 0000 10B5     		push	{r4, lr}
 1830              	.LCFI24:
 1831              		.cfi_def_cfa_offset 8
 1832              		.cfi_offset 4, -8
 1833              		.cfi_offset 14, -4
 918:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1834              		.loc 1 918 0
 1835 0002 0C4C     		ldr	r4, .L113
 1836 0004 2046     		mov	r0, r4
 1837 0006 0021     		movs	r1, #0
 1838 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1839              	.LVL234:
 919:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 920:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1840              		.loc 1 920 0
 1841 000c 2046     		mov	r0, r4
 1842 000e 0821     		movs	r1, #8
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 51


 1843 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1844              	.LVL235:
 921:Src/main.c    ****     // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 922:Src/main.c    ****     int s = 0;
 1845              		.loc 1 922 0
 1846 0014 0024     		movs	r4, #0
 923:Src/main.c    ****     while (s < 1000)
 1847              		.loc 1 923 0
 1848 0016 08E0     		b	.L110
 1849              	.LVL236:
 1850              	.L111:
 924:Src/main.c    ****     {
 925:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, s);
 1851              		.loc 1 925 0
 1852 0018 064B     		ldr	r3, .L113
 1853 001a 1B68     		ldr	r3, [r3]
 1854 001c 5C63     		str	r4, [r3, #52]
 926:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 927:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, s);
 1855              		.loc 1 927 0
 1856 001e DC63     		str	r4, [r3, #60]
 928:Src/main.c    ****         // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 929:Src/main.c    ****         s += 100;
 1857              		.loc 1 929 0
 1858 0020 6434     		adds	r4, r4, #100
 1859              	.LVL237:
 930:Src/main.c    ****         HAL_Delay(1000);
 1860              		.loc 1 930 0
 1861 0022 4FF47A70 		mov	r0, #1000
 1862 0026 FFF7FEFF 		bl	HAL_Delay
 1863              	.LVL238:
 1864              	.L110:
 923:Src/main.c    ****     {
 1865              		.loc 1 923 0
 1866 002a B4F57A7F 		cmp	r4, #1000
 1867 002e F3DB     		blt	.L111
 931:Src/main.c    ****     }
 932:Src/main.c    **** }
 1868              		.loc 1 932 0
 1869 0030 10BD     		pop	{r4, pc}
 1870              	.LVL239:
 1871              	.L114:
 1872 0032 00BF     		.align	2
 1873              	.L113:
 1874 0034 00000000 		.word	htim1
 1875              		.cfi_endproc
 1876              	.LFE138:
 1878              		.section	.text.test_PWM_htim3,"ax",%progbits
 1879              		.align	2
 1880              		.global	test_PWM_htim3
 1881              		.thumb
 1882              		.thumb_func
 1884              	test_PWM_htim3:
 1885              	.LFB139:
 933:Src/main.c    **** 
 934:Src/main.c    **** /*
 935:Src/main.c    ****  * Test PWM
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 52


 936:Src/main.c    ****  * Output: htim3 channel 1 through 3, PWM wave. Confirm these
 937:Src/main.c    ****  *         PWM waves via an oscilliscope.
 938:Src/main.c    ****  */
 939:Src/main.c    **** void test_PWM_htim3()
 940:Src/main.c    **** {
 1886              		.loc 1 940 0
 1887              		.cfi_startproc
 1888              		@ args = 0, pretend = 0, frame = 0
 1889              		@ frame_needed = 0, uses_anonymous_args = 0
 1890 0000 10B5     		push	{r4, lr}
 1891              	.LCFI25:
 1892              		.cfi_def_cfa_offset 8
 1893              		.cfi_offset 4, -8
 1894              		.cfi_offset 14, -4
 941:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1895              		.loc 1 941 0
 1896 0002 0F4C     		ldr	r4, .L119
 1897 0004 2046     		mov	r0, r4
 1898 0006 0021     		movs	r1, #0
 1899 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1900              	.LVL240:
 942:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1901              		.loc 1 942 0
 1902 000c 2046     		mov	r0, r4
 1903 000e 0421     		movs	r1, #4
 1904 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1905              	.LVL241:
 943:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1906              		.loc 1 943 0
 1907 0014 2046     		mov	r0, r4
 1908 0016 0821     		movs	r1, #8
 1909 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1910              	.LVL242:
 944:Src/main.c    **** 
 945:Src/main.c    ****     int s = 500;
 1911              		.loc 1 945 0
 1912 001c 4FF4FA74 		mov	r4, #500
 946:Src/main.c    ****     while (s < 2400)
 1913              		.loc 1 946 0
 1914 0020 09E0     		b	.L116
 1915              	.LVL243:
 1916              	.L117:
 947:Src/main.c    ****     {
 948:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s);
 1917              		.loc 1 948 0
 1918 0022 074B     		ldr	r3, .L119
 1919 0024 1B68     		ldr	r3, [r3]
 1920 0026 5C63     		str	r4, [r3, #52]
 949:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s);
 1921              		.loc 1 949 0
 1922 0028 9C63     		str	r4, [r3, #56]
 950:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, s);
 1923              		.loc 1 950 0
 1924 002a DC63     		str	r4, [r3, #60]
 951:Src/main.c    ****         s += 100;
 1925              		.loc 1 951 0
 1926 002c 6434     		adds	r4, r4, #100
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 53


 1927              	.LVL244:
 952:Src/main.c    ****         HAL_Delay(500);
 1928              		.loc 1 952 0
 1929 002e 4FF4FA70 		mov	r0, #500
 1930 0032 FFF7FEFF 		bl	HAL_Delay
 1931              	.LVL245:
 1932              	.L116:
 946:Src/main.c    ****     {
 1933              		.loc 1 946 0
 1934 0036 B4F5166F 		cmp	r4, #2400
 1935 003a F2DB     		blt	.L117
 953:Src/main.c    ****     }
 954:Src/main.c    **** }
 1936              		.loc 1 954 0
 1937 003c 10BD     		pop	{r4, pc}
 1938              	.LVL246:
 1939              	.L120:
 1940 003e 00BF     		.align	2
 1941              	.L119:
 1942 0040 00000000 		.word	htim3
 1943              		.cfi_endproc
 1944              	.LFE139:
 1946              		.section	.text.test_ADC,"ax",%progbits
 1947              		.align	2
 1948              		.global	test_ADC
 1949              		.thumb
 1950              		.thumb_func
 1952              	test_ADC:
 1953              	.LFB140:
 955:Src/main.c    **** 
 956:Src/main.c    **** void test_ADC()
 957:Src/main.c    **** {
 1954              		.loc 1 957 0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 24
 1957              		@ frame_needed = 0, uses_anonymous_args = 0
 1958 0000 10B5     		push	{r4, lr}
 1959              	.LCFI26:
 1960              		.cfi_def_cfa_offset 8
 1961              		.cfi_offset 4, -8
 1962              		.cfi_offset 14, -4
 1963 0002 86B0     		sub	sp, sp, #24
 1964              	.LCFI27:
 1965              		.cfi_def_cfa_offset 32
 958:Src/main.c    ****     char msg[18] = "";
 1966              		.loc 1 958 0
 1967 0004 0023     		movs	r3, #0
 1968 0006 0193     		str	r3, [sp, #4]
 1969 0008 0293     		str	r3, [sp, #8]
 1970 000a 0393     		str	r3, [sp, #12]
 1971 000c 0493     		str	r3, [sp, #16]
 1972 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
 959:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 1973              		.loc 1 959 0
 1974 0012 0F48     		ldr	r0, .L124
 1975 0014 0F49     		ldr	r1, .L124+4
 1976 0016 4FF40062 		mov	r2, #2048
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 54


 1977 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1978              	.LVL247:
 1979              	.L122:
 1980              	.LBB5:
 960:Src/main.c    **** 
 961:Src/main.c    ****     while (1)
 962:Src/main.c    ****     {
 963:Src/main.c    ****         int ch_5 = adc_values[0];
 1981              		.loc 1 963 0 discriminator 1
 1982 001e 0E4B     		ldr	r3, .L124+8
 1983              	.LVL248:
 964:Src/main.c    ****         int ch_4 = adc_values[1];
 1984              		.loc 1 964 0 discriminator 1
 1985 0020 5C68     		ldr	r4, [r3, #4]
 1986              	.LVL249:
 965:Src/main.c    **** 
 966:Src/main.c    ****         sprintf(msg, "ch_5: %d\n", ch_5);
 1987              		.loc 1 966 0 discriminator 1
 1988 0022 01A8     		add	r0, sp, #4
 1989 0024 0D49     		ldr	r1, .L124+12
 1990 0026 1A68     		ldr	r2, [r3]
 1991 0028 FFF7FEFF 		bl	sprintf
 1992              	.LVL250:
 967:Src/main.c    ****         print(msg, 0);
 1993              		.loc 1 967 0 discriminator 1
 1994 002c 01A8     		add	r0, sp, #4
 1995 002e 0021     		movs	r1, #0
 1996 0030 FFF7FEFF 		bl	print
 1997              	.LVL251:
 968:Src/main.c    **** 
 969:Src/main.c    ****         sprintf(msg, "ch_4: %d\n", ch_4);
 1998              		.loc 1 969 0 discriminator 1
 1999 0034 01A8     		add	r0, sp, #4
 2000 0036 0A49     		ldr	r1, .L124+16
 2001 0038 2246     		mov	r2, r4
 2002 003a FFF7FEFF 		bl	sprintf
 2003              	.LVL252:
 970:Src/main.c    ****         print(msg, 2);
 2004              		.loc 1 970 0 discriminator 1
 2005 003e 01A8     		add	r0, sp, #4
 2006 0040 0221     		movs	r1, #2
 2007 0042 FFF7FEFF 		bl	print
 2008              	.LVL253:
 971:Src/main.c    **** 
 972:Src/main.c    ****         HAL_Delay(100);
 2009              		.loc 1 972 0 discriminator 1
 2010 0046 6420     		movs	r0, #100
 2011 0048 FFF7FEFF 		bl	HAL_Delay
 2012              	.LVL254:
 2013              	.LBE5:
 973:Src/main.c    ****     }
 2014              		.loc 1 973 0 discriminator 1
 2015 004c E7E7     		b	.L122
 2016              	.L125:
 2017 004e 00BF     		.align	2
 2018              	.L124:
 2019 0050 00000000 		.word	hadc1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 55


 2020 0054 00000000 		.word	dma_buffer
 2021 0058 00000000 		.word	adc_values
 2022 005c B4010000 		.word	.LC21
 2023 0060 C0010000 		.word	.LC22
 2024              		.cfi_endproc
 2025              	.LFE140:
 2027              		.section	.text.test_All,"ax",%progbits
 2028              		.align	2
 2029              		.global	test_All
 2030              		.thumb
 2031              		.thumb_func
 2033              	test_All:
 2034              	.LFB141:
 974:Src/main.c    **** }
 975:Src/main.c    **** 
 976:Src/main.c    **** /**
 977:Src/main.c    ****  * Test all PWM and ADC - Read PWM waves, input ADC voltages 
 978:Src/main.c    ****  * and read values on OLED
 979:Src/main.c    ****  *      htim1 -> CH1, CH2, CH3, CH4
 980:Src/main.c    ****  *      htim3 -> CH1, CH2, CH3
 981:Src/main.c    ****  *      ADC   -> CH5, CH4
 982:Src/main.c    ****  */
 983:Src/main.c    **** void test_All()
 984:Src/main.c    **** {
 2035              		.loc 1 984 0
 2036              		.cfi_startproc
 2037              		@ Volatile: function does not return.
 2038              		@ args = 0, pretend = 0, frame = 0
 2039              		@ frame_needed = 0, uses_anonymous_args = 0
 2040 0000 08B5     		push	{r3, lr}
 2041              	.LCFI28:
 2042              		.cfi_def_cfa_offset 8
 2043              		.cfi_offset 3, -8
 2044              		.cfi_offset 14, -4
 985:Src/main.c    ****     test_PWM_htim1();
 2045              		.loc 1 985 0
 2046 0002 FFF7FEFF 		bl	test_PWM_htim1
 2047              	.LVL255:
 986:Src/main.c    ****     test_PWM_htim3();
 2048              		.loc 1 986 0
 2049 0006 FFF7FEFF 		bl	test_PWM_htim3
 2050              	.LVL256:
 987:Src/main.c    ****     test_ADC();
 2051              		.loc 1 987 0
 2052 000a FFF7FEFF 		bl	test_ADC
 2053              	.LVL257:
 2054              		.cfi_endproc
 2055              	.LFE141:
 2057 000e 00BF     		.section	.text._Error_Handler,"ax",%progbits
 2058              		.align	2
 2059              		.global	_Error_Handler
 2060              		.thumb
 2061              		.thumb_func
 2063              	_Error_Handler:
 2064              	.LFB142:
 988:Src/main.c    **** }
 989:Src/main.c    **** // ******
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 56


 990:Src/main.c    **** // END TESTS
 991:Src/main.c    **** // ******
 992:Src/main.c    **** 
 993:Src/main.c    **** /* USER CODE END 4 */
 994:Src/main.c    **** 
 995:Src/main.c    **** /**
 996:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 997:Src/main.c    ****   * @param  file: The file name as string.
 998:Src/main.c    ****   * @param  line: The line in file as a number.
 999:Src/main.c    ****   * @retval None
1000:Src/main.c    ****   */
1001:Src/main.c    **** void _Error_Handler(char *file, int line)
1002:Src/main.c    **** {
 2065              		.loc 1 1002 0
 2066              		.cfi_startproc
 2067              		@ Volatile: function does not return.
 2068              		@ args = 0, pretend = 0, frame = 0
 2069              		@ frame_needed = 0, uses_anonymous_args = 0
 2070              		@ link register save eliminated.
 2071              	.LVL258:
 2072              	.L129:
1003:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
1004:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
1005:Src/main.c    ****     while (1)
1006:Src/main.c    ****     {
1007:Src/main.c    ****     }
 2073              		.loc 1 1007 0 discriminator 1
 2074 0000 FEE7     		b	.L129
 2075              		.cfi_endproc
 2076              	.LFE142:
 2078 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 2079              		.align	2
 2080              		.global	SystemClock_Config
 2081              		.thumb
 2082              		.thumb_func
 2084              	SystemClock_Config:
 2085              	.LFB125:
 356:Src/main.c    **** 
 2086              		.loc 1 356 0
 2087              		.cfi_startproc
 2088              		@ args = 0, pretend = 0, frame = 80
 2089              		@ frame_needed = 0, uses_anonymous_args = 0
 2090 0000 00B5     		push	{lr}
 2091              	.LCFI29:
 2092              		.cfi_def_cfa_offset 4
 2093              		.cfi_offset 14, -4
 2094 0002 95B0     		sub	sp, sp, #84
 2095              	.LCFI30:
 2096              		.cfi_def_cfa_offset 88
 2097              	.LBB6:
 363:Src/main.c    **** 
 2098              		.loc 1 363 0
 2099 0004 0022     		movs	r2, #0
 2100 0006 0192     		str	r2, [sp, #4]
 2101 0008 2A4B     		ldr	r3, .L134
 2102 000a 196C     		ldr	r1, [r3, #64]
 2103 000c 41F08051 		orr	r1, r1, #268435456
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 57


 2104 0010 1964     		str	r1, [r3, #64]
 2105 0012 1B6C     		ldr	r3, [r3, #64]
 2106 0014 03F08053 		and	r3, r3, #268435456
 2107 0018 0193     		str	r3, [sp, #4]
 2108 001a 019B     		ldr	r3, [sp, #4]
 2109              	.LBE6:
 2110              	.LBB7:
 365:Src/main.c    **** 
 2111              		.loc 1 365 0
 2112 001c 0292     		str	r2, [sp, #8]
 2113 001e 2649     		ldr	r1, .L134+4
 2114 0020 0B68     		ldr	r3, [r1]
 2115 0022 23F44043 		bic	r3, r3, #49152
 2116 0026 43F40043 		orr	r3, r3, #32768
 2117 002a 0B60     		str	r3, [r1]
 2118 002c 0B68     		ldr	r3, [r1]
 2119 002e 03F44043 		and	r3, r3, #49152
 2120 0032 0293     		str	r3, [sp, #8]
 2121 0034 029B     		ldr	r3, [sp, #8]
 2122              	.LBE7:
 369:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2123              		.loc 1 369 0
 2124 0036 0223     		movs	r3, #2
 2125 0038 0893     		str	r3, [sp, #32]
 370:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 2126              		.loc 1 370 0
 2127 003a 0121     		movs	r1, #1
 2128 003c 0B91     		str	r1, [sp, #44]
 371:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2129              		.loc 1 371 0
 2130 003e 1021     		movs	r1, #16
 2131 0040 0C91     		str	r1, [sp, #48]
 372:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2132              		.loc 1 372 0
 2133 0042 0E93     		str	r3, [sp, #56]
 373:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 2134              		.loc 1 373 0
 2135 0044 0F92     		str	r2, [sp, #60]
 374:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 2136              		.loc 1 374 0
 2137 0046 0822     		movs	r2, #8
 2138 0048 1092     		str	r2, [sp, #64]
 375:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2139              		.loc 1 375 0
 2140 004a 4822     		movs	r2, #72
 2141 004c 1192     		str	r2, [sp, #68]
 376:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 2142              		.loc 1 376 0
 2143 004e 1293     		str	r3, [sp, #72]
 377:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2144              		.loc 1 377 0
 2145 0050 0423     		movs	r3, #4
 2146 0052 1393     		str	r3, [sp, #76]
 378:Src/main.c    ****   {
 2147              		.loc 1 378 0
 2148 0054 08A8     		add	r0, sp, #32
 2149 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 58


 2150              	.LVL259:
 2151 005a 20B1     		cbz	r0, .L131
 380:Src/main.c    ****   }
 2152              		.loc 1 380 0
 2153 005c 1748     		ldr	r0, .L134+8
 2154 005e 4FF4BE71 		mov	r1, #380
 2155 0062 FFF7FEFF 		bl	_Error_Handler
 2156              	.LVL260:
 2157              	.L131:
 385:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2158              		.loc 1 385 0
 2159 0066 0F23     		movs	r3, #15
 2160 0068 0393     		str	r3, [sp, #12]
 387:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2161              		.loc 1 387 0
 2162 006a 0221     		movs	r1, #2
 2163 006c 0491     		str	r1, [sp, #16]
 388:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2164              		.loc 1 388 0
 2165 006e 0023     		movs	r3, #0
 2166 0070 0593     		str	r3, [sp, #20]
 389:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2167              		.loc 1 389 0
 2168 0072 4FF48052 		mov	r2, #4096
 2169 0076 0692     		str	r2, [sp, #24]
 390:Src/main.c    **** 
 2170              		.loc 1 390 0
 2171 0078 0793     		str	r3, [sp, #28]
 392:Src/main.c    ****   {
 2172              		.loc 1 392 0
 2173 007a 03A8     		add	r0, sp, #12
 2174 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2175              	.LVL261:
 2176 0080 20B1     		cbz	r0, .L132
 394:Src/main.c    ****   }
 2177              		.loc 1 394 0
 2178 0082 0E48     		ldr	r0, .L134+8
 2179 0084 4FF4C571 		mov	r1, #394
 2180 0088 FFF7FEFF 		bl	_Error_Handler
 2181              	.LVL262:
 2182              	.L132:
 399:Src/main.c    **** 
 2183              		.loc 1 399 0
 2184 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2185              	.LVL263:
 2186 0090 0B4B     		ldr	r3, .L134+12
 2187 0092 A3FB0030 		umull	r3, r0, r3, r0
 2188 0096 8009     		lsrs	r0, r0, #6
 2189 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 2190              	.LVL264:
 403:Src/main.c    **** 
 2191              		.loc 1 403 0
 2192 009c 0420     		movs	r0, #4
 2193 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 2194              	.LVL265:
 406:Src/main.c    **** }
 2195              		.loc 1 406 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 59


 2196 00a2 4FF0FF30 		mov	r0, #-1
 2197 00a6 0021     		movs	r1, #0
 2198 00a8 0A46     		mov	r2, r1
 2199 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 2200              	.LVL266:
 407:Src/main.c    **** 
 2201              		.loc 1 407 0
 2202 00ae 15B0     		add	sp, sp, #84
 2203              	.LCFI31:
 2204              		.cfi_def_cfa_offset 4
 2205              		@ sp needed
 2206 00b0 5DF804FB 		ldr	pc, [sp], #4
 2207              	.L135:
 2208              		.align	2
 2209              	.L134:
 2210 00b4 00380240 		.word	1073887232
 2211 00b8 00700040 		.word	1073770496
 2212 00bc CC010000 		.word	.LC23
 2213 00c0 D34D6210 		.word	274877907
 2214              		.cfi_endproc
 2215              	.LFE125:
 2217              		.section	.text.main,"ax",%progbits
 2218              		.align	2
 2219              		.global	main
 2220              		.thumb
 2221              		.thumb_func
 2223              	main:
 2224              	.LFB124:
 115:Src/main.c    ****   /* USER CODE BEGIN 1 */
 2225              		.loc 1 115 0
 2226              		.cfi_startproc
 2227              		@ args = 0, pretend = 0, frame = 24
 2228              		@ frame_needed = 0, uses_anonymous_args = 0
 2229 0000 70B5     		push	{r4, r5, r6, lr}
 2230              	.LCFI32:
 2231              		.cfi_def_cfa_offset 16
 2232              		.cfi_offset 4, -16
 2233              		.cfi_offset 5, -12
 2234              		.cfi_offset 6, -8
 2235              		.cfi_offset 14, -4
 2236 0002 88B0     		sub	sp, sp, #32
 2237              	.LCFI33:
 2238              		.cfi_def_cfa_offset 48
 123:Src/main.c    **** 
 2239              		.loc 1 123 0
 2240 0004 FFF7FEFF 		bl	HAL_Init
 2241              	.LVL267:
 130:Src/main.c    **** 
 2242              		.loc 1 130 0
 2243 0008 FFF7FEFF 		bl	SystemClock_Config
 2244              	.LVL268:
 137:Src/main.c    ****   MX_DMA_Init();
 2245              		.loc 1 137 0
 2246 000c FFF7FEFF 		bl	MX_GPIO_Init
 2247              	.LVL269:
 138:Src/main.c    ****   MX_TIM3_Init();
 2248              		.loc 1 138 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 60


 2249 0010 FFF7FEFF 		bl	MX_DMA_Init
 2250              	.LVL270:
 139:Src/main.c    ****   MX_TIM1_Init();
 2251              		.loc 1 139 0
 2252 0014 FFF7FEFF 		bl	MX_TIM3_Init
 2253              	.LVL271:
 140:Src/main.c    ****   MX_TIM2_Init();
 2254              		.loc 1 140 0
 2255 0018 FFF7FEFF 		bl	MX_TIM1_Init
 2256              	.LVL272:
 141:Src/main.c    ****   MX_ADC1_Init();
 2257              		.loc 1 141 0
 2258 001c FFF7FEFF 		bl	MX_TIM2_Init
 2259              	.LVL273:
 142:Src/main.c    ****   MX_TIM4_Init();
 2260              		.loc 1 142 0
 2261 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2262              	.LVL274:
 143:Src/main.c    ****   MX_TIM9_Init();
 2263              		.loc 1 143 0
 2264 0024 FFF7FEFF 		bl	MX_TIM4_Init
 2265              	.LVL275:
 144:Src/main.c    ****   MX_TIM5_Init();
 2266              		.loc 1 144 0
 2267 0028 FFF7FEFF 		bl	MX_TIM9_Init
 2268              	.LVL276:
 145:Src/main.c    ****   MX_I2C1_Init();
 2269              		.loc 1 145 0
 2270 002c FFF7FEFF 		bl	MX_TIM5_Init
 2271              	.LVL277:
 146:Src/main.c    ****   MX_USART6_UART_Init();
 2272              		.loc 1 146 0
 2273 0030 FFF7FEFF 		bl	MX_I2C1_Init
 2274              	.LVL278:
 147:Src/main.c    ****   /* USER CODE BEGIN 2 */
 2275              		.loc 1 147 0
 2276 0034 FFF7FEFF 		bl	MX_USART6_UART_Init
 2277              	.LVL279:
 164:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 2278              		.loc 1 164 0
 2279 0038 6948     		ldr	r0, .L147
 2280 003a 1821     		movs	r1, #24
 2281 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2282              	.LVL280:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 2283              		.loc 1 165 0
 2284 0040 6848     		ldr	r0, .L147+4
 2285 0042 1821     		movs	r1, #24
 2286 0044 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 2287              	.LVL281:
 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 2288              		.loc 1 166 0
 2289 0048 674C     		ldr	r4, .L147+8
 2290 004a 2046     		mov	r0, r4
 2291 004c 0021     		movs	r1, #0
 2292 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2293              	.LVL282:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 61


 167:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 2294              		.loc 1 167 0
 2295 0052 2046     		mov	r0, r4
 2296 0054 0421     		movs	r1, #4
 2297 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2298              	.LVL283:
 168:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 2299              		.loc 1 168 0
 2300 005a 2046     		mov	r0, r4
 2301 005c 0821     		movs	r1, #8
 2302 005e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2303              	.LVL284:
 169:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2304              		.loc 1 169 0
 2305 0062 2046     		mov	r0, r4
 2306 0064 0C21     		movs	r1, #12
 2307 0066 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2308              	.LVL285:
 170:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 2309              		.loc 1 170 0
 2310 006a 604C     		ldr	r4, .L147+12
 2311 006c 2046     		mov	r0, r4
 2312 006e 0021     		movs	r1, #0
 2313 0070 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2314              	.LVL286:
 171:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 2315              		.loc 1 171 0
 2316 0074 2046     		mov	r0, r4
 2317 0076 0421     		movs	r1, #4
 2318 0078 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2319              	.LVL287:
 172:Src/main.c    **** 
 2320              		.loc 1 172 0
 2321 007c 2046     		mov	r0, r4
 2322 007e 0821     		movs	r1, #8
 2323 0080 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2324              	.LVL288:
 175:Src/main.c    ****     print("Starting\n", 0);
 2325              		.loc 1 175 0
 2326 0084 FFF7FEFF 		bl	ssd1306_Init
 2327              	.LVL289:
 176:Src/main.c    ****     claw_init(&htim3);
 2328              		.loc 1 176 0
 2329 0088 5948     		ldr	r0, .L147+16
 2330 008a 0021     		movs	r1, #0
 2331 008c FFF7FEFF 		bl	print
 2332              	.LVL290:
 177:Src/main.c    ****     // basket_init(&htim3);
 2333              		.loc 1 177 0
 2334 0090 2046     		mov	r0, r4
 2335 0092 FFF7FEFF 		bl	claw_init
 2336              	.LVL291:
 180:Src/main.c    **** 
 2337              		.loc 1 180 0
 2338 0096 0221     		movs	r1, #2
 2339 0098 0091     		str	r1, [sp]
 2340 009a 0123     		movs	r3, #1
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 62


 2341 009c 0193     		str	r3, [sp, #4]
 2342 009e 02A8     		add	r0, sp, #8
 2343 00a0 0022     		movs	r2, #0
 2344 00a2 1346     		mov	r3, r2
 2345 00a4 FFF7FEFF 		bl	pid_Init
 2346              	.LVL292:
 182:Src/main.c    ****     EDGE_RIGHT_STATE = NOT_FLAGGED;
 2347              		.loc 1 182 0
 2348 00a8 0024     		movs	r4, #0
 2349 00aa 524B     		ldr	r3, .L147+20
 2350 00ac 1C70     		strb	r4, [r3]
 183:Src/main.c    **** 
 2351              		.loc 1 183 0
 2352 00ae 524B     		ldr	r3, .L147+24
 2353 00b0 1C70     		strb	r4, [r3]
 185:Src/main.c    **** 
 2354              		.loc 1 185 0
 2355 00b2 524E     		ldr	r6, .L147+28
 2356 00b4 3188     		ldrh	r1, [r6]
 2357 00b6 524D     		ldr	r5, .L147+32
 2358 00b8 02A8     		add	r0, sp, #8
 2359 00ba 6431     		adds	r1, r1, #100
 2360 00bc 2A88     		ldrh	r2, [r5]
 2361 00be 4FF4FA63 		mov	r3, #2000
 2362 00c2 FFF7FEFF 		bl	drive_straight_time
 2363              	.LVL293:
 188:Src/main.c    ****     HAL_NVIC_EnableIRQ(CLAW_INT_EXTI_IRQn);
 2364              		.loc 1 188 0
 2365 00c6 0620     		movs	r0, #6
 2366 00c8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2367              	.LVL294:
 189:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 2368              		.loc 1 189 0
 2369 00cc 0A20     		movs	r0, #10
 2370 00ce FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 2371              	.LVL295:
 190:Src/main.c    ****     CLAW_INT_STATE = NOT_FLAGGED;
 2372              		.loc 1 190 0
 2373 00d2 4C4B     		ldr	r3, .L147+36
 2374 00d4 1C70     		strb	r4, [r3]
 191:Src/main.c    **** 
 2375              		.loc 1 191 0
 2376 00d6 4C4B     		ldr	r3, .L147+40
 2377 00d8 1C70     		strb	r4, [r3]
 193:Src/main.c    ****     drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 5000);
 2378              		.loc 1 193 0
 2379 00da FFF7FEFF 		bl	alarm_detect
 2380              	.LVL296:
 194:Src/main.c    ****     print("ewok\n", 0);
 2381              		.loc 1 194 0
 2382 00de 02A8     		add	r0, sp, #8
 2383 00e0 3188     		ldrh	r1, [r6]
 2384 00e2 2A88     		ldrh	r2, [r5]
 2385 00e4 41F28833 		movw	r3, #5000
 2386 00e8 FFF7FEFF 		bl	drive_straight_time
 2387              	.LVL297:
 195:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 63


 2388              		.loc 1 195 0
 2389 00ec 4748     		ldr	r0, .L147+44
 2390 00ee 2146     		mov	r1, r4
 2391 00f0 FFF7FEFF 		bl	print
 2392              	.LVL298:
 2393              	.L144:
 2394              	.LBB8:
 206:Src/main.c    ****         {
 2395              		.loc 1 206 0
 2396 00f4 434B     		ldr	r3, .L147+36
 2397 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2398 00f8 012B     		cmp	r3, #1
 2399 00fa 3AD1     		bne	.L137
 2400              	.LBB9:
 209:Src/main.c    ****             // Turn to ewok
 2401              		.loc 1 209 0
 2402 00fc 4448     		ldr	r0, .L147+48
 2403 00fe 0021     		movs	r1, #0
 2404 0100 FFF7FEFF 		bl	print
 2405              	.LVL299:
 211:Src/main.c    **** 
 2406              		.loc 1 211 0
 2407 0104 FFF7FEFF 		bl	turn
 2408              	.LVL300:
 215:Src/main.c    ****             while(HAL_GetTick()-time<3000){
 2409              		.loc 1 215 0
 2410 0108 FFF7FEFF 		bl	HAL_GetTick
 2411              	.LVL301:
 2412 010c 0446     		mov	r4, r0
 2413              	.LVL302:
 216:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2414              		.loc 1 216 0
 2415 010e 22E0     		b	.L138
 2416              	.LVL303:
 2417              	.L140:
 217:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, RIGHT_SPEED);
 2418              		.loc 1 217 0
 2419 0110 0020     		movs	r0, #0
 2420 0112 3A4B     		ldr	r3, .L147+28
 2421 0114 1988     		ldrh	r1, [r3]
 2422 0116 FFF7FEFF 		bl	set_motor_speed
 2423              	.LVL304:
 218:Src/main.c    ****                 drive_straight(&enc_pid);
 2424              		.loc 1 218 0
 2425 011a 0820     		movs	r0, #8
 2426 011c 384B     		ldr	r3, .L147+32
 2427 011e 1988     		ldrh	r1, [r3]
 2428 0120 FFF7FEFF 		bl	set_motor_speed
 2429              	.LVL305:
 219:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, 0);
 2430              		.loc 1 219 0
 2431 0124 02A8     		add	r0, sp, #8
 2432 0126 FFF7FEFF 		bl	drive_straight
 2433              	.LVL306:
 220:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_3, 0);
 2434              		.loc 1 220 0
 2435 012a 0020     		movs	r0, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 64


 2436 012c 0146     		mov	r1, r0
 2437 012e FFF7FEFF 		bl	set_motor_speed
 2438              	.LVL307:
 221:Src/main.c    ****                 // If we trip claw interrupt, debounce and grab it
 2439              		.loc 1 221 0
 2440 0132 0820     		movs	r0, #8
 2441 0134 0021     		movs	r1, #0
 2442 0136 FFF7FEFF 		bl	set_motor_speed
 2443              	.LVL308:
 223:Src/main.c    ****                 {
 2444              		.loc 1 223 0
 2445 013a 3648     		ldr	r0, .L147+52
 2446 013c 1021     		movs	r1, #16
 2447 013e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2448              	.LVL309:
 2449 0142 0128     		cmp	r0, #1
 2450 0144 07D1     		bne	.L138
 225:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 2451              		.loc 1 225 0
 2452 0146 3448     		ldr	r0, .L147+56
 2453 0148 0021     		movs	r1, #0
 2454 014a FFF7FEFF 		bl	print
 2455              	.LVL310:
 226:Src/main.c    ****                     break;
 2456              		.loc 1 226 0
 2457 014e 02A8     		add	r0, sp, #8
 2458 0150 FFF7FEFF 		bl	debounce_and_grab
 2459              	.LVL311:
 227:Src/main.c    ****                 }
 2460              		.loc 1 227 0
 2461 0154 06E0     		b	.L139
 2462              	.L138:
 216:Src/main.c    ****                 set_motor_speed(TIM_CHANNEL_1, LEFT_SPEED);
 2463              		.loc 1 216 0
 2464 0156 FFF7FEFF 		bl	HAL_GetTick
 2465              	.LVL312:
 2466 015a 001B     		subs	r0, r0, r4
 2467 015c 40F6B733 		movw	r3, #2999
 2468 0160 9842     		cmp	r0, r3
 2469 0162 D5D9     		bls	.L140
 2470              	.L139:
 231:Src/main.c    ****             PI_INT_STATE = NOT_FLAGGED;
 2471              		.loc 1 231 0
 2472 0164 2948     		ldr	r0, .L147+44
 2473 0166 0021     		movs	r1, #0
 2474 0168 FFF7FEFF 		bl	print
 2475              	.LVL313:
 232:Src/main.c    ****         }
 2476              		.loc 1 232 0
 2477 016c 0022     		movs	r2, #0
 2478 016e 254B     		ldr	r3, .L147+36
 2479 0170 1A70     		strb	r2, [r3]
 2480              	.LVL314:
 2481              	.L137:
 2482              	.LBE9:
 235:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 2483              		.loc 1 235 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 65


 2484 0172 0020     		movs	r0, #0
 2485 0174 0146     		mov	r1, r0
 2486 0176 FFF7FEFF 		bl	set_motor_speed
 2487              	.LVL315:
 236:Src/main.c    ****         uint32_t time = HAL_GetTick();
 2488              		.loc 1 236 0
 2489 017a 0820     		movs	r0, #8
 2490 017c 0021     		movs	r1, #0
 2491 017e FFF7FEFF 		bl	set_motor_speed
 2492              	.LVL316:
 237:Src/main.c    ****         while(HAL_GetTick()-time<3000 && PI_INT_STATE == NOT_FLAGGED)
 2493              		.loc 1 237 0
 2494 0182 FFF7FEFF 		bl	HAL_GetTick
 2495              	.LVL317:
 2496 0186 0446     		mov	r4, r0
 2497              	.LVL318:
 238:Src/main.c    ****         {
 2498              		.loc 1 238 0
 2499 0188 0DE0     		b	.L141
 2500              	.LVL319:
 2501              	.L143:
 240:Src/main.c    ****                 {
 2502              		.loc 1 240 0
 2503 018a 2248     		ldr	r0, .L147+52
 2504 018c 1021     		movs	r1, #16
 2505 018e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2506              	.LVL320:
 2507 0192 0128     		cmp	r0, #1
 2508 0194 07D1     		bne	.L141
 242:Src/main.c    ****                     debounce_and_grab(&enc_pid);
 2509              		.loc 1 242 0
 2510 0196 2048     		ldr	r0, .L147+56
 2511 0198 0021     		movs	r1, #0
 2512 019a FFF7FEFF 		bl	print
 2513              	.LVL321:
 243:Src/main.c    ****                     break;
 2514              		.loc 1 243 0
 2515 019e 02A8     		add	r0, sp, #8
 2516 01a0 FFF7FEFF 		bl	debounce_and_grab
 2517              	.LVL322:
 244:Src/main.c    ****                 }
 2518              		.loc 1 244 0
 2519 01a4 0AE0     		b	.L142
 2520              	.L141:
 238:Src/main.c    ****         {
 2521              		.loc 1 238 0
 2522 01a6 FFF7FEFF 		bl	HAL_GetTick
 2523              	.LVL323:
 2524 01aa 001B     		subs	r0, r0, r4
 2525 01ac 40F6B733 		movw	r3, #2999
 2526 01b0 9842     		cmp	r0, r3
 2527 01b2 03D8     		bhi	.L142
 238:Src/main.c    ****         {
 2528              		.loc 1 238 0 is_stmt 0 discriminator 1
 2529 01b4 134B     		ldr	r3, .L147+36
 2530 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2531 01b8 002B     		cmp	r3, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 66


 2532 01ba E6D0     		beq	.L143
 2533              	.L142:
 247:Src/main.c    ****             drive_straight_time(&enc_pid, LEFT_SPEED, RIGHT_SPEED, 750);
 2534              		.loc 1 247 0 is_stmt 1
 2535 01bc 114B     		ldr	r3, .L147+36
 2536 01be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2537 01c0 012B     		cmp	r3, #1
 2538 01c2 97D0     		beq	.L144
 248:Src/main.c    ****             print("ewok\n", 0);
 2539              		.loc 1 248 0
 2540 01c4 02A8     		add	r0, sp, #8
 2541 01c6 0D4B     		ldr	r3, .L147+28
 2542 01c8 1988     		ldrh	r1, [r3]
 2543 01ca 0D4B     		ldr	r3, .L147+32
 2544 01cc 1A88     		ldrh	r2, [r3]
 2545 01ce 40F2EE23 		movw	r3, #750
 2546 01d2 FFF7FEFF 		bl	drive_straight_time
 2547              	.LVL324:
 249:Src/main.c    ****         }
 2548              		.loc 1 249 0
 2549 01d6 0D48     		ldr	r0, .L147+44
 2550 01d8 0021     		movs	r1, #0
 2551 01da FFF7FEFF 		bl	print
 2552              	.LVL325:
 2553 01de 89E7     		b	.L144
 2554              	.L148:
 2555              		.align	2
 2556              	.L147:
 2557 01e0 00000000 		.word	htim4
 2558 01e4 00000000 		.word	htim5
 2559 01e8 00000000 		.word	htim1
 2560 01ec 00000000 		.word	htim3
 2561 01f0 0C000000 		.word	.LC1
 2562 01f4 00000000 		.word	EDGE_LEFT_STATE
 2563 01f8 00000000 		.word	EDGE_RIGHT_STATE
 2564 01fc 00000000 		.word	.LANCHOR1
 2565 0200 00000000 		.word	.LANCHOR0
 2566 0204 00000000 		.word	PI_INT_STATE
 2567 0208 00000000 		.word	CLAW_INT_STATE
 2568 020c D8010000 		.word	.LC24
 2569 0210 E0010000 		.word	.LC25
 2570 0214 00040240 		.word	1073873920
 2571 0218 A4010000 		.word	.LC20
 2572              	.LBE8:
 2573              		.cfi_endproc
 2574              	.LFE124:
 2576              		.global	ewok_cnt
 2577              		.comm	adc_values,8192,4
 2578              		.comm	dma_buffer,8192,4
 2579              		.global	RIGHT_SPEED
 2580              		.global	LEFT_SPEED
 2581              		.section	.data.RIGHT_SPEED,"aw",%progbits
 2582              		.align	1
 2583              		.set	.LANCHOR0,. + 0
 2586              	RIGHT_SPEED:
 2587 0000 5802     		.short	600
 2588              		.section	.data.LEFT_SPEED,"aw",%progbits
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 67


 2589              		.align	1
 2590              		.set	.LANCHOR1,. + 0
 2593              	LEFT_SPEED:
 2594 0000 5802     		.short	600
 2595              		.section	.rodata.str1.4,"aMS",%progbits,1
 2596              		.align	2
 2597              	.LC0:
 2598 0000 474F4552 		.ascii	"GOERT %d\012\000"
 2598      54202564 
 2598      0A00
 2599 000a 0000     		.space	2
 2600              	.LC1:
 2601 000c 53746172 		.ascii	"Starting\012\000"
 2601      74696E67 
 2601      0A00
 2602 0016 0000     		.space	2
 2603              	.LC2:
 2604 0018 256C750A 		.ascii	"%lu\012\000"
 2604      00
 2605 001d 000000   		.space	3
 2606              	.LC3:
 2607 0020 5455524E 		.ascii	"TURN | cnts: %d\012\000"
 2607      207C2063 
 2607      6E74733A 
 2607      2025640A 
 2607      00
 2608 0031 000000   		.space	3
 2609              	.LC4:
 2610 0034 5455524E 		.ascii	"TURN | vlts: %d.%d\012\000"
 2610      207C2076 
 2610      6C74733A 
 2610      2025642E 
 2610      25640A00 
 2611              	.LC5:
 2612 0048 5455524E 		.ascii	"TURN | ADC_VAL: %d\012\000"
 2612      207C2041 
 2612      44435F56 
 2612      414C3A20 
 2612      25640A00 
 2613              	.LC6:
 2614 005c 5455524E 		.ascii	"TURN | TIM5->CNT: %lu\012\000"
 2614      207C2054 
 2614      494D352D 
 2614      3E434E54 
 2614      3A20256C 
 2615 0073 00       		.space	1
 2616              	.LC7:
 2617 0074 5455524E 		.ascii	"TURN | TIM4->CNT: %lu\012\000"
 2617      207C2054 
 2617      494D342D 
 2617      3E434E54 
 2617      3A20256C 
 2618 008b 00       		.space	1
 2619              	.LC8:
 2620 008c 5455524E 		.ascii	"TURN_DEG | turn count: %d\012\000"
 2620      5F444547 
 2620      207C2074 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 68


 2620      75726E20 
 2620      636F756E 
 2621 00a7 00       		.space	1
 2622              	.LC9:
 2623 00a8 5455524E 		.ascii	"TURN_DEG | TIM5->CNT: %lu\012\000"
 2623      5F444547 
 2623      207C2054 
 2623      494D352D 
 2623      3E434E54 
 2624 00c3 00       		.space	1
 2625              	.LC10:
 2626 00c4 5455524E 		.ascii	"TURN_DEG | TIM4->CNT: %lu\012\000"
 2626      5F444547 
 2626      207C2054 
 2626      494D342D 
 2626      3E434E54 
 2627 00df 00       		.space	1
 2628              	.LC11:
 2629 00e0 53515541 		.ascii	"SQUARE_EDGE | EL: %d\012\000"
 2629      52455F45 
 2629      44474520 
 2629      7C20454C 
 2629      3A202564 
 2630 00f6 0000     		.space	2
 2631              	.LC12:
 2632 00f8 53515541 		.ascii	"SQUARE_EDGE | ER: %d\012\000"
 2632      52455F45 
 2632      44474520 
 2632      7C204552 
 2632      3A202564 
 2633 010e 0000     		.space	2
 2634              	.LC13:
 2635 0110 0A00     		.ascii	"\012\000"
 2636 0112 0000     		.space	2
 2637              	.LC14:
 2638 0114 434C4157 		.ascii	"CLAW_GRAB | grabbing ewok\012\000"
 2638      5F475241 
 2638      42207C20 
 2638      67726162 
 2638      62696E67 
 2639 012f 00       		.space	1
 2640              	.LC15:
 2641 0130 46697273 		.ascii	"First ewok captured\012\000"
 2641      74206577 
 2641      6F6B2063 
 2641      61707475 
 2641      7265640A 
 2642 0145 000000   		.space	3
 2643              	.LC16:
 2644 0148 5365636F 		.ascii	"Second ewok captured\012\000"
 2644      6E642065 
 2644      776F6B20 
 2644      63617074 
 2644      75726564 
 2645 015e 0000     		.space	2
 2646              	.LC17:
 2647 0160 54686972 		.ascii	"Third ewok captured\012\000"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 69


 2647      64206577 
 2647      6F6B2063 
 2647      61707475 
 2647      7265640A 
 2648 0175 000000   		.space	3
 2649              	.LC18:
 2650 0178 466F7572 		.ascii	"Fourth ewok captured\012\000"
 2650      74682065 
 2650      776F6B20 
 2650      63617074 
 2650      75726564 
 2651 018e 0000     		.space	2
 2652              	.LC19:
 2653 0190 43686577 		.ascii	"Chewie captured\012\000"
 2653      69652063 
 2653      61707475 
 2653      7265640A 
 2653      00
 2654 01a1 000000   		.space	3
 2655              	.LC20:
 2656 01a4 436C6177 		.ascii	"Claw interrupt\012\000"
 2656      20696E74 
 2656      65727275 
 2656      70740A00 
 2657              	.LC21:
 2658 01b4 63685F35 		.ascii	"ch_5: %d\012\000"
 2658      3A202564 
 2658      0A00
 2659 01be 0000     		.space	2
 2660              	.LC22:
 2661 01c0 63685F34 		.ascii	"ch_4: %d\012\000"
 2661      3A202564 
 2661      0A00
 2662 01ca 0000     		.space	2
 2663              	.LC23:
 2664 01cc 5372632F 		.ascii	"Src/main.c\000"
 2664      6D61696E 
 2664      2E6300
 2665 01d7 00       		.space	1
 2666              	.LC24:
 2667 01d8 65776F6B 		.ascii	"ewok\012\000"
 2667      0A00
 2668 01de 0000     		.space	2
 2669              	.LC25:
 2670 01e0 50692069 		.ascii	"Pi interrupt\012\000"
 2670      6E746572 
 2670      72757074 
 2670      0A00
 2671              		.section	.bss.ewok_cnt,"aw",%nobits
 2672              		.align	2
 2673              		.set	.LANCHOR2,. + 0
 2676              	ewok_cnt:
 2677 0000 00000000 		.space	4
 2678              		.text
 2679              	.Letext0:
 2680              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2681              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 70


 2682              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 2683              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 2684              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2685              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2686              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2687              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2688              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2689              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2690              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2691              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2692              		.file 14 "Inc/pid.h"
 2693              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 2694              		.file 16 "Inc/adc.h"
 2695              		.file 17 "Inc/tim.h"
 2696              		.file 18 "Inc/usart.h"
 2697              		.file 19 "Inc/extern_vars.h"
 2698              		.file 20 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 2699              		.file 21 "Inc/filter.h"
 2700              		.file 22 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 2701              		.file 23 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2702              		.file 24 "Inc/claw.h"
 2703              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2704              		.file 26 "Inc/gpio.h"
 2705              		.file 27 "Inc/dma.h"
 2706              		.file 28 "Inc/i2c.h"
 2707              		.file 29 "Inc/ssd1306.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 71


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000002000 adc_values
                            *COM*:0000000000002000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:102    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:107    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:134    .text.print:0000000000000018 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:142    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:147    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:254    .text.alarm_detect:00000000000000b0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:264    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:269    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:382    .text.menu:000000000000009c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:389    .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:394    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:460    .text.set_motor_speed:000000000000004c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:467    .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:472    .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:701    .text.turn:0000000000000160 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:725    .text.turn_deg:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:730    .text.turn_deg:0000000000000000 turn_deg
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:911    .text.turn_deg:0000000000000108 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:927    .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:932    .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:987    .text.encoder_pid:000000000000003c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:992    .text.drive_straight:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:997    .text.drive_straight:0000000000000000 drive_straight
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1021   .text.square_edge:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1026   .text.square_edge:0000000000000000 square_edge
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1171   .text.square_edge:00000000000000cc $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1180   .text.debounce_and_grab:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1185   .text.debounce_and_grab:0000000000000000 debounce_and_grab
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1727   .text.drive_straight_time:0000000000000000 drive_straight_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1702   .text.debounce_and_grab:0000000000000304 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1722   .text.drive_straight_time:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1812   .text.drive_straight_time:0000000000000068 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1818   .text.test_PWM_htim1:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1823   .text.test_PWM_htim1:0000000000000000 test_PWM_htim1
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1874   .text.test_PWM_htim1:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1879   .text.test_PWM_htim3:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1884   .text.test_PWM_htim3:0000000000000000 test_PWM_htim3
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1942   .text.test_PWM_htim3:0000000000000040 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1947   .text.test_ADC:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:1952   .text.test_ADC:0000000000000000 test_ADC
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2019   .text.test_ADC:0000000000000050 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2028   .text.test_All:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2033   .text.test_All:0000000000000000 test_All
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2058   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2063   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2079   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2084   .text.SystemClock_Config:0000000000000000 SystemClock_Config
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 72


/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2210   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2218   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2223   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2557   .text.main:00000000000001e0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2676   .bss.ewok_cnt:0000000000000000 ewok_cnt
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2586   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2593   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2582   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2589   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2596   .rodata.str1.4:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s:2672   .bss.ewok_cnt:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
strlen
HAL_UART_Transmit
huart6
__aeabi_d2iz
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
sprintf
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
HAL_GPIO_ReadPin
pid_Init
htim1
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dadd
pid_GetGain
HAL_GetTick
close_claw
arm_up
open_claw
arm_down
slow_actuate
htim3
PI_INT_STATE
EDGE_LEFT_STATE
EDGE_RIGHT_STATE
CLAW_INT_STATE
HAL_TIM_PWM_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//cc17Paf9.s 			page 73


HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_ADC1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
MX_I2C1_Init
MX_USART6_UART_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
HAL_NVIC_EnableIRQ
htim4
htim5
