ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "encoder.h"
  53:Src/main.c    **** #include "pid.h"
  54:Src/main.c    **** #include "filter.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** #include "claw.h"
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** //TODO: Drive system, signed int32, giving forward backward, encoders, coordinate system.
  66:Src/main.c    **** uint16_t LEFT_SPEED = 0.61*MOTOR_SPEED;
  67:Src/main.c    **** uint16_t RIGHT_SPEED = 0.69*MOTOR_SPEED;
  68:Src/main.c    **** uint32_t dma_buffer[3072];
  69:Src/main.c    **** uint32_t adc_values[3072];
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE END PV */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  74:Src/main.c    **** void SystemClock_Config(void);
  75:Src/main.c    **** 
  76:Src/main.c    **** /* USER CODE BEGIN PFP */
  77:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  78:Src/main.c    **** void print(char msg[], int row);
  79:Src/main.c    **** void do_pid(PID_t *pid_struct);
  80:Src/main.c    **** PID_t menu();
  81:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin);
  82:Src/main.c    **** void pi_navigation();
  83:Src/main.c    **** float calculate_heading(uint32_t adc_val);
  84:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc);
  85:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed);
  86:Src/main.c    **** void turn();
  87:Src/main.c    **** void alarm_detect();
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END PFP */
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE BEGIN 0 */
  92:Src/main.c    **** /**
  93:Src/main.c    ****  * @brief Circu;ar DMA buffer loading on each full buffer
  94:Src/main.c    ****  * DMA uses dma_buffer, transfers data to adc_values for us to use
  95:Src/main.c    ****  * Order of buffer: ir1, ir2, pi, ir1, ir2...
  96:Src/main.c    ****  */
  97:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
  98:Src/main.c    **** {
  29              		.loc 1 98 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  99:Src/main.c    ****     memcpy(adc_values, dma_buffer, sizeof(dma_buffer));
  39              		.loc 1 99 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF44052 		mov	r2, #12288
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	adc_values
  51 0014 00000000 		.word	dma_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.global	__aeabi_ui2d
  56              		.global	__aeabi_dmul
  57              		.global	__aeabi_dsub
  58              		.global	__aeabi_d2f
  59              		.section	.text.calculate_heading,"ax",%progbits
  60              		.align	2
  61              		.global	calculate_heading
  62              		.thumb
  63              		.thumb_func
  65              	calculate_heading:
  66              	.LFB128:
 100:Src/main.c    **** }
 101:Src/main.c    **** /* USER CODE END 0 */
 102:Src/main.c    **** 
 103:Src/main.c    **** /**
 104:Src/main.c    ****   * @brief  The application entry point.
 105:Src/main.c    ****   *
 106:Src/main.c    ****   * @retval None
 107:Src/main.c    ****   */
 108:Src/main.c    **** int main(void)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 4


 109:Src/main.c    **** {
 110:Src/main.c    ****   /* USER CODE BEGIN 1 */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE END 1 */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 117:Src/main.c    ****   HAL_Init();
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* USER CODE BEGIN Init */
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* USER CODE END Init */
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* Configure the system clock */
 124:Src/main.c    ****   SystemClock_Config();
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE END SysInit */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Initialize all configured peripherals */
 131:Src/main.c    ****   MX_GPIO_Init();
 132:Src/main.c    ****   MX_DMA_Init();
 133:Src/main.c    ****   MX_TIM3_Init();
 134:Src/main.c    ****   MX_TIM1_Init();
 135:Src/main.c    ****   MX_TIM2_Init();
 136:Src/main.c    ****   MX_USART6_UART_Init();
 137:Src/main.c    ****   MX_ADC1_Init();
 138:Src/main.c    ****   MX_I2C1_Init();
 139:Src/main.c    ****   MX_TIM4_Init();
 140:Src/main.c    ****   MX_TIM9_Init();
 141:Src/main.c    ****   MX_TIM5_Init();
 142:Src/main.c    ****   /* USER CODE BEGIN 2 */
 143:Src/main.c    **** 
 144:Src/main.c    ****     /* Initialize peripherals */
 145:Src/main.c    ****     /* 
 146:Src/main.c    ****      * Claw jaw: TIM3 CH1
 147:Src/main.c    ****      * Claw arm: TIM3 CH2
 148:Src/main.c    ****      * Basket: TIM3 CH3
 149:Src/main.c    ****      * left forward: TIM1 CH1
 150:Src/main.c    ****      * left backward: TIM1 CH2
 151:Src/main.c    ****      * right forward: TIM1 CH3
 152:Src/main.c    ****      * right backward: TIM1 CH4
 153:Src/main.c    ****      * left encoder: TIM4
 154:Src/main.c    ****      * right encoderL TIM5
 155:Src/main.c    ****      * spare clocks: TIM2, TIM9
 156:Src/main.c    ****      */
 157:Src/main.c    **** 
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 159:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 5


 166:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 167:Src/main.c    **** 
 168:Src/main.c    ****     /* Initialize other stuffs */
 169:Src/main.c    ****     ssd1306_Init();
 170:Src/main.c    ****     print("Starting", 0);
 171:Src/main.c    ****     claw_init(&htim3);
 172:Src/main.c    ****     ///basket_init(&htim3);
 173:Src/main.c    ****     //
 174:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 300);
 175:Src/main.c    ****     
 176:Src/main.c    **** 
 177:Src/main.c    ****     // 3 * gain * kp = 20,000
 178:Src/main.c    ****     /*
 179:Src/main.c    ****        ENCODER_t left_enc = encoder_Init(TIM4);
 180:Src/main.c    ****        ENCODER_t right_enc = encoder_Init(TIM5);
 181:Src/main.c    ****        PID_t left_pid = pid_Init(5, 0, 0, 2, 2);
 182:Src/main.c    ****        PID_t right_pid = pid_Init(5, 0, 0, 2, 2);
 183:Src/main.c    ****        */
 184:Src/main.c    ****     //PID_t pid_struct = menu();
 185:Src/main.c    ****   /* USER CODE END 2 */
 186:Src/main.c    **** 
 187:Src/main.c    ****   /* Infinite loop */
 188:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 189:Src/main.c    ****     while (1)
 190:Src/main.c    ****     {
 191:Src/main.c    **** 
 192:Src/main.c    ****         /*
 193:Src/main.c    ****          * Servo Stuff
 194:Src/main.c    ****          */
 195:Src/main.c    **** 
 196:Src/main.c    **** 
 197:Src/main.c    ****         /*
 198:Src/main.c    ****          * Drive Straight
 199:Src/main.c    ****          *
 200:Src/main.c    ****          encoder_pid(&left_pid, &left_enc, &right_pid, &right_enc);
 201:Src/main.c    ****          */
 202:Src/main.c    **** 
 203:Src/main.c    ****         /*
 204:Src/main.c    ****          * Pi Turning
 205:Src/main.c    ****          *
 206:Src/main.c    ****          if (PI_INT_STATE == FLAGGED)
 207:Src/main.c    ****          {
 208:Src/main.c    ****          print("in pi int", 0);
 209:Src/main.c    ****          turn();
 210:Src/main.c    ****          }
 211:Src/main.c    ****          */
 212:Src/main.c    **** 
 213:Src/main.c    ****         /*
 214:Src/main.c    ****          * EDGE and Object detection
 215:Src/main.c    ****          *
 216:Src/main.c    ****          if(EDGE_RIGHT_STATE == FLAGGED){
 217:Src/main.c    ****          print("ER",0);
 218:Src/main.c    ****          EDGE_RIGHT_STATE = NOT_FLAGGED;
 219:Src/main.c    ****          }
 220:Src/main.c    ****          if(TAPE_RIGHT_STATE == FLAGGED){
 221:Src/main.c    ****          print("TR",0);
 222:Src/main.c    ****          TAPE_RIGHT_STATE = NOT_FLAGGED;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 6


 223:Src/main.c    ****          }
 224:Src/main.c    ****          if(EDGE_LEFT_STATE == FLAGGED){
 225:Src/main.c    ****          print("EL",0);
 226:Src/main.c    ****          EDGE_LEFT_STATE = NOT_FLAGGED;
 227:Src/main.c    ****          }
 228:Src/main.c    **** 
 229:Src/main.c    ****          if(TAPE_LEFT_STATE == FLAGGED){
 230:Src/main.c    ****          print("TL",0);
 231:Src/main.c    ****          TAPE_LEFT_STATE = NOT_FLAGGED;
 232:Src/main.c    ****          }
 233:Src/main.c    ****          */
 234:Src/main.c    **** 
 235:Src/main.c    ****         /*
 236:Src/main.c    ****          * IR DETECTION
 237:Src/main.c    ****          *
 238:Src/main.c    ****          if (IR_INT_STATE == FLAGGED)
 239:Src/main.c    ****          {
 240:Src/main.c    ****          alarm_detect();
 241:Src/main.c    ****         //drive past sensor, enough so as to not trigger interrupt again
 242:Src/main.c    ****         HAL_Delay(2000);
 243:Src/main.c    ****         }*/
 244:Src/main.c    **** 
 245:Src/main.c    ****   /* USER CODE END WHILE */
 246:Src/main.c    **** 
 247:Src/main.c    ****   /* USER CODE BEGIN 3 */
 248:Src/main.c    ****     }
 249:Src/main.c    ****   /* USER CODE END 3 */
 250:Src/main.c    **** 
 251:Src/main.c    **** }
 252:Src/main.c    **** 
 253:Src/main.c    **** /**
 254:Src/main.c    ****   * @brief System Clock Configuration
 255:Src/main.c    ****   * @retval None
 256:Src/main.c    ****   */
 257:Src/main.c    **** void SystemClock_Config(void)
 258:Src/main.c    **** {
 259:Src/main.c    **** 
 260:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 261:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 262:Src/main.c    **** 
 263:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 264:Src/main.c    ****     */
 265:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 266:Src/main.c    **** 
 267:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 268:Src/main.c    **** 
 269:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 270:Src/main.c    ****     */
 271:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 272:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 273:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 274:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 275:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 276:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 277:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 278:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 279:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 7


 280:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 281:Src/main.c    ****   {
 282:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 283:Src/main.c    ****   }
 284:Src/main.c    **** 
 285:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 286:Src/main.c    ****     */
 287:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 288:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 289:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 290:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 291:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 292:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 293:Src/main.c    **** 
 294:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 295:Src/main.c    ****   {
 296:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 297:Src/main.c    ****   }
 298:Src/main.c    **** 
 299:Src/main.c    ****     /**Configure the Systick interrupt time 
 300:Src/main.c    ****     */
 301:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 302:Src/main.c    **** 
 303:Src/main.c    ****     /**Configure the Systick 
 304:Src/main.c    ****     */
 305:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 306:Src/main.c    **** 
 307:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 308:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 309:Src/main.c    **** }
 310:Src/main.c    **** 
 311:Src/main.c    **** /* USER CODE BEGIN 4 */
 312:Src/main.c    **** 
 313:Src/main.c    **** /*
 314:Src/main.c    ****  * Assume motors are not on.
 315:Src/main.c    ****  * Reads adc, turns left or right based on voltage. Left max= 0 , no turn = 1.65 V, right max = 3.3
 316:Src/main.c    ****  */
 317:Src/main.c    **** void turn()
 318:Src/main.c    **** {
 319:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 320:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 321:Src/main.c    ****     HAL_Delay(50);
 322:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 323:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 324:Src/main.c    ****     TIM3->CNT = 0;
 325:Src/main.c    ****     TIM4->CNT = 0;
 326:Src/main.c    ****     char msg[18] = "";
 327:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 328:Src/main.c    ****     print(msg, 0);
 329:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 330:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 331:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
 332:Src/main.c    ****     print(msg, 0);
 333:Src/main.c    ****     if (volts < 0)
 334:Src/main.c    ****     {
 335:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0);
 336:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0.5*MOTOR_SPEED);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 8


 337:Src/main.c    ****         while (TIM4->CNT < counts)
 338:Src/main.c    ****         {
 339:Src/main.c    ****         }
 340:Src/main.c    ****         TIM4->CNT = 0;
 341:Src/main.c    ****     }
 342:Src/main.c    ****     else if (volts > 0)
 343:Src/main.c    ****     {
 344:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0.5*MOTOR_SPEED);
 345:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 346:Src/main.c    ****         while (TIM3->CNT < counts)
 347:Src/main.c    ****         {
 348:Src/main.c    ****         }
 349:Src/main.c    ****         TIM4->CNT = 0;
 350:Src/main.c    ****     }
 351:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0);
 352:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 353:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 354:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 355:Src/main.c    **** }
 356:Src/main.c    **** 
 357:Src/main.c    **** void pi_navigation()
 358:Src/main.c    **** {
 359:Src/main.c    ****     print("Pi nav", 0);
 360:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 361:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 362:Src/main.c    ****     HAL_Delay(500);
 363:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
 364:Src/main.c    ****     if (heading < 0)
 365:Src/main.c    ****     {
 366:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_2, 0.3*MOTOR_SPEED);
 367:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0.3*MOTOR_SPEED);
 368:Src/main.c    ****         heading *= -1;
 369:Src/main.c    ****     }
 370:Src/main.c    ****     else if (heading > 0)
 371:Src/main.c    ****     {
 372:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_1, 0.3*MOTOR_SPEED);
 373:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 0.3*MOTOR_SPEED);
 374:Src/main.c    ****     }
 375:Src/main.c    ****     HAL_Delay(2000 * heading);
 376:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0.3*MOTOR_SPEED);
 377:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0.3*MOTOR_SPEED);
 378:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 379:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 380:Src/main.c    **** }
 381:Src/main.c    **** 
 382:Src/main.c    **** /**
 383:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 384:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 385:Src/main.c    ****  *
 386:Src/main.c    ****  * @param adc_val, value read from ADC.
 387:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 388:Src/main.c    ****  **/
 389:Src/main.c    **** float calculate_heading(uint32_t adc_val)
 390:Src/main.c    **** {
  67              		.loc 1 390 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 9


  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL3:
  72 0000 08B5     		push	{r3, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
 391:Src/main.c    ****     return adc_val / 4096.0 - 0.5;
  77              		.loc 1 391 0
  78 0002 FFF7FEFF 		bl	__aeabi_ui2d
  79              	.LVL4:
  80 0006 0022     		movs	r2, #0
  81 0008 054B     		ldr	r3, .L7
  82 000a FFF7FEFF 		bl	__aeabi_dmul
  83              	.LVL5:
  84 000e 0022     		movs	r2, #0
  85 0010 044B     		ldr	r3, .L7+4
  86 0012 FFF7FEFF 		bl	__aeabi_dsub
  87              	.LVL6:
  88 0016 FFF7FEFF 		bl	__aeabi_d2f
  89              	.LVL7:
 392:Src/main.c    **** }
  90              		.loc 1 392 0
  91 001a 00EE100A 		fmsr	s0, r0
  92 001e 08BD     		pop	{r3, pc}
  93              	.L8:
  94              		.align	2
  95              	.L7:
  96 0020 0000303F 		.word	1060110336
  97 0024 0000E03F 		.word	1071644672
  98              		.cfi_endproc
  99              	.LFE128:
 101              		.global	__aeabi_dcmpgt
 102              		.section	.text.alarm_detect,"ax",%progbits
 103              		.align	2
 104              		.global	alarm_detect
 105              		.thumb
 106              		.thumb_func
 108              	alarm_detect:
 109              	.LFB129:
 393:Src/main.c    **** 
 394:Src/main.c    **** void alarm_detect()
 395:Src/main.c    **** {
 110              		.loc 1 395 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114 0000 00B5     		push	{lr}
 115              	.LCFI2:
 116              		.cfi_def_cfa_offset 4
 117              		.cfi_offset 14, -4
 118 0002 83B0     		sub	sp, sp, #12
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 16
 396:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 121              		.loc 1 396 0
 122 0004 1248     		ldr	r0, .L14
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 10


 123 0006 1349     		ldr	r1, .L14+4
 124 0008 4FF44062 		mov	r2, #3072
 125 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 126              	.LVL8:
 397:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 398:Src/main.c    ****     //HAL_NVIC_DisableIRQ (IRQn_Type IRQn) disbale ir interrupt
 399:Src/main.c    ****     //char msg[20] = "";
 400:Src/main.c    ****     HAL_Delay(500);
 127              		.loc 1 400 0
 128 0010 4FF4FA70 		mov	r0, #500
 129 0014 FFF7FEFF 		bl	HAL_Delay
 130              	.LVL9:
 131              	.L10:
 132              	.LBB2:
 401:Src/main.c    ****     while (1)
 402:Src/main.c    ****     {
 403:Src/main.c    ****         //
 404:Src/main.c    ****         // Sampling frequency: 72e6/2/(495*3)
 405:Src/main.c    ****         // offset 0 : IR1
 406:Src/main.c    ****         double val = goertzel(adc_values, 24242, 9850, sizeof(dma_buffer) / sizeof(dma_buffer[0]), 
 133              		.loc 1 406 0
 134 0018 0023     		movs	r3, #0
 135 001a 0093     		str	r3, [sp]
 136 001c 0E48     		ldr	r0, .L14+8
 137 001e 45F6B261 		movw	r1, #24242
 138 0022 42F27A62 		movw	r2, #9850
 139 0026 4FF44063 		mov	r3, #3072
 140 002a FFF7FEFF 		bl	goertzel
 141              	.LVL10:
 407:Src/main.c    ****         /*
 408:Src/main.c    ****            int predec = (int)(val / 1);
 409:Src/main.c    ****            int postdec = (int)((val - predec) * 1000);
 410:Src/main.c    ****            sprintf(msg, "%d.%d\n", predec, postdec);
 411:Src/main.c    ****            HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 412:Src/main.c    ****            */
 413:Src/main.c    **** 
 414:Src/main.c    ****         //compare
 415:Src/main.c    ****         // 1000 Hz: ranges to about 60, 9850 Hz: ranges to 20
 416:Src/main.c    ****         if (val > 15)
 142              		.loc 1 416 0
 143 002e 51EC100B 		fmrrd	r0, r1, d0
 144 0032 0022     		movs	r2, #0
 145 0034 094B     		ldr	r3, .L14+12
 146 0036 FFF7FEFF 		bl	__aeabi_dcmpgt
 147              	.LVL11:
 148 003a 0028     		cmp	r0, #0
 149 003c ECD0     		beq	.L10
 150              	.LBE2:
 417:Src/main.c    ****         {
 418:Src/main.c    ****             break;
 419:Src/main.c    ****         }
 420:Src/main.c    ****     }
 421:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 151              		.loc 1 421 0
 152 003e 0448     		ldr	r0, .L14
 153 0040 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 154              	.LVL12:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 11


 422:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 155              		.loc 1 422 0
 156 0044 0022     		movs	r2, #0
 157 0046 064B     		ldr	r3, .L14+16
 158 0048 1A70     		strb	r2, [r3]
 423:Src/main.c    **** }
 159              		.loc 1 423 0
 160 004a 03B0     		add	sp, sp, #12
 161              	.LCFI4:
 162              		.cfi_def_cfa_offset 4
 163              		@ sp needed
 164 004c 5DF804FB 		ldr	pc, [sp], #4
 165              	.L15:
 166              		.align	2
 167              	.L14:
 168 0050 00000000 		.word	hadc1
 169 0054 00000000 		.word	dma_buffer
 170 0058 00000000 		.word	adc_values
 171 005c 00002E40 		.word	1076756480
 172 0060 00000000 		.word	IR_INT_STATE
 173              		.cfi_endproc
 174              	.LFE129:
 176              		.section	.text.print,"ax",%progbits
 177              		.align	2
 178              		.global	print
 179              		.thumb
 180              		.thumb_func
 182              	print:
 183              	.LFB131:
 424:Src/main.c    **** 
 425:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin)
 426:Src/main.c    **** {
 427:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 428:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 429:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 430:Src/main.c    ****     HAL_Delay(500);
 431:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 432:Src/main.c    ****     while (1)
 433:Src/main.c    ****     {
 434:Src/main.c    ****         char msg[18] = "";
 435:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
 436:Src/main.c    ****         // freq one
 437:Src/main.c    ****         double val1 = goertzel(adc_values, 20956, freq1, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 438:Src/main.c    ****         int predec = (int)(val1 / 1);
 439:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 440:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 441:Src/main.c    ****         print(msg, 0);
 442:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 443:Src/main.c    ****         //freq2
 444:Src/main.c    ****         double val2 = goertzel(adc_values, 20956, freq2, sizeof(dma_buffer) / sizeof(dma_buffer[0])
 445:Src/main.c    ****         predec = (int)(val2 / 1);
 446:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 447:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 448:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 449:Src/main.c    ****         //compare
 450:Src/main.c    ****         if (val1 > val2)
 451:Src/main.c    ****         {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 12


 452:Src/main.c    ****             break;
 453:Src/main.c    ****         }
 454:Src/main.c    ****     }
 455:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 456:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 457:Src/main.c    **** }
 458:Src/main.c    **** 
 459:Src/main.c    **** /**
 460:Src/main.c    ****  * @brief prints string to row, rows from 0 - 6, resets screen when printing from row 0
 461:Src/main.c    ****  * @param msg, string to print
 462:Src/main.c    ****  * @param row, row to print msg to
 463:Src/main.c    ****  */
 464:Src/main.c    **** void print(char *msg, int row)
 465:Src/main.c    **** {
 184              		.loc 1 465 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              	.LVL13:
 189 0000 38B5     		push	{r3, r4, r5, lr}
 190              	.LCFI5:
 191              		.cfi_def_cfa_offset 16
 192              		.cfi_offset 3, -16
 193              		.cfi_offset 4, -12
 194              		.cfi_offset 5, -8
 195              		.cfi_offset 14, -4
 196 0002 0546     		mov	r5, r0
 466:Src/main.c    ****     if (row == 0)
 197              		.loc 1 466 0
 198 0004 0C46     		mov	r4, r1
 199 0006 11B9     		cbnz	r1, .L17
 467:Src/main.c    ****     {
 468:Src/main.c    ****         ssd1306_Fill(Black);
 200              		.loc 1 468 0
 201 0008 0020     		movs	r0, #0
 202              	.LVL14:
 203 000a FFF7FEFF 		bl	ssd1306_Fill
 204              	.LVL15:
 205              	.L17:
 469:Src/main.c    ****     }
 470:Src/main.c    ****     ssd1306_SetCursor(0, row * 10);
 206              		.loc 1 470 0
 207 000e 04EB8404 		add	r4, r4, r4, lsl #2
 208              	.LVL16:
 209 0012 6100     		lsls	r1, r4, #1
 210 0014 0020     		movs	r0, #0
 211 0016 01F0FE01 		and	r1, r1, #254
 212 001a FFF7FEFF 		bl	ssd1306_SetCursor
 213              	.LVL17:
 471:Src/main.c    ****     ssd1306_WriteString(msg, Font_7x10, White);
 214              		.loc 1 471 0
 215 001e 054B     		ldr	r3, .L19
 216 0020 2846     		mov	r0, r5
 217 0022 93E80600 		ldmia	r3, {r1, r2}
 218 0026 0123     		movs	r3, #1
 219 0028 FFF7FEFF 		bl	ssd1306_WriteString
 220              	.LVL18:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 13


 472:Src/main.c    ****     ssd1306_UpdateScreen();
 221              		.loc 1 472 0
 222 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 223              	.LVL19:
 224 0030 38BD     		pop	{r3, r4, r5, pc}
 225              	.LVL20:
 226              	.L20:
 227 0032 00BF     		.align	2
 228              	.L19:
 229 0034 00000000 		.word	Font_7x10
 230              		.cfi_endproc
 231              	.LFE131:
 233              		.global	__aeabi_d2iz
 234              		.global	__aeabi_i2d
 235              		.section	.text.frequency_comparison,"ax",%progbits
 236              		.align	2
 237              		.global	frequency_comparison
 238              		.thumb
 239              		.thumb_func
 241              	frequency_comparison:
 242              	.LFB130:
 426:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 243              		.loc 1 426 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 32
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              	.LVL21:
 248 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 249              	.LCFI6:
 250              		.cfi_def_cfa_offset 36
 251              		.cfi_offset 4, -36
 252              		.cfi_offset 5, -32
 253              		.cfi_offset 6, -28
 254              		.cfi_offset 7, -24
 255              		.cfi_offset 8, -20
 256              		.cfi_offset 9, -16
 257              		.cfi_offset 10, -12
 258              		.cfi_offset 11, -8
 259              		.cfi_offset 14, -4
 260 0004 8BB0     		sub	sp, sp, #44
 261              	.LCFI7:
 262              		.cfi_def_cfa_offset 80
 263 0006 0390     		str	r0, [sp, #12]
 264 0008 8946     		mov	r9, r1
 427:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 265              		.loc 1 427 0
 266 000a 202A     		cmp	r2, #32
 267 000c 07D0     		beq	.L26
 427:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 268              		.loc 1 427 0 is_stmt 0 discriminator 1
 269 000e 102A     		cmp	r2, #16
 270 0010 02D1     		bne	.L27
 427:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 271              		.loc 1 427 0
 272 0012 4FF00108 		mov	r8, #1
 273 0016 04E0     		b	.L22
 274              	.L27:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 14


 275 0018 4FF00208 		mov	r8, #2
 276 001c 01E0     		b	.L22
 277              	.L26:
 278 001e 4FF00008 		mov	r8, #0
 279              	.L22:
 280              	.LVL22:
 428:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 281              		.loc 1 428 0 is_stmt 1 discriminator 8
 282 0022 4548     		ldr	r0, .L29
 283              	.LVL23:
 284 0024 4549     		ldr	r1, .L29+4
 285              	.LVL24:
 286 0026 4FF44062 		mov	r2, #3072
 287              	.LVL25:
 288 002a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 289              	.LVL26:
 430:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 290              		.loc 1 430 0 discriminator 8
 291 002e 4FF4FA70 		mov	r0, #500
 292 0032 FFF7FEFF 		bl	HAL_Delay
 293              	.LVL27:
 294              	.L25:
 295              	.LBB3:
 434:Src/main.c    ****         // Sampling frequency: 10.6667e6/(2*(239.5+15))
 296              		.loc 1 434 0
 297 0036 0026     		movs	r6, #0
 298 0038 0596     		str	r6, [sp, #20]
 299 003a 0696     		str	r6, [sp, #24]
 300 003c 0796     		str	r6, [sp, #28]
 301 003e 0896     		str	r6, [sp, #32]
 302 0040 ADF82460 		strh	r6, [sp, #36]	@ movhi
 437:Src/main.c    ****         int predec = (int)(val1 / 1);
 303              		.loc 1 437 0
 304 0044 5FFA88F7 		uxtb	r7, r8
 305 0048 DFF804B1 		ldr	fp, .L29+24
 306 004c 0097     		str	r7, [sp]
 307 004e 5846     		mov	r0, fp
 308 0050 45F2DC11 		movw	r1, #20956
 309 0054 039A     		ldr	r2, [sp, #12]
 310 0056 4FF44063 		mov	r3, #3072
 311 005a FFF7FEFF 		bl	goertzel
 312              	.LVL28:
 313 005e 55EC104B 		fmrrd	r4, r5, d0
 314              	.LVL29:
 438:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 315              		.loc 1 438 0
 316 0062 10EE100A 		fmrs	r0, s0	@ int
 317 0066 2946     		mov	r1, r5
 318 0068 FFF7FEFF 		bl	__aeabi_d2iz
 319              	.LVL30:
 320 006c 8246     		mov	r10, r0
 321              	.LVL31:
 439:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 322              		.loc 1 439 0
 323 006e FFF7FEFF 		bl	__aeabi_i2d
 324              	.LVL32:
 325 0072 0246     		mov	r2, r0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 15


 326 0074 0B46     		mov	r3, r1
 327 0076 2046     		mov	r0, r4
 328 0078 2946     		mov	r1, r5
 329 007a FFF7FEFF 		bl	__aeabi_dsub
 330              	.LVL33:
 331 007e 0022     		movs	r2, #0
 332 0080 2F4B     		ldr	r3, .L29+8
 333 0082 FFF7FEFF 		bl	__aeabi_dmul
 334              	.LVL34:
 335 0086 FFF7FEFF 		bl	__aeabi_d2iz
 336              	.LVL35:
 337 008a 0346     		mov	r3, r0
 338              	.LVL36:
 440:Src/main.c    ****         print(msg, 0);
 339              		.loc 1 440 0
 340 008c 05A8     		add	r0, sp, #20
 341              	.LVL37:
 342 008e 2D49     		ldr	r1, .L29+12
 343 0090 5246     		mov	r2, r10
 344 0092 FFF7FEFF 		bl	sprintf
 345              	.LVL38:
 441:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 346              		.loc 1 441 0
 347 0096 05A8     		add	r0, sp, #20
 348 0098 3146     		mov	r1, r6
 349 009a FFF7FEFF 		bl	print
 350              	.LVL39:
 442:Src/main.c    ****         //freq2
 351              		.loc 1 442 0
 352 009e 05A8     		add	r0, sp, #20
 353 00a0 FFF7FEFF 		bl	strlen
 354              	.LVL40:
 355 00a4 DFF8ACA0 		ldr	r10, .L29+28
 356              	.LVL41:
 357 00a8 82B2     		uxth	r2, r0
 358 00aa 5046     		mov	r0, r10
 359 00ac 05A9     		add	r1, sp, #20
 360 00ae 4FF6FF73 		movw	r3, #65535
 361 00b2 FFF7FEFF 		bl	HAL_UART_Transmit
 362              	.LVL42:
 444:Src/main.c    ****         predec = (int)(val2 / 1);
 363              		.loc 1 444 0
 364 00b6 0097     		str	r7, [sp]
 365 00b8 5846     		mov	r0, fp
 366 00ba 45F2DC11 		movw	r1, #20956
 367 00be 4A46     		mov	r2, r9
 368 00c0 4FF44063 		mov	r3, #3072
 369 00c4 FFF7FEFF 		bl	goertzel
 370              	.LVL43:
 371 00c8 57EC106B 		fmrrd	r6, r7, d0
 372              	.LVL44:
 445:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 373              		.loc 1 445 0
 374 00cc 10EE100A 		fmrs	r0, s0	@ int
 375 00d0 3946     		mov	r1, r7
 376 00d2 FFF7FEFF 		bl	__aeabi_d2iz
 377              	.LVL45:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 16


 378 00d6 8346     		mov	fp, r0
 379              	.LVL46:
 446:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 380              		.loc 1 446 0
 381 00d8 FFF7FEFF 		bl	__aeabi_i2d
 382              	.LVL47:
 383 00dc 0246     		mov	r2, r0
 384 00de 0B46     		mov	r3, r1
 385 00e0 3046     		mov	r0, r6
 386 00e2 3946     		mov	r1, r7
 387 00e4 FFF7FEFF 		bl	__aeabi_dsub
 388              	.LVL48:
 389 00e8 0022     		movs	r2, #0
 390 00ea 154B     		ldr	r3, .L29+8
 391 00ec FFF7FEFF 		bl	__aeabi_dmul
 392              	.LVL49:
 393 00f0 FFF7FEFF 		bl	__aeabi_d2iz
 394              	.LVL50:
 395 00f4 0346     		mov	r3, r0
 396              	.LVL51:
 447:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 397              		.loc 1 447 0
 398 00f6 05A8     		add	r0, sp, #20
 399              	.LVL52:
 400 00f8 1349     		ldr	r1, .L29+16
 401 00fa 5A46     		mov	r2, fp
 402 00fc FFF7FEFF 		bl	sprintf
 403              	.LVL53:
 448:Src/main.c    ****         //compare
 404              		.loc 1 448 0
 405 0100 05A8     		add	r0, sp, #20
 406 0102 FFF7FEFF 		bl	strlen
 407              	.LVL54:
 408 0106 82B2     		uxth	r2, r0
 409 0108 5046     		mov	r0, r10
 410 010a 05A9     		add	r1, sp, #20
 411 010c 4FF6FF73 		movw	r3, #65535
 412 0110 FFF7FEFF 		bl	HAL_UART_Transmit
 413              	.LVL55:
 450:Src/main.c    ****         {
 414              		.loc 1 450 0
 415 0114 2046     		mov	r0, r4
 416 0116 2946     		mov	r1, r5
 417 0118 3246     		mov	r2, r6
 418 011a 3B46     		mov	r3, r7
 419 011c FFF7FEFF 		bl	__aeabi_dcmpgt
 420              	.LVL56:
 421 0120 0028     		cmp	r0, #0
 422 0122 88D0     		beq	.L25
 423              	.LBE3:
 455:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 424              		.loc 1 455 0
 425 0124 0448     		ldr	r0, .L29
 426 0126 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 427              	.LVL57:
 456:Src/main.c    **** }
 428              		.loc 1 456 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 17


 429 012a 0022     		movs	r2, #0
 430 012c 074B     		ldr	r3, .L29+20
 431 012e 1A70     		strb	r2, [r3]
 457:Src/main.c    **** 
 432              		.loc 1 457 0
 433 0130 0BB0     		add	sp, sp, #44
 434              	.LCFI8:
 435              		.cfi_def_cfa_offset 36
 436              		@ sp needed
 437 0132 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 438              	.LVL58:
 439              	.L30:
 440 0136 00BF     		.align	2
 441              	.L29:
 442 0138 00000000 		.word	hadc1
 443 013c 00000000 		.word	dma_buffer
 444 0140 00408F40 		.word	1083129856
 445 0144 00000000 		.word	.LC0
 446 0148 08000000 		.word	.LC1
 447 014c 00000000 		.word	IR_INT_STATE
 448 0150 00000000 		.word	adc_values
 449 0154 00000000 		.word	huart6
 450              		.cfi_endproc
 451              	.LFE130:
 453              		.section	.text.set_motor_speed,"ax",%progbits
 454              		.align	2
 455              		.global	set_motor_speed
 456              		.thumb
 457              		.thumb_func
 459              	set_motor_speed:
 460              	.LFB134:
 473:Src/main.c    **** }
 474:Src/main.c    **** 
 475:Src/main.c    **** PID_t menu()
 476:Src/main.c    **** {
 477:Src/main.c    ****     print("Starting", 0);
 478:Src/main.c    ****     char msg[20] = "";
 479:Src/main.c    ****     int pid_select = 0;
 480:Src/main.c    ****     uint32_t values[3] = {0, 0, 0};
 481:Src/main.c    ****     while (1)
 482:Src/main.c    ****     {
 483:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 484:Src/main.c    ****         {
 485:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 486:Src/main.c    ****             print(msg, 0);
 487:Src/main.c    ****             TIM4->CNT = values[pid_select];
 488:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 489:Src/main.c    ****             {
 490:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 491:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 492:Src/main.c    ****                 print(msg, 0);
 493:Src/main.c    ****             }
 494:Src/main.c    ****             ++pid_select;
 495:Src/main.c    ****         }
 496:Src/main.c    ****         if (pid_select == 3)
 497:Src/main.c    ****             break;
 498:Src/main.c    ****     }
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 18


 499:Src/main.c    ****     while (1)
 500:Src/main.c    ****     {
 501:Src/main.c    ****         int speed = 0.3*MOTOR_SPEED;
 502:Src/main.c    ****         if (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 503:Src/main.c    ****         {
 504:Src/main.c    ****             if (pid_select == 3)
 505:Src/main.c    ****             {
 506:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 507:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 508:Src/main.c    ****             }
 509:Src/main.c    ****             else
 510:Src/main.c    ****             {
 511:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 512:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 513:Src/main.c    ****             }
 514:Src/main.c    ****             sprintf(msg, "%d", speed);
 515:Src/main.c    ****             print(msg, 0);
 516:Src/main.c    ****             TIM4->CNT = speed;
 517:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 518:Src/main.c    ****             {
 519:Src/main.c    ****                 speed = TIM4->CNT;
 520:Src/main.c    ****                 sprintf(msg, "%d", speed);
 521:Src/main.c    ****                 print(msg, 0);
 522:Src/main.c    ****                 if (pid_select == 3)
 523:Src/main.c    ****                 {
 524:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_1, speed);
 525:Src/main.c    ****                     LEFT_SPEED = speed;
 526:Src/main.c    ****                 }
 527:Src/main.c    ****                 else
 528:Src/main.c    ****                 {
 529:Src/main.c    ****                     set_motor_speed(TIM_CHANNEL_3, speed);
 530:Src/main.c    ****                     RIGHT_SPEED = speed;
 531:Src/main.c    ****                 }
 532:Src/main.c    ****             }
 533:Src/main.c    ****             ++pid_select;
 534:Src/main.c    ****         }
 535:Src/main.c    ****         if (pid_select == 5)
 536:Src/main.c    ****         {
 537:Src/main.c    ****             break;
 538:Src/main.c    ****         }
 539:Src/main.c    ****     }
 540:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 541:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 542:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 543:Src/main.c    ****     print(msg, 0);
 544:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 545:Src/main.c    ****     print(msg, 1);
 546:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 547:Src/main.c    ****     print(msg, 2);
 548:Src/main.c    ****     sprintf(msg, "L %u", LEFT_SPEED);
 549:Src/main.c    ****     print(msg, 3);
 550:Src/main.c    ****     sprintf(msg, "R %u", RIGHT_SPEED);
 551:Src/main.c    ****     print(msg, 4);
 552:Src/main.c    ****     HAL_Delay(1000);
 553:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 554:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 555:Src/main.c    ****     return pid_Init(values[0], values[1], values[2], 5, 100);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 19


 556:Src/main.c    **** }
 557:Src/main.c    **** 
 558:Src/main.c    **** void do_pid(PID_t *pid_struct)
 559:Src/main.c    **** {
 560:Src/main.c    ****     /* Read sensors */
 561:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) ? 0 : 1;
 562:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 563:Src/main.c    **** 
 564:Src/main.c    ****     /* Get error */
 565:Src/main.c    ****     if (left && right)
 566:Src/main.c    ****     {
 567:Src/main.c    ****         pid_struct->err = 0;
 568:Src/main.c    ****     }
 569:Src/main.c    ****     else if (left && !right)
 570:Src/main.c    ****     {
 571:Src/main.c    ****         pid_struct->err = 1;
 572:Src/main.c    ****     }
 573:Src/main.c    ****     else if (!left && right)
 574:Src/main.c    ****     {
 575:Src/main.c    ****         pid_struct->err = -1;
 576:Src/main.c    ****     }
 577:Src/main.c    ****     else if (!left && !right && (pid_struct->err < 0))
 578:Src/main.c    ****     {
 579:Src/main.c    ****         pid_struct->err = -5;
 580:Src/main.c    ****     }
 581:Src/main.c    ****     else if (!left && !right && (pid_struct->err > 0))
 582:Src/main.c    ****     {
 583:Src/main.c    ****         pid_struct->err = 5;
 584:Src/main.c    ****     }
 585:Src/main.c    **** 
 586:Src/main.c    ****     /* Get gain */
 587:Src/main.c    ****     int16_t gain = pid_GetGain(pid_struct);
 588:Src/main.c    ****     char msg[20] = "";
 589:Src/main.c    ****     sprintf(msg, "%d", (int)gain);
 590:Src/main.c    ****     print(msg, 0);
 591:Src/main.c    ****     /* Set Motor Speeds*/
 592:Src/main.c    ****     int lspeed = LEFT_SPEED;
 593:Src/main.c    ****     int rspeed = RIGHT_SPEED;
 594:Src/main.c    ****     if (gain < 0)
 595:Src/main.c    ****     {
 596:Src/main.c    ****         lspeed = LEFT_SPEED - gain;
 597:Src/main.c    ****     }
 598:Src/main.c    ****     else if (gain > 0)
 599:Src/main.c    ****     {
 600:Src/main.c    ****         rspeed = RIGHT_SPEED + gain;
 601:Src/main.c    ****     }
 602:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 603:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 604:Src/main.c    **** }
 605:Src/main.c    **** 
 606:Src/main.c    **** void set_motor_speed(uint32_t channel, uint32_t speed)
 607:Src/main.c    **** {
 461              		.loc 1 607 0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465              		@ link register save eliminated.
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 20


 466              	.LVL59:
 608:Src/main.c    ****     if (channel == TIM_CHANNEL_1)
 467              		.loc 1 608 0
 468 0000 0346     		mov	r3, r0
 469 0002 18B9     		cbnz	r0, .L32
 609:Src/main.c    ****     {
 610:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 470              		.loc 1 610 0
 471 0004 0F4A     		ldr	r2, .L36
 472 0006 1268     		ldr	r2, [r2]
 473 0008 9063     		str	r0, [r2, #56]
 474 000a 13E0     		b	.L33
 475              	.L32:
 611:Src/main.c    ****     }
 612:Src/main.c    ****     else if (channel == TIM_CHANNEL_2)
 476              		.loc 1 612 0
 477 000c 0428     		cmp	r0, #4
 478 000e 04D1     		bne	.L34
 613:Src/main.c    ****     {
 614:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 479              		.loc 1 614 0
 480 0010 0C4A     		ldr	r2, .L36
 481 0012 1268     		ldr	r2, [r2]
 482 0014 0020     		movs	r0, #0
 483              	.LVL60:
 484 0016 5063     		str	r0, [r2, #52]
 485 0018 0CE0     		b	.L33
 486              	.LVL61:
 487              	.L34:
 615:Src/main.c    ****     }
 616:Src/main.c    ****     else if (channel == TIM_CHANNEL_3)
 488              		.loc 1 616 0
 489 001a 0828     		cmp	r0, #8
 490 001c 04D1     		bne	.L35
 617:Src/main.c    ****     {
 618:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 491              		.loc 1 618 0
 492 001e 094A     		ldr	r2, .L36
 493 0020 1268     		ldr	r2, [r2]
 494 0022 0020     		movs	r0, #0
 495              	.LVL62:
 496 0024 1064     		str	r0, [r2, #64]
 497 0026 05E0     		b	.L33
 498              	.LVL63:
 499              	.L35:
 619:Src/main.c    ****     }
 620:Src/main.c    ****     else if (channel == TIM_CHANNEL_4)
 500              		.loc 1 620 0
 501 0028 0C28     		cmp	r0, #12
 502 002a 03D1     		bne	.L33
 621:Src/main.c    ****     {
 622:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 503              		.loc 1 622 0
 504 002c 054A     		ldr	r2, .L36
 505 002e 1268     		ldr	r2, [r2]
 506 0030 0020     		movs	r0, #0
 507              	.LVL64:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 21


 508 0032 D063     		str	r0, [r2, #60]
 509              	.L33:
 623:Src/main.c    ****     }
 624:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 510              		.loc 1 624 0
 511 0034 034A     		ldr	r2, .L36
 512 0036 1268     		ldr	r2, [r2]
 513 0038 3432     		adds	r2, r2, #52
 514 003a 9B08     		lsrs	r3, r3, #2
 515              	.LVL65:
 516 003c 42F82310 		str	r1, [r2, r3, lsl #2]
 517 0040 7047     		bx	lr
 518              	.L37:
 519 0042 00BF     		.align	2
 520              	.L36:
 521 0044 00000000 		.word	htim1
 522              		.cfi_endproc
 523              	.LFE134:
 525              		.global	__aeabi_f2d
 526              		.global	__aeabi_d2uiz
 527              		.section	.text.turn,"ax",%progbits
 528              		.align	2
 529              		.global	turn
 530              		.thumb
 531              		.thumb_func
 533              	turn:
 534              	.LFB126:
 318:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 535              		.loc 1 318 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 24
 538              		@ frame_needed = 0, uses_anonymous_args = 0
 539 0000 30B5     		push	{r4, r5, lr}
 540              	.LCFI9:
 541              		.cfi_def_cfa_offset 12
 542              		.cfi_offset 4, -12
 543              		.cfi_offset 5, -8
 544              		.cfi_offset 14, -4
 545 0002 2DED028B 		fstmfdd	sp!, {d8}
 546              	.LCFI10:
 547              		.cfi_def_cfa_offset 20
 548              		.cfi_offset 80, -20
 549              		.cfi_offset 81, -16
 550 0006 87B0     		sub	sp, sp, #28
 551              	.LCFI11:
 552              		.cfi_def_cfa_offset 48
 319:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 553              		.loc 1 319 0
 554 0008 4548     		ldr	r0, .L49+8
 555 000a 4649     		ldr	r1, .L49+12
 556 000c 4FF44062 		mov	r2, #3072
 557 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 558              	.LVL66:
 321:Src/main.c    ****     float volts = calculate_heading(adc_values[5]);
 559              		.loc 1 321 0
 560 0014 3220     		movs	r0, #50
 561 0016 FFF7FEFF 		bl	HAL_Delay
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 22


 562              	.LVL67:
 322:Src/main.c    ****     uint16_t counts = TURN_CONST * fabs(volts);
 563              		.loc 1 322 0
 564 001a 434B     		ldr	r3, .L49+16
 565 001c 5869     		ldr	r0, [r3, #20]
 566 001e FFF7FEFF 		bl	calculate_heading
 567              	.LVL68:
 568 0022 B0EE408A 		fcpys	s16, s0
 569              	.LVL69:
 323:Src/main.c    ****     TIM3->CNT = 0;
 570              		.loc 1 323 0
 571 0026 F0EEC07A 		fabss	s15, s0
 572 002a 17EE900A 		fmrs	r0, s15
 573 002e FFF7FEFF 		bl	__aeabi_f2d
 574              	.LVL70:
 575 0032 39A3     		adr	r3, .L49
 576 0034 D3E90023 		ldrd	r2, [r3]
 577 0038 FFF7FEFF 		bl	__aeabi_dmul
 578              	.LVL71:
 579 003c FFF7FEFF 		bl	__aeabi_d2uiz
 580              	.LVL72:
 581 0040 85B2     		uxth	r5, r0
 582              	.LVL73:
 324:Src/main.c    ****     TIM4->CNT = 0;
 583              		.loc 1 324 0
 584 0042 0024     		movs	r4, #0
 585 0044 394B     		ldr	r3, .L49+20
 586 0046 5C62     		str	r4, [r3, #36]
 325:Src/main.c    ****     char msg[18] = "";
 587              		.loc 1 325 0
 588 0048 03F58063 		add	r3, r3, #1024
 589 004c 5C62     		str	r4, [r3, #36]
 326:Src/main.c    ****     sprintf(msg, "cnts: %d", counts);
 590              		.loc 1 326 0
 591 004e 0194     		str	r4, [sp, #4]
 592 0050 0294     		str	r4, [sp, #8]
 593 0052 0394     		str	r4, [sp, #12]
 594 0054 0494     		str	r4, [sp, #16]
 595 0056 ADF81440 		strh	r4, [sp, #20]	@ movhi
 327:Src/main.c    ****     print(msg, 0);
 596              		.loc 1 327 0
 597 005a 01A8     		add	r0, sp, #4
 598 005c 3449     		ldr	r1, .L49+24
 599 005e 2A46     		mov	r2, r5
 600 0060 FFF7FEFF 		bl	sprintf
 601              	.LVL74:
 328:Src/main.c    ****     int pre_dec = (int)(volts / 1);
 602              		.loc 1 328 0
 603 0064 01A8     		add	r0, sp, #4
 604 0066 2146     		mov	r1, r4
 605 0068 FFF7FEFF 		bl	print
 606              	.LVL75:
 329:Src/main.c    ****     int post_dec = (int)((volts - pre_dec) * 1000);
 607              		.loc 1 329 0
 608 006c BDEEC87A 		ftosizs	s14, s16
 609              	.LVL76:
 330:Src/main.c    ****     sprintf(msg, "vlts: %d.%d", pre_dec, post_dec);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 23


 610              		.loc 1 330 0
 611 0070 F8EEC77A 		fsitos	s15, s14
 612 0074 78EE677A 		fsubs	s15, s16, s15
 613 0078 DFED2E6A 		flds	s13, .L49+28
 614 007c 67EEA67A 		fmuls	s15, s15, s13
 615              	.LVL77:
 331:Src/main.c    ****     print(msg, 0);
 616              		.loc 1 331 0
 617 0080 01A8     		add	r0, sp, #4
 618 0082 2D49     		ldr	r1, .L49+32
 619 0084 17EE102A 		fmrs	r2, s14	@ int
 620 0088 FDEEE77A 		ftosizs	s15, s15
 621              	.LVL78:
 622 008c 17EE903A 		fmrs	r3, s15	@ int
 623 0090 FFF7FEFF 		bl	sprintf
 624              	.LVL79:
 332:Src/main.c    ****     if (volts < 0)
 625              		.loc 1 332 0
 626 0094 01A8     		add	r0, sp, #4
 627 0096 2146     		mov	r1, r4
 628 0098 FFF7FEFF 		bl	print
 629              	.LVL80:
 333:Src/main.c    ****     {
 630              		.loc 1 333 0
 631 009c B5EEC08A 		fcmpezs	s16
 632 00a0 F1EE10FA 		fmstat
 633 00a4 10D5     		bpl	.L47
 335:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0.5*MOTOR_SPEED);
 634              		.loc 1 335 0
 635 00a6 2046     		mov	r0, r4
 636 00a8 2146     		mov	r1, r4
 637 00aa FFF7FEFF 		bl	set_motor_speed
 638              	.LVL81:
 336:Src/main.c    ****         while (TIM4->CNT < counts)
 639              		.loc 1 336 0
 640 00ae 0820     		movs	r0, #8
 641 00b0 4FF4FA71 		mov	r1, #500
 642 00b4 FFF7FEFF 		bl	set_motor_speed
 643              	.LVL82:
 644              	.L41:
 337:Src/main.c    ****         {
 645              		.loc 1 337 0 discriminator 1
 646 00b8 204B     		ldr	r3, .L49+36
 647 00ba 5B6A     		ldr	r3, [r3, #36]
 648 00bc AB42     		cmp	r3, r5
 649 00be FBD3     		bcc	.L41
 340:Src/main.c    ****     }
 650              		.loc 1 340 0
 651 00c0 0022     		movs	r2, #0
 652 00c2 1E4B     		ldr	r3, .L49+36
 653 00c4 5A62     		str	r2, [r3, #36]
 654 00c6 14E0     		b	.L42
 655              	.L47:
 342:Src/main.c    ****     {
 656              		.loc 1 342 0
 657 00c8 B5EEC08A 		fcmpezs	s16
 658 00cc F1EE10FA 		fmstat
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 24


 659 00d0 0FDD     		ble	.L42
 344:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0);
 660              		.loc 1 344 0
 661 00d2 0020     		movs	r0, #0
 662 00d4 4FF4FA71 		mov	r1, #500
 663 00d8 FFF7FEFF 		bl	set_motor_speed
 664              	.LVL83:
 345:Src/main.c    ****         while (TIM3->CNT < counts)
 665              		.loc 1 345 0
 666 00dc 0820     		movs	r0, #8
 667 00de 0021     		movs	r1, #0
 668 00e0 FFF7FEFF 		bl	set_motor_speed
 669              	.LVL84:
 670              	.L44:
 346:Src/main.c    ****         {
 671              		.loc 1 346 0 discriminator 1
 672 00e4 114B     		ldr	r3, .L49+20
 673 00e6 5B6A     		ldr	r3, [r3, #36]
 674 00e8 AB42     		cmp	r3, r5
 675 00ea FBD3     		bcc	.L44
 349:Src/main.c    ****     }
 676              		.loc 1 349 0
 677 00ec 0022     		movs	r2, #0
 678 00ee 134B     		ldr	r3, .L49+36
 679 00f0 5A62     		str	r2, [r3, #36]
 680              	.L42:
 351:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0);
 681              		.loc 1 351 0
 682 00f2 0020     		movs	r0, #0
 683 00f4 0146     		mov	r1, r0
 684 00f6 FFF7FEFF 		bl	set_motor_speed
 685              	.LVL85:
 352:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 686              		.loc 1 352 0
 687 00fa 0820     		movs	r0, #8
 688 00fc 0021     		movs	r1, #0
 689 00fe FFF7FEFF 		bl	set_motor_speed
 690              	.LVL86:
 353:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 691              		.loc 1 353 0
 692 0102 0748     		ldr	r0, .L49+8
 693 0104 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 694              	.LVL87:
 354:Src/main.c    **** }
 695              		.loc 1 354 0
 696 0108 0022     		movs	r2, #0
 697 010a 0D4B     		ldr	r3, .L49+40
 698 010c 1A70     		strb	r2, [r3]
 355:Src/main.c    **** 
 699              		.loc 1 355 0
 700 010e 07B0     		add	sp, sp, #28
 701              	.LCFI12:
 702              		.cfi_def_cfa_offset 20
 703              		@ sp needed
 704 0110 BDEC028B 		fldmfdd	sp!, {d8}
 705              	.LCFI13:
 706              		.cfi_restore 80
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 25


 707              		.cfi_restore 81
 708              		.cfi_def_cfa_offset 12
 709              	.LVL88:
 710 0114 30BD     		pop	{r4, r5, pc}
 711              	.LVL89:
 712              	.L50:
 713 0116 00BF     		.align	3
 714              	.L49:
 715 0118 00000000 		.word	0
 716 011c 00C07240 		.word	1081262080
 717 0120 00000000 		.word	hadc1
 718 0124 00000000 		.word	dma_buffer
 719 0128 00000000 		.word	adc_values
 720 012c 00040040 		.word	1073742848
 721 0130 10000000 		.word	.LC2
 722 0134 00007A44 		.word	1148846080
 723 0138 1C000000 		.word	.LC3
 724 013c 00080040 		.word	1073743872
 725 0140 00000000 		.word	PI_INT_STATE
 726              		.cfi_endproc
 727              	.LFE126:
 729              		.section	.text.pi_navigation,"ax",%progbits
 730              		.align	2
 731              		.global	pi_navigation
 732              		.thumb
 733              		.thumb_func
 735              	pi_navigation:
 736              	.LFB127:
 358:Src/main.c    ****     print("Pi nav", 0);
 737              		.loc 1 358 0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 0
 740              		@ frame_needed = 0, uses_anonymous_args = 0
 741 0000 08B5     		push	{r3, lr}
 742              	.LCFI14:
 743              		.cfi_def_cfa_offset 8
 744              		.cfi_offset 3, -8
 745              		.cfi_offset 14, -4
 746 0002 2DED028B 		fstmfdd	sp!, {d8}
 747              	.LCFI15:
 748              		.cfi_def_cfa_offset 16
 749              		.cfi_offset 80, -16
 750              		.cfi_offset 81, -12
 359:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, dma_buffer, sizeof(dma_buffer) / sizeof(dma_buffer[0]));
 751              		.loc 1 359 0
 752 0006 2948     		ldr	r0, .L60
 753 0008 0021     		movs	r1, #0
 754 000a FFF7FEFF 		bl	print
 755              	.LVL90:
 360:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 756              		.loc 1 360 0
 757 000e 2848     		ldr	r0, .L60+4
 758 0010 2849     		ldr	r1, .L60+8
 759 0012 4FF44062 		mov	r2, #3072
 760 0016 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 761              	.LVL91:
 362:Src/main.c    ****     float heading = calculate_heading(adc_values[5]);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 26


 762              		.loc 1 362 0
 763 001a 4FF4FA70 		mov	r0, #500
 764 001e FFF7FEFF 		bl	HAL_Delay
 765              	.LVL92:
 363:Src/main.c    ****     if (heading < 0)
 766              		.loc 1 363 0
 767 0022 254B     		ldr	r3, .L60+12
 768 0024 5869     		ldr	r0, [r3, #20]
 769 0026 FFF7FEFF 		bl	calculate_heading
 770              	.LVL93:
 771 002a B0EE408A 		fcpys	s16, s0
 772              	.LVL94:
 364:Src/main.c    ****     {
 773              		.loc 1 364 0
 774 002e B5EEC00A 		fcmpezs	s0
 775 0032 F1EE10FA 		fmstat
 776 0036 0CD5     		bpl	.L58
 366:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_3, 0.3*MOTOR_SPEED);
 777              		.loc 1 366 0
 778 0038 0420     		movs	r0, #4
 779 003a 4FF49671 		mov	r1, #300
 780 003e FFF7FEFF 		bl	set_motor_speed
 781              	.LVL95:
 367:Src/main.c    ****         heading *= -1;
 782              		.loc 1 367 0
 783 0042 0820     		movs	r0, #8
 784 0044 4FF49671 		mov	r1, #300
 785 0048 FFF7FEFF 		bl	set_motor_speed
 786              	.LVL96:
 368:Src/main.c    ****     }
 787              		.loc 1 368 0
 788 004c B1EE488A 		fnegs	s16, s16
 789              	.LVL97:
 790 0050 0EE0     		b	.L54
 791              	.LVL98:
 792              	.L58:
 370:Src/main.c    ****     {
 793              		.loc 1 370 0
 794 0052 B5EEC00A 		fcmpezs	s0
 795 0056 F1EE10FA 		fmstat
 796 005a 09DD     		ble	.L54
 372:Src/main.c    ****         set_motor_speed(TIM_CHANNEL_4, 0.3*MOTOR_SPEED);
 797              		.loc 1 372 0
 798 005c 0020     		movs	r0, #0
 799 005e 4FF49671 		mov	r1, #300
 800 0062 FFF7FEFF 		bl	set_motor_speed
 801              	.LVL99:
 373:Src/main.c    ****     }
 802              		.loc 1 373 0
 803 0066 0C20     		movs	r0, #12
 804 0068 4FF49671 		mov	r1, #300
 805 006c FFF7FEFF 		bl	set_motor_speed
 806              	.LVL100:
 807              	.L54:
 375:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, 0.3*MOTOR_SPEED);
 808              		.loc 1 375 0
 809 0070 DFED127A 		flds	s15, .L60+16
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 27


 810 0074 28EE278A 		fmuls	s16, s16, s15
 811              	.LVL101:
 812 0078 FCEEC87A 		ftouizs	s15, s16
 813 007c 17EE900A 		fmrs	r0, s15	@ int
 814 0080 FFF7FEFF 		bl	HAL_Delay
 815              	.LVL102:
 376:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, 0.3*MOTOR_SPEED);
 816              		.loc 1 376 0
 817 0084 0020     		movs	r0, #0
 818 0086 4FF49671 		mov	r1, #300
 819 008a FFF7FEFF 		bl	set_motor_speed
 820              	.LVL103:
 377:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 821              		.loc 1 377 0
 822 008e 0820     		movs	r0, #8
 823 0090 4FF49671 		mov	r1, #300
 824 0094 FFF7FEFF 		bl	set_motor_speed
 825              	.LVL104:
 378:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 826              		.loc 1 378 0
 827 0098 0548     		ldr	r0, .L60+4
 828 009a FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 829              	.LVL105:
 379:Src/main.c    **** }
 830              		.loc 1 379 0
 831 009e 0022     		movs	r2, #0
 832 00a0 074B     		ldr	r3, .L60+20
 833 00a2 1A70     		strb	r2, [r3]
 380:Src/main.c    **** 
 834              		.loc 1 380 0
 835 00a4 BDEC028B 		fldmfdd	sp!, {d8}
 836              	.LCFI16:
 837              		.cfi_restore 80
 838              		.cfi_restore 81
 839              		.cfi_def_cfa_offset 8
 840 00a8 08BD     		pop	{r3, pc}
 841              	.L61:
 842 00aa 00BF     		.align	2
 843              	.L60:
 844 00ac 28000000 		.word	.LC4
 845 00b0 00000000 		.word	hadc1
 846 00b4 00000000 		.word	dma_buffer
 847 00b8 00000000 		.word	adc_values
 848 00bc 0000FA44 		.word	1157234688
 849 00c0 00000000 		.word	PI_INT_STATE
 850              		.cfi_endproc
 851              	.LFE127:
 853              		.section	.text.menu,"ax",%progbits
 854              		.align	2
 855              		.global	menu
 856              		.thumb
 857              		.thumb_func
 859              	menu:
 860              	.LFB132:
 476:Src/main.c    ****     print("Starting", 0);
 861              		.loc 1 476 0
 862              		.cfi_startproc
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 28


 863              		@ args = 0, pretend = 0, frame = 32
 864              		@ frame_needed = 0, uses_anonymous_args = 0
 865              	.LVL106:
 866 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 867              	.LCFI17:
 868              		.cfi_def_cfa_offset 24
 869              		.cfi_offset 4, -24
 870              		.cfi_offset 5, -20
 871              		.cfi_offset 6, -16
 872              		.cfi_offset 7, -12
 873              		.cfi_offset 8, -8
 874              		.cfi_offset 14, -4
 875 0004 8AB0     		sub	sp, sp, #40
 876              	.LCFI18:
 877              		.cfi_def_cfa_offset 64
 878 0006 0646     		mov	r6, r0
 477:Src/main.c    ****     char msg[20] = "";
 879              		.loc 1 477 0
 880 0008 7148     		ldr	r0, .L76
 881              	.LVL107:
 882 000a 0021     		movs	r1, #0
 883 000c FFF7FEFF 		bl	print
 884              	.LVL108:
 478:Src/main.c    ****     int pid_select = 0;
 885              		.loc 1 478 0
 886 0010 0025     		movs	r5, #0
 887 0012 0595     		str	r5, [sp, #20]
 888 0014 0695     		str	r5, [sp, #24]
 889 0016 0795     		str	r5, [sp, #28]
 890 0018 0895     		str	r5, [sp, #32]
 891 001a 0995     		str	r5, [sp, #36]
 892              	.LVL109:
 480:Src/main.c    ****     while (1)
 893              		.loc 1 480 0
 894 001c 0295     		str	r5, [sp, #8]
 895 001e 0395     		str	r5, [sp, #12]
 896 0020 0495     		str	r5, [sp, #16]
 897              	.LVL110:
 898              	.L66:
 483:Src/main.c    ****         {
 899              		.loc 1 483 0
 900 0022 6C48     		ldr	r0, .L76+4
 901 0024 4FF40051 		mov	r1, #8192
 902 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 903              	.LVL111:
 904 002c 38BB     		cbnz	r0, .L63
 485:Src/main.c    ****             print(msg, 0);
 905              		.loc 1 485 0
 906 002e 0AAB     		add	r3, sp, #40
 907 0030 03EB8503 		add	r3, r3, r5, lsl #2
 908 0034 53F8204C 		ldr	r4, [r3, #-32]
 909 0038 05A8     		add	r0, sp, #20
 910 003a 6749     		ldr	r1, .L76+8
 911 003c 2246     		mov	r2, r4
 912 003e FFF7FEFF 		bl	sprintf
 913              	.LVL112:
 486:Src/main.c    ****             TIM4->CNT = values[pid_select];
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 29


 914              		.loc 1 486 0
 915 0042 05A8     		add	r0, sp, #20
 916 0044 0021     		movs	r1, #0
 917 0046 FFF7FEFF 		bl	print
 918              	.LVL113:
 487:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 919              		.loc 1 487 0
 920 004a 644B     		ldr	r3, .L76+12
 921 004c 5C62     		str	r4, [r3, #36]
 488:Src/main.c    ****             {
 922              		.loc 1 488 0
 923 004e 0EE0     		b	.L64
 924              	.L65:
 490:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 925              		.loc 1 490 0
 926 0050 624B     		ldr	r3, .L76+12
 927 0052 5A6A     		ldr	r2, [r3, #36]
 928 0054 0AAB     		add	r3, sp, #40
 929 0056 03EB8503 		add	r3, r3, r5, lsl #2
 930 005a 43F8202C 		str	r2, [r3, #-32]
 491:Src/main.c    ****                 print(msg, 0);
 931              		.loc 1 491 0
 932 005e 05A8     		add	r0, sp, #20
 933 0060 5D49     		ldr	r1, .L76+8
 934 0062 FFF7FEFF 		bl	sprintf
 935              	.LVL114:
 492:Src/main.c    ****             }
 936              		.loc 1 492 0
 937 0066 05A8     		add	r0, sp, #20
 938 0068 0021     		movs	r1, #0
 939 006a FFF7FEFF 		bl	print
 940              	.LVL115:
 941              	.L64:
 488:Src/main.c    ****             {
 942              		.loc 1 488 0
 943 006e 5948     		ldr	r0, .L76+4
 944 0070 4FF40051 		mov	r1, #8192
 945 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 946              	.LVL116:
 947 0078 0028     		cmp	r0, #0
 948 007a E9D0     		beq	.L65
 494:Src/main.c    ****         }
 949              		.loc 1 494 0
 950 007c 0135     		adds	r5, r5, #1
 951              	.LVL117:
 952              	.L63:
 496:Src/main.c    ****             break;
 953              		.loc 1 496 0
 954 007e 032D     		cmp	r5, #3
 955 0080 CFD1     		bne	.L66
 956              	.L74:
 957              	.LVL118:
 958              	.LBB4:
 502:Src/main.c    ****         {
 959              		.loc 1 502 0
 960 0082 5448     		ldr	r0, .L76+4
 961 0084 4FF40051 		mov	r1, #8192
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 30


 962 0088 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 963              	.LVL119:
 964 008c 0028     		cmp	r0, #0
 965 008e 45D1     		bne	.L67
 504:Src/main.c    ****             {
 966              		.loc 1 504 0
 967 0090 032D     		cmp	r5, #3
 968 0092 09D1     		bne	.L68
 506:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 969              		.loc 1 506 0
 970 0094 524C     		ldr	r4, .L76+16
 971 0096 2046     		mov	r0, r4
 972 0098 0021     		movs	r1, #0
 973 009a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 974              	.LVL120:
 507:Src/main.c    ****             }
 975              		.loc 1 507 0
 976 009e 2046     		mov	r0, r4
 977 00a0 0821     		movs	r1, #8
 978 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 979              	.LVL121:
 980 00a6 08E0     		b	.L69
 981              	.L68:
 511:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 982              		.loc 1 511 0
 983 00a8 4D4C     		ldr	r4, .L76+16
 984 00aa 2046     		mov	r0, r4
 985 00ac 0021     		movs	r1, #0
 986 00ae FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 987              	.LVL122:
 512:Src/main.c    ****             }
 988              		.loc 1 512 0
 989 00b2 2046     		mov	r0, r4
 990 00b4 0821     		movs	r1, #8
 991 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 992              	.LVL123:
 993              	.L69:
 514:Src/main.c    ****             print(msg, 0);
 994              		.loc 1 514 0
 995 00ba 05A8     		add	r0, sp, #20
 996 00bc 4949     		ldr	r1, .L76+20
 997 00be 4FF49672 		mov	r2, #300
 998 00c2 FFF7FEFF 		bl	sprintf
 999              	.LVL124:
 515:Src/main.c    ****             TIM4->CNT = speed;
 1000              		.loc 1 515 0
 1001 00c6 05A8     		add	r0, sp, #20
 1002 00c8 0021     		movs	r1, #0
 1003 00ca FFF7FEFF 		bl	print
 1004              	.LVL125:
 516:Src/main.c    ****             while (HAL_GPIO_ReadPin(MENU_GPIO_Port, MENU_Pin) == 0)
 1005              		.loc 1 516 0
 1006 00ce 4FF49672 		mov	r2, #300
 1007 00d2 424B     		ldr	r3, .L76+12
 1008 00d4 5A62     		str	r2, [r3, #36]
 517:Src/main.c    ****             {
 1009              		.loc 1 517 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 31


 1010 00d6 19E0     		b	.L70
 1011              	.LVL126:
 1012              	.L73:
 519:Src/main.c    ****                 sprintf(msg, "%d", speed);
 1013              		.loc 1 519 0
 1014 00d8 404B     		ldr	r3, .L76+12
 1015 00da 5C6A     		ldr	r4, [r3, #36]
 1016              	.LVL127:
 520:Src/main.c    ****                 print(msg, 0);
 1017              		.loc 1 520 0
 1018 00dc 05A8     		add	r0, sp, #20
 1019 00de 4149     		ldr	r1, .L76+20
 1020 00e0 2246     		mov	r2, r4
 1021 00e2 FFF7FEFF 		bl	sprintf
 1022              	.LVL128:
 521:Src/main.c    ****                 if (pid_select == 3)
 1023              		.loc 1 521 0
 1024 00e6 05A8     		add	r0, sp, #20
 1025 00e8 0021     		movs	r1, #0
 1026 00ea FFF7FEFF 		bl	print
 1027              	.LVL129:
 522:Src/main.c    ****                 {
 1028              		.loc 1 522 0
 1029 00ee 032D     		cmp	r5, #3
 1030 00f0 06D1     		bne	.L71
 524:Src/main.c    ****                     LEFT_SPEED = speed;
 1031              		.loc 1 524 0
 1032 00f2 0020     		movs	r0, #0
 1033 00f4 2146     		mov	r1, r4
 1034 00f6 FFF7FEFF 		bl	set_motor_speed
 1035              	.LVL130:
 525:Src/main.c    ****                 }
 1036              		.loc 1 525 0
 1037 00fa 3B4B     		ldr	r3, .L76+24
 1038 00fc 1C80     		strh	r4, [r3]	@ movhi
 1039 00fe 05E0     		b	.L70
 1040              	.L71:
 529:Src/main.c    ****                     RIGHT_SPEED = speed;
 1041              		.loc 1 529 0
 1042 0100 0820     		movs	r0, #8
 1043 0102 2146     		mov	r1, r4
 1044 0104 FFF7FEFF 		bl	set_motor_speed
 1045              	.LVL131:
 530:Src/main.c    ****                 }
 1046              		.loc 1 530 0
 1047 0108 384B     		ldr	r3, .L76+28
 1048 010a 1C80     		strh	r4, [r3]	@ movhi
 1049              	.LVL132:
 1050              	.L70:
 517:Src/main.c    ****             {
 1051              		.loc 1 517 0
 1052 010c 3148     		ldr	r0, .L76+4
 1053 010e 4FF40051 		mov	r1, #8192
 1054 0112 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1055              	.LVL133:
 1056 0116 0028     		cmp	r0, #0
 1057 0118 DED0     		beq	.L73
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 32


 533:Src/main.c    ****         }
 1058              		.loc 1 533 0
 1059 011a 0135     		adds	r5, r5, #1
 1060              	.LVL134:
 1061              	.L67:
 535:Src/main.c    ****         {
 1062              		.loc 1 535 0
 1063 011c 052D     		cmp	r5, #5
 1064 011e B0D1     		bne	.L74
 1065              	.LBE4:
 540:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 1066              		.loc 1 540 0
 1067 0120 2F4C     		ldr	r4, .L76+16
 1068 0122 2046     		mov	r0, r4
 1069 0124 0021     		movs	r1, #0
 1070 0126 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1071              	.LVL135:
 541:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 1072              		.loc 1 541 0
 1073 012a 2046     		mov	r0, r4
 1074 012c 0821     		movs	r1, #8
 1075 012e FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1076              	.LVL136:
 542:Src/main.c    ****     print(msg, 0);
 1077              		.loc 1 542 0
 1078 0132 DDF80880 		ldr	r8, [sp, #8]
 1079 0136 05A8     		add	r0, sp, #20
 1080 0138 2D49     		ldr	r1, .L76+32
 1081 013a 4246     		mov	r2, r8
 1082 013c FFF7FEFF 		bl	sprintf
 1083              	.LVL137:
 543:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 1084              		.loc 1 543 0
 1085 0140 05A8     		add	r0, sp, #20
 1086 0142 0021     		movs	r1, #0
 1087 0144 FFF7FEFF 		bl	print
 1088              	.LVL138:
 544:Src/main.c    ****     print(msg, 1);
 1089              		.loc 1 544 0
 1090 0148 039F     		ldr	r7, [sp, #12]
 1091 014a 05A8     		add	r0, sp, #20
 1092 014c 2949     		ldr	r1, .L76+36
 1093 014e 3A46     		mov	r2, r7
 1094 0150 FFF7FEFF 		bl	sprintf
 1095              	.LVL139:
 545:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 1096              		.loc 1 545 0
 1097 0154 05A8     		add	r0, sp, #20
 1098 0156 0121     		movs	r1, #1
 1099 0158 FFF7FEFF 		bl	print
 1100              	.LVL140:
 546:Src/main.c    ****     print(msg, 2);
 1101              		.loc 1 546 0
 1102 015c 049D     		ldr	r5, [sp, #16]
 1103              	.LVL141:
 1104 015e 05A8     		add	r0, sp, #20
 1105 0160 2549     		ldr	r1, .L76+40
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 33


 1106 0162 2A46     		mov	r2, r5
 1107 0164 FFF7FEFF 		bl	sprintf
 1108              	.LVL142:
 547:Src/main.c    ****     sprintf(msg, "L %u", LEFT_SPEED);
 1109              		.loc 1 547 0
 1110 0168 05A8     		add	r0, sp, #20
 1111 016a 0221     		movs	r1, #2
 1112 016c FFF7FEFF 		bl	print
 1113              	.LVL143:
 548:Src/main.c    ****     print(msg, 3);
 1114              		.loc 1 548 0
 1115 0170 05A8     		add	r0, sp, #20
 1116 0172 2249     		ldr	r1, .L76+44
 1117 0174 1C4B     		ldr	r3, .L76+24
 1118 0176 1A88     		ldrh	r2, [r3]
 1119 0178 FFF7FEFF 		bl	sprintf
 1120              	.LVL144:
 549:Src/main.c    ****     sprintf(msg, "R %u", RIGHT_SPEED);
 1121              		.loc 1 549 0
 1122 017c 05A8     		add	r0, sp, #20
 1123 017e 0321     		movs	r1, #3
 1124 0180 FFF7FEFF 		bl	print
 1125              	.LVL145:
 550:Src/main.c    ****     print(msg, 4);
 1126              		.loc 1 550 0
 1127 0184 05A8     		add	r0, sp, #20
 1128 0186 1E49     		ldr	r1, .L76+48
 1129 0188 184B     		ldr	r3, .L76+28
 1130 018a 1A88     		ldrh	r2, [r3]
 1131 018c FFF7FEFF 		bl	sprintf
 1132              	.LVL146:
 551:Src/main.c    ****     HAL_Delay(1000);
 1133              		.loc 1 551 0
 1134 0190 05A8     		add	r0, sp, #20
 1135 0192 0421     		movs	r1, #4
 1136 0194 FFF7FEFF 		bl	print
 1137              	.LVL147:
 552:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1138              		.loc 1 552 0
 1139 0198 4FF47A70 		mov	r0, #1000
 1140 019c FFF7FEFF 		bl	HAL_Delay
 1141              	.LVL148:
 553:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1142              		.loc 1 553 0
 1143 01a0 2046     		mov	r0, r4
 1144 01a2 0021     		movs	r1, #0
 1145 01a4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1146              	.LVL149:
 554:Src/main.c    ****     return pid_Init(values[0], values[1], values[2], 5, 100);
 1147              		.loc 1 554 0
 1148 01a8 2046     		mov	r0, r4
 1149 01aa 0821     		movs	r1, #8
 1150 01ac FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1151              	.LVL150:
 555:Src/main.c    **** }
 1152              		.loc 1 555 0
 1153 01b0 0523     		movs	r3, #5
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 34


 1154 01b2 0093     		str	r3, [sp]
 1155 01b4 6423     		movs	r3, #100
 1156 01b6 0193     		str	r3, [sp, #4]
 1157 01b8 3046     		mov	r0, r6
 1158 01ba 1FFA88F1 		uxth	r1, r8
 1159 01be BAB2     		uxth	r2, r7
 1160 01c0 ABB2     		uxth	r3, r5
 1161 01c2 FFF7FEFF 		bl	pid_Init
 1162              	.LVL151:
 556:Src/main.c    **** 
 1163              		.loc 1 556 0
 1164 01c6 3046     		mov	r0, r6
 1165 01c8 0AB0     		add	sp, sp, #40
 1166              	.LCFI19:
 1167              		.cfi_def_cfa_offset 24
 1168              		@ sp needed
 1169 01ca BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1170              	.LVL152:
 1171              	.L77:
 1172 01ce 00BF     		.align	2
 1173              	.L76:
 1174 01d0 30000000 		.word	.LC5
 1175 01d4 00080240 		.word	1073874944
 1176 01d8 3C000000 		.word	.LC6
 1177 01dc 00080040 		.word	1073743872
 1178 01e0 00000000 		.word	htim1
 1179 01e4 40000000 		.word	.LC7
 1180 01e8 00000000 		.word	.LANCHOR0
 1181 01ec 00000000 		.word	.LANCHOR1
 1182 01f0 44000000 		.word	.LC8
 1183 01f4 4C000000 		.word	.LC9
 1184 01f8 54000000 		.word	.LC10
 1185 01fc 5C000000 		.word	.LC11
 1186 0200 64000000 		.word	.LC12
 1187              		.cfi_endproc
 1188              	.LFE132:
 1190              		.section	.text.do_pid,"ax",%progbits
 1191              		.align	2
 1192              		.global	do_pid
 1193              		.thumb
 1194              		.thumb_func
 1196              	do_pid:
 1197              	.LFB133:
 559:Src/main.c    ****     /* Read sensors */
 1198              		.loc 1 559 0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 24
 1201              		@ frame_needed = 0, uses_anonymous_args = 0
 1202              	.LVL153:
 1203 0000 70B5     		push	{r4, r5, r6, lr}
 1204              	.LCFI20:
 1205              		.cfi_def_cfa_offset 16
 1206              		.cfi_offset 4, -16
 1207              		.cfi_offset 5, -12
 1208              		.cfi_offset 6, -8
 1209              		.cfi_offset 14, -4
 1210 0002 86B0     		sub	sp, sp, #24
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 35


 1211              	.LCFI21:
 1212              		.cfi_def_cfa_offset 40
 1213 0004 0646     		mov	r6, r0
 561:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 1214              		.loc 1 561 0
 1215 0006 2D4D     		ldr	r5, .L87
 1216 0008 2846     		mov	r0, r5
 1217              	.LVL154:
 1218 000a 4FF48041 		mov	r1, #16384
 1219 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1220              	.LVL155:
 1221 0012 B0FA80F4 		clz	r4, r0
 1222 0016 6409     		lsrs	r4, r4, #5
 1223              	.LVL156:
 562:Src/main.c    **** 
 1224              		.loc 1 562 0
 1225 0018 2846     		mov	r0, r5
 1226 001a 4FF40041 		mov	r1, #32768
 1227 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1228              	.LVL157:
 1229 0022 B0FA80F0 		clz	r0, r0
 1230 0026 4009     		lsrs	r0, r0, #5
 1231              	.LVL158:
 565:Src/main.c    ****     {
 1232              		.loc 1 565 0
 1233 0028 1CB1     		cbz	r4, .L79
 565:Src/main.c    ****     {
 1234              		.loc 1 565 0 is_stmt 0 discriminator 1
 1235 002a 10B1     		cbz	r0, .L79
 567:Src/main.c    ****     }
 1236              		.loc 1 567 0 is_stmt 1
 1237 002c 0023     		movs	r3, #0
 1238 002e 3361     		str	r3, [r6, #16]
 1239 0030 1AE0     		b	.L80
 1240              	.L79:
 569:Src/main.c    ****     {
 1241              		.loc 1 569 0
 1242 0032 1CB1     		cbz	r4, .L81
 569:Src/main.c    ****     {
 1243              		.loc 1 569 0 is_stmt 0 discriminator 1
 1244 0034 10B9     		cbnz	r0, .L81
 571:Src/main.c    ****     }
 1245              		.loc 1 571 0 is_stmt 1
 1246 0036 0123     		movs	r3, #1
 1247 0038 3361     		str	r3, [r6, #16]
 1248 003a 15E0     		b	.L80
 1249              	.L81:
 573:Src/main.c    ****     {
 1250              		.loc 1 573 0
 1251 003c 24B9     		cbnz	r4, .L82
 573:Src/main.c    ****     {
 1252              		.loc 1 573 0 is_stmt 0 discriminator 1
 1253 003e 18B1     		cbz	r0, .L82
 575:Src/main.c    ****     }
 1254              		.loc 1 575 0 is_stmt 1
 1255 0040 4FF0FF33 		mov	r3, #-1
 1256 0044 3361     		str	r3, [r6, #16]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 36


 1257 0046 0FE0     		b	.L80
 1258              	.L82:
 577:Src/main.c    ****     {
 1259              		.loc 1 577 0
 1260 0048 3CB9     		cbnz	r4, .L83
 577:Src/main.c    ****     {
 1261              		.loc 1 577 0 is_stmt 0 discriminator 1
 1262 004a 30B9     		cbnz	r0, .L83
 577:Src/main.c    ****     {
 1263              		.loc 1 577 0 discriminator 2
 1264 004c 3369     		ldr	r3, [r6, #16]
 1265 004e 002B     		cmp	r3, #0
 1266 0050 03DA     		bge	.L83
 579:Src/main.c    ****     }
 1267              		.loc 1 579 0 is_stmt 1
 1268 0052 6FF00403 		mvn	r3, #4
 1269 0056 3361     		str	r3, [r6, #16]
 1270 0058 06E0     		b	.L80
 1271              	.L83:
 581:Src/main.c    ****     {
 1272              		.loc 1 581 0
 1273 005a 2CB9     		cbnz	r4, .L80
 581:Src/main.c    ****     {
 1274              		.loc 1 581 0 is_stmt 0 discriminator 1
 1275 005c 20B9     		cbnz	r0, .L80
 581:Src/main.c    ****     {
 1276              		.loc 1 581 0 discriminator 2
 1277 005e 3369     		ldr	r3, [r6, #16]
 1278 0060 002B     		cmp	r3, #0
 1279 0062 01DD     		ble	.L80
 583:Src/main.c    ****     }
 1280              		.loc 1 583 0 is_stmt 1
 1281 0064 0523     		movs	r3, #5
 1282 0066 3361     		str	r3, [r6, #16]
 1283              	.L80:
 587:Src/main.c    ****     char msg[20] = "";
 1284              		.loc 1 587 0
 1285 0068 3046     		mov	r0, r6
 1286              	.LVL159:
 1287 006a FFF7FEFF 		bl	pid_GetGain
 1288              	.LVL160:
 1289 006e 85B2     		uxth	r5, r0
 1290              	.LVL161:
 588:Src/main.c    ****     sprintf(msg, "%d", (int)gain);
 1291              		.loc 1 588 0
 1292 0070 0024     		movs	r4, #0
 1293              	.LVL162:
 1294 0072 0194     		str	r4, [sp, #4]
 1295 0074 0294     		str	r4, [sp, #8]
 1296 0076 0394     		str	r4, [sp, #12]
 1297 0078 0494     		str	r4, [sp, #16]
 1298 007a 0594     		str	r4, [sp, #20]
 589:Src/main.c    ****     print(msg, 0);
 1299              		.loc 1 589 0
 1300 007c 2EB2     		sxth	r6, r5
 1301              	.LVL163:
 1302 007e 01A8     		add	r0, sp, #4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 37


 1303 0080 0F49     		ldr	r1, .L87+4
 1304 0082 3246     		mov	r2, r6
 1305 0084 FFF7FEFF 		bl	sprintf
 1306              	.LVL164:
 590:Src/main.c    ****     /* Set Motor Speeds*/
 1307              		.loc 1 590 0
 1308 0088 01A8     		add	r0, sp, #4
 1309 008a 2146     		mov	r1, r4
 1310 008c FFF7FEFF 		bl	print
 1311              	.LVL165:
 592:Src/main.c    ****     int rspeed = RIGHT_SPEED;
 1312              		.loc 1 592 0
 1313 0090 0C4B     		ldr	r3, .L87+8
 1314 0092 1988     		ldrh	r1, [r3]
 1315              	.LVL166:
 593:Src/main.c    ****     if (gain < 0)
 1316              		.loc 1 593 0
 1317 0094 0C4B     		ldr	r3, .L87+12
 1318 0096 1C88     		ldrh	r4, [r3]
 1319              	.LVL167:
 594:Src/main.c    ****     {
 1320              		.loc 1 594 0
 1321 0098 002E     		cmp	r6, #0
 1322 009a 01DA     		bge	.L84
 596:Src/main.c    ****     }
 1323              		.loc 1 596 0
 1324 009c 891B     		subs	r1, r1, r6
 1325              	.LVL168:
 1326 009e 03E0     		b	.L85
 1327              	.L84:
 598:Src/main.c    ****     {
 1328              		.loc 1 598 0
 1329 00a0 2DB2     		sxth	r5, r5
 1330 00a2 002D     		cmp	r5, #0
 1331 00a4 00DD     		ble	.L85
 600:Src/main.c    ****     }
 1332              		.loc 1 600 0
 1333 00a6 3444     		add	r4, r4, r6
 1334              	.LVL169:
 1335              	.L85:
 602:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1336              		.loc 1 602 0
 1337 00a8 0020     		movs	r0, #0
 1338 00aa FFF7FEFF 		bl	set_motor_speed
 1339              	.LVL170:
 603:Src/main.c    **** }
 1340              		.loc 1 603 0
 1341 00ae 0820     		movs	r0, #8
 1342 00b0 2146     		mov	r1, r4
 1343 00b2 FFF7FEFF 		bl	set_motor_speed
 1344              	.LVL171:
 604:Src/main.c    **** 
 1345              		.loc 1 604 0
 1346 00b6 06B0     		add	sp, sp, #24
 1347              	.LCFI22:
 1348              		.cfi_def_cfa_offset 16
 1349              		@ sp needed
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 38


 1350 00b8 70BD     		pop	{r4, r5, r6, pc}
 1351              	.LVL172:
 1352              	.L88:
 1353 00ba 00BF     		.align	2
 1354              	.L87:
 1355 00bc 00040240 		.word	1073873920
 1356 00c0 40000000 		.word	.LC7
 1357 00c4 00000000 		.word	.LANCHOR0
 1358 00c8 00000000 		.word	.LANCHOR1
 1359              		.cfi_endproc
 1360              	.LFE133:
 1362              		.section	.text.encoder_pid,"ax",%progbits
 1363              		.align	2
 1364              		.global	encoder_pid
 1365              		.thumb
 1366              		.thumb_func
 1368              	encoder_pid:
 1369              	.LFB135:
 625:Src/main.c    **** }
 626:Src/main.c    **** 
 627:Src/main.c    **** void encoder_pid(PID_t *left_pid, ENCODER_t *left_enc, PID_t *right_pid, ENCODER_t *right_enc)
 628:Src/main.c    **** {
 1370              		.loc 1 628 0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 24
 1373              		@ frame_needed = 0, uses_anonymous_args = 0
 1374              	.LVL173:
 1375 0000 70B5     		push	{r4, r5, r6, lr}
 1376              	.LCFI23:
 1377              		.cfi_def_cfa_offset 16
 1378              		.cfi_offset 4, -16
 1379              		.cfi_offset 5, -12
 1380              		.cfi_offset 6, -8
 1381              		.cfi_offset 14, -4
 1382 0002 2DED048B 		fstmfdd	sp!, {d8, d9}
 1383              	.LCFI24:
 1384              		.cfi_def_cfa_offset 32
 1385              		.cfi_offset 80, -32
 1386              		.cfi_offset 81, -28
 1387              		.cfi_offset 82, -24
 1388              		.cfi_offset 83, -20
 1389 0006 86B0     		sub	sp, sp, #24
 1390              	.LCFI25:
 1391              		.cfi_def_cfa_offset 56
 1392 0008 0546     		mov	r5, r0
 1393 000a 1446     		mov	r4, r2
 1394 000c 1E46     		mov	r6, r3
 629:Src/main.c    ****     /* Get error */
 630:Src/main.c    ****     float l_enc = update_encoder(left_enc);
 1395              		.loc 1 630 0
 1396 000e 0846     		mov	r0, r1
 1397              	.LVL174:
 1398 0010 FFF7FEFF 		bl	update_encoder
 1399              	.LVL175:
 1400 0014 F0EE408A 		fcpys	s17, s0
 1401              	.LVL176:
 631:Src/main.c    ****     float r_enc = update_encoder(right_enc);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 39


 1402              		.loc 1 631 0
 1403 0018 3046     		mov	r0, r6
 1404 001a FFF7FEFF 		bl	update_encoder
 1405              	.LVL177:
 1406 001e B0EE408A 		fcpys	s16, s0
 1407              	.LVL178:
 632:Src/main.c    ****     left_pid->err = ENCODER_GOAL - l_enc;
 1408              		.loc 1 632 0
 1409 0022 F0EE087A 		fconsts	s15, #8
 1410 0026 37EEE87A 		fsubs	s14, s15, s17
 1411 002a BDEEC77A 		ftosizs	s14, s14
 1412 002e 85ED047A 		fsts	s14, [r5, #16]	@ int
 633:Src/main.c    ****     right_pid->err = ENCODER_GOAL - r_enc;
 1413              		.loc 1 633 0
 1414 0032 77EEC07A 		fsubs	s15, s15, s0
 1415 0036 FDEEE77A 		ftosizs	s15, s15
 1416 003a C4ED047A 		fsts	s15, [r4, #16]	@ int
 634:Src/main.c    **** 
 635:Src/main.c    ****     /* Get gain */
 636:Src/main.c    ****     int32_t left_gain = pid_GetGain(left_pid);
 1417              		.loc 1 636 0
 1418 003e 2846     		mov	r0, r5
 1419 0040 FFF7FEFF 		bl	pid_GetGain
 1420              	.LVL179:
 1421 0044 0646     		mov	r6, r0
 1422              	.LVL180:
 637:Src/main.c    ****     int32_t right_gain = pid_GetGain(right_pid);
 1423              		.loc 1 637 0
 1424 0046 2046     		mov	r0, r4
 1425              	.LVL181:
 1426 0048 FFF7FEFF 		bl	pid_GetGain
 1427              	.LVL182:
 1428 004c 0546     		mov	r5, r0
 1429              	.LVL183:
 638:Src/main.c    **** 
 639:Src/main.c    ****     int l_predec = (int)(l_enc / 1);
 1430              		.loc 1 639 0
 1431 004e FDEEE87A 		ftosizs	s15, s17
 1432              	.LVL184:
 640:Src/main.c    ****     int l_postdec = (int)((l_enc - l_predec) * 1000);
 1433              		.loc 1 640 0
 1434 0052 B8EEE77A 		fsitos	s14, s15
 1435 0056 78EEC78A 		fsubs	s17, s17, s14
 1436              	.LVL185:
 1437 005a 9FED297A 		flds	s14, .L91
 1438 005e 68EE878A 		fmuls	s17, s17, s14
 1439              	.LVL186:
 641:Src/main.c    ****     int r_predec = (int)(r_enc / 1);
 1440              		.loc 1 641 0
 1441 0062 BDEEC89A 		ftosizs	s18, s16
 1442              	.LVL187:
 642:Src/main.c    ****     int r_postdec = (int)((r_enc - r_predec) * 1000);
 1443              		.loc 1 642 0
 1444 0066 F8EEC96A 		fsitos	s13, s18
 1445 006a 38EE668A 		fsubs	s16, s16, s13
 1446              	.LVL188:
 1447 006e 28EE078A 		fmuls	s16, s16, s14
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 40


 1448 0072 BDEEC88A 		ftosizs	s16, s16
 1449              	.LVL189:
 643:Src/main.c    ****     char msg[18] = "";
 1450              		.loc 1 643 0
 1451 0076 0024     		movs	r4, #0
 1452              	.LVL190:
 1453 0078 0194     		str	r4, [sp, #4]
 1454 007a 0294     		str	r4, [sp, #8]
 1455 007c 0394     		str	r4, [sp, #12]
 1456 007e 0494     		str	r4, [sp, #16]
 1457 0080 ADF81440 		strh	r4, [sp, #20]	@ movhi
 644:Src/main.c    ****     sprintf(msg, "LG: %d.%d", l_predec, l_postdec);
 1458              		.loc 1 644 0
 1459 0084 01A8     		add	r0, sp, #4
 1460              	.LVL191:
 1461 0086 1F49     		ldr	r1, .L91+4
 1462 0088 17EE902A 		fmrs	r2, s15	@ int
 1463 008c FDEEE87A 		ftosizs	s15, s17
 1464              	.LVL192:
 1465 0090 17EE903A 		fmrs	r3, s15	@ int
 1466 0094 FFF7FEFF 		bl	sprintf
 1467              	.LVL193:
 645:Src/main.c    ****     print(msg, 0);
 1468              		.loc 1 645 0
 1469 0098 01A8     		add	r0, sp, #4
 1470 009a 2146     		mov	r1, r4
 1471 009c FFF7FEFF 		bl	print
 1472              	.LVL194:
 646:Src/main.c    ****     sprintf(msg, "RG: %d.%d", r_predec, r_postdec);
 1473              		.loc 1 646 0
 1474 00a0 01A8     		add	r0, sp, #4
 1475 00a2 1949     		ldr	r1, .L91+8
 1476 00a4 19EE102A 		fmrs	r2, s18	@ int
 1477 00a8 18EE103A 		fmrs	r3, s16	@ int
 1478 00ac FFF7FEFF 		bl	sprintf
 1479              	.LVL195:
 647:Src/main.c    ****     print(msg, 1);
 1480              		.loc 1 647 0
 1481 00b0 01A8     		add	r0, sp, #4
 1482 00b2 0121     		movs	r1, #1
 1483 00b4 FFF7FEFF 		bl	print
 1484              	.LVL196:
 648:Src/main.c    **** 
 649:Src/main.c    ****     /* Set Motor Speeds*/
 650:Src/main.c    ****     int lspeed = LEFT_SPEED + left_gain;
 1485              		.loc 1 650 0
 1486 00b8 144B     		ldr	r3, .L91+12
 1487 00ba 1B88     		ldrh	r3, [r3]
 1488 00bc 1E44     		add	r6, r6, r3
 1489              	.LVL197:
 651:Src/main.c    ****     int rspeed = RIGHT_SPEED + right_gain;
 1490              		.loc 1 651 0
 1491 00be 144B     		ldr	r3, .L91+16
 1492 00c0 1B88     		ldrh	r3, [r3]
 1493 00c2 1D44     		add	r5, r5, r3
 1494              	.LVL198:
 652:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 41


 653:Src/main.c    ****     sprintf(msg, "LS: %d", (int)lspeed);
 1495              		.loc 1 653 0
 1496 00c4 01A8     		add	r0, sp, #4
 1497 00c6 1349     		ldr	r1, .L91+20
 1498 00c8 3246     		mov	r2, r6
 1499 00ca FFF7FEFF 		bl	sprintf
 1500              	.LVL199:
 654:Src/main.c    ****     print(msg, 3);
 1501              		.loc 1 654 0
 1502 00ce 01A8     		add	r0, sp, #4
 1503 00d0 0321     		movs	r1, #3
 1504 00d2 FFF7FEFF 		bl	print
 1505              	.LVL200:
 655:Src/main.c    ****     sprintf(msg, "RS: %d", (int)rspeed);
 1506              		.loc 1 655 0
 1507 00d6 01A8     		add	r0, sp, #4
 1508 00d8 0F49     		ldr	r1, .L91+24
 1509 00da 2A46     		mov	r2, r5
 1510 00dc FFF7FEFF 		bl	sprintf
 1511              	.LVL201:
 656:Src/main.c    ****     print(msg, 4);
 1512              		.loc 1 656 0
 1513 00e0 01A8     		add	r0, sp, #4
 1514 00e2 0421     		movs	r1, #4
 1515 00e4 FFF7FEFF 		bl	print
 1516              	.LVL202:
 657:Src/main.c    ****     // set_motor_speed
 658:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_1, lspeed);
 1517              		.loc 1 658 0
 1518 00e8 2046     		mov	r0, r4
 1519 00ea 3146     		mov	r1, r6
 1520 00ec FFF7FEFF 		bl	set_motor_speed
 1521              	.LVL203:
 659:Src/main.c    ****     set_motor_speed(TIM_CHANNEL_3, rspeed);
 1522              		.loc 1 659 0
 1523 00f0 0820     		movs	r0, #8
 1524 00f2 2946     		mov	r1, r5
 1525 00f4 FFF7FEFF 		bl	set_motor_speed
 1526              	.LVL204:
 660:Src/main.c    **** }
 1527              		.loc 1 660 0
 1528 00f8 06B0     		add	sp, sp, #24
 1529              	.LCFI26:
 1530              		.cfi_def_cfa_offset 32
 1531              		@ sp needed
 1532 00fa BDEC048B 		fldmfdd	sp!, {d8-d9}
 1533              	.LCFI27:
 1534              		.cfi_restore 82
 1535              		.cfi_restore 83
 1536              		.cfi_restore 80
 1537              		.cfi_restore 81
 1538              		.cfi_def_cfa_offset 16
 1539              	.LVL205:
 1540 00fe 70BD     		pop	{r4, r5, r6, pc}
 1541              	.LVL206:
 1542              	.L92:
 1543              		.align	2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 42


 1544              	.L91:
 1545 0100 00007A44 		.word	1148846080
 1546 0104 6C000000 		.word	.LC13
 1547 0108 78000000 		.word	.LC14
 1548 010c 00000000 		.word	.LANCHOR0
 1549 0110 00000000 		.word	.LANCHOR1
 1550 0114 84000000 		.word	.LC15
 1551 0118 8C000000 		.word	.LC16
 1552              		.cfi_endproc
 1553              	.LFE135:
 1555              		.section	.text._Error_Handler,"ax",%progbits
 1556              		.align	2
 1557              		.global	_Error_Handler
 1558              		.thumb
 1559              		.thumb_func
 1561              	_Error_Handler:
 1562              	.LFB136:
 661:Src/main.c    **** 
 662:Src/main.c    **** /* USER CODE END 4 */
 663:Src/main.c    **** 
 664:Src/main.c    **** /**
 665:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 666:Src/main.c    ****   * @param  file: The file name as string.
 667:Src/main.c    ****   * @param  line: The line in file as a number.
 668:Src/main.c    ****   * @retval None
 669:Src/main.c    ****   */
 670:Src/main.c    **** void _Error_Handler(char *file, int line)
 671:Src/main.c    **** {
 1563              		.loc 1 671 0
 1564              		.cfi_startproc
 1565              		@ Volatile: function does not return.
 1566              		@ args = 0, pretend = 0, frame = 0
 1567              		@ frame_needed = 0, uses_anonymous_args = 0
 1568              		@ link register save eliminated.
 1569              	.LVL207:
 1570              	.L94:
 672:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 673:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 674:Src/main.c    ****     while (1)
 675:Src/main.c    ****     {
 676:Src/main.c    ****     }
 1571              		.loc 1 676 0 discriminator 1
 1572 0000 FEE7     		b	.L94
 1573              		.cfi_endproc
 1574              	.LFE136:
 1576 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1577              		.align	2
 1578              		.global	SystemClock_Config
 1579              		.thumb
 1580              		.thumb_func
 1582              	SystemClock_Config:
 1583              	.LFB125:
 258:Src/main.c    **** 
 1584              		.loc 1 258 0
 1585              		.cfi_startproc
 1586              		@ args = 0, pretend = 0, frame = 80
 1587              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 43


 1588 0000 00B5     		push	{lr}
 1589              	.LCFI28:
 1590              		.cfi_def_cfa_offset 4
 1591              		.cfi_offset 14, -4
 1592 0002 95B0     		sub	sp, sp, #84
 1593              	.LCFI29:
 1594              		.cfi_def_cfa_offset 88
 1595              	.LBB5:
 265:Src/main.c    **** 
 1596              		.loc 1 265 0
 1597 0004 0022     		movs	r2, #0
 1598 0006 0192     		str	r2, [sp, #4]
 1599 0008 2A4B     		ldr	r3, .L99
 1600 000a 196C     		ldr	r1, [r3, #64]
 1601 000c 41F08051 		orr	r1, r1, #268435456
 1602 0010 1964     		str	r1, [r3, #64]
 1603 0012 1B6C     		ldr	r3, [r3, #64]
 1604 0014 03F08053 		and	r3, r3, #268435456
 1605 0018 0193     		str	r3, [sp, #4]
 1606 001a 019B     		ldr	r3, [sp, #4]
 1607              	.LBE5:
 1608              	.LBB6:
 267:Src/main.c    **** 
 1609              		.loc 1 267 0
 1610 001c 0292     		str	r2, [sp, #8]
 1611 001e 2649     		ldr	r1, .L99+4
 1612 0020 0B68     		ldr	r3, [r1]
 1613 0022 23F44043 		bic	r3, r3, #49152
 1614 0026 43F40043 		orr	r3, r3, #32768
 1615 002a 0B60     		str	r3, [r1]
 1616 002c 0B68     		ldr	r3, [r1]
 1617 002e 03F44043 		and	r3, r3, #49152
 1618 0032 0293     		str	r3, [sp, #8]
 1619 0034 029B     		ldr	r3, [sp, #8]
 1620              	.LBE6:
 271:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1621              		.loc 1 271 0
 1622 0036 0223     		movs	r3, #2
 1623 0038 0893     		str	r3, [sp, #32]
 272:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 1624              		.loc 1 272 0
 1625 003a 0121     		movs	r1, #1
 1626 003c 0B91     		str	r1, [sp, #44]
 273:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1627              		.loc 1 273 0
 1628 003e 1021     		movs	r1, #16
 1629 0040 0C91     		str	r1, [sp, #48]
 274:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1630              		.loc 1 274 0
 1631 0042 0E93     		str	r3, [sp, #56]
 275:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1632              		.loc 1 275 0
 1633 0044 0F92     		str	r2, [sp, #60]
 276:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 1634              		.loc 1 276 0
 1635 0046 0822     		movs	r2, #8
 1636 0048 1092     		str	r2, [sp, #64]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 44


 277:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1637              		.loc 1 277 0
 1638 004a 4822     		movs	r2, #72
 1639 004c 1192     		str	r2, [sp, #68]
 278:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1640              		.loc 1 278 0
 1641 004e 1293     		str	r3, [sp, #72]
 279:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1642              		.loc 1 279 0
 1643 0050 0423     		movs	r3, #4
 1644 0052 1393     		str	r3, [sp, #76]
 280:Src/main.c    ****   {
 1645              		.loc 1 280 0
 1646 0054 08A8     		add	r0, sp, #32
 1647 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1648              	.LVL208:
 1649 005a 20B1     		cbz	r0, .L96
 282:Src/main.c    ****   }
 1650              		.loc 1 282 0
 1651 005c 1748     		ldr	r0, .L99+8
 1652 005e 4FF48D71 		mov	r1, #282
 1653 0062 FFF7FEFF 		bl	_Error_Handler
 1654              	.LVL209:
 1655              	.L96:
 287:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1656              		.loc 1 287 0
 1657 0066 0F23     		movs	r3, #15
 1658 0068 0393     		str	r3, [sp, #12]
 289:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1659              		.loc 1 289 0
 1660 006a 0221     		movs	r1, #2
 1661 006c 0491     		str	r1, [sp, #16]
 290:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1662              		.loc 1 290 0
 1663 006e 0023     		movs	r3, #0
 1664 0070 0593     		str	r3, [sp, #20]
 291:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1665              		.loc 1 291 0
 1666 0072 4FF48052 		mov	r2, #4096
 1667 0076 0692     		str	r2, [sp, #24]
 292:Src/main.c    **** 
 1668              		.loc 1 292 0
 1669 0078 0793     		str	r3, [sp, #28]
 294:Src/main.c    ****   {
 1670              		.loc 1 294 0
 1671 007a 03A8     		add	r0, sp, #12
 1672 007c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1673              	.LVL210:
 1674 0080 20B1     		cbz	r0, .L97
 296:Src/main.c    ****   }
 1675              		.loc 1 296 0
 1676 0082 0E48     		ldr	r0, .L99+8
 1677 0084 4FF49471 		mov	r1, #296
 1678 0088 FFF7FEFF 		bl	_Error_Handler
 1679              	.LVL211:
 1680              	.L97:
 301:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 45


 1681              		.loc 1 301 0
 1682 008c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1683              	.LVL212:
 1684 0090 0B4B     		ldr	r3, .L99+12
 1685 0092 A3FB0030 		umull	r3, r0, r3, r0
 1686 0096 8009     		lsrs	r0, r0, #6
 1687 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1688              	.LVL213:
 305:Src/main.c    **** 
 1689              		.loc 1 305 0
 1690 009c 0420     		movs	r0, #4
 1691 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1692              	.LVL214:
 308:Src/main.c    **** }
 1693              		.loc 1 308 0
 1694 00a2 4FF0FF30 		mov	r0, #-1
 1695 00a6 0021     		movs	r1, #0
 1696 00a8 0A46     		mov	r2, r1
 1697 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1698              	.LVL215:
 309:Src/main.c    **** 
 1699              		.loc 1 309 0
 1700 00ae 15B0     		add	sp, sp, #84
 1701              	.LCFI30:
 1702              		.cfi_def_cfa_offset 4
 1703              		@ sp needed
 1704 00b0 5DF804FB 		ldr	pc, [sp], #4
 1705              	.L100:
 1706              		.align	2
 1707              	.L99:
 1708 00b4 00380240 		.word	1073887232
 1709 00b8 00700040 		.word	1073770496
 1710 00bc 94000000 		.word	.LC17
 1711 00c0 D34D6210 		.word	274877907
 1712              		.cfi_endproc
 1713              	.LFE125:
 1715              		.section	.text.main,"ax",%progbits
 1716              		.align	2
 1717              		.global	main
 1718              		.thumb
 1719              		.thumb_func
 1721              	main:
 1722              	.LFB124:
 109:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1723              		.loc 1 109 0
 1724              		.cfi_startproc
 1725              		@ Volatile: function does not return.
 1726              		@ args = 0, pretend = 0, frame = 0
 1727              		@ frame_needed = 0, uses_anonymous_args = 0
 1728 0000 08B5     		push	{r3, lr}
 1729              	.LCFI31:
 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 3, -8
 1732              		.cfi_offset 14, -4
 117:Src/main.c    **** 
 1733              		.loc 1 117 0
 1734 0002 FFF7FEFF 		bl	HAL_Init
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 46


 1735              	.LVL216:
 124:Src/main.c    **** 
 1736              		.loc 1 124 0
 1737 0006 FFF7FEFF 		bl	SystemClock_Config
 1738              	.LVL217:
 131:Src/main.c    ****   MX_DMA_Init();
 1739              		.loc 1 131 0
 1740 000a FFF7FEFF 		bl	MX_GPIO_Init
 1741              	.LVL218:
 132:Src/main.c    ****   MX_TIM3_Init();
 1742              		.loc 1 132 0
 1743 000e FFF7FEFF 		bl	MX_DMA_Init
 1744              	.LVL219:
 133:Src/main.c    ****   MX_TIM1_Init();
 1745              		.loc 1 133 0
 1746 0012 FFF7FEFF 		bl	MX_TIM3_Init
 1747              	.LVL220:
 134:Src/main.c    ****   MX_TIM2_Init();
 1748              		.loc 1 134 0
 1749 0016 FFF7FEFF 		bl	MX_TIM1_Init
 1750              	.LVL221:
 135:Src/main.c    ****   MX_USART6_UART_Init();
 1751              		.loc 1 135 0
 1752 001a FFF7FEFF 		bl	MX_TIM2_Init
 1753              	.LVL222:
 136:Src/main.c    ****   MX_ADC1_Init();
 1754              		.loc 1 136 0
 1755 001e FFF7FEFF 		bl	MX_USART6_UART_Init
 1756              	.LVL223:
 137:Src/main.c    ****   MX_I2C1_Init();
 1757              		.loc 1 137 0
 1758 0022 FFF7FEFF 		bl	MX_ADC1_Init
 1759              	.LVL224:
 138:Src/main.c    ****   MX_TIM4_Init();
 1760              		.loc 1 138 0
 1761 0026 FFF7FEFF 		bl	MX_I2C1_Init
 1762              	.LVL225:
 139:Src/main.c    ****   MX_TIM9_Init();
 1763              		.loc 1 139 0
 1764 002a FFF7FEFF 		bl	MX_TIM4_Init
 1765              	.LVL226:
 140:Src/main.c    ****   MX_TIM5_Init();
 1766              		.loc 1 140 0
 1767 002e FFF7FEFF 		bl	MX_TIM9_Init
 1768              	.LVL227:
 141:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1769              		.loc 1 141 0
 1770 0032 FFF7FEFF 		bl	MX_TIM5_Init
 1771              	.LVL228:
 158:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1772              		.loc 1 158 0
 1773 0036 1A48     		ldr	r0, .L104
 1774 0038 1821     		movs	r1, #24
 1775 003a FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1776              	.LVL229:
 159:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1777              		.loc 1 159 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 47


 1778 003e 1948     		ldr	r0, .L104+4
 1779 0040 1821     		movs	r1, #24
 1780 0042 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1781              	.LVL230:
 160:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 1782              		.loc 1 160 0
 1783 0046 184C     		ldr	r4, .L104+8
 1784 0048 2046     		mov	r0, r4
 1785 004a 0021     		movs	r1, #0
 1786 004c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1787              	.LVL231:
 161:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1788              		.loc 1 161 0
 1789 0050 2046     		mov	r0, r4
 1790 0052 0421     		movs	r1, #4
 1791 0054 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1792              	.LVL232:
 162:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 1793              		.loc 1 162 0
 1794 0058 2046     		mov	r0, r4
 1795 005a 0821     		movs	r1, #8
 1796 005c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1797              	.LVL233:
 163:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1798              		.loc 1 163 0
 1799 0060 2046     		mov	r0, r4
 1800 0062 0C21     		movs	r1, #12
 1801 0064 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1802              	.LVL234:
 164:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1803              		.loc 1 164 0
 1804 0068 104C     		ldr	r4, .L104+12
 1805 006a 2046     		mov	r0, r4
 1806 006c 0021     		movs	r1, #0
 1807 006e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1808              	.LVL235:
 165:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1809              		.loc 1 165 0
 1810 0072 2046     		mov	r0, r4
 1811 0074 0421     		movs	r1, #4
 1812 0076 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1813              	.LVL236:
 166:Src/main.c    **** 
 1814              		.loc 1 166 0
 1815 007a 2046     		mov	r0, r4
 1816 007c 0821     		movs	r1, #8
 1817 007e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1818              	.LVL237:
 169:Src/main.c    ****     print("Starting", 0);
 1819              		.loc 1 169 0
 1820 0082 FFF7FEFF 		bl	ssd1306_Init
 1821              	.LVL238:
 170:Src/main.c    ****     claw_init(&htim3);
 1822              		.loc 1 170 0
 1823 0086 0A48     		ldr	r0, .L104+16
 1824 0088 0021     		movs	r1, #0
 1825 008a FFF7FEFF 		bl	print
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 48


 1826              	.LVL239:
 171:Src/main.c    ****     ///basket_init(&htim3);
 1827              		.loc 1 171 0
 1828 008e 2046     		mov	r0, r4
 1829 0090 FFF7FEFF 		bl	claw_init
 1830              	.LVL240:
 174:Src/main.c    ****     
 1831              		.loc 1 174 0
 1832 0094 0020     		movs	r0, #0
 1833 0096 4FF49671 		mov	r1, #300
 1834 009a FFF7FEFF 		bl	set_motor_speed
 1835              	.LVL241:
 1836              	.L102:
 248:Src/main.c    ****   /* USER CODE END 3 */
 1837              		.loc 1 248 0 discriminator 1
 1838 009e FEE7     		b	.L102
 1839              	.L105:
 1840              		.align	2
 1841              	.L104:
 1842 00a0 00000000 		.word	htim4
 1843 00a4 00000000 		.word	htim5
 1844 00a8 00000000 		.word	htim1
 1845 00ac 00000000 		.word	htim3
 1846 00b0 30000000 		.word	.LC5
 1847              		.cfi_endproc
 1848              	.LFE124:
 1850              		.comm	adc_values,12288,4
 1851              		.comm	dma_buffer,12288,4
 1852              		.global	RIGHT_SPEED
 1853              		.global	LEFT_SPEED
 1854              		.section	.data.RIGHT_SPEED,"aw",%progbits
 1855              		.align	1
 1856              		.set	.LANCHOR1,. + 0
 1859              	RIGHT_SPEED:
 1860 0000 B202     		.short	690
 1861              		.section	.data.LEFT_SPEED,"aw",%progbits
 1862              		.align	1
 1863              		.set	.LANCHOR0,. + 0
 1866              	LEFT_SPEED:
 1867 0000 6202     		.short	610
 1868              		.section	.rodata.str1.4,"aMS",%progbits,1
 1869              		.align	2
 1870              	.LC0:
 1871 0000 25642E25 		.ascii	"%d.%d\012\000"
 1871      640A00
 1872 0007 00       		.space	1
 1873              	.LC1:
 1874 0008 25642E25 		.ascii	"%d.%d\000"
 1874      6400
 1875 000e 0000     		.space	2
 1876              	.LC2:
 1877 0010 636E7473 		.ascii	"cnts: %d\000"
 1877      3A202564 
 1877      00
 1878 0019 000000   		.space	3
 1879              	.LC3:
 1880 001c 766C7473 		.ascii	"vlts: %d.%d\000"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 49


 1880      3A202564 
 1880      2E256400 
 1881              	.LC4:
 1882 0028 5069206E 		.ascii	"Pi nav\000"
 1882      617600
 1883 002f 00       		.space	1
 1884              	.LC5:
 1885 0030 53746172 		.ascii	"Starting\000"
 1885      74696E67 
 1885      00
 1886 0039 000000   		.space	3
 1887              	.LC6:
 1888 003c 256C7500 		.ascii	"%lu\000"
 1889              	.LC7:
 1890 0040 256400   		.ascii	"%d\000"
 1891 0043 00       		.space	1
 1892              	.LC8:
 1893 0044 5020256C 		.ascii	"P %lu\000"
 1893      7500
 1894 004a 0000     		.space	2
 1895              	.LC9:
 1896 004c 4420256C 		.ascii	"D %lu\000"
 1896      7500
 1897 0052 0000     		.space	2
 1898              	.LC10:
 1899 0054 4920256C 		.ascii	"I %lu\000"
 1899      7500
 1900 005a 0000     		.space	2
 1901              	.LC11:
 1902 005c 4C202575 		.ascii	"L %u\000"
 1902      00
 1903 0061 000000   		.space	3
 1904              	.LC12:
 1905 0064 52202575 		.ascii	"R %u\000"
 1905      00
 1906 0069 000000   		.space	3
 1907              	.LC13:
 1908 006c 4C473A20 		.ascii	"LG: %d.%d\000"
 1908      25642E25 
 1908      6400
 1909 0076 0000     		.space	2
 1910              	.LC14:
 1911 0078 52473A20 		.ascii	"RG: %d.%d\000"
 1911      25642E25 
 1911      6400
 1912 0082 0000     		.space	2
 1913              	.LC15:
 1914 0084 4C533A20 		.ascii	"LS: %d\000"
 1914      256400
 1915 008b 00       		.space	1
 1916              	.LC16:
 1917 008c 52533A20 		.ascii	"RS: %d\000"
 1917      256400
 1918 0093 00       		.space	1
 1919              	.LC17:
 1920 0094 5372632F 		.ascii	"Src/main.c\000"
 1920      6D61696E 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 50


 1920      2E6300
 1921              		.text
 1922              	.Letext0:
 1923              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1924              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 1925              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 1926              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 1927              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1928              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1929              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1930              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1931              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1932              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1933              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1934              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1935              		.file 14 "Inc/fonts.h"
 1936              		.file 15 "Inc/ssd1306.h"
 1937              		.file 16 "Inc/encoder.h"
 1938              		.file 17 "Inc/pid.h"
 1939              		.file 18 "Drivers/CMSIS/Include/core_cm4.h"
 1940              		.file 19 "Inc/adc.h"
 1941              		.file 20 "Inc/tim.h"
 1942              		.file 21 "Inc/usart.h"
 1943              		.file 22 "Inc/extern_vars.h"
 1944              		.file 23 "Inc/filter.h"
 1945              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1946              		.file 25 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 1947              		.file 26 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 1948              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1949              		.file 28 "Inc/gpio.h"
 1950              		.file 29 "Inc/dma.h"
 1951              		.file 30 "Inc/i2c.h"
 1952              		.file 31 "Inc/claw.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 51


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000003000 adc_values
                            *COM*:0000000000003000 dma_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:60     .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:65     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:96     .text.calculate_heading:0000000000000020 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:103    .text.alarm_detect:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:108    .text.alarm_detect:0000000000000000 alarm_detect
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:168    .text.alarm_detect:0000000000000050 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:177    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:182    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:229    .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:236    .text.frequency_comparison:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:241    .text.frequency_comparison:0000000000000000 frequency_comparison
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:442    .text.frequency_comparison:0000000000000138 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:454    .text.set_motor_speed:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:459    .text.set_motor_speed:0000000000000000 set_motor_speed
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:521    .text.set_motor_speed:0000000000000044 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:528    .text.turn:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:533    .text.turn:0000000000000000 turn
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:715    .text.turn:0000000000000118 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:730    .text.pi_navigation:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:735    .text.pi_navigation:0000000000000000 pi_navigation
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:844    .text.pi_navigation:00000000000000ac $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:854    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:859    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1174   .text.menu:00000000000001d0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1191   .text.do_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1196   .text.do_pid:0000000000000000 do_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1355   .text.do_pid:00000000000000bc $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1363   .text.encoder_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1368   .text.encoder_pid:0000000000000000 encoder_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1545   .text.encoder_pid:0000000000000100 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1556   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1561   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1577   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1582   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1708   .text.SystemClock_Config:00000000000000b4 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1716   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1721   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1842   .text.main:00000000000000a0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1859   .data.RIGHT_SPEED:0000000000000000 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1866   .data.LEFT_SPEED:0000000000000000 LEFT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1855   .data.RIGHT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1862   .data.LEFT_SPEED:0000000000000000 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s:1869   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccWGsDaW.s 			page 52


__aeabi_d2f
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
ssd1306_Fill
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
__aeabi_d2iz
__aeabi_i2d
sprintf
strlen
HAL_UART_Transmit
huart6
htim1
__aeabi_f2d
__aeabi_d2uiz
PI_INT_STATE
HAL_GPIO_ReadPin
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
pid_Init
pid_GetGain
update_encoder
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
HAL_TIM_Encoder_Start
ssd1306_Init
claw_init
htim4
htim5
htim3
