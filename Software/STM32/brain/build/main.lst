ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_ADC_ConvCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_ADC_ConvCpltCallback:
  27              	.LFB123:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  ** This notice applies to any and all portions of this file
   8:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****  * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****  * inserted by the user or by software development tools
  11:Src/main.c    ****  * are owned by their respective copyright owners.
  12:Src/main.c    ****  *
  13:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****  *
  15:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****  * are permitted provided that the following conditions are met:
  17:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****  *      and/or other materials provided with the distribution.
  22:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****  *      without specific prior written permission.
  25:Src/main.c    ****  *
  26:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 2


  31:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****  *
  37:Src/main.c    ****  ******************************************************************************
  38:Src/main.c    ****  */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "adc.h"
  43:Src/main.c    **** #include "dma.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** #include "fonts.h"
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** #include "pid.h"
  53:Src/main.c    **** #include "filter.h"
  54:Src/main.c    **** #include "encoder.h"
  55:Src/main.c    **** #include "extern_vars.h"
  56:Src/main.c    **** #include <String.h>
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END Includes */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** //TODO: Drive system, signed int32, giving forward backward, encoders, coordinate system.
  65:Src/main.c    **** uint16_t LEFT_SPEED;
  66:Src/main.c    **** uint16_t RIGHT_SPEED;
  67:Src/main.c    **** uint32_t adc_buffer[3072];
  68:Src/main.c    **** uint32_t read_value[3072];
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PV */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  73:Src/main.c    **** void SystemClock_Config(void);
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN PFP */
  76:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  77:Src/main.c    **** void print(char msg[], int row);
  78:Src/main.c    **** void do_pid(PID_t *pid_struct);
  79:Src/main.c    **** PID_t menu();
  80:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin);
  81:Src/main.c    **** void pi_navigation();
  82:Src/main.c    **** int8_t calculate_heading(uint32_t adc_val);
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END PFP */
  85:Src/main.c    **** 
  86:Src/main.c    **** /* USER CODE BEGIN 0 */
  87:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 3


  88:Src/main.c    **** {
  29              		.loc 1 88 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  89:Src/main.c    ****     memcpy(read_value, adc_buffer, sizeof(adc_buffer));
  39              		.loc 1 89 0
  40 0002 0348     		ldr	r0, .L3
  41              	.LVL1:
  42 0004 0349     		ldr	r1, .L3+4
  43 0006 4FF44052 		mov	r2, #12288
  44 000a FFF7FEFF 		bl	memcpy
  45              	.LVL2:
  46 000e 08BD     		pop	{r3, pc}
  47              	.L4:
  48              		.align	2
  49              	.L3:
  50 0010 00000000 		.word	read_value
  51 0014 00000000 		.word	adc_buffer
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.section	.text.calculate_heading,"ax",%progbits
  56              		.align	2
  57              		.global	calculate_heading
  58              		.thumb
  59              		.thumb_func
  61              	calculate_heading:
  62              	.LFB127:
  90:Src/main.c    **** }
  91:Src/main.c    **** /* USER CODE END 0 */
  92:Src/main.c    **** 
  93:Src/main.c    **** /**
  94:Src/main.c    ****  * @brief  The application entry point.
  95:Src/main.c    ****  *
  96:Src/main.c    ****  * @retval None
  97:Src/main.c    ****  */
  98:Src/main.c    **** int main(void)
  99:Src/main.c    **** {
 100:Src/main.c    ****     /* USER CODE BEGIN 1 */
 101:Src/main.c    **** 
 102:Src/main.c    ****     /* USER CODE END 1 */
 103:Src/main.c    **** 
 104:Src/main.c    ****     /* MCU Configuration----------------------------------------------------------*/
 105:Src/main.c    **** 
 106:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 107:Src/main.c    ****     HAL_Init();
 108:Src/main.c    **** 
 109:Src/main.c    ****     /* USER CODE BEGIN Init */
 110:Src/main.c    **** 
 111:Src/main.c    ****     /* USER CODE END Init */
 112:Src/main.c    **** 
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 4


 113:Src/main.c    ****     /* Configure the system clock */
 114:Src/main.c    ****     SystemClock_Config();
 115:Src/main.c    **** 
 116:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 117:Src/main.c    **** 
 118:Src/main.c    ****     /* USER CODE END SysInit */
 119:Src/main.c    **** 
 120:Src/main.c    ****     /* Initialize all configured peripherals */
 121:Src/main.c    ****     MX_GPIO_Init();
 122:Src/main.c    ****     MX_DMA_Init();
 123:Src/main.c    ****     MX_TIM3_Init();
 124:Src/main.c    ****     MX_TIM1_Init();
 125:Src/main.c    ****     MX_TIM2_Init();
 126:Src/main.c    ****     MX_USART6_UART_Init();
 127:Src/main.c    ****     MX_ADC1_Init();
 128:Src/main.c    ****     MX_I2C1_Init();
 129:Src/main.c    ****     MX_TIM4_Init();
 130:Src/main.c    ****     MX_TIM9_Init();
 131:Src/main.c    ****     MX_TIM5_Init();
 132:Src/main.c    ****     /* USER CODE BEGIN 2 */
 133:Src/main.c    **** 
 134:Src/main.c    ****     /* Initialize all timer related stuffs*/
 135:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 136:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 137:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 138:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 139:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 140:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 141:Src/main.c    **** 
 142:Src/main.c    ****     /* Initialize other stuffs*/
 143:Src/main.c    ****     ssd1306_Init();
 144:Src/main.c    ****     print("Starting...", 0);
 145:Src/main.c    **** 
 146:Src/main.c    ****     /* USER CODE END 2 */
 147:Src/main.c    **** 
 148:Src/main.c    ****     /* Infinite loop */
 149:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 150:Src/main.c    ****     while (1)
 151:Src/main.c    ****     {
 152:Src/main.c    ****         if(PI_INT_STATE == FLAGGED){
 153:Src/main.c    ****             pi_navigation();
 154:Src/main.c    ****         }
 155:Src/main.c    **** 
 156:Src/main.c    ****         /* USER CODE END WHILE */
 157:Src/main.c    **** 
 158:Src/main.c    ****         /* USER CODE BEGIN 3 */
 159:Src/main.c    ****     }
 160:Src/main.c    ****     /* USER CODE END 3 */
 161:Src/main.c    **** 
 162:Src/main.c    **** }
 163:Src/main.c    **** 
 164:Src/main.c    **** /**
 165:Src/main.c    ****  * @brief System Clock Configuration
 166:Src/main.c    ****  * @retval None
 167:Src/main.c    ****  */
 168:Src/main.c    **** void SystemClock_Config(void)
 169:Src/main.c    **** {
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 5


 170:Src/main.c    **** 
 171:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 172:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 173:Src/main.c    **** 
 174:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 175:Src/main.c    ****     */
 176:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 177:Src/main.c    **** 
 178:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 179:Src/main.c    **** 
 180:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 181:Src/main.c    ****     */
 182:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 183:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 184:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 185:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 186:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 187:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 188:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 189:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 190:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 191:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 192:Src/main.c    ****     {
 193:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 194:Src/main.c    ****     }
 195:Src/main.c    **** 
 196:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 197:Src/main.c    ****     */
 198:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 199:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 200:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 201:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 202:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 203:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 204:Src/main.c    **** 
 205:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 206:Src/main.c    ****     {
 207:Src/main.c    ****         _Error_Handler(__FILE__, __LINE__);
 208:Src/main.c    ****     }
 209:Src/main.c    **** 
 210:Src/main.c    ****     /**Configure the Systick interrupt time 
 211:Src/main.c    ****     */
 212:Src/main.c    ****     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 213:Src/main.c    **** 
 214:Src/main.c    ****     /**Configure the Systick 
 215:Src/main.c    ****     */
 216:Src/main.c    ****     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 217:Src/main.c    **** 
 218:Src/main.c    ****     /* SysTick_IRQn interrupt configuration */
 219:Src/main.c    ****     HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 220:Src/main.c    **** }
 221:Src/main.c    **** 
 222:Src/main.c    **** /* USER CODE BEGIN 4 */
 223:Src/main.c    **** 
 224:Src/main.c    **** void pi_navigation(){
 225:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, adc_buffer, sizeof(adc_buffer)/sizeof(adc_buffer[0]));
 226:Src/main.c    ****     print("Pi Nav", 0);
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 6


 227:Src/main.c    ****     HAL_Delay(10);
 228:Src/main.c    ****     LEFT_SPEED = 850;
 229:Src/main.c    ****     RIGHT_SPEED = 850;
 230:Src/main.c    ****     while(1){
 231:Src/main.c    ****         int32_t heading = calculate_heading(read_value[2]);
 232:Src/main.c    ****         uint32_t lspeed=LEFT_SPEED;
 233:Src/main.c    ****         uint32_t rspeed=RIGHT_SPEED;
 234:Src/main.c    ****         if (heading < 0)
 235:Src/main.c    ****         {   
 236:Src/main.c    ****             lspeed = LEFT_SPEED-heading;
 237:Src/main.c    ****             __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, lspeed);
 238:Src/main.c    ****         }
 239:Src/main.c    ****         else if (heading > 0)
 240:Src/main.c    ****         {
 241:Src/main.c    ****             rspeed = RIGHT_SPEED+heading;
 242:Src/main.c    ****             __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, rspeed);
 243:Src/main.c    ****         }
 244:Src/main.c    ****         char msg[20] = "";
 245:Src/main.c    ****         sprintf(msg, "L: %lu", lspeed);
 246:Src/main.c    ****         print(msg, 0);
 247:Src/main.c    ****         sprintf(msg, "RL %lu", rspeed);
 248:Src/main.c    ****         print(msg, 1);
 249:Src/main.c    ****     } 
 250:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 251:Src/main.c    ****     PI_INT_STATE = NOT_FLAGGED;
 252:Src/main.c    **** }
 253:Src/main.c    **** 
 254:Src/main.c    **** /**
 255:Src/main.c    ****  * Resistor ladder: 8-bit, 0->3.3v.
 256:Src/main.c    ****  * ADC: 12-bit, 0->3.3V
 257:Src/main.c    ****  *
 258:Src/main.c    ****  * @param adc_val, value read from ADC.
 259:Src/main.c    ****  * @return heading as a percentage from -50 (left) to 50 (right).
 260:Src/main.c    ****  **/
 261:Src/main.c    **** int8_t calculate_heading(uint32_t adc_val){
  63              		.loc 1 261 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68              	.LVL3:
 262:Src/main.c    ****     return adc_val/4096*100-50;
  69              		.loc 1 262 0
  70 0000 000B     		lsrs	r0, r0, #12
  71              	.LVL4:
  72 0002 00EB8003 		add	r3, r0, r0, lsl #2
  73 0006 03EB8303 		add	r3, r3, r3, lsl #2
  74 000a 9800     		lsls	r0, r3, #2
  75 000c 3238     		subs	r0, r0, #50
 263:Src/main.c    **** }
  76              		.loc 1 263 0
  77 000e 40B2     		sxtb	r0, r0
  78 0010 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE127:
  82              		.global	__aeabi_d2iz
  83              		.global	__aeabi_i2d
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 7


  84              		.global	__aeabi_dsub
  85              		.global	__aeabi_dmul
  86              		.global	__aeabi_dcmpgt
  87 0012 00BF     		.section	.text.frequency_comparison,"ax",%progbits
  88              		.align	2
  89              		.global	frequency_comparison
  90              		.thumb
  91              		.thumb_func
  93              	frequency_comparison:
  94              	.LFB128:
 264:Src/main.c    **** 
 265:Src/main.c    **** void frequency_comparison(uint16_t freq1, uint16_t freq2, uint16_t GPIO_Pin)
 266:Src/main.c    **** {
  95              		.loc 1 266 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 32
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              	.LVL5:
 100 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 101              	.LCFI1:
 102              		.cfi_def_cfa_offset 36
 103              		.cfi_offset 4, -36
 104              		.cfi_offset 5, -32
 105              		.cfi_offset 6, -28
 106              		.cfi_offset 7, -24
 107              		.cfi_offset 8, -20
 108              		.cfi_offset 9, -16
 109              		.cfi_offset 10, -12
 110              		.cfi_offset 11, -8
 111              		.cfi_offset 14, -4
 112 0004 8BB0     		sub	sp, sp, #44
 113              	.LCFI2:
 114              		.cfi_def_cfa_offset 80
 115 0006 0390     		str	r0, [sp, #12]
 116 0008 8B46     		mov	fp, r1
 267:Src/main.c    ****     uint16_t offset = GPIO_Pin == IR_1_Pin ? 0 : GPIO_Pin == IR_2_Pin ? 1 : 2;
 117              		.loc 1 267 0
 118 000a 202A     		cmp	r2, #32
 119 000c 07D0     		beq	.L11
 120              		.loc 1 267 0 is_stmt 0 discriminator 1
 121 000e 102A     		cmp	r2, #16
 122 0010 02D1     		bne	.L12
 123              		.loc 1 267 0
 124 0012 4FF0010A 		mov	r10, #1
 125 0016 04E0     		b	.L7
 126              	.L12:
 127 0018 4FF0020A 		mov	r10, #2
 128 001c 01E0     		b	.L7
 129              	.L11:
 130 001e 4FF0000A 		mov	r10, #0
 131              	.L7:
 132              	.LVL6:
 268:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, adc_buffer, sizeof(adc_buffer)/sizeof(adc_buffer[0]));
 133              		.loc 1 268 0 is_stmt 1 discriminator 8
 134 0022 4248     		ldr	r0, .L14
 135              	.LVL7:
 136 0024 4249     		ldr	r1, .L14+4
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 8


 137              	.LVL8:
 138 0026 4FF44062 		mov	r2, #3072
 139              	.LVL9:
 140 002a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 141              	.LVL10:
 269:Src/main.c    ****     //TODO calculate time needed to fill first buffer
 270:Src/main.c    ****     HAL_Delay(500);
 142              		.loc 1 270 0 discriminator 8
 143 002e 4FF4FA70 		mov	r0, #500
 144 0032 FFF7FEFF 		bl	HAL_Delay
 145              	.LVL11:
 146              	.L10:
 147              	.LBB2:
 271:Src/main.c    ****     //TODO figure out thresholds and what we want to look for
 272:Src/main.c    ****     while(1){
 273:Src/main.c    ****         char msg[20] = "";
 148              		.loc 1 273 0
 149 0036 0023     		movs	r3, #0
 150 0038 0593     		str	r3, [sp, #20]
 151 003a 0693     		str	r3, [sp, #24]
 152 003c 0793     		str	r3, [sp, #28]
 153 003e 0893     		str	r3, [sp, #32]
 154 0040 0993     		str	r3, [sp, #36]
 274:Src/main.c    ****         // Sampling frequency: 72e6/(2*3*(480+15))
 275:Src/main.c    ****         // freq one
 276:Src/main.c    ****         double val1 = goertzel(read_value, 24242, freq1, sizeof(adc_buffer)/sizeof(adc_buffer[0]), 
 155              		.loc 1 276 0
 156 0042 5FFA8AF6 		uxtb	r6, r10
 157 0046 3B4F     		ldr	r7, .L14+8
 158 0048 0096     		str	r6, [sp]
 159 004a 3846     		mov	r0, r7
 160 004c 45F6B261 		movw	r1, #24242
 161 0050 039A     		ldr	r2, [sp, #12]
 162 0052 4FF44063 		mov	r3, #3072
 163 0056 FFF7FEFF 		bl	goertzel
 164              	.LVL12:
 165 005a 55EC104B 		fmrrd	r4, r5, d0
 166              	.LVL13:
 277:Src/main.c    ****         int predec = (int)(val1 / 1);
 167              		.loc 1 277 0
 168 005e 10EE100A 		fmrs	r0, s0	@ int
 169 0062 2946     		mov	r1, r5
 170 0064 FFF7FEFF 		bl	__aeabi_d2iz
 171              	.LVL14:
 172 0068 8046     		mov	r8, r0
 173              	.LVL15:
 278:Src/main.c    ****         int postdec = (int)((val1 - predec) * 1000);
 174              		.loc 1 278 0
 175 006a FFF7FEFF 		bl	__aeabi_i2d
 176              	.LVL16:
 177 006e 0246     		mov	r2, r0
 178 0070 0B46     		mov	r3, r1
 179 0072 2046     		mov	r0, r4
 180 0074 2946     		mov	r1, r5
 181 0076 FFF7FEFF 		bl	__aeabi_dsub
 182              	.LVL17:
 183 007a 0022     		movs	r2, #0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 9


 184 007c 2E4B     		ldr	r3, .L14+12
 185 007e FFF7FEFF 		bl	__aeabi_dmul
 186              	.LVL18:
 187 0082 FFF7FEFF 		bl	__aeabi_d2iz
 188              	.LVL19:
 189 0086 0346     		mov	r3, r0
 190              	.LVL20:
 279:Src/main.c    ****         sprintf(msg, "%d.%d\n", predec, postdec);
 191              		.loc 1 279 0
 192 0088 05A8     		add	r0, sp, #20
 193              	.LVL21:
 194 008a 2C49     		ldr	r1, .L14+16
 195 008c 4246     		mov	r2, r8
 196 008e FFF7FEFF 		bl	sprintf
 197              	.LVL22:
 280:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 198              		.loc 1 280 0
 199 0092 05A8     		add	r0, sp, #20
 200 0094 FFF7FEFF 		bl	strlen
 201              	.LVL23:
 202 0098 DFF8AC80 		ldr	r8, .L14+28
 203              	.LVL24:
 204 009c 82B2     		uxth	r2, r0
 205 009e 4046     		mov	r0, r8
 206 00a0 05A9     		add	r1, sp, #20
 207 00a2 4FF6FF73 		movw	r3, #65535
 208 00a6 FFF7FEFF 		bl	HAL_UART_Transmit
 209              	.LVL25:
 281:Src/main.c    ****         //freq2
 282:Src/main.c    ****         double val2 = goertzel(read_value, 24242, freq2, sizeof(adc_buffer)/sizeof(adc_buffer[0]), 
 210              		.loc 1 282 0
 211 00aa 0096     		str	r6, [sp]
 212 00ac 3846     		mov	r0, r7
 213 00ae 45F6B261 		movw	r1, #24242
 214 00b2 5A46     		mov	r2, fp
 215 00b4 4FF44063 		mov	r3, #3072
 216 00b8 FFF7FEFF 		bl	goertzel
 217              	.LVL26:
 218 00bc 57EC106B 		fmrrd	r6, r7, d0
 219              	.LVL27:
 283:Src/main.c    ****         predec = (int)(val2 / 1);
 220              		.loc 1 283 0
 221 00c0 10EE100A 		fmrs	r0, s0	@ int
 222 00c4 3946     		mov	r1, r7
 223 00c6 FFF7FEFF 		bl	__aeabi_d2iz
 224              	.LVL28:
 225 00ca 8146     		mov	r9, r0
 226              	.LVL29:
 284:Src/main.c    ****         postdec = (int)((val2 - predec) * 1000);
 227              		.loc 1 284 0
 228 00cc FFF7FEFF 		bl	__aeabi_i2d
 229              	.LVL30:
 230 00d0 0246     		mov	r2, r0
 231 00d2 0B46     		mov	r3, r1
 232 00d4 3046     		mov	r0, r6
 233 00d6 3946     		mov	r1, r7
 234 00d8 FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 10


 235              	.LVL31:
 236 00dc 0022     		movs	r2, #0
 237 00de 164B     		ldr	r3, .L14+12
 238 00e0 FFF7FEFF 		bl	__aeabi_dmul
 239              	.LVL32:
 240 00e4 FFF7FEFF 		bl	__aeabi_d2iz
 241              	.LVL33:
 242 00e8 0346     		mov	r3, r0
 243              	.LVL34:
 285:Src/main.c    ****         sprintf(msg, "%d.%d", predec, postdec);
 244              		.loc 1 285 0
 245 00ea 05A8     		add	r0, sp, #20
 246              	.LVL35:
 247 00ec 1449     		ldr	r1, .L14+20
 248 00ee 4A46     		mov	r2, r9
 249 00f0 FFF7FEFF 		bl	sprintf
 250              	.LVL36:
 286:Src/main.c    ****         HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 0xFFFF);
 251              		.loc 1 286 0
 252 00f4 05A8     		add	r0, sp, #20
 253 00f6 FFF7FEFF 		bl	strlen
 254              	.LVL37:
 255 00fa 82B2     		uxth	r2, r0
 256 00fc 4046     		mov	r0, r8
 257 00fe 05A9     		add	r1, sp, #20
 258 0100 4FF6FF73 		movw	r3, #65535
 259 0104 FFF7FEFF 		bl	HAL_UART_Transmit
 260              	.LVL38:
 287:Src/main.c    ****         //compare
 288:Src/main.c    ****         if(val1>val2){break;}
 261              		.loc 1 288 0
 262 0108 2046     		mov	r0, r4
 263 010a 2946     		mov	r1, r5
 264 010c 3246     		mov	r2, r6
 265 010e 3B46     		mov	r3, r7
 266 0110 FFF7FEFF 		bl	__aeabi_dcmpgt
 267              	.LVL39:
 268 0114 0028     		cmp	r0, #0
 269 0116 8ED0     		beq	.L10
 270              	.LBE2:
 289:Src/main.c    ****     }
 290:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 271              		.loc 1 290 0
 272 0118 0448     		ldr	r0, .L14
 273 011a FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 274              	.LVL40:
 291:Src/main.c    ****     IR_INT_STATE = NOT_FLAGGED;
 275              		.loc 1 291 0
 276 011e 0022     		movs	r2, #0
 277 0120 084B     		ldr	r3, .L14+24
 278 0122 1A70     		strb	r2, [r3]
 292:Src/main.c    **** }
 279              		.loc 1 292 0
 280 0124 0BB0     		add	sp, sp, #44
 281              	.LCFI3:
 282              		.cfi_def_cfa_offset 36
 283              		@ sp needed
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 11


 284 0126 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 285              	.LVL41:
 286              	.L15:
 287 012a 00BF     		.align	2
 288              	.L14:
 289 012c 00000000 		.word	hadc1
 290 0130 00000000 		.word	adc_buffer
 291 0134 00000000 		.word	read_value
 292 0138 00408F40 		.word	1083129856
 293 013c 00000000 		.word	.LC0
 294 0140 08000000 		.word	.LC1
 295 0144 00000000 		.word	IR_INT_STATE
 296 0148 00000000 		.word	huart6
 297              		.cfi_endproc
 298              	.LFE128:
 300              		.section	.text.print,"ax",%progbits
 301              		.align	2
 302              		.global	print
 303              		.thumb
 304              		.thumb_func
 306              	print:
 307              	.LFB129:
 293:Src/main.c    **** 
 294:Src/main.c    **** /*
 295:Src/main.c    ****  * Rows from 0 - 6
 296:Src/main.c    ****  * Reset screen when printing from row 0
 297:Src/main.c    ****  */
 298:Src/main.c    **** void print(char *msg, int row)
 299:Src/main.c    **** {
 308              		.loc 1 299 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              	.LVL42:
 313 0000 38B5     		push	{r3, r4, r5, lr}
 314              	.LCFI4:
 315              		.cfi_def_cfa_offset 16
 316              		.cfi_offset 3, -16
 317              		.cfi_offset 4, -12
 318              		.cfi_offset 5, -8
 319              		.cfi_offset 14, -4
 320 0002 0546     		mov	r5, r0
 300:Src/main.c    ****     if (row == 0)
 321              		.loc 1 300 0
 322 0004 0C46     		mov	r4, r1
 323 0006 11B9     		cbnz	r1, .L17
 301:Src/main.c    ****     {
 302:Src/main.c    ****         ssd1306_Fill(Black);
 324              		.loc 1 302 0
 325 0008 0020     		movs	r0, #0
 326              	.LVL43:
 327 000a FFF7FEFF 		bl	ssd1306_Fill
 328              	.LVL44:
 329              	.L17:
 303:Src/main.c    ****     }
 304:Src/main.c    ****     ssd1306_SetCursor(0, row * 10);
 330              		.loc 1 304 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 12


 331 000e 04EB8404 		add	r4, r4, r4, lsl #2
 332              	.LVL45:
 333 0012 6100     		lsls	r1, r4, #1
 334 0014 0020     		movs	r0, #0
 335 0016 01F0FE01 		and	r1, r1, #254
 336 001a FFF7FEFF 		bl	ssd1306_SetCursor
 337              	.LVL46:
 305:Src/main.c    ****     ssd1306_WriteString(msg, Font_7x10, White);
 338              		.loc 1 305 0
 339 001e 054B     		ldr	r3, .L19
 340 0020 2846     		mov	r0, r5
 341 0022 93E80600 		ldmia	r3, {r1, r2}
 342 0026 0123     		movs	r3, #1
 343 0028 FFF7FEFF 		bl	ssd1306_WriteString
 344              	.LVL47:
 306:Src/main.c    ****     ssd1306_UpdateScreen();
 345              		.loc 1 306 0
 346 002c FFF7FEFF 		bl	ssd1306_UpdateScreen
 347              	.LVL48:
 348 0030 38BD     		pop	{r3, r4, r5, pc}
 349              	.LVL49:
 350              	.L20:
 351 0032 00BF     		.align	2
 352              	.L19:
 353 0034 00000000 		.word	Font_7x10
 354              		.cfi_endproc
 355              	.LFE129:
 357              		.section	.text.pi_navigation,"ax",%progbits
 358              		.align	2
 359              		.global	pi_navigation
 360              		.thumb
 361              		.thumb_func
 363              	pi_navigation:
 364              	.LFB126:
 224:Src/main.c    ****     HAL_ADC_Start_DMA(&hadc1, adc_buffer, sizeof(adc_buffer)/sizeof(adc_buffer[0]));
 365              		.loc 1 224 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 24
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369 0000 30B5     		push	{r4, r5, lr}
 370              	.LCFI5:
 371              		.cfi_def_cfa_offset 12
 372              		.cfi_offset 4, -12
 373              		.cfi_offset 5, -8
 374              		.cfi_offset 14, -4
 375 0002 87B0     		sub	sp, sp, #28
 376              	.LCFI6:
 377              		.cfi_def_cfa_offset 40
 225:Src/main.c    ****     print("Pi Nav", 0);
 378              		.loc 1 225 0
 379 0004 2048     		ldr	r0, .L26
 380 0006 2149     		ldr	r1, .L26+4
 381 0008 4FF44062 		mov	r2, #3072
 382 000c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 383              	.LVL50:
 226:Src/main.c    ****     HAL_Delay(10);
 384              		.loc 1 226 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 13


 385 0010 1F48     		ldr	r0, .L26+8
 386 0012 0021     		movs	r1, #0
 387 0014 FFF7FEFF 		bl	print
 388              	.LVL51:
 227:Src/main.c    ****     LEFT_SPEED = 850;
 389              		.loc 1 227 0
 390 0018 0A20     		movs	r0, #10
 391 001a FFF7FEFF 		bl	HAL_Delay
 392              	.LVL52:
 228:Src/main.c    ****     RIGHT_SPEED = 850;
 393              		.loc 1 228 0
 394 001e 40F25233 		movw	r3, #850
 395 0022 1C4A     		ldr	r2, .L26+12
 396 0024 1380     		strh	r3, [r2]	@ movhi
 229:Src/main.c    ****     while(1){
 397              		.loc 1 229 0
 398 0026 1C4A     		ldr	r2, .L26+16
 399 0028 1380     		strh	r3, [r2]	@ movhi
 400              	.L24:
 401              	.LBB3:
 231:Src/main.c    ****         uint32_t lspeed=LEFT_SPEED;
 402              		.loc 1 231 0
 403 002a 1C4B     		ldr	r3, .L26+20
 404 002c 9868     		ldr	r0, [r3, #8]
 405 002e FFF7FEFF 		bl	calculate_heading
 406              	.LVL53:
 232:Src/main.c    ****         uint32_t rspeed=RIGHT_SPEED;
 407              		.loc 1 232 0
 408 0032 184B     		ldr	r3, .L26+12
 409 0034 1988     		ldrh	r1, [r3]
 410 0036 0A46     		mov	r2, r1
 411              	.LVL54:
 233:Src/main.c    ****         if (heading < 0)
 412              		.loc 1 233 0
 413 0038 174B     		ldr	r3, .L26+16
 414 003a 1B88     		ldrh	r3, [r3]
 415 003c 1D46     		mov	r5, r3
 416              	.LVL55:
 234:Src/main.c    ****         {   
 417              		.loc 1 234 0
 418 003e 0028     		cmp	r0, #0
 419 0040 04DA     		bge	.L22
 236:Src/main.c    ****             __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, lspeed);
 420              		.loc 1 236 0
 421 0042 0A1A     		subs	r2, r1, r0
 422              	.LVL56:
 237:Src/main.c    ****         }
 423              		.loc 1 237 0
 424 0044 164B     		ldr	r3, .L26+24
 425              	.LVL57:
 426 0046 1B68     		ldr	r3, [r3]
 427 0048 5A63     		str	r2, [r3, #52]
 428 004a 05E0     		b	.L23
 429              	.LVL58:
 430              	.L22:
 239:Src/main.c    ****         {
 431              		.loc 1 239 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 14


 432 004c 0028     		cmp	r0, #0
 433 004e 03DD     		ble	.L23
 241:Src/main.c    ****             __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, rspeed);
 434              		.loc 1 241 0
 435 0050 1D18     		adds	r5, r3, r0
 436              	.LVL59:
 242:Src/main.c    ****         }
 437              		.loc 1 242 0
 438 0052 134B     		ldr	r3, .L26+24
 439 0054 1B68     		ldr	r3, [r3]
 440 0056 DD63     		str	r5, [r3, #60]
 441              	.LVL60:
 442              	.L23:
 244:Src/main.c    ****         sprintf(msg, "L: %lu", lspeed);
 443              		.loc 1 244 0
 444 0058 0024     		movs	r4, #0
 445 005a 0194     		str	r4, [sp, #4]
 446 005c 0294     		str	r4, [sp, #8]
 447 005e 0394     		str	r4, [sp, #12]
 448 0060 0494     		str	r4, [sp, #16]
 449 0062 0594     		str	r4, [sp, #20]
 245:Src/main.c    ****         print(msg, 0);
 450              		.loc 1 245 0
 451 0064 01A8     		add	r0, sp, #4
 452              	.LVL61:
 453 0066 0F49     		ldr	r1, .L26+28
 454 0068 FFF7FEFF 		bl	sprintf
 455              	.LVL62:
 246:Src/main.c    ****         sprintf(msg, "RL %lu", rspeed);
 456              		.loc 1 246 0
 457 006c 01A8     		add	r0, sp, #4
 458 006e 2146     		mov	r1, r4
 459 0070 FFF7FEFF 		bl	print
 460              	.LVL63:
 247:Src/main.c    ****         print(msg, 1);
 461              		.loc 1 247 0
 462 0074 01A8     		add	r0, sp, #4
 463 0076 0C49     		ldr	r1, .L26+32
 464 0078 2A46     		mov	r2, r5
 465 007a FFF7FEFF 		bl	sprintf
 466              	.LVL64:
 248:Src/main.c    ****     } 
 467              		.loc 1 248 0
 468 007e 01A8     		add	r0, sp, #4
 469 0080 0121     		movs	r1, #1
 470 0082 FFF7FEFF 		bl	print
 471              	.LVL65:
 472              	.LBE3:
 249:Src/main.c    ****     HAL_ADC_Stop_DMA(&hadc1);
 473              		.loc 1 249 0
 474 0086 D0E7     		b	.L24
 475              	.L27:
 476              		.align	2
 477              	.L26:
 478 0088 00000000 		.word	hadc1
 479 008c 00000000 		.word	adc_buffer
 480 0090 10000000 		.word	.LC2
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 15


 481 0094 00000000 		.word	LEFT_SPEED
 482 0098 00000000 		.word	RIGHT_SPEED
 483 009c 00000000 		.word	read_value
 484 00a0 00000000 		.word	htim1
 485 00a4 18000000 		.word	.LC3
 486 00a8 20000000 		.word	.LC4
 487              		.cfi_endproc
 488              	.LFE126:
 490              		.section	.text.menu,"ax",%progbits
 491              		.align	2
 492              		.global	menu
 493              		.thumb
 494              		.thumb_func
 496              	menu:
 497              	.LFB130:
 307:Src/main.c    **** }
 308:Src/main.c    **** 
 309:Src/main.c    **** PID_t menu()
 310:Src/main.c    **** {
 498              		.loc 1 310 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 32
 501              		@ frame_needed = 0, uses_anonymous_args = 0
 502              	.LVL66:
 503 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 504              	.LCFI7:
 505              		.cfi_def_cfa_offset 24
 506              		.cfi_offset 4, -24
 507              		.cfi_offset 5, -20
 508              		.cfi_offset 6, -16
 509              		.cfi_offset 7, -12
 510              		.cfi_offset 8, -8
 511              		.cfi_offset 14, -4
 512 0004 8AB0     		sub	sp, sp, #40
 513              	.LCFI8:
 514              		.cfi_def_cfa_offset 64
 515 0006 0646     		mov	r6, r0
 311:Src/main.c    ****     print("Starting", 0);
 516              		.loc 1 311 0
 517 0008 6F48     		ldr	r0, .L42
 518              	.LVL67:
 519 000a 0021     		movs	r1, #0
 520 000c FFF7FEFF 		bl	print
 521              	.LVL68:
 312:Src/main.c    ****     char msg[20] = "";
 522              		.loc 1 312 0
 523 0010 0025     		movs	r5, #0
 524 0012 0595     		str	r5, [sp, #20]
 525 0014 0695     		str	r5, [sp, #24]
 526 0016 0795     		str	r5, [sp, #28]
 527 0018 0895     		str	r5, [sp, #32]
 528 001a 0995     		str	r5, [sp, #36]
 529              	.LVL69:
 313:Src/main.c    ****     int pid_select = 0;
 314:Src/main.c    ****     uint32_t values[3] = {0, 0, 0};
 530              		.loc 1 314 0
 531 001c 0295     		str	r5, [sp, #8]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 16


 532 001e 0395     		str	r5, [sp, #12]
 533 0020 0495     		str	r5, [sp, #16]
 534              	.LVL70:
 535              	.L32:
 315:Src/main.c    ****     while (1)
 316:Src/main.c    ****     {
 317:Src/main.c    ****         if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 536              		.loc 1 317 0
 537 0022 6A48     		ldr	r0, .L42+4
 538 0024 4FF40051 		mov	r1, #8192
 539 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 540              	.LVL71:
 541 002c 38BB     		cbnz	r0, .L29
 318:Src/main.c    ****         {
 319:Src/main.c    ****             sprintf(msg, "%lu", values[pid_select]);
 542              		.loc 1 319 0
 543 002e 0AAB     		add	r3, sp, #40
 544 0030 03EB8503 		add	r3, r3, r5, lsl #2
 545 0034 53F8204C 		ldr	r4, [r3, #-32]
 546 0038 05A8     		add	r0, sp, #20
 547 003a 6549     		ldr	r1, .L42+8
 548 003c 2246     		mov	r2, r4
 549 003e FFF7FEFF 		bl	sprintf
 550              	.LVL72:
 320:Src/main.c    ****             print(msg, 0);
 551              		.loc 1 320 0
 552 0042 05A8     		add	r0, sp, #20
 553 0044 0021     		movs	r1, #0
 554 0046 FFF7FEFF 		bl	print
 555              	.LVL73:
 321:Src/main.c    ****             TIM4->CNT = values[pid_select];
 556              		.loc 1 321 0
 557 004a 624B     		ldr	r3, .L42+12
 558 004c 5C62     		str	r4, [r3, #36]
 322:Src/main.c    ****             while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 559              		.loc 1 322 0
 560 004e 0EE0     		b	.L30
 561              	.L31:
 323:Src/main.c    ****             {
 324:Src/main.c    ****                 values[pid_select] = TIM4->CNT;
 562              		.loc 1 324 0
 563 0050 604B     		ldr	r3, .L42+12
 564 0052 5A6A     		ldr	r2, [r3, #36]
 565 0054 0AAB     		add	r3, sp, #40
 566 0056 03EB8503 		add	r3, r3, r5, lsl #2
 567 005a 43F8202C 		str	r2, [r3, #-32]
 325:Src/main.c    ****                 sprintf(msg, "%lu", values[pid_select]);
 568              		.loc 1 325 0
 569 005e 05A8     		add	r0, sp, #20
 570 0060 5B49     		ldr	r1, .L42+8
 571 0062 FFF7FEFF 		bl	sprintf
 572              	.LVL74:
 326:Src/main.c    ****                 print(msg, 0);
 573              		.loc 1 326 0
 574 0066 05A8     		add	r0, sp, #20
 575 0068 0021     		movs	r1, #0
 576 006a FFF7FEFF 		bl	print
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 17


 577              	.LVL75:
 578              	.L30:
 322:Src/main.c    ****             {
 579              		.loc 1 322 0
 580 006e 5748     		ldr	r0, .L42+4
 581 0070 4FF40051 		mov	r1, #8192
 582 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 583              	.LVL76:
 584 0078 0028     		cmp	r0, #0
 585 007a E9D0     		beq	.L31
 327:Src/main.c    ****             }
 328:Src/main.c    ****             ++pid_select;
 586              		.loc 1 328 0
 587 007c 0135     		adds	r5, r5, #1
 588              	.LVL77:
 589              	.L29:
 329:Src/main.c    ****         }
 330:Src/main.c    ****         if (pid_select == 3)
 590              		.loc 1 330 0
 591 007e 032D     		cmp	r5, #3
 592 0080 CFD1     		bne	.L32
 593              	.L40:
 594              	.LVL78:
 595              	.LBB4:
 331:Src/main.c    ****             break;
 332:Src/main.c    ****     }
 333:Src/main.c    ****     while (1)
 334:Src/main.c    ****     {
 335:Src/main.c    ****         int speed = 400;
 336:Src/main.c    ****         if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 596              		.loc 1 336 0
 597 0082 5248     		ldr	r0, .L42+4
 598 0084 4FF40051 		mov	r1, #8192
 599 0088 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 600              	.LVL79:
 601 008c 0028     		cmp	r0, #0
 602 008e 43D1     		bne	.L33
 337:Src/main.c    ****         {
 338:Src/main.c    ****             if (pid_select == 3)
 603              		.loc 1 338 0
 604 0090 032D     		cmp	r5, #3
 605 0092 09D1     		bne	.L34
 339:Src/main.c    ****             {
 340:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 606              		.loc 1 340 0
 607 0094 504C     		ldr	r4, .L42+16
 608 0096 2046     		mov	r0, r4
 609 0098 0021     		movs	r1, #0
 610 009a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 611              	.LVL80:
 341:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 612              		.loc 1 341 0
 613 009e 2046     		mov	r0, r4
 614 00a0 0821     		movs	r1, #8
 615 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 616              	.LVL81:
 617 00a6 08E0     		b	.L35
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 18


 618              	.L34:
 342:Src/main.c    ****             }
 343:Src/main.c    ****             else
 344:Src/main.c    ****             {
 345:Src/main.c    ****                 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 619              		.loc 1 345 0
 620 00a8 4B4C     		ldr	r4, .L42+16
 621 00aa 2046     		mov	r0, r4
 622 00ac 0021     		movs	r1, #0
 623 00ae FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 624              	.LVL82:
 346:Src/main.c    ****                 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 625              		.loc 1 346 0
 626 00b2 2046     		mov	r0, r4
 627 00b4 0821     		movs	r1, #8
 628 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 629              	.LVL83:
 630              	.L35:
 347:Src/main.c    ****             }
 348:Src/main.c    ****             sprintf(msg, "%d", speed);
 631              		.loc 1 348 0
 632 00ba 05A8     		add	r0, sp, #20
 633 00bc 4749     		ldr	r1, .L42+20
 634 00be 4FF4C872 		mov	r2, #400
 635 00c2 FFF7FEFF 		bl	sprintf
 636              	.LVL84:
 349:Src/main.c    ****             print(msg, 0);
 637              		.loc 1 349 0
 638 00c6 05A8     		add	r0, sp, #20
 639 00c8 0021     		movs	r1, #0
 640 00ca FFF7FEFF 		bl	print
 641              	.LVL85:
 350:Src/main.c    ****             TIM4->CNT = speed;
 642              		.loc 1 350 0
 643 00ce 4FF4C872 		mov	r2, #400
 644 00d2 404B     		ldr	r3, .L42+12
 645 00d4 5A62     		str	r2, [r3, #36]
 351:Src/main.c    ****             while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 646              		.loc 1 351 0
 647 00d6 17E0     		b	.L36
 648              	.LVL86:
 649              	.L39:
 352:Src/main.c    ****             {
 353:Src/main.c    ****                 speed = TIM4->CNT;
 650              		.loc 1 353 0
 651 00d8 3E4B     		ldr	r3, .L42+12
 652 00da 5C6A     		ldr	r4, [r3, #36]
 653              	.LVL87:
 354:Src/main.c    ****                 sprintf(msg, "%d", speed);
 654              		.loc 1 354 0
 655 00dc 05A8     		add	r0, sp, #20
 656 00de 3F49     		ldr	r1, .L42+20
 657 00e0 2246     		mov	r2, r4
 658 00e2 FFF7FEFF 		bl	sprintf
 659              	.LVL88:
 355:Src/main.c    ****                 print(msg, 0);
 660              		.loc 1 355 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 19


 661 00e6 05A8     		add	r0, sp, #20
 662 00e8 0021     		movs	r1, #0
 663 00ea FFF7FEFF 		bl	print
 664              	.LVL89:
 356:Src/main.c    ****                 if (pid_select == 3)
 665              		.loc 1 356 0
 666 00ee 032D     		cmp	r5, #3
 667 00f0 05D1     		bne	.L37
 357:Src/main.c    ****                 {
 358:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 668              		.loc 1 358 0
 669 00f2 394B     		ldr	r3, .L42+16
 670 00f4 1B68     		ldr	r3, [r3]
 671 00f6 5C63     		str	r4, [r3, #52]
 359:Src/main.c    ****                     LEFT_SPEED = speed;
 672              		.loc 1 359 0
 673 00f8 394B     		ldr	r3, .L42+24
 674 00fa 1C80     		strh	r4, [r3]	@ movhi
 675 00fc 04E0     		b	.L36
 676              	.L37:
 360:Src/main.c    ****                 }
 361:Src/main.c    ****                 else
 362:Src/main.c    ****                 {
 363:Src/main.c    ****                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 677              		.loc 1 363 0
 678 00fe 364B     		ldr	r3, .L42+16
 679 0100 1B68     		ldr	r3, [r3]
 680 0102 DC63     		str	r4, [r3, #60]
 364:Src/main.c    ****                     RIGHT_SPEED = speed;
 681              		.loc 1 364 0
 682 0104 374B     		ldr	r3, .L42+28
 683 0106 1C80     		strh	r4, [r3]	@ movhi
 684              	.LVL90:
 685              	.L36:
 351:Src/main.c    ****             {
 686              		.loc 1 351 0
 687 0108 3048     		ldr	r0, .L42+4
 688 010a 4FF40051 		mov	r1, #8192
 689 010e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 690              	.LVL91:
 691 0112 0028     		cmp	r0, #0
 692 0114 E0D0     		beq	.L39
 365:Src/main.c    ****                 }
 366:Src/main.c    ****             }
 367:Src/main.c    ****             ++pid_select;
 693              		.loc 1 367 0
 694 0116 0135     		adds	r5, r5, #1
 695              	.LVL92:
 696              	.L33:
 368:Src/main.c    ****         }
 369:Src/main.c    ****         if (pid_select == 5)
 697              		.loc 1 369 0
 698 0118 052D     		cmp	r5, #5
 699 011a B2D1     		bne	.L40
 700              	.LBE4:
 370:Src/main.c    ****         {
 371:Src/main.c    ****             break;
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 20


 372:Src/main.c    ****         }
 373:Src/main.c    ****     }
 374:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 701              		.loc 1 374 0
 702 011c 2E4C     		ldr	r4, .L42+16
 703 011e 2046     		mov	r0, r4
 704 0120 0021     		movs	r1, #0
 705 0122 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 706              	.LVL93:
 375:Src/main.c    ****     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 707              		.loc 1 375 0
 708 0126 2046     		mov	r0, r4
 709 0128 0821     		movs	r1, #8
 710 012a FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 711              	.LVL94:
 376:Src/main.c    ****     sprintf(msg, "P %lu", values[0]);
 712              		.loc 1 376 0
 713 012e DDF80880 		ldr	r8, [sp, #8]
 714 0132 05A8     		add	r0, sp, #20
 715 0134 2C49     		ldr	r1, .L42+32
 716 0136 4246     		mov	r2, r8
 717 0138 FFF7FEFF 		bl	sprintf
 718              	.LVL95:
 377:Src/main.c    ****     print(msg, 0);
 719              		.loc 1 377 0
 720 013c 05A8     		add	r0, sp, #20
 721 013e 0021     		movs	r1, #0
 722 0140 FFF7FEFF 		bl	print
 723              	.LVL96:
 378:Src/main.c    ****     sprintf(msg, "D %lu", values[1]);
 724              		.loc 1 378 0
 725 0144 039F     		ldr	r7, [sp, #12]
 726 0146 05A8     		add	r0, sp, #20
 727 0148 2849     		ldr	r1, .L42+36
 728 014a 3A46     		mov	r2, r7
 729 014c FFF7FEFF 		bl	sprintf
 730              	.LVL97:
 379:Src/main.c    ****     print(msg, 1);
 731              		.loc 1 379 0
 732 0150 05A8     		add	r0, sp, #20
 733 0152 0121     		movs	r1, #1
 734 0154 FFF7FEFF 		bl	print
 735              	.LVL98:
 380:Src/main.c    ****     sprintf(msg, "I %lu", values[2]);
 736              		.loc 1 380 0
 737 0158 049D     		ldr	r5, [sp, #16]
 738              	.LVL99:
 739 015a 05A8     		add	r0, sp, #20
 740 015c 2449     		ldr	r1, .L42+40
 741 015e 2A46     		mov	r2, r5
 742 0160 FFF7FEFF 		bl	sprintf
 743              	.LVL100:
 381:Src/main.c    ****     print(msg, 2);
 744              		.loc 1 381 0
 745 0164 05A8     		add	r0, sp, #20
 746 0166 0221     		movs	r1, #2
 747 0168 FFF7FEFF 		bl	print
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 21


 748              	.LVL101:
 382:Src/main.c    ****     sprintf(msg, "L %u", LEFT_SPEED);
 749              		.loc 1 382 0
 750 016c 05A8     		add	r0, sp, #20
 751 016e 2149     		ldr	r1, .L42+44
 752 0170 1B4B     		ldr	r3, .L42+24
 753 0172 1A88     		ldrh	r2, [r3]
 754 0174 FFF7FEFF 		bl	sprintf
 755              	.LVL102:
 383:Src/main.c    ****     print(msg, 3);
 756              		.loc 1 383 0
 757 0178 05A8     		add	r0, sp, #20
 758 017a 0321     		movs	r1, #3
 759 017c FFF7FEFF 		bl	print
 760              	.LVL103:
 384:Src/main.c    ****     sprintf(msg, "R %u", RIGHT_SPEED);
 761              		.loc 1 384 0
 762 0180 05A8     		add	r0, sp, #20
 763 0182 1D49     		ldr	r1, .L42+48
 764 0184 174B     		ldr	r3, .L42+28
 765 0186 1A88     		ldrh	r2, [r3]
 766 0188 FFF7FEFF 		bl	sprintf
 767              	.LVL104:
 385:Src/main.c    ****     print(msg, 4);
 768              		.loc 1 385 0
 769 018c 05A8     		add	r0, sp, #20
 770 018e 0421     		movs	r1, #4
 771 0190 FFF7FEFF 		bl	print
 772              	.LVL105:
 386:Src/main.c    ****     HAL_Delay(500);
 773              		.loc 1 386 0
 774 0194 4FF4FA70 		mov	r0, #500
 775 0198 FFF7FEFF 		bl	HAL_Delay
 776              	.LVL106:
 387:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 777              		.loc 1 387 0
 778 019c 2046     		mov	r0, r4
 779 019e 0021     		movs	r1, #0
 780 01a0 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 781              	.LVL107:
 388:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 782              		.loc 1 388 0
 783 01a4 2046     		mov	r0, r4
 784 01a6 0821     		movs	r1, #8
 785 01a8 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 786              	.LVL108:
 389:Src/main.c    ****     return pid_Init(values[0], values[1], values[2], 5, 1);
 787              		.loc 1 389 0
 788 01ac 0523     		movs	r3, #5
 789 01ae 0093     		str	r3, [sp]
 790 01b0 0123     		movs	r3, #1
 791 01b2 0193     		str	r3, [sp, #4]
 792 01b4 3046     		mov	r0, r6
 793 01b6 4146     		mov	r1, r8
 794 01b8 3A46     		mov	r2, r7
 795 01ba 2B46     		mov	r3, r5
 796 01bc FFF7FEFF 		bl	pid_Init
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 22


 797              	.LVL109:
 390:Src/main.c    **** }
 798              		.loc 1 390 0
 799 01c0 3046     		mov	r0, r6
 800 01c2 0AB0     		add	sp, sp, #40
 801              	.LCFI9:
 802              		.cfi_def_cfa_offset 24
 803              		@ sp needed
 804 01c4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 805              	.LVL110:
 806              	.L43:
 807              		.align	2
 808              	.L42:
 809 01c8 28000000 		.word	.LC5
 810 01cc 00080240 		.word	1073874944
 811 01d0 34000000 		.word	.LC6
 812 01d4 00080040 		.word	1073743872
 813 01d8 00000000 		.word	htim1
 814 01dc 38000000 		.word	.LC7
 815 01e0 00000000 		.word	LEFT_SPEED
 816 01e4 00000000 		.word	RIGHT_SPEED
 817 01e8 3C000000 		.word	.LC8
 818 01ec 44000000 		.word	.LC9
 819 01f0 4C000000 		.word	.LC10
 820 01f4 54000000 		.word	.LC11
 821 01f8 5C000000 		.word	.LC12
 822              		.cfi_endproc
 823              	.LFE130:
 825              		.section	.text.do_pid,"ax",%progbits
 826              		.align	2
 827              		.global	do_pid
 828              		.thumb
 829              		.thumb_func
 831              	do_pid:
 832              	.LFB131:
 391:Src/main.c    **** 
 392:Src/main.c    **** void do_pid(PID_t *pid_struct)
 393:Src/main.c    **** {
 833              		.loc 1 393 0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 24
 836              		@ frame_needed = 0, uses_anonymous_args = 0
 837              	.LVL111:
 838 0000 70B5     		push	{r4, r5, r6, lr}
 839              	.LCFI10:
 840              		.cfi_def_cfa_offset 16
 841              		.cfi_offset 4, -16
 842              		.cfi_offset 5, -12
 843              		.cfi_offset 6, -8
 844              		.cfi_offset 14, -4
 845 0002 86B0     		sub	sp, sp, #24
 846              	.LCFI11:
 847              		.cfi_def_cfa_offset 40
 848 0004 0646     		mov	r6, r0
 394:Src/main.c    ****     /* Read sensors */
 395:Src/main.c    ****     uint8_t left = HAL_GPIO_ReadPin(TAPE_LEFT_GPIO_Port, TAPE_LEFT_Pin) ? 0 : 1;
 849              		.loc 1 395 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 23


 850 0006 2D4D     		ldr	r5, .L53
 851 0008 2846     		mov	r0, r5
 852              	.LVL112:
 853 000a 4FF48041 		mov	r1, #16384
 854 000e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 855              	.LVL113:
 856 0012 B0FA80F4 		clz	r4, r0
 857 0016 6409     		lsrs	r4, r4, #5
 858              	.LVL114:
 396:Src/main.c    ****     uint8_t right = HAL_GPIO_ReadPin(TAPE_RIGHT_GPIO_Port, TAPE_RIGHT_Pin) ? 0 : 1;
 859              		.loc 1 396 0
 860 0018 2846     		mov	r0, r5
 861 001a 4FF40041 		mov	r1, #32768
 862 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 863              	.LVL115:
 864 0022 B0FA80F0 		clz	r0, r0
 865 0026 4009     		lsrs	r0, r0, #5
 866              	.LVL116:
 397:Src/main.c    **** 
 398:Src/main.c    ****     /* Get error */
 399:Src/main.c    ****     if (left && right)
 867              		.loc 1 399 0
 868 0028 1CB1     		cbz	r4, .L45
 869              		.loc 1 399 0 is_stmt 0 discriminator 1
 870 002a 10B1     		cbz	r0, .L45
 400:Src/main.c    ****     {
 401:Src/main.c    ****         pid_struct->err = 0;
 871              		.loc 1 401 0 is_stmt 1
 872 002c 0023     		movs	r3, #0
 873 002e 3362     		str	r3, [r6, #32]
 874 0030 1AE0     		b	.L46
 875              	.L45:
 402:Src/main.c    ****     }
 403:Src/main.c    ****     else if (left && !right)
 876              		.loc 1 403 0
 877 0032 1CB1     		cbz	r4, .L47
 878              		.loc 1 403 0 is_stmt 0 discriminator 1
 879 0034 10B9     		cbnz	r0, .L47
 404:Src/main.c    ****     {
 405:Src/main.c    ****         pid_struct->err = 1;
 880              		.loc 1 405 0 is_stmt 1
 881 0036 0123     		movs	r3, #1
 882 0038 3362     		str	r3, [r6, #32]
 883 003a 15E0     		b	.L46
 884              	.L47:
 406:Src/main.c    ****     }
 407:Src/main.c    ****     else if (!left && right)
 885              		.loc 1 407 0
 886 003c 24B9     		cbnz	r4, .L48
 887              		.loc 1 407 0 is_stmt 0 discriminator 1
 888 003e 18B1     		cbz	r0, .L48
 408:Src/main.c    ****     {
 409:Src/main.c    ****         pid_struct->err = -1;
 889              		.loc 1 409 0 is_stmt 1
 890 0040 4FF0FF33 		mov	r3, #-1
 891 0044 3362     		str	r3, [r6, #32]
 892 0046 0FE0     		b	.L46
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 24


 893              	.L48:
 410:Src/main.c    ****     }
 411:Src/main.c    ****     else if (!left && !right && (pid_struct->err < 0))
 894              		.loc 1 411 0
 895 0048 3CB9     		cbnz	r4, .L49
 896              		.loc 1 411 0 is_stmt 0 discriminator 1
 897 004a 30B9     		cbnz	r0, .L49
 898              		.loc 1 411 0 discriminator 2
 899 004c 336A     		ldr	r3, [r6, #32]
 900 004e 002B     		cmp	r3, #0
 901 0050 03DA     		bge	.L49
 412:Src/main.c    ****     {
 413:Src/main.c    ****         pid_struct->err = -5;
 902              		.loc 1 413 0 is_stmt 1
 903 0052 6FF00403 		mvn	r3, #4
 904 0056 3362     		str	r3, [r6, #32]
 905 0058 06E0     		b	.L46
 906              	.L49:
 414:Src/main.c    ****     }
 415:Src/main.c    ****     else if (!left && !right && (pid_struct->err > 0))
 907              		.loc 1 415 0
 908 005a 2CB9     		cbnz	r4, .L46
 909              		.loc 1 415 0 is_stmt 0 discriminator 1
 910 005c 20B9     		cbnz	r0, .L46
 911              		.loc 1 415 0 discriminator 2
 912 005e 336A     		ldr	r3, [r6, #32]
 913 0060 002B     		cmp	r3, #0
 914 0062 01DD     		ble	.L46
 416:Src/main.c    ****     {
 417:Src/main.c    ****         pid_struct->err = 5;
 915              		.loc 1 417 0 is_stmt 1
 916 0064 0523     		movs	r3, #5
 917 0066 3362     		str	r3, [r6, #32]
 918              	.L46:
 418:Src/main.c    ****     }
 419:Src/main.c    **** 
 420:Src/main.c    ****     /* Get gain */
 421:Src/main.c    ****     double gain = pid_GetGain(pid_struct, &htim9);
 919              		.loc 1 421 0
 920 0068 3046     		mov	r0, r6
 921              	.LVL117:
 922 006a 1549     		ldr	r1, .L53+4
 923 006c FFF7FEFF 		bl	pid_GetGain
 924              	.LVL118:
 422:Src/main.c    ****     int g = (int)gain;
 925              		.loc 1 422 0
 926 0070 51EC100B 		fmrrd	r0, r1, d0
 927 0074 FFF7FEFF 		bl	__aeabi_d2iz
 928              	.LVL119:
 929 0078 0546     		mov	r5, r0
 930              	.LVL120:
 423:Src/main.c    ****     char msg[20]="";
 931              		.loc 1 423 0
 932 007a 0024     		movs	r4, #0
 933              	.LVL121:
 934 007c 0194     		str	r4, [sp, #4]
 935 007e 0294     		str	r4, [sp, #8]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 25


 936 0080 0394     		str	r4, [sp, #12]
 937 0082 0494     		str	r4, [sp, #16]
 938 0084 0594     		str	r4, [sp, #20]
 424:Src/main.c    ****     sprintf(msg, "%d", g);
 939              		.loc 1 424 0
 940 0086 01A8     		add	r0, sp, #4
 941              	.LVL122:
 942 0088 0E49     		ldr	r1, .L53+8
 943 008a 2A46     		mov	r2, r5
 944 008c FFF7FEFF 		bl	sprintf
 945              	.LVL123:
 425:Src/main.c    ****     print(msg, 0);
 946              		.loc 1 425 0
 947 0090 01A8     		add	r0, sp, #4
 948 0092 2146     		mov	r1, r4
 949 0094 FFF7FEFF 		bl	print
 950              	.LVL124:
 426:Src/main.c    **** 
 427:Src/main.c    ****     /* Set Motor Speeds*/
 428:Src/main.c    ****     int lspeed = LEFT_SPEED;
 951              		.loc 1 428 0
 952 0098 0B4B     		ldr	r3, .L53+12
 953 009a 1988     		ldrh	r1, [r3]
 954              	.LVL125:
 429:Src/main.c    ****     int rspeed = RIGHT_SPEED;
 955              		.loc 1 429 0
 956 009c 0B4B     		ldr	r3, .L53+16
 957 009e 1B88     		ldrh	r3, [r3]
 958              	.LVL126:
 430:Src/main.c    ****     if (g < 0)
 959              		.loc 1 430 0
 960 00a0 A542     		cmp	r5, r4
 961 00a2 01DA     		bge	.L50
 431:Src/main.c    ****     {
 432:Src/main.c    ****         lspeed = LEFT_SPEED - g;
 962              		.loc 1 432 0
 963 00a4 491B     		subs	r1, r1, r5
 964              	.LVL127:
 965 00a6 02E0     		b	.L51
 966              	.L50:
 433:Src/main.c    ****     }
 434:Src/main.c    ****     else if (g > 0)
 967              		.loc 1 434 0
 968 00a8 002D     		cmp	r5, #0
 969 00aa 00DD     		ble	.L51
 435:Src/main.c    ****     {
 436:Src/main.c    ****         rspeed = RIGHT_SPEED + g;
 970              		.loc 1 436 0
 971 00ac 2B44     		add	r3, r3, r5
 972              	.LVL128:
 973              	.L51:
 437:Src/main.c    ****     }
 438:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, lspeed);
 974              		.loc 1 438 0
 975 00ae 084A     		ldr	r2, .L53+20
 976 00b0 1268     		ldr	r2, [r2]
 977 00b2 5163     		str	r1, [r2, #52]
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 26


 439:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, rspeed);
 978              		.loc 1 439 0
 979 00b4 D363     		str	r3, [r2, #60]
 440:Src/main.c    **** }
 980              		.loc 1 440 0
 981 00b6 06B0     		add	sp, sp, #24
 982              	.LCFI12:
 983              		.cfi_def_cfa_offset 16
 984              		@ sp needed
 985 00b8 70BD     		pop	{r4, r5, r6, pc}
 986              	.LVL129:
 987              	.L54:
 988 00ba 00BF     		.align	2
 989              	.L53:
 990 00bc 00040240 		.word	1073873920
 991 00c0 00000000 		.word	htim9
 992 00c4 38000000 		.word	.LC7
 993 00c8 00000000 		.word	LEFT_SPEED
 994 00cc 00000000 		.word	RIGHT_SPEED
 995 00d0 00000000 		.word	htim1
 996              		.cfi_endproc
 997              	.LFE131:
 999              		.section	.text._Error_Handler,"ax",%progbits
 1000              		.align	2
 1001              		.global	_Error_Handler
 1002              		.thumb
 1003              		.thumb_func
 1005              	_Error_Handler:
 1006              	.LFB132:
 441:Src/main.c    **** 
 442:Src/main.c    **** /* USER CODE END 4 */
 443:Src/main.c    **** 
 444:Src/main.c    **** /**
 445:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 446:Src/main.c    ****  * @param  file: The file name as string.
 447:Src/main.c    ****  * @param  line: The line in file as a number.
 448:Src/main.c    ****  * @retval None
 449:Src/main.c    ****  */
 450:Src/main.c    **** void _Error_Handler(char *file, int line)
 451:Src/main.c    **** {
 1007              		.loc 1 451 0
 1008              		.cfi_startproc
 1009              		@ Volatile: function does not return.
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 1013              	.LVL130:
 1014              	.L56:
 452:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 453:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 454:Src/main.c    ****     while (1)
 455:Src/main.c    ****     {
 456:Src/main.c    ****     }
 1015              		.loc 1 456 0 discriminator 1
 1016 0000 FEE7     		b	.L56
 1017              		.cfi_endproc
 1018              	.LFE132:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 27


 1020 0002 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 1021              		.align	2
 1022              		.global	SystemClock_Config
 1023              		.thumb
 1024              		.thumb_func
 1026              	SystemClock_Config:
 1027              	.LFB125:
 169:Src/main.c    **** 
 1028              		.loc 1 169 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 80
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032 0000 00B5     		push	{lr}
 1033              	.LCFI13:
 1034              		.cfi_def_cfa_offset 4
 1035              		.cfi_offset 14, -4
 1036 0002 95B0     		sub	sp, sp, #84
 1037              	.LCFI14:
 1038              		.cfi_def_cfa_offset 88
 1039              	.LBB5:
 176:Src/main.c    **** 
 1040              		.loc 1 176 0
 1041 0004 0022     		movs	r2, #0
 1042 0006 0192     		str	r2, [sp, #4]
 1043 0008 294B     		ldr	r3, .L61
 1044 000a 196C     		ldr	r1, [r3, #64]
 1045 000c 41F08051 		orr	r1, r1, #268435456
 1046 0010 1964     		str	r1, [r3, #64]
 1047 0012 1B6C     		ldr	r3, [r3, #64]
 1048 0014 03F08053 		and	r3, r3, #268435456
 1049 0018 0193     		str	r3, [sp, #4]
 1050 001a 019B     		ldr	r3, [sp, #4]
 1051              	.LBE5:
 1052              	.LBB6:
 178:Src/main.c    **** 
 1053              		.loc 1 178 0
 1054 001c 0292     		str	r2, [sp, #8]
 1055 001e 2549     		ldr	r1, .L61+4
 1056 0020 0B68     		ldr	r3, [r1]
 1057 0022 23F44043 		bic	r3, r3, #49152
 1058 0026 43F40043 		orr	r3, r3, #32768
 1059 002a 0B60     		str	r3, [r1]
 1060 002c 0B68     		ldr	r3, [r1]
 1061 002e 03F44043 		and	r3, r3, #49152
 1062 0032 0293     		str	r3, [sp, #8]
 1063 0034 029B     		ldr	r3, [sp, #8]
 1064              	.LBE6:
 182:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1065              		.loc 1 182 0
 1066 0036 0223     		movs	r3, #2
 1067 0038 0893     		str	r3, [sp, #32]
 183:Src/main.c    ****     RCC_OscInitStruct.HSICalibrationValue = 16;
 1068              		.loc 1 183 0
 1069 003a 0121     		movs	r1, #1
 1070 003c 0B91     		str	r1, [sp, #44]
 184:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1071              		.loc 1 184 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 28


 1072 003e 1021     		movs	r1, #16
 1073 0040 0C91     		str	r1, [sp, #48]
 185:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1074              		.loc 1 185 0
 1075 0042 0E93     		str	r3, [sp, #56]
 186:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 1076              		.loc 1 186 0
 1077 0044 0F92     		str	r2, [sp, #60]
 187:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 72;
 1078              		.loc 1 187 0
 1079 0046 0822     		movs	r2, #8
 1080 0048 1092     		str	r2, [sp, #64]
 188:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1081              		.loc 1 188 0
 1082 004a 4822     		movs	r2, #72
 1083 004c 1192     		str	r2, [sp, #68]
 189:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 4;
 1084              		.loc 1 189 0
 1085 004e 1293     		str	r3, [sp, #72]
 190:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1086              		.loc 1 190 0
 1087 0050 0423     		movs	r3, #4
 1088 0052 1393     		str	r3, [sp, #76]
 191:Src/main.c    ****     {
 1089              		.loc 1 191 0
 1090 0054 08A8     		add	r0, sp, #32
 1091 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1092              	.LVL131:
 1093 005a 18B1     		cbz	r0, .L58
 193:Src/main.c    ****     }
 1094              		.loc 1 193 0
 1095 005c 1648     		ldr	r0, .L61+8
 1096 005e C121     		movs	r1, #193
 1097 0060 FFF7FEFF 		bl	_Error_Handler
 1098              	.LVL132:
 1099              	.L58:
 198:Src/main.c    ****         |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1100              		.loc 1 198 0
 1101 0064 0F23     		movs	r3, #15
 1102 0066 0393     		str	r3, [sp, #12]
 200:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1103              		.loc 1 200 0
 1104 0068 0221     		movs	r1, #2
 1105 006a 0491     		str	r1, [sp, #16]
 201:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1106              		.loc 1 201 0
 1107 006c 0023     		movs	r3, #0
 1108 006e 0593     		str	r3, [sp, #20]
 202:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1109              		.loc 1 202 0
 1110 0070 4FF48052 		mov	r2, #4096
 1111 0074 0692     		str	r2, [sp, #24]
 203:Src/main.c    **** 
 1112              		.loc 1 203 0
 1113 0076 0793     		str	r3, [sp, #28]
 205:Src/main.c    ****     {
 1114              		.loc 1 205 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 29


 1115 0078 03A8     		add	r0, sp, #12
 1116 007a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1117              	.LVL133:
 1118 007e 18B1     		cbz	r0, .L59
 207:Src/main.c    ****     }
 1119              		.loc 1 207 0
 1120 0080 0D48     		ldr	r0, .L61+8
 1121 0082 CF21     		movs	r1, #207
 1122 0084 FFF7FEFF 		bl	_Error_Handler
 1123              	.LVL134:
 1124              	.L59:
 212:Src/main.c    **** 
 1125              		.loc 1 212 0
 1126 0088 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1127              	.LVL135:
 1128 008c 0B4B     		ldr	r3, .L61+12
 1129 008e A3FB0030 		umull	r3, r0, r3, r0
 1130 0092 8009     		lsrs	r0, r0, #6
 1131 0094 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1132              	.LVL136:
 216:Src/main.c    **** 
 1133              		.loc 1 216 0
 1134 0098 0420     		movs	r0, #4
 1135 009a FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1136              	.LVL137:
 219:Src/main.c    **** }
 1137              		.loc 1 219 0
 1138 009e 4FF0FF30 		mov	r0, #-1
 1139 00a2 0021     		movs	r1, #0
 1140 00a4 0A46     		mov	r2, r1
 1141 00a6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1142              	.LVL138:
 220:Src/main.c    **** 
 1143              		.loc 1 220 0
 1144 00aa 15B0     		add	sp, sp, #84
 1145              	.LCFI15:
 1146              		.cfi_def_cfa_offset 4
 1147              		@ sp needed
 1148 00ac 5DF804FB 		ldr	pc, [sp], #4
 1149              	.L62:
 1150              		.align	2
 1151              	.L61:
 1152 00b0 00380240 		.word	1073887232
 1153 00b4 00700040 		.word	1073770496
 1154 00b8 64000000 		.word	.LC13
 1155 00bc D34D6210 		.word	274877907
 1156              		.cfi_endproc
 1157              	.LFE125:
 1159              		.section	.text.main,"ax",%progbits
 1160              		.align	2
 1161              		.global	main
 1162              		.thumb
 1163              		.thumb_func
 1165              	main:
 1166              	.LFB124:
  99:Src/main.c    ****     /* USER CODE BEGIN 1 */
 1167              		.loc 1 99 0
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 30


 1168              		.cfi_startproc
 1169              		@ Volatile: function does not return.
 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 1172 0000 08B5     		push	{r3, lr}
 1173              	.LCFI16:
 1174              		.cfi_def_cfa_offset 8
 1175              		.cfi_offset 3, -8
 1176              		.cfi_offset 14, -4
 107:Src/main.c    **** 
 1177              		.loc 1 107 0
 1178 0002 FFF7FEFF 		bl	HAL_Init
 1179              	.LVL139:
 114:Src/main.c    **** 
 1180              		.loc 1 114 0
 1181 0006 FFF7FEFF 		bl	SystemClock_Config
 1182              	.LVL140:
 121:Src/main.c    ****     MX_DMA_Init();
 1183              		.loc 1 121 0
 1184 000a FFF7FEFF 		bl	MX_GPIO_Init
 1185              	.LVL141:
 122:Src/main.c    ****     MX_TIM3_Init();
 1186              		.loc 1 122 0
 1187 000e FFF7FEFF 		bl	MX_DMA_Init
 1188              	.LVL142:
 123:Src/main.c    ****     MX_TIM1_Init();
 1189              		.loc 1 123 0
 1190 0012 FFF7FEFF 		bl	MX_TIM3_Init
 1191              	.LVL143:
 124:Src/main.c    ****     MX_TIM2_Init();
 1192              		.loc 1 124 0
 1193 0016 FFF7FEFF 		bl	MX_TIM1_Init
 1194              	.LVL144:
 125:Src/main.c    ****     MX_USART6_UART_Init();
 1195              		.loc 1 125 0
 1196 001a FFF7FEFF 		bl	MX_TIM2_Init
 1197              	.LVL145:
 126:Src/main.c    ****     MX_ADC1_Init();
 1198              		.loc 1 126 0
 1199 001e FFF7FEFF 		bl	MX_USART6_UART_Init
 1200              	.LVL146:
 127:Src/main.c    ****     MX_I2C1_Init();
 1201              		.loc 1 127 0
 1202 0022 FFF7FEFF 		bl	MX_ADC1_Init
 1203              	.LVL147:
 128:Src/main.c    ****     MX_TIM4_Init();
 1204              		.loc 1 128 0
 1205 0026 FFF7FEFF 		bl	MX_I2C1_Init
 1206              	.LVL148:
 129:Src/main.c    ****     MX_TIM9_Init();
 1207              		.loc 1 129 0
 1208 002a FFF7FEFF 		bl	MX_TIM4_Init
 1209              	.LVL149:
 130:Src/main.c    ****     MX_TIM5_Init();
 1210              		.loc 1 130 0
 1211 002e FFF7FEFF 		bl	MX_TIM9_Init
 1212              	.LVL150:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 31


 131:Src/main.c    ****     /* USER CODE BEGIN 2 */
 1213              		.loc 1 131 0
 1214 0032 FFF7FEFF 		bl	MX_TIM5_Init
 1215              	.LVL151:
 135:Src/main.c    ****     HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1216              		.loc 1 135 0
 1217 0036 1248     		ldr	r0, .L66
 1218 0038 1821     		movs	r1, #24
 1219 003a FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1220              	.LVL152:
 136:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 1221              		.loc 1 136 0
 1222 003e 1148     		ldr	r0, .L66+4
 1223 0040 1821     		movs	r1, #24
 1224 0042 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1225              	.LVL153:
 137:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1226              		.loc 1 137 0
 1227 0046 104C     		ldr	r4, .L66+8
 1228 0048 2046     		mov	r0, r4
 1229 004a 0821     		movs	r1, #8
 1230 004c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1231              	.LVL154:
 138:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1232              		.loc 1 138 0
 1233 0050 2046     		mov	r0, r4
 1234 0052 0421     		movs	r1, #4
 1235 0054 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1236              	.LVL155:
 139:Src/main.c    ****     HAL_TIM_Base_Start(&htim9);
 1237              		.loc 1 139 0
 1238 0058 2046     		mov	r0, r4
 1239 005a 0021     		movs	r1, #0
 1240 005c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1241              	.LVL156:
 140:Src/main.c    **** 
 1242              		.loc 1 140 0
 1243 0060 0A48     		ldr	r0, .L66+12
 1244 0062 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1245              	.LVL157:
 143:Src/main.c    ****     print("Starting...", 0);
 1246              		.loc 1 143 0
 1247 0066 FFF7FEFF 		bl	ssd1306_Init
 1248              	.LVL158:
 144:Src/main.c    **** 
 1249              		.loc 1 144 0
 1250 006a 0948     		ldr	r0, .L66+16
 1251 006c 0021     		movs	r1, #0
 1252 006e FFF7FEFF 		bl	print
 1253              	.LVL159:
 1254              	.L64:
 152:Src/main.c    ****             pi_navigation();
 1255              		.loc 1 152 0
 1256 0072 084B     		ldr	r3, .L66+20
 1257 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1258 0076 012B     		cmp	r3, #1
 1259 0078 FBD1     		bne	.L64
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 32


 153:Src/main.c    ****         }
 1260              		.loc 1 153 0
 1261 007a FFF7FEFF 		bl	pi_navigation
 1262              	.LVL160:
 1263              	.L67:
 1264 007e 00BF     		.align	2
 1265              	.L66:
 1266 0080 00000000 		.word	htim4
 1267 0084 00000000 		.word	htim5
 1268 0088 00000000 		.word	htim3
 1269 008c 00000000 		.word	htim9
 1270 0090 70000000 		.word	.LC14
 1271 0094 00000000 		.word	PI_INT_STATE
 1272              		.cfi_endproc
 1273              	.LFE124:
 1275              		.comm	read_value,12288,4
 1276              		.comm	adc_buffer,12288,4
 1277              		.comm	RIGHT_SPEED,2,2
 1278              		.comm	LEFT_SPEED,2,2
 1279              		.comm	last_time,4,4
 1280              		.section	.rodata.str1.4,"aMS",%progbits,1
 1281              		.align	2
 1282              	.LC0:
 1283 0000 25642E25 		.ascii	"%d.%d\012\000"
 1283      640A00
 1284 0007 00       		.space	1
 1285              	.LC1:
 1286 0008 25642E25 		.ascii	"%d.%d\000"
 1286      6400
 1287 000e 0000     		.space	2
 1288              	.LC2:
 1289 0010 5069204E 		.ascii	"Pi Nav\000"
 1289      617600
 1290 0017 00       		.space	1
 1291              	.LC3:
 1292 0018 4C3A2025 		.ascii	"L: %lu\000"
 1292      6C7500
 1293 001f 00       		.space	1
 1294              	.LC4:
 1295 0020 524C2025 		.ascii	"RL %lu\000"
 1295      6C7500
 1296 0027 00       		.space	1
 1297              	.LC5:
 1298 0028 53746172 		.ascii	"Starting\000"
 1298      74696E67 
 1298      00
 1299 0031 000000   		.space	3
 1300              	.LC6:
 1301 0034 256C7500 		.ascii	"%lu\000"
 1302              	.LC7:
 1303 0038 256400   		.ascii	"%d\000"
 1304 003b 00       		.space	1
 1305              	.LC8:
 1306 003c 5020256C 		.ascii	"P %lu\000"
 1306      7500
 1307 0042 0000     		.space	2
 1308              	.LC9:
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 33


 1309 0044 4420256C 		.ascii	"D %lu\000"
 1309      7500
 1310 004a 0000     		.space	2
 1311              	.LC10:
 1312 004c 4920256C 		.ascii	"I %lu\000"
 1312      7500
 1313 0052 0000     		.space	2
 1314              	.LC11:
 1315 0054 4C202575 		.ascii	"L %u\000"
 1315      00
 1316 0059 000000   		.space	3
 1317              	.LC12:
 1318 005c 52202575 		.ascii	"R %u\000"
 1318      00
 1319 0061 000000   		.space	3
 1320              	.LC13:
 1321 0064 5372632F 		.ascii	"Src/main.c\000"
 1321      6D61696E 
 1321      2E6300
 1322 006f 00       		.space	1
 1323              	.LC14:
 1324 0070 53746172 		.ascii	"Starting...\000"
 1324      74696E67 
 1324      2E2E2E00 
 1325              		.text
 1326              	.Letext0:
 1327              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1328              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 1329              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 1330              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 1331              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1332              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1333              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1334              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1335              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1336              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1337              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1338              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1339              		.file 14 "Inc/fonts.h"
 1340              		.file 15 "Inc/ssd1306.h"
 1341              		.file 16 "Inc/pid.h"
 1342              		.file 17 "Drivers/CMSIS/Include/core_cm4.h"
 1343              		.file 18 "Inc/adc.h"
 1344              		.file 19 "Inc/tim.h"
 1345              		.file 20 "Inc/usart.h"
 1346              		.file 21 "Inc/extern_vars.h"
 1347              		.file 22 "Inc/filter.h"
 1348              		.file 23 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 1349              		.file 24 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 1350              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1351              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1352              		.file 27 "Inc/gpio.h"
 1353              		.file 28 "Inc/dma.h"
 1354              		.file 29 "Inc/i2c.h"
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:21     .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:26     .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:50     .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000003000 read_value
                            *COM*:0000000000003000 adc_buffer
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:56     .text.calculate_heading:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:61     .text.calculate_heading:0000000000000000 calculate_heading
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:88     .text.frequency_comparison:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:93     .text.frequency_comparison:0000000000000000 frequency_comparison
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:289    .text.frequency_comparison:000000000000012c $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:301    .text.print:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:306    .text.print:0000000000000000 print
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:353    .text.print:0000000000000034 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:358    .text.pi_navigation:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:363    .text.pi_navigation:0000000000000000 pi_navigation
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:478    .text.pi_navigation:0000000000000088 $d
                            *COM*:0000000000000002 LEFT_SPEED
                            *COM*:0000000000000002 RIGHT_SPEED
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:491    .text.menu:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:496    .text.menu:0000000000000000 menu
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:809    .text.menu:00000000000001c8 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:826    .text.do_pid:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:831    .text.do_pid:0000000000000000 do_pid
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:990    .text.do_pid:00000000000000bc $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:1000   .text._Error_Handler:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:1005   .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:1021   .text.SystemClock_Config:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:1026   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:1152   .text.SystemClock_Config:00000000000000b0 $d
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:1160   .text.main:0000000000000000 $t
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:1165   .text.main:0000000000000000 main
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:1266   .text.main:0000000000000080 $d
                            *COM*:0000000000000004 last_time
/var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s:1281   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
__aeabi_d2iz
__aeabi_i2d
__aeabi_dsub
__aeabi_dmul
__aeabi_dcmpgt
HAL_ADC_Start_DMA
HAL_Delay
goertzel
sprintf
strlen
HAL_UART_Transmit
HAL_ADC_Stop_DMA
hadc1
IR_INT_STATE
huart6
ssd1306_Fill
ssd1306_SetCursor
ARM GAS  /var/folders/68/n33lqcg953z5y1x0pvkj58xc0000gn/T//ccMlvVRu.s 			page 35


ssd1306_WriteString
ssd1306_UpdateScreen
Font_7x10
htim1
HAL_GPIO_ReadPin
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
pid_Init
pid_GetGain
htim9
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM3_Init
MX_TIM1_Init
MX_TIM2_Init
MX_USART6_UART_Init
MX_ADC1_Init
MX_I2C1_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM5_Init
HAL_TIM_Encoder_Start
HAL_TIM_Base_Start
ssd1306_Init
htim4
htim5
htim3
PI_INT_STATE
